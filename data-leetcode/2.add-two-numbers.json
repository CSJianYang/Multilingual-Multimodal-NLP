[
    {
        "title": "Add Two Numbers",
        "question_content": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n&nbsp;\nExample 1:\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\nExample 2:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\nExample 3:\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\n&nbsp;\nConstraints:\n\n\tThe number of nodes in each linked list is in the range [1, 100].\n\t0 <= Node.val <= 9\n\tIt is guaranteed that the list represents a number that does not have leading zeros.",
        "solutions": [
            {
                "id": 1340,
                "title": "a-summary-about-how-to-solve-linked-list-problem-c",
                "content": "### Description\\nOne of the basic structures in algorithm which can be used to achieve lots of funny algorithms and problems. \\n\\n### Problems\\nThere will be some of the most typical problems in this aspect, which I believe almost covers all the basic techniques that you need to solve a linked list problem.\\n\\n#### Remove Duplicates from Sorted List\\nGiven a sorted linked list, delete all duplicates such that each element appear only once.\\n\\n> For example,\\nGiven 1->1->2, return 1->2.\\nGiven 1->1->2->3->3, return 1->2->3.\\n\\n##### Solution\\n\\nWe can just solve it like in an array using another index to collect the valid nodes. Here, once I made a serious mistake inserting extra `;` after `while` which directly result in an in-debuggeable situation.\\n\\n```\\nListNode* deleteDuplicates(ListNode* head) {\\n    if(!head) return head;\\n    ListNode *t = head, *p = head->next;\\n    int pre = head->val;\\n    while(p) {\\n        if(pre != p->val) {\\n            t->next = p;\\n            pre = p->val;\\n            t = t->next;\\n        }\\n        p = p->next;\\n    }\\n    t->next = NULL;\\n    return head;\\n}\\n```\\n#### Remove Duplicates from Sorted List II\\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\\n\\n> For example,\\nGiven 1->2->3->3->4->4->5, return 1->2->5.\\nGiven 1->1->1->2->3, return 2->3.\\n\\n##### Solution\\n###### Iterative\\n```\\nListNode* deleteDuplicates(ListNode* head) {\\n\\tListNode* dummy = new ListNode(0);\\n\\tdummy->next = head;\\n\\tListNode* cur = dummy;\\n\\tint duplicate;\\n\\twhile (cur->next && cur->next->next) {\\n\\t\\tif (cur->next->val == cur->next->next->val) {\\n\\t\\t\\tduplicate = cur->next->val;\\n\\t\\t\\twhile (cur->next && cur->next->val == duplicate) \\n\\t\\t\\t\\tcur->next = cur->next->next;\\n\\t\\t}\\n\\t\\telse cur = cur->next;\\n\\t}\\n\\treturn dummy->next;\\n}\\n```\\n###### Recursive\\n```\\nListNode* deleteDuplicates(ListNode* head) {\\n    if (!head) return 0;\\n    if (!head->next) return head;\\n    int val = head->val;\\n    ListNode* p = head->next;\\n    if (p->val != val) { head->next = deleteDuplicates(p); return head;} \\n    else { \\n        while (p && p->val == val) p = p->next; \\n        return deleteDuplicates(p); \\n    }\\n}\\n```\\n\\n#### Palindrome Linked List\\nGiven a singly linked list, determine if it is a palindrome.  \\n\\n> Follow up:\\nCould you do it in O(n) time and O(1) space?\\n\\n##### Solution\\nConverting the linked list into an array to simplify the checking.\\n```\\nbool isPalindrome(ListNode* head) {\\n    vector<int> v;\\n    while(head) {\\n        v.push_back(head->val);\\n        head = head->next;\\n    }\\n    for(int i = 0; i < v.size()/2; ++i) {\\n        if(v[i] != v[v.size()-i-1]) return false;\\n    }\\n    return true;\\n}\\n```\\n\\nJust do it using linked list\\n\\n```\\nbool isPalindrome(ListNode* head) {\\n    if(!head || !head->next) return true;\\n    ListNode *slow = head, *fast = head->next;\\n    while(fast && fast->next) {//split into two halves while the first half can be one-node longer;\\n        slow = slow->next;\\n        fast = fast->next->next;\\n    }\\n    fast = slow->next;\\n    slow->next = NULL;\\n    ListNode newHead(0); //reverse the second half;\\n    ListNode *next = NULL, *p = fast;\\n    while(p) {\\n        next = p->next;\\n        p->next = newHead.next;\\n        newHead.next = p;\\n        p = next;\\n    }\\n    fast = newHead.next; //compare the two lists;\\n    while(fast) {\\n        if(fast->val != head->val) return false;\\n        fast = fast->next;\\n        head = head->next;\\n    }\\n    return fast == NULL;\\n}\\n```\\n\\n#### Rotate List\\nGiven a list, rotate the list to the right by k places, where k is non-negative.\\n\\n> For example:\\nGiven 1->2->3->4->5->NULL and k = 2,\\nreturn 4->5->1->2->3->NULL.\\n\\n##### Solution\\n\\n```\\nListNode* rotateRight(ListNode* head, int k) {\\n    if(!head) return head;\\n    int len = 1;\\n    ListNode *p = head;\\n    while(p->next) { len++; p = p->next; }\\n    p->next = head;\\n    if(k %= len)\\n        for(int i = 0; i < len-k; ++i, p=p->next) ; \\n    ListNode* newHead = p->next;\\n    p->next = NULL;\\n    return newHead;\\n}\\n```\\n\\n#### Add Two Numbers\\nYou are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\\n\\n> Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\\nOutput: 7 -> 0 -> 8\\n\\n##### Solution\\n\\n###### Iterative \\n\\n```\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    int c = 0;\\n    ListNode newHead(0);\\n    ListNode *t = &newHead;\\n    while(c || l1 || l2) {\\n        c += (l1? l1->val : 0) + (l2? l2->val : 0);\\n        t->next = new ListNode(c%10);\\n        t = t->next;\\n        c /= 10;\\n        if(l1) l1 = l1->next;\\n        if(l2) l2 = l2->next;\\n    }\\n    return newHead.next;\\n}\\n```\\n\\n###### Recursive\\n```\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    if(!l1 && !l2) return NULL;\\n    int c = (l1? l1->val:0) + (l2? l2->val:0);\\n    ListNode *newHead = new ListNode(c%10), *next = l1? l1->next:NULL;\\n    c /= 10;\\n    if(next) next->val += c;\\n    else if(c) next = new ListNode(c);\\n    newHead->next = addTwoNumbers(l2? l2->next:NULL, next);\\n    return newHead;\\n}\\n```\\n\\n#### Reverse Linked List II\\nReverse a linked list from position m to n. Do it in-place and in one-pass.\\n\\n> For example:\\nGiven 1->2->3->4->5->NULL, m = 2 and n = 4, \\nreturn 1->4->3->2->5->NULL.\\n\\n> Note: Given m, n satisfy the following condition: 1 \\u2264 m \\u2264 n \\u2264 length of list.\\n\\n##### Solution\\n\\n```\\nListNode* reverseBetween(ListNode* head, int m, int n) {\\n    ListNode newHead(0);\\n    newHead.next = head;\\n    ListNode *pre = &newHead, *cur = head, *next = NULL;\\n    int i = 1;\\n    while(i < n) {\\n        if(i++ < m) { pre = cur; cur = cur->next; }\\n        else { \\n            next = cur->next; \\n            cur->next = cur->next->next; \\n            next->next = pre->next; \\n            pre->next = next; \\n        }\\n    }\\n    return newHead.next;\\n}\\n```\\n\\n#### Linked List Cycle II\\nGiven a linked list, return the node where the cycle begins. If there is no cycle, return null. Note: Do not modify the linked list.  \\n\\n> Follow up:\\nCan you solve it without using extra space?\\n\\n##### Solution\\nActually we can just use `set.insert(key).second` to check but it will take up O(n) space which is quite an awful waste, so here we just going to check the circle and then locate it.\\n\\n- If there is a circle then once the slow meets the fast the first time, there will be a formula as follows: a+b+kl = 2(a+b) -> kl-b = a (a is the length between the head and the start of the circle, b is the steps the slow pointer moves in the circle while l is the length of the circle).\\n- After that we can reset the fast and slow down the fast (same speed as the slow using kl-b = a) then once they meet again, the location will be the start of the circle.\\n\\nAt last we take up constant space to solve this and traverse the linked list twice at most (as for the slow pointer).\\n\\n```\\nListNode *detectCycle(ListNode *head) {\\n    ListNode *slow = head, *fast = head;   \\n    while(fast && fast->next) {\\n        slow = slow->next;\\n        fast = fast->next->next;\\n        if(slow == fast) break;\\n    }\\n    if(slow != fast) return NULL;\\n    fast = head;\\n    while(fast && fast->next) {\\n        if(slow == fast) return slow;\\n        slow = slow->next;\\n        fast = fast->next;\\n    }\\n    return NULL;\\n}\\n```\\n\\n#### Copy List with Random Pointer\\n linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.  \\nReturn a deep copy of the list.\\n\\n[test](https://leetcode.com/problems/copy-list-with-random-pointer/)\\n\\n##### Solution\\n\\n\\n###### Recursive\\n\\n```\\nclass Solution {\\n    unordered_map<RandomListNode*, RandomListNode*> cloneMap;\\n    RandomListNode *helper(RandomListNode* head){\\n        if(head == NULL) return NULL;\\n        if(cloneMap.count(head)) return cloneMap[head];\\n        RandomListNode *cloned = new RandomListNode(head->label);\\n        cloneMap[head] = cloned; //crucial;\\n        cloned->next = helper(head->next);\\n        cloned->random = helper(head->random);\\n        return cloned;\\n    }\\npublic:\\n    RandomListNode *copyRandomList(RandomListNode *head) {\\n        return helper(head);\\n    } \\n};\\n```\\n\\n###### Iterative\\n\\n```\\nRandomListNode *copyRandomList(RandomListNode *head) {\\n\\tRandomListNode newHead(0), *p = head, *t = NULL;\\n\\twhile(p) {\\n\\t\\tRandomListNode *cloned = new RandomListNode(p->label);\\n\\t\\tcloned->next = p->next;\\n\\t\\tp->next = cloned;\\n\\t\\tp = cloned->next;\\n\\t}\\n\\tp = head;\\n\\twhile(p && p->next) {\\n\\t\\tif(p->random) p->next->random = p->random->next;\\n\\t\\tp = p->next->next;\\n\\t}\\n\\tp = head;\\n\\tt = &newHead;\\n\\twhile(p && p->next) {\\n\\t\\tt->next = p->next;\\n\\t\\tp->next = p->next->next;\\n\\t\\tt = t->next;\\n\\t\\tp = p->next;\\n\\t}\\n\\tt->next = NULL;\\n\\treturn newHead.next;\\n}\\n```\\n\\n#### Reverse Nodes in k-Group\\nGiven a linked list, reverse the nodes of a linked list k at a time and return its modified list.  If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.  You may not alter the values in the nodes, only nodes itself may be changed.  Only constant memory is allowed.\\n\\n> For example,\\nGiven this linked list: 1->2->3->4->5 \\nFor k = 2, you should return: 2->1->4->3->5 \\nFor k = 3, you should return: 3->2->1->4->5\\n\\n##### Solution\\n\\n```\\nListNode* reverseKGroup(ListNode* head, int k) {\\n\\tif(!head || !head->next) return head;\\n\\tListNode newHead(0);\\n\\tListNode *pre = &newHead, *cur = head, *next = NULL;\\n\\tnewHead.next = head;\\n\\tint len = 0;\\n\\tfor(ListNode *p = head; p; p = p->next) len++;\\n\\tint times = len/k;\\n\\twhile(times) {\\n\\t\\tfor(int i = 1; i < k; ++i) {\\n\\t\\t\\tnext = cur->next;\\n\\t\\t\\tcur->next = cur->next->next;\\n\\t\\t\\tnext->next = pre->next;\\n\\t\\t\\tpre->next = next;\\n\\t\\t\\tif(i == k-1) {\\n\\t\\t\\t\\tpre = cur;\\n\\t\\t\\t\\tcur = cur->next;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttimes--;\\n\\t}\\n\\treturn newHead.next;\\n}\\n```\\n\\nAlways welcome new ideas and `practical` tricks, just leave them in the comments!",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nListNode* deleteDuplicates(ListNode* head) {\\n    if(!head) return head;\\n    ListNode *t = head, *p = head->next;\\n    int pre = head->val;\\n    while(p) {\\n        if(pre != p->val) {\\n            t->next = p;\\n            pre = p->val;\\n            t = t->next;\\n        }\\n        p = p->next;\\n    }\\n    t->next = NULL;\\n    return head;\\n}\\n```\n```\\nListNode* deleteDuplicates(ListNode* head) {\\n\\tListNode* dummy = new ListNode(0);\\n\\tdummy->next = head;\\n\\tListNode* cur = dummy;\\n\\tint duplicate;\\n\\twhile (cur->next && cur->next->next) {\\n\\t\\tif (cur->next->val == cur->next->next->val) {\\n\\t\\t\\tduplicate = cur->next->val;\\n\\t\\t\\twhile (cur->next && cur->next->val == duplicate) \\n\\t\\t\\t\\tcur->next = cur->next->next;\\n\\t\\t}\\n\\t\\telse cur = cur->next;\\n\\t}\\n\\treturn dummy->next;\\n}\\n```\n```\\nListNode* deleteDuplicates(ListNode* head) {\\n    if (!head) return 0;\\n    if (!head->next) return head;\\n    int val = head->val;\\n    ListNode* p = head->next;\\n    if (p->val != val) { head->next = deleteDuplicates(p); return head;} \\n    else { \\n        while (p && p->val == val) p = p->next; \\n        return deleteDuplicates(p); \\n    }\\n}\\n```\n```\\nbool isPalindrome(ListNode* head) {\\n    vector<int> v;\\n    while(head) {\\n        v.push_back(head->val);\\n        head = head->next;\\n    }\\n    for(int i = 0; i < v.size()/2; ++i) {\\n        if(v[i] != v[v.size()-i-1]) return false;\\n    }\\n    return true;\\n}\\n```\n```\\nbool isPalindrome(ListNode* head) {\\n    if(!head || !head->next) return true;\\n    ListNode *slow = head, *fast = head->next;\\n    while(fast && fast->next) {//split into two halves while the first half can be one-node longer;\\n        slow = slow->next;\\n        fast = fast->next->next;\\n    }\\n    fast = slow->next;\\n    slow->next = NULL;\\n    ListNode newHead(0); //reverse the second half;\\n    ListNode *next = NULL, *p = fast;\\n    while(p) {\\n        next = p->next;\\n        p->next = newHead.next;\\n        newHead.next = p;\\n        p = next;\\n    }\\n    fast = newHead.next; //compare the two lists;\\n    while(fast) {\\n        if(fast->val != head->val) return false;\\n        fast = fast->next;\\n        head = head->next;\\n    }\\n    return fast == NULL;\\n}\\n```\n```\\nListNode* rotateRight(ListNode* head, int k) {\\n    if(!head) return head;\\n    int len = 1;\\n    ListNode *p = head;\\n    while(p->next) { len++; p = p->next; }\\n    p->next = head;\\n    if(k %= len)\\n        for(int i = 0; i < len-k; ++i, p=p->next) ; \\n    ListNode* newHead = p->next;\\n    p->next = NULL;\\n    return newHead;\\n}\\n```\n```\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    int c = 0;\\n    ListNode newHead(0);\\n    ListNode *t = &newHead;\\n    while(c || l1 || l2) {\\n        c += (l1? l1->val : 0) + (l2? l2->val : 0);\\n        t->next = new ListNode(c%10);\\n        t = t->next;\\n        c /= 10;\\n        if(l1) l1 = l1->next;\\n        if(l2) l2 = l2->next;\\n    }\\n    return newHead.next;\\n}\\n```\n```\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    if(!l1 && !l2) return NULL;\\n    int c = (l1? l1->val:0) + (l2? l2->val:0);\\n    ListNode *newHead = new ListNode(c%10), *next = l1? l1->next:NULL;\\n    c /= 10;\\n    if(next) next->val += c;\\n    else if(c) next = new ListNode(c);\\n    newHead->next = addTwoNumbers(l2? l2->next:NULL, next);\\n    return newHead;\\n}\\n```\n```\\nListNode* reverseBetween(ListNode* head, int m, int n) {\\n    ListNode newHead(0);\\n    newHead.next = head;\\n    ListNode *pre = &newHead, *cur = head, *next = NULL;\\n    int i = 1;\\n    while(i < n) {\\n        if(i++ < m) { pre = cur; cur = cur->next; }\\n        else { \\n            next = cur->next; \\n            cur->next = cur->next->next; \\n            next->next = pre->next; \\n            pre->next = next; \\n        }\\n    }\\n    return newHead.next;\\n}\\n```\n```\\nListNode *detectCycle(ListNode *head) {\\n    ListNode *slow = head, *fast = head;   \\n    while(fast && fast->next) {\\n        slow = slow->next;\\n        fast = fast->next->next;\\n        if(slow == fast) break;\\n    }\\n    if(slow != fast) return NULL;\\n    fast = head;\\n    while(fast && fast->next) {\\n        if(slow == fast) return slow;\\n        slow = slow->next;\\n        fast = fast->next;\\n    }\\n    return NULL;\\n}\\n```\n```\\nclass Solution {\\n    unordered_map<RandomListNode*, RandomListNode*> cloneMap;\\n    RandomListNode *helper(RandomListNode* head){\\n        if(head == NULL) return NULL;\\n        if(cloneMap.count(head)) return cloneMap[head];\\n        RandomListNode *cloned = new RandomListNode(head->label);\\n        cloneMap[head] = cloned; //crucial;\\n        cloned->next = helper(head->next);\\n        cloned->random = helper(head->random);\\n        return cloned;\\n    }\\npublic:\\n    RandomListNode *copyRandomList(RandomListNode *head) {\\n        return helper(head);\\n    } \\n};\\n```\n```\\nRandomListNode *copyRandomList(RandomListNode *head) {\\n\\tRandomListNode newHead(0), *p = head, *t = NULL;\\n\\twhile(p) {\\n\\t\\tRandomListNode *cloned = new RandomListNode(p->label);\\n\\t\\tcloned->next = p->next;\\n\\t\\tp->next = cloned;\\n\\t\\tp = cloned->next;\\n\\t}\\n\\tp = head;\\n\\twhile(p && p->next) {\\n\\t\\tif(p->random) p->next->random = p->random->next;\\n\\t\\tp = p->next->next;\\n\\t}\\n\\tp = head;\\n\\tt = &newHead;\\n\\twhile(p && p->next) {\\n\\t\\tt->next = p->next;\\n\\t\\tp->next = p->next->next;\\n\\t\\tt = t->next;\\n\\t\\tp = p->next;\\n\\t}\\n\\tt->next = NULL;\\n\\treturn newHead.next;\\n}\\n```\n```\\nListNode* reverseKGroup(ListNode* head, int k) {\\n\\tif(!head || !head->next) return head;\\n\\tListNode newHead(0);\\n\\tListNode *pre = &newHead, *cur = head, *next = NULL;\\n\\tnewHead.next = head;\\n\\tint len = 0;\\n\\tfor(ListNode *p = head; p; p = p->next) len++;\\n\\tint times = len/k;\\n\\twhile(times) {\\n\\t\\tfor(int i = 1; i < k; ++i) {\\n\\t\\t\\tnext = cur->next;\\n\\t\\t\\tcur->next = cur->next->next;\\n\\t\\t\\tnext->next = pre->next;\\n\\t\\t\\tpre->next = next;\\n\\t\\t\\tif(i == k-1) {\\n\\t\\t\\t\\tpre = cur;\\n\\t\\t\\t\\tcur = cur->next;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttimes--;\\n\\t}\\n\\treturn newHead.next;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2759116,
                "title": "c-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(max(l1,l2)).\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n).\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* dummy=new ListNode();\\n        ListNode* temp=dummy;\\n        int carry=0;\\n        while(l1!=NULL || l2!=NULL || carry){\\n            int sum=0;\\n            if(l1!=NULL){\\n                sum+=l1->val;\\n                l1=l1->next;\\n            }\\n            if(l2!=NULL){\\n                sum+=l2->val;\\n                l2=l2->next;\\n            }\\n            sum+=carry;\\n            carry=sum/10;\\n            ListNode* newnode=new ListNode(sum%10);\\n            temp->next=newnode;\\n            temp=temp->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\nif it helps plzz dont\\'t forget to upvote it :)\\n```",
                "solutionTags": [
                    "C++",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* dummy=new ListNode();\\n        ListNode* temp=dummy;\\n        int carry=0;\\n        while(l1!=NULL || l2!=NULL || carry){\\n            int sum=0;\\n            if(l1!=NULL){\\n                sum+=l1->val;\\n                l1=l1->next;\\n            }\\n            if(l2!=NULL){\\n                sum+=l2->val;\\n                l2=l2->next;\\n            }\\n            sum+=carry;\\n            carry=sum/10;\\n            ListNode* newnode=new ListNode(sum%10);\\n            temp->next=newnode;\\n            temp=temp->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\nif it helps plzz dont\\'t forget to upvote it :)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1010,
                "title": "is-this-algorithm-optimal-or-what",
                "content": "    public class Solution {\\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n            ListNode c1 = l1;\\n            ListNode c2 = l2;\\n            ListNode sentinel = new ListNode(0);\\n            ListNode d = sentinel;\\n            int sum = 0;\\n            while (c1 != null || c2 != null) {\\n                sum /= 10;\\n                if (c1 != null) {\\n                    sum += c1.val;\\n                    c1 = c1.next;\\n                }\\n                if (c2 != null) {\\n                    sum += c2.val;\\n                    c2 = c2.next;\\n                }\\n                d.next = new ListNode(sum % 10);\\n                d = d.next;\\n            }\\n            if (sum / 10 == 1)\\n                d.next = new ListNode(1);\\n            return sentinel.next;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n            ListNode c1 = l1;\\n            ListNode c2 = l2;\\n            ListNode sentinel = new ListNode(0);\\n            ListNode d = sentinel;\\n            int sum = 0;\\n            while (c1 != null || c2 != null) {\\n                sum /= 10;\\n                if (c1 != null) {\\n                    sum += c1.val;\\n                    c1 = c1.next;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1016,
                "title": "clear-python-code-straight-forward",
                "content": "    class Solution:\\n    # @return a ListNode\\n    def addTwoNumbers(self, l1, l2):\\n        carry = 0\\n        root = n = ListNode(0)\\n        while l1 or l2 or carry:\\n            v1 = v2 = 0\\n            if l1:\\n                v1 = l1.val\\n                l1 = l1.next\\n            if l2:\\n                v2 = l2.val\\n                l2 = l2.next\\n            carry, val = divmod(v1+v2+carry, 10)\\n            n.next = ListNode(val)\\n            n = n.next\\n        return root.next",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n    # @return a ListNode\\n    def addTwoNumbers(self, l1, l2):\\n        carry = 0\\n        root = n = ListNode(0)\\n        while l1 or l2 or carry:\\n            v1 = v2 = 0\\n            if l1:\\n                v1 = l1.val\\n                l1 = l1.next\\n            if l2:\\n                v2 = l2.val\\n                l2 = l2.next\\n            carry, val = divmod(v1+v2+carry, 10)\\n            n.next = ListNode(val)\\n            n = n.next\\n        return root.next",
                "codeTag": "Java"
            },
            {
                "id": 1835535,
                "title": "java-c-a-very-beautiful-explanation-ever-exists",
                "content": "How\\'s going, Ladies n Gentlemen, today we are going to solve one of the coolest problem **Add Two Numbers**\\n\\nSo, what the problem statement is saying we have given 2 linkedlist we have to add them and get the sum in another linkedlist.\\n\\nWhat, am saying let\\'s understand with an example:-\\n**Input**: l1 = [1,2,4,3], l2 = [5,4,6]\\n**Output**: [6,6,0,4]\\n\\n![image](https://assets.leetcode.com/users/images/a51e18d1-45de-4ba0-aee9-fbb9c40feef1_1646883355.6593215.png)\\n\\nNow let\\'s create another list in which we will get our sum. So, that list intially we will called as dummy list with any value of your choice present in that. *I\\'ll put 0 as we indian has invented that. <^^>*\\n\\nAnd one more last thing, we\\'ll gonna create one pointer and let\\'s say i\\'ll call it **curr** which is pointing on dummy node and traverse along with it\\n\\n![image](https://assets.leetcode.com/users/images/3345cf32-d7df-4225-9ce5-510398aa489c_1646883682.1670015.png)\\n\\nAlright so, here we go ladies n gentlemen, It\\'s time to sum up these node value, for that we will create one another variable let\\'s called it **sum** and put the sum of **l1 & l2** them into our dummy list. So, we start it from all the way left go to all the way right. Now you will ask, dude what about the carry values we get after sum up.\\nWell, hold on i\\'m coming on that point don\\'t worry.\\n\\nSo, for that what you have to do is, we will intialize one more variable name **carry** if we found carry of let\\'s say 10. First we will modulo it like carry = sum % 10 i.e. carry = 10 % 10 i.e. 0 we will add 0 into our node and after that what we will do is get the carry as carry = sum / 10 i.e. carry = 10 / 10 i.e. 1. Now we are having carry as 1. So, in the next node sum of l1 & l2 we will add carry as well.\\n\\nFor sum we will use this formula :- **sum = l1 + l2 + carry**\\n\\nWe did a lot of talk, let\\'s understand it visually:-\\n* 1st step->\\n![image](https://assets.leetcode.com/users/images/c5e427d5-bcf9-42b4-b926-25771dfa7c54_1646884787.030032.png)\\n\\n* 2nd Step->\\n![image](https://assets.leetcode.com/users/images/fdc5533b-d80f-4b71-b755-b645dc126ff6_1646885015.4167643.png)\\n* 3rd Step->\\n![image](https://assets.leetcode.com/users/images/80247d16-8082-4e54-ad15-ed5cfceb3cfb_1646885221.7208884.png)\\n\\nNow I hope Ladies n Gentlemen, you got the crystal clear idea, what we are doing. So, without any further due ***let\\'s code up***\\n\\n**Java**\\n\\n```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode dummy = new ListNode(0); // creating an dummy list\\n        ListNode curr = dummy; // intialising an pointer\\n        int carry = 0; // intialising our carry with 0 intiall\\n        // while loop will run, until l1 OR l2 not reaches null OR if they both reaches null. But our carry has some value in it. \\n\\t\\t// We will add that as well into our list\\n        while(l1 != null || l2 != null || carry == 1){\\n            int sum = 0; // intialising our sum\\n            if(l1 != null){ // adding l1 to our sum & moving l1\\n                sum += l1.val;\\n                l1 = l1.next;\\n            }\\n            if(l2 != null){ // adding l2 to our sum & moving l2\\n                sum += l2.val;\\n                l2 = l2.next;\\n            }\\n            sum += carry; // if we have carry then add it into our sum\\n            carry = sum/10; // if we get carry, then divide it by 10 to get the carry\\n            ListNode node = new ListNode(sum % 10); // the value we\\'ll get by moduloing it, will become as new node so. add it to our list\\n            curr.next = node; // curr will point to that new node if we get\\n            curr = curr.next; // update the current every time\\n        }\\n        return dummy.next; // return dummy.next bcz, we don\\'t want the value we have consider in it intially!!\\n    }\\n}\\n```\\n\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *dummy = new ListNode(0);\\n        ListNode *curr = dummy;\\n        int carry = 0;\\n        \\n        while(l1 != NULL || l2 != NULL || carry == 1){\\n            int sum = 0;\\n            if(l1 != NULL){\\n                sum += l1->val;\\n                l1 = l1->next;\\n            }\\n            if(l2 != NULL){\\n                sum += l2->val;\\n                l2 = l2->next;\\n            }\\n            sum += carry;\\n            carry = sum/10;\\n            ListNode *node = new ListNode(sum % 10);\\n            curr->next = node;\\n            curr = curr->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\n```\\n\\nANALYSIS :-\\n* **Time Complexity :-** BigO(max(N, M)) where N is length of l1 & M is length of l2\\n\\n* **Space Complexity :-** BigO(max(N,M))",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode dummy = new ListNode(0); // creating an dummy list\\n        ListNode curr = dummy; // intialising an pointer\\n        int carry = 0; // intialising our carry with 0 intiall\\n        // while loop will run, until l1 OR l2 not reaches null OR if they both reaches null. But our carry has some value in it. \\n\\t\\t// We will add that as well into our list\\n        while(l1 != null || l2 != null || carry == 1){\\n            int sum = 0; // intialising our sum\\n            if(l1 != null){ // adding l1 to our sum & moving l1\\n                sum += l1.val;\\n                l1 = l1.next;\\n            }\\n            if(l2 != null){ // adding l2 to our sum & moving l2\\n                sum += l2.val;\\n                l2 = l2.next;\\n            }\\n            sum += carry; // if we have carry then add it into our sum\\n            carry = sum/10; // if we get carry, then divide it by 10 to get the carry\\n            ListNode node = new ListNode(sum % 10); // the value we\\'ll get by moduloing it, will become as new node so. add it to our list\\n            curr.next = node; // curr will point to that new node if we get\\n            curr = curr.next; // update the current every time\\n        }\\n        return dummy.next; // return dummy.next bcz, we don\\'t want the value we have consider in it intially!!\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *dummy = new ListNode(0);\\n        ListNode *curr = dummy;\\n        int carry = 0;\\n        \\n        while(l1 != NULL || l2 != NULL || carry == 1){\\n            int sum = 0;\\n            if(l1 != NULL){\\n                sum += l1->val;\\n                l1 = l1->next;\\n            }\\n            if(l2 != NULL){\\n                sum += l2->val;\\n                l2 = l2->next;\\n            }\\n            sum += carry;\\n            carry = sum/10;\\n            ListNode *node = new ListNode(sum % 10);\\n            curr->next = node;\\n            curr = curr->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3675747,
                "title": "beats-100-c-java-python-beginner-friendly",
                "content": "# Intuition:\\nThe Intuition is to iterate through two linked lists representing non-negative integers in reverse order, starting from the least significant digit. It performs digit-wise addition along with a carry value and constructs a new linked list to represent the sum. The process continues until both input lists and the carry value are exhausted. The resulting linked list represents the sum of the input numbers in the correct order.\\n\\n# Explanation: \\n1. Create a placeholder node called `dummyHead` with a value of 0. This node will hold the resulting linked list.\\n2. Initialize a pointer called `tail` and set it to `dummyHead`. This pointer will keep track of the last node in the result list.\\n3. Initialize a variable called `carry` to 0. This variable will store the carry value during addition.\\n4. Start a loop that continues until there are no more digits in both input lists (`l1` and `l2`) and there is no remaining carry value.\\n5. Inside the loop:\\n   - Check if there is a digit in the current node of `l1`. If it exists, assign its value to a variable called `digit1`. Otherwise, set `digit1` to 0.\\n   - Check if there is a digit in the current node of `l2`. If it exists, assign its value to a variable called `digit2`. Otherwise, set `digit2` to 0.\\n   - Add the current digits from `l1` and `l2`, along with the carry value from the previous iteration, and store the sum in a variable called `sum`.\\n   - Calculate the unit digit of `sum` by taking the modulus (`%`) of `sum` by 10. This digit will be placed in a new node for the result.\\n   - Update the `carry` variable by dividing `sum` by 10 and taking the integer division (`/`) part. This gives us the carry value for the next iteration.\\n   - Create a new node with the calculated digit as its value.\\n   - Attach the new node to the `tail` node of the result list.\\n   - Move the `tail` pointer to the newly added node.\\n   - Move to the next nodes in both `l1` and `l2`, if they exist. If either list is exhausted, set the corresponding pointer to `nullptr`.\\n6. After the loop, obtain the actual result list by skipping the `dummyHead` node.\\n7. Delete the `dummyHead` node.\\n8. Return the resulting list.\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* dummyHead = new ListNode(0);\\n        ListNode* tail = dummyHead;\\n        int carry = 0;\\n\\n        while (l1 != nullptr || l2 != nullptr || carry != 0) {\\n            int digit1 = (l1 != nullptr) ? l1->val : 0;\\n            int digit2 = (l2 != nullptr) ? l2->val : 0;\\n\\n            int sum = digit1 + digit2 + carry;\\n            int digit = sum % 10;\\n            carry = sum / 10;\\n\\n            ListNode* newNode = new ListNode(digit);\\n            tail->next = newNode;\\n            tail = tail->next;\\n\\n            l1 = (l1 != nullptr) ? l1->next : nullptr;\\n            l2 = (l2 != nullptr) ? l2->next : nullptr;\\n        }\\n\\n        ListNode* result = dummyHead->next;\\n        delete dummyHead;\\n        return result;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode dummyHead = new ListNode(0);\\n        ListNode tail = dummyHead;\\n        int carry = 0;\\n\\n        while (l1 != null || l2 != null || carry != 0) {\\n            int digit1 = (l1 != null) ? l1.val : 0;\\n            int digit2 = (l2 != null) ? l2.val : 0;\\n\\n            int sum = digit1 + digit2 + carry;\\n            int digit = sum % 10;\\n            carry = sum / 10;\\n\\n            ListNode newNode = new ListNode(digit);\\n            tail.next = newNode;\\n            tail = tail.next;\\n\\n            l1 = (l1 != null) ? l1.next : null;\\n            l2 = (l2 != null) ? l2.next : null;\\n        }\\n\\n        ListNode result = dummyHead.next;\\n        dummyHead.next = null;\\n        return result;\\n    }\\n}\\n```\\n```Python3 []\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        dummyHead = ListNode(0)\\n        tail = dummyHead\\n        carry = 0\\n\\n        while l1 is not None or l2 is not None or carry != 0:\\n            digit1 = l1.val if l1 is not None else 0\\n            digit2 = l2.val if l2 is not None else 0\\n\\n            sum = digit1 + digit2 + carry\\n            digit = sum % 10\\n            carry = sum // 10\\n\\n            newNode = ListNode(digit)\\n            tail.next = newNode\\n            tail = tail.next\\n\\n            l1 = l1.next if l1 is not None else None\\n            l2 = l2.next if l2 is not None else None\\n\\n        result = dummyHead.next\\n        dummyHead.next = None\\n        return result\\n```\\n\\n![CUTE_CAT.png](https://assets.leetcode.com/users/images/aad37c06-5cd4-4eec-8ccc-6ceaae6e4a6d_1687514630.867168.png)\\n\\n**If you are a beginner solve these problems which makes concepts clear for future coding:**\\n1. [Two Sum](https://leetcode.com/problems/two-sum/solutions/3619262/3-method-s-c-java-python-beginner-friendly/)\\n2. [Roman to Integer](https://leetcode.com/problems/roman-to-integer/solutions/3651672/best-method-c-java-python-beginner-friendly/)\\n3. [Palindrome Number](https://leetcode.com/problems/palindrome-number/solutions/3651712/2-method-s-c-java-python-beginner-friendly/)\\n4. [Maximum Subarray](https://leetcode.com/problems/maximum-subarray/solutions/3666304/beats-100-c-java-python-beginner-friendly/)\\n5. [Remove Element](https://leetcode.com/problems/remove-element/solutions/3670940/best-100-c-java-python-beginner-friendly/)\\n6. [Contains Duplicate](https://leetcode.com/problems/contains-duplicate/solutions/3672475/4-method-s-c-java-python-beginner-friendly/)\\n7. [Add Two Numbers](https://leetcode.com/problems/add-two-numbers/solutions/3675747/beats-100-c-java-python-beginner-friendly/)\\n8. [Majority Element](https://leetcode.com/problems/majority-element/solutions/3676530/3-methods-beats-100-c-java-python-beginner-friendly/)\\n9. [Remove Duplicates from Sorted Array](https://leetcode.com/problems/remove-duplicates-from-sorted-array/solutions/3676877/best-method-100-c-java-python-beginner-friendly/)\\n10. **Practice them in a row for better understanding and please Upvote the post for more questions.**\\n\\n\\n**If you found my solution helpful, I would greatly appreciate your upvote, as it would motivate me to continue sharing more solutions.**",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Linked List",
                    "Math"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* dummyHead = new ListNode(0);\\n        ListNode* tail = dummyHead;\\n        int carry = 0;\\n\\n        while (l1 != nullptr || l2 != nullptr || carry != 0) {\\n            int digit1 = (l1 != nullptr) ? l1->val : 0;\\n            int digit2 = (l2 != nullptr) ? l2->val : 0;\\n\\n            int sum = digit1 + digit2 + carry;\\n            int digit = sum % 10;\\n            carry = sum / 10;\\n\\n            ListNode* newNode = new ListNode(digit);\\n            tail->next = newNode;\\n            tail = tail->next;\\n\\n            l1 = (l1 != nullptr) ? l1->next : nullptr;\\n            l2 = (l2 != nullptr) ? l2->next : nullptr;\\n        }\\n\\n        ListNode* result = dummyHead->next;\\n        delete dummyHead;\\n        return result;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode dummyHead = new ListNode(0);\\n        ListNode tail = dummyHead;\\n        int carry = 0;\\n\\n        while (l1 != null || l2 != null || carry != 0) {\\n            int digit1 = (l1 != null) ? l1.val : 0;\\n            int digit2 = (l2 != null) ? l2.val : 0;\\n\\n            int sum = digit1 + digit2 + carry;\\n            int digit = sum % 10;\\n            carry = sum / 10;\\n\\n            ListNode newNode = new ListNode(digit);\\n            tail.next = newNode;\\n            tail = tail.next;\\n\\n            l1 = (l1 != null) ? l1.next : null;\\n            l2 = (l2 != null) ? l2.next : null;\\n        }\\n\\n        ListNode result = dummyHead.next;\\n        dummyHead.next = null;\\n        return result;\\n    }\\n}\\n```\n```Python3 []\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        dummyHead = ListNode(0)\\n        tail = dummyHead\\n        carry = 0\\n\\n        while l1 is not None or l2 is not None or carry != 0:\\n            digit1 = l1.val if l1 is not None else 0\\n            digit2 = l2.val if l2 is not None else 0\\n\\n            sum = digit1 + digit2 + carry\\n            digit = sum % 10\\n            carry = sum // 10\\n\\n            newNode = ListNode(digit)\\n            tail.next = newNode\\n            tail = tail.next\\n\\n            l1 = l1.next if l1 is not None else None\\n            l2 = l2.next if l2 is not None else None\\n\\n        result = dummyHead.next\\n        dummyHead.next = None\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 997,
                "title": "c-sharing-my-11-line-c-solution-can-someone-make-it-even-more-concise",
                "content": "    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {\\n        ListNode preHead(0), *p = &preHead;\\n        int extra = 0;\\n        while (l1 || l2 || extra) {\\n            int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;\\n            extra = sum / 10;\\n            p->next = new ListNode(sum % 10);\\n            p = p->next;\\n            l1 = l1 ? l1->next : l1;\\n            l2 = l2 ? l2->next : l2;\\n        }\\n        return preHead.next;\\n    }",
                "solutionTags": [],
                "code": "    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {\\n        ListNode preHead(0), *p = &preHead;\\n        int extra = 0;\\n        while (l1 || l2 || extra) {\\n            int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;\\n            extra = sum / 10;\\n            p->next = new ListNode(sum % 10);\\n            p = p->next;\\n            l1 = l1 ? l1->next : l1;\\n            l2 = l2 ? l2->next : l2;\\n        }\\n        return preHead.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1032,
                "title": "python-concise-solution",
                "content": "        \\n    def addTwoNumbers(self, l1, l2):\\n        dummy = cur = ListNode(0)\\n        carry = 0\\n        while l1 or l2 or carry:\\n            if l1:\\n                carry += l1.val\\n                l1 = l1.next\\n            if l2:\\n                carry += l2.val\\n                l2 = l2.next\\n            cur.next = ListNode(carry%10)\\n            cur = cur.next\\n            carry //= 10\\n        return dummy.next",
                "solutionTags": [
                    "Python"
                ],
                "code": "        \\n    def addTwoNumbers(self, l1, l2):\\n        dummy = cur = ListNode(0)\\n        carry = 0\\n        while l1 or l2 or carry:\\n            if l1:\\n                carry += l1.val\\n                l1 = l1.next\\n            if l2:\\n                carry += l2.val\\n                l2 = l2.next\\n            cur.next = ListNode(carry%10)\\n            cur = cur.next\\n            carry //= 10\\n        return dummy.next",
                "codeTag": "Python3"
            },
            {
                "id": 1059,
                "title": "my-accepted-java-solution",
                "content": "Two things to make the code simple:\\n\\n 1. Whenever one of the two *ListNode* is null, replace it with 0.\\n 2. Keep the while loop going when at least one of the three conditions is met.\\n\\nLet me know if there is something wrong. Thanks.\\n\\n    public class Solution {\\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n            ListNode prev = new ListNode(0);\\n            ListNode head = prev;\\n            int carry = 0;\\n            while (l1 != null || l2 != null || carry != 0) {\\n                ListNode cur = new ListNode(0);\\n                int sum = ((l2 == null) ? 0 : l2.val) + ((l1 == null) ? 0 : l1.val) + carry;\\n                cur.val = sum % 10;\\n                carry = sum / 10;\\n                prev.next = cur;\\n                prev = cur;\\n                \\n                l1 = (l1 == null) ? l1 : l1.next;\\n                l2 = (l2 == null) ? l2 : l2.next;\\n            }\\n            return head.next;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n            ListNode prev = new ListNode(0);\\n            ListNode head = prev;\\n            int carry = 0;\\n            while (l1 != null || l2 != null || carry != 0) {\\n                ListNode cur = new ListNode(0);\\n                int sum = ((l2 == null) ? 0 : l2.val) + ((l1 == null) ? 0 : l1.val) + carry;\\n                cur.val = sum % 10;\\n                carry = sum / 10;\\n                prev.next = cur;\\n                prev = cur;\\n                \\n                l1 = (l1 == null) ? l1 : l1.next;\\n                l2 = (l2 == null) ? l2 : l2.next;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1102,
                "title": "python-for-the-win",
                "content": "Python supports arbitrarily large integers, so I can safely turn the two lists into ints, add them, and turn the sum into a list.\\n\\n    class Solution:\\n        def addTwoNumbers(self, l1, l2):\\n            def toint(node):\\n                return node.val + 10 * toint(node.next) if node else 0\\n            def tolist(n):\\n                node = ListNode(n % 10)\\n                if n > 9:\\n                    node.next = tolist(n / 10)\\n                return node\\n            return tolist(toint(l1) + toint(l2))\\n\\nIterative `tolist` instead of recursive:\\n\\n    class Solution:\\n        def addTwoNumbers(self, l1, l2):\\n            def toint(node):\\n                return node.val + 10 * toint(node.next) if node else 0\\n            n = toint(l1) + toint(l2)\\n            first = last = ListNode(n % 10)\\n            while n > 9:\\n                n /= 10\\n                last.next = last = ListNode(n % 10)\\n            return first\\n\\nAnd a very different solution that could sum arbitrarily many addends, not just two:\\n\\n    class Solution:\\n        def addTwoNumbers(self, l1, l2):\\n            addends = l1, l2\\n            dummy = end = ListNode(0)\\n            carry = 0\\n            while addends or carry:\\n                carry += sum(a.val for a in addends)\\n                addends = [a.next for a in addends if a.next]\\n                end.next = end = ListNode(carry % 10)\\n                carry /= 10\\n            return dummy.next",
                "solutionTags": [
                    "Python"
                ],
                "code": "Python supports arbitrarily large integers, so I can safely turn the two lists into ints, add them, and turn the sum into a list.\\n\\n    class Solution:\\n        def addTwoNumbers(self, l1, l2):\\n            def toint(node):\\n                return node.val + 10 * toint(node.next) if node else 0\\n            def tolist(n):\\n                node = ListNode(n % 10)\\n                if n > 9:\\n                    node.next = tolist(n / 10)\\n                return node\\n            return tolist(toint(l1) + toint(l2))\\n\\nIterative `tolist` instead of recursive:\\n\\n    class Solution:\\n        def addTwoNumbers(self, l1, l2):\\n            def toint(node):\\n                return node.val + 10 * toint(node.next) if node else 0\\n            n = toint(l1) + toint(l2)\\n            first = last = ListNode(n % 10)\\n            while n > 9:\\n                n /= 10\\n                last.next = last = ListNode(n % 10)\\n            return first\\n\\nAnd a very different solution that could sum arbitrarily many addends, not just two:\\n\\n    class Solution:\\n        def addTwoNumbers(self, l1, l2):\\n            addends = l1, l2\\n            dummy = end = ListNode(0)\\n            carry = 0\\n            while addends or carry:\\n                carry += sum(a.val for a in addends)\\n                addends = [a.next for a in addends if a.next]\\n                end.next = end = ListNode(carry % 10)\\n                carry /= 10\\n            return dummy.next",
                "codeTag": "Java"
            },
            {
                "id": 1044,
                "title": "java-concise-solution",
                "content": "        \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        int carry = 0;\\n        ListNode p, dummy = new ListNode(0);\\n        p = dummy;\\n        while (l1 != null || l2 != null || carry != 0) {\\n            if (l1 != null) {\\n                carry += l1.val;\\n                l1 = l1.next;\\n            }\\n            if (l2 != null) {\\n                carry += l2.val;\\n                l2 = l2.next;\\n            }\\n            p.next = new ListNode(carry%10);\\n            carry /= 10;\\n            p = p.next;\\n        }\\n        return dummy.next;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "        \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        int carry = 0;\\n        ListNode p, dummy = new ListNode(0);\\n        p = dummy;\\n        while (l1 != null || l2 != null || carry != 0) {\\n            if (l1 != null) {\\n                carry += l1.val;\\n                l1 = l1.next;\\n            }\\n            if (l2 != null) {\\n                carry += l2.val;\\n                l2 = l2.next;\\n            }\\n            p.next = new ListNode(carry%10);\\n            carry /= 10;\\n            p = p.next;\\n        }\\n        return dummy.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1020,
                "title": "javascript-solution",
                "content": "    /**\\n     * Definition for singly-linked list.\\n     * function ListNode(val) {\\n     *     this.val = val;\\n     *     this.next = null;\\n     * }\\n     */\\n    /**\\n     * @param {ListNode} l1\\n     * @param {ListNode} l2\\n     * @return {ListNode}\\n     */\\n    var addTwoNumbers = function(l1, l2) {\\n        var List = new ListNode(0);\\n        var head = List;\\n        var sum = 0;\\n        var carry = 0;\\n    \\n        while(l1!==null||l2!==null||sum>0){\\n    \\n            if(l1!==null){\\n                sum = sum + l1.val;\\n                l1 = l1.next;\\n            }\\n            if(l2!==null){\\n                sum = sum + l2.val;\\n                l2 = l2.next;\\n            }\\n            if(sum>=10){\\n                carry = 1;\\n                sum = sum - 10;\\n            }\\n    \\n            head.next = new ListNode(sum);\\n            head = head.next;\\n    \\n            sum = carry;\\n            carry = 0;\\n    \\n        }\\n    \\n        return List.next;\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    /**\\n     * Definition for singly-linked list.\\n     * function ListNode(val) {\\n     *     this.val = val;\\n     *     this.next = null;\\n     * }\\n     */\\n    /**\\n     * @param {ListNode} l1\\n     * @param {ListNode} l2\\n     * @return {ListNode}\\n     */\\n    var addTwoNumbers = function(l1, l2) {\\n        var List = new ListNode(0);\\n        var head = List;\\n        var sum = 0;\\n        var carry = 0;\\n    \\n        while(l1!==null||l2!==null||sum>0){\\n    \\n            if(l1!==null){\\n                sum = sum + l1.val;\\n                l1 = l1.next;\\n            }\\n            if(l2!==null){\\n                sum = sum + l2.val;\\n                l2 = l2.next;\\n            }\\n            if(sum>=10){\\n                carry = 1;\\n                sum = sum - 10;\\n            }\\n    \\n            head.next = new ListNode(sum);\\n            head = head.next;\\n    \\n            sum = carry;\\n            carry = 0;\\n    \\n        }\\n    \\n        return List.next;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 352181,
                "title": "python3-carry-sum-10",
                "content": "* we need to deal with one situation here: \\n```\\nl1     1     3                              1     \\n+      +     +                              +\\nl2     1     9                              1 \\n-----------------------------------------------------------------------------------\\ncur    2    12(we need to put 2 here)        2+carry(carry from the previous 12)\\n            12 %10 = 2\\n\\t\\t    carry = 12//10 =1\\t   \\n```\\nBy adding a variable called carry can deal with this situation: align the addends vertically and add the columns, starting from the left-most column. If a column\\'s sum exceeds nine, the extra digit \"carried\" add into the next column.\\n```\\nl1          1                  3                       1     \\n+           +                  +                       +\\nl2          1                  9                       1 \\n-----------------------------------------------------------------------------------\\ncarry  0+1+1=3             0+3+9=12              1+1+1 = 3  \\ncur     3%10=3             12%10=2               3%10 = 3\\ncarry  3//10 =0             12//10=1             3//10 = 0 \\n```\\n\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        \"\"\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        dummy = cur =ListNode(0)\\n        carry = 0\\n        while l1 or l2 or carry:\\n            if l1:\\n                carry += l1.val\\n                l1 = l1.next\\n            if l2:\\n                carry += l2.val\\n                l2 = l2.next\\n            cur.next = ListNode(carry%10)\\n            cur = cur.next\\n            carry //=10\\n        return dummy.next\\n```\\n\\n**Complexity Analysis**\\n* Time Complexity: O(max(m,n)+1)\\n\\twhere m is the length of linked list l1, n is the length of linked list l2.\\n\\tThe algorithm needs to iterate at most O(max(m,n)+1) times. \"+1\" comes from the carry.\\n* Space Complexity:O(max(m,n) + 1)\\n\\twhere m is the length of linked list l1, n is the length of linked list l2.\\n\\tThe algorithm needs to create a new list, and the length will be at most max(m,n)+1",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nl1     1     3                              1     \\n+      +     +                              +\\nl2     1     9                              1 \\n-----------------------------------------------------------------------------------\\ncur    2    12(we need to put 2 here)        2+carry(carry from the previous 12)\\n            12 %10 = 2\\n\\t\\t    carry = 12//10 =1\\t   \\n```\n```\\nl1          1                  3                       1     \\n+           +                  +                       +\\nl2          1                  9                       1 \\n-----------------------------------------------------------------------------------\\ncarry  0+1+1=3             0+3+9=12              1+1+1 = 3  \\ncur     3%10=3             12%10=2               3%10 = 3\\ncarry  3//10 =0             12//10=1             3//10 = 0 \\n```\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        \"\"\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        dummy = cur =ListNode(0)\\n        carry = 0\\n        while l1 or l2 or carry:\\n            if l1:\\n                carry += l1.val\\n                l1 = l1.next\\n            if l2:\\n                carry += l2.val\\n                l2 = l2.next\\n            cur.next = ListNode(carry%10)\\n            cur = cur.next\\n            carry //=10\\n        return dummy.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1519,
                "title": "c-solution-easy-to-understand",
                "content": "The trick is, when two lists are not equally long, pad the shorter one with zero values. In this way, you don't have to handle the remaining sublist.\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = NULL, *prev = NULL;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1? l1->val: 0;\\n            int v2 = l2? l2->val: 0;\\n            int tmp = v1 + v2 + carry;\\n            carry = tmp / 10;\\n            int val = tmp % 10;\\n            ListNode* cur = new ListNode(val);\\n            if (!head) head = cur;\\n            if (prev) prev->next = cur;\\n            prev = cur;\\n            l1 = l1? l1->next: NULL;\\n            l2 = l2? l2->next: NULL;\\n        }\\n        if (carry > 0) {\\n            ListNode* l = new ListNode(carry);\\n            prev->next = l;\\n        }\\n        return head;\\n    }",
                "solutionTags": [],
                "code": "The trick is, when two lists are not equally long, pad the shorter one with zero values. In this way, you don't have to handle the remaining sublist.\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = NULL, *prev = NULL;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1? l1->val: 0;\\n            int v2 = l2? l2->val: 0;\\n            int tmp = v1 + v2 + carry;\\n            carry = tmp / 10;\\n            int val = tmp % 10;\\n            ListNode* cur = new ListNode(val);\\n            if (!head) head = cur;\\n            if (prev) prev->next = cur;\\n            prev = cur;\\n            l1 = l1? l1->next: NULL;\\n            l2 = l2? l2->next: NULL;\\n        }\\n        if (carry > 0) {\\n            ListNode* l = new ListNode(carry);\\n            prev->next = l;\\n        }\\n        return head;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3076872,
                "title": "javascript-simple-upvote-if",
                "content": "```\\nvar addTwoNumbers = function(l1, l2) {\\n    const iter = (n1, n2, rest = 0) => {\\n        if (!n1 && !n2 && !rest) return null;\\n        const newVal = (n1?.val || 0) + (n2?.val || 0) + rest;\\n        const nextNode = iter(n1?.next, n2?.next, Math.floor(newVal / 10));\\n        return new ListNode(newVal % 10, nextNode);\\n    }\\n    return iter(l1, l2);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addTwoNumbers = function(l1, l2) {\\n    const iter = (n1, n2, rest = 0) => {\\n        if (!n1 && !n2 && !rest) return null;\\n        const newVal = (n1?.val || 0) + (n2?.val || 0) + rest;\\n        const nextNode = iter(n1?.next, n2?.next, Math.floor(newVal / 10));\\n        return new ListNode(newVal % 10, nextNode);\\n    }\\n    return iter(l1, l2);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1012,
                "title": "recursive-8-line-c-solution",
                "content": "    class Solution {\\n    \\n    \\tpublic:\\n    \\t\\tListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    \\t\\t\\tif (l1 == NULL and l2 == NULL) return NULL;\\n    \\t\\t\\telse if (l1 == NULL) return l2; \\n    \\t\\t\\telse if (l2 == NULL) return l1; \\n    \\n    \\t\\t\\tint a = l1->val + l2->val;\\n    \\t\\t\\tListNode *p = new ListNode(a % 10);\\n    \\t\\t\\tp->next = addTwoNumbers(l1->next,l2->next);\\n    \\t\\t\\tif (a >= 10) p->next = addTwoNumbers(p->next, new ListNode(1));\\n    \\t\\t\\treturn p;\\n    \\t\\t}\\n      };",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "class Solution {\\n    \\n    \\tpublic:\\n    \\t\\tListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    \\t\\t\\tif (l1 == NULL and l2 == NULL) return NULL;\\n    \\t\\t\\telse if (l1 == NULL) return l2; \\n    \\t\\t\\telse if (l2 == NULL) return l1; \\n    \\n    \\t\\t\\tint a = l1->val + l2->val;\\n    \\t\\t\\tListNode *p = new ListNode(a % 10);\\n    \\t\\t\\tp->next = addTwoNumbers(l1->next,l2->next);\\n    \\t\\t\\tif (a >= 10) p->next = addTwoNumbers(p->next, new ListNode(1));\\n    \\t\\t\\treturn p;\\n    \\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3077723,
                "title": "only-4-lines-of-code-high-level-solution-explained-all-coding-steps",
                "content": "# Approach\\nThis is a simple addition flow. \\n1. 2 numbers like ( 743, 564  )\\n2. Start from the left to right ( loop - index)\\n3. Get the number by index ( index = 0 => 7, 5 )\\n4. Add those numbers ( 7 + 5 => 12 )\\n5. Carry it if it is greater than 9 ( var carry = 12 / 10 => 1 )\\n6. Increase the index ( index + 1 )\\n7. Go to step 3 ( We need to pass carry value )\\n\\nlet\\'s revise the steps\\n\\n3. Get the number by index ( index = 1 => 4, 6 )\\n4. Add those numbers and carry ( 4 + 6 + 1)\\n5. Carry it if it is greater than 9 ( var carry = 11 / 10 => 1 )\\n6. Increase the index ( index + 1 => 2 )\\n7. Go to step 3 ( We need to pass carry value )\\n\\nActually it is done if we know all the number places and length of the numbers.\\n\\nHowever we don\\'t know it. It is a linked list. So we don\\'t have the length and index. But we can use infinity loops. Let\\'s start with a while loop.\\n\\n1_) let\\'s start coding\\n```\\nwhile(true)\\n{\\n\\t// step-3 : l1.val and l2.val \\n\\t// step-4\\n\\tint total = l1.val + l2.val;\\n\\t// step - 5\\n\\tint carry = total / 10;\\n    int val = total % 10;\\n\\t// step-6 : we don\\'t have index but we have l1 and l2, so we can set them for the next loop\\n\\tl1 = l1.next;\\n\\tl2 = l2.next;\\n    // We need to store the val field and set the next field in the next loop, it seems a perfect sample for recursive methods\\n   // let\\'s create a method then\\n} \\n```\\n2_) we need pass value of 1 and 2 and carry values\\n\\n```\\nnewMethod(int val1, int val2, int carry, ListNode next1, ListNode next2)\\n{\\n\\tint total = val1 + val2;\\n\\tcarry = total / 10;\\n\\tint place = total % 10;\\n\\treturn new ListNode(place, /* we need to do the same for the next values */)\\n}\\n```\\n\\n3_) make it recursive. You can run the program and see the errors.\\n\\n```\\nnewMethod(ListNode next1, ListNode next2, int carry)\\n{\\n\\tint total = next1.val + next2.val + carry;\\n\\tcarry = total / 10;\\n\\tint val = total % 10;\\n\\treturn new ListNode(val, newMethod(next1.next, next2.next, carry))\\n}\\n\\n\\npublic ListNode AddTwoNumbers(ListNode l1, ListNode l2) \\n{\\n\\treturn newMethod(l1, l2, 0);\\n}\\n```\\n\\n4_) add null check\\n\\n```\\nnewMethod(ListNode next1, ListNode next2, int carry)\\n{\\n\\tint total = (next1 != null ? next1.val : 0) + (next2 != null ? next2.val : 0) + carry;\\n\\tcarry = total / 10;\\n\\treturn new ListNode(total % 10, newMethod(next1?.next, next2?.next, carry))\\n}\\n```\\n\\n5_) stop the recursive method when next1 and next2 null\\n\\n```\\nnewMethod(ListNode next1, ListNode next2, int carry)\\n{\\n\\tif(next1 == null && next2 == null && carry == 0) return null;\\n\\n\\tint total = (next1 != null ? next1.val : 0) + (next2 != null ? next2.val : 0) + carry;\\n\\tcarry = total / 10;\\n\\treturn new ListNode(total % 10,  newMethod(next1?.next, next2?.next, carry))\\n}\\n```\\n\\n6_) AddTwoNumbers and newMethod are almost same parameters. So if I add carry as an optional parameter, it would be great.\\n```\\npublic ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n{\\n\\tif(l1 == null && l2 == null && carry == 0) return null;\\n\\n\\tint total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n\\tcarry = total / 10;\\n\\treturn new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n}\\n\\n```\\n\\n>  You can also use `l1?.val ?? 0` instead of using ternary operators.\\n\\n> JS version: `l1?.val || 0`\\n\\n\\n# Final Code C#\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}\\n```\\n\\n\\n# Final Code Typescript\\n```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null, carry: number = 0): ListNode | null {\\n    if(!l1 && !l2 && !carry) return null;\\n\\n    var total : number = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + (carry || 0);\\n    carry = parseInt(total / 10 + \\'\\');\\n    return new ListNode(total % 10, addTwoNumbers(l1?.next, l2?.next, carry));\\n};\\n```\\n\\n# Final Code Javascript\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2, carry) {\\n    if(!l1 && !l2 && !carry) return null;\\n\\n    var total = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + (carry || 0);\\n    carry = parseInt(total / 10);\\n    return new ListNode(total % 10, addTwoNumbers(l1?.next, l2?.next, carry));\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C#",
                    "JavaScript",
                    "TypeScript",
                    "Linked List",
                    "Recursion"
                ],
                "code": "```\\nwhile(true)\\n{\\n\\t// step-3 : l1.val and l2.val \\n\\t// step-4\\n\\tint total = l1.val + l2.val;\\n\\t// step - 5\\n\\tint carry = total / 10;\\n    int val = total % 10;\\n\\t// step-6 : we don\\'t have index but we have l1 and l2, so we can set them for the next loop\\n\\tl1 = l1.next;\\n\\tl2 = l2.next;\\n    // We need to store the val field and set the next field in the next loop, it seems a perfect sample for recursive methods\\n   // let\\'s create a method then\\n} \\n```\n```\\nnewMethod(int val1, int val2, int carry, ListNode next1, ListNode next2)\\n{\\n\\tint total = val1 + val2;\\n\\tcarry = total / 10;\\n\\tint place = total % 10;\\n\\treturn new ListNode(place, /* we need to do the same for the next values */)\\n}\\n```\n```\\nnewMethod(ListNode next1, ListNode next2, int carry)\\n{\\n\\tint total = next1.val + next2.val + carry;\\n\\tcarry = total / 10;\\n\\tint val = total % 10;\\n\\treturn new ListNode(val, newMethod(next1.next, next2.next, carry))\\n}\\n\\n\\npublic ListNode AddTwoNumbers(ListNode l1, ListNode l2) \\n{\\n\\treturn newMethod(l1, l2, 0);\\n}\\n```\n```\\nnewMethod(ListNode next1, ListNode next2, int carry)\\n{\\n\\tint total = (next1 != null ? next1.val : 0) + (next2 != null ? next2.val : 0) + carry;\\n\\tcarry = total / 10;\\n\\treturn new ListNode(total % 10, newMethod(next1?.next, next2?.next, carry))\\n}\\n```\n```\\nnewMethod(ListNode next1, ListNode next2, int carry)\\n{\\n\\tif(next1 == null && next2 == null && carry == 0) return null;\\n\\n\\tint total = (next1 != null ? next1.val : 0) + (next2 != null ? next2.val : 0) + carry;\\n\\tcarry = total / 10;\\n\\treturn new ListNode(total % 10,  newMethod(next1?.next, next2?.next, carry))\\n}\\n```\n```\\npublic ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n{\\n\\tif(l1 == null && l2 == null && carry == 0) return null;\\n\\n\\tint total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n\\tcarry = total / 10;\\n\\treturn new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n}\\n\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null, carry: number = 0): ListNode | null {\\n    if(!l1 && !l2 && !carry) return null;\\n\\n    var total : number = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + (carry || 0);\\n    carry = parseInt(total / 10 + \\'\\');\\n    return new ListNode(total % 10, addTwoNumbers(l1?.next, l2?.next, carry));\\n};\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2, carry) {\\n    if(!l1 && !l2 && !carry) return null;\\n\\n    var total = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + (carry || 0);\\n    carry = parseInt(total / 10);\\n    return new ListNode(total % 10, addTwoNumbers(l1?.next, l2?.next, carry));\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1835217,
                "title": "python3-dummy-carry-explained",
                "content": "**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**\\n\\nWe simply traverse lists, sum values and save result in a new list. Sum is equal to `val1` + `val2` + `carry` from the previous operation. `sum%10` gives us resulting digit for current node, and `sum//10` gives us a value to carry to the next operation.\\n\\nTime: **O(n)**\\nSpace: **O(1)**\\n\\nRuntime: 72 ms, faster than **86.11%** of Python3 online submissions for Add Two Numbers.\\nMemory Usage: 13.9 MB, less than **93.12%** of Python3 online submissions for Add Two Numbers.\\n\\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        res = dummy = ListNode()\\n        carry = 0\\n        while l1 or l2:\\n            v1, v2 = 0, 0\\n            if l1: v1, l1 = l1.val, l1.next\\n            if l2: v2, l2 = l2.val, l2.next\\n            \\n            val = carry + v1 + v2\\n            res.next = ListNode(val%10)\\n            res, carry = res.next, val//10\\n            \\n        if carry:\\n            res.next = ListNode(carry)\\n            \\n        return dummy.next\\n```\\n\\n**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        res = dummy = ListNode()\\n        carry = 0\\n        while l1 or l2:\\n            v1, v2 = 0, 0\\n            if l1: v1, l1 = l1.val, l1.next\\n            if l2: v2, l2 = l2.val, l2.next\\n            \\n            val = carry + v1 + v2\\n            res.next = ListNode(val%10)\\n            res, carry = res.next, val//10\\n            \\n        if carry:\\n            res.next = ListNode(carry)\\n            \\n        return dummy.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1128713,
                "title": "accepted-solution-for-swift",
                "content": "<blockquote>\\n<b>Disclaimer:</b> By using any content from this post or thread, you release the author(s) from all liability and warranty of any kind. You are free to use the content freely and as you see fit. Any suggestions for improvement are welcome and greatly appreciated! Happy coding!\\n</blockquote>\\n\\n```swift\\nclass Solution {\\n    private var dig = 0\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if l1 == nil && l2 == nil && dig == 0 { return nil }\\n        let sum = (l1?.val ?? 0) + (l2?.val ?? 0) + dig\\n        dig = sum / 10\\n        return .init(sum % 10, addTwoNumbers(l1?.next, l2?.next))\\n    }\\n}\\n```\\n\\n**Playground and test cases: https://leetcode.com/playground/9oaHp7yF**",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    private var dig = 0\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if l1 == nil && l2 == nil && dig == 0 { return nil }\\n        let sum = (l1?.val ?? 0) + (l2?.val ?? 0) + dig\\n        dig = sum / 10\\n        return .init(sum % 10, addTwoNumbers(l1?.next, l2?.next))\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3330972,
                "title": "easy-solution-python-linked-list",
                "content": "# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        d = n = ListNode(0)\\n        num1 = num2 = \"\"\\n        while l1:\\n            num1 += str(l1.val)\\n            l1 = l1.next\\n        while l2:\\n            num2 += str(l2.val)\\n            l2 = l2.next\\n        res = str(int(num1[::-1]) + int(num2[::-1]))[::-1]\\n        for i in res:\\n            d.next = ListNode(i)\\n            d = d.next\\n        return n.next    \\n```\\nDo upvote if you like the Solution :)",
                "solutionTags": [
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        d = n = ListNode(0)\\n        num1 = num2 = \"\"\\n        while l1:\\n            num1 += str(l1.val)\\n            l1 = l1.next\\n        while l2:\\n            num2 += str(l2.val)\\n            l2 = l2.next\\n        res = str(int(num1[::-1]) + int(num2[::-1]))[::-1]\\n        for i in res:\\n            d.next = ListNode(i)\\n            d = d.next\\n        return n.next    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1835266,
                "title": "c-easy-to-understand-explanation-simple-short",
                "content": "# 2. Add Two Numbers\\n**KNOCKCAT**\\n\\n```\\n1. Easy C++\\n2. Line by Line Explanation with Comments.\\n3. Detailed Explanation \\u2705\\n4. Linked list problem with Initution.\\n5. Please Upvote if it helps\\u2B06\\uFE0F\\n6. Link to my Github Profile contains a repository of Leetcode with all my Solutions. \\u2B07\\uFE0F\\n\\t// \\uD83D\\uDE09If you Like the repository don\\'t foget to star & fork the repository\\uD83D\\uDE09\\n```\\n\\n[LeetCode](https://github.com/knockcat/Leetcode)        **LINK TO LEETCODE REPOSITORY**\\n\\nPlease upvote my comment so that i get to win the 2022 giveaway and motivate to make such discussion post.\\n**Happy new Year 2023 to all of you**\\n**keep solving keep improving**\\nLink To comment\\n[Leetcode Give away comment](https://leetcode.com/discuss/general-discussion/2946993/2022-Annual-Badge-and-the-Giveaway/1734919)\\n\\n``` ```\\n``` ```\\n**EXPLANATION**\\n* WE have to **Traverse Both Lists** & add **sum to new list**.\\n* **Sum is equivalent to val1 + val2 + carry** from previous Operation.\\n* THe **resulting node** will be **sum%10.**\\n* **Carry is updated** by **sum/10** for next Opeartion.\\n* **Time Complexity**     **O(n).**\\n* **Space Compelxity**  **O(max(l1,l2)).**\\n``` ```\\n\\n**CODE WITH EXPLANATION**\\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *ptr = new ListNode();     //new list;\\n        ListNode *temp = ptr;\\n        \\n        int c = 0;\\n\\t\\t//traversing both list till one of the list not reaches NULL\\n        while (l1 != NULL ||  l2 != NULL || c)\\n        {\\n            int sum = 0;\\n\\t\\t\\t// if l1  is not null\\n\\t\\t\\t// add l1-> value to sum\\n            if(l1 != NULL)\\n            {\\n                sum += l1->val;\\n                l1 = l1 -> next;\\n            }\\n            \\n\\t\\t\\t// if l2  is not null\\n\\t\\t\\t// add l2-> value to sum\\n            if(l2 != NULL)\\n            {\\n                sum += l2->val;\\n                l2 = l2 -> next;\\n            }\\n            \\n\\t\\t\\t// add carry to sum\\n            sum += c;\\n\\t\\t\\t// carry is updated by sum/10 because for 18 , \\n\\t\\t\\t// 18 / 10 is 1 which is the carry\\n            c = sum/10;\\n\\t\\t\\t// add sum% 10 to new node as it containg the sum\\n            ListNode *node = new ListNode(sum%10);\\n            temp -> next = node;\\n            temp = temp -> next;\\n        }\\n        return ptr -> next;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "```\\n1. Easy C++\\n2. Line by Line Explanation with Comments.\\n3. Detailed Explanation \\u2705\\n4. Linked list problem with Initution.\\n5. Please Upvote if it helps\\u2B06\\uFE0F\\n6. Link to my Github Profile contains a repository of Leetcode with all my Solutions. \\u2B07\\uFE0F\\n\\t// \\uD83D\\uDE09If you Like the repository don\\'t foget to star & fork the repository\\uD83D\\uDE09\\n```\n``` ```\n``` ```\n``` ```\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *ptr = new ListNode();     //new list;\\n        ListNode *temp = ptr;\\n        \\n        int c = 0;\\n\\t\\t//traversing both list till one of the list not reaches NULL\\n        while (l1 != NULL ||  l2 != NULL || c)\\n        {\\n            int sum = 0;\\n\\t\\t\\t// if l1  is not null\\n\\t\\t\\t// add l1-> value to sum\\n            if(l1 != NULL)\\n            {\\n                sum += l1->val;\\n                l1 = l1 -> next;\\n            }\\n            \\n\\t\\t\\t// if l2  is not null\\n\\t\\t\\t// add l2-> value to sum\\n            if(l2 != NULL)\\n            {\\n                sum += l2->val;\\n                l2 = l2 -> next;\\n            }\\n            \\n\\t\\t\\t// add carry to sum\\n            sum += c;\\n\\t\\t\\t// carry is updated by sum/10 because for 18 , \\n\\t\\t\\t// 18 / 10 is 1 which is the carry\\n            c = sum/10;\\n\\t\\t\\t// add sum% 10 to new node as it containg the sum\\n            ListNode *node = new ListNode(sum%10);\\n            temp -> next = node;\\n            temp = temp -> next;\\n        }\\n        return ptr -> next;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 452442,
                "title": "python-3-recursion",
                "content": "```python\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        _ = l1.val + l2.val\\n        digit, tenth = _ % 10, _ // 10\\n        answer = ListNode(digit)\\n        if any((l1.next, l2.next, tenth)):\\n            l1 = l1.next if l1.next else ListNode(0)\\n            l2 = l2.next if l2.next else ListNode(0)\\n            l1.val += tenth\\n            answer.next = self.addTwoNumbers(l1, l2)    \\n        return answer\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```python\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        _ = l1.val + l2.val\\n        digit, tenth = _ % 10, _ // 10\\n        answer = ListNode(digit)\\n        if any((l1.next, l2.next, tenth)):\\n            l1 = l1.next if l1.next else ListNode(0)\\n            l2 = l2.next if l2.next else ListNode(0)\\n            l1.val += tenth\\n            answer.next = self.addTwoNumbers(l1, l2)    \\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 469977,
                "title": "simple-rust-solution-0ms-2-1mb",
                "content": "```rust\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        match (l1, l2) {\\n            (None, None) => None,\\n            (Some(n), None) | (None, Some(n)) => Some(n), \\n            (Some(n1), Some(n2)) => {\\n                let sum = n1.val + n2.val;\\n                if sum < 10 {\\n                    Some(Box::new(ListNode {\\n                        val: sum,\\n                        next: Solution::add_two_numbers(n1.next, n2.next)\\n                    }))\\n                } else {\\n                    let carry = Some(Box::new(ListNode::new(1)));\\n                    Some(Box::new(ListNode {\\n                        val: sum - 10,\\n                        next: Solution::add_two_numbers(Solution::add_two_numbers(carry, n1.next), n2.next)\\n                    }))\\n                }\\n            }\\n        }\\n    }\\n}\\n```\\nIt may not be better. But the if sensence can be rephrased as follows.\\n```\\nlet (rem, carry) = if sum < 10 {\\n\\t(sum, None)\\n} else {\\n\\t(sum - 10, Some(Box::new(ListNode::new(1))))\\n};\\nSome(Box::new(ListNode {\\n\\tval: rem,\\n\\tnext: Solution::add_two_numbers(Solution::add_two_numbers(n1.next, carry), n2.next)\\n}))\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        match (l1, l2) {\\n            (None, None) => None,\\n            (Some(n), None) | (None, Some(n)) => Some(n), \\n            (Some(n1), Some(n2)) => {\\n                let sum = n1.val + n2.val;\\n                if sum < 10 {\\n                    Some(Box::new(ListNode {\\n                        val: sum,\\n                        next: Solution::add_two_numbers(n1.next, n2.next)\\n                    }))\\n                } else {\\n                    let carry = Some(Box::new(ListNode::new(1)));\\n                    Some(Box::new(ListNode {\\n                        val: sum - 10,\\n                        next: Solution::add_two_numbers(Solution::add_two_numbers(carry, n1.next), n2.next)\\n                    }))\\n                }\\n            }\\n        }\\n    }\\n}\\n```\n```\\nlet (rem, carry) = if sum < 10 {\\n\\t(sum, None)\\n} else {\\n\\t(sum - 10, Some(Box::new(ListNode::new(1))))\\n};\\nSome(Box::new(ListNode {\\n\\tval: rem,\\n\\tnext: Solution::add_two_numbers(Solution::add_two_numbers(n1.next, carry), n2.next)\\n}))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1317296,
                "title": "java-1ms-recursive-solution-1ms-faster-than-100",
                "content": "```\\nclass Solution {\\n    \\n    int carry = 0;\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n        if (l1 == null && l2 == null && carry == 0) {\\n            return null;\\n        }\\n        \\n        int val1 = l1 == null ? 0 : l1.val;\\n        int val2 = l2 == null ? 0 : l2.val;\\n        \\n        int sum = val1 + val2 + carry;\\n        carry = sum/10;\\n        \\n        l1 = l1 == null ? null : l1.next;\\n        l2 = l2 == null ? null : l2.next;\\n        \\n        ListNode ans = new ListNode(sum%10, addTwoNumbers(l1, l2));\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    \\n    int carry = 0;\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n        if (l1 == null && l2 == null && carry == 0) {\\n            return null;\\n        }\\n        \\n        int val1 = l1 == null ? 0 : l1.val;\\n        int val2 = l2 == null ? 0 : l2.val;\\n        \\n        int sum = val1 + val2 + carry;\\n        carry = sum/10;\\n        \\n        l1 = l1 == null ? null : l1.next;\\n        l2 = l2 == null ? null : l2.next;\\n        \\n        ListNode ans = new ListNode(sum%10, addTwoNumbers(l1, l2));\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1182,
                "title": "4ms-11lines-java-solution",
                "content": "    public class Solution {\\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n            ListNode ln1 = l1, ln2 = l2, head = null, node = null;\\n            int carry = 0, remainder = 0, sum = 0;\\n            head = node = new ListNode(0);\\n            \\n            while(ln1 != null || ln2 != null || carry != 0) {\\n                sum = (ln1 != null ? ln1.val : 0) + (ln2 != null ? ln2.val : 0) + carry;\\n                carry = sum / 10;\\n                remainder = sum % 10;\\n                node = node.next = new ListNode(remainder);\\n                ln1 = (ln1 != null ? ln1.next : null);\\n                ln2 = (ln2 != null ? ln2.next : null);\\n            }\\n            return head.next;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n            ListNode ln1 = l1, ln2 = l2, head = null, node = null;\\n            int carry = 0, remainder = 0, sum = 0;\\n            head = node = new ListNode(0);\\n            \\n            while(ln1 != null || ln2 != null || carry != 0) {\\n                sum = (ln1 != null ? ln1.val : 0) + (ln2 != null ? ln2.val : 0) + carry;\\n                carry = sum / 10;\\n                remainder = sum % 10;\\n                node = node.next = new ListNode(remainder);\\n                ln1 = (ln1 != null ? ln1.next : null);\\n                ln2 = (ln2 != null ? ln2.next : null);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1012905,
                "title": "c-super-simple-easy-iterative-solution-faster-than-92",
                "content": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0, first, second;\\n        ListNode *head = new ListNode(0), *tail = head;\\n        while (l1 || l2 || carry) {\\n            if (l1) {\\n                first = l1->val;\\n                l1 = l1->next;\\n            }\\n            else\\n                first = 0;\\n            \\n            if (l2) {\\n                second = l2->val;\\n                l2 = l2->next;\\n            }\\n            else\\n                second = 0;\\n            \\n            int temp = first+second+carry;\\n            tail->next = new ListNode(temp%10);\\n            tail = tail->next;\\n            carry = temp/10;\\n            \\n        }\\n        return head->next;\\n    }\\n};\\n```\\n****\\n**Shorter version, avoiding duplicated code:**\\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        \\n        #define NEXT(list, i) \\\\\\n            if (list) { \\\\\\n                i = list->val; \\\\\\n                list = list->next; \\\\\\n            } \\\\\\n            else i = 0;\\n        \\n        int carry = 0, first, second;\\n        ListNode *head = new ListNode(0), *tail = head;\\n        while (l1 || l2 || carry) {\\n            \\n            NEXT(l1, first);\\n            NEXT(l2, second);\\n            \\n            int temp = first+second+carry;\\n            tail->next = new ListNode(temp%10);\\n            tail = tail->next;\\n            carry = temp/10;\\n            \\n        }\\n        return head->next;\\n    }\\n};\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0, first, second;\\n        ListNode *head = new ListNode(0), *tail = head;\\n        while (l1 || l2 || carry) {\\n            if (l1) {\\n                first = l1->val;\\n                l1 = l1->next;\\n            }\\n            else\\n                first = 0;\\n            \\n            if (l2) {\\n                second = l2->val;\\n                l2 = l2->next;\\n            }\\n            else\\n                second = 0;\\n            \\n            int temp = first+second+carry;\\n            tail->next = new ListNode(temp%10);\\n            tail = tail->next;\\n            carry = temp/10;\\n            \\n        }\\n        return head->next;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        \\n        #define NEXT(list, i) \\\\\\n            if (list) { \\\\\\n                i = list->val; \\\\\\n                list = list->next; \\\\\\n            } \\\\\\n            else i = 0;\\n        \\n        int carry = 0, first, second;\\n        ListNode *head = new ListNode(0), *tail = head;\\n        while (l1 || l2 || carry) {\\n            \\n            NEXT(l1, first);\\n            NEXT(l2, second);\\n            \\n            int temp = first+second+carry;\\n            tail->next = new ListNode(temp%10);\\n            tail = tail->next;\\n            carry = temp/10;\\n            \\n        }\\n        return head->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 322184,
                "title": "golang-concise-solution",
                "content": "```go\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 283820,
                "title": "solution-in-c",
                "content": "Runtime: 16 ms, faster than 100.00% of C online submissions for Add Two Numbers.\\nMemory Usage: 9 MB, less than 100.00% of C online submissions for Add Two Numbers.\\n\\n```struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\\n    struct ListNode temp;\\n    temp.val = 0; temp.next = NULL;\\n    struct ListNode* curr = &temp;\\n    int remainder = 0, sum;\\n    while (l1 != NULL || l2 != NULL || remainder != 0) {\\n        sum = remainder + (l1 == 0 ? 0 : l1->val) + (l2 == 0 ? 0: l2->val);\\n        remainder = sum/10;\\n        sum %= 10;\\n        curr->next = malloc(sizeof(struct ListNode));\\n        curr->next->next = NULL;\\n        curr->next->val = sum;\\n        curr = curr->next;\\n        l1 = (l1 == 0 ? 0 : l1->next);\\n        l2 = (l2 == 0 ? 0 : l2->next);\\n    }\\n    return temp.next;\\n}",
                "solutionTags": [],
                "code": "Runtime: 16 ms, faster than 100.00% of C online submissions for Add Two Numbers.\\nMemory Usage: 9 MB, less than 100.00% of C online submissions for Add Two Numbers.\\n\\n```struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\\n    struct ListNode temp;\\n    temp.val = 0; temp.next = NULL;\\n    struct ListNode* curr = &temp;\\n    int remainder = 0, sum;\\n    while (l1 != NULL || l2 != NULL || remainder != 0) {\\n        sum = remainder + (l1 == 0 ? 0 : l1->val) + (l2 == 0 ? 0: l2->val);\\n        remainder = sum/10;\\n        sum %= 10;\\n        curr->next = malloc(sizeof(struct ListNode));\\n        curr->next->next = NULL;\\n        curr->next->val = sum;\\n        curr = curr->next;\\n        l1 = (l1 == 0 ? 0 : l1->next);\\n        l2 = (l2 == 0 ? 0 : l2->next);\\n    }\\n    return temp.next;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 2624339,
                "title": "python-solution",
                "content": "```\\nclass Solution(object):\\n    def addTwoNumbers(self, l1, l2):\\n        \"\"\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        root = ListNode(0)\\n        result = root\\n        excess = 0\\n        while l1 or l2 or excess:\\n            if l1:\\n                excess += l1.val\\n                l1 = l1.next\\n            if l2:\\n                excess += l2.val\\n                l2 = l2.next\\n            \\n            result.next = ListNode(excess%10)\\n            result = result.next\\n            excess = excess//10\\n            \\n        return root.next   \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def addTwoNumbers(self, l1, l2):\\n        \"\"\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        root = ListNode(0)\\n        result = root\\n        excess = 0\\n        while l1 or l2 or excess:\\n            if l1:\\n                excess += l1.val\\n                l1 = l1.next\\n            if l2:\\n                excess += l2.val\\n                l2 = l2.next\\n            \\n            result.next = ListNode(excess%10)\\n            result = result.next\\n            excess = excess//10\\n            \\n        return root.next   \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1158,
                "title": "java-solution-concise-and-easy-to-understand",
                "content": "    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if(l1==null) return l2;\\n        if(l2==null) return l1;\\n        \\n        ListNode head = new ListNode(0);\\n        ListNode p = head;\\n        \\n        int tmp = 0;\\n        while(l1!=null || l2!=null || tmp!=0) {\\n            if(l1!=null) {\\n                tmp += l1.val;\\n                l1 = l1.next;\\n            }\\n            if(l2!=null) {\\n                tmp += l2.val;\\n                l2 = l2.next;\\n            }\\n            \\n            p.next = new ListNode(tmp%10);\\n            p = p.next;\\n            tmp = tmp/10;\\n        }\\n        return head.next;\\n    }",
                "solutionTags": [],
                "code": "    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if(l1==null) return l2;\\n        if(l2==null) return l1;\\n        \\n        ListNode head = new ListNode(0);\\n        ListNode p = head;\\n        \\n        int tmp = 0;\\n        while(l1!=null || l2!=null || tmp!=0) {\\n            if(l1!=null) {\\n                tmp += l1.val;\\n                l1 = l1.next;\\n            }\\n            if(l2!=null) {\\n                tmp += l2.val;\\n                l2 = l2.next;\\n            }\\n            \\n            p.next = new ListNode(tmp%10);\\n            p = p.next;\\n            tmp = tmp/10;\\n        }\\n        return head.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1946145,
                "title": "go-faster-than-98-95-solution",
                "content": "```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    result := &ListNode{}\\n    tmp := result\\n    for l1 != nil || l2 != nil {\\n        if l1 != nil {\\n            tmp.Val += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            tmp.Val += l2.Val\\n            l2 = l2.Next\\n        }\\n        if tmp.Val > 9 {\\n            tmp.Val -= 10\\n            tmp.Next = &ListNode{Val: 1}\\n        } else if l1 != nil || l2 != nil {\\n            tmp.Next = &ListNode{}\\n        }\\n        tmp = tmp.Next\\n    }\\n    return result\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    result := &ListNode{}\\n    tmp := result\\n    for l1 != nil || l2 != nil {\\n        if l1 != nil {\\n            tmp.Val += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            tmp.Val += l2.Val\\n            l2 = l2.Next\\n        }\\n        if tmp.Val > 9 {\\n            tmp.Val -= 10\\n            tmp.Next = &ListNode{Val: 1}\\n        } else if l1 != nil || l2 != nil {\\n            tmp.Next = &ListNode{}\\n        }\\n        tmp = tmp.Next\\n    }\\n    return result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 735511,
                "title": "java-so-clear",
                "content": "```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        int carry = 0;\\n        ListNode head = new ListNode(0), p = head;\\n        while (l1 != null || l2 != null || carry != 0) {\\n            int sum = carry;\\n            if (l1 != null) { sum += l1.val; l1 = l1.next; } \\n            if (l2 != null) { sum += l2.val; l2 = l2.next; }\\n            p.next = new ListNode(sum % 10);\\n            p = p.next;\\n            carry = sum / 10;\\n        }\\n        return head.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        int carry = 0;\\n        ListNode head = new ListNode(0), p = head;\\n        while (l1 != null || l2 != null || carry != 0) {\\n            int sum = carry;\\n            if (l1 != null) { sum += l1.val; l1 = l1.next; } \\n            if (l2 != null) { sum += l2.val; l2 = l2.next; }\\n            p.next = new ListNode(sum % 10);\\n            p = p.next;\\n            carry = sum / 10;\\n        }\\n        return head.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 399562,
                "title": "javascript-recursion",
                "content": "```javascript\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(list1, list2) {\\n  return add(list1, list2, 0);\\n  \\n  function add(l1, l2, carry) {\\n    const v1 = (l1 && l1.val) || 0;\\n    const v2 = (l2 && l2.val) || 0;\\n    const sum = v1 + v2 + carry;\\n    const newCarry = Math.floor(sum / 10);\\n    const val = sum % 10;\\n    return (l1 || l2 || carry) ? { val, next: add(l1 && l1.next, l2 && l2.next, newCarry) } : null;\\n  };\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```javascript\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(list1, list2) {\\n  return add(list1, list2, 0);\\n  \\n  function add(l1, l2, carry) {\\n    const v1 = (l1 && l1.val) || 0;\\n    const v2 = (l2 && l2.val) || 0;\\n    const sum = v1 + v2 + carry;\\n    const newCarry = Math.floor(sum / 10);\\n    const val = sum % 10;\\n    return (l1 || l2 || carry) ? { val, next: add(l1 && l1.next, l2 && l2.next, newCarry) } : null;\\n  };\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 383869,
                "title": "recursive-kotlin-solution",
                "content": "```\\nclass Solution {\\n    fun ListNode?.value() = this?.`val` ?: 0\\n\\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?, carry: Int = 0): ListNode? {\\n        if (l1 == null && l2 == null && carry == 0) return null\\n        val s = l1.value() + l2.value() + carry\\n        return ListNode(s % 10).apply { next = addTwoNumbers(l1?.next, l2?.next, s / 10) }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    fun ListNode?.value() = this?.`val` ?: 0\\n\\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?, carry: Int = 0): ListNode? {\\n        if (l1 == null && l2 == null && carry == 0) return null\\n        val s = l1.value() + l2.value() + carry\\n        return ListNode(s % 10).apply { next = addTwoNumbers(l1?.next, l2?.next, s / 10) }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 115816,
                "title": "simple-c-solution",
                "content": "```csharp\npublic static ListNode AddTwoNumbers(ListNode l1, ListNode l2)\n{\n    var r = new ListNode(-1);\n    var n = r;\n    int carry = 0;\n    while (carry > 0 || l1 != null || l2 != null)\n    {\n        var v = (l1?.val ?? 0) + (l2?.val ?? 0) + carry;\n        carry = (int)(v / 10);\n        n = n.next = new ListNode(v % 10);\n        l1 = l1?.next;\n        l2 = l2?.next;\n    }\n    return r.next;\n}\n```",
                "solutionTags": [],
                "code": "```csharp\npublic static ListNode AddTwoNumbers(ListNode l1, ListNode l2)\n{\n    var r = new ListNode(-1);\n    var n = r;\n    int carry = 0;\n    while (carry > 0 || l1 != null || l2 != null)\n    {\n        var v = (l1?.val ?? 0) + (l2?.val ?? 0) + carry;\n        carry = (int)(v / 10);\n        n = n.next = new ListNode(v % 10);\n        l1 = l1?.next;\n        l2 = l2?.next;\n    }\n    return r.next;\n}\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1071,
                "title": "python-solution-short-and-simple",
                "content": "    # Definition for singly-linked list.\\n    # class ListNode(object):\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.next = None\\n    \\n    class Solution(object):\\n        def addTwoNumbers(self, l1, l2):\\n            \"\"\"\\n            :type l1: ListNode\\n            :type l2: ListNode\\n            :rtype: ListNode\\n            \"\"\"\\n            ret = ListNode(0)\\n            cur = ret\\n            add = 0\\n            \\n            while l1 or l2 or add:\\n                val = (l1.val if l1 else 0) + (l2.val if l2 else 0) + add\\n                add = val / 10\\n                cur.next = ListNode(val % 10)\\n                cur = cur.next\\n                l1 = l1.next if l1 else None\\n                l2 = l2.next if l2 else None\\n            \\n            return ret.next",
                "solutionTags": [],
                "code": "    # Definition for singly-linked list.\\n    # class ListNode(object):\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.next = None\\n    \\n    class Solution(object):\\n        def addTwoNumbers(self, l1, l2):\\n            \"\"\"\\n            :type l1: ListNode\\n            :type l2: ListNode\\n            :rtype: ListNode\\n            \"\"\"\\n            ret = ListNode(0)\\n            cur = ret\\n            add = 0\\n            \\n            while l1 or l2 or add:\\n                val = (l1.val if l1 else 0) + (l2.val if l2 else 0) + add\\n                add = val / 10\\n                cur.next = ListNode(val % 10)\\n                cur = cur.next\\n                l1 = l1.next if l1 else None\\n                l2 = l2.next if l2 else None\\n            \\n            return ret.next",
                "codeTag": "Java"
            },
            {
                "id": 2618424,
                "title": "java-optimal-solution",
                "content": "**Just in case it helps you then upvote this. Happy LeetCoding!!**\\n```\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode dummy = new ListNode();\\n        ListNode temp = dummy;\\n        int sum=0;\\n        int carry=0;\\n        while(l1!=null || l2!=null || carry==1){\\n            sum=0;\\n            if(l1!=null){\\n                sum+=l1.val;\\n                l1 = l1.next;\\n            }\\n            if(l2!=null){\\n                sum+=l2.val;\\n                l2 = l2.next;\\n            }\\n            sum+=carry;\\n            carry = sum/10;\\n            ListNode node = new ListNode(sum%10);\\n            temp.next = node;\\n            temp = temp.next;\\n        }\\n        return dummy.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode dummy = new ListNode();\\n        ListNode temp = dummy;\\n        int sum=0;\\n        int carry=0;\\n        while(l1!=null || l2!=null || carry==1){\\n            sum=0;\\n            if(l1!=null){\\n                sum+=l1.val;\\n                l1 = l1.next;\\n            }\\n            if(l2!=null){\\n                sum+=l2.val;\\n                l2 = l2.next;\\n            }\\n            sum+=carry;\\n            carry = sum/10;\\n            ListNode node = new ListNode(sum%10);\\n            temp.next = node;\\n            temp = temp.next;\\n        }\\n        return dummy.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3365185,
                "title": "c-recursive-approach-with-clear-explanation",
                "content": "\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1==NULL &&l2==NULL) return l2;\\n        else if(l1==NULL) return l2;\\n        else if(l2==NULL) return l1;\\n\\n        int a =l1->val+l2->val;\\n        //taking the unit digit only in consideration \\n        ListNode* p=new ListNode(a%10);\\n        p->next=addTwoNumbers(l1->next,l2->next);\\n        //if the sum has carry it will be not more than 1 so \\n        //we introduce a new node and add the next value of the\\n        //linkedlist with the carry one \\n        if(a>=10){\\n            p->next=addTwoNumbers(p->next,new ListNode(1));\\n        }\\n        return p;\\n\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1==NULL &&l2==NULL) return l2;\\n        else if(l1==NULL) return l2;\\n        else if(l2==NULL) return l1;\\n\\n        int a =l1->val+l2->val;\\n        //taking the unit digit only in consideration \\n        ListNode* p=new ListNode(a%10);\\n        p->next=addTwoNumbers(l1->next,l2->next);\\n        //if the sum has carry it will be not more than 1 so \\n        //we introduce a new node and add the next value of the\\n        //linkedlist with the carry one \\n        if(a>=10){\\n            p->next=addTwoNumbers(p->next,new ListNode(1));\\n        }\\n        return p;\\n\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 412117,
                "title": "swift-44ms",
                "content": "``` swift\\nfunc addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        var l1: ListNode? = l1\\n        var l2: ListNode? = l2\\n        \\n        var result: ListNode? = ListNode(0)\\n        let head = result\\n        \\n        var carry = 0\\n        while l1 != nil || l2 != nil || carry > 0 {\\n            let firstValue = l1?.val ?? 0\\n            let secondValue = l2?.val ?? 0\\n            let sum = firstValue + secondValue + carry\\n            \\n            let value = sum % 10\\n            carry = sum / 10\\n            \\n            result?.next = ListNode(value)\\n            result = result?.next\\n            l1 = l1?.next\\n            l2 = l2?.next\\n        }\\n        \\n        return head?.next\\n    }\\n```",
                "solutionTags": [],
                "code": "``` swift\\nfunc addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        var l1: ListNode? = l1\\n        var l2: ListNode? = l2\\n        \\n        var result: ListNode? = ListNode(0)\\n        let head = result\\n        \\n        var carry = 0\\n        while l1 != nil || l2 != nil || carry > 0 {\\n            let firstValue = l1?.val ?? 0\\n            let secondValue = l2?.val ?? 0\\n            let sum = firstValue + secondValue + carry\\n            \\n            let value = sum % 10\\n            carry = sum / 10\\n            \\n            result?.next = ListNode(value)\\n            result = result?.next\\n            l1 = l1?.next\\n            l2 = l2?.next\\n        }\\n        \\n        return head?.next\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1464,
                "title": "intuitive-c-code",
                "content": "\\n\\n    class Solution {\\n    public:\\n        ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode* head = new ListNode(0);\\n            ListNode* cur = head;\\n            int plus = 0;\\n            while (l1 || l2) {\\n                int num = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + plus;\\n                if (num >= 10) {\\n                    num -= 10;\\n                    plus = 1;\\n                } else plus = 0;\\n                cur->next = new ListNode(num);\\n                cur = cur->next;\\n                if (l1) l1 = l1->next;\\n                if (l2) l2 = l2->next;\\n            }\\n            if (plus) cur->next = new ListNode(1);\\n            return head->next;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode* head = new ListNode(0);\\n            ListNode* cur = head;\\n            int plus = 0;\\n            while (l1 || l2) {\\n                int num = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + plus;\\n                if (num >= 10) {\\n                    num -= 10;\\n                    plus = 1;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2920501,
                "title": "python",
                "content": "```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n    \\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1, num2 = \\'\\', \\'\\'\\n        node1, node2 = l1, l2\\n        while node1 is not None:\\n            num1 = str(node1.val) + num1\\n            node1 = node1.next\\n        while node2 is not None:\\n            num2 = str(node2.val) + num2\\n            node2 = node2.next\\n        num1 = int(num1)\\n        num2 = int(num2)\\n        summ = num1 + num2\\n        summ = str(summ)\\n        \\n        digitnodes = list(summ)\\n        \\n        for idx, digit in enumerate(summ):\\n            if idx == 0:\\n                digitnodes[idx] = ListNode(val = digit, next=None)\\n            else: \\n                digitnodes[idx] = ListNode(val = digit, next=digitnodes[idx-1])\\n            \\n        \\n        return(digitnodes[len(digitnodes)-1])  \\n```",
                "solutionTags": [],
                "code": "```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n    \\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1, num2 = \\'\\', \\'\\'\\n        node1, node2 = l1, l2\\n        while node1 is not None:\\n            num1 = str(node1.val) + num1\\n            node1 = node1.next\\n        while node2 is not None:\\n            num2 = str(node2.val) + num2\\n            node2 = node2.next\\n        num1 = int(num1)\\n        num2 = int(num2)\\n        summ = num1 + num2\\n        summ = str(summ)\\n        \\n        digitnodes = list(summ)\\n        \\n        for idx, digit in enumerate(summ):\\n            if idx == 0:\\n                digitnodes[idx] = ListNode(val = digit, next=None)\\n            else: \\n                digitnodes[idx] = ListNode(val = digit, next=digitnodes[idx-1])\\n            \\n        \\n        return(digitnodes[len(digitnodes)-1])  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2383456,
                "title": "fastest-solution-explained-0ms-100-o-n-time-complexity-o-n-space-complexity",
                "content": "\\n(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful, ***please upvote*** this post.)\\n***Take care brother, peace, love!***\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 3.27MB*** (beats 99.04% / 90.42%).\\n* *** Java ***\\n\\n```\\n\\nclass Solution \\n{\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) \\n    {\\n        ListNode head= new ListNode(-1);//creating a node in order to store the sum of digit in a List format \\n        ListNode temp= head;//we are using temp to add node to the new List \\n        \\n        int carry= 0;//we are storing the carry at every digit pair iteration \\n        \\n        while(l1 != null || l2 != null || carry > 0 )//our loop terminating condtition, all the numbers will be added \\n        {\\n            int sum= 0;//to store the sum at every digit pair iteration \\n            \\n            if(l1 != null)//adding list one node to the local sum\\n            {\\n                sum+= l1.val;//adding to the sum \\n                l1= l1.next;//moving the l1 pointer to the next node\\n            }\\n            \\n            if(l2 != null)\\n            {\\n                sum+= l2.val;//adding to the sum \\n                l2= l2.next;//moving the l2 pointer to the next node\\n            }\\n            sum+= carry;//adding the sum inclusive carry\\n            carry= sum / 10;//extracting the first digit \\n            ListNode node= new ListNode(sum % 10);//extracting the last digit and creating the node \\n            temp.next= node;//linking the node to the list \\n            \\n            temp= temp.next;//moving the temp \\n        }\\n        return head.next;//reaturning the new head of the new list \\n    }\\n}//Please do Upvote, it helps a lot\\n\\n```\\n* Time Complexity :- BigO(max(N, M)) where N is length of l1 & M is length of l2\\n\\n* Space Complexity :- BigO(max(N,M))\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 10MB*** (beats 100.00% / 95.49%).\\n* *** Python ***\\n\\n```\\n\\nclass ListNode:\\n\\t\"\"\" Given in the problem \"\"\"\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\t\\t\\ndef make_list_from_ListNode(l1):\\n    list1 = []\\n    while l1: #is not None\\n        list1.append(l1.val)\\n        l1 = l1.next\\n    return list1\\n\\ndef make_ListNode_from_list(a_list):\\n    head = l3 = ListNode(a_list[0])\\n    for x in a_list[1:]:\\n        l3.next = l3 = ListNode(x)\\n    return head\\n\\n```\\n\\n```\\nclass Solution:\\n\\tdef addTwoNumbers(self, l1, l2):\\n\\t\\tlist1 = make_list_from_ListNode(l1)\\n\\t\\tlist2 = make_list_from_ListNode(l2)\\n\\n\\t\\t### RIGHT PAD WITH ZEROES\\n\\t\\tlen_list1 = len(list1)\\n\\t\\tlen_list2 = len(list2)\\n\\t\\tif len_list1 > len_list2:\\n\\t\\t\\tpad = len_list1 - len_list2\\n\\t\\t\\tlist2 = list2 + [0,] * pad\\n\\t\\telif len_list2 > len_list1:\\n\\t\\t\\tpad = len_list2 - len_list1\\n\\t\\t\\tlist1 = list1 + [0,] * pad\\n\\n\\t\\t### DO THE MATH\\n\\t\\td = 0\\n\\t\\tthe_sum = list()\\n\\t\\tfor x,y in zip(list1, list2):\\n\\t\\t\\td, m = divmod(x + y + d, 10)\\n\\t\\t\\tthe_sum.append(m)\\n\\t\\tif d != 0:\\n\\t\\t\\tthe_sum.append(d)\\n\\t\\treturn make_ListNode_from_list(the_sum)\\n```\\n\\n```\\n##head = l3 = ListNode(\\'dummy\\')\\ntemp = ListNode(\\'dummy\\')\\nhead = temp\\nl3 = temp\\n\\n##l3.next = l3 = ListNode(m)\\ntemp = ListNode(m)\\nl3.next = temp\\nl3 = temp\\n\\n# also equivalent\\nl3.next = ListNode(m)\\nl3 = l3.next\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 23.7MB*** (beats 59.24% / 60.42%).\\n* *** C++ ***\\n\\n\\n```\\n\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *ptr = new ListNode();     //new list;\\n        ListNode *temp = ptr;\\n        \\n        int c = 0;\\n\\t\\t//traversing both list till one of the list not reaches NULL\\n        while (l1 != NULL ||  l2 != NULL || c)\\n        {\\n            int sum = 0;\\n\\t\\t\\t// if l1  is not null\\n\\t\\t\\t// add l1-> value to sum\\n            if(l1 != NULL)\\n            {\\n                sum += l1->val;\\n                l1 = l1 -> next;\\n            }\\n            \\n\\t\\t\\t// if l2  is not null\\n\\t\\t\\t// add l2-> value to sum\\n            if(l2 != NULL)\\n            {\\n                sum += l2->val;\\n                l2 = l2 -> next;\\n            }\\n            \\n\\t\\t\\t// add carry to sum\\n            sum += c;\\n\\t\\t\\t// carry is updated by sum/10 because for 18 , \\n\\t\\t\\t// 18 / 10 is 1 which is the carry\\n            c = sum/10;\\n\\t\\t\\t// add sum% 10 to new node as it containg the sum\\n            ListNode *node = new ListNode(sum%10);\\n            temp -> next = node;\\n            temp = temp -> next;\\n        }\\n        return ptr -> next;\\n    }\\n};\\n\\n```\\n* We have to Traverse Both Lists & add sum to new list.\\n* Sum is equivalent to val1 + val2 + carry from previous Operation.\\n* The resulting node will be sum%10.\\n* Carry is updated by sum/10 for next Opeartion.\\n* Time Complexity O(n).\\n* Space Compelxity O(max(l1,l2)).\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 78MB*** (beats 100.00% / 100.00%).\\n* *** JavaScript ***\\n\\n\\n```\\n\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    var List = new ListNode(0);\\n    var head = List;\\n    var sum = 0;\\n    var carry = 0;\\n\\n    while(l1!==null||l2!==null||sum>0){\\n\\n        if(l1!==null){\\n            sum = sum + l1.val;\\n            l1 = l1.next;\\n        }\\n        if(l2!==null){\\n            sum = sum + l2.val;\\n            l2 = l2.next;\\n        }\\n        if(sum>=10){\\n            carry = 1;\\n            sum = sum - 10;\\n        }\\n\\n        head.next = new ListNode(sum);\\n        head = head.next;\\n\\n        sum = carry;\\n        carry = 0;\\n\\n    }\\n\\n    return List.next;\\n};\\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 15.23MB*** (beats 89.94% / 90.99%).\\n* *** Python3 ***\\n\\n\\n```\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        res = dummy = ListNode()\\n        carry = 0\\n        while l1 or l2:\\n            v1, v2 = 0, 0\\n            if l1: v1, l1 = l1.val, l1.next\\n            if l2: v2, l2 = l2.val, l2.next\\n            \\n            val = carry + v1 + v2\\n            res.next = ListNode(val%10)\\n            res, carry = res.next, val//10\\n            \\n        if carry:\\n            res.next = ListNode(carry)\\n            \\n        return dummy.next\\n\\n```\\n* We simply traverse lists, sum values and save result in a new list. \\n* Sum is equal to val1 + val2 + carry from the previous operation. sum%10 gives us resulting digit for current node, and sum//10 gives us a value to carry to the next operation.\\n\\n* Time: O(n)\\n* Space: O(1)\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 33.33MB*** (beats 99.00% / 60.12%).\\n* *** Kotlin ***\\n\\n\\n```\\n\\nclass Solution {\\n    fun ListNode?.value() = this?.`val` ?: 0\\n\\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?, carry: Int = 0): ListNode? {\\n        if (l1 == null && l2 == null && carry == 0) return null\\n        val s = l1.value() + l2.value() + carry\\n        return ListNode(s % 10).apply { next = addTwoNumbers(l1?.next, l2?.next, s / 10) }\\n    }\\n}\\n\\n```\\n\\n```\\nclass Solution {\\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\\n        var list1 = l1\\n        var list2 = l2\\n        val head = ListNode(0)\\n        var result: ListNode? = head\\n        var carry = 0\\n        while (list1 != null || list2 != null || carry > 0) {\\n            val x1 = list1?.`val` ?: 0\\n            val x2 = list2?.`val` ?: 0\\n            val sum = (x1 + x2 + carry) % 10\\n            carry = (x1 + x2 + carry) / 10\\n            result?.next = ListNode(sum)\\n            result = result?.next\\n            if (list1 != null) list1 = list1.next\\n            if (list2 != null) list2 = list2.next\\n        }\\n        return head.next\\n    }\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 13.17MB*** (beats 79.34% / 99.92%).\\n* *** Swift ***\\n\\n\\n```\\n\\nclass Solution {\\n    private var dig = 0\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if l1 == nil && l2 == nil && dig == 0 { return nil }\\n        let sum = (l1?.val ?? 0) + (l2?.val ?? 0) + dig\\n        dig = sum / 10\\n        return .init(sum % 10, addTwoNumbers(l1?.next, l2?.next))\\n    }\\n}\\n\\n```\\n\\n```\\nclass Solution {\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        var l1 = l1\\n        var l2 = l2\\n        var prev = ListNode(0)\\n        var carry = 0\\n        let head = prev\\n        \\n        while l1 != nil || l2 != nil || carry != 0 {\\n            let cur = ListNode(0)\\n            let sum = (l2 == nil ? 0 : l2!.val) + (l1 == nil ? 0 : l1!.val) + carry\\n            cur.val = sum % 10\\n            carry = sum / 10\\n            prev.next = cur\\n            prev = cur\\n            l1 = l1 == nil ? l1: l1?.next\\n            l2 = l2 == nil ? l2: l2?.next\\n        }\\n        \\n        return head.next\\n    }\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 62.07MB*** (beats 99.99% / 99.99%).\\n* *** PHP ***\\n\\n\\n```\\n\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $l1\\n     * @param ListNode $l2\\n     * @return ListNode\\n     */\\n    function addTwoNumbers($l1, $l2) {\\n        $fake_head = new ListNode(0);\\n        $res = $fake_head;\\n        $carry = 0;\\n        while ($l1 != null || $l2 != null) {\\n            $sum = $carry;\\n            $carry = 0;\\n            if ($l1 !== null) {\\n                $sum += $l1->val;\\n                $l1 = $l1->next;\\n            }\\n            if ($l2 !== null) {\\n                $sum += $l2->val;\\n                $l2 = $l2->next;\\n            }\\n            \\n            if ($sum > 9) {\\n                $carry += 1;\\n                $sum %= 10;\\n            }\\n            $res->next = new ListNode($sum);\\n            $res = $res->next;\\n        }\\n        \\n        if ($carry > 0) {\\n            $res->next = new ListNode($carry);\\n        }\\n        \\n        return $fake_head->next;\\n    }\\n}\\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 1.17MB*** (beats 99.64% / 99.92%).\\n* *** C ***\\n\\n\\n```\\n\\n// create a result list\\n    struct ListNode* result = malloc(sizeof(struct ListNode)); \\n    struct ListNode* ptr = result;\\n    result->val = 0;\\n    result->next = NULL;\\n\\n    int carry = 0;\\n    \\n    while (l1 != NULL || l2!=NULL || carry !=0){\\n        \\n        int a = (l1 == NULL) ? 0 : l1->val;\\n        int b = (l2 == NULL) ? 0 : l2->val;\\n        ptr->val = a + b + carry;\\n        carry = ptr->val / 10;\\n        ptr->val = ptr->val %10;\\n        \\n        // the reason to check if two pointer is NULL is to ensure it will not update after it is already the Last node.\\n        // try consider the case of \\n        // [9,9,9,9,9,9,9]\\n        // [9,9,9,9]\\n        if(l1!=NULL){\\n            l1 = (l1->next ==NULL)? NULL: l1->next;\\n        }\\n        \\n        if(l2 !=NULL){\\n            l2 = (l2->next !=NULL)? l2->next: NULL;\\n        }\\n        \\n        // this is to ensure only create new node if there some calculations needed\\n        if(l1 != NULL || l2!=NULL || carry !=0){\\n            ptr->next = malloc(sizeof(struct ListNode));\\n            ptr->next->next=NULL;\\n            ptr = ptr->next;\\n        }\\n        \\n    }\\n    return result;\\n}\\n\\n```\\n\\n```struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n\\n    struct ListNode * res=NULL,*start=NULL;\\n    int x,y,c=0;\\n    \\n    if (!l1 && !l2)\\n        return NULL;\\n    else if (!l1)\\n        return l2;\\n    else if (!l2)\\n        return l1;\\n\\n    while(l1 || l2 || c)\\n    {\\n        x = l1?l1->val:0;\\n        y = l2?l2->val:0;\\n        if (!res)\\n        {\\n            res = malloc(sizeof(struct ListNode));\\n            start = res;\\n        }\\n        else\\n        {\\n            res->next = malloc(sizeof(struct ListNode));\\n            res = res->next;\\n        }\\n        res->next =NULL;\\n        res->val = (x+y+c)%10;\\n        c = (x+y+c)/10;\\n        l1=l1?l1->next:NULL;\\n        l2=l2?l2->next:NULL;\\n    }\\n    return start;\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\n***\"Open your eyes. Expect us.\" - \\uD835\\uDCD0\\uD835\\uDCF7\\uD835\\uDCF8\\uD835\\uDCF7\\uD835\\uDD02\\uD835\\uDCF6\\uD835\\uDCF8\\uD835\\uDCFE\\uD835\\uDCFC***\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "Swift",
                    "Kotlin",
                    "PHP"
                ],
                "code": "```\\n```\n```\\n\\nclass Solution \\n{\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) \\n    {\\n        ListNode head= new ListNode(-1);//creating a node in order to store the sum of digit in a List format \\n        ListNode temp= head;//we are using temp to add node to the new List \\n        \\n        int carry= 0;//we are storing the carry at every digit pair iteration \\n        \\n        while(l1 != null || l2 != null || carry > 0 )//our loop terminating condtition, all the numbers will be added \\n        {\\n            int sum= 0;//to store the sum at every digit pair iteration \\n            \\n            if(l1 != null)//adding list one node to the local sum\\n            {\\n                sum+= l1.val;//adding to the sum \\n                l1= l1.next;//moving the l1 pointer to the next node\\n            }\\n            \\n            if(l2 != null)\\n            {\\n                sum+= l2.val;//adding to the sum \\n                l2= l2.next;//moving the l2 pointer to the next node\\n            }\\n            sum+= carry;//adding the sum inclusive carry\\n            carry= sum / 10;//extracting the first digit \\n            ListNode node= new ListNode(sum % 10);//extracting the last digit and creating the node \\n            temp.next= node;//linking the node to the list \\n            \\n            temp= temp.next;//moving the temp \\n        }\\n        return head.next;//reaturning the new head of the new list \\n    }\\n}//Please do Upvote, it helps a lot\\n\\n```\n```\\n```\n```\\n```\n```\\n\\nclass ListNode:\\n\\t\"\"\" Given in the problem \"\"\"\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\t\\t\\ndef make_list_from_ListNode(l1):\\n    list1 = []\\n    while l1: #is not None\\n        list1.append(l1.val)\\n        l1 = l1.next\\n    return list1\\n\\ndef make_ListNode_from_list(a_list):\\n    head = l3 = ListNode(a_list[0])\\n    for x in a_list[1:]:\\n        l3.next = l3 = ListNode(x)\\n    return head\\n\\n```\n```\\nclass Solution:\\n\\tdef addTwoNumbers(self, l1, l2):\\n\\t\\tlist1 = make_list_from_ListNode(l1)\\n\\t\\tlist2 = make_list_from_ListNode(l2)\\n\\n\\t\\t### RIGHT PAD WITH ZEROES\\n\\t\\tlen_list1 = len(list1)\\n\\t\\tlen_list2 = len(list2)\\n\\t\\tif len_list1 > len_list2:\\n\\t\\t\\tpad = len_list1 - len_list2\\n\\t\\t\\tlist2 = list2 + [0,] * pad\\n\\t\\telif len_list2 > len_list1:\\n\\t\\t\\tpad = len_list2 - len_list1\\n\\t\\t\\tlist1 = list1 + [0,] * pad\\n\\n\\t\\t### DO THE MATH\\n\\t\\td = 0\\n\\t\\tthe_sum = list()\\n\\t\\tfor x,y in zip(list1, list2):\\n\\t\\t\\td, m = divmod(x + y + d, 10)\\n\\t\\t\\tthe_sum.append(m)\\n\\t\\tif d != 0:\\n\\t\\t\\tthe_sum.append(d)\\n\\t\\treturn make_ListNode_from_list(the_sum)\\n```\n```\\n##head = l3 = ListNode(\\'dummy\\')\\ntemp = ListNode(\\'dummy\\')\\nhead = temp\\nl3 = temp\\n\\n##l3.next = l3 = ListNode(m)\\ntemp = ListNode(m)\\nl3.next = temp\\nl3 = temp\\n\\n# also equivalent\\nl3.next = ListNode(m)\\nl3 = l3.next\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *ptr = new ListNode();     //new list;\\n        ListNode *temp = ptr;\\n        \\n        int c = 0;\\n\\t\\t//traversing both list till one of the list not reaches NULL\\n        while (l1 != NULL ||  l2 != NULL || c)\\n        {\\n            int sum = 0;\\n\\t\\t\\t// if l1  is not null\\n\\t\\t\\t// add l1-> value to sum\\n            if(l1 != NULL)\\n            {\\n                sum += l1->val;\\n                l1 = l1 -> next;\\n            }\\n            \\n\\t\\t\\t// if l2  is not null\\n\\t\\t\\t// add l2-> value to sum\\n            if(l2 != NULL)\\n            {\\n                sum += l2->val;\\n                l2 = l2 -> next;\\n            }\\n            \\n\\t\\t\\t// add carry to sum\\n            sum += c;\\n\\t\\t\\t// carry is updated by sum/10 because for 18 , \\n\\t\\t\\t// 18 / 10 is 1 which is the carry\\n            c = sum/10;\\n\\t\\t\\t// add sum% 10 to new node as it containg the sum\\n            ListNode *node = new ListNode(sum%10);\\n            temp -> next = node;\\n            temp = temp -> next;\\n        }\\n        return ptr -> next;\\n    }\\n};\\n\\n```\n```\\n```\n```\\n```\n```\\n\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    var List = new ListNode(0);\\n    var head = List;\\n    var sum = 0;\\n    var carry = 0;\\n\\n    while(l1!==null||l2!==null||sum>0){\\n\\n        if(l1!==null){\\n            sum = sum + l1.val;\\n            l1 = l1.next;\\n        }\\n        if(l2!==null){\\n            sum = sum + l2.val;\\n            l2 = l2.next;\\n        }\\n        if(sum>=10){\\n            carry = 1;\\n            sum = sum - 10;\\n        }\\n\\n        head.next = new ListNode(sum);\\n        head = head.next;\\n\\n        sum = carry;\\n        carry = 0;\\n\\n    }\\n\\n    return List.next;\\n};\\n\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        res = dummy = ListNode()\\n        carry = 0\\n        while l1 or l2:\\n            v1, v2 = 0, 0\\n            if l1: v1, l1 = l1.val, l1.next\\n            if l2: v2, l2 = l2.val, l2.next\\n            \\n            val = carry + v1 + v2\\n            res.next = ListNode(val%10)\\n            res, carry = res.next, val//10\\n            \\n        if carry:\\n            res.next = ListNode(carry)\\n            \\n        return dummy.next\\n\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution {\\n    fun ListNode?.value() = this?.`val` ?: 0\\n\\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?, carry: Int = 0): ListNode? {\\n        if (l1 == null && l2 == null && carry == 0) return null\\n        val s = l1.value() + l2.value() + carry\\n        return ListNode(s % 10).apply { next = addTwoNumbers(l1?.next, l2?.next, s / 10) }\\n    }\\n}\\n\\n```\n```\\nclass Solution {\\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\\n        var list1 = l1\\n        var list2 = l2\\n        val head = ListNode(0)\\n        var result: ListNode? = head\\n        var carry = 0\\n        while (list1 != null || list2 != null || carry > 0) {\\n            val x1 = list1?.`val` ?: 0\\n            val x2 = list2?.`val` ?: 0\\n            val sum = (x1 + x2 + carry) % 10\\n            carry = (x1 + x2 + carry) / 10\\n            result?.next = ListNode(sum)\\n            result = result?.next\\n            if (list1 != null) list1 = list1.next\\n            if (list2 != null) list2 = list2.next\\n        }\\n        return head.next\\n    }\\n}\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution {\\n    private var dig = 0\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if l1 == nil && l2 == nil && dig == 0 { return nil }\\n        let sum = (l1?.val ?? 0) + (l2?.val ?? 0) + dig\\n        dig = sum / 10\\n        return .init(sum % 10, addTwoNumbers(l1?.next, l2?.next))\\n    }\\n}\\n\\n```\n```\\nclass Solution {\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        var l1 = l1\\n        var l2 = l2\\n        var prev = ListNode(0)\\n        var carry = 0\\n        let head = prev\\n        \\n        while l1 != nil || l2 != nil || carry != 0 {\\n            let cur = ListNode(0)\\n            let sum = (l2 == nil ? 0 : l2!.val) + (l1 == nil ? 0 : l1!.val) + carry\\n            cur.val = sum % 10\\n            carry = sum / 10\\n            prev.next = cur\\n            prev = cur\\n            l1 = l1 == nil ? l1: l1?.next\\n            l2 = l2 == nil ? l2: l2?.next\\n        }\\n        \\n        return head.next\\n    }\\n}\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $l1\\n     * @param ListNode $l2\\n     * @return ListNode\\n     */\\n    function addTwoNumbers($l1, $l2) {\\n        $fake_head = new ListNode(0);\\n        $res = $fake_head;\\n        $carry = 0;\\n        while ($l1 != null || $l2 != null) {\\n            $sum = $carry;\\n            $carry = 0;\\n            if ($l1 !== null) {\\n                $sum += $l1->val;\\n                $l1 = $l1->next;\\n            }\\n            if ($l2 !== null) {\\n                $sum += $l2->val;\\n                $l2 = $l2->next;\\n            }\\n            \\n            if ($sum > 9) {\\n                $carry += 1;\\n                $sum %= 10;\\n            }\\n            $res->next = new ListNode($sum);\\n            $res = $res->next;\\n        }\\n        \\n        if ($carry > 0) {\\n            $res->next = new ListNode($carry);\\n        }\\n        \\n        return $fake_head->next;\\n    }\\n}\\n\\n```\n```\\n```\n```\\n```\n```\\n\\n// create a result list\\n    struct ListNode* result = malloc(sizeof(struct ListNode)); \\n    struct ListNode* ptr = result;\\n    result->val = 0;\\n    result->next = NULL;\\n\\n    int carry = 0;\\n    \\n    while (l1 != NULL || l2!=NULL || carry !=0){\\n        \\n        int a = (l1 == NULL) ? 0 : l1->val;\\n        int b = (l2 == NULL) ? 0 : l2->val;\\n        ptr->val = a + b + carry;\\n        carry = ptr->val / 10;\\n        ptr->val = ptr->val %10;\\n        \\n        // the reason to check if two pointer is NULL is to ensure it will not update after it is already the Last node.\\n        // try consider the case of \\n        // [9,9,9,9,9,9,9]\\n        // [9,9,9,9]\\n        if(l1!=NULL){\\n            l1 = (l1->next ==NULL)? NULL: l1->next;\\n        }\\n        \\n        if(l2 !=NULL){\\n            l2 = (l2->next !=NULL)? l2->next: NULL;\\n        }\\n        \\n        // this is to ensure only create new node if there some calculations needed\\n        if(l1 != NULL || l2!=NULL || carry !=0){\\n            ptr->next = malloc(sizeof(struct ListNode));\\n            ptr->next->next=NULL;\\n            ptr = ptr->next;\\n        }\\n        \\n    }\\n    return result;\\n}\\n\\n```\n```struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n\\n    struct ListNode * res=NULL,*start=NULL;\\n    int x,y,c=0;\\n    \\n    if (!l1 && !l2)\\n        return NULL;\\n    else if (!l1)\\n        return l2;\\n    else if (!l2)\\n        return l1;\\n\\n    while(l1 || l2 || c)\\n    {\\n        x = l1?l1->val:0;\\n        y = l2?l2->val:0;\\n        if (!res)\\n        {\\n            res = malloc(sizeof(struct ListNode));\\n            start = res;\\n        }\\n        else\\n        {\\n            res->next = malloc(sizeof(struct ListNode));\\n            res = res->next;\\n        }\\n        res->next =NULL;\\n        res->val = (x+y+c)%10;\\n        c = (x+y+c)/10;\\n        l1=l1?l1->next:NULL;\\n        l2=l2?l2->next:NULL;\\n    }\\n    return start;\\n}\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 151365,
                "title": "concise-javascript-solution",
                "content": "```js\\nfunction addTwoNumbers(l1, l2) {\\n  const before = new ListNode();\\n  let tail = before;\\n  let c = 0;\\n\\n  while (l1 || l2 || c) {\\n    const v1 = l1 ? l1.val : 0;\\n    const v2 = l2 ? l2.val : 0;\\n    const v = v1+v2+c;\\n\\n    tail.next = new ListNode(v%10);\\n    tail = tail.next;\\n    c = v >= 10 ? 1 : 0;\\n    l1 = l1&&l1.next;\\n    l2 = l2&&l2.next;\\n  }\\n\\n  return before.next;\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```js\\nfunction addTwoNumbers(l1, l2) {\\n  const before = new ListNode();\\n  let tail = before;\\n  let c = 0;\\n\\n  while (l1 || l2 || c) {\\n    const v1 = l1 ? l1.val : 0;\\n    const v2 = l2 ? l2.val : 0;\\n    const v = v1+v2+c;\\n\\n    tail.next = new ListNode(v%10);\\n    tail = tail.next;\\n    c = v >= 10 ? 1 : 0;\\n    l1 = l1&&l1.next;\\n    l2 = l2&&l2.next;\\n  }\\n\\n  return before.next;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1343361,
                "title": "javascript-fast-detail-explanation-clean-code-solution",
                "content": "Explanation\\n1. Suppose we have to add 243 & 564. \\nWe create a node (let newNode = new ListNode(0);) and take a variable head and make it equal to newNode.\\nNow what is head ?\\nA node which is pointing to nothing. Floating in universe.\\n\\nWhy we created a node head ???\\nThis head which is pointing to nothing indicates that our sum is nothing initially, \\nWhen we will start addition we will use this head to store our sum\\n\\nWe  take a variable as carry.\\n Notice we can only move from the head towards the tail and it won\\'t matter because 243 + 564 = 342 + 465\\n\\n2. We come into a while loop and say let \"a\" or first value is \"2\" from 243 and b or second value be \"5\" from 564.\\n\\n3. We add both value (2 + 5 =  7) and put them into sum. But wait we learned one thing,\\n    if the sum is lesser than 10 put it into sum\\n    but if it is greater or equal to 10, put the last digit from that 2 digit number into sum and the first digit into carry.\\n    For example, if we add 2 numbers and get suppose 13, we put 3 into sum and 1 in carry.\\n\\n4. After the first addition following will be the result.\\n![image](https://assets.leetcode.com/users/images/18bf96b6-ff9b-48a8-9790-c0414e6b3e0a_1640754641.1883051.jpeg)\\n\\n\\nNow that head which was pointing towards nothing will point to 7\\n head.next = new ListNode(sum%10);\\nAbove line says if sum is greater than 10 make variable head point to its last digit in above case 7 is a single digit num so head will point to 7.\\n\\n5. Now we will add next numbers i.e 4 & 6 = 10, now we will put 0 into sum and 1 into carry.                                    \\nNow head variable will move forward ( head = head.next; ) and sit on 7 and point to 0.\\n![image](https://assets.leetcode.com/users/images/6c452f7c-2087-44a6-9413-20fdb83b63ff_1640754656.0841806.jpeg)\\n\\n\\n6. Now we will add next numbers i.e 3 & 4 = 7, this time carry will also be added to sum becomes 3 + 4 + 1 = 8.           \\n![image](https://assets.leetcode.com/users/images/703ad044-1f5a-4f67-9acf-c29b468a969d_1640754676.6022322.jpeg)\\n\\n\\nNow head variable will move forward ( head = head.next; ) and sit on 0 and point to 8.\\n\\nNow we have nothing left to add so ( return newNode.next; ) will return the answer.\\n\\nwhy newNode.next is returning the answer???????????\\n\\nnewNode was poiting to to nothing but newNode.next is ??????\\nThe first digit of our sum which is generated by head.\\n\\n7. Lastely if(carry > 0) head.next = new ListNode(carry);\\n    this line is saying after adding last digits of the num we get some carry,\\n    So create a new node and put it into sum.\\n\\n\\n\\n   Hope I was clear and still any doubts reach me out.\\n   HAPPY CODING.\\n```\\n    var addTwoNumbers = function(l1, l2) {\\n        let newNode = new ListNode(0);\\n        let head = newNode;\\n        let carry = 0;\\n    \\n        while(l1 || l2) {\\n            let a = l1 && l1.val;\\n            let b = l2 && l2.val;\\n            let sum = a + b + carry;\\n        \\n            carry = Math.floor(sum/10);\\n            head.next = new ListNode(sum%10);\\n        \\n            if(l1) l1 = l1.next;\\n            if(l2) l2 = l2.next;\\n        \\n            head = head.next;\\n        }\\n        if(carry > 0) head.next = new ListNode(carry);\\n        return newNode.next;\\n    };\\n\\t```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n    var addTwoNumbers = function(l1, l2) {\\n        let newNode = new ListNode(0);\\n        let head = newNode;\\n        let carry = 0;\\n    \\n        while(l1 || l2) {\\n            let a = l1 && l1.val;\\n            let b = l2 && l2.val;\\n            let sum = a + b + carry;\\n        \\n            carry = Math.floor(sum/10);\\n            head.next = new ListNode(sum%10);\\n        \\n            if(l1) l1 = l1.next;\\n            if(l2) l2 = l2.next;\\n        \\n            head = head.next;\\n        }\\n        if(carry > 0) head.next = new ListNode(carry);\\n        return newNode.next;\\n    };\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1083733,
                "title": "simple-code-faster-than-99-70",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* l3=new ListNode(), *curr=l3;\\n        int carry=0;\\n        while(l1||l2||carry)\\n        {\\n            if(l1!=NULL)\\n            {\\n                carry+=l1->val;\\n                l1=l1->next;\\n            }\\n            if(l2!=NULL)\\n            {\\n                carry+=l2->val;\\n                l2=l2->next;\\n            }\\n            curr->next=new ListNode(carry%10);\\n            carry/=10;\\n            curr=curr->next;\\n        }\\n        return l3->next;\\n    }\\n};\\n```\\nIf you have any doubts, feel free to ask!!!\\nIf you like, please **UPVOTE**\\nHappy Coding :)",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* l3=new ListNode(), *curr=l3;\\n        int carry=0;\\n        while(l1||l2||carry)\\n        {\\n            if(l1!=NULL)\\n            {\\n                carry+=l1->val;\\n                l1=l1->next;\\n            }\\n            if(l2!=NULL)\\n            {\\n                carry+=l2->val;\\n                l2=l2->next;\\n            }\\n            curr->next=new ListNode(carry%10);\\n            carry/=10;\\n            curr=curr->next;\\n        }\\n        return l3->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 998481,
                "title": "100-idiomatic-go-solution",
                "content": "https://github.com/unspectd/leetcode-in-go/blob/master/problems/0002-add-two-numbers/add_two_numbers.go\\n```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tdummy, sum := new(ListNode), 0\\n\\tfor cur := dummy; l1 != nil || l2 != nil || sum != 0; cur = cur.Next {\\n\\t\\tif l1 != nil {\\n\\t\\t\\tsum += l1.Val\\n\\t\\t\\tl1 = l1.Next\\n\\t\\t}\\n\\t\\tif l2 != nil {\\n\\t\\t\\tsum += l2.Val\\n\\t\\t\\tl2 = l2.Next\\n\\t\\t}\\n\\t\\tcur.Next = &ListNode{Val: sum % 10}\\n\\t\\tsum /= 10\\n\\t}\\n\\treturn dummy.Next\\n}\\n```\\nTime complexity: O(n)\\nSpace complexity: O(n)\\nwhere n - max(len(l1), len(l2))",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tdummy, sum := new(ListNode), 0\\n\\tfor cur := dummy; l1 != nil || l2 != nil || sum != 0; cur = cur.Next {\\n\\t\\tif l1 != nil {\\n\\t\\t\\tsum += l1.Val\\n\\t\\t\\tl1 = l1.Next\\n\\t\\t}\\n\\t\\tif l2 != nil {\\n\\t\\t\\tsum += l2.Val\\n\\t\\t\\tl2 = l2.Next\\n\\t\\t}\\n\\t\\tcur.Next = &ListNode{Val: sum % 10}\\n\\t\\tsum /= 10\\n\\t}\\n\\treturn dummy.Next\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1791900,
                "title": "c-solution-iterative-fast-simple-intuitive-well-explained",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution\\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\\n    {\\n        ListNode result = new ListNode();\\n        ListNode head = result;\\n        int sum = 0;\\n        while (l1 != null || l2 != null || sum > 0) // to keep running if we hava a value in l1, l2 or carry\\n        {\\n            // two if statments because l1 and l2 can be of different sizes\\n            if (l1 != null)\\n            {\\n                sum += l1.val;\\n                l1 = l1.next;\\n            }\\n            if (l2 != null)\\n            {\\n                sum += l2.val;\\n                l2 = l2.next;\\n            }\\n            result.next=new ListNode(sum % 10); //digit\\n            sum /= 10; //carry\\n            result = result.next;\\n        }\\n        return head.next; //we don\\'t want to return head as it will add a node=0 at the start so -> wrong answer\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "C",
                    "C#",
                    "Iterator"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution\\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\\n    {\\n        ListNode result = new ListNode();\\n        ListNode head = result;\\n        int sum = 0;\\n        while (l1 != null || l2 != null || sum > 0) // to keep running if we hava a value in l1, l2 or carry\\n        {\\n            // two if statments because l1 and l2 can be of different sizes\\n            if (l1 != null)\\n            {\\n                sum += l1.val;\\n                l1 = l1.next;\\n            }\\n            if (l2 != null)\\n            {\\n                sum += l2.val;\\n                l2 = l2.next;\\n            }\\n            result.next=new ListNode(sum % 10); //digit\\n            sum /= 10; //carry\\n            result = result.next;\\n        }\\n        return head.next; //we don\\'t want to return head as it will add a node=0 at the start so -> wrong answer\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1164933,
                "title": "c-faster-simple",
                "content": "***Do upvote the solution if it helped you and to motivate me***  \\uD83D\\uDE0A\\u270C\\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n      ListNode* dummy = new ListNode(0);\\n        ListNode* curr = dummy;\\n        int c = 0;\\n        while(l1 || l2 || c)\\n        {\\n            if(l1 != NULL)\\n            {\\n                c += l1->val;\\n                l1 = l1->next;\\n            }\\n            \\n            if(l2 != NULL)\\n            {\\n                c += l2->val;\\n                l2 = l2->next;\\n            }\\n            \\n            curr->next = new ListNode(c%10);\\n            c /= 10;\\n            curr = curr->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n      ListNode* dummy = new ListNode(0);\\n        ListNode* curr = dummy;\\n        int c = 0;\\n        while(l1 || l2 || c)\\n        {\\n            if(l1 != NULL)\\n            {\\n                c += l1->val;\\n                l1 = l1->next;\\n            }\\n            \\n            if(l2 != NULL)\\n            {\\n                c += l2->val;\\n                l2 = l2->next;\\n            }\\n            \\n            curr->next = new ListNode(c%10);\\n            c /= 10;\\n            curr = curr->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 779172,
                "title": "c-28-ms-solution-89-56-easy-to-understand",
                "content": "***Runtime: 28 ms, faster than 89.56% of C++ online submissions for Add Two Numbers.\\nMemory Usage: 70.2 MB, less than 59.01% of C++ online submissions for Add Two Numbers.***\\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* p1 = l1;\\n        ListNode* p2 = l2;\\n        ListNode* result = new ListNode(-1);\\n        ListNode* dummy = result;\\n        while(p1 || p2 || carry){\\n            if(!p1 && carry == 0){\\n                result->next = p2;\\n                break;\\n            }\\n            if(!p2 && carry == 0){\\n                result->next = p1;\\n                break;\\n            }\\n            int digit1 = p1 ? p1->val : 0;\\n            int digit2 = p2 ? p2->val : 0;\\n            int sum = digit1 + digit2 + carry;\\n            carry = sum / 10;\\n            sum %= 10;\\n            result->next = new ListNode(sum);\\n            if(p1)  p1 = p1->next;\\n            if(p2)  p2 = p2->next;\\n            result = result->next;\\n        }\\n        result = dummy->next;\\n        delete dummy;\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* p1 = l1;\\n        ListNode* p2 = l2;\\n        ListNode* result = new ListNode(-1);\\n        ListNode* dummy = result;\\n        while(p1 || p2 || carry){\\n            if(!p1 && carry == 0){\\n                result->next = p2;\\n                break;\\n            }\\n            if(!p2 && carry == 0){\\n                result->next = p1;\\n                break;\\n            }\\n            int digit1 = p1 ? p1->val : 0;\\n            int digit2 = p2 ? p2->val : 0;\\n            int sum = digit1 + digit2 + carry;\\n            carry = sum / 10;\\n            sum %= 10;\\n            result->next = new ListNode(sum);\\n            if(p1)  p1 = p1->next;\\n            if(p2)  p2 = p2->next;\\n            result = result->next;\\n        }\\n        result = dummy->next;\\n        delete dummy;\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 122357,
                "title": "c-what-does-listnode-int-x-val-x-next-null-mean",
                "content": "Pretty new to C++ and just wanted clarification on what\\n\\n```\\nListNode(int x) : val(x), next(NULL) {}\\n```\\nmeans inside of the `struct ListNode{}`",
                "solutionTags": [],
                "code": "```\\nListNode(int x) : val(x), next(NULL) {}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2920495,
                "title": "python",
                "content": "```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n    \\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1, num2 = \\'\\', \\'\\'\\n        node1, node2 = l1, l2\\n        while node1 is not None:\\n            num1 = str(node1.val) + num1\\n            node1 = node1.next\\n        while node2 is not None:\\n            num2 = str(node2.val) + num2\\n            node2 = node2.next\\n        num1 = int(num1)\\n        num2 = int(num2)\\n        summ = num1 + num2\\n        summ = str(summ)\\n        \\n        digitnodes = list(summ)\\n        \\n        for idx, digit in enumerate(summ):\\n            if idx == 0:\\n                digitnodes[idx] = ListNode(val = digit, next=None)\\n            else: \\n                digitnodes[idx] = ListNode(val = digit, next=digitnodes[idx-1])\\n            \\n        \\n        return(digitnodes[len(digitnodes)-1])  \\n```",
                "solutionTags": [],
                "code": "```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n    \\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1, num2 = \\'\\', \\'\\'\\n        node1, node2 = l1, l2\\n        while node1 is not None:\\n            num1 = str(node1.val) + num1\\n            node1 = node1.next\\n        while node2 is not None:\\n            num2 = str(node2.val) + num2\\n            node2 = node2.next\\n        num1 = int(num1)\\n        num2 = int(num2)\\n        summ = num1 + num2\\n        summ = str(summ)\\n        \\n        digitnodes = list(summ)\\n        \\n        for idx, digit in enumerate(summ):\\n            if idx == 0:\\n                digitnodes[idx] = ListNode(val = digit, next=None)\\n            else: \\n                digitnodes[idx] = ListNode(val = digit, next=digitnodes[idx-1])\\n            \\n        \\n        return(digitnodes[len(digitnodes)-1])  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1349266,
                "title": "java-easy-approach-with-explanation-o-n-100-faster",
                "content": "```\\nclass Solution \\n{\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) \\n    {\\n        ListNode head= new ListNode(-1);//creating a node in order to store the sum of digit in a List format \\n        ListNode temp= head;//we are using temp to add node to the new List \\n        \\n        int carry= 0;//we are storing the carry at every digit pair iteration \\n        \\n        while(l1 != null || l2 != null || carry > 0 )//our loop terminating condtition, all the numbers will be added \\n        {\\n            int sum= 0;//to store the sum at every digit pair iteration \\n            \\n            if(l1 != null)//adding list one node to the local sum\\n            {\\n                sum+= l1.val;//adding to the sum \\n                l1= l1.next;//moving the l1 pointer to the next node\\n            }\\n            \\n            if(l2 != null)\\n            {\\n                sum+= l2.val;//adding to the sum \\n                l2= l2.next;//moving the l2 pointer to the next node\\n            }\\n            sum+= carry;//adding the sum inclusive carry\\n            carry= sum / 10;//extracting the first digit \\n            ListNode node= new ListNode(sum % 10);//extracting the last digit and creating the node \\n            temp.next= node;//linking the node to the list \\n            \\n            temp= temp.next;//moving the temp \\n        }\\n        return head.next;//reaturning the new head of the new list \\n    }\\n}//Please do Upvote, it helps a lot\\n```",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\nclass Solution \\n{\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) \\n    {\\n        ListNode head= new ListNode(-1);//creating a node in order to store the sum of digit in a List format \\n        ListNode temp= head;//we are using temp to add node to the new List \\n        \\n        int carry= 0;//we are storing the carry at every digit pair iteration \\n        \\n        while(l1 != null || l2 != null || carry > 0 )//our loop terminating condtition, all the numbers will be added \\n        {\\n            int sum= 0;//to store the sum at every digit pair iteration \\n            \\n            if(l1 != null)//adding list one node to the local sum\\n            {\\n                sum+= l1.val;//adding to the sum \\n                l1= l1.next;//moving the l1 pointer to the next node\\n            }\\n            \\n            if(l2 != null)\\n            {\\n                sum+= l2.val;//adding to the sum \\n                l2= l2.next;//moving the l2 pointer to the next node\\n            }\\n            sum+= carry;//adding the sum inclusive carry\\n            carry= sum / 10;//extracting the first digit \\n            ListNode node= new ListNode(sum % 10);//extracting the last digit and creating the node \\n            temp.next= node;//linking the node to the list \\n            \\n            temp= temp.next;//moving the temp \\n        }\\n        return head.next;//reaturning the new head of the new list \\n    }\\n}//Please do Upvote, it helps a lot\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3138025,
                "title": "clean-understandable-java-code-2ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(max(m,n)) here m and n are lengths of lists.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n    \\n    ListNode dummy = new ListNode();\\n    ListNode temp = dummy;\\n    int carry=0;\\n    while(l1!=null || l2!=null || carry==1){\\n        int sum=0;\\n        if(l1!=null){\\n            sum+=l1.val;\\n            l1 = l1.next;\\n        }\\n        if(l2!=null){\\n            sum+=l2.val;\\n            l2 = l2.next;\\n        }\\n        sum+=carry;\\n        carry = sum/10;\\n        ListNode node = new ListNode(sum%10);\\n        temp.next = node;\\n        temp = temp.next;\\n    }\\n        return dummy.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n    \\n    ListNode dummy = new ListNode();\\n    ListNode temp = dummy;\\n    int carry=0;\\n    while(l1!=null || l2!=null || carry==1){\\n        int sum=0;\\n        if(l1!=null){\\n            sum+=l1.val;\\n            l1 = l1.next;\\n        }\\n        if(l2!=null){\\n            sum+=l2.val;\\n            l2 = l2.next;\\n        }\\n        sum+=carry;\\n        carry = sum/10;\\n        ListNode node = new ListNode(sum%10);\\n        temp.next = node;\\n        temp = temp.next;\\n    }\\n        return dummy.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1447,
                "title": "easy-solution-in-go",
                "content": "Go is supported now, cheers!\\n\\n    func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n        carry := 0\\n        head := new(ListNode)\\n        cur := head\\n        for l1 != nil || l2 != nil || carry != 0 {\\n            n1, n2 := 0, 0\\n            if l1 != nil {\\n                n1, l1 = l1.Val, l1.Next\\n            }\\n            if l2 != nil {\\n                n2, l2 = l2.Val, l2.Next\\n            }\\n            num := n1 + n2 + carry\\n            carry = num / 10\\n            cur.Next = &ListNode{Val:num%10, Next:nil}\\n            cur = cur.Next\\n        }\\n        return head.Next\\n    }",
                "solutionTags": [],
                "code": "Go is supported now, cheers!\\n\\n    func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n        carry := 0\\n        head := new(ListNode)\\n        cur := head\\n        for l1 != nil || l2 != nil || carry != 0 {\\n            n1, n2 := 0, 0\\n            if l1 != nil {\\n                n1, l1 = l1.Val, l1.Next\\n            }\\n            if l2 != nil {\\n                n2, l2 = l2.Val, l2.Next\\n            }\\n            num := n1 + n2 + carry\\n            carry = num / 10\\n            cur.Next = &ListNode{Val:num%10, Next:nil}\\n            cur = cur.Next\\n        }\\n        return head.Next\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1498,
                "title": "c-concise-solution",
                "content": "        \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode *dummy = new ListNode(0), *cur;\\n        cur = dummy;\\n        while (l1 || l2 || carry) {\\n            if (l1) {\\n                carry += l1->val;\\n                l1 = l1->next;\\n            }\\n            if (l2) {\\n                carry += l2->val;\\n                l2 = l2->next;\\n            }\\n            cur->next = new ListNode(carry%10);\\n            cur = cur->next;\\n            carry /= 10;\\n        }\\n        return dummy->next;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "        \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode *dummy = new ListNode(0), *cur;\\n        cur = dummy;\\n        while (l1 || l2 || carry) {\\n            if (l1) {\\n                carry += l1->val;\\n                l1 = l1->next;\\n            }\\n            if (l2) {\\n                carry += l2->val;\\n                l2 = l2->next;\\n            }\\n            cur->next = new ListNode(carry%10);\\n            cur = cur->next;\\n            carry /= 10;\\n        }\\n        return dummy->next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3491621,
                "title": "2ms-beats-99-easy-to-understand-java-solution-beginner-friendly",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n     int c=0;\\n    ListNode head=new ListNode(0);\\n    ListNode l3=head,p1=l1,p2=l2;\\n    while(p1!=null||p2!=null){\\n        if(p1!=null){\\n         c+=p1.val;\\n         p1=p1.next;\\n        }\\n        if(p2!=null){\\n            c+=p2.val;\\n            p2=p2.next;\\n        }\\n        l3.next=new ListNode(c%10);\\n        l3=l3.next;\\n        c/=10; \\n    }\\n    if(c==1){\\n        l3.next=new ListNode(1);\\n    \\n    }\\n    return head.next;\\n    }\\n}\\n```\\nUpvotes are encouraging",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n     int c=0;\\n    ListNode head=new ListNode(0);\\n    ListNode l3=head,p1=l1,p2=l2;\\n    while(p1!=null||p2!=null){\\n        if(p1!=null){\\n         c+=p1.val;\\n         p1=p1.next;\\n        }\\n        if(p2!=null){\\n            c+=p2.val;\\n            p2=p2.next;\\n        }\\n        l3.next=new ListNode(c%10);\\n        l3=l3.next;\\n        c/=10; \\n    }\\n    if(c==1){\\n        l3.next=new ListNode(1);\\n    \\n    }\\n    return head.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 486839,
                "title": "python-simple-solution-8-liner",
                "content": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        sumval = 0\\n        root = curr = ListNode(0)\\n        while l1 or l2 or sumval:\\n            if l1: sumval += l1.val; l1 = l1.next\\n            if l2: sumval += l2.val; l2 = l2.next\\n            curr.next = curr = ListNode(sumval % 10)\\n            sumval //= 10\\n        return root.next\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        sumval = 0\\n        root = curr = ListNode(0)\\n        while l1 or l2 or sumval:\\n            if l1: sumval += l1.val; l1 = l1.next\\n            if l2: sumval += l2.val; l2 = l2.next\\n            curr.next = curr = ListNode(sumval % 10)\\n            sumval //= 10\\n        return root.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3417320,
                "title": "c-java-python-javascript-easy-linked-list",
                "content": "# Intuition:\\nThe problem asks to add two numbers represented by linked lists, where each node represents a digit in the number. The solution involves traversing both the linked lists, adding the corresponding digits along with the carry (if any), and creating a new node in the result linked list for each sum digit.\\n\\n# Approach:\\n\\n1. Initialize three pointers, ptr1, ptr2, and head, to the head of l1, l2, and l1, respectively. We\\'ll return head->next at the end.\\n2. Initialize sum and carry variables to 0.\\n3. Initialize num1 and num2 to 0.\\n4. Traverse both linked lists simultaneously until at least one of them is not empty.\\n5. If ptr1 is not null, set num1 to ptr1\\'s value and move ptr1 to the next node.\\n6. If ptr2 is not null, set num2 to ptr2\\'s value and move ptr2 to the next node.\\n7. Calculate sum = num1 + num2 + carry.\\n8. Update carry as carry = sum / 10.\\n9. Update sum as sum = sum % 10.\\n10. Create a new node n with the sum as its value.\\n11. Append n to the end of l1.\\n12. Move l1 to the next node.\\n13. Set num1, num2, and sum to 0.\\n14. If there is a carry at the end of the loop, create a new node n with carry as its value and append it to the end of l1.\\n15. Return head->next.\\n# Complexity:\\n- Time Complexity: O(max(m, n)), where m and n are the lengths of the input linked lists. This is because we traverse both the linked lists exactly once.\\n- Space Complexity: O(max(m, n)), where m and n are the lengths of the input linked lists. This is because we create a new node for each digit in the result linked list, which can be at most max(m, n)+1.\\n\\n# C++\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ptr1 = l1; // pointer to traverse l1\\n        ListNode* ptr2 = l2; // pointer to traverse l2\\n        ListNode* head = l1; // pointer to the head of the result linked list, initially set to the head of l1\\n        int sum = 0, carry = 0; // initialize sum and carry to 0\\n        int num1 = 0, num2 = 0; // initialize num1 and num2 to 0\\n        \\n        // traverse both linked lists simultaneously until at least one of them is not empty\\n        while (ptr1 || ptr2) {\\n            if (ptr1) { // if ptr1 is not null, set num1 to its value and move ptr1 to the next node\\n                num1 = ptr1->val;\\n                ptr1 = ptr1->next;\\n            }\\n            if (ptr2) { // if ptr2 is not null, set num2 to its value and move ptr2 to the next node\\n                num2 = ptr2->val;\\n                ptr2 = ptr2->next;\\n            }\\n            sum = num1 + num2 + carry; // calculate sum\\n            carry = sum / 10; // calculate carry\\n            sum = sum % 10; // calculate sum\\n            \\n            ListNode* n = new ListNode(sum); // create a new node with sum as its\\n            l1->next=n;\\n            l1=l1->next;\\n            num1=0,num2=0,sum=0;\\n        }\\n        if(carry){\\n            ListNode* n = new ListNode(carry);\\n            l1->next=n;\\n            l1=l1->next;\\n        }\\n        return head->next;\\n    }\\n};\\n\\n```\\n# Java\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode ptr1 = l1; // pointer to traverse l1\\n        ListNode ptr2 = l2; // pointer to traverse l2\\n        ListNode head = l1; // pointer to the head of the result linked list, initially set to the head of l1\\n        int sum = 0, carry = 0; // initialize sum and carry to 0\\n        int num1 = 0, num2 = 0; // initialize num1 and num2 to 0\\n        \\n        // traverse both linked lists simultaneously until at least one of them is not empty\\n        while (ptr1 != null || ptr2 != null) {\\n            if (ptr1 != null) { // if ptr1 is not null, set num1 to its value and move ptr1 to the next node\\n                num1 = ptr1.val;\\n                ptr1 = ptr1.next;\\n            }\\n            if (ptr2 != null) { // if ptr2 is not null, set num2 to its value and move ptr2 to the next node\\n                num2 = ptr2.val;\\n                ptr2 = ptr2.next;\\n            }\\n            sum = num1 + num2 + carry; // calculate sum\\n            carry = sum / 10; // calculate carry\\n            sum = sum % 10; // calculate sum\\n            \\n            ListNode n = new ListNode(sum); // create a new node with sum as its value\\n            l1.next = n; // add the new node to the result linked list\\n            l1 = l1.next; // move l1 to the next node in the result linked list\\n            num1 = 0;\\n            num2 = 0;\\n            sum = 0;\\n        }\\n        if (carry != 0) { // if there is a remaining carry, add a new node to the result linked list with the carry as its value\\n            ListNode n = new ListNode(carry);\\n            l1.next = n;\\n            l1 = l1.next;\\n        }\\n        return head.next; // return the head of the result linked list (excluding the dummy node)\\n    }\\n}\\n\\n```\\n# Python\\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\n\\nclass Solution(object):\\n    def addTwoNumbers(self, l1, l2):\\n        \"\"\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        ptr1 = l1 # pointer to traverse l1\\n        ptr2 = l2 # pointer to traverse l2\\n        head = l1 # pointer to the head of the result linked list, initially set to the head of l1\\n        sum = 0\\n        carry = 0\\n        \\n        # traverse both linked lists simultaneously until at least one of them is not empty\\n        while ptr1 or ptr2:\\n            num1 = ptr1.val if ptr1 else 0 # if ptr1 is not null, set num1 to its value, else set it to 0\\n            num2 = ptr2.val if ptr2 else 0 # if ptr2 is not null, set num2 to its value, else set it to 0\\n            ptr1 = ptr1.next if ptr1 else None # if ptr1 is not null, move ptr1 to the next node\\n            ptr2 = ptr2.next if ptr2 else None # if ptr2 is not null, move ptr2 to the next node\\n            \\n            sum = num1 + num2 + carry # calculate sum\\n            carry = sum / 10 # calculate carry\\n            sum = sum % 10 # calculate sum\\n            \\n            n = ListNode(sum) # create a new node with sum as its value\\n            l1.next = n\\n            l1 = l1.next\\n            num1 = num2 = sum = 0\\n        \\n        if carry:\\n            n = ListNode(carry)\\n            l1.next = n\\n            l1 = l1.next\\n        \\n        return head.next\\n\\n```\\n# JavaScript\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let ptr1 = l1; // pointer to traverse l1\\n    let ptr2 = l2; // pointer to traverse l2\\n    let head = l1; // pointer to the head of the result linked list, initially set to the head of l1\\n    let sum = 0, carry = 0; // initialize sum and carry to 0\\n    let num1 = 0, num2 = 0; // initialize num1 and num2 to 0\\n    \\n    // traverse both linked lists simultaneously until at least one of them is not empty\\n    while (ptr1 || ptr2) {\\n        if (ptr1) { // if ptr1 is not null, set num1 to its value and move ptr1 to the next node\\n            num1 = ptr1.val;\\n            ptr1 = ptr1.next;\\n        }\\n        if (ptr2) { // if ptr2 is not null, set num2 to its value and move ptr2 to the next node\\n            num2 = ptr2.val;\\n            ptr2 = ptr2.next;\\n        }\\n        sum = num1 + num2 + carry; // calculate sum\\n        carry = Math.floor(sum / 10); // calculate carry\\n        sum = sum % 10; // calculate sum\\n        \\n        let n = new ListNode(sum); // create a new node with sum as its value\\n        l1.next = n;\\n        l1 = l1.next;\\n        num1 = 0, num2 = 0, sum = 0;\\n    }\\n    if (carry) {\\n        let n = new ListNode(carry);\\n        l1.next = n;\\n        l1 = l1.next;\\n    }\\n    return head.next;\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ptr1 = l1; // pointer to traverse l1\\n        ListNode* ptr2 = l2; // pointer to traverse l2\\n        ListNode* head = l1; // pointer to the head of the result linked list, initially set to the head of l1\\n        int sum = 0, carry = 0; // initialize sum and carry to 0\\n        int num1 = 0, num2 = 0; // initialize num1 and num2 to 0\\n        \\n        // traverse both linked lists simultaneously until at least one of them is not empty\\n        while (ptr1 || ptr2) {\\n            if (ptr1) { // if ptr1 is not null, set num1 to its value and move ptr1 to the next node\\n                num1 = ptr1->val;\\n                ptr1 = ptr1->next;\\n            }\\n            if (ptr2) { // if ptr2 is not null, set num2 to its value and move ptr2 to the next node\\n                num2 = ptr2->val;\\n                ptr2 = ptr2->next;\\n            }\\n            sum = num1 + num2 + carry; // calculate sum\\n            carry = sum / 10; // calculate carry\\n            sum = sum % 10; // calculate sum\\n            \\n            ListNode* n = new ListNode(sum); // create a new node with sum as its\\n            l1->next=n;\\n            l1=l1->next;\\n            num1=0,num2=0,sum=0;\\n        }\\n        if(carry){\\n            ListNode* n = new ListNode(carry);\\n            l1->next=n;\\n            l1=l1->next;\\n        }\\n        return head->next;\\n    }\\n};\\n\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode ptr1 = l1; // pointer to traverse l1\\n        ListNode ptr2 = l2; // pointer to traverse l2\\n        ListNode head = l1; // pointer to the head of the result linked list, initially set to the head of l1\\n        int sum = 0, carry = 0; // initialize sum and carry to 0\\n        int num1 = 0, num2 = 0; // initialize num1 and num2 to 0\\n        \\n        // traverse both linked lists simultaneously until at least one of them is not empty\\n        while (ptr1 != null || ptr2 != null) {\\n            if (ptr1 != null) { // if ptr1 is not null, set num1 to its value and move ptr1 to the next node\\n                num1 = ptr1.val;\\n                ptr1 = ptr1.next;\\n            }\\n            if (ptr2 != null) { // if ptr2 is not null, set num2 to its value and move ptr2 to the next node\\n                num2 = ptr2.val;\\n                ptr2 = ptr2.next;\\n            }\\n            sum = num1 + num2 + carry; // calculate sum\\n            carry = sum / 10; // calculate carry\\n            sum = sum % 10; // calculate sum\\n            \\n            ListNode n = new ListNode(sum); // create a new node with sum as its value\\n            l1.next = n; // add the new node to the result linked list\\n            l1 = l1.next; // move l1 to the next node in the result linked list\\n            num1 = 0;\\n            num2 = 0;\\n            sum = 0;\\n        }\\n        if (carry != 0) { // if there is a remaining carry, add a new node to the result linked list with the carry as its value\\n            ListNode n = new ListNode(carry);\\n            l1.next = n;\\n            l1 = l1.next;\\n        }\\n        return head.next; // return the head of the result linked list (excluding the dummy node)\\n    }\\n}\\n\\n```\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\n\\nclass Solution(object):\\n    def addTwoNumbers(self, l1, l2):\\n        \"\"\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        ptr1 = l1 # pointer to traverse l1\\n        ptr2 = l2 # pointer to traverse l2\\n        head = l1 # pointer to the head of the result linked list, initially set to the head of l1\\n        sum = 0\\n        carry = 0\\n        \\n        # traverse both linked lists simultaneously until at least one of them is not empty\\n        while ptr1 or ptr2:\\n            num1 = ptr1.val if ptr1 else 0 # if ptr1 is not null, set num1 to its value, else set it to 0\\n            num2 = ptr2.val if ptr2 else 0 # if ptr2 is not null, set num2 to its value, else set it to 0\\n            ptr1 = ptr1.next if ptr1 else None # if ptr1 is not null, move ptr1 to the next node\\n            ptr2 = ptr2.next if ptr2 else None # if ptr2 is not null, move ptr2 to the next node\\n            \\n            sum = num1 + num2 + carry # calculate sum\\n            carry = sum / 10 # calculate carry\\n            sum = sum % 10 # calculate sum\\n            \\n            n = ListNode(sum) # create a new node with sum as its value\\n            l1.next = n\\n            l1 = l1.next\\n            num1 = num2 = sum = 0\\n        \\n        if carry:\\n            n = ListNode(carry)\\n            l1.next = n\\n            l1 = l1.next\\n        \\n        return head.next\\n\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let ptr1 = l1; // pointer to traverse l1\\n    let ptr2 = l2; // pointer to traverse l2\\n    let head = l1; // pointer to the head of the result linked list, initially set to the head of l1\\n    let sum = 0, carry = 0; // initialize sum and carry to 0\\n    let num1 = 0, num2 = 0; // initialize num1 and num2 to 0\\n    \\n    // traverse both linked lists simultaneously until at least one of them is not empty\\n    while (ptr1 || ptr2) {\\n        if (ptr1) { // if ptr1 is not null, set num1 to its value and move ptr1 to the next node\\n            num1 = ptr1.val;\\n            ptr1 = ptr1.next;\\n        }\\n        if (ptr2) { // if ptr2 is not null, set num2 to its value and move ptr2 to the next node\\n            num2 = ptr2.val;\\n            ptr2 = ptr2.next;\\n        }\\n        sum = num1 + num2 + carry; // calculate sum\\n        carry = Math.floor(sum / 10); // calculate carry\\n        sum = sum % 10; // calculate sum\\n        \\n        let n = new ListNode(sum); // create a new node with sum as its value\\n        l1.next = n;\\n        l1 = l1.next;\\n        num1 = 0, num2 = 0, sum = 0;\\n    }\\n    if (carry) {\\n        let n = new ListNode(carry);\\n        l1.next = n;\\n        l1 = l1.next;\\n    }\\n    return head.next;\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 922317,
                "title": "python-solution",
                "content": "Here is the python code with comments easy to understand\\n\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        resultlist = curr = ListNode(0) #we need two varibles because if only one variable is used we might lose reference to the head\\n        carry = 0\\n        while l1 or l2 or carry: # not none\\n            if l1  is not None:\\n                carry += l1.val\\n                l1 = l1.next #increase value of l1\\n            if l2 is not None:\\n                carry+= l2.val\\n                l2 = l2.next\\n            curr.next = ListNode(carry%10)  #retur remainder of division\\n            curr = curr.next\\n            carry = carry//10  #returns floor value of division\\n            \\n        return resultlist.next\\n\\n```",
                "solutionTags": [],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        resultlist = curr = ListNode(0) #we need two varibles because if only one variable is used we might lose reference to the head\\n        carry = 0\\n        while l1 or l2 or carry: # not none\\n            if l1  is not None:\\n                carry += l1.val\\n                l1 = l1.next #increase value of l1\\n            if l2 is not None:\\n                carry+= l2.val\\n                l2 = l2.next\\n            curr.next = ListNode(carry%10)  #retur remainder of division\\n            curr = curr.next\\n            carry = carry//10  #returns floor value of division\\n            \\n        return resultlist.next\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 313533,
                "title": "clean-javascript-solution-beats-82",
                "content": "```js\\nvar addTwoNumbers = function(l1, l2) {\\n  const head = new ListNode();\\n  let cursor = head;\\n  let carry = 0;\\n  while (l1 || l2 || carry) {\\n    cursor.next = new ListNode();\\n    cursor = cursor.next;\\n    let val = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + carry;\\n    carry = val >= 10 ? 1 : 0;\\n    cursor.val = val % 10;\\n    l1 = l1 ? l1.next : null;\\n    l2 = l2 ? l2.next : null;\\n  }\\n  return head.next;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nvar addTwoNumbers = function(l1, l2) {\\n  const head = new ListNode();\\n  let cursor = head;\\n  let carry = 0;\\n  while (l1 || l2 || carry) {\\n    cursor.next = new ListNode();\\n    cursor = cursor.next;\\n    let val = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + carry;\\n    carry = val >= 10 ? 1 : 0;\\n    cursor.val = val % 10;\\n    l1 = l1 ? l1.next : null;\\n    l2 = l2 ? l2.next : null;\\n  }\\n  return head.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4032396,
                "title": "video-step-by-step-visualization-and-explanation",
                "content": "https://www.youtube.com/watch?v=Fs5xgNNoP5c\\n\\nFirst we create a new ListNode, `head`, which will hold our answer.  We then traverse the two lists, and at every node, we add the values together, create a new node with the sum, and link it to `head`.  However, the problem is complicated by the need to keep track of <i>carries</i>.  Here\\'s how we deal with it.  After adding two digits together:\\n\\n- The <i>non-carry</i> part is obtained by doing `total % 10`.  By taking the remainder of a number after dividing by 10, we only get what\\'s left in the ones place.  For example, if the total is 15, then 15 % 10 = 5, so we create a new ListNode with value 5 and link it to `head`\\n- The <i>carry</i> is obtained by doing `total // 10` (floor division by 10).  By dividing by 10 and rounding down, we get the carry value.  So 15 // 10 = 1 (1.5 rounded down is 1) so that corresponds to a carry of 1.\\n\\nWe then keep repeating this until all lists have reached the end AND there are no more carry values.  At the end, `head.next`holds the very first node of our answer, so we return `head.next`.\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def addTwoNumbers(self, l1, l2):\\n        head = ListNode()\\n        current = head\\n        carry = 0\\n        while (l1 != None or l2 != None or carry != 0):\\n            l1_value = l1.val if l1 else 0\\n            l2_value = l2.val if l2 else 0\\n            total = l1_value + l2_value + carry\\n            current.next = ListNode(total % 10)\\n            carry = total // 10\\n            # Move list pointers forward\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n            current = current.next\\n        return head.next\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List",
                    "Math"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def addTwoNumbers(self, l1, l2):\\n        head = ListNode()\\n        current = head\\n        carry = 0\\n        while (l1 != None or l2 != None or carry != 0):\\n            l1_value = l1.val if l1 else 0\\n            l2_value = l2.val if l2 else 0\\n            total = l1_value + l2_value + carry\\n            current.next = ListNode(total % 10)\\n            carry = total // 10\\n            # Move list pointers forward\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n            current = current.next\\n        return head.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3244837,
                "title": "simple-approach-using-recursion-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe know that two numbers can be added by breaking apart the number into its digits. \\nEx: 464+567 = 4+7 + 60 + 60 + 400 + 500\\n\\nWe also know that two numbers can also be added by adding the first digits and then adding the remaining digits. \\nEx: 464+567 = 4+7 + (460+560)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can use this knowledge to write a recursive algorithm that adds the first digits of each number then plugging the remaining digits into the algorithm.\\nEx: 464 + 567 = add(4,7) + add(460,560)\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if (!l1)\\n        {\\n            if (l2) return l2; // Return the remaining digits\\n            return NULL;\\n        }\\n\\n        if (l2) l1->val+= l2->val; // Add the two digits\\n\\n        if (l1->val>=10) // Carry the one to the next digit\\n        {\\n            if (l1->next) l1->next->val++; \\n            else{\\n                l1->next=new ListNode(1); \\n            }\\n            l1->val-=10;\\n        }\\n        if (l2) // Repeat the process for the remaining digits\\n        l1->next = addTwoNumbers(l1->next,l2->next); \\n        else\\n        l1->next = addTwoNumbers(l1->next,NULL);\\n\\n        return l1;\\n    }\\n};\\n```\\n\\nUpvote if this helps please \\uD83D\\uDE42",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if (!l1)\\n        {\\n            if (l2) return l2; // Return the remaining digits\\n            return NULL;\\n        }\\n\\n        if (l2) l1->val+= l2->val; // Add the two digits\\n\\n        if (l1->val>=10) // Carry the one to the next digit\\n        {\\n            if (l1->next) l1->next->val++; \\n            else{\\n                l1->next=new ListNode(1); \\n            }\\n            l1->val-=10;\\n        }\\n        if (l2) // Repeat the process for the remaining digits\\n        l1->next = addTwoNumbers(l1->next,l2->next); \\n        else\\n        l1->next = addTwoNumbers(l1->next,NULL);\\n\\n        return l1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2075929,
                "title": "c-easy-solution-beats-91-08",
                "content": "```\\n                            Please Upvote If It Helps\\n```\\n\\n\\n```\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = new ListNode();\\n        ListNode* temp = head;\\n        int sm=0, carry=0;\\n        \\n        while(l1 || l2 || carry){\\n            sm = 0;\\n            if(l1){\\n                sm += l1->val;\\n                l1 = l1->next;\\n            }\\n            if(l2){\\n                sm += l2->val;\\n                l2 = l2->next;\\n            }\\n            temp->next = new ListNode((sm+carry)%10);\\n            temp = temp->next;\\n            carry = (sm+carry)/10;\\n        }\\n        return head->next;\\n    }\\n```\\n```\\n                        Please Upvote If It Helps\\n```\\nLet\\'s connect on [Linkedin](https://www.linkedin.com/in/naman-agarwal-0551aa1aa/)\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List",
                    "Math",
                    "Recursion"
                ],
                "code": "```\\n                            Please Upvote If It Helps\\n```\n```\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = new ListNode();\\n        ListNode* temp = head;\\n        int sm=0, carry=0;\\n        \\n        while(l1 || l2 || carry){\\n            sm = 0;\\n            if(l1){\\n                sm += l1->val;\\n                l1 = l1->next;\\n            }\\n            if(l2){\\n                sm += l2->val;\\n                l2 = l2->next;\\n            }\\n            temp->next = new ListNode((sm+carry)%10);\\n            temp = temp->next;\\n            carry = (sm+carry)/10;\\n        }\\n        return head->next;\\n    }\\n```\n```\\n                        Please Upvote If It Helps\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1012877,
                "title": "python-schoolbook-addition-explained",
                "content": "What we need to do in this problem is to perform usual schoolbook addition. Our linked lists already given in reverse order, and as in usual addition we need to start from the end. We continue to add until we still have digits to traverse. Imagine, that we need to add two numbers `986` and `47`.\\n\\n1. add `6` and `7`, so we have digit `3` and carry equal to `1`.\\n2. add `8` and `4` and `1`, so we have `3` and carry equal to `1`.\\n3. add `9` from first number, and we do not have anything from second, so we choose `0` from second. Also we have curry equal to `1`, finally we have digit `0` and carry equal to `1`.\\n4. We still have carry, but no digits left, so we evaluate `0 + 0 + 1 = 1`. And now we can stop, we do not have digits and we do not have carry.\\n5. Final number we constructed is `1033`.\\n\\n**Complexity**: time complexity is `O(m + n)`, where `m` and `n` are lengths of our linked lists, space complexity is `O(max(m, n))` if we count answer as memory or `O(1)` if we do not.\\n\\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1, l2):\\n        carry = 0\\n        head = curr = ListNode(0)\\n\\n        while l1 or l2 or carry:\\n            d1, d2 = 0, 0\\n            if l1: \\n                d1 = l1.val\\n                l1 = l1.next\\n            if l2: \\n                d2 = l2.val\\n                l2 = l2.next\\n            carry, digit = divmod(d1 + d2 + carry, 10)\\n            curr.next = ListNode(digit)\\n            curr = curr.next\\n              \\n        return head.next\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1, l2):\\n        carry = 0\\n        head = curr = ListNode(0)\\n\\n        while l1 or l2 or carry:\\n            d1, d2 = 0, 0\\n            if l1: \\n                d1 = l1.val\\n                l1 = l1.next\\n            if l2: \\n                d2 = l2.val\\n                l2 = l2.next\\n            carry, digit = divmod(d1 + d2 + carry, 10)\\n            curr.next = ListNode(digit)\\n            curr = curr.next\\n              \\n        return head.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1180,
                "title": "my-solution-in-c",
                "content": "    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\\n        struct ListNode* res, *L1=l1, *L2=l2, *temp;\\n        while (L1&&L2) {\\n            L1->val=L2->val=L1->val+L2->val;\\n            L1 = L1->next;\\n            L2 = L2->next;\\n        }\\n        res = (L1) ? l1 : l2;\\n        temp=res;\\n        while (temp) {\\n            if (temp->val>=10) {\\n                if (!temp->next) temp->next = (struct ListNode*)calloc(1,sizeof(struct ListNode));\\n                temp->val-=10;\\n                temp->next->val+=1;\\n            } \\n            temp = temp->next;\\n        }\\n        return res;\\n}",
                "solutionTags": [],
                "code": "    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\\n        struct ListNode* res, *L1=l1, *L2=l2, *temp;\\n        while (L1&&L2) {\\n            L1->val=L2->val=L1->val+L2->val;\\n            L1 = L1->next;\\n            L2 = L2->next;\\n        }\\n        res = (L1) ? l1 : l2;\\n        temp=res;\\n        while (temp) {\\n            if (temp->val>=10) {\\n                if (!temp->next) temp->next = (struct ListNode*)calloc(1,sizeof(struct ListNode));\\n                temp->val-=10;\\n                temp->next->val+=1;\\n            } \\n            temp = temp->next;\\n        }\\n        return res;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 3949219,
                "title": "java-runtime-1-ms-beats-100",
                "content": "# Intuition\\nMy initial approach to solving this problem involves simulating the process of adding two numbers represented as linked lists. I\\'ll iterate through both linked lists simultaneously, adding corresponding digits along with any carry from the previous sum.\\n\\n# Approach\\nI will use a dummy node to keep track of the resulting linked list. I\\'ll initialize a carry variable to store any carry from the previous sum. I\\'ll iterate through both linked lists while there are still digits left to process or a carry exists. For each step, I\\'ll calculate the sum of the corresponding digits from both linked lists along with the carry. I\\'ll update the carry for the next step and add the current digit to the result linked list. Finally, I\\'ll move the pointers to the next nodes in both linked lists.\\n\\n# Complexity\\n- Time complexity: O(max(N, M))\\n  Here, \\'N\\' is the length of the first linked list and \\'M\\' is the length of the second linked list. The algorithm iterates through both linked lists simultaneously, performing constant-time operations for each step.\\n- Space complexity: O(max(N, M))\\n  The algorithm uses extra space for the result linked list, which can have a length of at most max(N, M) + 1.\\n\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n       ListNode temp = new ListNode(0);\\n        ListNode head = temp;\\n        int carry = 0;\\n        while (l1 != null || l2 != null || carry>0 ) {\\n            int sum = carry;\\n            if (l1 != null) {\\n                sum += l1.val;\\n                l1 = l1.next;\\n            }\\n\\n            if (l2 != null) {\\n                sum += l2.val;\\n                l2 = l2.next;\\n            }\\n\\n            carry=sum/10;\\n\\n            sum %=10;\\n\\n            head.next = new ListNode(sum);\\n\\n            head = head.next;\\n\\n        }\\n\\n    return temp.next;\\n\\n\\n\\n        \\n    }\\n}\\n```\\n![c0504eaf-5fb8-4a1d-a769-833262d1b86e_1674433591.3836212.webp](https://assets.leetcode.com/users/images/8a3b41d1-f0ca-472f-a9f7-8346b34a824e_1693297402.2918687.webp)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n       ListNode temp = new ListNode(0);\\n        ListNode head = temp;\\n        int carry = 0;\\n        while (l1 != null || l2 != null || carry>0 ) {\\n            int sum = carry;\\n            if (l1 != null) {\\n                sum += l1.val;\\n                l1 = l1.next;\\n            }\\n\\n            if (l2 != null) {\\n                sum += l2.val;\\n                l2 = l2.next;\\n            }\\n\\n            carry=sum/10;\\n\\n            sum %=10;\\n\\n            head.next = new ListNode(sum);\\n\\n            head = head.next;\\n\\n        }\\n\\n    return temp.next;\\n\\n\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3183551,
                "title": "c-easiest-beginner-friendly-sol-o-max-n1-n2-time-and-o-max-n1-n2-space",
                "content": "# Intuition of this Problem:\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**NOTE - PLEASE READ APPROACH FIRST THEN SEE THE CODE. YOU WILL DEFINITELY UNDERSTAND THE CODE LINE BY LINE AFTER SEEING THE APPROACH.**\\n\\n# Approach for this Problem:\\n1. Create a new linked list called `dummyHead` and initialize a pointer `curr` to it.\\n2. Initialize an integer `carry` to 0.\\n3. Traverse both input linked lists until both of them are exhausted and the `carry` value is 0:\\n   1. Calculate the sum of the current digits by adding the corresponding digits of both linked lists and the `carry` value.\\n   2. Update the `carry` value to be the integer quotient of the sum and 10.\\n   3. Create a new node with the value equal to the integer remainder of the sum divided by 10 and set the `next` pointer of `curr` to the new node.\\n   4. Update the `curr` pointer to the newly added node.\\n   5. Update both input linked list pointers to their next nodes if they are not already `nullptr`.\\n4. Return the `next` pointer of `dummyHead`.\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Humble Request:\\n- If my solution is helpful to you then please **UPVOTE** my solution, your **UPVOTE** motivates me to post such kind of solution.\\n- Please let me know in comments if there is need to do any improvement in my approach, code....anything.\\n- **Let\\'s connect on** https://www.linkedin.com/in/abhinash-singh-1b851b188\\n\\n![57jfh9.jpg](https://assets.leetcode.com/users/images/c2826b72-fb1c-464c-9f95-d9e578abcaf3_1674104075.4732099.jpeg)\\n\\n# Code:\\n```C++ []\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* dummyHead = new ListNode(0);\\n        ListNode* curr = dummyHead;\\n        int carry = 0;\\n        while (l1 != nullptr || l2 != nullptr || carry > 0) {\\n            int sum = carry;\\n            if (l1 != nullptr) {\\n                sum += l1 -> val;\\n                l1 = l1 -> next;\\n            }\\n            if (l2 != nullptr) {\\n                sum += l2 -> val;\\n                l2 = l2 -> next;\\n            }\\n            carry = sum / 10;  \\n            int currDigit = sum % 10;\\n            curr -> next = new ListNode(currDigit);\\n            curr = curr -> next;\\n        }\\n        return dummyHead -> next;\\n    }\\n};\\n```\\n```Java []\\n\\n```\\n```Python []\\n\\n```\\n\\n# Time Complexity and Space Complexity:\\n- Time complexity: **O(max(N1, N2))**, where N1 and N2 are the lengths of the input linked lists l1 and l2, respectively\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(max(N1, N2))**, as the additional space required is proportional to the length of the longer input linked list.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->",
                "solutionTags": [
                    "C++",
                    "Linked List",
                    "Math"
                ],
                "code": "```C++ []\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* dummyHead = new ListNode(0);\\n        ListNode* curr = dummyHead;\\n        int carry = 0;\\n        while (l1 != nullptr || l2 != nullptr || carry > 0) {\\n            int sum = carry;\\n            if (l1 != nullptr) {\\n                sum += l1 -> val;\\n                l1 = l1 -> next;\\n            }\\n            if (l2 != nullptr) {\\n                sum += l2 -> val;\\n                l2 = l2 -> next;\\n            }\\n            carry = sum / 10;  \\n            int currDigit = sum % 10;\\n            curr -> next = new ListNode(currDigit);\\n            curr = curr -> next;\\n        }\\n        return dummyHead -> next;\\n    }\\n};\\n```\n```Java []\\n\\n```\n```Python []\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 126659,
                "title": "my-java-solution",
                "content": "```\\nclass Solution {\\n    /**\\n     * This list node uses for optimize memory usage\\n     */\\n    private static final ListNode ZERO_NODE = new ListNode(0);\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        return recursiveSum(l1, l2, 0);\\n    }\\n\\n    /**\\n     * Calculate sum of node values recursively\\n     *\\n     * @param a     first node\\n     * @param b     second node\\n     * @param carry the number from the last addition\\n     * @return calculated list node\\n     */\\n    private ListNode recursiveSum(ListNode a, ListNode b, int carry) {\\n        int sum = (a.val + b.val) + carry;\\n        int newCarry = sum / 10;\\n\\n        ListNode r = new ListNode(sum % 10);\\n        if (a.next == null && b.next == null) {\\n            if (newCarry > 0) {\\n                r.next = new ListNode(newCarry);\\n            }\\n        } else {\\n            r.next = recursiveSum(\\n                    (a.next == null) ? ZERO_NODE : a.next,\\n                    (b.next == null) ? ZERO_NODE : b.next, newCarry);\\n        }\\n\\n        return r;\\n    }    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    /**\\n     * This list node uses for optimize memory usage\\n     */\\n    private static final ListNode ZERO_NODE = new ListNode(0);\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        return recursiveSum(l1, l2, 0);\\n    }\\n\\n    /**\\n     * Calculate sum of node values recursively\\n     *\\n     * @param a     first node\\n     * @param b     second node\\n     * @param carry the number from the last addition\\n     * @return calculated list node\\n     */\\n    private ListNode recursiveSum(ListNode a, ListNode b, int carry) {\\n        int sum = (a.val + b.val) + carry;\\n        int newCarry = sum / 10;\\n\\n        ListNode r = new ListNode(sum % 10);\\n        if (a.next == null && b.next == null) {\\n            if (newCarry > 0) {\\n                r.next = new ListNode(newCarry);\\n            }\\n        } else {\\n            r.next = recursiveSum(\\n                    (a.next == null) ? ZERO_NODE : a.next,\\n                    (b.next == null) ? ZERO_NODE : b.next, newCarry);\\n        }\\n\\n        return r;\\n    }    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1338,
                "title": "c-implementation",
                "content": "C# implementation\\n```\\n        public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\\n        {\\n            int carry = 0;\\n            ListNode dummy = new ListNode(0);\\n            ListNode pre = dummy;\\n\\n            while (l1 != null || l2 != null || carry == 1)\\n            {\\n                int sum = (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val) + carry;\\n                carry = sum < 10 ? 0 : 1;\\n                pre.next = new ListNode(sum % 10);\\n                pre = pre.next;\\n\\n                if (l1 != null)\\n                {\\n                    l1 = l1.next;\\n                }\\n\\n                if (l2 != null)\\n                {\\n                    l2 = l2.next;\\n                }\\n            }\\n\\n            return dummy.next;\\n        }\\n```",
                "solutionTags": [],
                "code": "```\\n        public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\\n        {\\n            int carry = 0;\\n            ListNode dummy = new ListNode(0);\\n            ListNode pre = dummy;\\n\\n            while (l1 != null || l2 != null || carry == 1)\\n            {\\n                int sum = (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val) + carry;\\n                carry = sum < 10 ? 0 : 1;\\n                pre.next = new ListNode(sum % 10);\\n                pre = pre.next;\\n\\n                if (l1 != null)\\n                {\\n                    l1 = l1.next;\\n                }\\n\\n                if (l2 != null)\\n                {\\n                    l2 = l2.next;\\n                }\\n            }\\n\\n            return dummy.next;\\n        }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1626,
                "title": "12ms-c-solution",
                "content": "    /**\\n     * Definition for singly-linked list.\\n     * struct ListNode {\\n     *     int val;\\n     *     struct ListNode *next;\\n     * };\\n     */\\n    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\\n        struct ListNode* p1 = l1;\\n    \\t\\tstruct ListNode* p2 = l2;\\n    \\t\\tstruct ListNode* ans = (struct ListNode*)malloc(sizeof(struct ListNode));\\n    \\t\\tans->val = 0;\\n    \\t\\tstruct ListNode* p = 0;\\n    \\t\\tint c = 0;\\n    \\t\\twhile (p1 != 0 || p2 != 0 || c != 0) {\\n    \\t\\t\\tif (p == 0) {\\n    \\t\\t\\t\\tp = ans;\\n    \\t\\t\\t}\\n    \\t\\t\\telse {\\n    \\t\\t\\t\\tp->next = (struct ListNode*)malloc(sizeof(struct ListNode));\\n    \\t\\t\\t\\tp->next->val = 0;\\n    \\t\\t\\t\\tp = p->next;\\n    \\t\\t\\t}\\n    \\t\\t\\tint a = p1 != 0 ? p1->val : 0;\\n    \\t\\t\\tint b = p2 != 0 ? p2->val : 0;\\n    \\t\\t\\tint s = (a + b + c) % 10;\\n    \\t\\t\\tc = (a + b + c) / 10;\\n    \\t\\t\\tp->val = s;\\n    \\t\\t\\tp->next = 0;\\n    \\t\\t\\tp1 = p1 == 0 ? 0 : p1->next;\\n    \\t\\t\\tp2 = p2 == 0 ? 0 : p2->next;\\n    \\t\\t}\\n    \\t\\treturn ans;\\n    }",
                "solutionTags": [],
                "code": "    /**\\n     * Definition for singly-linked list.\\n     * struct ListNode {\\n     *     int val;\\n     *     struct ListNode *next;\\n     * };\\n     */\\n    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\\n        struct ListNode* p1 = l1;\\n    \\t\\tstruct ListNode* p2 = l2;\\n    \\t\\tstruct ListNode* ans = (struct ListNode*)malloc(sizeof(struct ListNode));\\n    \\t\\tans->val = 0;\\n    \\t\\tstruct ListNode* p = 0;\\n    \\t\\tint c = 0;\\n    \\t\\twhile (p1 != 0 || p2 != 0 || c != 0) {\\n    \\t\\t\\tif (p == 0) {\\n    \\t\\t\\t\\tp = ans;\\n    \\t\\t\\t}\\n    \\t\\t\\telse {\\n    \\t\\t\\t\\tp->next = (struct ListNode*)malloc(sizeof(struct ListNode));\\n    \\t\\t\\t\\tp->next->val = 0;\\n    \\t\\t\\t\\tp = p->next;\\n    \\t\\t\\t}\\n    \\t\\t\\tint a = p1 != 0 ? p1->val : 0;\\n    \\t\\t\\tint b = p2 != 0 ? p2->val : 0;\\n    \\t\\t\\tint s = (a + b + c) % 10;\\n    \\t\\t\\tc = (a + b + c) / 10;\\n    \\t\\t\\tp->val = s;\\n    \\t\\t\\tp->next = 0;\\n    \\t\\t\\tp1 = p1 == 0 ? 0 : p1->next;\\n    \\t\\t\\tp2 = p2 == 0 ? 0 : p2->next;\\n    \\t\\t}\\n    \\t\\treturn ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1619,
                "title": "10-line-c-iterative-solution",
                "content": "    class Solution {\\n    public:\\n        ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode preheader(-1), *curr=&preheader;\\n            int carry=0;\\n            while(l1||l2||carry) {\\n                curr->next = new ListNode(((l1?l1->val:0)+(l2?l2->val:0)+carry)%10);\\n                curr = curr->next;\\n                carry = ((l1?l1->val:0)+(l2?l2->val:0)+carry)/10;\\n                l1?l1=l1->next:0;\\n                l2?l2=l2->next:0;\\n            }\\n            return preheader.next;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode preheader(-1), *curr=&preheader;\\n            int carry=0;\\n            while(l1||l2||carry) {\\n                curr->next = new ListNode(((l1?l1->val:0)+(l2?l2->val:0)+carry)%10);\\n                curr = curr->next;\\n                carry = ((l1?l1->val:0)+(l2?l2->val:0)+carry)/10;\\n                l1?l1=l1->next:0;\\n                l2?l2=l2->next:0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1214804,
                "title": "python-easy-solution-by-using-strings",
                "content": "1. Iterate the first linked list and append the number in each node as a string in a list\\n2. Iterate the second linked list and append the number in each node as a string in a list\\n3. Reverse the strings make them integers and add them\\n4. Make them string again and reverse the string\\n5. For each character in the string create a new node for the new linked list after converting the character to integer\\n\\nIf you liked this solution please UPVOTE. Any comments or discussion will be welcomed! cheers\\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        \\n        l1n = []\\n        while l1:\\n            l1n.append(str(l1.val))\\n            l1 = l1.next\\n            \\n        l2n = []\\n        while l2:\\n            l2n.append(str(l2.val))\\n            l2 = l2.next\\n            \\n        s1 = int(\\'\\'.join(l1n)[::-1])\\n        s2 = int(\\'\\'.join(l2n)[::-1])\\n        \\n        s3 = str(s1+s2)[::-1]\\n        \\n        head = ListNode()\\n        tmp = head\\n        \\n        for i,s in enumerate(s3):\\n            \\n            if i == 0:\\n                tmp.val = int(s)\\n            else:\\n                x = ListNode(int(s))\\n                tmp.next = x\\n                tmp = tmp.next\\n                \\n        return head\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        \\n        l1n = []\\n        while l1:\\n            l1n.append(str(l1.val))\\n            l1 = l1.next\\n            \\n        l2n = []\\n        while l2:\\n            l2n.append(str(l2.val))\\n            l2 = l2.next\\n            \\n        s1 = int(\\'\\'.join(l1n)[::-1])\\n        s2 = int(\\'\\'.join(l2n)[::-1])\\n        \\n        s3 = str(s1+s2)[::-1]\\n        \\n        head = ListNode()\\n        tmp = head\\n        \\n        for i,s in enumerate(s3):\\n            \\n            if i == 0:\\n                tmp.val = int(s)\\n            else:\\n                x = ListNode(int(s))\\n                tmp.next = x\\n                tmp = tmp.next\\n                \\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1013288,
                "title": "python-3-solution-explained-video-code",
                "content": "\\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        dummyHead = ListNode(0)\\n        carry = 0\\n        curr = dummyHead\\n        \\n        while l1 or l2:\\n            if l1:\\n                l1_val = l1.val\\n            else:\\n                l1_val = 0\\n            if l2:\\n                l2_val = l2.val\\n            else:\\n                l2_val = 0\\n            \\n            sum_ = l1_val + l2_val + carry\\n            \\n            curr.next = ListNode(sum_ % 10)\\n            curr = curr.next\\n            carry = sum_ // 10\\n            \\n            if l1:\\n                l1 = l1.next\\n            if l2:\\n                l2 = l2.next\\n        \\n        if carry:\\n            curr.next = ListNode(carry)\\n        \\n        return dummyHead.next\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        dummyHead = ListNode(0)\\n        carry = 0\\n        curr = dummyHead\\n        \\n        while l1 or l2:\\n            if l1:\\n                l1_val = l1.val\\n            else:\\n                l1_val = 0\\n            if l2:\\n                l2_val = l2.val\\n            else:\\n                l2_val = 0\\n            \\n            sum_ = l1_val + l2_val + carry\\n            \\n            curr.next = ListNode(sum_ % 10)\\n            curr = curr.next\\n            carry = sum_ // 10\\n            \\n            if l1:\\n                l1 = l1.next\\n            if l2:\\n                l2 = l2.next\\n        \\n        if carry:\\n            curr.next = ListNode(carry)\\n        \\n        return dummyHead.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 442354,
                "title": "c-resursive-simple-solution",
                "content": "```\\n   public ListNode AddTwoNumbers(ListNode l1, ListNode l2,int carry = 0) {\\n       if(l1 == null && l2 == null && carry == 0) return null; \\n       if(l1 == null && l2 == null && carry == 1) return new ListNode(1);\\n       \\n        var s1 = l1 != null ? l1.val : 0;\\n        var s2 = l2 != null ? l2.val : 0;\\n        \\n        var s = s1 + s2 + carry;\\n        \\n        var sumNode = new ListNode(s % 10);\\n        sumNode.next = AddTwoNumbers(l1?.next,l2?.next, s / 10 );\\n        return sumNode;\\n    }\\n```",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "```\\n   public ListNode AddTwoNumbers(ListNode l1, ListNode l2,int carry = 0) {\\n       if(l1 == null && l2 == null && carry == 0) return null; \\n       if(l1 == null && l2 == null && carry == 1) return new ListNode(1);\\n       \\n        var s1 = l1 != null ? l1.val : 0;\\n        var s2 = l2 != null ? l2.val : 0;\\n        \\n        var s = s1 + s2 + carry;\\n        \\n        var sumNode = new ListNode(s % 10);\\n        sumNode.next = AddTwoNumbers(l1?.next,l2?.next, s / 10 );\\n        return sumNode;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 386617,
                "title": "java-beat-100",
                "content": "Easy-understanding Java Solution\\n - define val as an adder for each digit (l1.value + l2.value), if bigger than 10, use (val % 10) for current result node value, yet return (val / 10) before next round addition;\\n - termination condition: while l1 or l2 is not null, also if val is not ZERO, keep addition.\\n\\n```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        int val = 0; \\n        ListNode sum = new ListNode(2019); // dummy head\\n        ListNode cur = sum;\\n        while (l1 != null || l2 != null || val != 0) { // termination condition is critical\\n            if (l1 != null) {\\n                val = val + l1.val;\\n                l1 = l1.next;\\n            }\\n            if (l2 != null) {\\n                val = val + l2.val;\\n                l2 = l2.next;\\n            }\\n            cur.next = new ListNode(val % 10);\\n            cur = cur.next;\\n            val = val / 10;\\n        }\\n        \\n        return sum.next;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        int val = 0; \\n        ListNode sum = new ListNode(2019); // dummy head\\n        ListNode cur = sum;\\n        while (l1 != null || l2 != null || val != 0) { // termination condition is critical\\n            if (l1 != null) {\\n                val = val + l1.val;\\n                l1 = l1.next;\\n            }\\n            if (l2 != null) {\\n                val = val + l2.val;\\n                l2 = l2.next;\\n            }\\n            cur.next = new ListNode(val % 10);\\n            cur = cur.next;\\n            val = val / 10;\\n        }\\n        \\n        return sum.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1225900,
                "title": "c-solution-96-04-faster",
                "content": "```struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n// create a result list\\n    struct ListNode* result = malloc(sizeof(struct ListNode)); \\n    struct ListNode* ptr = result;\\n    result->val = 0;\\n    result->next = NULL;\\n\\n    int carry = 0;\\n    \\n    while (l1 != NULL || l2!=NULL || carry !=0){\\n        \\n        int a = (l1 == NULL) ? 0 : l1->val;\\n        int b = (l2 == NULL) ? 0 : l2->val;\\n        ptr->val = a + b + carry;\\n        carry = ptr->val / 10;\\n        ptr->val = ptr->val %10;\\n        \\n        // the reason to check if two pointer is NULL is to ensure it will not update after it is already the Last node.\\n        // try consider the case of \\n        // [9,9,9,9,9,9,9]\\n        // [9,9,9,9]\\n        if(l1!=NULL){\\n            l1 = (l1->next ==NULL)? NULL: l1->next;\\n        }\\n        \\n        if(l2 !=NULL){\\n            l2 = (l2->next !=NULL)? l2->next: NULL;\\n        }\\n        \\n        // this is to ensure only create new node if there some calculations needed\\n        if(l1 != NULL || l2!=NULL || carry !=0){\\n            ptr->next = malloc(sizeof(struct ListNode));\\n            ptr->next->next=NULL;\\n            ptr = ptr->next;\\n        }\\n        \\n    }\\n    return result;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n// create a result list\\n    struct ListNode* result = malloc(sizeof(struct ListNode)); \\n    struct ListNode* ptr = result;\\n    result->val = 0;\\n    result->next = NULL;\\n\\n    int carry = 0;\\n    \\n    while (l1 != NULL || l2!=NULL || carry !=0){\\n        \\n        int a = (l1 == NULL) ? 0 : l1->val;\\n        int b = (l2 == NULL) ? 0 : l2->val;\\n        ptr->val = a + b + carry;\\n        carry = ptr->val / 10;\\n        ptr->val = ptr->val %10;\\n        \\n        // the reason to check if two pointer is NULL is to ensure it will not update after it is already the Last node.\\n        // try consider the case of \\n        // [9,9,9,9,9,9,9]\\n        // [9,9,9,9]\\n        if(l1!=NULL){\\n            l1 = (l1->next ==NULL)? NULL: l1->next;\\n        }\\n        \\n        if(l2 !=NULL){\\n            l2 = (l2->next !=NULL)? l2->next: NULL;\\n        }\\n        \\n        // this is to ensure only create new node if there some calculations needed\\n        if(l1 != NULL || l2!=NULL || carry !=0){\\n            ptr->next = malloc(sizeof(struct ListNode));\\n            ptr->next->next=NULL;\\n            ptr = ptr->next;\\n        }\\n        \\n    }\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 328002,
                "title": "javascript-bests-99-73",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let res = new ListNode(-1),\\n        dummy = res,\\n        sum = 0, carry = 0;\\n    \\n    while(l1 || l2 || sum > 0) {\\n        if(l1) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n        }\\n        \\n        if(l2) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n        }\\n        \\n        if(sum >= 10) {\\n            sum -= 10;\\n            carry = 1;\\n        }\\n        \\n        dummy.next = new ListNode(sum);\\n        dummy = dummy.next;\\n        sum = carry;\\n        carry = 0;\\n    }\\n    return res.next;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let res = new ListNode(-1),\\n        dummy = res,\\n        sum = 0, carry = 0;\\n    \\n    while(l1 || l2 || sum > 0) {\\n        if(l1) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n        }\\n        \\n        if(l2) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n        }\\n        \\n        if(sum >= 10) {\\n            sum -= 10;\\n            carry = 1;\\n        }\\n        \\n        dummy.next = new ListNode(sum);\\n        dummy = dummy.next;\\n        sum = carry;\\n        carry = 0;\\n    }\\n    return res.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 322182,
                "title": "cpp-concise-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int sum = 0;\\n        ListNode* dummy = new ListNode(0), *cur = dummy;\\n        while(l1 || l2) {\\n            int val1 = l1 ? l1->val : 0;\\n            int val2 = l2 ? l2->val : 0;\\n            sum += val1 + val2;\\n            cur->next = new ListNode(sum % 10);\\n            sum /= 10;\\n            cur = cur->next;\\n            l1 = l1 ? l1->next : l1;\\n            l2 = l2 ? l2->next : l2;\\n        }\\n        if(sum)\\n            cur->next = new ListNode(sum);\\n        cur = dummy->next;\\n        delete dummy;\\n        return cur;\\n    }\\n};\\n```\\nTime: O(N)\\nSpace: O(N)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int sum = 0;\\n        ListNode* dummy = new ListNode(0), *cur = dummy;\\n        while(l1 || l2) {\\n            int val1 = l1 ? l1->val : 0;\\n            int val2 = l2 ? l2->val : 0;\\n            sum += val1 + val2;\\n            cur->next = new ListNode(sum % 10);\\n            sum /= 10;\\n            cur = cur->next;\\n            l1 = l1 ? l1->next : l1;\\n            l2 = l2 ? l2->next : l2;\\n        }\\n        if(sum)\\n            cur->next = new ListNode(sum);\\n        cur = dummy->next;\\n        delete dummy;\\n        return cur;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 307928,
                "title": "go-python-clear-iterative-solution",
                "content": "Go\\n```\\nfunc addTwoNumbers(a *ListNode, b *ListNode) *ListNode {\\n\\ttail := &ListNode{0, nil}\\n\\thead := tail\\n\\tvar num int\\n\\tfor a != nil || b != nil {\\n\\t\\tnum /= 10\\n\\t\\tif a != nil {\\n\\t\\t\\tnum += a.Val\\n\\t\\t\\ta = a.Next\\n\\t\\t}\\n\\t\\tif b != nil{\\n\\t\\t\\tnum += b.Val\\n\\t\\t\\tb = b.Next\\n\\t\\t}\\n\\n\\t\\thead.Next = &ListNode{Val:num%10}\\n\\t\\thead = head.Next\\n\\t}\\n\\n\\tif num/10 == 1 {\\n\\t\\thead.Next = &ListNode{Val:1}\\n\\t}\\n\\n\\treturn tail.Next\\n}\\n```\\n\\nPython\\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        result = result_iter = ListNode(0)\\n\\n        current = 0\\n        while l1 or l2:\\n            if l1:\\n                current += l1.val\\n                l1 = l1.next\\n            if l2:\\n                current += l2.val\\n                l2 = l2.next\\n\\n            result_iter.next = ListNode(current % 10)\\n            result_iter = result_iter.next\\n            current //= 10\\n        if current == 1:\\n            result_iter.next = ListNode(1)\\n\\n        return result.next\\n```",
                "solutionTags": [],
                "code": "```\\nfunc addTwoNumbers(a *ListNode, b *ListNode) *ListNode {\\n\\ttail := &ListNode{0, nil}\\n\\thead := tail\\n\\tvar num int\\n\\tfor a != nil || b != nil {\\n\\t\\tnum /= 10\\n\\t\\tif a != nil {\\n\\t\\t\\tnum += a.Val\\n\\t\\t\\ta = a.Next\\n\\t\\t}\\n\\t\\tif b != nil{\\n\\t\\t\\tnum += b.Val\\n\\t\\t\\tb = b.Next\\n\\t\\t}\\n\\n\\t\\thead.Next = &ListNode{Val:num%10}\\n\\t\\thead = head.Next\\n\\t}\\n\\n\\tif num/10 == 1 {\\n\\t\\thead.Next = &ListNode{Val:1}\\n\\t}\\n\\n\\treturn tail.Next\\n}\\n```\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        result = result_iter = ListNode(0)\\n\\n        current = 0\\n        while l1 or l2:\\n            if l1:\\n                current += l1.val\\n                l1 = l1.next\\n            if l2:\\n                current += l2.val\\n                l2 = l2.next\\n\\n            result_iter.next = ListNode(current % 10)\\n            result_iter = result_iter.next\\n            current //= 10\\n        if current == 1:\\n            result_iter.next = ListNode(1)\\n\\n        return result.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 298016,
                "title": "java-solution-faster-than-100-recursive",
                "content": "```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        return helper(l1, l2, 0);\\n    }\\n    \\n    public ListNode helper(ListNode l1, ListNode l2, int carry) {\\n        if (l1 == null && l2 == null && carry == 0) {\\n            if (carry == 0) return null;\\n            else return new ListNode(1);\\n        }\\n        \\n\\t\\t// Ternary functions avoid NullPointerExceptions\\n        int sum = ((l1 == null) ? 0 : l1.val) + ((l2 == null) ? 0 : l2.val) + carry;\\n        ListNode head = new ListNode(sum % 10);\\n        \\n\\t\\t// Set the next pointer to be the sum of the next element of the two lists and the carry\\n        head.next = helper((l1 == null) ? null : l1.next, (l2 == null) ? null : l2.next, sum / 10);\\n        \\n        return head;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        return helper(l1, l2, 0);\\n    }\\n    \\n    public ListNode helper(ListNode l1, ListNode l2, int carry) {\\n        if (l1 == null && l2 == null && carry == 0) {\\n            if (carry == 0) return null;\\n            else return new ListNode(1);\\n        }\\n        \\n\\t\\t// Ternary functions avoid NullPointerExceptions\\n        int sum = ((l1 == null) ? 0 : l1.val) + ((l2 == null) ? 0 : l2.val) + carry;\\n        ListNode head = new ListNode(sum % 10);\\n        \\n\\t\\t// Set the next pointer to be the sum of the next element of the two lists and the carry\\n        head.next = helper((l1 == null) ? null : l1.next, (l2 == null) ? null : l2.next, sum / 10);\\n        \\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 153900,
                "title": "easy-swift-implementation",
                "content": "    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        return addTwoNumbers(l1, l2, 0)\\n    }\\n    \\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?, _ carry: Int) -> ListNode? {\\n        guard l1 != nil || l2 != nil else { \\n            return (carry > 0) ? ListNode(carry) : nil\\n        }\\n        \\n        let l1Val = l1?.val ?? 0\\n        let l2Val = l2?.val ?? 0\\n        let value = l1Val + l2Val + carry\\n        let rl = ListNode(value%10)\\n        rl.next = addTwoNumbers(l1?.next, l2?.next, value/10)\\n        return rl\\n    }",
                "solutionTags": [],
                "code": "    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        return addTwoNumbers(l1, l2, 0)\\n    }\\n    \\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?, _ carry: Int) -> ListNode? {\\n        guard l1 != nil || l2 != nil else { \\n            return (carry > 0) ? ListNode(carry) : nil\\n        }\\n        \\n        let l1Val = l1?.val ?? 0\\n        let l2Val = l2?.val ?? 0\\n        let value = l1Val + l2Val + carry\\n        let rl = ListNode(value%10)\\n        rl.next = addTwoNumbers(l1?.next, l2?.next, value/10)\\n        return rl\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1467,
                "title": "5ms-java-code-for-add-two-numbers",
                "content": "    public class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode head = new ListNode(0);\\n        ListNode p1 = l1, p2 = l2, p = head;\\n        int c = 0;\\n        while(p1!=null || p2!=null || c==1){\\n            int add1 = (p1==null ? 0 : p1.val);\\n            int add2 = (p2==null ? 0 : p2.val);\\n            int k = add1 + add2 + c;\\n            c =  k/10;\\n            p.next = new ListNode(k%10);\\n            p = p.next;\\n            if(p1!=null){p1 = p1.next;}\\n            if(p2!=null){p2 = p2.next;}\\n        }\\n        return head.next;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode head = new ListNode(0);\\n        ListNode p1 = l1, p2 = l2, p = head;\\n        int c = 0;\\n        while(p1!=null || p2!=null || c==1){\\n            int add1 = (p1==null ? 0 : p1.val);\\n            int add2 = (p2==null ? 0 : p2.val);\\n            int k = add1 + add2 + c;\\n            c =  k/10;\\n            p.next = new ListNode(k%10);\\n            p = p.next;\\n            if(p1!=null){p1 = p1.next;}",
                "codeTag": "Java"
            },
            {
                "id": 1643,
                "title": "java-o-n-solution-very-easy-to-understand",
                "content": "Although my code do take sometime, it is very easy to understand than other solutions. :)\\n    \\n    public class Solution {\\n            public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n                ListNode head = new ListNode(0);\\n                ListNode current = head;\\n                boolean carry = false;\\n                \\n                while(l1!=null||l2!=null){\\n                    int sum=0;\\n                    \\n                    if(l1==null){       //If l1 is null, only proceed l2\\n                        sum=l2.val;\\n                        l2=l2.next;\\n                    }\\n                    else if(l2==null){  //If l2 is null, only proceed l1\\n                        sum=l1.val;\\n                        l1=l1.next;\\n                    }  \\n                    else{               //If l1,l2 not null, proceed both\\n                        sum=l1.val+l2.val;\\n                        l1=l1.next;\\n                        l2=l2.next;\\n                    }\\n                    \\n                    if(carry)           //check carry\\n                        sum++;\\n                        \\n                    if(sum>=10){        //check overflow\\n                        sum=sum-10;\\n                        carry=true;\\n                    }\\n                    else\\n                        carry=false;\\n                    \\n                    current.next=new ListNode(sum);\\n                    current=current.next;\\n                }\\n                \\n                if(carry)               //check last carry\\n                    current.next=new ListNode(1);\\n                    \\n                return head.next;\\n            }\\n        }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n            public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n                ListNode head = new ListNode(0);\\n                ListNode current = head;\\n                boolean carry = false;\\n                \\n                while(l1!=null||l2!=null){\\n                    int sum=0;\\n                    \\n                    if(l1==null){       //If l1 is null, only proceed l2\\n                        sum=l2.val;\\n                        l2=l2.next;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 1556,
                "title": "12-line-java-solution",
                "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) {\\n *         val = x;\\n *         next = null;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        return addTwoNumbersWithCarryOver(l1,l2,0); \\n    }\\n    \\n    public ListNode addTwoNumbersWithCarryOver(ListNode l1,ListNode l2, int carryOver){\\n        if (l1 == null) {\\n           return carryOver == 0 ? l2 : addTwoNumbersWithCarryOver(new ListNode(carryOver), l2,0); \\n        }\\n        \\n        if (l2 == null) {\\n           return carryOver == 0 ? l1 : addTwoNumbersWithCarryOver(l1, new ListNode(carryOver),0);\\n        }\\n        \\n        int sumVal = l1.val + l2.val + carryOver;\\n        ListNode returnVal = new ListNode(sumVal%10);\\n        returnVal.next = addTwoNumbersWithCarryOver(l1.next,l2.next, sumVal/10);\\n        return returnVal;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        return addTwoNumbersWithCarryOver(l1,l2,0); \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2628293,
                "title": "c-2-solution-shortest-recursion-iterative",
                "content": "\\n**<<<<<<<<** **UPvote**\\n\\n\\n\\n**1.) Recursive Solution**\\n```\\nclass Solution {\\npublic:\\n    ListNode* add(ListNode*l1,ListNode*l2,int carry){\\n        if(l1==NULL && l2==NULL && carry==0) return NULL;\\n        int sum=carry;\\n        sum+=l1==NULL?0:l1->val;\\n        sum+=l2==NULL?0:l2->val;\\n        ListNode*newNode=new ListNode(sum%10);\\n        carry=sum/10;\\n        if(l1) l1=l1->next;\\n        if(l2) l2=l2->next;\\n        newNode->next=add(l1,l2,carry);\\n        return newNode;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        return add(l1,l2,0);\\n    }\\n};\\n```\\n\\n\\n**2.) Iterative Solution**\\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* p1 = l1;\\n        ListNode* p2 = l2;\\n        ListNode* result = new ListNode(-1);\\n        ListNode* dummy = result;\\n        while(p1 || p2 || carry){\\n            if(!p1 && carry == 0){\\n                result->next = p2;\\n                break;\\n            }\\n            if(!p2 && carry == 0){\\n                result->next = p1;\\n                break;\\n            }\\n            int digit1 = p1 ? p1->val : 0;\\n            int digit2 = p2 ? p2->val : 0;\\n            int sum = digit1 + digit2 + carry;\\n            carry = sum / 10;\\n            sum %= 10;\\n            result->next = new ListNode(sum);\\n            if(p1)  p1 = p1->next;\\n            if(p2)  p2 = p2->next;\\n            result = result->next;\\n        }\\n        result = dummy->next;\\n        delete dummy;\\n        return result;\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C",
                    "Linked List",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* add(ListNode*l1,ListNode*l2,int carry){\\n        if(l1==NULL && l2==NULL && carry==0) return NULL;\\n        int sum=carry;\\n        sum+=l1==NULL?0:l1->val;\\n        sum+=l2==NULL?0:l2->val;\\n        ListNode*newNode=new ListNode(sum%10);\\n        carry=sum/10;\\n        if(l1) l1=l1->next;\\n        if(l2) l2=l2->next;\\n        newNode->next=add(l1,l2,carry);\\n        return newNode;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        return add(l1,l2,0);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* p1 = l1;\\n        ListNode* p2 = l2;\\n        ListNode* result = new ListNode(-1);\\n        ListNode* dummy = result;\\n        while(p1 || p2 || carry){\\n            if(!p1 && carry == 0){\\n                result->next = p2;\\n                break;\\n            }\\n            if(!p2 && carry == 0){\\n                result->next = p1;\\n                break;\\n            }\\n            int digit1 = p1 ? p1->val : 0;\\n            int digit2 = p2 ? p2->val : 0;\\n            int sum = digit1 + digit2 + carry;\\n            carry = sum / 10;\\n            sum %= 10;\\n            result->next = new ListNode(sum);\\n            if(p1)  p1 = p1->next;\\n            if(p2)  p2 = p2->next;\\n            result = result->next;\\n        }\\n        result = dummy->next;\\n        delete dummy;\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2568116,
                "title": "short-c-java-python-explained-solution-beginner-friendly-by-mr-coder",
                "content": "**Please UPVOTE if you LIKE!!**\\n**Watch this video \\uD83E\\uDC83 for the better explanation of the code.**\\n\\nhttps://www.youtube.com/watch?v=orixEIs3anc\\n\\n\\n**Also you can SUBSCRIBE  \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.**\\n\\nhttps://t.me/dsacoder  \\u2B05\\u2B05 **Telegram link** to discuss leetcode daily questions and other dsa problems\\n\\n\\n**C++**\\n```\\n/**\\n\\nDefinition for singly-linked list.\\n\\nstruct ListNode {\\n\\nint val;\\nListNode *next;\\nListNode() : val(0), next(nullptr) {}\\nListNode(int x) : val(x), next(nullptr) {}\\nListNode(int x, ListNode *next) : val(x), next(next) {}\\n};\\n*/\\nclass Solution {\\npublic:\\n\\nvoid sol(ListNodel1, ListNode l2, ListNode* ans, int rem)\\n{ int tempans=0;\\nListNode *temp= new ListNode;\\nif(l1-> next== NULL && l2-> next== NULL){\\ntempans= l1->val+ l2-> val+ rem;\\nrem= tempans/10;\\nans -> val= tempans%10;\\n\\n if(rem!=0)   \\n { ans-> next= temp;\\n     temp-> val= rem;\\n }\\n}\\nelse if(l1-> next== NULL )\\n{\\nListNode *temp4= new ListNode;\\ntempans= l1->val+ l2-> val+ rem;\\nrem= tempans/10;\\nans -> val= tempans%10;\\nans->next= temp4;\\nl1->val=0;\\nsol(l1, l2->next, temp4,rem);\\n}\\nelse if(l2-> next== NULL )\\n{\\nListNode *temp4= new ListNode;\\ntempans= l1->val+ l2-> val+ rem;\\nrem= tempans/10;\\nans -> val= tempans%10;\\nans->next= temp4;\\nl2->val=0;\\nsol(l1->next, l2, temp4,rem);\\n}\\nelse{ ListNode *temp3= new ListNode;\\ntempans= l1->val+ l2-> val+ rem;\\nrem= tempans/10;\\nans -> val= tempans%10;\\nans-> next= temp3;\\nsol(l1->next, l2->next, temp3,rem);\\n\\n}\\n\\n}\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\nListNode *ans = new ListNode;\\nint rem=0;\\nsol(l1, l2,ans,rem);\\nreturn ans;\\n}\\n};\\n```\\n**JAVA**\\n```\\nclass Solution {\\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\nListNode dummy = new ListNode();\\nListNode temp = dummy;\\nint c = 0;\\nwhile(l1 != null || l2 != null || c == 1){\\nint sum = 0;\\nif(l1 != null){\\nsum = sum + l1.val;\\nl1 = l1.next;\\n}\\nif(l2 != null){\\nsum = sum + l2.val;\\nl2 = l2.next;\\n}\\nsum = sum + c;\\nc = sum/10;\\nListNode node = new ListNode(sum % 10);\\ntemp.next = node;\\ntemp = temp.next;\\n}\\nreturn dummy.next;\\n}\\n}\\n```\\n**PYTHON**\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        head=ListNode()\\n        tr=head\\n        sum=0\\n        while(l1 or l2 or sum!=0):\\n            if l1:\\n                sum=sum+l1.val\\n                l1=l1.next\\n            if l2:\\n                sum=sum+l2.val\\n                l2=l2.next\\n            \\n            nn=ListNode()\\n            nn.val=sum%10\\n            \\n            tr.next=nn\\n            tr=nn\\n            \\n            sum=int(sum/10)\\n        return head.next\\n```\\n**Please do UPVOTE to motivate me to solve more daily challenges like this !!**\\nupdated",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n/**\\n\\nDefinition for singly-linked list.\\n\\nstruct ListNode {\\n\\nint val;\\nListNode *next;\\nListNode() : val(0), next(nullptr) {}\\nListNode(int x) : val(x), next(nullptr) {}\\nListNode(int x, ListNode *next) : val(x), next(next) {}\\n};\\n*/\\nclass Solution {\\npublic:\\n\\nvoid sol(ListNodel1, ListNode l2, ListNode* ans, int rem)\\n{ int tempans=0;\\nListNode *temp= new ListNode;\\nif(l1-> next== NULL && l2-> next== NULL){\\ntempans= l1->val+ l2-> val+ rem;\\nrem= tempans/10;\\nans -> val= tempans%10;\\n\\n if(rem!=0)   \\n { ans-> next= temp;\\n     temp-> val= rem;\\n }\\n}\\nelse if(l1-> next== NULL )\\n{\\nListNode *temp4= new ListNode;\\ntempans= l1->val+ l2-> val+ rem;\\nrem= tempans/10;\\nans -> val= tempans%10;\\nans->next= temp4;\\nl1->val=0;\\nsol(l1, l2->next, temp4,rem);\\n}\\nelse if(l2-> next== NULL )\\n{\\nListNode *temp4= new ListNode;\\ntempans= l1->val+ l2-> val+ rem;\\nrem= tempans/10;\\nans -> val= tempans%10;\\nans->next= temp4;\\nl2->val=0;\\nsol(l1->next, l2, temp4,rem);\\n}\\nelse{ ListNode *temp3= new ListNode;\\ntempans= l1->val+ l2-> val+ rem;\\nrem= tempans/10;\\nans -> val= tempans%10;\\nans-> next= temp3;\\nsol(l1->next, l2->next, temp3,rem);\\n\\n}\\n\\n}\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\nListNode *ans = new ListNode;\\nint rem=0;\\nsol(l1, l2,ans,rem);\\nreturn ans;\\n}\\n};\\n```\n```\\nclass Solution {\\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\nListNode dummy = new ListNode();\\nListNode temp = dummy;\\nint c = 0;\\nwhile(l1 != null || l2 != null || c == 1){\\nint sum = 0;\\nif(l1 != null){\\nsum = sum + l1.val;\\nl1 = l1.next;\\n}\\nif(l2 != null){\\nsum = sum + l2.val;\\nl2 = l2.next;\\n}\\nsum = sum + c;\\nc = sum/10;\\nListNode node = new ListNode(sum % 10);\\ntemp.next = node;\\ntemp = temp.next;\\n}\\nreturn dummy.next;\\n}\\n}\\n```\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        head=ListNode()\\n        tr=head\\n        sum=0\\n        while(l1 or l2 or sum!=0):\\n            if l1:\\n                sum=sum+l1.val\\n                l1=l1.next\\n            if l2:\\n                sum=sum+l2.val\\n                l2=l2.next\\n            \\n            nn=ListNode()\\n            nn.val=sum%10\\n            \\n            tr.next=nn\\n            tr=nn\\n            \\n            sum=int(sum/10)\\n        return head.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2024907,
                "title": "simple-python3-solution",
                "content": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummy = ListNode()\\n        cur = dummy\\n        \\n        carry = 0\\n        while l1 or l2 or carry:\\n            v1 = l1.val if l1 else 0\\n            v2 = l2.val if l2 else 0\\n            \\n            # new digit val\\n            val = v1 + v2 + carry\\n            carry = val // 10\\n            val = val % 10\\n            cur.next = ListNode(val)  # as in one place we have to put a single digit\\n            \\n            # update pointers\\n            cur = cur.next\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n            \\n        return dummy.next\\n        \\n# Time: O(n + m)\\n# Space: O(n + m)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummy = ListNode()\\n        cur = dummy\\n        \\n        carry = 0\\n        while l1 or l2 or carry:\\n            v1 = l1.val if l1 else 0\\n            v2 = l2.val if l2 else 0\\n            \\n            # new digit val\\n            val = v1 + v2 + carry\\n            carry = val // 10\\n            val = val % 10\\n            cur.next = ListNode(val)  # as in one place we have to put a single digit\\n            \\n            # update pointers\\n            cur = cur.next\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n            \\n        return dummy.next\\n        \\n# Time: O(n + m)\\n# Space: O(n + m)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1398746,
                "title": "rust-solution",
                "content": "```\\n// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut l1 = l1.clone();\\n        let mut l2 = l2.clone();\\n        let mut head = Box::new(ListNode::new(0));\\n        let mut current = &mut head;\\n      \\n        let mut carry = 0;\\n        let mut v1 = 0;\\n        let mut v2 = 0;\\n        while l1.is_some() || l2.is_some() || carry != 0 {\\n            v1 = 0;\\n            v2 = 0;\\n            \\n            if let Some(node) = l1 {\\n                v1 = node.val;\\n                l1 = node.next;\\n            }\\n            if let Some(node) = l2 {\\n                v2 = node.val;\\n                l2 = node.next;\\n            }\\n            \\n            current.next = Some(Box::new(ListNode::new((v1 + v2 + carry) % 10)));\\n            current = current.next.as_mut().unwrap();\\n            carry = (v1 + v2 + carry) / 10;\\n        }\\n        \\n        head.next\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\n// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut l1 = l1.clone();\\n        let mut l2 = l2.clone();\\n        let mut head = Box::new(ListNode::new(0));\\n        let mut current = &mut head;\\n      \\n        let mut carry = 0;\\n        let mut v1 = 0;\\n        let mut v2 = 0;\\n        while l1.is_some() || l2.is_some() || carry != 0 {\\n            v1 = 0;\\n            v2 = 0;\\n            \\n            if let Some(node) = l1 {\\n                v1 = node.val;\\n                l1 = node.next;\\n            }\\n            if let Some(node) = l2 {\\n                v2 = node.val;\\n                l2 = node.next;\\n            }\\n            \\n            current.next = Some(Box::new(ListNode::new((v1 + v2 + carry) % 10)));\\n            current = current.next.as_mut().unwrap();\\n            carry = (v1 + v2 + carry) / 10;\\n        }\\n        \\n        head.next\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1353295,
                "title": "python-runtime-60ms",
                "content": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        start = curr = ListNode(0)\\n        carry = 0\\n        while(l1 or l2 or carry):\\n            x = l1.val if l1 else 0\\n            y = l2.val if l2 else 0\\n            \\n            carry, val = divmod(x + y + carry, 10)\\n            curr.next = ListNode(val)\\n            curr = curr.next\\n            \\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n        \\n        return start.next\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        start = curr = ListNode(0)\\n        carry = 0\\n        while(l1 or l2 or carry):\\n            x = l1.val if l1 else 0\\n            y = l2.val if l2 else 0\\n            \\n            carry, val = divmod(x + y + carry, 10)\\n            curr.next = ListNode(val)\\n            curr = curr.next\\n            \\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n        \\n        return start.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1067454,
                "title": "4ms-2mb-concise-rust",
                "content": "```rust\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        add_three_numbers(l1, l2, 0)\\n    }\\n}\\n\\npub fn add_three_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>, mut rem: i32) -> Option<Box<ListNode>> {\\n    Some(Box::new(match (l1, l2, rem) {\\n        (None, None, 0) => None?,\\n        (None, None, val) => ListNode { next: None, val },\\n        (x, y, mut rem) => {\\n            ListNode {\\n                next: add_three_numbers(\\n                    x.and_then(|x| {rem += x.val; x.next}), \\n                    y.and_then(|y| {rem += y.val; y.next}), \\n                    rem / 10\\n                ),\\n                val: rem % 10,\\n            }\\n        },\\n    }))\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        add_three_numbers(l1, l2, 0)\\n    }\\n}\\n\\npub fn add_three_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>, mut rem: i32) -> Option<Box<ListNode>> {\\n    Some(Box::new(match (l1, l2, rem) {\\n        (None, None, 0) => None?,\\n        (None, None, val) => ListNode { next: None, val },\\n        (x, y, mut rem) => {\\n            ListNode {\\n                next: add_three_numbers(\\n                    x.and_then(|x| {rem += x.val; x.next}), \\n                    y.and_then(|y| {rem += y.val; y.next}), \\n                    rem / 10\\n                ),\\n                val: rem % 10,\\n            }\\n        },\\n    }))\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 465216,
                "title": "javascript",
                "content": "Runtime: 124 ms, faster than 36.10% of JavaScript online submissions for Add Two Numbers.\\nMemory Usage: 38.9 MB, less than 18.05% of JavaScript online submissions for Add Two Numbers.\\n\\n\\n```\\nvar addTwoNumbers = function(l1, l2) {\\n    let values = [];\\n    let overflow = 0;\\n    while (l1.next || l2.next) {\\n        const value = (l1.val + l2.val + overflow) % 10;\\n        overflow = l1.val + l2.val + overflow >= 10 ? 1 : 0;\\n        values.push(value);\\n\\n        l1 = l1.next || new ListNode(0);\\n        l2 = l2.next || new ListNode(0);\\n    }\\n    const value = (l1.val + l2.val + overflow) % 10;\\n    overflow = l1.val + l2.val + overflow >= 10 ? 1 : 0;\\n    values.push(value);\\n    if (overflow === 1) {\\n        values.push(1);\\n    }\\n    let node = undefined;\\n    values.reverse().forEach(item => {\\n        if (node === undefined) {\\n            node = new ListNode(item);\\n        } else {\\n            const newNode = new ListNode(item);\\n            newNode.next = node;\\n            node = newNode;\\n        }\\n    });\\n    return node;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar addTwoNumbers = function(l1, l2) {\\n    let values = [];\\n    let overflow = 0;\\n    while (l1.next || l2.next) {\\n        const value = (l1.val + l2.val + overflow) % 10;\\n        overflow = l1.val + l2.val + overflow >= 10 ? 1 : 0;\\n        values.push(value);\\n\\n        l1 = l1.next || new ListNode(0);\\n        l2 = l2.next || new ListNode(0);\\n    }\\n    const value = (l1.val + l2.val + overflow) % 10;\\n    overflow = l1.val + l2.val + overflow >= 10 ? 1 : 0;\\n    values.push(value);\\n    if (overflow === 1) {\\n        values.push(1);\\n    }\\n    let node = undefined;\\n    values.reverse().forEach(item => {\\n        if (node === undefined) {\\n            node = new ListNode(item);\\n        } else {\\n            const newNode = new ListNode(item);\\n            newNode.next = node;\\n            node = newNode;\\n        }\\n    });\\n    return node;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 261694,
                "title": "rust-4ms",
                "content": "```rust\\nimpl Solution {\\n    \\n    pub fn add_two_numbers(\\n        l1: Option<Box<ListNode>>,\\n        l2: Option<Box<ListNode>>\\n    ) -> Option<Box<ListNode>> {\\n        Solution::merge(l1, l2, 0, ListNode::new(-1))\\n    }\\n    \\n    fn merge(\\n        mut l1: Option<Box<ListNode>>,\\n        mut l2: Option<Box<ListNode>>,\\n        mut val: i32,\\n        mut ln: ListNode,\\n    ) -> Option<Box<ListNode>> {\\n        if l1.is_none() && l2.is_none() && val == 0 {\\n            return None;\\n        }\\n        if let Some(n1) = l1 {\\n            val += n1.val;\\n            l1 = n1.next;\\n        }\\n        if let Some(n2) = l2 {\\n            val += n2.val;\\n            l2 = n2.next;\\n        }\\n        ln.val = if val > 9 { val - 10 } else { val };\\n        ln.next = Solution::merge(l1, l2, val / 10, ListNode::new(-1));\\n        Some(Box::new(ln))\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    \\n    pub fn add_two_numbers(\\n        l1: Option<Box<ListNode>>,\\n        l2: Option<Box<ListNode>>\\n    ) -> Option<Box<ListNode>> {\\n        Solution::merge(l1, l2, 0, ListNode::new(-1))\\n    }\\n    \\n    fn merge(\\n        mut l1: Option<Box<ListNode>>,\\n        mut l2: Option<Box<ListNode>>,\\n        mut val: i32,\\n        mut ln: ListNode,\\n    ) -> Option<Box<ListNode>> {\\n        if l1.is_none() && l2.is_none() && val == 0 {\\n            return None;\\n        }\\n        if let Some(n1) = l1 {\\n            val += n1.val;\\n            l1 = n1.next;\\n        }\\n        if let Some(n2) = l2 {\\n            val += n2.val;\\n            l2 = n2.next;\\n        }\\n        ln.val = if val > 9 { val - 10 } else { val };\\n        ln.next = Solution::merge(l1, l2, val / 10, ListNode::new(-1));\\n        Some(Box::new(ln))\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1595,
                "title": "an-ordinary-javascript-solution",
                "content": "Hi there. I just passed the JS version and want to share my codes here.\\n\\nBasically, nothing big to care about. Just remember to use parseInt somewhere to avoid the digit's being transformed to float.\\n\\nIt's normal since it runs with 300ms. I saw someone's JS runs with 200ms. I didn't figure out how they made it.\\n\\n\\n    var addTwoNumbers = function(l1, l2) {\\n        if (l1===null) return l2;\\n        if (l2===null) return l1;\\n    \\n        //new a ListNode here, with head.next as header, pos as a pointer points to current position\\n        var head = new ListNode(0);\\n        var pos = head;\\n        var temp = 0;\\n        while (l2!==null || l1!==null || temp>0){\\n            \\n            //(l2!==null || l1!==null || temp>0) indicates that next digit is not null, so new a Node and move to it\\n            pos.next = new ListNode(0);\\n            pos = pos.next;\\n            \\n            if (l1!==null){\\n                temp += l1.val;\\n                l1 = l1.next;\\n            }\\n            if (l2!==null){\\n                temp += l2.val;\\n                l2 = l2.next;\\n            }\\n            \\n            pos.val = temp%10;\\n            temp = parseInt(temp/10);\\n            //console.log(temp);\\n        }\\n        return head.next;\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "Hi there. I just passed the JS version and want to share my codes here.\\n\\nBasically, nothing big to care about. Just remember to use parseInt somewhere to avoid the digit's being transformed to float.\\n\\nIt's normal since it runs with 300ms. I saw someone's JS runs with 200ms. I didn't figure out how they made it.\\n\\n\\n    var addTwoNumbers = function(l1, l2) {\\n        if (l1===null) return l2;\\n        if (l2===null) return l1;\\n    \\n        //new a ListNode here, with head.next as header, pos as a pointer points to current position\\n        var head = new ListNode(0);\\n        var pos = head;\\n        var temp = 0;\\n        while (l2!==null || l1!==null || temp>0){\\n            \\n            //(l2!==null || l1!==null || temp>0) indicates that next digit is not null, so new a Node and move to it\\n            pos.next = new ListNode(0);\\n            pos = pos.next;\\n            \\n            if (l1!==null){\\n                temp += l1.val;\\n                l1 = l1.next;\\n            }\\n            if (l2!==null){\\n                temp += l2.val;\\n                l2 = l2.next;\\n            }\\n            \\n            pos.val = temp%10;\\n            temp = parseInt(temp/10);\\n            //console.log(temp);\\n        }\\n        return head.next;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 3149937,
                "title": "simple-js-solution-o-max-m-n-time-o-max-m-n-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTraverse both linked lists simultaneously and add their node values and store the result in a new linked list.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- The solution iterates through the linked lists l1 and l2 until both linked lists are null, and the sum is greater than 0. \\n\\n- In each iteration, the sum is calculated by adding the values of the current nodes of l1 and l2 and the carry from the previous iteration.\\n\\n- If the sum is greater than or equal to 10, the carry over is calculated and the sum is reduced by 10. \\n\\n- A new node is created with the value of sum and is added to the result linked list using the head pointer. \\n\\n- The head pointer is then moved to the next node in the result linked list. \\n\\n- The sum is then set to the carry and carry is set to 0 for the next iteration. \\n\\n- The result linked list is returned after the loop terminates.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution is O(max(m,n)), where m and n are the lengths of the two linked lists.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this solution is O(max(m,n)), where m and n are the lengths of the two linked lists.\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    var List = new ListNode(0);\\n    var head = List;\\n    var sum = 0;\\n    var carry = 0;\\n\\n    while(l1 !== null || l2 !== null || sum > 0){\\n        if (l1 !== null) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n        }\\n        if (l2 !== null) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n        }\\n        if (sum >= 10) {\\n            carry = 1;\\n            sum -= 10;\\n        }\\n      //  console.log(head.val);\\n        head.val = sum;\\n      \\n       // console.log(head.val);\\n        \\n        if (l1 !== null || l2 !== null || carry > 0) {\\n            head.next = new ListNode(carry);\\n            head = head.next;\\n        }\\n\\n        sum = carry;\\n        carry = 0;\\n    }\\n\\n    return List;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    var List = new ListNode(0);\\n    var head = List;\\n    var sum = 0;\\n    var carry = 0;\\n\\n    while(l1 !== null || l2 !== null || sum > 0){\\n        if (l1 !== null) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n        }\\n        if (l2 !== null) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n        }\\n        if (sum >= 10) {\\n            carry = 1;\\n            sum -= 10;\\n        }\\n      //  console.log(head.val);\\n        head.val = sum;\\n      \\n       // console.log(head.val);\\n        \\n        if (l1 !== null || l2 !== null || carry > 0) {\\n            head.next = new ListNode(carry);\\n            head = head.next;\\n        }\\n\\n        sum = carry;\\n        carry = 0;\\n    }\\n\\n    return List;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1958607,
                "title": "rust-0ms-2-3-mb-20-lines-dummy-head-imperative-iterative",
                "content": "Still not familiar with Rust, had to peek to figure out the as_mut() and .unwrap() parts.\\n\\nSometimes it\\'s slower than 0ms, leetcode\\'s timing seems imprecise.\\n\\nNot pretty compared to the beautiful no-let recursive solution, but gets the job done...\\n\\n```\\nimpl Solution {\\n    pub fn add_two_numbers(mut l1: Option<Box<ListNode>>, mut l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut carry = 0;\\n        let mut head = Box::new(ListNode::new(0));\\n        let mut tail = &mut head;\\n        while (l1 != None || l2 != None || carry != 0) { \\n            let val = match l1 {\\n                Some(n) => {l1=n.next; n.val},\\n                None => 0\\n            } + match l2 {\\n                Some(n) => {l2=n.next; n.val},\\n                None => 0\\n            } + carry;\\n            carry = val / 10;\\n            tail.next = Some(Box::new(ListNode::new(val%10)));\\n            tail = tail.next.as_mut().unwrap();\\n        }\\n        head.next\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn add_two_numbers(mut l1: Option<Box<ListNode>>, mut l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut carry = 0;\\n        let mut head = Box::new(ListNode::new(0));\\n        let mut tail = &mut head;\\n        while (l1 != None || l2 != None || carry != 0) { \\n            let val = match l1 {\\n                Some(n) => {l1=n.next; n.val},\\n                None => 0\\n            } + match l2 {\\n                Some(n) => {l2=n.next; n.val},\\n                None => 0\\n            } + carry;\\n            carry = val / 10;\\n            tail.next = Some(Box::new(ListNode::new(val%10)));\\n            tail = tail.next.as_mut().unwrap();\\n        }\\n        head.next\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1837470,
                "title": "add-two-numbers-93-02-python",
                "content": "**Runtime: 68 ms, faster than 93.02% of Python3 online submissions for Add Two Numbers.**\\n\\n**Memory Usage: 13.9 MB, less than 65.79% of Python3 online submissions for Add Two Numbers.**\\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1, l2):\\n        s1 = \\'\\'\\n        s2 = \\'\\'\\n        while l1 != None:\\n            s1 += str(l1.val)\\n            l1 = l1.next\\n        while l2 != None:\\n            s2 += str(l2.val)\\n            l2 = l2.next\\n        \\n        sum1 = int(s1[::-1]) + int(s2[::-1])\\n        sum1 = str(sum1)\\n        head = ListNode(int(sum1[0]))\\n        for i in sum1[1:]:\\n            node = ListNode(int(i))\\n            node.next = head\\n            head = node\\n        return head\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1, l2):\\n        s1 = \\'\\'\\n        s2 = \\'\\'\\n        while l1 != None:\\n            s1 += str(l1.val)\\n            l1 = l1.next\\n        while l2 != None:\\n            s2 += str(l2.val)\\n            l2 = l2.next\\n        \\n        sum1 = int(s1[::-1]) + int(s2[::-1])\\n        sum1 = str(sum1)\\n        head = ListNode(int(sum1[0]))\\n        for i in sum1[1:]:\\n            node = ListNode(int(i))\\n            node.next = head\\n            head = node\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 757577,
                "title": "why-is-nobody-doing-it-in-constant-space-cpp-o-1-extra-space",
                "content": "* **Almost everybody is making new list of sum. Is there any problem if we use the existing list as our ans? In this way we won\\'t be using any extra space.**\\n\\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* head1, ListNode* head2) {\\n        \\n        ListNode* l1 = head1, *l2 = head2, *ans;\\n        int extra = 0;\\n        int flag = 0;\\n        while(l1 || l2){\\n            int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;\\n            if(l1)l1->val = sum%10; // anyone (l1 or l2) could be the ans\\n            if(l2)l2->val = sum%10;\\n            extra = sum/10;\\n            if(l1)l1 = l1->next, flag = 1;\\n            if(l2)l2 = l2->next, flag = 2;\\n        }\\n        ans = flag == 1 ? head1 : head2;\\n        if(extra == 0)return ans;\\n        \\n        // if there is extra\\n        ListNode* temp = ans;\\n        while(temp->next)temp = temp->next; // go to the last node and add the extra\\n        temp->next = new ListNode(extra);\\n        \\n        return ans;\\n    }\\n};\\n```\\nPlease let me know if this is the right way or not!",
                "solutionTags": [
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* head1, ListNode* head2) {\\n        \\n        ListNode* l1 = head1, *l2 = head2, *ans;\\n        int extra = 0;\\n        int flag = 0;\\n        while(l1 || l2){\\n            int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;\\n            if(l1)l1->val = sum%10; // anyone (l1 or l2) could be the ans\\n            if(l2)l2->val = sum%10;\\n            extra = sum/10;\\n            if(l1)l1 = l1->next, flag = 1;\\n            if(l2)l2 = l2->next, flag = 2;\\n        }\\n        ans = flag == 1 ? head1 : head2;\\n        if(extra == 0)return ans;\\n        \\n        // if there is extra\\n        ListNode* temp = ans;\\n        while(temp->next)temp = temp->next; // go to the last node and add the extra\\n        temp->next = new ListNode(extra);\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1636,
                "title": "clean-c-solution-47ms",
                "content": "    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode node(0);\\n        ListNode* p1 = l1;\\n        ListNode* p2 = l2;\\n        ListNode* parent =&node;\\n        int more = 0;\\n        \\n        while (p1 || p2 || more) {\\n            int d1 = p1 ? p1->val : 0;\\n            int d2 = p2 ? p2->val : 0;\\n            if (p1) p1 = p1->next;\\n            if (p2) p2 = p2->next;\\n            more += d1 + d2;\\n            ListNode* node = new ListNode(more % 10);\\n            parent->next = node;\\n            parent = node;\\n            more /= 10;\\n        }\\n        \\n        return node.next;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode node(0);\\n        ListNode* p1 = l1;\\n        ListNode* p2 = l2;\\n        ListNode* parent =&node;\\n        int more = 0;\\n        \\n        while (p1 || p2 || more) {\\n            int d1 = p1 ? p1->val : 0;\\n            int d2 = p2 ? p2->val : 0;\\n            if (p1) p1 = p1->next;\\n            if (p2) p2 = p2->next;\\n            more += d1 + d2;\\n            ListNode* node = new ListNode(more % 10);\\n            parent->next = node;\\n            parent = node;\\n            more /= 10;\\n        }\\n        \\n        return node.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1645,
                "title": "a-python-solution",
                "content": "Update 2015-04-08: updated with some refactoring\\n\\n    # Definition for singly-linked list.\\n    # class ListNode:\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.next = None\\n    \\n    class Solution:\\n        # @return a ListNode\\n        def addTwoNumbers(self, l1, l2):\\n            head = temp = ListNode(0)\\n            carry = 0\\n\\n            while l1 or l2 or carry:\\n                temp1 = l1.val if l1 else 0\\n                temp2 = l2.val if l2 else 0\\n                tempSum = temp1 + temp2 + carry\\n                \\n                temp.next = ListNode(tempSum % 10)\\n                temp = temp.next\\n                carry = tempSum // 10\\n    \\n                if l1:\\n                    l1 = l1.next\\n                if l2:\\n                    l2 = l2.next\\n    \\n            return head.next",
                "solutionTags": [],
                "code": "Update 2015-04-08: updated with some refactoring\\n\\n    # Definition for singly-linked list.\\n    # class ListNode:\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.next = None\\n    \\n    class Solution:\\n        # @return a ListNode\\n        def addTwoNumbers(self, l1, l2):\\n            head = temp = ListNode(0)\\n            carry = 0\\n\\n            while l1 or l2 or carry:\\n                temp1 = l1.val if l1 else 0\\n                temp2 = l2.val if l2 else 0\\n                tempSum = temp1 + temp2 + carry\\n                \\n                temp.next = ListNode(tempSum % 10)\\n                temp = temp.next\\n                carry = tempSum // 10\\n    \\n                if l1:\\n                    l1 = l1.next\\n                if l2:\\n                    l2 = l2.next\\n    \\n            return head.next",
                "codeTag": "Java"
            },
            {
                "id": 2717421,
                "title": "js-very-easy-solution",
                "content": "![image](https://assets.leetcode.com/users/images/f41a20cf-3c6d-4e62-b062-bc89a15b17fc_1666081269.7364519.png)\\n```\\nfunction Node(val){\\n    this.val = val;\\n    this.next = null;\\n};\\n\\nfunction LinkedList(){\\n    this.head = null;\\n    this.insert = function(val){\\n        let node = new Node(val);\\n        if(this.head === null){\\n            this.head = node;\\n        }else{\\n            node.next = this.head;\\n            this.head = node;\\n        }\\n    }\\n}\\n\\nvar addToArrayForm = function(num, num2) {\\n    return String(BigInt(num.join(\\'\\')) + BigInt(num2.join(\\'\\'))).split(\\'\\');\\n};\\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const number1 = [];\\n    const number2 = [];\\n    const output = new LinkedList();\\n    \\n    const loop = (list, arr) => {\\n        arr.push(list.val);\\n        if (list?.next) {\\n            loop(list.next, arr);\\n        }\\n    }\\n\\n    loop(l1, number1);\\n    loop(l2, number2);\\n\\n    number1.reverse();\\n    number2.reverse();\\n\\n    const newNumber = addToArrayForm(number1, number2).reverse();\\n\\n    while(newNumber.length) {\\n        output.insert(newNumber.pop());\\n    }\\n\\n    return output.head;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction Node(val){\\n    this.val = val;\\n    this.next = null;\\n};\\n\\nfunction LinkedList(){\\n    this.head = null;\\n    this.insert = function(val){\\n        let node = new Node(val);\\n        if(this.head === null){\\n            this.head = node;\\n        }else{\\n            node.next = this.head;\\n            this.head = node;\\n        }\\n    }\\n}\\n\\nvar addToArrayForm = function(num, num2) {\\n    return String(BigInt(num.join(\\'\\')) + BigInt(num2.join(\\'\\'))).split(\\'\\');\\n};\\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const number1 = [];\\n    const number2 = [];\\n    const output = new LinkedList();\\n    \\n    const loop = (list, arr) => {\\n        arr.push(list.val);\\n        if (list?.next) {\\n            loop(list.next, arr);\\n        }\\n    }\\n\\n    loop(l1, number1);\\n    loop(l2, number2);\\n\\n    number1.reverse();\\n    number2.reverse();\\n\\n    const newNumber = addToArrayForm(number1, number2).reverse();\\n\\n    while(newNumber.length) {\\n        output.insert(newNumber.pop());\\n    }\\n\\n    return output.head;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1888681,
                "title": "100-fastest-typescript-solution",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null, carry = 0): ListNode | null {\\n  if (l1 || l2) {\\n    const next1 = getNextNode(l1)\\n    const next2 = getNextNode(l2)\\n    const sum = getNodeValue(l1) + getNodeValue(l2) + carry\\n    const nextCarry = sum >= 10 ? 1 : 0\\n    \\n    return new ListNode(sum % 10, addTwoNumbers(next1, next2, nextCarry))\\n  } else if (carry) { return new ListNode(1) }\\n    \\n  return null\\n}\\n\\nfunction getNodeValue(node: ListNode | null): number {\\n  return node && node.val ? node.val : 0\\n}\\n\\nfunction getNextNode(node: ListNode | null): ListNode | null {\\n  return node && node.next ? node.next : null\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null, carry = 0): ListNode | null {\\n  if (l1 || l2) {\\n    const next1 = getNextNode(l1)\\n    const next2 = getNextNode(l2)\\n    const sum = getNodeValue(l1) + getNodeValue(l2) + carry\\n    const nextCarry = sum >= 10 ? 1 : 0\\n    \\n    return new ListNode(sum % 10, addTwoNumbers(next1, next2, nextCarry))\\n  } else if (carry) { return new ListNode(1) }\\n    \\n  return null\\n}\\n\\nfunction getNodeValue(node: ListNode | null): number {\\n  return node && node.val ? node.val : 0\\n}\\n\\nfunction getNextNode(node: ListNode | null): ListNode | null {\\n  return node && node.next ? node.next : null\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1665036,
                "title": "python-solution-for-add-two-numbers",
                "content": "\\n```\\n\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n        \\nclass Solution:\\n    def traverse(self,nodes):\\n        list1 = []\\n        while nodes is not None:\\n            list1.append(nodes.val)\\n            nodes = nodes.next\\n        return list1\\n    \\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      \\n        val1 = int(\\'\\'.join(str(i).strip() for i in self.traverse(l1)[::-1]))\\n        val2 = int(\\'\\'.join(str(i).strip() for i in self.traverse(l2)[::-1]))\\n        sum_val = list(map(int, str(val1+val2)[::-1]))\\n        out = None\\n        head = None\\n     \\n        for item in sum_val:\\n            if out is not None:\\n                out.next =  ListNode(item,None)\\n                out = out.next\\n        \\n            else:\\n                out = ListNode(item,None)\\n                head = out\\n\\n                 \\n        return head",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n```\\n\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n        \\nclass Solution:\\n    def traverse(self,nodes):\\n        list1 = []\\n        while nodes is not None:\\n            list1.append(nodes.val)\\n            nodes = nodes.next\\n        return list1\\n    \\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      \\n        val1 = int(\\'\\'.join(str(i).strip() for i in self.traverse(l1)[::-1]))\\n        val2 = int(\\'\\'.join(str(i).strip() for i in self.traverse(l2)[::-1]))\\n        sum_val = list(map(int, str(val1+val2)[::-1]))\\n        out = None\\n        head = None\\n     \\n        for item in sum_val:\\n            if out is not None:\\n                out.next =  ListNode(item,None)\\n                out = out.next\\n        \\n            else:\\n                out = ListNode(item,None)\\n                head = out\\n\\n                 \\n        return head",
                "codeTag": "Java"
            },
            {
                "id": 888662,
                "title": "javascript",
                "content": "```js\\nvar addTwoNumbers = function(l1, l2) {\\n    const d = new ListNode();\\n    let curr = d;\\n    let carry = 0;\\n    while (l1 || l2 || carry) {\\n        const sum = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + carry;\\n        carry = sum / 10 | 0;\\n        curr.next = new ListNode(sum % 10);\\n        if (l1) l1 = l1.next;\\n        if (l2) l2 = l2.next;\\n        curr = curr.next;\\n    }\\n    return d.next;\\n};\\n```",
                "solutionTags": [],
                "code": "```js\\nvar addTwoNumbers = function(l1, l2) {\\n    const d = new ListNode();\\n    let curr = d;\\n    let carry = 0;\\n    while (l1 || l2 || carry) {\\n        const sum = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + carry;\\n        carry = sum / 10 | 0;\\n        curr.next = new ListNode(sum % 10);\\n        if (l1) l1 = l1.next;\\n        if (l2) l2 = l2.next;\\n        curr = curr.next;\\n    }\\n    return d.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 330581,
                "title": "c-stack-use-after-scope-error",
                "content": "Why do I get the following error when assigning `p->next` to `&l`? \\n\\n```\\n=================================================================\\n==29==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffddf998318 at pc 0x00000040f45e bp 0x7ffddf9980a0 sp 0x7ffddf998098\\nREAD of size 8 at 0x7ffddf998318 thread T0\\n    #1 0x7f54424b72e0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x202e0)\\n\\nAddress 0x7ffddf998318 is located in stack of thread T0 at offset 552 in frame\\n```\\n\\n\\nMy code:\\n```\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n\\t\\n        int carry = 0;\\n        int sum = 0; \\n        \\n        ListNode preHead(0); \\n        ListNode* p = &preHead; \\n\\n        while (l1 || l2 || carry)\\n        {\\n            sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + carry; \\n            \\n            carry = sum / 10;\\n            \\n            //p->next = new ListNode(sum % 10);\\n            ListNode l(sum % 10); \\n            p->next = &l; \\n            p = p->next; \\n            \\n            if (l1) l1 = l1->next; \\n            if (l2) l2 = l2->next;             \\n        }\\n        \\n        return p->next; \\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n=================================================================\\n==29==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffddf998318 at pc 0x00000040f45e bp 0x7ffddf9980a0 sp 0x7ffddf998098\\nREAD of size 8 at 0x7ffddf998318 thread T0\\n    #1 0x7f54424b72e0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x202e0)\\n\\nAddress 0x7ffddf998318 is located in stack of thread T0 at offset 552 in frame\\n```\n```\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n\\t\\n        int carry = 0;\\n        int sum = 0; \\n        \\n        ListNode preHead(0); \\n        ListNode* p = &preHead; \\n\\n        while (l1 || l2 || carry)\\n        {\\n            sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + carry; \\n            \\n            carry = sum / 10;\\n            \\n            //p->next = new ListNode(sum % 10);\\n            ListNode l(sum % 10); \\n            p->next = &l; \\n            p = p->next; \\n            \\n            if (l1) l1 = l1->next; \\n            if (l2) l2 = l2->next;             \\n        }\\n        \\n        return p->next; \\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 311022,
                "title": "cpp-beats-100",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* a, ListNode* b) {\\n        int carry = 0;\\n        ListNode *result = nullptr, *temp = nullptr, *prev = nullptr;\\n        while(a or b){\\n            int sum = carry + (a ? a->val : 0) + (b ? b->val : 0);\\n            carry = sum >= 10;\\n            sum %= 10;\\n            temp = new ListNode(sum);\\n            if(!prev) result = temp;\\n            else prev->next = temp;\\n            prev = temp;\\n            a = a ? a->next : nullptr;\\n            b = b ? b->next : nullptr;\\n        }\\n        if(carry) temp->next = new ListNode(carry);\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* a, ListNode* b) {\\n        int carry = 0;\\n        ListNode *result = nullptr, *temp = nullptr, *prev = nullptr;\\n        while(a or b){\\n            int sum = carry + (a ? a->val : 0) + (b ? b->val : 0);\\n            carry = sum >= 10;\\n            sum %= 10;\\n            temp = new ListNode(sum);\\n            if(!prev) result = temp;\\n            else prev->next = temp;\\n            prev = temp;\\n            a = a ? a->next : nullptr;\\n            b = b ? b->next : nullptr;\\n        }\\n        if(carry) temp->next = new ListNode(carry);\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1056,
                "title": "scala-solution",
                "content": "Not defining a custom ListNode class; standard Lists are fine.\\n```\\ndef addTwoNumbers(l1: List[Int], l2: List[Int]): List[Int] = {\\n\\n  def addWithCarry(lists: (List[Int], List[Int]), carry: Int) = lists match {\\n    case (Nil, Nil) => if (carry == 0) Nil else List(carry)\\n    case (x :: xtail, Nil) => addHeads(x, 0, carry, (xtail, Nil))\\n    case (Nil, y :: ytail) => addHeads(0, y, carry, (Nil, ytail))\\n    case (x :: xtail, y :: ytail) => addHeads(x, y, carry, (xtail, ytail))\\n  }\\n\\n  def addHeads(x: Int, y: Int, carry: Int, tails: (List[Int], List[Int])): List[Int] = {\\n    val sum = x + y + carry\\n    sum % 10 :: addWithCarry(tails, sum / 10)\\n  }\\n\\n  addWithCarry((l1, l2), 0)\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\ndef addTwoNumbers(l1: List[Int], l2: List[Int]): List[Int] = {\\n\\n  def addWithCarry(lists: (List[Int], List[Int]), carry: Int) = lists match {\\n    case (Nil, Nil) => if (carry == 0) Nil else List(carry)\\n    case (x :: xtail, Nil) => addHeads(x, 0, carry, (xtail, Nil))\\n    case (Nil, y :: ytail) => addHeads(0, y, carry, (Nil, ytail))\\n    case (x :: xtail, y :: ytail) => addHeads(x, y, carry, (xtail, ytail))\\n  }\\n\\n  def addHeads(x: Int, y: Int, carry: Int, tails: (List[Int], List[Int])): List[Int] = {\\n    val sum = x + y + carry\\n    sum % 10 :: addWithCarry(tails, sum / 10)\\n  }\\n\\n  addWithCarry((l1, l2), 0)\\n}\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4081105,
                "title": "python-99-90-beats-easy-solution",
                "content": "**If you got help from this,... Plz Upvote .. it encourage me**\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummyHead = ListNode(0)\\n        curr = dummyHead\\n        carry = 0\\n        while l1 != None or l2 != None or carry != 0:\\n            l1Val = l1.val if l1 else 0\\n            l2Val = l2.val if l2 else 0\\n            columnSum = l1Val + l2Val + carry\\n            carry = columnSum // 10\\n            newNode = ListNode(columnSum % 10)\\n            curr.next = newNode\\n            curr = newNode\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n        return dummyHead.next\\n\\n\\n<!-- ========================================================= -->\\n# Long Approach to understand\\n<!-- Same Approach but diff way  -- 99.9% beats in Memory -->\\n\\n        newhead = ListNode(-1)\\n        temphead = newhead\\n        c = 0\\n\\n        while l1 and l2:\\n            cur_digit = l1.val + l2.val + c   # 25\\n\\n            if cur_digit >= 10:\\n                c = cur_digit // 10                 #2\\n                cur_digit = cur_digit % 10      #5\\n            else:\\n                c = 0\\n            \\n            new_node = ListNode(cur_digit)\\n            temphead.next = new_node\\n            temphead = new_node\\n        \\n            l1 = l1.next\\n            l2 = l2.next\\n        \\n        while l1:\\n            cur_digit = l1.val + c\\n            if cur_digit >= 10:\\n                c = cur_digit // 10                 #2\\n                cur_digit = cur_digit % 10      #5\\n            else:\\n                c = 0\\n            new_node = ListNode(cur_digit)\\n            temphead.next = new_node\\n            temphead = new_node\\n            l1 = l1.next\\n        \\n        while l2:\\n            cur_digit = l2.val + c\\n            if cur_digit >= 10:\\n                c = cur_digit // 10                 #2\\n                cur_digit = cur_digit % 10      #5\\n            else:\\n                c = 0\\n            new_node = ListNode(cur_digit)\\n            temphead.next = new_node\\n            temphead = new_node\\n            l2 = l2.next\\n        \\n        if c == 0:\\n            return newhead.next\\n        else:\\n            new_node = ListNode(c)\\n            temphead.next = new_node\\n            return newhead.next\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List",
                    "Math"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummyHead = ListNode(0)\\n        curr = dummyHead\\n        carry = 0\\n        while l1 != None or l2 != None or carry != 0:\\n            l1Val = l1.val if l1 else 0\\n            l2Val = l2.val if l2 else 0\\n            columnSum = l1Val + l2Val + carry\\n            carry = columnSum // 10\\n            newNode = ListNode(columnSum % 10)\\n            curr.next = newNode\\n            curr = newNode\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n        return dummyHead.next\\n\\n\\n<!-- ========================================================= -->\\n# Long Approach to understand\\n<!-- Same Approach but diff way  -- 99.9% beats in Memory -->\\n\\n        newhead = ListNode(-1)\\n        temphead = newhead\\n        c = 0\\n\\n        while l1 and l2:\\n            cur_digit = l1.val + l2.val + c   # 25\\n\\n            if cur_digit >= 10:\\n                c = cur_digit // 10                 #2\\n                cur_digit = cur_digit % 10      #5\\n            else:\\n                c = 0\\n            \\n            new_node = ListNode(cur_digit)\\n            temphead.next = new_node\\n            temphead = new_node\\n        \\n            l1 = l1.next\\n            l2 = l2.next\\n        \\n        while l1:\\n            cur_digit = l1.val + c\\n            if cur_digit >= 10:\\n                c = cur_digit // 10                 #2\\n                cur_digit = cur_digit % 10      #5\\n            else:\\n                c = 0\\n            new_node = ListNode(cur_digit)\\n            temphead.next = new_node\\n            temphead = new_node\\n            l1 = l1.next\\n        \\n        while l2:\\n            cur_digit = l2.val + c\\n            if cur_digit >= 10:\\n                c = cur_digit // 10                 #2\\n                cur_digit = cur_digit % 10      #5\\n            else:\\n                c = 0\\n            new_node = ListNode(cur_digit)\\n            temphead.next = new_node\\n            temphead = new_node\\n            l2 = l2.next\\n        \\n        if c == 0:\\n            return newhead.next\\n        else:\\n            new_node = ListNode(c)\\n            temphead.next = new_node\\n            return newhead.next\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467285,
                "title": "c-easy-to-understand-clear-solution",
                "content": "/*is question me apko dia ha do linked list reverse order me bola h unka sum nikal ke return kro for example linked lsit h \\nL1 = [2,4,3]\\nL2 = [5,6,7,9] \\nek sum or ek carry lelo or usme dono node ko sum krao sum agar 10 se bda h to carry me bhi value daldo or usko new node bnake store krado \\nto abb ye hmari traversing 3  condition tak chlegi l1 null na ho jae l2 null na hojae or apka carry bhi 0 na ho jae tb tk chlao \\n\\n*/\\n\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n\\t\\n        ListNode* dummy = new ListNode();\\n        ListNode* temp = dummy ;\\n        int carry = 0;\\n        while(l1!= NULL || l2!= NULL || carry){\\n            int sum = 0;\\n\\t\\t\\t\\n             if(l1 != NULL){\\n                  sum = sum + l1->val;\\n                 l1 = l1->next;\\n             }\\n\\t\\t\\t \\n            if(l2 != NULL){\\n                 sum = sum + l2->val;\\n                 l2 = l2->next;\\n             }\\n\\t\\t\\t \\n            sum = sum + carry;\\n            carry = sum/10;\\n            ListNode*node = new ListNode(sum%10);\\n\\t\\t\\t\\n            temp->next= node;\\n            temp= temp->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\n",
                "solutionTags": [
                    "C",
                    "Linked List",
                    "Recursion"
                ],
                "code": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n\\t\\n        ListNode* dummy = new ListNode();\\n        ListNode* temp = dummy ;\\n        int carry = 0;\\n        while(l1!= NULL || l2!= NULL || carry){\\n            int sum = 0;\\n\\t\\t\\t\\n             if(l1 != NULL){\\n                  sum = sum + l1->val;\\n                 l1 = l1->next;\\n             }",
                "codeTag": "Java"
            },
            {
                "id": 1784472,
                "title": "python-3-simple-solution-that-was-asked-in-real-interview",
                "content": "**Suggestions to make it better are always welcomed.**\\n\\nDon\\'t take this question lightly. This was one of the questions when I was interviewing actively.\\n\\nMy code at that time was optimal but very long compared to what I have now.\\nDuring my interview, my solution had 3 while loops:\\n1. while l1 and l2\\n2. while l1\\n3. while l2\\n\\nBut, in below solution, there\\'s only 1 while loop:\\n1. while l1 or l2\\n\\nHaving **and** vs **or** operator can make your code short or long. So, think thoroughly. Yes, we can make below code couple of lines shorter if I change the while loop as below:\\n1. while l1 or l2 or carryOver\\n\\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        carryOver = 0\\n        result = ListNode(-1)\\n        resultTail = result\\n        \\n        while l1 or l2:\\n            total = 0\\n            if l1: \\n                total += l1.val\\n                l1 = l1.next\\n            if l2: \\n                total += l2.val\\n                l2 = l2.next\\n            \\n            total += carryOver\\n            carryOver, remainder = divmod(total, 10)\\n            resultTail.next = ListNode(remainder)\\n            resultTail = resultTail.next\\n            \\n        if carryOver > 0:\\n            resultTail.next = ListNode(carryOver)\\n            \\n        return result.next\\n```\\n\\n**I hope that you\\'ve found this useful.\\nIn that case, please upvote. It only motivates me to write more such posts\\uD83D\\uDE03**",
                "solutionTags": [
                    "Python3",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        carryOver = 0\\n        result = ListNode(-1)\\n        resultTail = result\\n        \\n        while l1 or l2:\\n            total = 0\\n            if l1: \\n                total += l1.val\\n                l1 = l1.next\\n            if l2: \\n                total += l2.val\\n                l2 = l2.next\\n            \\n            total += carryOver\\n            carryOver, remainder = divmod(total, 10)\\n            resultTail.next = ListNode(remainder)\\n            resultTail = resultTail.next\\n            \\n        if carryOver > 0:\\n            resultTail.next = ListNode(carryOver)\\n            \\n        return result.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1695252,
                "title": "optimized-c-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* dummy = new ListNode(0) , *curr;\\n        curr = dummy;\\n        while(l1 || l2 || carry){\\n            if(l1){\\n                carry += l1->val;\\n                l1 = l1->next;\\n            }\\n            if(l2){\\n                carry += l2->val;\\n                l2 = l2->next;\\n            }\\n            curr->next = new ListNode(carry % 10);\\n            curr = curr->next;\\n            carry /= 10;\\n        }\\n        return dummy->next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* dummy = new ListNode(0) , *curr;\\n        curr = dummy;\\n        while(l1 || l2 || carry){\\n            if(l1){\\n                carry += l1->val;\\n                l1 = l1->next;\\n            }\\n            if(l2){\\n                carry += l2->val;\\n                l2 = l2->next;\\n            }\\n            curr->next = new ListNode(carry % 10);\\n            curr = curr->next;\\n            carry /= 10;\\n        }\\n        return dummy->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1636945,
                "title": "python3-o-1-space-1-pass-optimal-beats-100",
                "content": "The idea here is to treat l1 as the linked list we want to return. The only problem is if l2 is longer than l1, this will cause us to have to create new nodes for l1. However, an idea to avoid that is to actually measure the lengths prior to that. But we don\\'t want to do that since it will require us to iterate over the lists twice.\\n**The trick:** Let l1 be the list we will return, and keep replacing values on l1. `if not l1.next and l2: l1.next, l2.next = l2.next, l1.next` means that whenever we reach the tail of l1, but did not reach the end of l2 yet, we will swap the links so that l1 becomes the longer list.\\n\\nBelow is the code, let me know if you have any questions!\\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        carry, head = 0, l1\\n        while l1 or l2:\\n            if not l1.next and l2: l1.next, l2.next = l2.next, l1.next\\n            \\n            val1 = l1.val if l1 else 0\\n            val2 = l2.val if l2 else 0\\n            \\n            carry, l1.val = divmod(val1 + val2 + carry, 10)\\n            \\n            prev = l1\\n            if l1: l1 = l1.next\\n            if l2: l2 = l2.next\\n                \\n        if carry: prev.next = ListNode(carry)\\n        return head\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        carry, head = 0, l1\\n        while l1 or l2:\\n            if not l1.next and l2: l1.next, l2.next = l2.next, l1.next\\n            \\n            val1 = l1.val if l1 else 0\\n            val2 = l2.val if l2 else 0\\n            \\n            carry, l1.val = divmod(val1 + val2 + carry, 10)\\n            \\n            prev = l1\\n            if l1: l1 = l1.next\\n            if l2: l2 = l2.next\\n                \\n        if carry: prev.next = ListNode(carry)\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1486136,
                "title": "python-listnode-explained-no-spoilers-beats-97",
                "content": "The problem name should be changed to ***Figure out how the damn `ListNode` works*** because I spent the most time on that.\\n\\n *linked-list* is just a buzzword\\n\\n\\n\\n\\n```\\nclass ListNode:\\n\\t\"\"\" Given in the problem \"\"\"\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\t\\t\\ndef make_list_from_ListNode(l1):\\n    list1 = []\\n    while l1: #is not None\\n        list1.append(l1.val)\\n        l1 = l1.next\\n    return list1\\n\\ndef make_ListNode_from_list(a_list):\\n    head = l3 = ListNode(a_list[0])\\n    for x in a_list[1:]:\\n        l3.next = l3 = ListNode(x)\\n    return head\\n```\\n\\n\\n\\n\\n<details>\\n<summary>\\u2190 Expand to see the solution #SPOILER ALERT</summary>\\n\\nRuntime: **60 ms**\\nMemory Usage: **14.4 MB**\\n\\n```\\nclass Solution:\\n\\tdef addTwoNumbers(self, l1, l2):\\n\\t\\tlist1 = make_list_from_ListNode(l1)\\n\\t\\tlist2 = make_list_from_ListNode(l2)\\n\\n\\t\\t### RIGHT PAD WITH ZEROES\\n\\t\\tlen_list1 = len(list1)\\n\\t\\tlen_list2 = len(list2)\\n\\t\\tif len_list1 > len_list2:\\n\\t\\t\\tpad = len_list1 - len_list2\\n\\t\\t\\tlist2 = list2 + [0,] * pad\\n\\t\\telif len_list2 > len_list1:\\n\\t\\t\\tpad = len_list2 - len_list1\\n\\t\\t\\tlist1 = list1 + [0,] * pad\\n\\n\\t\\t### DO THE MATH\\n\\t\\td = 0\\n\\t\\tthe_sum = list()\\n\\t\\tfor x,y in zip(list1, list2):\\n\\t\\t\\td, m = divmod(x + y + d, 10)\\n\\t\\t\\tthe_sum.append(m)\\n\\t\\tif d != 0:\\n\\t\\t\\tthe_sum.append(d)\\n\\t\\treturn make_ListNode_from_list(the_sum)\\n```\\n\\n</details>\\n\\n\\n\\n<details>\\n<summary>\\u2190 Expand to see solution without extra functions </summary>\\n\\n## Here is another solution without functions\\nRuntime: **72 ms**\\nMemory Usage: **14.3 MB**\\nIt\\'s slower?  Only beats 62%.\\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1, l2):\\n        d = 0\\n        head = l3 = ListNode(\\'dummy\\')\\n        for _ in range(100):\\n            x, l1 = (0, None) if l1 is None else (l1.val, l1.next)\\n            y, l2 = (0, None) if l2 is None else (l2.val, l2.next)\\n            d, m = divmod(x + y + d, 10)\\n            l3.next = l3 = ListNode(m)\\n            if (l1 is None) and (l2 is None):\\n                break\\n        if d != 0:\\n            l3.next = l3 = ListNode(d)\\n        return head.next\\n```\\n\\n</details>\\n\\n#\\n**Explanation of multiple assignment \"shorthand\" in Python**: Pay attention to the order.\\n```\\n##head = l3 = ListNode(\\'dummy\\')\\ntemp = ListNode(\\'dummy\\')\\nhead = temp\\nl3 = temp\\n\\n##l3.next = l3 = ListNode(m)\\ntemp = ListNode(m)\\nl3.next = temp\\nl3 = temp\\n\\n# also equivalent\\nl3.next = ListNode(m)\\nl3 = l3.next\\n```\\n\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass ListNode:\\n\\t\"\"\" Given in the problem \"\"\"\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\t\\t\\ndef make_list_from_ListNode(l1):\\n    list1 = []\\n    while l1: #is not None\\n        list1.append(l1.val)\\n        l1 = l1.next\\n    return list1\\n\\ndef make_ListNode_from_list(a_list):\\n    head = l3 = ListNode(a_list[0])\\n    for x in a_list[1:]:\\n        l3.next = l3 = ListNode(x)\\n    return head\\n```\n```\\nclass Solution:\\n\\tdef addTwoNumbers(self, l1, l2):\\n\\t\\tlist1 = make_list_from_ListNode(l1)\\n\\t\\tlist2 = make_list_from_ListNode(l2)\\n\\n\\t\\t### RIGHT PAD WITH ZEROES\\n\\t\\tlen_list1 = len(list1)\\n\\t\\tlen_list2 = len(list2)\\n\\t\\tif len_list1 > len_list2:\\n\\t\\t\\tpad = len_list1 - len_list2\\n\\t\\t\\tlist2 = list2 + [0,] * pad\\n\\t\\telif len_list2 > len_list1:\\n\\t\\t\\tpad = len_list2 - len_list1\\n\\t\\t\\tlist1 = list1 + [0,] * pad\\n\\n\\t\\t### DO THE MATH\\n\\t\\td = 0\\n\\t\\tthe_sum = list()\\n\\t\\tfor x,y in zip(list1, list2):\\n\\t\\t\\td, m = divmod(x + y + d, 10)\\n\\t\\t\\tthe_sum.append(m)\\n\\t\\tif d != 0:\\n\\t\\t\\tthe_sum.append(d)\\n\\t\\treturn make_ListNode_from_list(the_sum)\\n```\n```\\nclass Solution:\\n    def addTwoNumbers(self, l1, l2):\\n        d = 0\\n        head = l3 = ListNode(\\'dummy\\')\\n        for _ in range(100):\\n            x, l1 = (0, None) if l1 is None else (l1.val, l1.next)\\n            y, l2 = (0, None) if l2 is None else (l2.val, l2.next)\\n            d, m = divmod(x + y + d, 10)\\n            l3.next = l3 = ListNode(m)\\n            if (l1 is None) and (l2 is None):\\n                break\\n        if d != 0:\\n            l3.next = l3 = ListNode(d)\\n        return head.next\\n```\n```\\n##head = l3 = ListNode(\\'dummy\\')\\ntemp = ListNode(\\'dummy\\')\\nhead = temp\\nl3 = temp\\n\\n##l3.next = l3 = ListNode(m)\\ntemp = ListNode(m)\\nl3.next = temp\\nl3 = temp\\n\\n# also equivalent\\nl3.next = ListNode(m)\\nl3 = l3.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 835499,
                "title": "concise-recursive-typescript-javascript-faster-than-100",
                "content": "Good runtime performance.. (112ms, better than 100% of Typescript submissions), poor memory usage. (43.1 MB, less than 25% of submissions)\\n\\nTypescript:\\n```\\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null, carryOver:number = 0): ListNode | null {\\n    if (l1 === null && l2 === null){\\n        return (carryOver === 0) ? null : new ListNode(carryOver);\\n    }\\n    \\n    const currentSum = (l1?.val || 0) + (l2?.val || 0) + carryOver;\\n    return new ListNode(\\n\\t\\tcurrentSum % 10, \\n\\t\\taddTwoNumbers(\\n\\t\\t\\tl1?.next||null, \\n\\t\\t\\tl2?.next||null, \\n\\t\\t\\t(currentSum/10) >> 0 // slightly faster than Math.floor(currentSum/10)\\n\\t\\t)\\n\\t);\\n}\\n```\\n\\nJavascript:\\n```\\nfunction addTwoNumbers(l1, l2, carryOver = 0) {\\n    if (l1 === null && l2 === null){\\n        return (carryOver === 0) ? null : new ListNode(carryOver);\\n    }\\n    \\n    const currentSum = (l1?.val || 0) + (l2?.val || 0) + carryOver;\\n    return new ListNode(\\n\\t\\tcurrentSum % 10, \\n\\t\\taddTwoNumbers(\\n\\t\\t\\tl1?.next||null, \\n\\t\\t\\tl2?.next||null, \\n\\t\\t\\t(currentSum/10) >> 0\\n\\t\\t)\\n\\t);\\n}",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Recursion"
                ],
                "code": "```\\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null, carryOver:number = 0): ListNode | null {\\n    if (l1 === null && l2 === null){\\n        return (carryOver === 0) ? null : new ListNode(carryOver);\\n    }\\n    \\n    const currentSum = (l1?.val || 0) + (l2?.val || 0) + carryOver;\\n    return new ListNode(\\n\\t\\tcurrentSum % 10, \\n\\t\\taddTwoNumbers(\\n\\t\\t\\tl1?.next||null, \\n\\t\\t\\tl2?.next||null, \\n\\t\\t\\t(currentSum/10) >> 0 // slightly faster than Math.floor(currentSum/10)\\n\\t\\t)\\n\\t);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 412727,
                "title": "rust-solution-0ms",
                "content": "Hi guys, this is my Rust solution.\\nWhat do you think?\\nLet me know if you have some recomendations or ideas about how I can improve this code.\\n```\\n// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\n\\nimpl Solution {\\n    pub fn add_two_numbers(\\n        l1: Option<Box<ListNode>>,\\n        l2: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        let mut dummy_head = ListNode::new(0);\\n        let mut current = &mut dummy_head;\\n        let mut p = l1;\\n        let mut q = l2;\\n\\n        let mut carry: i32 = 0;\\n\\n        while p != None || q != None {\\n            let sum = match (&p, &q) {\\n                (Some(l1), Some(l2)) => l1.val + l2.val + carry,\\n                (Some(l1), None) => l1.val + carry,\\n                (None, Some(l2)) => l2.val + carry,\\n                (None, None) => carry,\\n            };\\n\\n            carry = sum / 10;\\n            current.next = Some(Box::new(ListNode::new(sum % 10)));\\n            current = current.next.as_mut().unwrap();\\n\\n            p = if p != None { p.unwrap().next } else { p };\\n            q = if q != None { q.unwrap().next } else { q };\\n        }\\n        if carry > 0 {\\n            current.next = Some(Box::new(ListNode::new(carry)));\\n        }\\n\\n        dummy_head.next\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\n\\nimpl Solution {\\n    pub fn add_two_numbers(\\n        l1: Option<Box<ListNode>>,\\n        l2: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        let mut dummy_head = ListNode::new(0);\\n        let mut current = &mut dummy_head;\\n        let mut p = l1;\\n        let mut q = l2;\\n\\n        let mut carry: i32 = 0;\\n\\n        while p != None || q != None {\\n            let sum = match (&p, &q) {\\n                (Some(l1), Some(l2)) => l1.val + l2.val + carry,\\n                (Some(l1), None) => l1.val + carry,\\n                (None, Some(l2)) => l2.val + carry,\\n                (None, None) => carry,\\n            };\\n\\n            carry = sum / 10;\\n            current.next = Some(Box::new(ListNode::new(sum % 10)));\\n            current = current.next.as_mut().unwrap();\\n\\n            p = if p != None { p.unwrap().next } else { p };\\n            q = if q != None { q.unwrap().next } else { q };\\n        }\\n        if carry > 0 {\\n            current.next = Some(Box::new(ListNode::new(carry)));\\n        }\\n\\n        dummy_head.next\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 235796,
                "title": "java-solution-and-follow-up-solution-with-explanation",
                "content": "Solution: \\nBecause digits of the number are stored in reverse order, we can add each digit from the left to right.\\nBut we need to pay attention to a situation that the sum is bigger than 9. So, we can set a variable-carry to record if there is a sum bigger than 9.\\nAfter add each node, don\\'t forget to check if carry > 0, we need to add one more node into our output.\\nTC: O(n)\\nSC: O(1), space complexity means extra space. The data structure that needed to be returned is not the extra space.\\n\\n```\\npublic ListNode add(ListNode l1, ListNode l2) {\\n    if (l1 == null) {\\n        return l2;\\n    } else if (l2 == null) {\\n        return l1;\\n    }\\n    int sum = 0;\\n    int carry = 0;\\n    ListNode dummy = new ListNode(0);\\n    ListNode curr = dummy;\\n    while (l1 != null || l2 != null) {\\n        int x = l1 == null ? 0 : l1.val;\\n        int y = l2 == null ? 0 : l2.val;\\n        sum = x + y + carry;\\n        carry = sum / 10;\\n        curr.next = new ListNode(sum % 10);\\n        curr = curr.next;\\n        if (l1 != null) {\\n           l1 = l1.next;\\n        }\\n        if (l2 != null) {\\n           l2 = l2.next;\\n        }\\n    }\\n    if (carry > 0) {\\n        curr.next = new ListNode(carry);\\n    }\\n    return dummy.next;\\n}\\n```\\n#### **Follow up:  \\n#### What if the the digits in the linked list are stored in non-reversed order? **\\nFor example:\\n465 + 342 = 807\\n4 --> 6 --> 5 --> null\\n3 --> 4 --> 2--> null\\n\\nSolution:  \\nWe need to add numbers from the most right digit to left digit. \\nCompared with last question, we can reverse two lists and add them.\\nAnd reverse our output is correct answer.\\n\\nTC: O(n)\\nSC: O(1)\\n```\\npublic ListNode add(ListNode l1, ListNode l2) {\\n    if (l1 == null) {\\n        return l2;\\n    } else if (l2 == null) {\\n        return l1;\\n    }\\n    l1 = reverse(l1);\\n    l2 = reverse(l2);\\n    int sum = 0;\\n    int carry = 0;\\n    ListNode dummy = new ListNode(0);\\n    ListNode curr = dummy;\\n    while (l1 != null || l2 != null) {\\n        int x = l1 == null ? 0 : l1.val;\\n        int y = l2 == null ? 0 : l2.val;\\n        sum = x + y + carry;\\n        carry = sum / 10;\\n        curr.next = new ListNode(sum % 10);\\n        curr = curr.next;\\n        if (l1 != null) {\\n           l1 = l1.next;\\n        }\\n        if (l2 != null) {\\n           l2 = l2.next;\\n        }\\n    }\\n    if (carry > 0) {\\n        curr.next = new ListNode(carry);\\n    }\\n    return reverse(dummy.next);\\n}\\nprivate ListNode reverse(ListNode head) {\\n    if (head == null || head.next == null) {\\n        return head;\\n    }\\n    ListNode prev = null;\\n    ListNode curr = head;\\n    while (curr != null) {\\n        ListNode next = curr.next;\\n        curr.next = prev;\\n        prev = curr;\\n        curr = next;\\n    }\\n    return prev;\\n} \\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\npublic ListNode add(ListNode l1, ListNode l2) {\\n    if (l1 == null) {\\n        return l2;\\n    } else if (l2 == null) {\\n        return l1;\\n    }\\n    int sum = 0;\\n    int carry = 0;\\n    ListNode dummy = new ListNode(0);\\n    ListNode curr = dummy;\\n    while (l1 != null || l2 != null) {\\n        int x = l1 == null ? 0 : l1.val;\\n        int y = l2 == null ? 0 : l2.val;\\n        sum = x + y + carry;\\n        carry = sum / 10;\\n        curr.next = new ListNode(sum % 10);\\n        curr = curr.next;\\n        if (l1 != null) {\\n           l1 = l1.next;\\n        }\\n        if (l2 != null) {\\n           l2 = l2.next;\\n        }\\n    }\\n    if (carry > 0) {\\n        curr.next = new ListNode(carry);\\n    }\\n    return dummy.next;\\n}\\n```\n```\\npublic ListNode add(ListNode l1, ListNode l2) {\\n    if (l1 == null) {\\n        return l2;\\n    } else if (l2 == null) {\\n        return l1;\\n    }\\n    l1 = reverse(l1);\\n    l2 = reverse(l2);\\n    int sum = 0;\\n    int carry = 0;\\n    ListNode dummy = new ListNode(0);\\n    ListNode curr = dummy;\\n    while (l1 != null || l2 != null) {\\n        int x = l1 == null ? 0 : l1.val;\\n        int y = l2 == null ? 0 : l2.val;\\n        sum = x + y + carry;\\n        carry = sum / 10;\\n        curr.next = new ListNode(sum % 10);\\n        curr = curr.next;\\n        if (l1 != null) {\\n           l1 = l1.next;\\n        }\\n        if (l2 != null) {\\n           l2 = l2.next;\\n        }\\n    }\\n    if (carry > 0) {\\n        curr.next = new ListNode(carry);\\n    }\\n    return reverse(dummy.next);\\n}\\nprivate ListNode reverse(ListNode head) {\\n    if (head == null || head.next == null) {\\n        return head;\\n    }\\n    ListNode prev = null;\\n    ListNode curr = head;\\n    while (curr != null) {\\n        ListNode next = curr.next;\\n        curr.next = prev;\\n        prev = curr;\\n        curr = next;\\n    }\\n    return prev;\\n} \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1496,
                "title": "two-python-solutions-one-recursion-and-another-o-1-space",
                "content": "    # Definition for singly-linked list.\\n    # class ListNode(object):\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.next = None\\n    \\n    class Solution(object):\\n        def addTwoNumbers(self, l1, l2, tmp=0):\\n            \"\"\"\\n            :type l1: ListNode\\n            :type l2: ListNode\\n            :rtype: ListNode\\n            \"\"\"\\n            #\\u8f83\\u5c11\\u7684\\u4ee3\\u7801\\uff08\\u9012\\u5f52\\uff09\\u4f46\\u662f\\u8f83\\u4f4e\\u7684\\u6548\\u7387\\u548c\\u8f83\\u591a\\u7684\\u7a7a\\u95f4\\n            # if not(tmp or l1 or l2):\\n            #     return None\\n            # l1 = l1 or ListNode(0)\\n            # l2 = l2 or ListNode(0)\\n            # r_node = ListNode((l1.val + l2.val + tmp)%10)\\n            # tmp = (l1.val + l2.val + tmp)/10\\n            # r_node.next = self.addTwoNumbers(l1.next,l2.next,tmp)\\n            # return r_node\\n            \\n            #\\u8f83\\u591a\\u7684\\u4ee3\\u7801\\u4f46\\u662f\\u8f83\\u9ad8\\u7684\\u6548\\u7387\\u548c\\u8f83\\u5c11\\u7684\\u7a7a\\u95f4\\uff08\\u539f\\u5730\\uff09\\n            tmp, l1.val = divmod(l1.val + l2.val, 10)\\n            r = l1\\n            \\n            while (l1.next and l2.next):\\n                tmp, l1.next.val = divmod(l1.next.val + l2.next.val + tmp, 10)\\n                l1 = l1.next\\n                l2 = l2.next\\n            if l2.next:\\n                l1.next = l2.next\\n            while l1.next and tmp:\\n                tmp, l1.next.val = divmod(l1.next.val + tmp, 10)\\n                l1 = l1.next\\n            if tmp:\\n                l1.next = ListNode(1)\\n            return r",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "    # Definition for singly-linked list.\\n    # class ListNode(object):\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.next = None\\n    \\n    class Solution(object):\\n        def addTwoNumbers(self, l1, l2, tmp=0):\\n            \"\"\"\\n            :type l1: ListNode\\n            :type l2: ListNode\\n            :rtype: ListNode\\n            \"\"\"\\n            #\\u8f83\\u5c11\\u7684\\u4ee3\\u7801\\uff08\\u9012\\u5f52\\uff09\\u4f46\\u662f\\u8f83\\u4f4e\\u7684\\u6548\\u7387\\u548c\\u8f83\\u591a\\u7684\\u7a7a\\u95f4\\n            # if not(tmp or l1 or l2):\\n            #     return None\\n            # l1 = l1 or ListNode(0)\\n            # l2 = l2 or ListNode(0)\\n            # r_node = ListNode((l1.val + l2.val + tmp)%10)\\n            # tmp = (l1.val + l2.val + tmp)/10\\n            # r_node.next = self.addTwoNumbers(l1.next,l2.next,tmp)\\n            # return r_node\\n            \\n            #\\u8f83\\u591a\\u7684\\u4ee3\\u7801\\u4f46\\u662f\\u8f83\\u9ad8\\u7684\\u6548\\u7387\\u548c\\u8f83\\u5c11\\u7684\\u7a7a\\u95f4\\uff08\\u539f\\u5730\\uff09\\n            tmp, l1.val = divmod(l1.val + l2.val, 10)\\n            r = l1\\n            \\n            while (l1.next and l2.next):\\n                tmp, l1.next.val = divmod(l1.next.val + l2.next.val + tmp, 10)\\n                l1 = l1.next\\n                l2 = l2.next\\n            if l2.next:\\n                l1.next = l2.next\\n            while l1.next and tmp:\\n                tmp, l1.next.val = divmod(l1.next.val + tmp, 10)\\n                l1 = l1.next\\n            if tmp:\\n                l1.next = ListNode(1)\\n            return r",
                "codeTag": "Java"
            },
            {
                "id": 1170,
                "title": "java-recursion-solution",
                "content": "    public class Solution {\\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n            return helper(l1,l2,0);\\n        }\\n        private ListNode helper(ListNode l1, ListNode l2, int carry){\\n            if(l1 == null && l2 == null){\\n                if(carry == 1)  return new ListNode(1);\\n                else    return null;\\n            }\\n            \\n            int sum = carry;\\n            sum = (l1 == null)?sum:sum+l1.val;\\n            sum = (l2 == null)?sum:sum+l2.val;\\n            \\n            carry = sum / 10;\\n            sum = sum % 10;\\n            \\n            ListNode node = new ListNode(sum);\\n            if(l1 == null)  \\n                node.next = helper(l1,l2.next,carry);\\n            else if(l2 == null)\\n                node.next = helper(l1.next,l2,carry);\\n            else\\n                node.next = helper(l1.next,l2.next,carry);\\n            return node;\\n            \\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n            return helper(l1,l2,0);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3474788,
                "title": "beats-84-04-38-145-top-interview-question",
                "content": "# Intuition\\n*we need to perform addition of two numbers digit by digit. Since the numbers are given in the form of linked lists, we can start iterating over both linked lists and add the corresponding digits at each position.*\\n\\n*While adding two digits, we also need to take care of carrying over any excess to the next position. If the sum of two digits is greater than or equal to 10, then we carry over the excess to the next position and take the units digit of the sum as the result for the current position.*\\n\\n*We also need to consider the case where the two linked lists have different lengths. In this case, we can assume that the shorter linked list has zeros padded at the end to match the length of the longer linked list.*\\n\\n\\n# Approach\\nThis code is a Python implementation of the \"Add Two Numbers\" problem on LeetCode, which asks to add two non-negative integers represented by linked lists. \\n\\nThe linked list is implemented using the `ListNode` class, which has two attributes: `val` and `next`. The `val` attribute stores the value of the node, and the `next` attribute points to the next node in the linked list. \\n\\nThe `Solution` class contains a method called `addTwoNumbers` that takes in two linked lists `l1` and `l2` as input parameters and returns the sum of these two linked lists as a new linked list.\\n\\nThe first step of the `addTwoNumbers` method is to create a dummy node, which is used to store the result of the sum. The `tail` variable is used to keep track of the last node in the linked list, and the `carry` variable is used to keep track of the carry when adding two digits.\\n\\nThe while loop runs until all digits in both linked lists have been added and there is no carry left. In each iteration of the loop, the value of the current node is calculated as the sum of the corresponding digits in `l1` and `l2`, along with any carry from the previous calculation. If the sum is greater than or equal to 10, then the carry is set to 1, and the value of the current node is set to the units digit of the sum. \\n\\nA new node is created with the calculated value, and `tail.next` is set to this node. The `tail` variable is then updated to point to the new node.\\n\\nFinally, the `dummy.next` node is returned, which contains the result of the sum.\\n\\nOverall, this code uses linked list traversal to add two numbers digit by digit, taking care of carrying the excess of the sum to the next digit.\\n\\n# Complexity\\n- Time complexity:\\nO(max(m, n))\\n\\n- Space complexity:\\nO(max(m, n))\\n\\n\\n`Time Complexity: O(max(m, n))`, where `m` and `n` are the lengths of the input linked lists. The while loop iterates `max(m, n)` times, performing constant time operations in each iteration.\\n\\n`Space Complexity: O(max(m, n))`, since we create a new linked list to store the result, which can have at most `max(m, n) + 1` nodes. Additionally, we use a constant amount of extra space for the `dummy`, `tail`, and `carry` variables.\\n\\nTherefore, the overall time and space complexity of this solution is linear in the length of the input linked lists.\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummy = ListNode()\\n        tail, carry  = dummy, 0\\n\\n        while l1 or l2 or carry != 0:\\n            num1 = l1.val if l1 else 0\\n            num2 = l2.val if l2 else 0\\n\\n            nodeVal = num1 + num2 + carry\\n            carry = nodeVal // 10\\n            nodeVal = nodeVal % 10\\n            tail.next = ListNode(nodeVal)\\n\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n            tail = tail.next\\n\\n        return dummy.next\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummy = ListNode()\\n        tail, carry  = dummy, 0\\n\\n        while l1 or l2 or carry != 0:\\n            num1 = l1.val if l1 else 0\\n            num2 = l2.val if l2 else 0\\n\\n            nodeVal = num1 + num2 + carry\\n            carry = nodeVal // 10\\n            nodeVal = nodeVal % 10\\n            tail.next = ListNode(nodeVal)\\n\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n            tail = tail.next\\n\\n        return dummy.next\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3018273,
                "title": "java-beats-97-easy-solution-with-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode list1, ListNode list2) {\\n        ListNode dummy = new ListNode(); //creating a dummy node so that data can be stored\\n        ListNode temp = dummy;  //creating temp using dummy node\\n        int carry = 0 ;   //carry pointer\\n        while(list1!=null || list2!=null || carry!=0){ \\n            int sum=0;\\n            if(list1!=null){\\n                sum+=list1.val;\\n                list1 = list1.next;\\n            }\\n            if(list2!=null){\\n                sum+=list2.val;\\n                list2 = list2.next;\\n            }\\n            sum+=carry;  //adding carry to the sum\\n            carry=sum/10;  //getting carry by sum, for 16 it will be 1\\n\\n            ListNode ll = new ListNode(sum%10);  //adding leftover after taking carry in the new linked list, i.e from 16, 6 will be added in the linked list\\n            temp.next = ll;  //increasing the pointer of address so as to store the data\\n            temp = temp.next;  //continuing the iteration\\n        }\\n        return dummy.next; // dummy will be 0, therefore, we return dummy.next which is temp where first value is stored.\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode list1, ListNode list2) {\\n        ListNode dummy = new ListNode(); //creating a dummy node so that data can be stored\\n        ListNode temp = dummy;  //creating temp using dummy node\\n        int carry = 0 ;   //carry pointer\\n        while(list1!=null || list2!=null || carry!=0){ \\n            int sum=0;\\n            if(list1!=null){\\n                sum+=list1.val;\\n                list1 = list1.next;\\n            }\\n            if(list2!=null){\\n                sum+=list2.val;\\n                list2 = list2.next;\\n            }\\n            sum+=carry;  //adding carry to the sum\\n            carry=sum/10;  //getting carry by sum, for 16 it will be 1\\n\\n            ListNode ll = new ListNode(sum%10);  //adding leftover after taking carry in the new linked list, i.e from 16, 6 will be added in the linked list\\n            temp.next = ll;  //increasing the pointer of address so as to store the data\\n            temp = temp.next;  //continuing the iteration\\n        }\\n        return dummy.next; // dummy will be 0, therefore, we return dummy.next which is temp where first value is stored.\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2403519,
                "title": "simple-short-c-explained-solution-by-mr-coder",
                "content": "**\\u2190\\u2190Must Not Forget To Upvote this by clicking up side arrow\\nYOU CAN WATCH THIS VIDEO FOR THE BETTER EXPLANATION\\nRecommended**\\nhttps://www.youtube.com/watch?v=orixEIs3anc\\n\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    \\n    void sol(ListNode*l1, ListNode* l2,  ListNode* ans, int rem)\\n    { int tempans=0;\\n     ListNode *temp= new ListNode;\\n      if(l1-> next== NULL && l2-> next== NULL){\\n          tempans= l1->val+ l2-> val+ rem;\\n          rem= tempans/10;\\n          ans -> val= tempans%10;\\n          \\n        if(rem!=0)   \\n        { ans-> next= temp;\\n            temp-> val= rem;\\n        }\\n      }\\n     else if(l1-> next== NULL )\\n     {  \\n       ListNode *temp4= new ListNode;\\n          tempans= l1->val+ l2-> val+ rem;\\n          rem= tempans/10;\\n          ans -> val= tempans%10;\\n      ans->next= temp4;\\n         l1->val=0;\\n         sol(l1, l2->next, temp4,rem);\\n     }\\n      else if(l2-> next== NULL )\\n     {  \\n       ListNode *temp4= new ListNode;\\n          tempans= l1->val+ l2-> val+ rem;\\n          rem= tempans/10;\\n          ans -> val= tempans%10;\\n      ans->next= temp4;\\n         l2->val=0;\\n         sol(l1->next, l2, temp4,rem);\\n     }\\n     else{ ListNode *temp3= new ListNode;\\n          tempans= l1->val+ l2-> val+ rem;\\n          rem= tempans/10;\\n          ans -> val= tempans%10;\\n         ans-> next= temp3;\\n         sol(l1->next, l2->next, temp3,rem);\\n         \\n     }\\n        \\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n   ListNode *ans = new ListNode;\\n        int rem=0;\\n        sol(l1, l2,ans,rem);\\nreturn ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    \\n    void sol(ListNode*l1, ListNode* l2,  ListNode* ans, int rem)\\n    { int tempans=0;\\n     ListNode *temp= new ListNode;\\n      if(l1-> next== NULL && l2-> next== NULL){\\n          tempans= l1->val+ l2-> val+ rem;\\n          rem= tempans/10;\\n          ans -> val= tempans%10;\\n          \\n        if(rem!=0)   \\n        { ans-> next= temp;\\n            temp-> val= rem;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1948587,
                "title": "javascript-solution",
                "content": "```\\nconst addTwoNums = (l1, l2) => {\\n    let result = new ListNode(0);\\n    let current = result;\\n    let carry = 0;\\n    // explanation: we set carry to 0, and then we will add the values of l1 and l2\\n    // and then we will add the carry to the result\\n    while (l1 || l2 || carry) {\\n        let sum = carry;\\n        if (l1) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n            // we will add the values of l1 to the sum\\n            // then move on to the next node\\n        }\\n        if (l2) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n            // we will add the values of l2 to the sum\\n            // then move on to the next node\\n        }\\n        carry = Math.floor(sum / 10);\\n        current.next = new ListNode(sum % 10);\\n        // we set the current.next to the new ListNode with the value of sum % 10\\n        // and then we set the current to the current.next\\n        current = current.next;\\n    }\\n    return result.next;\\n}\\n```\\n\\nI believe the Time Complexity is O(n), where n is the total number of nodes in the given lists.\\nSpace Complexity: O(1). We only used constant space.\\n\\nRuntime: 111 ms, faster than 82.35% of JavaScript online submissions for Add Two Numbers.\\nMemory Usage: 47.1 MB, less than 84.15% of JavaScript online submissions for Add Two Numbers.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst addTwoNums = (l1, l2) => {\\n    let result = new ListNode(0);\\n    let current = result;\\n    let carry = 0;\\n    // explanation: we set carry to 0, and then we will add the values of l1 and l2\\n    // and then we will add the carry to the result\\n    while (l1 || l2 || carry) {\\n        let sum = carry;\\n        if (l1) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n            // we will add the values of l1 to the sum\\n            // then move on to the next node\\n        }\\n        if (l2) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n            // we will add the values of l2 to the sum\\n            // then move on to the next node\\n        }\\n        carry = Math.floor(sum / 10);\\n        current.next = new ListNode(sum % 10);\\n        // we set the current.next to the new ListNode with the value of sum % 10\\n        // and then we set the current to the current.next\\n        current = current.next;\\n    }\\n    return result.next;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1835514,
                "title": "c-easy-solution-simple",
                "content": "**EASY SOLUTION TO UNDERSTAND**\\n    **PLEASE UPVOTE IF IT HELPS YOU**\\n\\n```\\n\\n\\n\\'\\'\\'\\n\\n\\n\\n\\n\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       if(l1==NULL && l2==NULL)\\n           return l1;\\n        if(l1==NULL && l2!=NULL)\\n            return l2;\\n        if(l1!=NULL && l2==NULL)\\n            return l1;\\n        ListNode* head=new ListNode();\\n    \\n        ListNode *temp=head;\\n        \\n        int x=0;\\n        while(l1!=NULL || l2!=NULL)\\n        {\\n            int sum=0;\\n            \\n            if (l2==NULL)\\n                sum=l1->val+x;\\n            else if(l1==NULL)\\n                sum=l2->val+x;\\n            else\\n            {\\n          sum=l1->val+l2->val+x; \\n            }\\n        \\n             x=sum/10; \\n            sum=sum%10;\\n            \\n            ListNode *node = new ListNode(sum);\\n            temp -> next = node;\\n            temp = temp->next;\\n                \\n            if(l1!=NULL)\\n                l1=l1->next;\\n            if(l2!=NULL)\\n            l2=l2->next;\\n        }\\n\\t\\t// if the carry is generated at last nodes addition and it is greater than 0\\n        if(x>0)\\n        {\\n         ListNode *n = new ListNode(x);\\n           temp -> next = n;\\n            temp = temp->next;\\n        }\\n        return head->next;\\n        \\n            \\n        \\n    }\\n\\'\\'\\'\\n",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "**EASY SOLUTION TO UNDERSTAND**\\n    **PLEASE UPVOTE IF IT HELPS YOU**\\n\\n```\\n\\n\\n\\'\\'\\'\\n\\n\\n\\n\\n\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       if(l1==NULL && l2==NULL)\\n           return l1;\\n        if(l1==NULL && l2!=NULL)\\n            return l2;\\n        if(l1!=NULL && l2==NULL)\\n            return l1;\\n        ListNode* head=new ListNode();\\n    \\n        ListNode *temp=head;\\n        \\n        int x=0;\\n        while(l1!=NULL || l2!=NULL)\\n        {\\n            int sum=0;\\n            \\n            if (l2==NULL)\\n                sum=l1->val+x;\\n            else if(l1==NULL)\\n                sum=l2->val+x;\\n            else\\n            {\\n          sum=l1->val+l2->val+x; \\n            }\\n        \\n             x=sum/10; \\n            sum=sum%10;\\n            \\n            ListNode *node = new ListNode(sum);\\n            temp -> next = node;\\n            temp = temp->next;\\n                \\n            if(l1!=NULL)\\n                l1=l1->next;\\n            if(l2!=NULL)\\n            l2=l2->next;\\n        }\\n\\t\\t// if the carry is generated at last nodes addition and it is greater than 0\\n        if(x>0)\\n        {\\n         ListNode *n = new ListNode(x);\\n           temp -> next = n;\\n            temp = temp->next;\\n        }\\n        return head->next;\\n        \\n            \\n        \\n    }\\n\\'\\'\\'\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1665544,
                "title": "c-simple-stack-based-solution-beats-98",
                "content": "*Please upvote if you liked this solution or found it useful.\\nFor any clarifications, suggestions or doubts please comment down below.*\\n\\n__Approach:__\\n1. Place __temp1__ at the start of __l1__ and __temp2__ at the start of __l2__\\n2. Start iterating and adding the values until __temp1__ and __temp2__ are not NULL. Put the __sum__ into __resStack__ which will hold the answer to our addition.\\n3.  Be sure to factor in __carry__ at each step as well which will store the carry of the previous step\\'s addition\\n4.  Run 2 while loops just in case there are extra digits left in __l1__ OR __l2__ and put these extra digits into the __resStack__ as well\\n5.  Finally, if the __carry__ is non-zero, push it onto the __resStack__ as well\\n6.  The required sum is present in the __resStack__ (required tail is top of the stack, required head is bottom of the stack)\\n7.  Start popping numbers from __resStack__ and adding it to the head of the required __result LinkedList__. To add numbers to the start of the LinkedList, a function __addFirst__ has been written.\\n\\n__Code:__\\n```\\nclass Solution {\\npublic:\\n    void addFirst(ListNode** head,ListNode** tail,int data){\\n        ListNode* temp = new ListNode(data);\\n        if(*head==nullptr){\\n            *head = temp;\\n            *tail = temp;\\n        }\\n        else{\\n            temp->next = *head;\\n            *head = temp;\\n        }\\n    }\\n    \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* temp1 = l1;\\n        ListNode* temp2 = l2;\\n\\n        stack<int> resStack;\\n        while(temp1!=nullptr && temp2!=nullptr){\\n            int num1 = temp1->val;\\n            int num2 = temp2->val;\\n            int sum = (num1 + num2 + carry)%10;\\n            carry = (num1 + num2 + carry)/10;\\n            resStack.push(sum);\\n            temp1 = temp1->next;\\n            temp2 = temp2->next;\\n        }\\n        while(temp1!=nullptr){\\n            int num1 = temp1->val;\\n            int sum = (num1 + carry)%10;\\n            carry = (num1 + carry)/10; \\n            resStack.push(sum);\\n            temp1 = temp1->next;\\n        }\\n\\n        while(temp2!=nullptr){\\n            int num2 = temp2->val;\\n            int sum = (num2 + carry)%10;\\n            carry = (num2 + carry)/10; \\n            resStack.push(sum);\\n            temp2 = temp2->next;\\n        }\\n        \\n        if(carry!=0){\\n            resStack.push(carry);\\n        }\\n        \\n        \\n        ListNode* head = nullptr;\\n        ListNode* tail = nullptr;\\n        while(resStack.size()>0){\\n            addFirst(&head,&tail,resStack.top());\\n            resStack.pop();\\n        }\\n        return head;\\n    }\\n};\\n```\\n\\n__Complexity:__\\n* Time : O(size_of_l1 + size_of_l2) = O(m+n)\\n* Space : O(size_of_l1_in_stack + size_of_l2_in_stack) = O(m+n)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void addFirst(ListNode** head,ListNode** tail,int data){\\n        ListNode* temp = new ListNode(data);\\n        if(*head==nullptr){\\n            *head = temp;\\n            *tail = temp;\\n        }\\n        else{\\n            temp->next = *head;\\n            *head = temp;\\n        }\\n    }\\n    \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* temp1 = l1;\\n        ListNode* temp2 = l2;\\n\\n        stack<int> resStack;\\n        while(temp1!=nullptr && temp2!=nullptr){\\n            int num1 = temp1->val;\\n            int num2 = temp2->val;\\n            int sum = (num1 + num2 + carry)%10;\\n            carry = (num1 + num2 + carry)/10;\\n            resStack.push(sum);\\n            temp1 = temp1->next;\\n            temp2 = temp2->next;\\n        }\\n        while(temp1!=nullptr){\\n            int num1 = temp1->val;\\n            int sum = (num1 + carry)%10;\\n            carry = (num1 + carry)/10; \\n            resStack.push(sum);\\n            temp1 = temp1->next;\\n        }\\n\\n        while(temp2!=nullptr){\\n            int num2 = temp2->val;\\n            int sum = (num2 + carry)%10;\\n            carry = (num2 + carry)/10; \\n            resStack.push(sum);\\n            temp2 = temp2->next;\\n        }\\n        \\n        if(carry!=0){\\n            resStack.push(carry);\\n        }\\n        \\n        \\n        ListNode* head = nullptr;\\n        ListNode* tail = nullptr;\\n        while(resStack.size()>0){\\n            addFirst(&head,&tail,resStack.top());\\n            resStack.pop();\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1662081,
                "title": "optimized-c-solution-add-two-numbers",
                "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        \\n        ListNode head;\\n        ListNode* l3 = &head;\\n        \\n        int sum = 0;\\n        \\n        while (l1 || l2 || sum) {\\n            \\n            if (l1) {\\n                sum += l1 -> val;\\n                l1 = l1 -> next;\\n            }\\n            \\n            if (l2) {\\n                sum += l2 -> val;\\n                l2 = l2 -> next;\\n            }\\n            \\n            l3 -> next = new ListNode(sum % 10);\\n            l3 = l3 -> next;\\n            sum = (sum > 9);\\n        }\\n        \\n        return head.next;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        \\n        ListNode head;\\n        ListNode* l3 = &head;\\n        \\n        int sum = 0;\\n        \\n        while (l1 || l2 || sum) {\\n            \\n            if (l1) {\\n                sum += l1 -> val;\\n                l1 = l1 -> next;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1529917,
                "title": "python-easy-to-understand-recursion",
                "content": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def traverse(l1, l2, carry):\\n            if not l1 and not l2 and not carry:\\n                return None\\n            tmp = 0\\n            if l1:\\n                tmp+=l1.val\\n                l1 = l1.next\\n            if l2:\\n                tmp+=l2.val\\n                l2 = l2.next\\n            if carry:\\n                tmp+=1\\n                carry = False\\n            if tmp>=10: carry = True\\n            return ListNode(val = tmp%10, next=traverse(l1, l2, carry))\\n            \\n        return traverse(l1, l2, False)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def traverse(l1, l2, carry):\\n            if not l1 and not l2 and not carry:\\n                return None\\n            tmp = 0\\n            if l1:\\n                tmp+=l1.val\\n                l1 = l1.next\\n            if l2:\\n                tmp+=l2.val\\n                l2 = l2.next\\n            if carry:\\n                tmp+=1\\n                carry = False\\n            if tmp>=10: carry = True\\n            return ListNode(val = tmp%10, next=traverse(l1, l2, carry))\\n            \\n        return traverse(l1, l2, False)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 761766,
                "title": "my-short-and-easy-c-solution-with-explanation",
                "content": "The basic idea is to replicate the process of addition. So during addition, we have first number, second number and carry. ex. if we add 345 to 237, at first, we will be adding 5 to 7. Initially we will take carry as 0. so the first number will be 5 + 7 + carry(i.e. 0) = 12.Now in the answer, we write 12 % 10 = 2 and the quotient becomes the carry i.e. 12 / 10 = 1, becomes the carry. Then we move on to 4 + 3 + carry. Now this process is repeated for each of the digits.. \\n**Note:** Don\\'t forget the last carry.. 945 + 63 =  1008 \\n```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode ans(INT_MIN);\\n        ListNode *head = &ans;\\n        int carry = 0;\\n\\t\\t// repeat the loop till either l1 is NULL or l2 is NULL or carry is greater than 0\\n        while(l1 != nullptr || l2 != nullptr || carry != 0) {\\n            int a, b;\\n            if(l1 != nullptr) {a = l1->val; l1 = l1->next;}\\n            else a = 0;\\n            if(l2 != nullptr) {b = l2->val; l2 = l2->next;}\\n            else b = 0;\\n            ListNode *temp = new ListNode((a + b + carry) % 10);\\n            carry = (a + b + carry) / 10;\\n            head->next = temp;\\n            head = head->next;\\n            \\n        }\\n        return ans.next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode ans(INT_MIN);\\n        ListNode *head = &ans;\\n        int carry = 0;\\n\\t\\t// repeat the loop till either l1 is NULL or l2 is NULL or carry is greater than 0\\n        while(l1 != nullptr || l2 != nullptr || carry != 0) {\\n            int a, b;\\n            if(l1 != nullptr) {a = l1->val; l1 = l1->next;}\\n            else a = 0;\\n            if(l2 != nullptr) {b = l2->val; l2 = l2->next;}\\n            else b = 0;\\n            ListNode *temp = new ListNode((a + b + carry) % 10);\\n            carry = (a + b + carry) / 10;\\n            head->next = temp;\\n            head = head->next;\\n            \\n        }\\n        return ans.next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 494872,
                "title": "easy-to-understand-javascript-solution-explanations",
                "content": "This algorithm works similar to basic addition that we learned in primary school. See the comments in code for more details.\\n```js\\nvar addTwoNumbers = function(l1, l2) {\\n    let headNode = new ListNode(\\'dummy_node\\');\\n    let currNode = headNode;\\n    let carry = 0;\\n    \\n    while (l1 || l2 || carry) {\\n        let sum = carry;\\n        if (l1) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n        }\\n        if (l2) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n        }\\n        if (sum >= 10) {\\n            carry = 1;\\n            sum -= 10;\\n        } else {\\n            carry = 0;\\n        }\\n        currNode.next = new ListNode(sum);\\n        currNode = currNode.next;\\n    }\\n    \\n    return headNode.next;  \\n};\\n```\\n\\n**With explanations**\\n\\n```js\\nvar addTwoNumbers = function(l1, l2) {\\n\\t// Create a dummy head node because\\n    // we need a pointer to the first node in the solution.\\n\\t// See how we return headNode.next at the end of the code.\\n    let headNode = new ListNode(\\'dummy_node\\');\\n\\t\\n\\t// Keep track of the current node so that we can easily add a new node at the end\\n    let currNode = headNode;\\n\\t\\n\\t// Value carried over from previous addition (is either 0 or 1)\\n    let carry = 0;\\n    \\n\\t// Same as:  while (l1 != null || l2 != null || carry != 0)\\n    while (l1 || l2 || carry) {\\n        let sum = carry;\\n        if (l1) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n        }\\n        if (l2) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n        }\\n        if (sum >= 10) {\\n\\t\\t    // If the sum is two digit,\\n\\t\\t\\t// we need to carry over 1 to the next loop\\n            carry = 1;\\n            sum -= 10;\\n        } else {\\n            carry = 0;\\n        }\\n\\t\\t// Add a new node to our solution (linked list)\\n        currNode.next = new ListNode(sum);\\n\\t\\t\\n\\t\\t// advance the current node\\n        currNode = currNode.next;\\n    }\\n    \\n    return headNode.next;  \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nvar addTwoNumbers = function(l1, l2) {\\n    let headNode = new ListNode(\\'dummy_node\\');\\n    let currNode = headNode;\\n    let carry = 0;\\n    \\n    while (l1 || l2 || carry) {\\n        let sum = carry;\\n        if (l1) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n        }\\n        if (l2) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n        }\\n        if (sum >= 10) {\\n            carry = 1;\\n            sum -= 10;\\n        } else {\\n            carry = 0;\\n        }\\n        currNode.next = new ListNode(sum);\\n        currNode = currNode.next;\\n    }\\n    \\n    return headNode.next;  \\n};\\n```\n```js\\nvar addTwoNumbers = function(l1, l2) {\\n\\t// Create a dummy head node because\\n    // we need a pointer to the first node in the solution.\\n\\t// See how we return headNode.next at the end of the code.\\n    let headNode = new ListNode(\\'dummy_node\\');\\n\\t\\n\\t// Keep track of the current node so that we can easily add a new node at the end\\n    let currNode = headNode;\\n\\t\\n\\t// Value carried over from previous addition (is either 0 or 1)\\n    let carry = 0;\\n    \\n\\t// Same as:  while (l1 != null || l2 != null || carry != 0)\\n    while (l1 || l2 || carry) {\\n        let sum = carry;\\n        if (l1) {\\n            sum += l1.val;\\n            l1 = l1.next;\\n        }\\n        if (l2) {\\n            sum += l2.val;\\n            l2 = l2.next;\\n        }\\n        if (sum >= 10) {\\n\\t\\t    // If the sum is two digit,\\n\\t\\t\\t// we need to carry over 1 to the next loop\\n            carry = 1;\\n            sum -= 10;\\n        } else {\\n            carry = 0;\\n        }\\n\\t\\t// Add a new node to our solution (linked list)\\n        currNode.next = new ListNode(sum);\\n\\t\\t\\n\\t\\t// advance the current node\\n        currNode = currNode.next;\\n    }\\n    \\n    return headNode.next;  \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 414706,
                "title": "c-10-lines-with-explanation",
                "content": "```\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* anchorNode = new ListNode(-1);\\n        ListNode* bridgeBuilder = anchorNode;\\n        while (l1 || l2 || carry) { // Continue as long as a number needs a home\\n            int val = carry + (l1 ? l1->val : 0) + (l2 ? l2->val : 0);\\n            l1 = l1 ? l1->next : nullptr; // If l1 doesn\\'t exist then just set it again to nullptr, no harm done\\n            l2 = l2 ? l2->next : nullptr; // Same for l2.\\n            carry = val / 10;\\n            bridgeBuilder->next = new ListNode(val % 10); // The least significant digit goes into the new node\\n            bridgeBuilder = bridgeBuilder->next;\\n        }\\n        return anchorNode->next;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* anchorNode = new ListNode(-1);\\n        ListNode* bridgeBuilder = anchorNode;\\n        while (l1 || l2 || carry) { // Continue as long as a number needs a home\\n            int val = carry + (l1 ? l1->val : 0) + (l2 ? l2->val : 0);\\n            l1 = l1 ? l1->next : nullptr; // If l1 doesn\\'t exist then just set it again to nullptr, no harm done\\n            l2 = l2 ? l2->next : nullptr; // Same for l2.\\n            carry = val / 10;\\n            bridgeBuilder->next = new ListNode(val % 10); // The least significant digit goes into the new node\\n            bridgeBuilder = bridgeBuilder->next;\\n        }\\n        return anchorNode->next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 259577,
                "title": "c-36ms-98-86-runtime-94-70-memory-without-extra-space-with-comments",
                "content": "The main idea is to **use current space instead of creating nodes**. So, we could use ***l1 or l2*** to memorize the results.\\n\\n1.  If the length of ***l1*** is the same as that of ***l2*** --> nothing special\\n2.  Else if ***l1*** is shorter than ***l2*** --> we ***\\'transplant\\'*** the following ***l2*** to the back of ***l1*** by \\n\\t\\t `l1->next = l2->next;`\\n3.  Else if the max size(***l1***,  ***l2***) is still not enough for calculation (for example, ***l1 = 9, l2 = 1***) --> we create a node values 0 and continue the loop.  \\n\\t\\t `l1->next = new ListNode(0);`\\n\\n```\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int former = 0;\\n        // assign l1 to head (we\\'ll return head later)\\n        ListNode* head = l1;\\n         while(l1) {\\n             former += (l1 ? l1->val : 0) + (l2 ? l2->val : 0);\\n             l1->val = former % 10;\\n             former/=10;\\n             if(!l1->next && l2 && l2->next) {\\n                 // if l1 ends but l2 doesn\\'t, we point l1->next to l2->next\\n                 l1->next = l2->next;\\n                 l2 = NULL;\\n             }\\n             else if(!l1->next && !(l2&&l2->next) && former) {\\n                 // if l1 & l2 both end, we make a new node (assign to l1->next)\\n                 l1->next = new ListNode(0);\\n                 l2 = NULL;\\n             }\\n             if(l2) l2 = l2->next;\\n             l1 = l1->next;\\n         }\\n        return head;\\n    }\\n```\\nNote: This code is workable even when test case is like ***l1: 1->43 , l2: 21 ->9***",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int former = 0;\\n        // assign l1 to head (we\\'ll return head later)\\n        ListNode* head = l1;\\n         while(l1) {\\n             former += (l1 ? l1->val : 0) + (l2 ? l2->val : 0);\\n             l1->val = former % 10;\\n             former/=10;\\n             if(!l1->next && l2 && l2->next) {\\n                 // if l1 ends but l2 doesn\\'t, we point l1->next to l2->next\\n                 l1->next = l2->next;\\n                 l2 = NULL;\\n             }\\n             else if(!l1->next && !(l2&&l2->next) && former) {\\n                 // if l1 & l2 both end, we make a new node (assign to l1->next)\\n                 l1->next = new ListNode(0);\\n                 l2 = NULL;\\n             }\\n             if(l2) l2 = l2->next;\\n             l1 = l1->next;\\n         }\\n        return head;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 145803,
                "title": "ruby-recursive-solution-beats-90-best-of-all-only-4-lines-of-code",
                "content": "```\\n# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val)\\n#         @val = val\\n#         @next = nil\\n#     end\\n# end\\n\\n# @param {ListNode} l1\\n# @param {ListNode} l2\\n# @return {ListNode}\\ndef add_two_numbers(l1, l2, carry = 0)\\n    return nil if (l1.nil? and l2.nil? and carry.zero?)\\n    sum = (l1&.val || 0) + (l2&.val || 0) + carry\\n    return ListNode.new(sum % 10).tap do |l3|\\n        l3.next = add_two_numbers(l1&.next, l2&.next, sum / 10)\\n    end\\nend\\n```",
                "solutionTags": [],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val)\\n#         @val = val\\n#         @next = nil\\n#     end\\n# end\\n\\n# @param {ListNode} l1\\n# @param {ListNode} l2\\n# @return {ListNode}\\ndef add_two_numbers(l1, l2, carry = 0)\\n    return nil if (l1.nil? and l2.nil? and carry.zero?)\\n    sum = (l1&.val || 0) + (l2&.val || 0) + carry\\n    return ListNode.new(sum % 10).tap do |l3|\\n        l3.next = add_two_numbers(l1&.next, l2&.next, sum / 10)\\n    end\\nend\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1148,
                "title": "swift-solution",
                "content": "```\\nclass Solution {\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        var l1 = l1\\n        var l2 = l2\\n        var prev = ListNode(0)\\n        var carry = 0\\n        let head = prev\\n        \\n        while l1 != nil || l2 != nil || carry != 0 {\\n            let cur = ListNode(0)\\n            let sum = (l2 == nil ? 0 : l2!.val) + (l1 == nil ? 0 : l1!.val) + carry\\n            cur.val = sum % 10\\n            carry = sum / 10\\n            prev.next = cur\\n            prev = cur\\n            l1 = l1 == nil ? l1: l1?.next\\n            l2 = l2 == nil ? l2: l2?.next\\n        }\\n        \\n        return head.next\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        var l1 = l1\\n        var l2 = l2\\n        var prev = ListNode(0)\\n        var carry = 0\\n        let head = prev\\n        \\n        while l1 != nil || l2 != nil || carry != 0 {\\n            let cur = ListNode(0)\\n            let sum = (l2 == nil ? 0 : l2!.val) + (l1 == nil ? 0 : l1!.val) + carry\\n            cur.val = sum % 10\\n            carry = sum / 10\\n            prev.next = cur\\n            prev = cur\\n            l1 = l1 == nil ? l1: l1?.next\\n            l2 = l2 == nil ? l2: l2?.next\\n        }\\n        \\n        return head.next\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1157,
                "title": "my-java-solution-easy-to-understand-4ms",
                "content": "    public class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode fake = new ListNode(0);\\n        ListNode t=fake, t1=l1, t2=l2;\\n        int a1, a2, r = 0;\\n        while (t1!=null || t2!=null || r!=0) {\\n            a1 = t1==null ? 0:t1.val;\\n            a2 = t2==null ? 0:t2.val;\\n            r += a1 + a2;\\n            t.next = new ListNode(r%10);\\n            r /= 10;\\n            t = t.next;\\n            if (t1!=null) t1 = t1.next;\\n            if (t2!=null) t2 = t2.next;\\n        }\\n        return fake.next;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode fake = new ListNode(0);\\n        ListNode t=fake, t1=l1, t2=l2;\\n        int a1, a2, r = 0;\\n        while (t1!=null || t2!=null || r!=0) {\\n            a1 = t1==null ? 0:t1.val;\\n            a2 = t2==null ? 0:t2.val;\\n            r += a1 + a2;\\n            t.next = new ListNode(r%10);\\n            r /= 10;\\n            t = t.next;\\n            if (t1!=null) t1 = t1.next;\\n            if (t2!=null) t2 = t2.next;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1092,
                "title": "a-horrible-hack-in-c-16ms",
                "content": "Allocating minimal amount memory by utilizing the passed in ListNode elements.\\n\\n**Kids, don't do this at home, it is a very bad practice!**\\n\\n    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\\n        struct ListNode* result = l1 ? l1 : l2;\\n        struct ListNode* carry = l1 ? l2 : l1;\\n        struct ListNode* node = result;\\n        struct ListNode* tmp;\\n        int c = 0;\\n        int s;\\n        while (l1 || l2) {\\n            s = c;\\n            if (l1) { s += l1->val; l1=l1->next; }\\n            if (l2) { s += l2->val; l2=l2->next; }\\n            c = s > 9 ? 1 : 0;\\n            node->val = c ? s - 10 : s;\\n            if (l1) {\\n                node = node->next = l1;\\n            } else if (l2) {\\n                node = node->next = l2;\\n            } else {\\n                node->next = NULL;\\n            }\\n        }\\n        if (c) {\\n            carry->val = c;\\n            node->next = carry;\\n            node = node->next;\\n        }\\n        node->next = NULL;\\n        return result;\\n    }",
                "solutionTags": [],
                "code": "Allocating minimal amount memory by utilizing the passed in ListNode elements.\\n\\n**Kids, don't do this at home, it is a very bad practice!**\\n\\n    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\\n        struct ListNode* result = l1 ? l1 : l2;\\n        struct ListNode* carry = l1 ? l2 : l1;\\n        struct ListNode* node = result;\\n        struct ListNode* tmp;\\n        int c = 0;\\n        int s;\\n        while (l1 || l2) {\\n            s = c;\\n            if (l1) { s += l1->val; l1=l1->next; }\\n            if (l2) { s += l2->val; l2=l2->next; }\\n            c = s > 9 ? 1 : 0;\\n            node->val = c ? s - 10 : s;\\n            if (l1) {\\n                node = node->next = l1;\\n            } else if (l2) {\\n                node = node->next = l2;\\n            } else {\\n                node->next = NULL;\\n            }\\n        }\\n        if (c) {\\n            carry->val = c;\\n            node->next = carry;\\n            node = node->next;\\n        }\\n        node->next = NULL;\\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1554,
                "title": "easy-recursive-solution-in-c",
                "content": "Easy and straight-forward solution in C++;\\n\\n    ListNode* addList(ListNode* l1, ListNode* l2, int carry) {\\n        if(!l1 && !l2) {\\n            if(carry) return new ListNode(carry);\\n            else return NULL;\\n        }\\n        int val = carry + (l1?l1->val:0) + (l2?l2->val:0);\\n        ListNode* newNode = new ListNode(val%10);\\n        newNode->next = addList(l1?l1->next:NULL, l2?l2->next:NULL, val/10);\\n        return newNode;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        return addList(l1, l2, 0);\\n    }",
                "solutionTags": [],
                "code": "Easy and straight-forward solution in C++;\\n\\n    ListNode* addList(ListNode* l1, ListNode* l2, int carry) {\\n        if(!l1 && !l2) {\\n            if(carry) return new ListNode(carry);\\n            else return NULL;\\n        }\\n        int val = carry + (l1?l1->val:0) + (l2?l2->val:0);\\n        ListNode* newNode = new ListNode(val%10);\\n        newNode->next = addList(l1?l1->next:NULL, l2?l2->next:NULL, val/10);\\n        return newNode;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        return addList(l1, l2, 0);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3684904,
                "title": "python-3-trick-solution",
                "content": "# Approach\\nTraverse through both the linked list and simultaneously add the node value with carry.\\n\\n# Video Explanation\\nhttps://www.youtube.com/watch?v=tp44dhTaycg\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        root = n = ListNode()\\n        carry = 0\\n        while l1 or l2 or carry:\\n            v1 = v2 = 0\\n            if l1:\\n                v1 = l1.val\\n                l1 = l1.next\\n                \\n            if l2:\\n                v2 = l2.val\\n                l2 = l2.next\\n                \\n            carry, val = divmod(v1+v2+carry, 10)\\n            n.next = ListNode(val)\\n            n = n.next\\n    \\n        return root.next\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        root = n = ListNode()\\n        carry = 0\\n        while l1 or l2 or carry:\\n            v1 = v2 = 0\\n            if l1:\\n                v1 = l1.val\\n                l1 = l1.next\\n                \\n            if l2:\\n                v2 = l2.val\\n                l2 = l2.next\\n                \\n            carry, val = divmod(v1+v2+carry, 10)\\n            n.next = ListNode(val)\\n            n = n.next\\n    \\n        return root.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1835499,
                "title": "python-easy-sol-93-faster",
                "content": "```\\ndef addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n\\t\\tresult = ListNode()\\n\\t\\tptr = result # the current node of the result list during loop\\n        carry = 0\\n        while l1 or l2 or carry:  # if l1 or l2 is not None or carry is not zero. if carry still nonzero after both list has ended, the loop will continue to add the remaining to digits to result List\\n            if l1:\\n                carry += l1.val\\n                l1 = l1.next\\n            if l2:\\n                carry += l2.val\\n                l2 = l2.next\\n            \\n            ptr.next = ListNode(carry%10)  # if  sum is greater than 9, only add the last digit to the list and carry the remaining part to next loop\\n            ptr = ptr.next\\n            carry //= 10\\n        \\n        return result.next\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n\\t\\tresult = ListNode()\\n\\t\\tptr = result # the current node of the result list during loop\\n        carry = 0\\n        while l1 or l2 or carry:  # if l1 or l2 is not None or carry is not zero. if carry still nonzero after both list has ended, the loop will continue to add the remaining to digits to result List\\n            if l1:\\n                carry += l1.val\\n                l1 = l1.next\\n            if l2:\\n                carry += l2.val\\n                l2 = l2.next\\n            \\n            ptr.next = ListNode(carry%10)  # if  sum is greater than 9, only add the last digit to the list and carry the remaining part to next loop\\n            ptr = ptr.next\\n            carry //= 10\\n        \\n        return result.next\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1835425,
                "title": "c-detailed-explanation-w-commented-code-easy-to-understand-code-iterative",
                "content": "***Brief note about Question-***\\n* We have to add the two numbers and return the sum as a linked list.\\n```\\nLet\\'s take an example not given-\\nSuppose our head given to us as, l1 = [3, 4, 5] & l2 = [1,2 3]\\n\\nSo, the answer should look like 345 + 123 = 468\\nso, the answer is [4,6,8]\\n```\\n_________\\n***Solution - I (Accepted)-***\\n* We will add the linked list in a typical manner as we do it in our childhood.\\n* We traverse both the list and maintain a sum and carry at the moment.\\n* Sum is done by adding` l1 and l2 value and also with carry.`\\n* Also if sum is become greater than or equal to10, we make our carry as 1.\\n* And last, we additionaly check if carry is greater than 0 or not.\\n* If Yes then make anthor node and add it to that also.\\n* See commented code for more clarification.\\n_________\\n**Code (C++)**\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* temp; // temp pointer to carry out some results \\n        \\n        ListNode* res = NULL; // result pointer which we return\\n        ListNode* curr = NULL; // curr pointer for any moment, it will use later\\n        \\n        int sum = 0; // sum variable which carries our sum\\n        int carry = 0; // carry variable which carries our carry\\n        \\n        // while we not reach at the end of one of the list\\n        while(l1 != NULL || l2 != NULL)\\n        {\\n            // if l1 exist then it to our sum and same as l2 and additionaly also add carry\\n            sum = (l1?l1 -> val:0) + (l2?l2 -> val:0) + carry;\\n            \\n            carry = (sum >= 10) ? 1:0; // if sum is greater than or equal to 10, then take carry as 1\\n            \\n            sum = sum % 10; // take modulo of sum by 10\\n            \\n            temp = new ListNode(sum); // malke node of having sum,\\n            if(res == NULL) // if it is null, then add it to temp\\n            res = temp;\\n            else // else add to curr pointer\\n            curr -> next = temp;\\n            \\n            curr = temp; // make curr to temp\\n            \\n            if(l1) // if l1 exist move further\\n            l1 = l1 -> next;\\n            \\n            if(l2) // if l2 exist move further\\n            l2 = l2 -> next;\\n        }\\n        \\n        // and last, if carry is still greater than 0, then we have to make one extra node, and add to our result\\n        if(carry > 0)\\n        {\\n            temp = new ListNode(carry);\\n            curr -> next = temp;\\n            curr = temp;\\n        }\\n      \\n        return res; // finally return result\\n    }\\n};\\n```\\n***`If u find this useful , please consider to give a upvote!!`***",
                "solutionTags": [
                    "C",
                    "Iterator"
                ],
                "code": "```\\nLet\\'s take an example not given-\\nSuppose our head given to us as, l1 = [3, 4, 5] & l2 = [1,2 3]\\n\\nSo, the answer should look like 345 + 123 = 468\\nso, the answer is [4,6,8]\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* temp; // temp pointer to carry out some results \\n        \\n        ListNode* res = NULL; // result pointer which we return\\n        ListNode* curr = NULL; // curr pointer for any moment, it will use later\\n        \\n        int sum = 0; // sum variable which carries our sum\\n        int carry = 0; // carry variable which carries our carry\\n        \\n        // while we not reach at the end of one of the list\\n        while(l1 != NULL || l2 != NULL)\\n        {\\n            // if l1 exist then it to our sum and same as l2 and additionaly also add carry\\n            sum = (l1?l1 -> val:0) + (l2?l2 -> val:0) + carry;\\n            \\n            carry = (sum >= 10) ? 1:0; // if sum is greater than or equal to 10, then take carry as 1\\n            \\n            sum = sum % 10; // take modulo of sum by 10\\n            \\n            temp = new ListNode(sum); // malke node of having sum,\\n            if(res == NULL) // if it is null, then add it to temp\\n            res = temp;\\n            else // else add to curr pointer\\n            curr -> next = temp;\\n            \\n            curr = temp; // make curr to temp\\n            \\n            if(l1) // if l1 exist move further\\n            l1 = l1 -> next;\\n            \\n            if(l2) // if l2 exist move further\\n            l2 = l2 -> next;\\n        }\\n        \\n        // and last, if carry is still greater than 0, then we have to make one extra node, and add to our result\\n        if(carry > 0)\\n        {\\n            temp = new ListNode(carry);\\n            curr -> next = temp;\\n            curr = temp;\\n        }\\n      \\n        return res; // finally return result\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1835349,
                "title": "recursion-simple-c-java",
                "content": "* At every point we need to add values of l1 and l2. \\n* If a there is an overflow (i.e., sum >= 10) we must carry it forward to the next point.\\n* We will operate such that we will sum the elements and put it in current position of l1, then determine it\\'s next.\\n* One case is when both l1 and l2 are over, but there is a carry, in that case alone our next will be a new node with val = 1 (carry), and it will be the last node of our result.\\n\\nHere\\'s the code:\\nC++:\\n```\\nclass Solution {\\npublic:\\n  int carry = 0;\\n  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    if(l1 && l2){ // both l1 and l2 exist at current position\\n      l1->val = l1->val + l2->val;\\n    }\\n    else if(l2){ // only l2 exists at current position\\n      l1 = l2;\\n      l2 = NULL;\\n    }\\n    if(l1) // either l1 or l2 exist at current position\\n    {\\n      l1->val += carry;\\n      carry = l1->val/10;\\n      l1->val %= 10;\\n      l1->next = addTwoNumbers(l1->next, l2 ? l2->next : NULL);\\n      return l1;\\n    }\\n    if(carry) // if carry exists after exhausting l1 and l2\\n      return new ListNode(1);\\n    \\n    return NULL;\\n  }\\n};\\n```\\n\\nJava:\\n```\\nclass Solution {\\n  int carry = 0;\\n  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n    if(l1!=null && l2!=null){ // both l1 and l2 exist at current position\\n      l1.val = l1.val + l2.val;\\n    }\\n    else if(l2!=null){ // only l2 exists at current position\\n      l1 = l2;\\n      l2 = null;\\n    }\\n    if(l1!=null){ // either l1 or l2 exist at current position\\n      l1.val += carry;\\n      carry = l1.val/10;\\n      l1.val %= 10;\\n      l1.next = addTwoNumbers(l1.next, l2 !=null ? l2.next : null);\\n      return l1;\\n    }\\n    if(carry!=0) // if carry exists after exhausting l1 and l2\\n      return new ListNode(1);\\n    \\n    return null;\\n  }\\n}\\n```\\n\\n**Complexities:**\\nlet, \\nn1 = no. of nodes in l1\\nn2 = no. of nodes in l2\\nThen, at worst case:\\n**Space:** O(max(n1,n2)) [Recursion Stack]\\n**Time:** O(max(n1, n2))",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n  int carry = 0;\\n  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    if(l1 && l2){ // both l1 and l2 exist at current position\\n      l1->val = l1->val + l2->val;\\n    }\\n    else if(l2){ // only l2 exists at current position\\n      l1 = l2;\\n      l2 = NULL;\\n    }\\n    if(l1) // either l1 or l2 exist at current position\\n    {\\n      l1->val += carry;\\n      carry = l1->val/10;\\n      l1->val %= 10;\\n      l1->next = addTwoNumbers(l1->next, l2 ? l2->next : NULL);\\n      return l1;\\n    }\\n    if(carry) // if carry exists after exhausting l1 and l2\\n      return new ListNode(1);\\n    \\n    return NULL;\\n  }\\n};\\n```\n```\\nclass Solution {\\n  int carry = 0;\\n  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n    if(l1!=null && l2!=null){ // both l1 and l2 exist at current position\\n      l1.val = l1.val + l2.val;\\n    }\\n    else if(l2!=null){ // only l2 exists at current position\\n      l1 = l2;\\n      l2 = null;\\n    }\\n    if(l1!=null){ // either l1 or l2 exist at current position\\n      l1.val += carry;\\n      carry = l1.val/10;\\n      l1.val %= 10;\\n      l1.next = addTwoNumbers(l1.next, l2 !=null ? l2.next : null);\\n      return l1;\\n    }\\n    if(carry!=0) // if carry exists after exhausting l1 and l2\\n      return new ListNode(1);\\n    \\n    return null;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1428948,
                "title": "100-faster-easy-java-solution",
                "content": "**Please Upvote if you like the Solution**\\n\\n\\tclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n       int carry=0;\\n        ListNode res=new ListNode();\\n        ListNode prev=res;\\n        while(l1!=null | l2!=null)\\n        {\\n            int x=(l1!=null)? l1.val : 0;\\n            int y=(l2!=null)? l2.val : 0;\\n            int total=x+y+carry;\\n            carry=total/10;\\n            ListNode node=new ListNode(total%10);\\n            res.next=node;\\n            res=res.next;\\n            if(l1!=null)\\n                l1=l1.next;\\n            if(l2!=null)\\n                l2=l2.next;\\n            \\n        }\\n        if(carry>0) \\n        res.next=new ListNode(carry);\\n        return prev.next;\\n    }\\n\\t}",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Iterator"
                ],
                "code": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n       int carry=0;\\n        ListNode res=new ListNode();\\n        ListNode prev=res;\\n        while(l1!=null | l2!=null)\\n        {\\n            int x=(l1!=null)? l1.val : 0;\\n            int y=(l2!=null)? l2.val : 0;\\n            int total=x+y+carry;\\n            carry=total/10;\\n            ListNode node=new ListNode(total%10);\\n            res.next=node;\\n            res=res.next;\\n            if(l1!=null)\\n                l1=l1.next;\\n            if(l2!=null)\\n                l2=l2.next;\\n            \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1369464,
                "title": "c-easy-and-efficient",
                "content": "If this solution helped you, Please upvote. Thanks\\n\\n```\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode * res = new ListNode(0);\\n        ListNode* it = res;\\n        int carry = 0;\\n        while(l1 or l2)\\n        {\\n            int sum = carry;\\n            if(l1)\\n            {\\n                sum += l1->val;\\n                l1=l1->next;\\n            }\\n            if(l2)\\n            {\\n                sum += l2->val;\\n                l2=l2->next;\\n            }\\n            res->next=new ListNode(sum%10);\\n            res=res->next;\\n            carry=sum/10;\\n        }\\n        if(carry>0)\\n        {\\n            res->next=new ListNode(carry);\\n        }\\n        return it->next;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode * res = new ListNode(0);\\n        ListNode* it = res;\\n        int carry = 0;\\n        while(l1 or l2)\\n        {\\n            int sum = carry;\\n            if(l1)\\n            {\\n                sum += l1->val;\\n                l1=l1->next;\\n            }\\n            if(l2)\\n            {\\n                sum += l2->val;\\n                l2=l2->next;\\n            }\\n            res->next=new ListNode(sum%10);\\n            res=res->next;\\n            carry=sum/10;\\n        }\\n        if(carry>0)\\n        {\\n            res->next=new ListNode(carry);\\n        }\\n        return it->next;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1206355,
                "title": "python-solution-that-beat-96-time-faster-than-others",
                "content": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        carry=0\\n        sol=ListNode()\\n        curr=sol\\n        carry=0\\n        while l1 or l2 or carry:\\n            ans=0\\n            if l1:\\n                ans+=l1.val\\n                l1=l1.next\\n            if l2:\\n                ans+=l2.val\\n                l2=l2.next\\n            if carry:\\n                ans+=carry\\n                \\n            val=ans%10\\n            carry=ans//10\\n            curr.next=ListNode(val)\\n            curr=curr.next\\n                \\n        return sol.next\\n```\\nTime - O(max(n1,n2)) = O(N)\\nSpace - O(N)",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Iterator"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        carry=0\\n        sol=ListNode()\\n        curr=sol\\n        carry=0\\n        while l1 or l2 or carry:\\n            ans=0\\n            if l1:\\n                ans+=l1.val\\n                l1=l1.next\\n            if l2:\\n                ans+=l2.val\\n                l2=l2.next\\n            if carry:\\n                ans+=carry\\n                \\n            val=ans%10\\n            carry=ans//10\\n            curr.next=ListNode(val)\\n            curr=curr.next\\n                \\n        return sol.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 666314,
                "title": "java-recursive-solution-and-2-iterative-solutions-with-space-complexity-o-m-n-and-o-1",
                "content": "**Recursive solution**\\n\\nclass Solution {\\n\\n    int carry = 0;\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n        if(l1 == null && l2 == null)\\n            return null;\\n        int x = l1 != null ? l1.val : 0;\\n        int y = l2 != null ? l2.val : 0;\\n        int sum = x + y + carry;\\n        carry = sum / 10;\\n        ListNode result = new ListNode(sum % 10);\\n        l1 = (l1 != null) ? l1.next : null;\\n        l2 = (l2 != null) ? l2.next : null;    \\n        result.next = addTwoNumbers(l1, l2);\\n        if(result.next == null && carry > 0)\\n            result.next = new ListNode(1);\\n            \\n        return result;\\n    }\\n}\\n\\nTime Complexity:        O(max(m,n))   \\nSpace Complexity:      O(max(m,n))   \\n\\n\\n**Iterative Solution by creating a new LinkedList**\\n\\nclass Solution {\\n    \\n     ListNode result = new ListNode(0);\\n     ListNode curr = result;\\n    \\n    void push(int data)\\n    {\\n        ListNode n = new ListNode(data);\\n        curr.next = n;\\n        curr = curr.next;\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n   \\n        if(l1 == null)\\n            return l2;\\n        if(l2 == null)\\n            return l1;\\n        \\n        int sum = 0, carry = 0;\\n        \\n        while(l1 != null && l2 != null)\\n        {\\n            sum = l1.val + l2.val + carry;\\n            carry = sum/10;\\n            push(sum % 10);\\n            l1 = l1.next;\\n            l2 = l2.next;\\n            \\n        }\\n        while(l1 != null)\\n        {\\n            sum = l1.val + carry;\\n            carry = sum/10;\\n            push(sum % 10);\\n            l1 = l1.next;\\n        }\\n        while(l2 != null)\\n        {\\n            sum = l2.val + carry;\\n            carry = sum/10;\\n            push(sum % 10);\\n            l2 = l2.next;\\n        }\\n        if(carry > 0)\\n            push(carry);\\n        \\n        \\n        return result.next;\\n    }\\n}\\n\\nTime Complexity : O(max(m,n))\\nSpace Complexity : O(max(m,n))\\n\\n**Iterative approach by modifying existing LinkedList**\\n\\nclass Solution {\\n    \\n    int carry = 0;\\n    ListNode result = null;\\n    ListNode curr = null;\\n    \\n    int getSize(ListNode temp)\\n    {\\n        int length = 0;\\n        while(temp != null)\\n        {\\n            length++;\\n            temp = temp.next;\\n        }\\n        return length;\\n    }\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n    \\n        if(l1 == null)\\n            return l2;\\n        if(l2 == null)\\n            return l1;\\n        \\n        if(getSize(l2) > getSize(l1))\\n        {\\n            ListNode temp = l1;\\n            l1 = l2;\\n            l2 = temp;\\n        }\\n        result = l1;\\n        ListNode prevl1 = l1;\\n        \\n        while(l1 != null)\\n        {\\n            int x = l1.val;\\n            int y = l2 != null ? l2.val : 0;\\n            int sum = x + y + carry;\\n            carry = sum/10;\\n            sum = sum%10;\\n            l1.val = sum;\\n            prevl1 = l1;\\n            l1 = l1.next;\\n            if(l2 != null)\\n               l2 = l2.next;\\n        }\\n        if(carry > 0)\\n        {\\n            prevl1.next = new ListNode(carry);\\n        }\\n      return result;\\n    }\\n}\\n\\nTime Complexity:  O(max(m,n))\\nSpace Complexity :  O(1)",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Iterator"
                ],
                "code": "class Solution {\\n\\n    int carry = 0;\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n        if(l1 == null && l2 == null)\\n            return null;\\n        int x = l1 != null ? l1.val : 0;\\n        int y = l2 != null ? l2.val : 0;\\n        int sum = x + y + carry;\\n        carry = sum / 10;\\n        ListNode result = new ListNode(sum % 10);\\n        l1 = (l1 != null) ? l1.next : null;\\n        l2 = (l2 != null) ? l2.next : null;    \\n        result.next = addTwoNumbers(l1, l2);\\n        if(result.next == null && carry > 0)\\n            result.next = new ListNode(1);\\n            \\n        return result;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 650786,
                "title": "1e-30-is-outside-the-range-of-representable-values-of-type-long-long-solution-cpp",
                "content": "This is my code for adding and reversing a linked list. But I am getting an error like \"1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\" . Can anyone help me out of this one?\\n~~~\\nclass Solution {\\npublic:\\n    ListNode* ReverseList(ListNode* l1)\\n    {\\n        ListNode* current = l1;\\n        ListNode* prev = NULL;\\n        ListNode* next=NULL;\\n        \\n        while(current != NULL)\\n        {\\n            next = current->next;\\n            current->next = prev;\\n            prev = current;\\n            current=next;\\n        }\\n        \\n        return prev;\\n        \\n    }\\n    \\n    int LengthofLinkedlist(ListNode* l1)\\n    {\\n        ListNode* current = l1;\\n        int count=0;\\n        while(current != NULL)\\n        {\\n            count++;\\n            current = current->next;\\n        }\\n        return count;\\n    }\\n    \\n   long long int getNumbers(ListNode* l1, long double length)\\n    {\\n        long long int number=0;\\n        long long int count=0;\\n        long long int size = length-1;\\n        ListNode* current = l1;\\n        \\n        while(size >= 0)\\n        {\\n           number = current -> val;\\n           count += number * pow(10,size);\\n            size--;\\n            current = current->next;\\n        }\\n        \\n        return count;\\n    }\\n    \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        \\n        l1 = ReverseList(l1);\\n        l2 = ReverseList(l2);\\n        long int size1= LengthofLinkedlist(l1);\\n        long long int size2= LengthofLinkedlist(l2);\\n        long long int num1 = getNumbers(l1,size1);\\n        long long int num2 = getNumbers(l2,size2);\\n        long long int res = num1 + num2;\\n        string s = to_string(res);\\n        reverse(s.begin(), s.end());\\n        int size = s.length();\\n        int i=0;\\n        ListNode* l3 = new ListNode();\\n        ListNode* dup = new ListNode();\\n        l3->next = NULL;\\n        dup = l3;\\n        while(i <= size-1)\\n        {\\n            ListNode* list =new ListNode();\\n            list->val = (int)s[i] - 48;\\n            list->next = NULL;\\n            dup->next = list;\\n            dup = list;\\n            if(i == 0)\\n            {\\n               l3->next = dup;    \\n            }\\n            \\n            i++;\\n        }\\n        \\n        l3 = l3->next;\\n        return l3;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    ListNode* ReverseList(ListNode* l1)\\n    {\\n        ListNode* current = l1;\\n        ListNode* prev = NULL;\\n        ListNode* next=NULL;\\n        \\n        while(current != NULL)\\n        {\\n            next = current->next;\\n            current->next = prev;\\n            prev = current;\\n            current=next;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 612963,
                "title": "c-accepted-simple-clean-and-readable",
                "content": "```\\npublic class Solution\\n{\\n\\tpublic ListNode AddTwoNumbers(ListNode l1, ListNode l2)\\n\\t{\\n\\t\\tListNode head = null;\\n\\t\\tListNode trav = null;\\n\\n\\t\\tvar carry = 0;\\n\\n\\t\\twhile (l1 != null || l2 != null || carry > 0)\\n\\t\\t{\\n\\t\\t\\tvar digit1 = l1 != null ? l1.val : 0;\\n\\t\\t\\tvar digit2 = l2 != null ? l2.val : 0;\\n\\n\\t\\t\\tvar sum = digit1 + digit2 + carry;\\n\\t\\t\\tvar digit3 = sum % 10;\\n\\n\\t\\t\\tif (head == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\thead = trav = new ListNode(digit3);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\ttrav.next = new ListNode(digit3);\\n\\t\\t\\t\\ttrav = trav.next;\\n\\t\\t\\t}\\n\\n\\t\\t\\tcarry = sum / 10;\\n\\n\\t\\t\\tl1 = l1 != null ? l1.next : null;\\n\\t\\t\\tl2 = l2 != null ? l2.next : null;\\n\\t\\t}\\n\\n\\t\\treturn head;\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution\\n{\\n\\tpublic ListNode AddTwoNumbers(ListNode l1, ListNode l2)\\n\\t{\\n\\t\\tListNode head = null;\\n\\t\\tListNode trav = null;\\n\\n\\t\\tvar carry = 0;\\n\\n\\t\\twhile (l1 != null || l2 != null || carry > 0)\\n\\t\\t{\\n\\t\\t\\tvar digit1 = l1 != null ? l1.val : 0;\\n\\t\\t\\tvar digit2 = l2 != null ? l2.val : 0;\\n\\n\\t\\t\\tvar sum = digit1 + digit2 + carry;\\n\\t\\t\\tvar digit3 = sum % 10;\\n\\n\\t\\t\\tif (head == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\thead = trav = new ListNode(digit3);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\ttrav.next = new ListNode(digit3);\\n\\t\\t\\t\\ttrav = trav.next;\\n\\t\\t\\t}\\n\\n\\t\\t\\tcarry = sum / 10;\\n\\n\\t\\t\\tl1 = l1 != null ? l1.next : null;\\n\\t\\t\\tl2 = l2 != null ? l2.next : null;\\n\\t\\t}\\n\\n\\t\\treturn head;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 492168,
                "title": "simple-java-while-loop-solutions-clean-code",
                "content": "```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode head = new ListNode(-1);\\n        ListNode iterator = head;\\n        int carry = 0;\\n        \\n        while(l1 != null | l2 != null) {\\n            int val1 = l1 != null ? l1.val : 0;\\n            int val2 = l2 != null ? l2.val : 0;\\n            int sum = val1 + val2 + carry;\\n            int currentDigit = sum % 10;\\n        \\n            carry = sum / 10;\\n            \\n            iterator.next = new ListNode(currentDigit);\\n            iterator = iterator.next;\\n            \\n            if (l1 != null) l1 = l1.next;\\n            if (l2 != null) l2 = l2.next;\\n        }\\n        \\n        if (carry != 0) iterator.next = new ListNode(carry);\\n        \\n        return head.next;\\n    }\\n}\\n```\\nTime Complexity: O(n)\\nSpace Complexity: O(n)\\n\\nThanks to Carti!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode head = new ListNode(-1);\\n        ListNode iterator = head;\\n        int carry = 0;\\n        \\n        while(l1 != null | l2 != null) {\\n            int val1 = l1 != null ? l1.val : 0;\\n            int val2 = l2 != null ? l2.val : 0;\\n            int sum = val1 + val2 + carry;\\n            int currentDigit = sum % 10;\\n        \\n            carry = sum / 10;\\n            \\n            iterator.next = new ListNode(currentDigit);\\n            iterator = iterator.next;\\n            \\n            if (l1 != null) l1 = l1.next;\\n            if (l2 != null) l2 = l2.next;\\n        }\\n        \\n        if (carry != 0) iterator.next = new ListNode(carry);\\n        \\n        return head.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 468242,
                "title": "easy-to-follow-python3-solution-faster-than-96-memory-usage-less-than-100",
                "content": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        r = None\\n        p = None\\n        c = 0\\n        while l1 or l2 or c != 0:\\n            v = (l1.val if l1 else 0) + (l2.val if l2 else 0) + c\\n            c = v // 10\\n            n = ListNode(v % 10)\\n            if r is None:\\n                r = n\\n            if p is not None:\\n                p.next = n\\n            p = n\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n        return r\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        r = None\\n        p = None\\n        c = 0\\n        while l1 or l2 or c != 0:\\n            v = (l1.val if l1 else 0) + (l2.val if l2 else 0) + c\\n            c = v // 10\\n            n = ListNode(v % 10)\\n            if r is None:\\n                r = n\\n            if p is not None:\\n                p.next = n\\n            p = n\\n            l1 = l1.next if l1 else None\\n            l2 = l2.next if l2 else None\\n        return r\\n```",
                "codeTag": "Java"
            },
            {
                "id": 449594,
                "title": "easy-to-understand-c-solution",
                "content": "Runtime: 20 ms, faster than 88.74% of C++ online submissions for Add Two Numbers.\\nMemory Usage: 10.4 MB, less than 56.57% of C++ online submissions for Add Two Numbers.\\n\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    \\n        ListNode* dummy = new ListNode(0);\\n        ListNode* tail = dummy;\\n        int carry = 0;\\n        \\n        ListNode* ptr1 = l1;\\n        ListNode* ptr2 = l2;\\n        \\n        while(ptr1 && ptr2)\\n        {\\n            int sum = (ptr1->val + ptr2->val + carry);\\n            carry = sum/10;\\n            tail->next = new ListNode(sum%10);\\n            \\n            tail = tail->next;\\n            ptr1 = ptr1->next;\\n            ptr2 = ptr2->next;\\n        }\\n        \\n        while(ptr1)\\n        {\\n            int sum = ptr1->val + carry;\\n            carry = sum/10;\\n            tail->next = new ListNode(sum%10);\\n            \\n            tail = tail->next;\\n            ptr1 = ptr1->next;\\n        }\\n        \\n        while(ptr2)\\n        {\\n            int sum = ptr2->val + carry;\\n            carry = sum/10;\\n            tail->next = new ListNode(sum%10);\\n            \\n            tail = tail->next;\\n            ptr2 = ptr2->next;\\n        }\\n        \\n        if(carry)\\n            tail->next = new ListNode(carry);\\n        return dummy->next;\\n    }\\n};",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n    \\n        ListNode* dummy = new ListNode(0);\\n        ListNode* tail = dummy;\\n        int carry = 0;\\n        \\n        ListNode* ptr1 = l1;\\n        ListNode* ptr2 = l2;\\n        \\n        while(ptr1 && ptr2)\\n        {\\n            int sum = (ptr1->val + ptr2->val + carry);\\n            carry = sum/10;\\n            tail->next = new ListNode(sum%10);\\n            \\n            tail = tail->next;\\n            ptr1 = ptr1->next;\\n            ptr2 = ptr2->next;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 267211,
                "title": "python-concise-solution-beats-95",
                "content": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        left = 0\\n        dummy = cur = ListNode(-1)\\n        while l1 or l2 or left:\\n            left, sm = divmod(sum(l and l.val or 0 for l in (l1, l2)) + left, 10)\\n            cur.next = cur = ListNode(sm)\\n            l1 = l1 and l1.next\\n            l2 = l2 and l2.next\\n        return dummy.next\\n```",
                "solutionTags": [
                    "Python",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        left = 0\\n        dummy = cur = ListNode(-1)\\n        while l1 or l2 or left:\\n            left, sm = divmod(sum(l and l.val or 0 for l in (l1, l2)) + left, 10)\\n            cur.next = cur = ListNode(sm)\\n            l1 = l1 and l1.next\\n            l2 = l2 and l2.next\\n        return dummy.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 253942,
                "title": "golang-12ms-100-00-5mb",
                "content": "```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tresult := &ListNode{}\\n\\tcurrent := result\\n\\teach_sums := 0\\n\\n\\tfor l1 != nil || l2 != nil || each_sums != 0{\\n\\t\\tif l1 != nil{\\n\\t\\t\\teach_sums += l1.Val\\n\\t\\t\\tl1 = l1.Next\\n\\t\\t}\\n\\t\\tif l2 != nil{\\n\\t\\t\\teach_sums += l2.Val\\n\\t\\t\\tl2 = l2.Next\\n\\t\\t}\\n\\t\\tcurrent.Next = &ListNode{Val: each_sums % 10}\\n\\t\\teach_sums /= 10\\n\\t\\tcurrent = current.Next\\n\\t}\\n\\n\\treturn result.Next\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tresult := &ListNode{}\\n\\tcurrent := result\\n\\teach_sums := 0\\n\\n\\tfor l1 != nil || l2 != nil || each_sums != 0{\\n\\t\\tif l1 != nil{\\n\\t\\t\\teach_sums += l1.Val\\n\\t\\t\\tl1 = l1.Next\\n\\t\\t}\\n\\t\\tif l2 != nil{\\n\\t\\t\\teach_sums += l2.Val\\n\\t\\t\\tl2 = l2.Next\\n\\t\\t}\\n\\t\\tcurrent.Next = &ListNode{Val: each_sums % 10}\\n\\t\\teach_sums /= 10\\n\\t\\tcurrent = current.Next\\n\\t}\\n\\n\\treturn result.Next\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 218424,
                "title": "rust-8ms",
                "content": "![image](https://assets.leetcode.com/users/maksym_hryhoriev/image_1547402717.png)\\n\\nThe code is not nice but I\\'d like to work with parent/child links in Rust\\n\\n```\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut one = l1.unwrap();\\n        let mut two = l2.unwrap();\\n        let mut root = ListNode::new(0);\\n\\n        let mut res = Solution::make_node(one.val + two.val);\\n        root.next.get_or_insert(Box::new(res.0));\\n\\n        let mut curr = &mut root.next;\\n\\n        while one.next.is_some() || two.next.is_some() {\\n            match curr {\\n                None => break,\\n                Some(now) => {\\n                    one = one.next.or(Some(Box::new(ListNode::new(0)))).unwrap();\\n                    two = two.next.or(Some(Box::new(ListNode::new(0)))).unwrap();\\n\\n                    res = Solution::make_node(one.val + two.val + res.1);\\n\\n                    now.next.get_or_insert(Box::new(res.0));\\n                    curr = &mut now.next;\\n                }\\n            }\\n        }\\n\\n        if res.1 > 0 {\\n            if let Some(now) = curr {\\n                now.next.get_or_insert(Box::new(ListNode::new(res.1)));\\n            }\\n        }\\n\\n        root.next\\n    }\\n\\n    fn make_node(mut result: i32) -> (ListNode, i32) {\\n        let single;\\n        if result > 9 {\\n            single = 1;\\n            result = result - 10;\\n        } else {\\n            single = 0;\\n        }\\n        (ListNode::new(result), single)\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut one = l1.unwrap();\\n        let mut two = l2.unwrap();\\n        let mut root = ListNode::new(0);\\n\\n        let mut res = Solution::make_node(one.val + two.val);\\n        root.next.get_or_insert(Box::new(res.0));\\n\\n        let mut curr = &mut root.next;\\n\\n        while one.next.is_some() || two.next.is_some() {\\n            match curr {\\n                None => break,\\n                Some(now) => {\\n                    one = one.next.or(Some(Box::new(ListNode::new(0)))).unwrap();\\n                    two = two.next.or(Some(Box::new(ListNode::new(0)))).unwrap();\\n\\n                    res = Solution::make_node(one.val + two.val + res.1);\\n\\n                    now.next.get_or_insert(Box::new(res.0));\\n                    curr = &mut now.next;\\n                }\\n            }\\n        }\\n\\n        if res.1 > 0 {\\n            if let Some(now) = curr {\\n                now.next.get_or_insert(Box::new(ListNode::new(res.1)));\\n            }\\n        }\\n\\n        root.next\\n    }\\n\\n    fn make_node(mut result: i32) -> (ListNode, i32) {\\n        let single;\\n        if result > 9 {\\n            single = 1;\\n            result = result - 10;\\n        } else {\\n            single = 0;\\n        }\\n        (ListNode::new(result), single)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1568016,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1570234,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1564977,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1567355,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1564714,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1565931,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1566844,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1565850,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1565584,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1565094,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1568016,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1570234,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1564977,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1567355,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1564714,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1565931,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1566844,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1565850,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1565584,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1565094,
                "content": [
                    {
                        "username": "davidmariluch",
                        "content": "Does anyone else think the ListNode class given is absolute trash? It isn\\'t a Java class in the Java 8 or 9 library. It has no class methods. It\\'s not static. So accessing anything in it is just a crap shoot trial and error? Who made this trash problem?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@yo-mama](/yo-mama) you are reading too much into this. I\\'m definitely not arguing with the creators of Java. In fact, this problem is language agnostic. You can implement the solution in any language. What would be the point of a problem which was adding two numbers with built in language functionality? This is just a simple problem to see if you can navigate a simple data structure and if you can find a solution passed the naive way of converting the lists into numeric variables, which is the reason they made the input numbers 100 digits long instead of 10. Also, this problem does not require substraction, multiplication, etc. if that was the case, then yeah, it\\'d require a more complicated data structure. I think the reason for using the given ListNode instead of an array is to really lead people to a very specific implementation, which, for example, doesn\\'t require knowing the length of the list nor accessing the elements in a different order than they are given."
                    },
                    {
                        "username": "yo-mama",
                        "content": "[@FXCastells](/FXCastells) There is something called BigInteger (in java) which probably has everything you'd need. Plus, remainder, division, multiplication.... Uses an int array behind the scenes. So I guess whoever made it thought an array was better than a linkedlist for some reason. If I were you I wouldn't be arguing with the people who wrote the language XD. (unless you have some serious evidence to back up your claims)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@bbryan1294](/bbryan1294) \"When do we ever NEED a Linked List for integers, lmao this shit is ancient\" -> To add integers of an arbitrary large number of digits (in this problem, the input integers can have up to 100 digits, but they could have thousands). "
                    },
                    {
                        "username": "glass_box",
                        "content": "I know this comment is ancient, but I\\'m commenting for future posterity. The exercise is applicable to all languages, not just Java 8 or 9... Think back to your intro to algorithms and data structures class with singly linked lists. This is an exercise in the most basic premise of storing data at a node object, and traversing the singly linked list. It doesn\\'t have any methods because it doesn\\'t need any for the problem at hand. This problem is an exercise in basic traversal. If you know how to solve the problem, then you\\'ll also know how to implement the class methods that have been excluded from this ListNode class. It\\'s not a trash problem, it\\'s an exercise in a fundamental data structure and traversal of that data structure."
                    },
                    {
                        "username": "twelve17",
                        "content": "[@elzazo](/elzazo) Indeed, but the exercise function expects a ListNode class as a return value. So you cannot check the validity of the function unless you construct the class. So you must get into language-specific tangents.  And, at least for JS, it\\'s a pretty odd implementation. I\\'m stuck basically trying to go back to old JavaScript \"this\" gymnastics."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "When do we ever NEED a Linked List for integers, lmao this shit is ancient "
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "we need to modify that class "
                    },
                    {
                        "username": "elzazo",
                        "content": "the point of the exercize is in the algorithm, not the given class..."
                    },
                    {
                        "username": "dabiggmoe",
                        "content": "I cannot pass this test case\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nmy answer is = [8,9,8,5]\\n\\nBut my submission is failing, saying the expected result is [7,0,4,0,1]\\n\\nAm I missing anything? How can I report this test case?"
                    },
                    {
                        "username": "counterhash",
                        "content": "[@LMS5400](/LMS5400) Description says the numbers are stored in reverse, so it\\'s 942 + 9465"
                    },
                    {
                        "username": "LMS5400",
                        "content": "249 + 5649 = 5898\n\n70401 is incorrect and this problem is stupid af.\n\nplease upvote this is you hate grinding leetcode for job interviews."
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "reverse the lists and do addition and reverse the list"
                    },
                    {
                        "username": "1207_ganesh",
                        "content": "expected result is write"
                    },
                    {
                        "username": "alexfromapex",
                        "content": "I thought one of the test cases was broken but I actually just needed to click \"use test case\" for the broken one and I figured out the issue there was a bug hiding."
                    },
                    {
                        "username": "0J_",
                        "content": "You can easily fix this using recursion \n\n`\n    \n    def getListSum(self, nums, multiplier = 1, value = 0):\n        if not len(nums): \n            return value\n        else:\n            value = (nums[0]*multiplier)+value\n        \n        return self.getListSum(nums[1:], multiplier*10, value)\n     \n`"
                    },
                    {
                        "username": "pc1480",
                        "content": "[@acho706](/acho706) you do not have to reverse the given numbers. like we do addition from least sig dig(LSD) to most sig. digit(MSD) , Leetcode has made our work simpler and already given us the pointer to LSD."
                    },
                    {
                        "username": "acho706",
                        "content": "[@vinaychandramola123](/vinaychandramola123) I\\'m pretty sure he got the question. It is LeetCode\\'s error here. When we\\'re trying to reverse 249 to 942 its not working for whatever reason and it stays at 249, I debugged it and it refuses to reverse. We\\'re solving it correctly Im pretty sure"
                    },
                    {
                        "username": "atiqur",
                        "content": "[@bateller1991](/bateller1991) no it\\'s your error - read the question carefully."
                    },
                    {
                        "username": "JohnsonNyamweya",
                        "content": "First, reverse both L1 and L2, add them together and finally reverse the sum you\\'ve found."
                    },
                    {
                        "username": "vinaychandramola123",
                        "content": "l1 =[2,4,9]\\nll representation = 2->4->9->NULL; \\n\\nl2 =[5,6,4,9]\\nll represenation = 5->6->4->9->NULL;\\n\\nThe two No. represented by ll are 942 and 9465\\n942 + 9465 = 10407;  { Here the sol which we will get in form of linked list is read from backward} \\n\\nHow the sum is calculated\\n\\n2+5=7 (carry=0)\\n\\nans     7-> \\n\\n4+6=10 (carry=1)\\nans    7->0->\\n\\n9+4+carry=14  (carry=1)\\n\\nans  7->0->4->\\n\\n0+9+carray (carry=1)\\n ans  7->0->4->0->1(carry)->null    { we will add carry to linked list beacuse we have itterated both the ll) \\n\\nI hope this help :)"
                    },
                    {
                        "username": "SrivathsG",
                        "content": "[@roclimber1](/roclimber1) you do the sum from right to left so,\\n9+9= 18 ->8 and then 1 carry\\n4+4+(previous carry=1)=9\\n6+2=8\\n5+0=5\\n\\nso all together its 5898 reading from the end.\\nI hope this help :)"
                    },
                    {
                        "username": "bateller1991",
                        "content": "[@Rishabh-Saha](/Rishabh-Saha) I am so annoyed, this test case solution is when adding them in the orderthey came... 5649 + 249 not reversed, leetcode ERROR\\n"
                    },
                    {
                        "username": "Rishabh-Saha",
                        "content": "Same problem. Were you able to find an explanation for this?"
                    },
                    {
                        "username": "pranjal201",
                        "content": "Because you are adding right to left. You need to add them left to right.\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n2+5 = 7\\n6 + 4 = 10 , so 0 will remain and 1 will got to carry\\n9 + 4 + 1 = 14\\n9 + 1 = 10\\n1\\n[7,0,4,0,1]"
                    },
                    {
                        "username": "roclimber1",
                        "content": "you need to get a sum of the numbers 942 and 9465\\n\\nafter calculation, you should get 10407\\n\\nhow did you get 5898?"
                    },
                    {
                        "username": "thekipp0",
                        "content": "Getting reverse() is not a function in javascript when doing\\n\\n[1,2,3].reverse()\\n\\nbut it works in the playground..."
                    },
                    {
                        "username": "user6226e",
                        "content": "as it is not an arrray so you get the method as undefind.\\n"
                    },
                    {
                        "username": "vincy026",
                        "content": "[@hicugi](/hicugi) Thanks!"
                    },
                    {
                        "username": "hicugi",
                        "content": "Little hack - how to conver value:\\n```js\\nconst rgx = new RegExp(/\\\\\"val\\\\\"\\\\:(\\\\d+)/g);\\nconst getValue = (data) => {\\n  const string = JSON.stringify(data);\\n  const result = [];\\n\\n  let item;\\n  while ((item = rgx.exec(string))) result.push(Number(item[1]));\\n  return result;\\n};\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "[@Tetraplex](/Tetraplex)  How can I traverse this LinkedList in js?"
                    },
                    {
                        "username": "jlee474",
                        "content": "[@karakhanyant](/karakhanyant)  Yes even though in console.log the ListNode contents output exactly like an array, sooo confusing!"
                    },
                    {
                        "username": "karakhanyant",
                        "content": "Inputs in the problem are Linked Lists, not arrays, thus reverse() is not defined on them."
                    },
                    {
                        "username": "helloraa",
                        "content": "you said what now https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "[@thekipp0](/thekipp0), that is because the parameters are not real JS arrays, but are objects of type {val: 1, next: {val: 5, next: null}}"
                    },
                    {
                        "username": "goodrowj",
                        "content": "Javascript is not an actual scripting language, but a local implementation of ECMA script. Whatever rendering engine you use is potentially running a slightly different es implementation, hence your local browser running fine and their serverside (probably node) setup failing."
                    },
                    {
                        "username": "linuxjh",
                        "content": "there\\'s big input data from test case like this, with commas removed:\\n[1000000000000000000000000000001]\\n[564]\\n\\nthe test data exceeds the unsigned integer range in c++:\\nULLONG_MAX: 18446744073709551615\\n\\n"
                    },
                    {
                        "username": "faisalshowme",
                        "content": "I ended up using BigInteger to get around this in java. The problem description should indicate the size of the number isn\\'t bounded."
                    },
                    {
                        "username": "MJsMonkey",
                        "content": "For python3, if you use \\'x//10\\' instead of \\'x/10\\' it will just move the decimal over one place and not round and get rid of the remainder, keeping the value an int so you dont have any values change because of becoming a float"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "[@hkv_02](/hkv_02) Don\\'t convert it into a number. Add single digits/nodes and store them in a new linked list and return the new linked list."
                    },
                    {
                        "username": "Mirow228",
                        "content": "[@hkv_02](/hkv_02) mine does. Just don\\'t convert it"
                    },
                    {
                        "username": "ashish_sharma3001",
                        "content": "[@hkv_02](/hkv_02) bro don\\'t do it in that way. use a different approach, mine is submitted.\\ntry adding bit by bit , also storing and adding the carry and parallely forming the linked list.\\nyou can\\'t store a number of order 10 to power 30  anyway."
                    },
                    {
                        "username": "tanner0101",
                        "content": "[@RottenFishbone](/RottenFishbone) yeah I also tried implementing this as conversion to/from int first... Makes sense that you\\'d want to be able to add arbitrarily long ListNode ints together though. It\\'s the beginning of a BigNum type implementation at that point. "
                    },
                    {
                        "username": "vaibhavshamlika",
                        "content": "Have you solved this problem of too big inputs ?"
                    },
                    {
                        "username": "RottenFishbone",
                        "content": "It gets worse. There\\'s one that overflows 128-bit unsigned integers.\\nEvidently they don\\'t want you composing into an integer but to perform arithmetic in the list and carry the 1\\'s.\\nWould have been nice to mention linked lists would be arbitrarily sized but oh well. "
                    },
                    {
                        "username": "hkv_02",
                        "content": "if anyone\\'s answer is getting submitted pls reply."
                    },
                    {
                        "username": "jerry_lin",
                        "content": "Look at the example input : (2->4->3)+(5->6->4), why the output is the single link list 7->0->8. How do those numbers calculated?"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) d"
                    },
                    {
                        "username": "elmomani",
                        "content": "[@xaolincaca](/xaolincaca) I agree, because it can be read 342+465=807 AND 243+564=807! \\nreading the question thoroughly is important but I still think this example is misleading "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@Amanrathour49](/Amanrathour49) You don\\'t need to reverse the lists. Just add the digits one by one in the given order.  "
                    },
                    {
                        "username": "Amanrathour49",
                        "content": "First calculate the reverse of number formed by traversing first linked list.\\nNow Repeat same with second list .\\nthen store sum of these two numbers\\nthen reverse the sum and store as lets say temp and at last build a linked list with node values as digits of the temp .\\n"
                    },
                    {
                        "username": "Iceman86",
                        "content": "[@xaolincaca](/xaolincaca) It seems like they did it in purpose."
                    },
                    {
                        "username": "oleskaret",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) it\\'s 342+465=807, for the output, 807 reversed is 708"
                    },
                    {
                        "username": "xaolincaca",
                        "content": "It\\'s a confusing test case given the first and last digits from the 2 numbers can add up to 7. They should\\'ve updated it to something like 123 + 237 = 360"
                    },
                    {
                        "username": "user3748wT",
                        "content": "[@JiangnanPsalter](/JiangnanPsalter) :\\nStep one revers the number - \\n\\na. 243 = 342 \\nb. 564 = 465 \\n\\nsum = a + b = 342 + 465 = 807 \\nreverse the sum = 708 \\n\\nAnswer = 7 -> 0 -> 8"
                    },
                    {
                        "username": "JiangnanPsalter",
                        "content": "342 + 564 = 708. It is an easy problem."
                    },
                    {
                        "username": "sonakshi",
                        "content": "Do we need to include the cases when l1 and l2 are of different sizes ?"
                    },
                    {
                        "username": "HobbesAndCalvin",
                        "content": "yes definitely"
                    },
                    {
                        "username": "devilstea",
                        "content": "perhaps"
                    },
                    {
                        "username": "osu49elaspo9",
                        "content": "yes definitely "
                    },
                    {
                        "username": "qutab-ud-din",
                        "content": "Yes definitely"
                    },
                    {
                        "username": "ranjeet08kumar",
                        "content": "[@jinforpractice](/jinforpractice) i think no \\n"
                    },
                    {
                        "username": "jinforpractice",
                        "content": "I think it can be"
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "yep"
                    },
                    {
                        "username": "bluezone",
                        "content": "![image](https://assets.leetcode.com/users/bluezone/image_1544337912.png)\\n\\nWhy the hell do you have test cases that pass such dumbass strings. How do you expect me to parse a value that long into an Integer? Not even a Long will suffice ....\\n"
                    },
                    {
                        "username": "eklavyaghodake",
                        "content": "try BigInteger."
                    },
                    {
                        "username": "AlperenAbi",
                        "content": "[@Bricksdont](/Bricksdont) otherwise you could use BigIntegers, thats what I did\\n"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "I don\\'t know if this will help much, as it is 5 years late, but I had the same problem and thought it might help others farther down the line.\\n\\nWithout giving away the answer, The list is that long to incentivize you to find ways to parse it without directly converting it to a number. I would recommend checking the solutions tab if you are thoroughly stumped."
                    },
                    {
                        "username": "lazermax",
                        "content": "The problem description says \"You are given two non-empty linked lists representing two non-negative integers\". But with the test case that doesn\\'t fit into even Int64 these are clearly NOT integers, even though they are numbers. Please, change the problem description not to mislead anyone and add an appropriate section stating that numbers can contain any amount of digits."
                    },
                    {
                        "username": "glass_box",
                        "content": "Integer is a mathematical term to describe a whole number. There are many programming int types, but the term integer is independent of that. Shorts, Longs, Ints, uInts, whatever, they\\'re all integers i.e. Non decimal numbers."
                    },
                    {
                        "username": "user9021Uv",
                        "content": "[@Akmalismail](/Akmalismail) I think description should be updated to indicate that word integer used in mathematical sense and not in programming language sense."
                    },
                    {
                        "username": "Akmalismail",
                        "content": "things that dont fit int64 still count as integers in the real world. its not mutually exclusive. By your definition, 1 googolplex is not an integer"
                    },
                    {
                        "username": "thetenfont",
                        "content": "Totally agreed. I spent a while working on a solution that accepts only Integers and now I will need to completely scratch it."
                    },
                    {
                        "username": "sameerjauhari",
                        "content": "I tested my program in my code editor all test cases are passing but when I paste same code on LeetCode editor I am getting below error .. Any suggestion\\n\\nWARNING: A command line option has enabled the Security Manager\\nWARNING: The Security Manager is deprecated and will be removed in a future release\\njava.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Did you checkout the current version of JVM on leetcode and that if it matches your local version? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "leetcode doesnt work like your text editor"
                    },
                    {
                        "username": "sejoker",
                        "content": " From the task definition, it is clear that we should return a linked list."
                    }
                ]
            },
            {
                "id": 1570153,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1566461,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1568219,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1568203,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1570486,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1566374,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1566064,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1566458,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1566213,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1714681,
                "content": [
                    {
                        "username": "PrasadKarunagoda",
                        "content": "My approach works for reasonable input values. But my submission fails because it uses unreasonable input values in the tests. See below.\\n\\nI think it is not fair to test for these kind of unreasonable inputs without specifically mentioning them in the problem.\\n\\nRuntime Error Message: java.lang.NumberFormatException: For input string: \"1000000000000000000000000000001\"\\n  at line 68, java.base/java.lang.NumberFormatException.forInputString\\n  at line 699, java.base/java.lang.Long.parseLong\\n  at line 824, java.base/java.lang.Long.parseLong\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n  \\nLast executed input: [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]"
                    },
                    {
                        "username": "mainenak",
                        "content": "The test case input that is used to judge the submission is invalid and should be removed.  \\nCase:\\n[9]\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nThe description of the problem is as follows: \\n\\nYou are given two non-empty linked lists representing two non-negative integers.\\n\\nThats means that the input, as a whole, needs to resolve to an integer.  After reversing input value 2 (because the linked lists represent the value in reverse order), your value is 9999999991.  This is not an Integer in Java.  Java Language Specification states that the maximum value for an integer is 2147483647.  My solution is failing to submit due to this invalid case.  This test case should be removed."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) that\\'s it...only that the arrays are already aligned. "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) Ahhhh thank you! I see it now. Instead I should align the arrays, add their corresponding elements, do mod ten of the sum and place that into new array, do division by ten of that same sum and carry it over to the next place--all in that order. Thank you!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sgrxnt_30](/sgrxnt_30) well, first of all, that\\'s not the only way of adding two numbers and the programming language is irrelevant. Take a piece of paper and a pen and you\\'ll find the solution. If I ask you to add 123432323765 and 985467565 without a calculator, how will you do it? "
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@FXCastells](/FXCastells) I am having the same issue, so I was wondering...\\n\\nHow would you address this problem if the only way to get the sum of the final number is to compute the sum of l1 and l2 together? Do I need to use bit operations or something? \\n\\nAny guidance at all would help! Also, to note, I\\'m coding in C++."
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is nothing wrong with the test case. Your problem is a \"bug\" in your implementation, which doesn\\'t support arbitrarily large linked lists. The problem doesn\\'t say that the lists have a limit. You should be able to add numbers of thousands of digits with no problem. Think how you would do it...."
                    },
                    {
                        "username": "richolm",
                        "content": "Use BigIntger to handle numbers this large, depending on how you wrote this, you may have to cast back to int in some places"
                    },
                    {
                        "username": "pemcode",
                        "content": "The problem says the input represents \"two non-negative integers\".  So I converted l1 l2 to C++ int\\'s, then added them, then converted back to ListNode format.\\n\\nHowever, this didn\\'t work because one of the test cases is [1,9,9,9,9,9,9,9,9,9] which exceeds the range of int because 9999999991 is greater than 2^31 = 2147483648.\\n\\nMaybe I\\'ve spent too much of my life writing C++ code, so when I read \"integers\" I thought they actually meant \"integers\".  As in C++ int which has a max value of 2147483648.  So imho it seems like the problem should clarify that.  Or maybe I should\\'ve known what they meant idk."
                    },
                    {
                        "username": "ahmed_louati",
                        "content": "I got the same problem in C. In the ListNode struct, they are defining val variable as int! which won\\'t work for l2 number  [1,9,9,9,9,9,9,9,9,9]. Does anyone made an issue on their repo ? "
                    },
                    {
                        "username": "VernonGrant",
                        "content": "Yes, I\\'m failing on the same test in my C solution. These tests don\\'t account for overflow, but maybe I\\'m missing something."
                    },
                    {
                        "username": "taps2019",
                        "content": "HI,\\nThe test case [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\nfails because JAVASCRIPT converts the number in to 1e+30.\\nThe sum  is screwing up.\\nany Idea how to get the number from the string 1000000000000000000000000000001 as it is in the JAVASCRIPT so that can be used in correct sum;\\nThanks\\n"
                    },
                    {
                        "username": "Willyantunezg",
                        "content": "use BigInt()"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "i tried using BigInt - which works - but for some reason the interpreter doesn\\'t accept it. runs fine in my local tsc + nodejs though... \\n\"error TS2365: Operator \\'+\\' cannot be applied to types \\'BigInt\\' and \\'BigInt\\'.\" - which is garbage. \\nthis works when compiling with tsc and running with node. Their compiler is probably using some older version of TS before JS introduced BigInts\\n\\nanyway i reverted to doing it myself with basically padding both numbers as a string to the same length, iterating over the thing adding number for number - dont forget to carry over - and finally generate the ListNodes with the resulting array.\\n\\nits ugly as hell, but eh, it works\\n```\\n let carryOver = 0;\\n    for (let i=maxLength - 1 ; i !== -1; i--) {\\n        const sum = Number(paddedNumberFromList1[i]) + Number(paddedNumberFromList2[i]) + carryOver;\\n        resultSumArray.push(sum % 10);\\n        carryOver = sum >= 10 ? 1 : 0\\n    }\\n\\n    if (carryOver > 0) {\\n        resultSumArray.push(carryOver);\\n    }\\n```"
                    },
                    {
                        "username": "chymcakmilan",
                        "content": "Use Partial Sums (number by number) instead of converting the input to number that you sum together."
                    },
                    {
                        "username": "Araib_Ashif",
                        "content": "is here L1 and L2 both head of the two linked list??\\npls explain"
                    },
                    {
                        "username": "aarushpal2",
                        "content": "yeah these both point to the start of the linked lists\\n"
                    },
                    {
                        "username": "madil",
                        "content": "I need to clone an array and tried to use spread operator and slice method but both are not working."
                    },
                    {
                        "username": "roguejakkin",
                        "content": "[@Tetraplex](/Tetraplex) okay yeah but then what is it and how do we do anything with it in JS"
                    },
                    {
                        "username": "Tetraplex",
                        "content": "That\\'s because it is not an array."
                    },
                    {
                        "username": "jenil",
                        "content": "From above statement, I interpret 2>4>3 as 342 and 5>6>4 as 465.\\n\\nActually according to expected output, it should be 243 and 564. \\nPlease change the example and make question more clear."
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "question is as clear as it should be"
                    },
                    {
                        "username": "zyrastory",
                        "content": "#### **C#,Java,Python3,JavaScript different solution with explanation**\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-2-add-two-numbers-solution-and-explanation-en/)\\u2B50**\\n\\nThe submission detail (Java - faster than 97% , C# - faster than 70%)\\n![image](https://assets.leetcode.com/users/images/9bd7a6b8-7bbb-4d54-aaf5-8e049e998bd2_1654828414.9595954.png)\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n**See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-two-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Elementary Math\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "antunesleo",
                        "content": "The tip is to simulate [addition by hand](https://www.youtube.com/watch?v=Nwxa9E_X8K8) on code . The fact that the linked list is backwards only makes it easier, because on addition by hand we start from behind e.g. \n    \n```\n3¹ 4  2\n4  6  5\n---------\n8  0  7\n```\nWe can add the results for each \"column\" in the addition by hand in other linked list and return it.\n\n"
                    }
                ]
            },
            {
                "id": 1567286,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1567330,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1566525,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1807411,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1734940,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1574764,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1569373,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1569793,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1568179,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1569201,
                "content": [
                    {
                        "username": "gulzt",
                        "content": "Hi, I'm new here and I seem to get stuck on the `time limit exceeded` problem. The test case [0] [2] is supposedly the one that fails, but that one runs in 2ms when I test it locally, and succeeds.\\n\\nI improved the solution until it succeeded, but I don't understand the criteria. How can I know if it is going to run too slow if it is working fine as a test case?\\n\\nThanks in advance"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "there is something called time complexity. try to keep it under the limit and believe in god"
                    },
                    {
                        "username": "djangofan",
                        "content": "The problem description needs to be updated to be clearer.   When the problem description says \"integer\",  the problem statement should define the integer as a unconstrained number or tell the solver what the max digits of the number is.   This wasted a ton of my time trying to solve it, since a non-zero Integer number in java is between 0 and 2147483647, and there was no information in the problem description to help when my unit tests were failing.\\n\\nFor example: here is a question that DOES have the info:\\nhttps://leetcode.com/problems/reverse-integer/description/"
                    },
                    {
                        "username": "fresedo",
                        "content": "What is a \"ListNode\" for Scala? This is some custom node that can't take advantage of functional programming? Why not just use a List or how does ListNode get converted to a List?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Seeing some in the comments struggling with parsing the linked list into an integer for your respective language and running into capacity issues (e.g., a number larger than 32-bit or 64-bit integer can hold). **This is the wrong approach.**\\n\\nThink of how you learned to sum large numbers on scratch paper. Consider how you look at each column and handle carries for the next column:\\n\\n```\\n    1 1 1\\n  1 2 3 4 5\\n+     7 8 9\\n-----------\\n  1 3 1 3 4\\n```\\n\\nNow if you treat these as a linked list of numbers, starting with the least significant digit:\\n\\n```\\n           root node ---v\\nl1: 1 <- 2 <- 3 <- 4 <- 5\\nl2:           7 <- 8 <- 9\\n           root node ---^\\n```\\n\\nFlipping these lists to order left to right like in the problem statement:\\n\\n```\\n    v--- root node\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7\\n    ^--- root node\\n```\\n\\nYou can step through each node in order, and simply treat a missing node as 0 (like we do in scratch paper above):\\n\\n```\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nBe sure to keep track of carry over into next step (`T` below means `true`, `F` means `false`):\\n\\n```\\nhas carry:\\n    F    T    T    T    F\\n--------------------------\\nl1: 5 -> 4 -> 3 -> 2 -> 1\\nl2: 9 -> 8 -> 7   (0)  (0)\\n--------------------------\\n a: 4 -> 3 -> 1 -> 3 -> 1\\n```\\n\\nAs a final note, consider what happens if there is a carry when there are no more nodes in the lists, such as with:\\n\\n```\\nhas carry:\\n    F    T    T    T    T    T\\n--------------------------\\nl1: 9 -> 9 -> 9 -> 9 -> 9   (?)\\nl2: 9 -> 9 -> 9   (0)  (0)  (?)\\n--------------------------\\n a: 8 -> 9 -> 9 -> 0 -> 0 -> 1\\n```"
                    },
                    {
                        "username": "930r91na",
                        "content": "It\\'s not working for this case idk why??\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n ```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #define ll long long\\n\\nclass Solution {\\npublic:\\n    int listToInt (ListNode* l,int &unit){\\n        ll l1= 0;\\n        while (l != NULL){\\n            l1 += l->val * pow (10,unit);\\n            unit ++;\\n            l= l->next;\\n        }\\n        return l1;\\n    }\\n\\n    ListNode* intToList (int n,int digits){\\n        \\n        ListNode *header = new ListNode(0);\\n        ListNode *track= header;\\n        //check number of digits\\n        //cout<<digits;\\n        if (n>pow(10,digits)-1) {\\n            digits+=1;\\n        }\\n        //cout<<digits;\\n        //decompose the number\\n        int u;\\n        //int i=1;\\n        while (digits-- >= 1) {\\n            u = n % 10;\\n            n /= 10;\\n            track->next = new ListNode (u);\\n            track = track->next;     \\n        }\\n\\n        return header->next;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ll lnew;\\n        int unit= 0,unit2=0;\\n        lnew = listToInt(l1,unit) + listToInt(l2,unit2);\\n\\n        return intToList(lnew,max(unit,unit2));\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "mc1392",
                        "content": "It\\'s hard to tell if I am returning a LinkedList or ListNode!\\nAnyone else feel this way?"
                    },
                    {
                        "username": "houchj",
                        "content": "for the input:\\n[9,9,9,9,9,9,9,9,9,9]\\n[9,9,9,9,9,9,9,9,9,9]\\n\\nthe expected result is 19 999 999 998, however this exceeds the max value of integer in java.\\nsee this post: https://stackoverflow.com/questions/15004944/max-value-of-integer/18305427\\nthe 32 bit integer in java max value is: 2 147 483 647, so there will be a minues \"-\" before the resullt, not the test case expected.\\n\\nOr you should not say it as integer in the description, you should say it clearly that the max value it supports.\\n"
                    },
                    {
                        "username": "KateMelnykova",
                        "content": "I got confused if the output number is expected to be a linked list with digits listed in direct or reverse order.\\n\\nNo clarification in question, so I decided that direct order is expected. It appears that it is wrong.\\n\\nI want to ask LeetCode to add clarification, how should I do it?"
                    },
                    {
                        "username": "hyankov",
                        "content": "Description does not clarify whether the numbers are guaranteed to have the same number of digits."
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the 3rd test case shows that the number of digits might vary. If its not mentioned, well then its a test case that you should check."
                    },
                    {
                        "username": "bernardo2",
                        "content": "Hi, \\n\\nI had to convert the computed list into an array in order for the test to pass. This is incorrect, as the exercise expected a list as an output, not an array. Anyone else had the same issue? Wondering if this happens for javascript only.\\n\\nThanks,\\n\\n - B"
                    }
                ]
            },
            {
                "id": 1567153,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1823579,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1708984,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1570359,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1570123,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1570960,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1824518,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1756878,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1576770,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1573443,
                "content": [
                    {
                        "username": "jackjackjack",
                        "content": "Test case:\\n{9, 8}, {1}\\noutput:{9, 9}\\nexpected{0, 9}\\n\\n98+1=99.\\nhow come it expects 90?"
                    },
                    {
                        "username": "user1046K",
                        "content": "Remember the numbers are in reverse order so it\\'s atually 89 + 1 = 90 as represented by {0,9}"
                    },
                    {
                        "username": "WillisLi",
                        "content": "Pointless question for a JavaScript developer, given that JavaScript doesn\\'t actually use pointers nor references. The solution/logic itself isn\\'t difficult, it\\'s just that I found myself spending an hour trying to understand this class\\'s behavior/returns and searching for the correct syntax to fit my needs. Horrible question for a JS developer, in my opinion, this is not something you would ever encounter in the field and it goes against how a JavaScript developer should think. This problem forces you to think and solve it in a very specific way, which I am not fond of. You obviously can\\'t utilize any JavaScript methods on this data structure because this is an emulated linked-list class. If you\\'re using JavaScript for this problem, the only thing \"JavaScript\" about it is the language. That\\'s it. JS Methods and concepts don\\'t apply. This is much less an algorithm problem and more so a test on your computer science knowledge/understanding of pointers.\\n\\nNotes:\\nThe fact that it\\'s reversed doesn\\'t matter because the output is also reversed.\\nIt\\'s a basic algebra problem, the only troublesome part is incorporating the linked-list/ListNode class in your solution."
                    },
                    {
                        "username": "bbryan1294",
                        "content": "I don\\'t even understand the problem description, much less why this would be number 2. I\\'m struggling trying to grasp why we need Linked Lists for such a silly problem. It seems like your problems have an audience much too narrow for computer science. I have never ran into problems like this in real life and they force you to solve them in specific ways, which makes it difficult to be creative. tldr: boring and impractical problem. "
                    },
                    {
                        "username": "Ghanender",
                        "content": "I want to use len() but unable to use on listnode datatype how can i conver it to list or calculate the length of listnode"
                    },
                    {
                        "username": "IICuttingEdgeII",
                        "content": "So for the case:\\nInput: [1, 8] \\n\\t\\t   [0]\\nWhy is the output supposed to be [1, 8]? Surely it should be [8, 1] as you reverse them? Have I read the question wrong?\\t\\t   \\n\\t\\t"
                    },
                    {
                        "username": "shishkabob50",
                        "content": "Can someone explain to me why \\ninput:\\n[1,8]\\n[0]\\n is \\nExpected:\\n[1,8]\\n\\n\\nand not [8,1]"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "because the result needs to be reversed too\n81 + 0 = 81\n\nif you do it efficiently, you dont even have to reverse it, it will be the result of the iteration."
                    },
                    {
                        "username": "NightshadeCode",
                        "content": "I love how the inputs are list while they give us listnodes"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s how linked lists work. You get a reference to the first node and you navigate to the other \"linked\" nodes following the \"next\" property."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel \\uD83D\\uDC49 https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/HjM-stebLWo"
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "This was incredible helpful! Adding reverse using remainder was something I never thought of. Thanks again!"
                    },
                    {
                        "username": "rajeshaanand",
                        "content": "var addTwoNumbers = function(l1, l2) {\\n    let ReveseSum=parseInt(l1.reverse().join(\\'\\')) + parseInt(l2.reverse().join(\\'\\'));\\n    console.log(ReveseSum.toString().split(\\'\\').reverse());\\n};\\naddTwoNumbers([2,4,3],[5,6,4]);\\n"
                    },
                    {
                        "username": "kristenpeng6765",
                        "content": "\\nOcaml\\nlet rec add (l1,l2) m = \\nmatch (l1,l2) with\\n|[],[]->if m=1 then [m] else []\\n|(x::xs, y::ys)-> if (x+y+m)>10 then (add (xs,ys) 1)@[x+y+m]\\nelse (add (xs,ys) 0)@[x+y+m]1\\nin add (l1,l2) 0 ;;"
                    }
                ]
            },
            {
                "id": 1571973,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 1570959,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 1568795,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 1568796,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 1568794,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 1875670,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 1566832,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 2068652,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 1948113,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 1896294,
                "content": [
                    {
                        "username": "decimalst",
                        "content": "Can we assume both lists are the same length?"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "no."
                    },
                    {
                        "username": "dasqueel",
                        "content": "I have a solution in python and try to test it with:\\n\\n\\nsol = Solution()\\nsol.addTwoNumbers([243],[564])\\n\\nI know these are lists and not linked lists, so how do I pass linked lists in to test?"
                    },
                    {
                        "username": "VijayKumarHackr",
                        "content": "[0_1478703091933_2.add-two-nums.py](/uploads/files/1478703092241-2.add-two-nums.py)\\n\\nWhere am I doing it wrong in the above code??"
                    },
                    {
                        "username": "agrawalm",
                        "content": "My very first practice code involved converting each list to a long number and adding them and converting it back to list and returning. Basically two function list2num and num2list. It worked, and my solution got accepted too. However, when I tried with following input, my solution failed. So, I think another test case can be added here:\\n\\n[2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9]\\n[5,6,4,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,2,4,3,9,9,9,9]\\n\\nIt is basically a test for very long numbers. Please see if you think it is a good edge case. Thanks"
                    },
                    {
                        "username": "mmalek06",
                        "content": "Yeah, so I can't tell you more than you can see in this question's topic. I click on submit solution, then I can see \"Submission Result: Accepted\" so I click on the \"more details\" button and that's what I'm getting... Any help?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how nodes are added and carried:\nhttps://www.youtube.com/watch?v=Fs5xgNNoP5c"
                    },
                    {
                        "username": "tribbys",
                        "content": "Why return dummyHead.next but not curr? Why dummyHead is changed?I can not understand."
                    },
                    {
                        "username": "LMS5400",
                        "content": "I just want to point out how fucked up leet code is. The examples they give you are special cases that work forward and back. reading the stupid problem is not helpful in most cases, I go by example and when you have special cases they start off with incorrect assumptions. This just proves the entire concept of leetcode is GOTCHA the clown shit. \n\n243+564 = 342 + 465\n\nboth are 807\n\nso fkin dumb.\n"
                    },
                    {
                        "username": "saadol",
                        "content": "my code is working on vs code but i get this error here: \\nLine 30: Char 17: runtime error: signed integer overflow: -1094795586 * 10 cannot be represented in type \\'int\\' [solution.c]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Try in VS code with input numbers of 100 digits. My guess is that it won\\'t work there either."
                    },
                    {
                        "username": "CesarAVG",
                        "content": "We have the class definition for the node, but not the list. I guess this is where we get intuitive?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no need for a list class. The list is just one node after the other, so you only need the first node to get the full list. "
                    }
                ]
            },
            {
                "id": 1872452,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1835869,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1803452,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1746813,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1672652,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1671282,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1576927,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1576728,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1576676,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1576645,
                "content": [
                    {
                        "username": "satarhassni0",
                        "content": "It seems that being in reverse helps due to the nature of addition."
                    },
                    {
                        "username": "amirrahman132132",
                        "content": "why not they just give a simple array and take output as simple array , its more work on understanding how to iterate this ListNode rather than focusing on the actual task for example i have tried ( l1.length , for( p1 of l1 ) , etc ) its all undefined or throws some error , i came here for my coding exercise and not for digging into how to iterate this ugly listNode .this test is just a waste of time and the company guy who made such challege should be removed asap !"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "there are times where you dont know how many elements there are, so you use LinkedLists for an indefinite amount of elements. And this exercise wants you to work with them and get familiar with traversing LinkedLists."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Looks like someone can\\'t take truth bombs."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) nah, you are not giving advice, you are just rude. I hope that with some experience you will reevaluate this idea that the number of lines of code is stupid. Any developer with a minimum experience knows that to achieve high performance you normally have to pay the price of lower code readability. But you should only do that when the performance gain is worth it and it rarely is. Simple code beats complex code most of the time even if the complex code performs better. In any case, instead of talking trash, why don\\'t you post some code in C# that performs good? I just submitted a code that simply traverses the two lists and it took 137 ms, so again, it doesn\\'t seem that these metrics are very reliable. "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Dear bro  I didn't felt better at your expense instead felt  disappointed since c# is faster than java. Sometimes giving advice is not an act of mockery instead is an act of constructive criticism.  \n\nAnalysing the solution with the count of lines of code is truly a stupid way to analyse the efficiency of code."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@myselfakashagarwal](/myselfakashagarwal) I\\'m happy for you that you can feel better at my expense. Although, I didn\\'t try to optimise for speed or memory, I just wrote the solution in a few minutes and then simplified the code, which is just 4 lines of code. I can give it a go, but I don\\'t know how reliable these metrics are...specially comparing two different frameworks. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that would defeat the point of the exercise. This is not an exercise about converting arrays of digits to integers. It\\'s an exercise about traversing link lists and opearting with the nodes. Your solutions don\\'t work because instead of solving the given exercise you are solving the exercise that you would like it to be. I encourange you to read the description again and give it a go. If you can\\'t figure it out, look at the solutions and understand them. Knowing how to solve this exercise is a very good skill to have.  "
                    },
                    {
                        "username": "andtey99399",
                        "content": "what the freak invented ListNode? only problems from this useless shit"
                    },
                    {
                        "username": "sachingg",
                        "content": "For Test Case 1 : l1 = [2,4,3], l2 = [5,6,4]\\nI have put a loop to check for l1 and l2. Surprisingly it gives very different result. See below\\nCode is in Go\\n\\nl1 0xc000010340 l2 0xc000010370 l1.Val 2 , L2.Val 5 \\nl1 0xc000010350 l2 0xc000010380 l1.Val 4 , L2.Val 6 \\nl1 0xc000010360 l2 0xc000010390 l1.Val 3 , L2.Val 4 \\nl1 0xc0000103e0 l2 0xc0000103f0 l1.Val 0 , L2.Val 0 \\nl1 0xc000010420 l2 0xc000010490 l1.Val 9 , L2.Val 9 \\nl1 0xc000010430 l2 0xc0000104a0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010440 l2 0xc0000104b0 l1.Val 9 , L2.Val 9 \\nl1 0xc000010450 l2 0xc0000104c0 l1.Val 9 , L2.Val 9 \\n\\nAny help would be appreciated"
                    },
                    {
                        "username": "markadv",
                        "content": "Hi. I confused on this hidden test case.\\nL1 = [2,4,9]\\nL2 = [5,6,4,9]\\nExpected output = [7,0,4,0,1]\\nMy output = [8,9,8,5]\\n\\nFrom my understanding, 249+5649 = 5898\\nThen reverse it: 8985\\n\\nSo why is the expected output 70401?"
                    },
                    {
                        "username": "adam_glin",
                        "content": "You have to reverse it, so given\\nL1 = [2, 4, 9]\\nL2 = [5, 6, 4, 9]\\n\\nyou add 942 and 9462 which is 10407 and you reverse it again. So the output will be [7, 0, 4, 0, 1]"
                    },
                    {
                        "username": "oritzau",
                        "content": "Getting this error:\\n\"TypeError: argument to reversed() must be a sequence\"\\n\\nFor this line of code:\\n`for num in reversed(l1):`\\n\\nI\\'ve looked online and the only replication of this I can find is people misusing enumerate but that isn\\'t the case here. Anyone know what\\'s going on? For what it\\'s worth, I took my exact code and ran it in atom from windows command prompt and it worked fine. "
                    },
                    {
                        "username": "soniyascool",
                        "content": "We have 2 approaches \\n1. to traverse from Right->Left\\n2. to traverse from Left->Right\\nAs they have given, we have inputs as reversed LL\\nLet\\'s Add it ,as it is from Left->Right\\n\\nAlgorithmic Steps:\\n1. Create 2 Nodes dummy(to store actual summation result), Temp(which points to dummy)\\n2. Take sum=0 ,carry=0 (to hold the sum results in 2 digit )\\n3. In Loop,Check whether L1 || L2  till reaches NULL  & carry till 0\\n4.  In If(LL!=NULL),Keep adding sum with L1->val & move to next node; applies same for L2 \\n5. Keep adding sum with carry.\\n6. Get carry by sum/10\\n7. Create new node by obtaining modulus of sum\\n8. Assign temp->next =node;   temp = temp->next;\\n9. Return dummy->next;\\n              \\n\\t\\t\\t\\t\\n\\n"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    },
                    {
                        "username": "nwjt22",
                        "content": "Im using java, ListNode violates nearly every OOP on the books.  Accessing members directly, no get/set.  I didnt have an issue solving, I had an issue trying to figure out how to use this built in junk they supplied.\\nThis problem is best solved with primitive arrays and that is how really good Multiple Precision libraries are written anyways.  There is absolutely no reason to use a linked list to solve a problem like this."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/add-two-numbers-linked-list-python-leetcode-solutions/\\n"
                    }
                ]
            },
            {
                "id": 1576485,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1576160,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1574704,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1574168,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1574124,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1574058,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1573430,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1572945,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1572770,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1572605,
                "content": [
                    {
                        "username": "joannadeng",
                        "content": "the given input are two list, eg, l1= [2,4,3]\\u3001l2 = [5,6,4], but the parameters of the method are two LinkNode, it\\'s a node, are they the samething ? I am quite confused here, can anyone write a test of the solution help me understand ? thank you so much."
                    },
                    {
                        "username": "kingtuf",
                        "content": "I solved this problem in perhaps a \"cheat-y\" manner. Instead of getting into the math theory of the problem, I decided I would just take each of the numbers represented in the linked lists, convert them to workable numbers, add them together, and then convert the solution back into a linked list. The solution runs fairly quickly but has comparatively horrible memory usage against other solutions. Would you say that solving the problem this way is defeating the purpose of the exercise or that it is thinking outside of the box?"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "where did you store the \"workable numbers\"?. Integer, Long aren\\'t enough."
                    },
                    {
                        "username": "jchoi49",
                        "content": "![image](https://assets.leetcode.com/users/images/29996d51-940d-49d6-bdbd-439f72d69a6a_1608353122.1438425.png)\\nthe second linkedlist input has more nodes than it shows,\\nso when I print out the ListNode l2 I get 19999999991410065399 instead of 1999999999"
                    },
                    {
                        "username": "user0185g",
                        "content": "Lets consider if we have two ListNode L1 AND L2, they, are in the default order, then how are we going to resolve this.\\n\\nE.g.\\n146 + 262 = 408\\nL1: 1 -> 4 -> 6\\nL2: 2 -> 6 -> 2\\n\\nHow people think about this question, I guess what we could do is to reverse the L1, and then reverse L2, and then add them up, and then reverse the List, which takes time complexity  2 * MaxLength(L1, L2) + L1 + L2, could we make the time complexity better, any thoughts?"
                    },
                    {
                        "username": "geek_1",
                        "content": "Refer below for alternate solution which performs right to left addition in C++/Java/Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "msn_user",
                        "content": "Here\\'s solution to performs addition from right to left in C++, Java and Python:\\nhttps://www.techiedelight.com/add-two-linked-lists-without-using-extra-space/"
                    },
                    {
                        "username": "swstack",
                        "content": "Test Case:\\n[1,8]\\n[0]\\n\\nOutput:\\n[8,1]\\n\\nExpected:\\n[1,8]\\n\\nThis seems wrong, isn\\'t [8,1] correct?"
                    },
                    {
                        "username": "URBeautiful",
                        "content": "the result needs to be reversed too:\\n81 + 0 = 81\\n\\n81 + 0 != 18 (in your case)"
                    },
                    {
                        "username": "GayathriJ",
                        "content": "my code https://leetcode.com/playground/Kve433RB works perfect in my IDE but while running to submit I get below error:\\n\\n*java.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat Deserializer.toListNode(Unknown Source)\\n  at line 76, Driver.main\\n*\\nI never got this error in the playground debug too.\\nCan someone suggest a way out here."
                    },
                    {
                        "username": "famer235",
                        "content": "Why am I getting this Deserializer error when my code runs fine in Debug Playground\\n\\njava.lang.NoSuchMethodError: ListNode.deserialize(Ljava/lang/String;)LListNode;\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 76, __Driver__.main"
                    },
                    {
                        "username": "pafrias",
                        "content": "Are their nodes supposed to be this hard to work with? For the test case with no confounding factors and a single line of code, l1.val returns undefined for all nodes, l1[0] returns undefined, Object.keys(l1) returns undefined. What am I missing?\\n"
                    }
                ]
            },
            {
                "id": 1571966,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1570958,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1570961,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1570963,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1570964,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1574289,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1570962,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1575677,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1574328,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1572789,
                "content": [
                    {
                        "username": "liuyuechunxue",
                        "content": "Note when you use C or C++ or Java (any languages which you are required to specify the type of a variable), be sure to cast the \"int\" to \"long\" when you calculate the value from a list and the sum of the two values since in some situation the list is so long and the value is soo big that an \"int\" type variable cannot hold it"
                    },
                    {
                        "username": "chenyu45",
                        "content": "This question says \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\n\\nWhy is the below test case valid? Doesn't the first number contain a leading zero yet it's not the number 0?\\n\\n[0,8,6,5,6,8,3,5,7]\\n[6,7,8,0,8,5,8,9,7]"
                    },
                    {
                        "username": "ParthoBiswas007",
                        "content": "First of all sorry for this question. I just got started with Leetcode and trying my second problem.\\n\\nBut i am having some difficulty understanding the original question. Can anyone please explain to me the question with some more details and appropriate example and sample please ??  \\n\\nAnd also please explain the following specifics:\\n1. \"The digits are stored in reverse order\". What does it mean ?\\n2. \"Add the two numbers and return it as a linked list\". Which numbers\\n\\nThanks in advance."
                    },
                    {
                        "username": "wuxuecheng",
                        "content": "my own solution need 40ms or more ,  just wonder what 32ms c++ solution looks like :-)"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "my solution took 2ms \\uD83D\\uDE02 with java "
                    },
                    {
                        "username": "hu.cao1",
                        "content": "it is pretty esy to insert as head such the list is the right order."
                    },
                    {
                        "username": "atirit",
                        "content": "This testcase should be removed, or BigInt should be added to the environment."
                    },
                    {
                        "username": "iBreaker",
                        "content": "Input:\\n[1,8]\\n[0]\\nOutput: [8,1]\\nExpected: [1,8]\\n\\nI think my output is right,but expected answer is [1,8]. why?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if you add 0 to 18 the ans will be 18."
                    },
                    {
                        "username": "chappali",
                        "content": "Hi,\\n\\nCan anyone share with me a solution that does not use ListNodes class and that can run in Jupyter"
                    },
                    {
                        "username": "AKM5514",
                        "content": "https://youtu.be/jUsLKGpZ1iU\\n\\nDon\\'t forget to upvote!"
                    },
                    {
                        "username": "veryrand0m",
                        "content": "I solved question by making a new ListNode class and defining my custom methods in there (i.e. constructor, add, remove, and interating thru ListNodes).\\n\\nCan we do this, or does the problem explictly state we must use the commented out constructor and thats it?"
                    }
                ]
            },
            {
                "id": 1571941,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2076743,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2076311,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2074677,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2072997,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2069936,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2069431,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2068959,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2067846,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2065917,
                "content": [
                    {
                        "username": "xql_rooney",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682560.png)\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xql_rooney/image_1525682561.png)\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "its addition of two list from the front \\n"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        str1 = \\'\\'\\n        str2 = \\'\\'\\n        for i in l1:\\n            str1 += str(i)\\n        for j in l2:\\n            str2 += str(j)\\n        str1 = int(str1)\\n        str2 = int(str2)\\n        ans = str(str1 + str2)\\n        ans1 = []\\n        for i in ans:\\n            ans1.insert(0,int(i))\\n        return ans1 \\n\\n\\ncan any one say why l1 is not iterating"
                    },
                    {
                        "username": "gouthamkmurugan",
                        "content": "Is this code incorrect?"
                    },
                    {
                        "username": "quexo",
                        "content": "This took me 2 days to solve (without converting to an integer), but I finally got it. The carry logic was the hardest part for me."
                    },
                    {
                        "username": "ismoil98",
                        "content": "this problem has fucking bug -  I am trying to solve it with python and javascript but leetcode compiler is shouting in forEach and map higher order functions - please fix this problem"
                    },
                    {
                        "username": "Gaga_ru0i",
                        "content": "There is an error, The question expects reversed order input, and it output the sum of the reversed input, but examples show non-reversed input and it output a reversed sum of input ."
                    },
                    {
                        "username": "jorge70r63",
                        "content": "I do this in JS.\\nWorks on broswer console but not in the exersice \\n\\nvar addTwoNumbers = function(l1, l2) {\\n    const val1 = Number(l1.reverse().join(\"\"));\\n    const val2 = Number(l2.reverse().join(\"\"));\\n    const total = val1 + val2;\\n    return total.toString().split(\"\").reverse().map(str => Number(str))\\n};"
                    },
                    {
                        "username": "girish0007",
                        "content": "is reverse method not working in this example, cause I wanted to use reverse it was simpler I thought \\nbut then I realised some changes to be done as from scratch.\\n"
                    },
                    {
                        "username": "ifasoldt",
                        "content": "This question is not hard. Understanding what the heck they are asking for and describing is hard. For example, it doesn't say, \"return the numbers as a REVERSED linked list\", you have to go through the examples to realize that the answer is also supposed to be reversed.\n\nI suspect that's part of \"the point\", but IMO, unclear instructions, especially in a non-interactive format where one cannot ask clarifying questions, doesn't make a problem better, just more frustrating."
                    },
                    {
                        "username": "harshitsingh1148",
                        "content": "using py3 i got error in this case\\n l1 =[0,8,6,5,6,8,3,5,7],l2 =[6,7,8,0,8,5,8,9,7] and the right ans is [6,5,5,6,4,4,2,5,5,1] ,how is that possible?\\nhere is my code :\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n\\n \\n\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n      sum=0\\n      num1=0\\n      num2=0\\n      if l1.val==0 and l2.val==0:\\n        t=ListNode(0)\\n        return t\\n      \\n      while l1!=None:\\n        num1=num1*10+l1.val\\n        l1=l1.next\\n      while l2!=None:\\n        num2=num2*10+l2.val\\n        l2=l2.next\\n    \\n      num1=self.rev(num1)\\n      num2=self.rev(num2)\\n      print(num1,\" \",num2)\\n      sum=num1+num2\\n      temp=ListNode()\\n      print(sum)\\n\\n      while sum!=0:\\n        d=sum%10\\n        sum//=10\\n        temp=self.append(temp,d)\\n      \\n      return temp.next\\n\\n\\n    def append(self,head_ref, new_data):\\n      \\n      new_node = ListNode(new_data)\\n  \\n      \\n      last = head_ref\\n  \\n      \\n      new_node.next = None\\n  \\n      \\n      if head_ref is None:\\n          return new_node\\n  \\n      \\n      while last.next is not None:\\n          last = last.next\\n  \\n      \\n      last.next = new_node\\n  \\n      return head_ref\\n\\n\\n\\n    def rev(self,x):\\n      re=0\\n      while x!=0:\\n        d=x%10\\n        re=re*10+d\\n        x//=10\\n      return re\\n \\ncan anyone point y the sum is not comming right."
                    },
                    {
                        "username": "6CRIPT",
                        "content": "Why does this code:\n `yclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        n1 = \"\"\n        while(l1.next != None):\n            n1 += str(l1.val)\n        n2 = \"\"\n        while(l2.next != None):\n            n2 += str(l2.val)\n        numeros = [reversed(n1),reversed(n2)]\n        x = [int(''.join(map(str, sublist))) for sublist in numeros]\n        return sum(x)\n        `\ndoes not work? I just cant see my mistake"
                    }
                ]
            },
            {
                "id": 2064480,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2062363,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2061403,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2061402,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2060039,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2057283,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2056825,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2055069,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2054726,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2054648,
                "content": [
                    {
                        "username": "Hureekail",
                        "content": "when i returning result in linked list the output shows only the first digit, help"
                    },
                    {
                        "username": "Hureekail",
                        "content": "[@FXCastells](/FXCastells) thnx"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you constructed the LinkedList correctly (in reverse order), then you should return the last digit, so that the \"next\" property points to the previous digit, etc."
                    },
                    {
                        "username": "mawhadmd",
                        "content": "My 3 brain cells can't remember what a carry in math was, they would rather work 5 hours on non sense than thinking in math"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test question \\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "new reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "[@saeidmirzaeifigma](/saeidmirzaeifigma) reply reply test\\n"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test reply"
                    },
                    {
                        "username": "saeidmirzaeifigma",
                        "content": "test tip"
                    },
                    {
                        "username": "pushkarraj192003",
                        "content": "why am  i getting error when implementing in C...help me ....Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>"
                    },
                    {
                        "username": "prab_27",
                        "content": "when I run on my vscode ide op & ans right but when I submit i will wrong ans!!!!!\\nHow can it possible? Some case right and Some case wrong in Same ide same code\\n here I am writing my ans\\n\\n\\n            int n1= 0,n2 = 0,c = 1;\\n            Boolean b = false;\\n            while (l1 != null) {\\n                n1 = n1 + (c*l1.vlue);\\n                c = c * 10;\\n                if (l1.next == null) {\\n                    break;\\n                }\\n                l1 = l1.next;\\n            }\\n            c = 1;\\n            while (l2 != null) {\\n                n2 = n2 + (c * l2.vlue);\\n                c = c * 10;\\n                if (l2.next == null) {\\n                    break;\\n                }\\n                l2 = l2.next;\\n            }\\n            c = n1 + n2;\\n            \\n            Node head = new Node(0);\\n            Node m = new Node(0);\\n            while (c != 0) {\\n                int t = c % 10;\\n                if(!b){\\n                    head.vlue = t;\\n                    b = true;\\n                    m = head;\\n                }else{\\n                    m.next = new Node(t);\\n                    m = m.next;\\n                    \\n                }\\n                c = c/10;\\n            }\\n            return head;"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are converting the input numbers into integers. This is not going to work, because the input numbers can have up to 100 digits, which don\\'t fit into an interger variable. "
                    },
                    {
                        "username": "akash2001kumbhakar",
                        "content": "I think this problem can\\'t be solve with the idea that first retrive the number from two list and then add them and then again break the resulted addition and assign each digit to a new list node and then return that list.\\nWhy because the size of the input numbers are larger than the largest possible int size available.\\nSo i think we have to add digit by digit through the node and have to manage the carry digit."
                    },
                    {
                        "username": "s3stan",
                        "content": "Do not forget! The numbers are in reverse order!"
                    },
                    {
                        "username": "bryantomoregie",
                        "content": "Javascript help!\\n\\nFirst, when logging l1 and l2 what Im getting is an array. l1.val gives me the first element. l1.next gives me an array of the remaining elements. I expect l1.next.val to give me the the second element in the array, or the second node, but an error is immediately thrown. How do access all the nodes after the first?\\n\\n`Line 14 in solution.js\\n   console.log(l1.next.val)\\n                       ^\\nTypeError: Cannot read properties of null (reading \\'val\\')\\n    Line 14: Char 24 in solution.js (addTwoNumbers)\\n    Line 28: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 17: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "pkrabipk",
                        "content": " `your inline code...your inline code...`\nli = \"\"\n        ln = \"\"\n        for x in l1:\n            li += str(x)\n        for y in l2:\n            ln += str(y)\n        sum = str(int(li) + int(ln))[::-1]\n        return int(sum)\n\nmy answer is this. but reject me"
                    }
                ]
            },
            {
                "id": 2052046,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2050792,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2046929,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2046556,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2045385,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2044886,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2043084,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2041620,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2036232,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2027047,
                "content": [
                    {
                        "username": "pallachaitanya",
                        "content": "give an algorithm"
                    },
                    {
                        "username": "gourav_1711",
                        "content": "l1=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =[5,6,4]\\nthis test case fails even I take long data type. what should I do can anyone help me . I use java as my coding language."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the input numbers to numeric variables. Note that the input numbers can have up to 100 digits, so they won\\'t fit. "
                    },
                    {
                        "username": "Siddhant_Vishnu",
                        "content": "This really makes us think doesn't it.\n"
                    },
                    {
                        "username": "llookkeesshh00",
                        "content": "#include<stdio.h>\\n#include<stdlib.h>\\n\\nstruct ListNode* create(int val,struct ListNode* head)\\n{ struct ListNode* new=(struct ListNode*)malloc(sizeof(struct ListNode));\\n  new->val=val;\\n  new->next=head;\\n  return new;\\n\\n\\n}\\n \\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\nint i,value1,value2,sum,rem;\\nstruct ListNode* head=NULL;\\ni=0;\\nvalue1=0;\\nvalue2=0;\\nwhile(l1!=NULL)\\n{ value1=value1*10+ l1->val; \\n}\\nwhile(l2!=NULL)\\n{ value2=value2*10+l1->val; \\n}\\nsum=value1+value2;\\nwhile(sum>0)\\n{ rem=sum%10;\\n  head=create(rem,head);\\n  sum=sum/10;\\n}\\n \\n return head;\\n\\n\\n\\n}\\n1.basically i\\'m retriving data from 2 nodes as numbers\\n2.adding both numbers \\n3.now dividing the number by 10 and storing remainder in a list(created by myself)\\n4.(correct order is maintained in this whole case)\\nERROR:\\ni\\'m getting runtime error can anyone pls help me to solve this question\\n "
                    },
                    {
                        "username": "danmiranda14",
                        "content": " `\\nconst addTwoNumbers = function(l1, l2) {\\n\\n    const list1 = l1.map((item) => item.toString());\\n\\n    const list2 = l2.map((item) => item.toString())\\n\\n    const result = (Number(list1.reduce((acc, curr) => acc + curr)) + Number(list2.reduce((acc, curr) => acc + curr))).toString()\\n\\n    const finalList = result.split(\\'\\');\\n\\n    return finalList.map((item) => Number(item)).reverse()\\n};\\nconsole.log(addTwoNumbers([2,4,3], [5,6,4]))\\n`\\n\\noutput([ 7, 0, 8 ])\\nthe console is throwing an error saying that the l1.map is not a function. i don\\'t understand why. The result is correct."
                    },
                    {
                        "username": "nirban007",
                        "content": "class ListNode(object):\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    list_node = ListNode()\\n    def addTwoNumbers(self, l1, l2):\\n      result = []\\n      for i in range(len(l1)):\\n        result.append(l1[i] + l2[i])\\n      print(result)\\nl1 = [7,7,8]\\nl2 = [5,7,8]\\n\\nsum = Solution()\\nsum.addTwoNumbers(l1,l2) \\n\\n\\nWhat is the problem of this code? It\\'s work perfectly but its\\'s not accepted. "
                    },
                    {
                        "username": "robtf04",
                        "content": "One of my attempts produced this error `: raise TypeError(str(ret) + \" is not valid value for the expected return type ListNode\")\\nThe instructions say \"return the sum as a linked list\".\\nA node is not a linked list; it is only one item IN a linked list.\\n\\nAm I missing something here?"
                    },
                    {
                        "username": "robtf04",
                        "content": "[@FXCastells](/FXCastells) Got it. Thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A Linked List is a series of nodes, one linked to the next. You return a list by returning the first node on the list. The same way that you get the input lists by getting their first nodes."
                    },
                    {
                        "username": "phucneae2004",
                        "content": "Sorry if my question is dumb, but can we first turn those linked lists into integers, then we do addition and put the elements of the sum into a new linked list and return? If not can u explain for me pls :< "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@OmariHop](/OmariHop) You can\\'t do that, given that the input numbers can have up to 100 digits, so they won\\'t fit into an integer variable. The correct solution would also work for numbers of 1000 digits or 10K. "
                    },
                    {
                        "username": "OmariHop",
                        "content": "Dont know if this is too late, but we can go from node.val -> string ->int and calculate the sum from there. Hope this helps! :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That won\\'t work, because the input numbers can have up to 100 digits, which won\\'t fit into an integer variable. The right solution is actually simpler."
                    },
                    {
                        "username": "a3j",
                        "content": "The people complaining in these comments about values greater than integers are completely missing the point of this excercise. You\\'re supposed to traverse these simple linked lists and create a new linked list during this traversion which contains the sum."
                    },
                    {
                        "username": "mikmv",
                        "content": "hi! how i take a value from l1 and l2? I tried using method static_cast<string>(l1), bat it was fail. I use c++\\n"
                    }
                ]
            },
            {
                "id": 2025071,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2020325,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2017167,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2015651,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2012397,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2012235,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2010072,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2008751,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2008642,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2006584,
                "content": [
                    {
                        "username": "zDow_wOlff",
                        "content": "I am a little confused here\nSuppose we are given two linked lists one is [1>2>3] the other is [5>6]\nDo we have to return 9>7>1 {123 + 56 = 179, reverse of 179 is 971}\nor do we have to return 6>8>3 {1+5 = 6;  2+6 = 8; and the last one remaining 3}\n\nThe test cases given in the question is confusing as using either cases is giving us the solution"
                    },
                    {
                        "username": "zDow_wOlff",
                        "content": "[@FXCastells](/FXCastells) okay thanks, this was some what confusing but i get it now"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input numbers are given in reverse order and the expected result is in reverse order too, so you\\'d do 1+5=6, 2+6=8 and then the 3. "
                    },
                    {
                        "username": "Hedo",
                        "content": "when i put l1.join(\\'\\') it is saying it is not a function"
                    },
                    {
                        "username": "Vaasa",
                        "content": "Mine shows \"Memory Limit Exceeded\", Kelp🥲. im using python3"
                    },
                    {
                        "username": "avijit5442",
                        "content": "I am new to leetcode.can\\'t findout why this error occurs\\n\\nLine 58 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 58: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 42: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nplease help me out"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "my code is giving tle can anyone explain why?\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* reverse(ListNode* head) {\\n        ListNode* temp = head;\\n        ListNode* nex = NULL;\\n        while(head) {\\n            nex = head->next;\\n            head->next = temp;\\n            temp = head;\\n            head = nex;\\n        }\\n        return temp;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head1 = reverse(l1);\\n        ListNode* head2 = reverse(l2);\\n        ListNode* res = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* prev = NULL;\\n        int sum, carry = 0;\\n        while(head1 || head2) {\\n            sum = carry + head1->val + head2->val;\\n            if(sum >= 10) {\\n                carry = 1;\\n            }\\n            else carry = 0;\\n            sum = sum%10;\\n            temp = new ListNode(sum);\\n            if(res == NULL) {\\n                res = temp;\\n            } \\n            else {\\n                prev->next = temp;\\n            }\\n            prev = temp;\\n            if(head1->next) head1 = head1->next;\\n            if(head2->next) head2 = head2->next;\\n        }\\n        if(carry > 0) {\\n            temp->next = new ListNode(carry);\\n        }\\n\\n        return res;\\n    }\\n};"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "How come the sum of 189 + 189 is 2691??  shouldn\\'t it be 378?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the problem states that the digits are given in reverse order, so you can\\'t add them up like that. In your example it\\'d be: 1+1=2, 8+8=6, 9+9+1=9, plus the last carry, 1"
                    },
                    {
                        "username": "medbk",
                        "content": "This is not a medium level at all. It should be listed as easy."
                    },
                    {
                        "username": "AmineAbdessalem",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nConsole\\neven after using unsigned long long int . all cases worked as wanted though ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the numbers into numeric variables. It won\\'t work (the input numbers can have up to 100 digits) amd you don\\'t need to. The solution is a lot simpler. If you had to add these numbers by hand, how would you do it?"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "        for i in reversed(range(len(l1))):\\n\\n\\n\"TypeError: object of type \\'ListNode\\' has no len()\\n    for i in reversed(range(len(l1))):\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 57 in <module> (Solution.py)\"\\n\\nwtf?\\n"
                    },
                    {
                        "username": "kuznetcoff777",
                        "content": "[@FXCastells](/FXCastells) Got it, thanks. In my env it worked, was bewildered"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement len and you don\\'t need it anyway. You don\\'t need to reverse the list either to solve the problem."
                    },
                    {
                        "username": "hotdog9955",
                        "content": "Rust has a linked list implementation in it\\'s standard library with .iter() implemented. why is a custom implementation being used???"
                    }
                ]
            },
            {
                "id": 2006134,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 2006006,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 2001817,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 1997818,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 1997263,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 1994284,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 1991628,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 1990658,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 1988790,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 1988150,
                "content": [
                    {
                        "username": "mahmoudadel728",
                        "content": "https://www.youtube.com/watch?v=NHgyOaW1zuo\\n\\nit is a amazing tutorial"
                    },
                    {
                        "username": "z_acc",
                        "content": "create a new list node by node with the values of each node added then scan the list you made to do carries I suppose you could do carries as you go too and do 1 pass"
                    },
                    {
                        "username": "mohitkumar20010414",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n    int carry=0,sum=0;\\n    struct ListNode* l3 ,*temp,*head3,*head1,*head2;\\n    head1=l1;head2=l2;\\n    l3=(struct ListNode*)malloc(sizeof(struct ListNode));\\n    if(!l3)return NULL;\\n    l3->next=NULL;\\n    head3=l3;\\n    l3->val=(head1->val +head2->val)%10;\\n    carry =(head1->val +head2->val)/10;\\n    head1=head1->next;\\n    head2=head2->next;\\n    while(carry!=0 || head1!=NULL || head2!=NULL)\\n    {\\n       \\n        temp=(struct ListNode*)malloc(sizeof(struct ListNode));\\n        if(temp==NULL)return NULL;\\n        l3->next=temp;\\n        l3=l3->next;\\n        if(head1&&head2)sum=head1->val +head2->val +carry;\\n        else if(head1)sum=(head1->val  +carry);\\n        else if(head2)sum=(head2->val  +carry);\\n        else sum=carry;\\n        l3->val=sum%10;\\n        carry=(sum)/10;\\n        if(head1!=NULL)head1=head1->next;else head1=NULL;\\n        if(head2!=NULL)head2=head2->next;else head2=NULL;\\n\\n    }\\n    return head3;\\n}\\n\\nthis code works in online ide ,but for leetcode it shows \"runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed> \".can anyone tell me anything about why this is happening"
                    },
                    {
                        "username": "sidverma25",
                        "content": "Can someone help me to explain why this test case is failing?\\nI manually added and found out that whatever output my program is returning is correct.\\nl1 =[0,8,6,5,6,8,3,5,7]\\nl2 =[6,7,8,0,8,5,8,9,7]\\nUse Testcase Output [4,4,4,7,6,9,3,7,8]\\nExpected [6,5,5,6,4,4,2,5,5,1]"
                    },
                    {
                        "username": "pankajpatwal1224",
                        "content": "here\\'s my approach summarized in points:\\n\\n  1.  Start from the head nodes of both linked lists, unless one of them is null, in which case returns the non-null list.\\n\\n  2.  Initialize two pointers to traverse the linked lists, handling the possibility of one of them being null.\\n\\n3. Iterate through each node, calculating the sum of the current digits and considering the carry from the previous addition.\\n 4. Use a temporary node to store the sum, and if the sum is greater than 10, find the last digit to add, and the remaining digit is stored in a variable (remainder).\\n 5. Continue moving through both linked lists until both pointers become null.\\n    When both pointers are null, ensure that the remainder is also null. If not, create a new node with the remaining digit and add it to the result linked list."
                    },
                    {
                        "username": "avy20016",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution \\n{\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2, int carry = 0) \\n    {\\n        if(l1 == null && l2 == null && carry == 0) return null;\\n\\n        int total = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;\\n        carry = total / 10;\\n        return new ListNode(total % 10,  AddTwoNumbers(l1?.next, l2?.next, carry));\\n    }\\n}"
                    },
                    {
                        "username": "Antisessa",
                        "content": "Probably, today BigInteger no longer avalible, bc my solution has compile error with it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You don\\'t need BigIntegers, you are given the numbers one digit at a time and you need to return the result one digit at a time. Digits are from 0 to 9, so integer is more than enough."
                    },
                    {
                        "username": "msms5476",
                        "content": "cants we able to reverse the number and add it like instead of l1 = [2,4,9] = [9,4,2]\\nl2 = [5,6,4,9] = [9,4,6,5]\\nthen add we get [10407] after spliting it we can re arrange it in reverse order\\nand the anser is right \\uD83E\\uDD1E"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This won\\'t work for integers of up to 100 digits as stated in the problem description. You need to find a better approach."
                    },
                    {
                        "username": "Shchelcunov",
                        "content": "Python. Don't understand _why_ I get \"argument to reversed() must be a sequence\" error. print(type(l1)) returned <type 'list'> to me, so why the editor doesn't allow me to reverse a simple list?\nEdit: I know that \"list\" and \"linked list\" are not the same."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not sure if you got it already, given your edit, but the reason the given Linked List does not support \"reverse\" is because you don't have to reverse the lists (in fact, reversing them would probably make the problem impossible to solve)"
                    },
                    {
                        "username": "init_fun",
                        "content": "why does it exceed the memory limit??\n\n        res = head = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1 = l1.val if l1 else 0\n            v2 = l2.val if l2 else 0\n            temp_sum = v1 + v2 + carry\n            carry = 0\n            last_digit, carry = temp_sum % 100, temp_sum //10 \n            res.next = ListNode(last_digit)\n            res = res.next\n        \n        return head.next\n\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not moving to the next node, right? You are missing something like l1 = l1.next; "
                    }
                ]
            },
            {
                "id": 1987891,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1984841,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1984518,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1982581,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1977098,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1973837,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1970617,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1970423,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1968569,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1968264,
                "content": [
                    {
                        "username": "ashishr0301",
                        "content": "Should I make an in-depth video explaining the problem case and possible solutions? "
                    },
                    {
                        "username": "LOGANBLUE",
                        "content": "This is So simple"
                    },
                    {
                        "username": "just_lert",
                        "content": "tf is ListNode"
                    },
                    {
                        "username": "chopinson123",
                        "content": "Help me"
                    },
                    {
                        "username": "amanvishwakarma1105",
                        "content": "how would i start to do this two sum\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'d say start by figuring out how you\\'d do it on a piece of paper. You are given the digits of these numbers, one by one, in reverse. How would you add these digits and give a result?"
                    },
                    {
                        "username": "CoderAxiy",
                        "content": "   let sum = +l1.join(\\'\\') + +l2.join(\\'\\')\\n    return Array.from(String(sum), Number).reverse() = MySolution\\n\\nl1 = l1.toString().replace(/,/gi, \\'\\')\\n    l2 = l2.toString().replace(/,/gi, \\'\\')\\n    let sum = +l1 + +l2\\n    let res = 0\\n    while(sum !== 0){\\n        res *= 10\\n        res += sum % 10\\n        sum = Math.floor(sum / 10)\\n    }\\n    return Array.from(String(res), Number) = My Second Solution and it is working in mt editor but in playground it doesn\\'t. I think there is some problems with this problem))"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The problem is fine. Check the description again. You need to use the given ListNode class and the input numbers can have up to 100 digits. You need to find a solution that works with the given conditions."
                    },
                    {
                        "username": "drrainlab",
                        "content": "Shit, I\\'ll just pass it, very misleading in details"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "This is my code for Java Language. I used BigInteger class to handle bigdata of test case:\n\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger loop = BigInteger.valueOf(1);\n        while (l1 != null) {\n            num1 = num1.add(BigInteger.valueOf(l1.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l1 = l1.next;\n        }\n        BigInteger num2 = BigInteger.valueOf(0);\n        loop = BigInteger.valueOf(1);\n        while (l2 != null) {\n            num2 = num2.add(BigInteger.valueOf(l2.val).multiply(loop));\n            loop = loop.multiply(BigInteger.valueOf(10));\n            l2 = l2.next;\n        }\n        BigInteger sum = num1.add(num2); // 8 0 7\n        if (sum.compareTo(BigInteger.valueOf(0)) == 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = 0;\n            return listNode;\n        }\n        ListNode next = null;\n        ListNode prev = null;\n        ListNode head = null;\n        while (sum.compareTo(BigInteger.valueOf(0)) > 0) {\n            ListNode listNode = new ListNode();\n            listNode.val = sum.mod(BigInteger.valueOf(10)).intValue();\n            next = listNode;\n            if (prev != null) prev.next = next;\n            prev = listNode;\n            if (head == null) head = listNode;\n            sum = sum.divide(BigInteger.valueOf(10));\n        }\n        return head;\n    }"
                    },
                    {
                        "username": "AJF1703",
                        "content": "Python question:\nThe ListNode class is confusing me because the input provided is in list form...am I supposed to interpret each integer as a ListNode object?\n\ni.e. l1 = [ListNode(2, 4), ListNode(4, 3), ListNode(3)]"
                    },
                    {
                        "username": "moodyman",
                        "content": "\"You are given two non-empty linked lists representing two non-negative integers\"\\n\\nYet at the same time you have TCs such as\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nL1 in that case is way outside of the integer range. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) yeah, a bit part of these exercises is reading the description a few times and make sure you understand what they mean, as you don\\'t necessarily get it the first time. But real life situations are definitely not better, so it\\'s a good practice :)"
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) I get ya. In that case I guess it kinda make sense but I would still insist that this should be more clearly emphasized in the exercise description :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@moodyman](/moodyman) you are confusing integer number (a mathematical concept) with integer type, which is something very specific of different programming languages. The inputs are definitely not integer types. You are given digits one by one in a list. But those digits represent a positive integer number up to 100 digits. "
                    },
                    {
                        "username": "moodyman",
                        "content": "[@FXCastells](/FXCastells) Well it does but it does not constitute an integer number when you have above than 10 digits. So it does contradicts the statement. There either should not be a mention that lists represent integer numbers or the first constraint should be changed to:\\nThe number of nodes in each linked list is in the range [1, 10]. instead of [1, 100]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specification clearly say that the input numbers can have up to 100 digits. Also, that test case does not contractict the part of the specification that you shared. That number is a non-negative integer (basically, 0 or a positive number with up to 100 digits)."
                    }
                ]
            },
            {
                "id": 1967875,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1967339,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1966877,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1966876,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1965597,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1965292,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1963339,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1960718,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1960410,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1951757,
                "content": [
                    {
                        "username": "tsafackghokeng",
                        "content": "why does this sum  [0,8,6,5,6,8,3,5,7] + [6,7,8,0,8,5,8,9,7] equals to [6,5,5,6,4,4,2,5,5,1] ?\\nI think this test case should be remove because for me it\\'s wrong, or maybe i\\'m no getting the task "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) Oh hello there \\uD83D\\uDE02"
                    },
                    {
                        "username": "FXCastells",
                        "content": "0+6=6, 8+7=5(with carry), 6+8+1=5(with carry).... looks right so far, what do you think is wrong?"
                    },
                    {
                        "username": "Deepthi_A_R",
                        "content": "Time Limit Exceeded"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "azizabdumalikov983",
                        "content": "perfect\\n\\n"
                    },
                    {
                        "username": "blnd_12",
                        "content": "how is [2,4,9] + [5,6,4,9]  not 5898 the test case says it should be [7,0,4,0,1] what?!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just do it by hand to verify it... 2+5=7, 4+6=0(with carry), 9+4+1=4(with carry), 9+1=0(with carry), 1 (from the last carry). The expected output is correct."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "how do i access data of listnode? l1->data doesn\\'t work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Is that C++? Look at the definition of ListNode, the property that holds the value is called \"val\", not \"data\"."
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "Does anyone get a runtime error due to overflow? The test data input they used exceeds the largest possible signed integer range that is possible to used for this test case: \\n\\nl1 = [9]\\n\\nl2 = [1,9,9,9,9,9,9,9,9,9]\\n\\nError listed: \\nruntime error: signed integer overflow: 9 * 1000000000 cannot be represented in type \\'int\\' (solution.cpp) \\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:58:36\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@vrj93](/vrj93) you can\\'t represent a 100 digits number (as specified in the problem description) in a numeric variable. The solution to this problem is a completely different approach, and it\\'s quite simple actually."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Handling large numbers is the whole point of this exercise. If you check again the description, you\\'ll see that the input numbers can have up to 100 digits. You can\\'t obviously can\\'t fit these numbers into a numberic variable. The actual solution is actually quite simple. Think about this: how would you add two numbers of many digits, when you are given the digits one at a time, in reverse?"
                    },
                    {
                        "username": "vrj93",
                        "content": "[@sgrxnt_30](/sgrxnt_30) Previously mentioned solution is for this precise test case.\n\nTry an let me know what is the runtime and memory...\n\nFor C++ as follows...\n\n#include <bigint.h>\n\nint main() {\n    BigInt a(\"12345678901234567890\");"
                    },
                    {
                        "username": "sgrxnt_30",
                        "content": "[@vrj93](/vrj93) Did some research on BigInt as I had never heard of that before and found that you\\'d have to create a class for it or include a library with it. I did not want to do that as that is a huge hassle, not to mention very time consuming, so I used unsigned long long for all of my values since input values can only be from 0 to 9 anyways (which means no negative values will be used to test input). \\n\\nWith that, I resolved this test case, but now I\\'m running into another very similar issue. I passed all but three test cases. \\n\\nThe three test cases remaining are just unreasonable and shouldn\\'t be included in test cases in my opinion. However, I want to resolve the issue still, just don\\'t know how. If you have any ideas please let me know. Here is the test case now: \\n\\nl1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\n12 = [5,6,4]\\n\\nMy output: [2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\n\\nExpected Output: [6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n\\nThere is no way you can represent a number this big right??? If there is let me know please. I love to learn how to overcome these very technical issues involving overflow. \\n\\n"
                    },
                    {
                        "username": "vrj93",
                        "content": "use BigInt as per your choosen language. it would fix it."
                    },
                    {
                        "username": "vrj93",
                        "content": "How to solve error that arises with following test case in JavaScript?\\n\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Posting the error that you get would be useful, but my guess is that you are trying to convert the digits sequence into a number and that is not possible as the input numbers can have up to 100 digits. "
                    },
                    {
                        "username": "jazperR",
                        "content": "\nvar addTwoNumbers = function(l1, l2) {\n    return ((Number(l1.reverse().join(''))+Number(l2.reverse().join(''))).toString().split('')).reverse()\n};\n\n\nwhy .reverse() isnt working..... but it works on normal console\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given ListNode class does not implement a reverse function. And you don\\'t need it. You won\\'t be able to convert a 100 digit string into a number. "
                    },
                    {
                        "username": "Jagadeesh_13",
                        "content": " l1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\nUse Testcase\\nOutput\\n[2,8,0,4,6,2,5,0,3,0,7,2,4,4,9,6,7,0,5]\\nExpected\\n[6,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\ndoes anyone having the same issue\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "The addition in this case is to be done from the front not from the end "
                    }
                ]
            },
            {
                "id": 1950818,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1950728,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1950697,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1948992,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1947916,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1947672,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1942051,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1939849,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1936037,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1935167,
                "content": [
                    {
                        "username": "flippia0408",
                        "content": "Can this question be solved with JavaScript?\\n\\nI write codes with JavaScript and the output is as expected, but there\\'s always a run time error showing and make me fail to submit."
                    },
                    {
                        "username": "devilstea",
                        "content": "Yep, it can be solved with JavaScript. The submit button just launches a lot more tests, so it seems to be a common thing to get a runtime error there if the code takes too long to execute"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "Most of the programmers will rage the question is trash , but the reality is question is simple but programmers are not thinking crazy. If the problem is simplified it\\'s just the addition from the front. When the addition is done from the front the carry is kept and the digit is passed.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}"
                    },
                    {
                        "username": "navneethkrishna99",
                        "content": "i am trying to reverse the number by multiplying it with 10..int 1565th case, the input is a 31 digit number.. the data type isnt sufficient"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "[@FXCastells](/FXCastells) It is the easiest and the most interesting I have ever seen. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, if you read the problem, you\\'ll see that the input can have up to 100 digits. You won\\'t be able to fit that in any numerical variable. So, don\\'t do it. The actual solution is a lot simpler than that."
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "can you be more specific ..\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n #include <bits/stdc++.h>\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        long long int num1 = 1;\\n        ListNode* curr1 = l1;\\n        while(curr1!=NULL){\\n            curr1 = curr1->next;\\n            num1++;\\n        }\\n        curr1 = l1;\\n\\n        long long int roh1 = 0;\\n        long long int i = num1;\\n        while(curr1!=NULL){\\n            roh1+= pow(10,num1-i)*(curr1->val);\\n            curr1 = curr1->next;\\n            i--;\\n        }\\n\\n        long long int num2 = 1;\\n        ListNode* curr2 = l2;\\n        while(curr2!=NULL){\\n            curr2 = curr2->next;\\n            num2++;\\n        }\\n        curr2 = l2;\\n        \\n        long long int roh2 = 0;\\n        long long int j = num2;\\n        while(curr2!=NULL){\\n            roh2+= pow(10,num2-j)*(curr2->val);\\n            curr2 = curr2->next;\\n            j--;\\n        }\\n\\n        long long int a = roh1+roh2;\\n        \\n        ListNode* newhead = new ListNode(a%10);\\n        a = a/10;\\n        ListNode* currnode = newhead;\\n        while(a!=0){\\n            ListNode* temp = new ListNode(a%10);\\n            a = a/10;\\n            currnode->next = temp;\\n            currnode = temp; \\n        }\\n        return newhead;\\n\\n    }\\n};\\n\\n\\nI have passed 1565/1568 tescases and the error which is been thrown is \\n\\nLine 26: Char 17: runtime error: 1e+30 is outside the range of representable values of type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:35:17\\n\\nCan anyone please help me with this, of how can i make the rest test cases pass.\\n"
                    },
                    {
                        "username": "Nishad_Kookana",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1->val==0){\\n            return l2;\\n        }else if(l2->val==0){\\n            return l1;\\n        }else{\\n            int borrow = 0;\\n            ListNode* head = NULL;\\n            ListNode* temp = NULL;\\n            while(l1!=NULL && l2!=NULL){\\n                int a = l1->val + l2->val + borrow;\\n                if(a>=10){\\n                    ListNode* child = new ListNode(a%10);\\n                    borrow = a/10;\\n                }else{\\n                    ListNode* child = new ListNode(a);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n                l2 = l2->next;\\n            }\\n            while(l1!=NULL){\\n                if(l1->val + borrow >=10){\\n                    ListNode* child = new ListNode((l1->val + borrow)%10);\\n                    borrow = (l1->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l1->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l1 = l1->next;\\n            }\\n            while(l2!=NULL){\\n                if(l2->val + borrow >=10){\\n                    ListNode* child = new ListNode((l2->val + borrow)%10);\\n                    borrow = (l2->val + borrow)/10;\\n                }else{\\n                    ListNode* child = new ListNode(l2->val + borrow);\\n                    borrow = 0;\\n                }\\n                if(head==NULL){\\n                    head = child;\\n                    temp = head;\\n                }else{\\n                    temp->next = child;\\n                    temp = temp->next;\\n                }\\n                l2 = l2->next;\\n            }\\n            if(borrow != 0){\\n                ListNode* child = new ListNode(borrow);\\n                temp->next = child;\\n                temp = temp->next;\\n            }\\n            return head;\\n        }\\n    }\\n};\\n\\nThis is my code\\nAnd error that I am getting is:\\nLine 32: Char 28: error: use of undeclared identifier \\'child\\'\\n                    head = child;\\n                           ^\\n\\nPlease help"
                    },
                    {
                        "username": "ankush20386",
                        "content": "I am trying to solve this problem by making use of string function but for large integers stoi function doesnt actually work  \\n\\nclass Solution {\\npublic:\\n    void tostring(ListNode*l1,string&sa)\\n    {\\n        while(l1)\\n        {\\n            int a=l1->val;\\n            string s=to_string(a);\\n            sa+=s;\\n            l1=l1->next;\\n        }\\n    }\\n    ListNode*ans(string &sc)\\n    {\\n        ListNode*root=new ListNode;\\n        root=NULL;\\n        ListNode*last;\\n        ListNode*temp;\\n        for(int i=0;i<sc.size();i++)\\n        {\\n            if(root==NULL)\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                root=temp;\\n                last=root;\\n            }\\n            else\\n            {\\n                temp=new ListNode;\\n                temp->val=sc[i]-\\'0\\';\\n                temp->next=NULL;\\n                last->next=temp;\\n                last=temp;\\n            }\\n        }\\n        return root;\\n    }\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        string sa=\"\";\\n        string sb=\"\";\\n        tostring(l1,sa);\\n        tostring(l2,sb);\\n        reverse(sa.begin(),sa.end());\\n        reverse(sb.begin(),sb.end());\\n        int num1=stoi(sa);\\n        int num2=stoi(sb);\\n        int num3;\\n        if(num2>num1)\\n        {\\n            num3=num2+num1;\\n        }\\n        else\\n        {\\n            num3=num1+num2;\\n        }\\n        \\n        string sc=to_string(num3);\\n        reverse(sc.begin(),sc.end());\\n\\n        \\n        return ans(sc);\\n\\n    }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yes, the input numbers can have up to 100 digits. You won\\'t be able to fit them in a numeric variable. This problem has a very specific solution based on the way the input numbers are given to you and the expected result. And it\\'s a lot simpler than your current aproach."
                    },
                    {
                        "username": "shnur",
                        "content": "        l1=l1[::-1]\\n        l2=l2[::-1]\\n\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u044D\\u0442\\u043E\\u043C \\u0441\\u0430\\u0439\\u0442\\u0435 \\u0440\\u0443\\u0433\\u0430\\u044E\\u0442\\u0441\\u044F \\u043D\\u0430 \\u0442\\u0430\\u043A\\u0443\\u044E \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C. \\u042F \\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0441\\u044C Pycharm, \\u0433\\u0434\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u0441\\u0430\\u043C \\u043A\\u043E\\u0434, \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0432 \\u043E\\u0431\\u043E\\u043B\\u043E\\u0447\\u043A\\u0435 \\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B, \\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0441\\u044F"
                    },
                    {
                        "username": "Megir",
                        "content": "Console wrote that \"+\" is unsupported operand for \"int\" and \"str\" types...\\n\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "Its very frustrating to have no explanation how an array is converted to a linked list and vice versa in tests, particularly in Go. I wrote my own conversion functions to test my solution, and they work perfectly fine, nevertheless, tests here proceed to fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) alright"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) I am used to code completion, using debugger etc."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@artemmarkaryan](/artemmarkaryan) right. I\\'d say these problems are meant to be coded and tested within Leetcode, so there\\'s no need to explain how the internals work. Out of curiosity... why didn\\'t you just run the code with Leetcode? Running it in your IDE seems a lot of extra work that you get for free by just using the provided editor and runner"
                    },
                    {
                        "username": "artemmarkaryan",
                        "content": "[@FXCastells](/FXCastells) thanks for help, I managed to solve the problem. \\nI had some issues with treating nil-pointers in a different way than the test engine. I still believe it would be useful to give us some information about how the engine converts things to be able to focus on the problem, not on the engine issues."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Maybe you are not passing the digits in reverse order?"
                    },
                    {
                        "username": "whybhanu",
                        "content": "Does anyone else think there are too many edge cases in this question."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@whybhanu](/whybhanu) right. This is handling the \"carry\". But I wouldn\\'t consider this an edge case. Handling the carry is an integral part of adding two numbers. But this might just be semantics. "
                    },
                    {
                        "username": "whybhanu",
                        "content": "[@FXCastells](/FXCastells) One more is if they have same items then also we have to store the values, like 9 + 6 should give us 1->5. so we have to store the value 1 somewhere to add in the node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "What edge cases do you mean? The only thing I can think of is the fact that the lists can have a different number of items."
                    }
                ]
            },
            {
                "id": 1932354,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1931904,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1931087,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1931086,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1930249,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1929788,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1926471,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1923654,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1920740,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1920374,
                "content": [
                    {
                        "username": "Kromydas",
                        "content": "Sometimes my code works and has god beats such as 87% but sometimes it returns an error. leet code tells me to not use global vairables but i didnt use any lol. \\n\\nkinda confused but glad i passed it by hitting submit a few times. "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "this my answer\\n\\n\\nlist1=[2,4,3]\\nlist2=[5,6,4]\\nbig=len(list1)>len(list2)\\nif big :\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list2.append(0)\\nelse:\\n    diff=abs(len(list1)-len(list2))\\n    for i in range(diff):\\n        list1.append(0)\\ncarry=0\\nfinal=[]\\nfor i in range(len(list1)):\\n    if i!=len(list1)-1:\\n         sum1=list1[i]+list2[i]+carry\\n         if sum1<9:\\n             final.append(sum1)\\n         else:\\n             string=str(sum1)\\n             part1=string[:len(string)-1]\\n             part2=string[-1]\\n             final.append(int(part2))\\n             carry=int(part1)\\n    else:\\n        sum1=list1[i]+list2[i]+carry\\n        final.append(sum1)"
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken using C#. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are confusing the mathematical concept of \"integer number\", which can have an infininte number of digits, with the C# integer type, which obviously, is limited. This challenge is telling you that you get two ingeger numebers of up to 100 digits. These numbers can\\'t obviously be in a C# integer type, that\\'s why they are giving you the digits one by one in linked lists (and in reverse order, which is very important for the challenge). Once you understand this, completing the challenge is quite easy. "
                    },
                    {
                        "username": "andrewhughes1988",
                        "content": "This challenge is broken. It says that the lists will contain an integer, but the test cases overflow the standard integer and break the result."
                    },
                    {
                        "username": "hp210693",
                        "content": "Why l1 + l2 = ???\\n l1 =[2,4,9]\\n l2 = [5,6,4,9]\\n Expected = [7,0,4,0,1]"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the question exactly? Just add the digits and you get the expected result...2+5=7, etc."
                    },
                    {
                        "username": "HossamHamdy01001000",
                        "content": "shouldn\\'t i be able to access ( l1.next.next ) it causes a runtime error even tho it Stdout the expected value "
                    },
                    {
                        "username": "MissingSemicolon007",
                        "content": "in python \"TypeError: \\'ListNode\\' object is not iterable\"\\ni cant iterate over a list, since when???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that it\\'s not a List, but a ListNode (a single node of a linked list) and the definition is given in the problem. You can see that the node has a reference to the \"next\" node, so this is how you can traverse the whole list. This is also a clue of how you should solve this problem. "
                    },
                    {
                        "username": "kashvi_manik_2007",
                        "content": "it was easy question but bit length \\n"
                    },
                    {
                        "username": "user0335jo",
                        "content": "My code is running fine for linkedlists of equal lengths but its unable to add for unequal lengths especially when carry is involved, is there any way to solve this ?"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "if one of the linked list ends in between consider the value of the node as zero \\n"
                    },
                    {
                        "username": "twblamer",
                        "content": "Just focus on getting a simple test case to work like [1] + [1, 1, 1].\\n\\nThen think about how to do the carry in a case like [1] + [9, 9, 9]."
                    },
                    {
                        "username": "krasav4ik",
                        "content": "This frigging ListNode doesn\\'t have len, not literable... how should i solve this problem???"
                    }
                ]
            },
            {
                "id": 1920108,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1918174,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1914229,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1913126,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1908310,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1906283,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1906218,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1904370,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1902243,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1894972,
                "content": [
                    {
                        "username": "Manasa_46",
                        "content": "I am getting correct output only but its showing runtime error.Can anybody suggest me to don't get that again. Here is my code #using python\n\ndef covertToString(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n\n    return (res)\n\n\nl1 = [2, 4, 3]\nl2 = [5, 6, 4]\nl1.reverse()\nl2.reverse()\n\nl3 = covertToString(list=l1) + covertToString(list=l2)\nsolution = list(map(int, str(l3)))\nstr(solution)\nsolution.reverse()\nprint(solution)\n"
                    },
                    {
                        "username": "Manasa_46",
                        "content": "[@FXCastells](/FXCastells) Oh,it means i should not take the input at first...Thank you "
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the correct approach. Note the problem requirements. The input numbers can have up to 100 digits, so these numbers won\\'t fit in \"integer\" variables. Think about how you are given the numbers (you are given the digits). What is the easiest way you can add two numbers indepedently of the number of digits they have?"
                    },
                    {
                        "username": "jamesdsumma",
                        "content": "Incorrect test case (16/1568):\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n249 + 5649 = 5898\\nso the reverse would be: 8985 <- correct answer\\nexpected result: [7,0,4,0,1]\\nin what world does 249 + 5649 = 10407?? Am I misunderstanding the question?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Remember that the input numbers also have the digits reversed. So, just add the digits in the order they are given: 2+5=7, 4+6=0(+carry), 9+4+carry=4(+carry), 9+carry=0(+carry). Result: [7, 0, 4, 0, 1]. Or 942+9465=10407."
                    },
                    {
                        "username": "Ashik543",
                        "content": "Hey everyone ,\\nI know this might sound little weird and a silly question.\\nHere l1 and l2 are linked lists or a normal list because they mentioned that l1 = [2,4,3], l2 = [5,6,4] - which are usual list structure we see on daily basis while solving.\\nSo my question is if l1=[2,4,3] is linked-list  then any linked list is written like I mentioned here. And all list properties or methods are also applicable to this linked-list?????/"
                    },
                    {
                        "username": "Ashik543",
                        "content": "[@FXCastells](/FXCastells) Thanks buddy"
                    },
                    {
                        "username": "FXCastells",
                        "content": "They are linked lists as stated in the description. The samples are written that way for simplicity. Every digit is a different node of the linked list."
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "the description and what is actually expected in code do not match not even close, is the description written to be extra confusuing it is absolutley horrbile.  \\nIn the code we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\\nA more accurate despcritption would be: you are given the head of 2 linkedLists each of the linked lists represents an integer number with the head being the lowest Number, you have to return the head of the linked list that has both of these numbers added"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@LazyMonkey123](/LazyMonkey123) if you really want to view it in a pedantic maner, then it is still factually true that you are given a linked list by giving you the first node, given that with the first node you have access to the whole list. And you are of course, supposed to give a linked list back by returning the first node. The software that checks the result is perfectly capable of verifying the whole list if you give it only the first node. That is literally the point of a linked list: from one node you can go to the next. There is no need for a List object that holds references to all the nodes. \\nJust a note: your message sounds a bit disrespectful. Try to keep it cool. "
                    },
                    {
                        "username": "LazyMonkey123",
                        "content": "[@FXCastells](/FXCastells) we arent given any linkedlists that is factually false and we arent supposed to return a linkedList either that is again factually false \nthis is the header (method signature) for java and C#: \"public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\"\nim not sure you understand what a ListNode is but i suggest you familarize yourself with it if you want verify your point\nyes lowest digit would be accurate"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You say \"we are given 2 list nodes that are presumably the head of each list which is what im asuming we have to return aswell.\" . Not sure why you say \"presumably\" and \"I\\'m assuming\", because the first line of the problem description literally tells you this \"You are given two non-empty linked lists representing two non-negative integers\" and \"Add the two numbers and return the sum as a linked list.\" \\n\\nAlso, the original description makes it clear than the digits are in reverse order, which I guess it\\'s what you mean with \"the lowest Number\", but that\\'s not really a correct way of saying it. "
                    },
                    {
                        "username": "MARVLIN",
                        "content": "AttributeError: \\'ListNode\\' object has no attribute \\'reverse\\'\\n    lx.reverse()\\n"
                    },
                    {
                        "username": "noley",
                        "content": "If you look at the class definition for ListNode in the comments above the starter code it shows that it has two properties, `self.val` and `self.next` so there is no built in reverse method. Hopefully that helps."
                    },
                    {
                        "username": "christian_reizner",
                        "content": "\"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\"\\nGot a test case with l1 = [0,8,6,5,6,8,3,5,7] (in Python)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not a leading zero. Remember that the numbers are reversed. "
                    },
                    {
                        "username": "Francescom_",
                        "content": "is testcase 792 wrong by any chance?"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "This is a tip for anyone who is not able to solve it , carefully examine the third testcase."
                    },
                    {
                        "username": "SearchingForSolution",
                        "content": "l1 =[9]\\nl2 =[1,9,9,9,9,9,9,9,9,9]\\nthis test case expects [8,0,0,0,0,0,0,0,0,0,1] \\nwhile the reversed l2 is 9999999991 +l1 which is 9 it turns to 10mil\\nhow is the exspected result is 10mil+8 that?  "
                    },
                    {
                        "username": "504BassSlapper",
                        "content": "Hello ,How can I test my solution using a main method in java ( its a bit difficult to build ListNodes from two Arraylist)"
                    }
                ]
            },
            {
                "id": 1892919,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1891859,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1891474,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1889328,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1888209,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1885819,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1885195,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1884192,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1882661,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1881877,
                "content": [
                    {
                        "username": "crazyjim0123",
                        "content": " `return [int(digit) for digit in str(int(\\'\\'.join(map(str, l1[::-1]))) + int(\\'\\'.join(map(str, l2[::-1]))))[::-1]]`\\nin 1 line"
                    },
                    {
                        "username": "ragno_",
                        "content": "Very good.\\nExcept it\\'s not a list, but a ListNode, good luck iterating through it"
                    },
                    {
                        "username": "Pranjal2608",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\n    void insertatTail(ListNode* head,int val){\\n        ListNode* temp= new ListNode(val);\\n        if(head==NULL){\\n            head=temp;\\n            return;\\n        }\\n        else{\\n            ListNode* temp1=head;\\n            while(temp1->next!=NULL){\\n            temp1=temp1->next;\\n            }\\n            temp1->next=temp;\\n        }\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry=0;\\n        ListNode* temp1=l1;\\n        ListNode* temp2=l2;\\n        ListNode* ansh=NULL;\\n        while(temp1!=NULL && temp2!=NULL){\\n           int sum=carry+temp1->val+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp1!=NULL){\\n           int sum=carry+temp1->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(temp2!=NULL){\\n           int sum=carry+temp2->val;\\n           int mod=sum%10;\\n           ListNode* temp=new ListNode(mod);\\n           insertatTail(ansh,mod);\\n           carry=sum/10;\\n        }\\n        while(carry!=0){\\n            int sum=carry;\\n            int mod=sum%10;\\n            insertatTail(ansh,mod);\\n            carry=sum/10;            \\n        }\\n        return ansh;\\n    }\\n};\\n\\n\\ni dont know why TLE is coming"
                    },
                    {
                        "username": "CmChi",
                        "content": " `Line 70: Char 15: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'struct ListNode\\', which requires 8 byte alignment [ListNode.c]\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>` is the error I\\'m getting. It works perfectly fine in VSCode using C. What does this mean?"
                    },
                    {
                        "username": "yablochnikov",
                        "content": "const addTwoNumbers = function (l1, l2) {\\n  return (+l1.reverse().join(\\'\\') + +l2.reverse().join(\\'\\')).toString().split(\\'\\').reverse().map(Number);\\n}; it works in vsCode, but not at leetCode =("
                    },
                    {
                        "username": "Gi-Totev",
                        "content": "The problem description is misleading, you don\\'t get an array of [2,4,3] what you get is a LinkNode instance with the val: 2 and next: LinkNode with val:4 and next: LinkNode with val:3 and next: null. To test locally create a function ListNode like the comment in the leetcode editor and use:\\n\\nconst l1 = new ListNode(2, new ListNode(4, new ListNode(3, null)));\\nconst l2 = new ListNode(5, new ListNode(6, new ListNode(4, null)));\\n\\nconsole.log(addTwoNumbers(l1, l2));"
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "while(i!=null && j!=null) {\\n           int currDigit = i.val + j.val + carry;\\n           if(currDigit > 9) {\\n               curr.next = new ListNode(currDigit - 10, null);\\n               carry = 1;\\n           } else {\\n               System.out.println(i.next);\\n               System.out.println(j.next);\\n               curr.next = new ListNode(currDigit, null);\\n               carry = 0;\\n           }\\n           i = i.next;\\n           j = j.next;\\n       }\\n I applied this loop here, but somehow I\\'m getting i.next and j.next as null. any idea why? i and j point to l1 and l2"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two lists can have different lengths, so in many scenarios, i.next or j.next will have a value, while the other will be null. "
                    },
                    {
                        "username": "jemjam008",
                        "content": "const list1 = [2, 4, 3];\\nconst list2 = [5, 6, 4];\\nlet sum;\\nlet sumArr = [];\\n\\nfunction addTwoNumbers(l1, l2) {\\n    l1.reverse();\\n    l2.reverse();\\n    let myString = l1.join(\\'\\');\\n    let myString1 = l2.join(\\'\\');\\n    sum = +myString + +myString1;\\n    sumArr = sum.toString().split(\\'\\').reverse();\\n    return sumArr;\\n}\\n\\naddTwoNumbers(list1, list2);\\nconsole.log(sumArr);"
                    },
                    {
                        "username": "jwliefeld",
                        "content": "=================================================================\n==23==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffe5bcc3828 at pc 0x00000034c449 bp 0x7ffe5bcc34f0 sp 0x7ffe5bcc34e8\nWRITE of size 8 at 0x7ffe5bcc3828 thread T0\n    #2 0x7fb9018f2082  (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\nAddress 0x7ffe5bcc3828 is located in stack of thread T0 at offset 744 in frame\n  This frame has 6 object(s):\n    [32, 33) 'ref.tmp.i'\n    [48, 52) 'SEPARATOR'\n    [64, 576) 'fout'\n    [640, 672) 'line'\n    [704, 712) 'ret'\n    [736, 768) 'out' <== Memory access at offset 744 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nShadow bytes around the buggy address:\n  0x10004b7906b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b7906f0: f2 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2\n=>0x10004b790700: 00 f2 f2 f2 f8[f8]f8 f8 f3 f3 f3 f3 00 00 00 00\n  0x10004b790710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004b790750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==23==ABORTING\n\n\n\n\n\n\nNot sure how im getting this problem. But my guess is that my call to new ListNode is causing it for some reason.\n\nThe problem is... how am i supposed to build the solution list without calling new listnode? Especially since I already tried modifying one of the given lists, and was thrown an error that indicates im not allowed to modify the given parameters (and thus cannot recycle the already allocated listnodes)?\n\n\nHere is my code (not a solution because it doesn't work):\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *solution;\n        ListNode *answer = solution;\n        int carry = 0;\n\n        while(l1 != nullptr || l2 != nullptr){\n            if(l1 == nullptr){\n                l2->val += carry;\n                solution->next = l2;\n                return solution;\n            }\n            if(l2 == nullptr){\n                l1->val += carry;\n                solution->next = l1;\n                return solution;\n            }\n            int temp = l1->val + l2->val;\n            \n            if(carry == 1){ // handles carrying the 1\n                temp += carry;\n                --carry;\n            }\n            if(temp >= 10){\n                temp -= 10;\n                ++carry;\n            }\n\n            if(solution == nullptr){\n                solution = new ListNode(temp, nullptr);\n            } else {\n                solution->next = new ListNode(temp, nullptr);\n            }\n            \n            solution = solution->next;\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return answer;\n    }\n};"
                    },
                    {
                        "username": "zmartens93",
                        "content": "using javascript, I have been trying to figure out how to traverse the ListNode class for hours now.\\nIf l1.next is of type ListNode (had to switch to TypeScript just to find this out) shouldn\\'t l1.next have a .val and a .next?\\nl1.next just return [4,3] for the first case.\\nI can\\'t figure out how to break up the next for each node."
                    },
                    {
                        "username": "bradharms",
                        "content": "I did this with JavaScript/TypeScript and my solution worked until it got to very big integers, and then started giving weird results. I think it\\'s hitting the size limit of numbers for JS. I\\'m not sure what to think about that. I understand what the problem is (I think) but not sure what kind of resolution I should be going for because I would have different options available to me depending on which runtime engine I chose to write the answer in, and I\\'m not sure whether I ought to be taking advantage of language-specific knowledge or instead trying to use more broadly-applicable computer science knowledge. In any case this sort of problem is not something I would expect to run into in any job I\\'ve ever had so I feel like I might be in the wrong testing category."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The solution to this problem is language-independent and very simple. It\\'s so simple that a 10-year-old could point you in the right direction. I don\\'t mean this in a bad way, I just mean that we tend to overthink the solutions sometimes. In my opinion, this is a problem that any professional developer should be able to solve. To understand the problem, look at the details (see the maximum number of digits the input numbers can have, do they fit in any known type? etc.) and don\\'t go straight to the naive solution. Regarding the fact that this is not the sort of thing that you\\'d run into in any job... I think it\\'s very common to find problems that require you to process a large amount of data and you can\\'t simply put it all into memory and process it all at once, so you have to find a way of progressively processing the data. I think this would be more obvious in this problem if instead of adding numbers of up to 100 digits, they had said up to 10K digits. "
                    },
                    {
                        "username": "shriyabandi",
                        "content": "class Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a=[]\\n        b=[]\\n        while l1.next==None:\\n            a.append(l1.val)\\n        while l2.next==None:\\n            b.append(l2.val)\\n        c=a.reverse()+b.reverse() #getting error here saying unsupported operand type both nonetype?\\n        c=c.reverse()\\n        return c"
                    }
                ]
            },
            {
                "id": 1879473,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1878720,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1878108,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1878077,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1878075,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1875292,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1875035,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1874582,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1869593,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1868525,
                "content": [
                    {
                        "username": "alik040700",
                        "content": "\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043A\\u043E\\u0433\\u0434\\u0430 \\u044F \\u0441\\u043E\\u0437\\u0434\\u0430\\u044E \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0438 \\u0432\\u044B\\u0432\\u043E\\u0436\\u0443 \\u0435\\u0451 \\u0447\\u0435\\u0440\\u0435\\u0437 return \\u0432\\u044B\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0443"
                    },
                    {
                        "username": "jamesrtroost",
                        "content": "This questions says to return a LinkedList, but clearly it wants you to return a ListNode. These are not the same. Am I incorrect? Does it want you to just return the first node in the list? The list is the collection of nodes. The nodes are just the nodes with a pointer to the next node."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is just semantics. To return a Linked List, you have to return its first node. True, the actual type is ListNode (the same as the \"Linked list\" parameters), but effectively you are returning the whole linked list.  "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "//Full adder code worked \\n\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n//variables        \\n        int carry = 0; int sum = 0; int d1 = 0; int d2 = 0; int d3 =0;\\n\\n//sizes\\n        ListNode temp1 = l1; int size1 = 0; while(temp1 != null) { temp1 = temp1.next;size1++; }\\n        ListNode temp2 = l2; int size2 = 0; while(temp2 != null) { temp2 = temp2.next;size2++; }\\n        ListNode l3 = null; int size3 = Math.max(size1,size2);\\n\\n//calculation \\n       for(int i=1;i<=size3;i++)\\n       {\\n           if(l1 == null) { d1 = 0; } else { d1 = l1.val; } if(l2 == null) { d2 = 0;} else { d2 = l2.val; }\\n           sum = d1+d2+carry; d3 = sum%10; carry = sum/10;\\n           ListNode newnode = new ListNode(d3);\\n           if(l3 == null) { l3 = newnode;} else { newnode.next = l3; l3 = newnode;}\\n           if(l1 != null) { l1 = l1.next; } if ( l2 != null ) { l2 = l2.next; }\\n       }\\n//adding the node of remaining carry \\n             if (carry != 0) { ListNode newnode = new ListNode(carry); newnode.next = l3; l3 = newnode; }\\n\\n//reverse\\n     ListNode returned = null; ListNode temp3 = l3;\\n     while(temp3 != null ) { ListNode newnode = new ListNode(temp3.val);newnode.next = returned; returned = newnode; temp3 = temp3.next; } \\n      \\nreturn returned;\\n    }\\n}\\n"
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "I tried method like full adder but problem occurs when both list are of different size "
                    },
                    {
                        "username": "myselfakashagarwal",
                        "content": "1.5k test cases \\uD83D\\uDC80"
                    },
                    {
                        "username": "dharuneee007",
                        "content": "how to solve signed integer overflow error"
                    },
                    {
                        "username": "atiqur",
                        "content": "If you are struggling with below data\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\n\\nAs per question, you had to reverse them before adding.\\nSum of 249 + 5649 will be different than 942+9465"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Note that the question does not say that you have to reverse the numbers before adding and you should not reverse them. When you add two numbers, which digits do you add first?"
                    },
                    {
                        "username": "lavishgehlod210204",
                        "content": "testcase 22 is wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Can you elaborate? What\\'s the test case? What do you think is wrong about it? "
                    },
                    {
                        "username": "PiFFFko",
                        "content": "My solution works perfectly in Intelij Idea, but dont work here("
                    },
                    {
                        "username": "MrxNoobie",
                        "content": "BROOO\\nThis thing is so buggy, it says that the list does not have any leading zeros and one of the test case have leading zeros yo LEETCODE, FIX it"
                    }
                ]
            },
            {
                "id": 1864284,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1863326,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1860660,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1859837,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1859425,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1859078,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1854421,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1853548,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1852409,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1849913,
                "content": [
                    {
                        "username": "ayushkushwah678",
                        "content": "class Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *list = new ListNode();\\n        ListNode *temp= list;\\n        int carry = 0;\\n            if(l1==NULL && l2!=NULL)\\n            return l2;\\n            if(l2==NULL && l1!=NULL)\\n            return l1;\\n        while(l1!= NULL || l2!=NULL || carry){\\n            \\n            \\n            temp->val=(l1->val)+(l2->val)+carry;\\n            \\n            carry=0;\\n            \\n            if(temp->val > 10 || temp->val == 10 ){\\n                carry=1;\\n                temp->val=((temp->val)%10);\\n            }\\n            \\n            if(l1->next!= NULL || l2->next!=NULL){\\n            ListNode *newnode = new ListNode();\\n            temp->next=newnode;\\n            temp=temp->next;\\n\\n            l1=l1->next;\\n            l2=l2->next;}\\n        }\\n        return list;\\n    }\\n};\\n\\n\\nGUYS CAN ANYONE TELL ME WHENEVER I SUBMIT THIS CODE IT TELLS TIME LIMIT EXCEEDED WHAT DOES IT MEAN"
                    },
                    {
                        "username": "Bun_Maska",
                        "content": "For those who are getting error of exceeding the range of int, use long long instead of int ."
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is not the right approach. The correct approach (which is also simpler) would allow you to add even thousands of digits. Think about why you are given the two numbers in this format..."
                    },
                    {
                        "username": "balajiv999",
                        "content": "are u fr. i didnt read the instructions and i just spent like an hour reversing both the lists. "
                    },
                    {
                        "username": "salstone",
                        "content": "Javascript failing for test case `[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]`. Seems to be because `BigInt()` is not big enough to handle the sum. Did anybody pass this test case with Javascript/Typescript?"
                    },
                    {
                        "username": "salstone",
                        "content": "[@FXCastells](/FXCastells) thank you! Makes sense. My approach (each digit with base 10 multiplier) fails for large numbers. So this makes sense. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. The good solution (note how the numbers are given to you, and how many digits you can get) it\\'s a lot simpler and allows to add even thousands of digits."
                    },
                    {
                        "username": "IsaKons",
                        "content": "I suppose it should be easy, in reason that easy tasks usually are more harder than this one. Or may be I had used too much memory, creating new list and 2 strings.."
                    },
                    {
                        "username": "idrisov",
                        "content": "I am  not undrstand\\n"
                    },
                    {
                        "username": "dhanushreddy02",
                        "content": "Can somebody help me on how to create a linked list i\\'ve taken elements into a list and found sum "
                    },
                    {
                        "username": "SeUz751",
                        "content": "So i\\'ve soled this problem... But I didn\\'t use this ListNode class which is above. I used the LinkedList class of Java in my Eclipse. I saw the class ListNode above. Ok we have 2 variables of the class {int val} which are the values that the class accepts but I dont understand the second one {ListNode next;}. What is this there for ? And after that we have 2 constructors... 7,8 line."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A LinkList is a sequence of nodes where one points to the next one. So, it's not like an array where you can jump to any item in it. If you want to go to the 3rd element, you need to go from the first node, then use its \"next\" property to go the second node and from there, use its \"next\" property to go the 3rd node. Note also, that from the 3rd node you can't navigate back to the 2nd, becuase to do so you'd need a \"previous\" property and you don't have it in this case. \n\nThe same way, to construct the linked lists, you need to create the nodes one at a time in reverse order, because to create the first node you need to pass the \"next\" node, which is the second and to create the second node you need to pass the 3rd already."
                    },
                    {
                        "username": "huhyhuvinh",
                        "content": "Can I solve this problem using recursion approach?"
                    },
                    {
                        "username": "devang_03",
                        "content": " `your inline code...your inline code...`"
                    }
                ]
            },
            {
                "id": 1848105,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1845360,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1843025,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1842598,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1842239,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1841233,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1834097,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1833491,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1833416,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1833062,
                "content": [
                    {
                        "username": "Hemang_1774",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "azerborodach",
                        "content": "Somebody got this problem?\\nl1 = [2,4,9]\\nl2 = [5,6,4,9]\\nUse Testcase\\nOutput [8,9,8,5]\\nExpected [7,0,4,0,1]\\n\\nBut locally I receive right answer [7,0,4,0,1] for current l1 and l2. I can\\'t understand why in Leetcode same code generate [8,9,8,5]"
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Yeah it's testcase 16 for me. I'm stuck on it too."
                    },
                    {
                        "username": "Sholly_B",
                        "content": "Who else is having an index out of bounds error from the leetcode jre while same code runs fine on an IDE???"
                    },
                    {
                        "username": "haba0699",
                        "content": "c language 7 ms"
                    },
                    {
                        "username": "Randeep_Rana",
                        "content": "Why array methods are not working with l1 and l2?\\nl1.length is giving undefined."
                    },
                    {
                        "username": "FXCastells",
                        "content": "l1 and l2 are not arrays, they are nodes in linked lists. You have the definition of ListNode in the problem itself and you can see there is no \"length\" defined. Also, you don\\'t need length to solve the problem, just add the digits one by one, following \"next\" until there are no more digits. "
                    },
                    {
                        "username": "ARUN-THANGAVEL",
                        "content": "Good"
                    },
                    {
                        "username": "lakpareek",
                        "content": " `class Solution {\\nprivate:\\n    ListNode* listmaker(int c){\\n        ListNode* temp = new ListNode();\\n        ListNode* fwd = temp->next;\\n        ListNode* curr = temp;\\n        ListNode* prev = nullptr;\\n        int num = c % 10;\\n        curr->val = num;\\n        c /= 10;\\n        \\n        while(c > 0){\\n            int num = c % 10;\\n            fwd = new ListNode();\\n            fwd->val = num;\\n            fwd->next = curr;\\n            prev = curr;\\n            curr = fwd;\\n            c /= 10;\\n        }\\n        return temp;\\n    }\\n    long long int nummaker(ListNode* l){\\n        long long int ans = 0;\\n        long long int i = 1;\\n        ListNode* curr = l;\\n        while(curr != NULL){\\n            ans += (long long)(curr->val) * i;\\n            i *= 10;\\n            curr = curr->next;\\n        }\\n        return ans;\\n    }\\n    ListNode* reverseList(ListNode* head) {\\n        ListNode* prev = nullptr;\\n        ListNode* curr = head;\\n        while (curr != nullptr) {\\n            ListNode* next = curr->next;\\n            curr->next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        return prev;\\n    }\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        if(l1 == nullptr && l2 == nullptr) return 0;\\n        if(l1->val == 0 && l1->next == nullptr && l2->val == 0 && l2->next == nullptr) {\\n            ListNode* ans = new ListNode(0);\\n            return ans;\\n        }\\n    \\n        int a = nummaker(l1);\\n        int b = nummaker(l2);\\n        int c = a + b;\\n        stack<int> s;\\n        while(c > 0){\\n            int digit = c % 10;\\n            s.push(digit);\\n            c /= 10;\\n        }\\n        ListNode* temp = new ListNode();\\n        ListNode* curr = temp;\\n        while(!s.empty()){\\n            int digit = s.top();\\n            ListNode* node = new ListNode(digit);\\n            curr->next = node;\\n            curr = curr->next;\\n            s.pop();\\n        }\\n        ListNode* ans = temp->next;\\n        ans = reverseList(ans);\\n        return ans;\\n    }\\n};\\n`\\n\\nwhat am i doing wrong here?\\nit was working fine earlier when i wasnt using long long data type in my nummaker function but gave an integer overflow error in one testcase. fixed it by using long long but now its more problematic.\\n\\nSOMEONE PLEASE HELP\\n"
                    },
                    {
                        "username": "lakpareek",
                        "content": "[@FXCastells](/FXCastells) yeah ik about that :) \\njust wanted to try this approach too. Thought it\\'d work"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t try to convert the lists to numbers. Add the digits one by one. The solution is much simpler and it\\'ll work with very large number of digits. "
                    },
                    {
                        "username": "RiyaRajSaxena",
                        "content": "approach"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "Just a question: \\n\\nl1 and l2 are ListNodes that have 3 values (so it means there are 3 ListNodes inside initialized with only value?)\\n\\nIts kinda confusing that on the description they say LinkedList but input its ListNode. \\n\\nI just want to declare/create my ListNode l1 and l2 and try different values, but im kinda blocked. (JAVA). \\n\\nDo I have to modify constructor to add something like \\n  ListNode l1 = new ListNode(new ListNode(3), new ListNode(4), new ListNode(6));\\n\\nPlease correct me hehe"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) yeah correct i know its not even part of the problem.. just wanted to understand this data structure and you helped me a lot thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) exactly. Although, just to be clear, your function will already be called with l1 and l2 populated. You only need to create the result linked list. "
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) So then... \\n\\n        ListNode nodeB = new ListNode(3);\\n        ListNode nodeA = new ListNode(4, nodeB);\\n        ListNode l1 = new ListNode(2, nodeA);\\n\\n\\n        ListNode nodeD = new ListNode(4);\\n        ListNode nodeC = new ListNode(6, nodeD);\\n        ListNode l2 = new ListNode(5, nodeC);\\n\\nlike that i believe"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@JavAravDev](/JavAravDev) Yeah, something like that. Note that in the specific implementation of this problem, the ListNode\\'s constructor already expects the \"next\", which means that you can\\'t create all nodes upfront and then link them together. \\n"
                    },
                    {
                        "username": "JavAravDev",
                        "content": "[@FXCastells](/FXCastells) I think i get what you mean, instead of constructor i just put it like this: \\n\\n        ListNode l1 = new ListNode(2);\\n        ListNode nodeA = new ListNode(4);\\n        ListNode nodeB = new ListNode(3);\\n\\n        l1.next = nodeA;\\n        nodeA.next = nodeB;\\n\\nAnd there I have my LinkedList ! And one ListNode its only pointing to the next and nothing else. \\n\\nThanks Master!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "A linked list is a series of Nodes that one points to the next. So, by having a reference to the first node you can get to the next and the next until there are no more nodes at the end of the list.\\nTo construct a linked list, you need to construct the nodes one by one, passing the next node to the constructor and to construct the next node you need to pass also its next node, and so on.\\nYou don\\'t need the constructor that you propose, because there isn\\'t a single \"ListNode\" item that knows about all the nodes to require that constructor."
                    },
                    {
                        "username": "levannha",
                        "content": "class Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n           ListNode add = null;\\n     String[] arStr;\\n        long c = add(l1);\\nlong b = add(l2);\\n       arStr = String.valueOf(b + c).split(\"\");\\n        return acc(arStr,arStr.length -1);\\n}\\npublic  ListNode acc(String[] a,int x) {\\n    if (x >= 0) {\\nreturn new ListNode(Integer.parseInt(a[x]),acc(a,x -1));\\n    }\\n  return null;\\n}\\n    public  long add(ListNode l) {\\n        long x = 0;\\n        long n = 1;\\n        while (l != null) {\\n            x += l.val * n;\\n            n *= 10;\\n            l = l.next;\\n        }\\nreturn x;\\n    }\\n \\n}"
                    }
                ]
            },
            {
                "id": 1827299,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1821872,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1812312,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1811219,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1810027,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1808772,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1808728,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1805371,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1804687,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1804092,
                "content": [
                    {
                        "username": "Babailan",
                        "content": "l1.length is not working maybe there is something wrong with runtime?"
                    },
                    {
                        "username": "trina",
                        "content": "`length` isn't included in the `ListNode` class, only `val` and `next`. The class definition should be listed in the comment (e.g. javadoc)"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient."
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to iterate a linkedList in Javascript?\\n\\nI\\'m trying to iterate a LinkedList in JS but I dont know how to do it properly?\\n\\n```javascript\\n let str = \"\"\\n    while (l1.next !== null) {\\n        str += l1.value\\n        l1.next\\n    }\\n    return str\\n```"
                    },
                    {
                        "username": "FXCastells",
                        "content": "When you iterate, you need to make the next node of the previous node your current one. Where you have \"l1.next\", replace l1 by l1.next, like \"l1 = l1.next\". This way you keep doing the same check over and over, but every time with the following node. "
                    },
                    {
                        "username": "shoybl",
                        "content": "class Solution():\\n\\n    def addTwoNumbers(self, l1, l2):\\n        reversed(l1)\\n        a1 = \\'\\'\\n        reversed(l2)\\n        a2 = \\'\\'\\n        for i in l1:\\n            a1 += str(i)\\n        for i in l2:\\n            a2 += str(i)\\n        a = str(int(a1) + int(a2))\\n        a = a[::-1]\\n        b = [int(itm) for itm in a]\\n        return b\\nres = Solution().addTwoNumbers([9,9,9,9,9,9,9], [9,9,9,9])\\nprint(res)\\n\\nTypeError: argument to reversed() must be a sequence\\n    reversed(l1)\\nLine 9 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 46 in _driver (Solution.py)\\n    _driver()\\nLine 56 in <module> (Solution.py)\\n\\nHelp me please. I don\\'t understand where is the mistake?"
                    },
                    {
                        "username": "YourShawn",
                        "content": " ` String listValue1;\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        listValue1 = \"\";\\n        String str1 = loopListNode(l1);\\n        listValue1= \"\";\\n        String str2 = loopListNode(l2);\\n        Integer intValue1 = Integer.valueOf(str1);\\n        Integer intValue2 = Integer.valueOf(str2);\\n        String totalString = String.valueOf(intValue1 + intValue2);\\n        String[] totalValueArray = totalString.split(\"\");\\n        ListNode totalListNode = null;\\n        for(int i = 0; i < totalValueArray.length; i++){\\n            ListNode currentNode = new \\n     ListNode(Integer.valueOf(totalValueArray[i]),totalListNode);\\n            totalListNode = currentNode;\\n        }\\n        return totalListNode;\\n    }\\n public String loopListNode(ListNode listNode){\\n        if(listNode == null){\\n            return listValue1;\\n        }\\n        listValue1 = listNode.val + listValue1;\\n        return loopListNode(listNode.next);\\n    }\\n`\\nWhy my coding can\\'t work? I tried other passed coding, the same case the same result. However, when I submit it, the system warn me output the error answer. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are using the wrong approach. Think about why are you given the digits one by one and in the reverse order? How would you add them if you did it manually?"
                    },
                    {
                        "username": "chanthy",
                        "content": "My output is [8,9,8,5].\\nhow [2,4,9] + [5,6,4,9] = [7,0,4,0,1]?"
                    },
                    {
                        "username": "bwpge",
                        "content": "Read the problem statement:\\n\\n> The digits are stored in **reverse order**, ...\\n\\nSo if you are summing `[2, 4, 9]` and `[5, 6, 4, 9]`, on scratch paper it would look like:\\n\\n```\\n  9 4 6 5\\n+   9 4 2\\n---------\\n? ? ? ? ?\\n```"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "how do I fix this? I calculate everything in a list and return the ListNode(outputlist) (p.s outputlist is my output). But I am one square bracket more: [[7,0,8]] (expected: [7,0,8]; [[0]] (expected: [0]); [[8, 9, 9, 9, 0, 0, 0, 1]] (expected: [8,9,9,9,0,0,0,1]). "
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Greetings!\\n\\nFor an optimal solution to the Two Sum problem, along with a detailed explanation on time complexity and space complexity, check out my solution on LeetCode at https://leetcode.com/problems/add-two-numbers/solutions/3281780/a-sleek-solution-with-optimal-time-and-space-complexity-c/.\\n\\nI\\'m confident that this will help you streamline your code and make it more efficient.\\n"
                    },
                    {
                        "username": "JimmyBu",
                        "content": "[@FXCastells](/FXCastells) thanks!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are doing something weird with lists. You don\\'t need to use lists, just use the provided ListNode."
                    },
                    {
                        "username": "adiwlitescode",
                        "content": "Facing this issue for test case 1565 - l1 = 1000000000000000000000000000001 and l2 = 465\\n\\nAnd getting an error \\n\\n`\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        def toInt(node):\\n            return node.val + 10 * toInt(node.next) if node else 0\\n        n = toInt(l1) + toInt(l2)\\n        print(toInt(l1), toInt(l2))\\n        print(n)\\n        first = last = ListNode(int(n%10))\\n        while n > 9:\\n            n = int(n / 10)\\n            last.next = last = ListNode(n%10)\\n\\n        return first\\n`\\n\\nHere is my code. Any idea on why I\\'m getting this error?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are not using the right approach. You are not meant to translate the digits into integers. You are meant to add the digits (one by one) as you\\'d normally do when adding two big numbers.   "
                    },
                    {
                        "username": "anushka-patil-16012004p",
                        "content": "it\\'s very easy"
                    },
                    {
                        "username": "maatoug610",
                        "content": "Hi guys,\\ni running my code in vs code was correct with 3 cases but here result error !!!"
                    },
                    {
                        "username": "Apeino",
                        "content": "1565 / 1568 testcases passed ahah (((( i am try"
                    }
                ]
            },
            {
                "id": 1804047,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1803871,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1803553,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1803332,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1803326,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1803190,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1803137,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1802965,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1801597,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1799154,
                "content": [
                    {
                        "username": "StevenTse7340",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int get_val(ListNode* l){\\n        if(l) return l->val;\\n        else return 0;\\n    }\\n\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode(0);\\n        ListNode* tans = ans;\\n        int offset = 0;\\n        int temp = 0;\\n        while(true){\\n            temp = get_val(l1) + get_val(l2) + offset;\\n            offset = temp / 10;\\n            tans->val = temp - offset * 10;\\n            if(l1 && l1->next) l1 = l1->next;\\n            else l1 = nullptr;\\n            if(l2 && l2->next) l2 = l2->next;\\n            else l2 = nullptr;\\n            if(l1 || l2){\\n                tans->next = new ListNode(0);\\n                tans = tans->next;\\n            } else {\\n                break;\\n            }\\n        }\\n        if(offset > 0){\\n            tans->next = new ListNode(offset);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Colbyx20",
                        "content": "the edge cases on this questions is really getting to me. I\\'ve spent many hours on it and probably approached this problem at a handful of angles. \\n\\nI get a lot of test cases correct except for this one.\\n[1] <-- list 1\\n[9,9] <-- list2\\n\\nreturn [1]\\n\\nWhat\\'s weird is if I get uneven length in either l1 and l2, I increase their size first to match. Then run the logic to solve the questions.\\n\\nI should have \\n[1,0] <-- list1\\n[9,9] <-- list2\\n\\n `your inline code...your inline code...`\\nclass Solution {\\n\\n    public static int getSize(ListNode list){\\n        int size = 0;\\n\\n        if(list == null){\\n            return 0;\\n        }\\n        while(list != null){\\n            list = list.next;\\n            size++;\\n        }\\n        return size;\\n        \\n    }\\n\\n    public static void increaseListsize(ListNode list, int size){\\n\\n        ListNode tmp = list;\\n        System.out.println(size);\\n        int i = 1;\\n        while(i < size){\\n            if(tmp.next != null){\\n                tmp = tmp.next;\\n                i++;\\n            }\\n\\n            if(tmp.next == null){\\n                ListNode newNode = new ListNode(0);\\n                tmp.next = newNode;\\n                tmp = newNode;\\n                i++;\\n            }\\n        }\\n\\n    }\\n\\n    public void PrintList(ListNode list){\\n        if(list == null){\\n            return;\\n        }\\n\\n        while(list != null){\\n            System.out.print(list.val + \" \");\\n            list = list.next;\\n        }\\n    }\\n\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        if(l1 == null & l2 == null){\\n            return l1;\\n        }\\n\\n\\n        int size = getSize(l1);\\n        int size2 = getSize(l2);\\n\\n        int max = Math.max(size,size2);\\n        // int i = 0;\\n        ListNode cur = l1;\\n        ListNode cur2 = l2;\\n\\n        \\n        if(size == 1 && cur.val == 0){\\n            return l2;\\n        }\\n        if(size2 == 1 && cur2.val == 0){\\n            return l1;\\n        }\\n        \\n        if(size > size2){\\n            increaseListsize(l2, size); \\n        }\\n        if(size < size2){\\n            increaseListsize(l1,size);\\n        }\\n\\n        while(cur.next != null && cur2.next != null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10 && cur.next != null){\\n                cur.val = cur.val - 10;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n            cur = cur.next;\\n            cur2 = cur2.next;\\n        }\\n        if(cur.next == null && cur2.next == null){\\n            cur.val = cur.val + cur2.val;\\n            if(cur.val >= 10){\\n                ListNode tmp = new ListNode(0);\\n                cur.val = cur.val - 10;\\n                cur.next = tmp;\\n                cur.next.val = cur.next.val + 1;\\n            }\\n        }\\n        \\n        return l1;\\n    }\\n}\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I would suggest that you simplify your solution. For example, why do you need to get the list size and change their size? To have an idea, my solution is a function with 4 lines of code. "
                    },
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "failing on this parameter.. [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nLast Executed Input\\n1565 / 1568 testcases passed\\nl1 =\\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\nl2 =\\n[5,6,4]\\n1565 testcases passed...what else they want."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "This function converts the Linked List to an array:\n`function convert(obj) {\n    const pattern = /['\"]val['\"] *: *([0-9]+)/g;\n    const matches = JSON.stringify(obj).match(pattern);\n    let values = []\n    if (matches) {\n        values = matches.map(match => parseInt(match.match(/[0-9]+/)));\n    }\n    return values\n}`\n\nand this converts the sum back into the Linked List format:\n`for (let i = sum.length; i > 0 ; i--) {\n        if (!sum[i]) {\n            obj = {\"val\": sum[i - 1],\"next\": null}\n            continue\n        }\n        obj = {\"val\": parseInt(sum[i - 1]), \"next\": JSON.parse(JSON.stringify(obj))}\n    }`\n\nN.B. The \"sum\" should be in string format\n\nI haven't solved it yet but here's how to convert it to an array and back in-case you needed that."
                    },
                    {
                        "username": "benedictgabriel73",
                        "content": "How is [2,4,9] and [5,6,4,9] not [8,9,8,5]??!\nHere's how I got this:\n1. I added l1 and l2\n2. reversed the sum\n\nbut the expected is [7,0,4,0,1] :("
                    },
                    {
                        "username": "aniquilattion",
                        "content": "what about the carry tho? you are adding"
                    },
                    {
                        "username": "AbdelrahmanMohammed",
                        "content": "I have a little question:\\nwould it be illegal if I have the values out in a string\\nturn it into int\\nadd them up using a normal arithmetic \"+\"\\nturn them back into a string \\nstuff them back into a new constructed linked list\\nis it fair?\\nbecause it works!\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s not illegal, obviously, but it\\'s a bad solution. If the point was to add 2 numbers that fit into an integer value, then the parameters would be two integers. Instead, the goal here is to add numbers with an arbitrarely large number of digits. Imagine adding two numbers of 10K digits. How would you do it?"
                    },
                    {
                        "username": "hainamzsd",
                        "content": "Can anyone explain why this code fail for testcase 0 0, thank you!\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        num1 = 0\\n        num2 = 0\\n       \\n        while(True):\\n            if(l1.next is not None):\\n                num1 = num1 * 10 + l1.val\\n                l1 = l1.next\\n            else:\\n                num1 = num1 * 10 + l1.val\\n                break\\n        while(True):\\n            if(l2.next is not None):\\n                num2 = num2 * 10 + l2.val\\n                l2 = l2.next\\n            else:\\n                num2 = num2 * 10 + l2.val\\n                break\\n        rs = 0\\n        rs = num1 + num2\\n        resNode = ListNode\\n        rs2 = resNode\\n        while(rs!=0):\\n            newNode = ListNode()\\n            newNode.val = rs%10\\n            rs2.next = newNode\\n            rs2 = newNode\\n            rs = rs//10\\n        print(resNode.next.val)\\n        return resNode.next\\n```"
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "Why my code not work?\\n\\nIt is runtime error\\n`TypeError: object of type \\'ListNode\\' has no len()\\n    for i in range(len(l1)):\\nLine 11 in addTwoNumbers (Solution.py)\\n    ret = Solution().addTwoNumbers(param_1, param_2)\\nLine 44 in _driver (Solution.py)\\n    _driver()\\nLine 55 in <module> (Solution.py)`\\n\\ncan someone help me? i show you my code."
                    },
                    {
                        "username": "gangstabatyr",
                        "content": "[@fcastells76](/fcastells76)  thank you very much!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The given class ListNode doesn\\'t have a len function. The only way to know the length is to navigate from one node to the next. But \\n note that you don\\'t need to know the length in advance. You can simply keep adding digits going to the \"next\" one until \"next\" doesn\\'t point to a node anymore in both lists."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "In Java only way to add these is to use java.math.BigInteger otherwise long is not long enough to fit the sum."
                    },
                    {
                        "username": "sangramsingha11",
                        "content": "[@fcastells76](/fcastells76) i got it make sense.. thanks"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s not the only way and in fact, this is not the right way of doing it. The point of the exercise is to add two arbitrarely large integers. Your solution should be able to add numbers of 10K digits each, for example. Think how you could achive that. One hint: why do you get the input numbers as reversed linked lists?"
                    },
                    {
                        "username": "sarthakgadekar",
                        "content": "can anyone code for the subtraction??\\n"
                    }
                ]
            },
            {
                "id": 1798406,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1797073,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1795532,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1795314,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1793805,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1792773,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1791801,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1791748,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1790938,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1788676,
                "content": [
                    {
                        "username": "ankush920",
                        "content": "Easy And optimized solution in T.C . O(N) with Useful Comment\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */                //find useful  UPVOTE it vro  :)\\nclass Solution {\\npublic:  \\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)\\n       int carry = 0 ;  // take cary o intially\\n      \\n       ListNode* head = new ListNode();  ////  create a new pointer with  dummy dynamic node\\n       ListNode *ans = head;  //store head for return it \\n    \\n\\n        while( l1!=NULL && l2!=NULL)\\n         {\\n             int value = l1->val +l2->val +carry;    //calculating sum \\n\\n             carry = value/10 ;     \\n                \\n            head->next =   new ListNode( (value%10) ); // store unit place \\n             head = head->next ;\\n             l1 =l1->next ;\\n             l2 =l2-> next;\\n             \\n         }\\n        \\n\\n         while( l1!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l1->val+carry;   \\n             carry = value/10 ;     \\n             head->next = new ListNode( (value%10) ); \\n\\n              head = head ->next; \\n            \\n\\n             l1 =l1->next ;\\n              \\n         }\\n\\n           while( l2!=NULL) // if list l1 remain then put their remaining in our ans list with cary \\n         {\\n              int value = l2->val+carry;   \\n             carry = value/10 ;     \\n            head->next =  new ListNode( (value%10) );\\n             \\n             head =head->next;\\n             l2 =l2->next ;\\n              \\n         }\\n\\n         if(carry)   //it still one carry left then put on new node ( mean digit increase in answer)\\n         {\\n             head->next = new ListNode(carry );\\n             \\n          head  =   head-> next ;\\n         }\\n\\n        return ans->next; //return head of answer list without dummy node \\n    }\\n};"
                    },
                    {
                        "username": "po_orvi123",
                        "content": "i have written the following code which is giving correct answer upon dry-run but an error occurs while printing. Can someone suggest edits into it? \\n\\n /**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* p1=l1; \\n        ListNode* p2= l2;\\n        int c=0;\\n        //overwriting p1(may it be smaller or larger of the two LLs)\\n        while(p1 && p2)\\n        {\\n            int sum=p1->val+p2->val+c;\\n            if(sum<=9)\\n             {\\n                  p1->val=sum;\\n                //  cout<<p1->val<<endl;\\n                  c=0;\\n             } \\n             else\\n             {\\n               p1->val=sum%10;\\n               //cout<<p1->val<<endl;\\n               c= sum/10 ;   //or sum/10  \\n             } \\n             if(p1->next)\\n                p1=p1->next;\\n             p2=p2->next;\\n        }\\n        // if(p1)\\n        // cout<<p1->val<<endl;\\n        // if(p2)\\n        // cout<<p2->val<<endl;\\n        if(p2!=NULL)\\n        {\\n            p1->next=p2;\\n            p1 = p1->next;\\n        }\\n\\n        while(p1->next)\\n        {\\n           // cout<<\"hello\"<<endl;\\n            int sum=p1->val+c;\\n            if(sum<=9)\\n            {\\n                p1->val=sum;\\n                cout<<p1->val<<endl;\\n                c=0;\\n            } \\n            else\\n            {\\n                p1->val=sum%10;\\n               // cout<<p1->val<<endl;\\n                c=sum/10;   //or sum/10  \\n            } \\n            p1=p1->next;    \\n        }\\n        \\n        int temp=p1->val+c;\\n        //cout<<p1->val<<endl;\\n        if(temp<=9)\\n        {\\n            p1->val=temp;\\n            cout<<p1->val<<endl;\\n        }\\n        else\\n        {\\n            ListNode* endnode=new ListNode();\\n            p1->val = temp%10;\\n            //cout<<p1->val<<endl;\\n            p1->next=endnode;\\n            endnode->val= temp/10;\\n        }\\n        return l1;\\n    }\\n};"
                    },
                    {
                        "username": "jdineley",
                        "content": "The test cases appear to show array inputs.  Is this just a short form to generally represent linked list inputs?  My function works in vs code as the question expects: two linked list inputs => one linked list output, but fails on their first test case with an undefined output which isn\\'t the case providing the inputs are as described.\\n\\nlinked list form:\\nlinked list {\\n   value: data\\n   next: {\\n          value: data\\n          next: null\\n     }\\n}\\n"
                    },
                    {
                        "username": "S-U-M-I-T",
                        "content": "im coding in java can anyone help me in java code https://github.com/Soomiet/add-two-numbers-leetcode.git"
                    },
                    {
                        "username": "cyant",
                        "content": "the inputs value are wrong format. Here is value of them: {\"val\":2,\"next\":{\"val\":4,\"next\":{\"val\":3,\"next\":null}}}\\nIt\\'s waste time for this test"
                    },
                    {
                        "username": "limlengco",
                        "content": "I'm getting invalid literal for int() with base 10: ''  when converting my string to integer anyone know why?"
                    },
                    {
                        "username": "dilsherb",
                        "content": "anyone can tell me where I am wrong in the following code.\\nvar addTwoNumbers = function(l1, l2) {\\n    let listToArray = (list, arr) => {\\n        while(list.next !== null){\\n            arr.push(list.val)\\n            list = list.next;\\n        }\\n    }\\n    let arr1 = [], arr2 = [];\\n    let a = listToArray(l1.val, arr1).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    let b = listToArray(l2.val, arr2).reverse().reduce((accum, digit) => (accum * 10) + digit, 0);\\n    const ab = String(a+b);\\n    return [...ab].reverse();\\n}"
                    },
                    {
                        "username": "dilsherb",
                        "content": "getting this error \\n\"9 is not a valid value of type ListNode\""
                    },
                    {
                        "username": "enkr1",
                        "content": "This is my first attempt in elixir: \n```elixir\n\ndefmodule Solution do\n  @moduledoc \"\"\"\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n  Example 1:\n  2 -> 4 -> 3\n  5 -> 6 -> 4\n  7 -> 0 -> 8\n\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Input: l1 = [0], l2 = [0]\n  Output: [0]\n  Example 3:\n\n  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n  Output: [8,9,9,9,0,0,0,1]\n\n  Constraints:\n\n  The number of nodes in each linked list is in the range [1, 100].\n  0 <= Node.val <= 9\n  It is guaranteed that the list represents a number that does not have leading zeros.\n\n  \"\"\"\n\n  @doc \"\"\"\n\n  # First try\n  Input: l1 = [2,4,3], l2 = [5,6,4]\n  Output: [7,0,8]\n  Explanation: 342 + 465 = 807.\n  Example 2:\n\n  Solution.add_two_numbers([2,4,3], [5,6,4])\n  Solution.add_two_numbers([9,9,9,9,9,9,9], [9,9,9,9])\n\n  \"\"\"\n  @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil\n  def add_two_numbers(l1, l2) do\n    case sum_2_lists(l1, l2, [])\n         |> Enum.reduce([[], 0], fn n, [l, a] = acc ->\n           n = n + a\n\n           IO.inspect(%{n: n, acc: acc}, label: \"n\")\n\n           if n < 10 do\n             [l ++ [n], 0]\n             #  |> IO.inspect(label: \"case 1\")\n           else\n             [x, n] = n |> Integer.to_string() |> String.codepoints()\n\n             [l ++ [n |> String.to_integer()], x |> String.to_integer()]\n             #  |> IO.inspect(label: \"case 2\")\n           end\n         end) do\n      [ans, 0] -> ans\n      [ans, f] -> ans ++ [f]\n    end\n  end\n\n  defp sum_2_lists([], [], tmp), do: tmp\n  defp sum_2_lists([h1 | t1], [], tmp), do: sum_2_lists(t1, [], tmp ++ [h1])\n  defp sum_2_lists([], [h2 | t2], tmp), do: sum_2_lists([], t2, tmp ++ [h2])\n\n  defp sum_2_lists([h1 | t1], [h2 | t2], tmp) do\n    # (tmp ++ [(h1 + h2) |> Integer.to_string()]) |> IO.inspect(label: \"tmp\")\n    # [h1 + h2] |> IO.inspect(label: \"tmp\")\n    # %{h1: h1, t1: t1, h2: h2, t2: t2, tmp: tmp} |> IO.inspect(label: \"xxxxx\")\n    sum_2_lists(t1, t2, tmp ++ [h1 + h2])\n  end\nend\n\n```\n\nI am getting:\n```\nLine 77: ** (FunctionClauseError) no function clause matching in Solution.sum_2_lists/3\n    The following arguments were given to Solution.sum_2_lists/3:\n        # 1\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 3}, val: 4}, val: 2}\n        # 2\n        %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 4}, val: 6}, val: 5}\n        # 3\n        []\n    solution.ex:77: Solution.sum_2_lists/3\n    solution.ex:56: Solution.add_two_numbers/2\n    solution.ex:105: Driver.consume_test_cases/2\n    solution.ex:91: Driver.start/0\n    (stdlib 3.17) erl_eval.erl:685: :erl_eval.do_apply/6\n    (elixir 1.13.0) lib/code.ex:404: Code.validated_eval_string/3\n```\n\nDoes anybody know why? i could get the expected results but not on the submission."
                    },
                    {
                        "username": "Sam_Neamah",
                        "content": "/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let arr=[];\\n    let arr2=[];\\n    while(l1.next!=undefined){\\n        var val = l1.val;\\n        arr.push(val);\\n        l1=l1.next;\\n    }\\n    arr.push(l1.val);\\n    while(l2.next!=undefined){\\n        var val = l2.val;\\n        arr2.push(val);\\n        l2=l2.next;\\n    }\\n    arr2.push(l2.val);\\n    var result;\\n    let x = Number(arr.reverse().join(\"\"));\\n    let y = Number(arr2.reverse().join(\"\"));\\n    if(arr.length>arr2.length&& arr.length>20){\\n        arr2=arr2.reverse();\\n        for(let i=0;i<arr2.length;i++){\\n            arr[i]=arr[i]+arr2[i];      \\n        }\\n        result=arr.reverse();  \\n        console.log(result);\\n        let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    else{\\n    let z = x+y;\\n    result=String(z).split(\"\");\\n    let head = result.reduce((acc, curr) => {\\n  if (acc == null) {\\n    acc = new ListNode(curr);\\n\\n  } else {\\n    acc = new ListNode(curr, acc);\\n  }\\n  return acc;\\n}, null);\\n\\nreturn head;\\n    }\\n    \\n};\\n\\nI solved this with javascript however I have 1566/1568 passed cases"
                    }
                ]
            },
            {
                "id": 1787318,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1787048,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1786499,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1783009,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1782297,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1781758,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1779412,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1776922,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1774596,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1774083,
                "content": [
                    {
                        "username": "learnertanya28",
                        "content": "Is head of the both linked list is passed here in function?"
                    },
                    {
                        "username": "Neet0110",
                        "content": "yes\\n"
                    },
                    {
                        "username": "mukul_jain_07",
                        "content": "Getting This Error:\\n=================================================================\\n==34==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000150\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x602000000150 is located 0 bytes inside of 16-byte region [0x602000000150,0x602000000160)\\nallocated by thread T0 here:\\n    #3 0x7f6554ba60b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==HINT: if you don\\'t care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\\n==34==ABORTING\\n\\nHere is my code!!\\n[leetcode](https://leetcode.com)\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* head = NULL;\\n        ListNode* temp = NULL;\\n        ListNode* newNode = NULL;\\n        int carry = 0;\\n        int value;\\n\\n        while(l1!=NULL && l2!=NULL){\\n            newNode = (ListNode*)malloc(sizeof(ListNode));\\n            value = l1->val + l2->val + carry;\\n            newNode->val = value%10;\\n            carry = value/10;\\n            newNode->next = NULL; \\n            if(head==NULL){\\n                head = temp = newNode;\\n            }\\n            else{\\n                temp->next = newNode;\\n                temp = newNode;\\n            }\\n            l1 = l1->next;\\n            l2 = l2->next;\\n        } \\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "manoj_rayi_369",
                        "content": "`def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        a,b=\"\",\"\"\\n        while l1:\\n            a+=str(l1.val)\\n            l1=l1.next\\n        while l2:\\n            b+=str(l2.val)\\n            l2=l2.next\\n        a,b=int(a[::-1]),int(b[::-1])\\n        c=str(a+b)[::-1]\\n        res=ListNode()\\n        temp=res\\n        for i in c:\\n            temp.val=int(i)\\n            temp.next=ListNode()\\n            temp=temp.next\\n        temp=res\\n        while temp.next.next:\\n            temp=temp.next\\n        temp.next=None\\n        return res`"
                    },
                    {
                        "username": "warlamov",
                        "content": "In this exercise Scala is Ok. I think if there is many test cases, compilation time less matters"
                    },
                    {
                        "username": "gsaez93",
                        "content": "C# error here. ListNode requires an int32 (int), and it breakes in some test cases due to necessary int64 (long). Some cases reach int32.MaxValue..."
                    },
                    {
                        "username": "user2434LU",
                        "content": "What is the meaning of \"stored in reverse order linked list\". Sample test just add both list in same order, also submission works same way. Or am I missing anything."
                    },
                    {
                        "username": "user2434LU",
                        "content": "[@Bricksdont](/Bricksdont) Hi, I was confused as I got correct output when I just add the list in same order.\nAs per question we need to reverse the list to get numbers and then again reverse the sum[which was not clear for me in question]. And since you reverse it two times, you can directly add the list in same order"
                    },
                    {
                        "username": "Bricksdont",
                        "content": "Hello!\n\n\"stored in reverse order linked list\" means that a linked list like: [7, 0, 8] = the number 807.\n\nalso, for submission you must make a \"linked list\" not a list.\n\nI would suggest doing a bit of research on \"linked lists\" before doing this problem.\n\nIf there is any confusion, please ask."
                    },
                    {
                        "username": "yash_gajewar",
                        "content": "How to go to then end of the linked list? Here in java I\\'m using condition while(l1.next != null ) which doesn\\'t seem to work!"
                    },
                    {
                        "username": "lucascostaval",
                        "content": "The problem with your approach is that you will not reach the last node, since when you would reach the last node, the condition for the while would be false, since the next element from the last node is null.\\n\\nYou can, however, do while(l1 != null). It successfully traverses all the nodes of the list.\\n\\nHope I helped :)"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "LeetCode keeps throwing runtime errors\\n\\nI have tried a solution which worked on my computer but it isn\\'t working on LeetCode for some reason, can someone explain why?"
                    },
                    {
                        "username": "AbdelrahmanAhmed04",
                        "content": "[@Bricksdont](/Bricksdont) I see now, I didn\\'t know what linked lists are and that\\'s what caused the problem. Thanks for your help."
                    },
                    {
                        "username": "Bricksdont",
                        "content": "While I can't see your code, It may be that you are using an array. \n\nWhile the question looks like it's using an array and all question hints would point to the Nodes being stored as an array, they are instead ListNodes.\n\nDon't worry, all of us have done it at one point.\n\nbasically, at the top, there is a commented out class of a linked or slightly linked list.\n\nThat is what leetcode means with their '[5,6,4]' array looking things.\n\nUnlike arrays however, you cannot loop through or find the total size of a linked list.\n\nInstead, you can find only the value of the part of the linked list you are on (via ListNode.val) or the next linked list in the set (via LinkNode.next) \n\nDue to this, I would recommend trying to code in leetcode, rather than your own personal code editor for this problem, as the lists are already set up\n\nfor more information on how linked lists work, feel free to read some online articles, like the one below:\nhttps://www.javatpoint.com/singly-linked-list"
                    },
                    {
                        "username": "PBK320",
                        "content": "Python question - TypeError: \\'ListNode\\' object is not subscriptable\\n\\nI have the following  line of code:    num1 = int(\\'\\'.join(map(str,l1[::-1]))) \\n\\nI\\'m getting the TypeError mentioned above. When I run the line of code on my machine it runs fine. I\\'m running Python version 3.8.0 on my machine which I believe is the same version that is LeetCode uses. Can anyone shed any light on this?\\n\\nThanks in advance. "
                    },
                    {
                        "username": "tomereli",
                        "content": "This feels way more an \"easy\" to me. But thanks for the confidence boost!"
                    }
                ]
            },
            {
                "id": 1773109,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772873,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772793,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772503,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772098,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772089,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772083,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772081,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772077,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772073,
                "content": [
                    {
                        "username": "YourShawn",
                        "content": "I just change the value type, why does it have error? this function: Integer.getInteger(\"342\")\\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"342\" \"read\")\\n  at line 485, java.base/java.security.AccessControlContext.checkPermission\\n  at line 1068, java.base/java.security.AccessController.checkPermission\\n  at line 416, java.base/java.lang.SecurityManager.checkPermission\\n  at line 1160, java.base/java.lang.SecurityManager.checkPropertyAccess\\n  at line 915, java.base/java.lang.System.getProperty\\n  at line 1362, java.base/java.lang.Integer.getInteger\\n  at line 1272, java.base/java.lang.Integer.getInteger\\n  at line 14, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main"
                    },
                    {
                        "username": "Fischerski",
                        "content": "I didn\\'t fully understand the assignment. How to pass an array [2,4,3] in a ListNode if the class constructor takes an int as input?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Link lists are a sequence of nodes and each node has a reference to the next. The last node doesn\\'t have a reference to any other node. This means that as a parameter, you get the first node and you can get the rest of the nodes by following the \"next\" until next is null. \\nThis type of design hints at using recursion. "
                    },
                    {
                        "username": "pcrahul702",
                        "content": "java.lang.NullPointerException: Cannot assign field \"val\" because \"<local5>\" is null\\n  at line 27, Solution.addTwoNumbers\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\n\\nwhy this error is comeing?"
                    },
                    {
                        "username": "gazi_ul_islam",
                        "content": "You have to include the ListNode struct to use this function. This function will take two linked lists as input (l1 and l2) and returns the resultant linked list which represents the sum of the two input linked lists. It iterates through both lists and at each iteration, it adds the value of the current node of each list, along with any carry from the previous iteration. It creates a new node with the sum of these values, and sets this node as the next node for the resulting linked list. If there is still a carry left, it adds a new node to the resulting linked list with the value of the carry. Finally, it returns the head node of the resulting linked list as the sum of the two input linked lists."
                    },
                    {
                        "username": "qwe1232",
                        "content": "1  (option b)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only one primary key will be created"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B option : Compilation Error: num2 cannot be resolved to a variable\\n\\n\\nD: 15\\nquestion: system.out.println(finalSum) -> in last\\n\\n\\nA: 80\\n   40\\n\\n\\n\\nB: B103 will be second record\\n\\n\\n\\n\\nSELECT customername, busno, SUM(fare) FROM busbooking\\n\\nWHERE fare > 300 GROUP BY customername, busno\\n\\nHAVING SUM (fare) > 1000;\\n\\nans = A. 2\\n\\n\\n\\nB: 101\\n\\n\\nA. breach in healthcare\\n\\n\\nMr. Patric and his brother Mr. Trent\\n\\nencapsulation\\n\\n\\nA: compilation Error: cannot instantiate the type NonTeaching Faculty\\n\\n\\nPatient\\nAns-> A: 1\\n\\n\\nB: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz\\n\\n\\nC: 3200.0\\n\\n\\nOption A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford\\n\\n\\n\\nB: References:4\\n    Object: 3\\n\\n\\n\\n\\nB: Compilation Error: the method displayVehicleId() from the type Vehicle is not visible\\n\\n\\n\\nQuery:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5\\n\\n\\nA: Only c -> The hascode() method of Object class must return a float value\\n\\n\\nB: Goole App Engine on GCP\\n\\n\\nA: 120\\n\\n\\n\\nA: {id, danceid}\\n\\n\\n\\nB: 101\\n\\nQuestion-> class employee , class Demo\\n\\n\\n\\nA: 2\\nQuestion -> select customername, busno, SUM(fare) from busbooking\\n\\n\\n\\n\\nA: only a -> catch block placed at line 1\\nQuestion -> try catch block\\n\\n\\n\\nB: Only Katie\\n\\n\\nC: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: ii, iv\\nQuestion --> INSERT INTO"
                    },
                    {
                        "username": "qwe1232",
                        "content": "question: system.out.println(finalSum) -> in last\\nD: 15\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "only katie (option b)"
                    }
                ]
            },
            {
                "id": 1772054,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772053,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772051,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772048,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772046,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772045,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772043,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772042,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772041,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772038,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "D: 15\\nquestion: system.out.println(finalSum) -> in last"
                    },
                    {
                        "username": "qwe1232",
                        "content": "80\\n40\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Mr. Patric and his brother Mr. Trent\\n\\nencapsulation"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: compilation Error: cannot instantiate the type NonTeaching Faculty"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Patient\\nAns 1"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Only a and b\\nQuestion -> AdditionQuiz MultiplicationQuiz"
                    },
                    {
                        "username": "qwe1232",
                        "content": "C: 3200.0"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Breach in healthcare database"
                    },
                    {
                        "username": "qwe1232",
                        "content": "Option A: ->\\nParameterless Constructor\\nDisplaying student details\\nstudent RollNo: 10001\\nStudent Name : Peter\\nStudent Address: Oxford"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: References:4\\nObject: 3"
                    }
                ]
            },
            {
                "id": 1772035,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1772034,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1772032,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1772025,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1772023,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1772021,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1772017,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1771959,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1771582,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1771578,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "Query:\\nSelect distinct cusid, city from customer.\\nAnswer: ->\\nA: 5"
                    },
                    {
                        "username": "qwe1232",
                        "content": "A: Only c -> The hascode() method of Object class must return a float value"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B: Goole App Engine on GCPB: Goole App Engine on GCP"
                    },
                    {
                        "username": "qwe1232",
                        "content": "{ID, DANCEUID} OPTION A"
                    },
                    {
                        "username": "qwe1232",
                        "content": "5 ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "COMPILATION ERROR ( OPTION A )"
                    },
                    {
                        "username": "qwe1232",
                        "content": "B103 WILL BE SECOND RECORD"
                    },
                    {
                        "username": "qwe1232",
                        "content": "cdcjskcdhjcg"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3. 2-3-4 (3)"
                    },
                    {
                        "username": "qwe1232",
                        "content": "1.23\\n2.gift"
                    }
                ]
            },
            {
                "id": 1771554,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1771551,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1771072,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1770421,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1766764,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1763338,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1763075,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1762413,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1762341,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1762128,
                "content": [
                    {
                        "username": "qwe1232",
                        "content": "gfxhgwfxjqjkckjsdc\\n"
                    },
                    {
                        "username": "qwe1232",
                        "content": "3fddhd\\n"
                    },
                    {
                        "username": "Pratik_09jain",
                        "content": "i create a function which gives the number of the linklist data but getting error that \"\\'ListNode\\' does not refer to a value\\n        int num1 = number_linkList(ListNode* l1);\"\\nWhat i missing\\n"
                    },
                    {
                        "username": "jlee474",
                        "content": "I can\\'t solve this. The easy test cases work when I hit \\'run\\', but not when I hit \\'submit\\' with that looooongg integer test case. Also, my solution is quite fugly, but it works in basic cases.\\n\\nAm I supposed to figure out these kind of challenges on the job? If so, my career-prospect in programming is doomed. "
                    },
                    {
                        "username": "nadajp",
                        "content": "On the job, you sometimes have to figure out a tricky problem, but most of the time, it\\'s pretty straightforward coding, at least in my experience. And on the job you also get to discuss with other people. As for this problem, think about how you would add up the numbers by hand. The fact that the digits are stored in reverse order is helpful."
                    },
                    {
                        "username": "Israill",
                        "content": "reverse() is not working..."
                    },
                    {
                        "username": "shubha_neema",
                        "content": "\n<h4>Has anyone got the below error while running this question?</h4>\n =================================================================\n==31==ERROR: AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete) on 0x602000000170\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n0x602000000170 is located 0 bytes inside of 16-byte region [0x602000000170,0x602000000180)\nallocated by thread T0 here:\n    #3 0x7fd7034dc0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n==31==HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0\n==31==ABORTING"
                    },
                    {
                        "username": "mystiquecoder",
                        "content": "why do we need to waste one listnode here and returning numbers dummy.next. Why are we wasting that one listNode slot?"
                    },
                    {
                        "username": "vikashraj1490",
                        "content": "96% better than others\\n\\nvar addTwoNumbers = function (l1, l2) {\\n    var carry = 0;\\n    let n1 = 1;\\n    let n2 = 1;\\n    let temp1 = l1;\\n    let temp2 = l2;\\n    while (temp1.next !== null) {\\n        temp1 = temp1.next;\\n        n1++;\\n    }\\n    while (temp2.next !== null) {\\n        temp2 = temp2.next;\\n        n2++;\\n    }\\n    let t1 = l1;\\n    let t2 = l2;\\n    if (n1 >= n2) {\\n        while (t1 !== null) {\\n            if (t2 === null) {\\n                t2 = new ListNode(0)\\n            }\\n            t1.val = t1.val + t2.val + carry;\\n            carry = t1.val > 9 ? Math.floor(t1.val / 10) : 0;\\n            if (t1.val > 9) {\\n                t1.val = t1.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    } else {\\n        while (t2 !== null) {\\n            if (t1 === null) {\\n                t1 = new ListNode(0)\\n            }\\n            t2.val = t2.val + t1.val + carry;\\n            carry = t2.val > 9 ? Math.floor(t2.val / 10) : 0;\\n            if (t2.val > 9) {\\n                t2.val = t2.val % 10;\\n            }\\n            t1 = t1.next;\\n            t2 = t2.next;\\n        }\\n    }\\n    const node = new ListNode(carry);\\n    if (n1 >= n2 && carry > 0) {\\n        temp1.next = node;\\n        // console.log(l1);\\n        return l1;\\n    } else if (n1 < n2 && carry > 0) {\\n        {\\n            temp2.next = node;\\n            console.log(l2);\\n            return l2;\\n        }\\n    } else if (n1 >= n2) {\\n        return l1;\\n    } else {\\n        return l2;\\n    }\\n}"
                    },
                    {
                        "username": "OmSarda",
                        "content": " ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n       long long answer1=0;\\n        while(l1!=nullptr)\\n        {\\n            answer1=10*answer1+l1->val;\\n            l1=l1->next;\\n        }\\n      long long ans1=0;\\n        while(answer1>0){\\n            ans1=10*ans1+answer1%10;\\n            answer1=answer1/10;\\n        }\\n\\n        long long answer2=0;\\n\\n        while(l2!=nullptr)\\n        {\\n            answer2=10*answer2+l2->val;\\n            l2=l2->next;\\n        }\\n        long long ans2=0;\\n        while(answer2>0){\\n             ans2=10*ans2+answer2%10;\\n            answer2=answer2/10;\\n        }\\n        long long answer3=ans1+ans2;\\n       \\n      long long h=answer3%10;\\n        answer3=answer3/10;\\n        struct ListNode*head=nullptr;\\n        head=new ListNode(h);\\n         struct ListNode*last;\\n         last=head;\\n         while(answer3>0){\\n            long long r=answer3%10;\\n             answer3=answer3/10;\\n             struct ListNode*t=new ListNode(r);\\n             last->next=t;\\n             last=t;\\n\\n         }\\n         return head;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Paxton27",
                        "content": "i keep on getting signed integer overflow error "
                    }
                ]
            },
            {
                "id": 1760975,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1760262,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1760163,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1760048,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1760046,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1759552,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1757118,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1756314,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1755834,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1755775,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "Ayan_codes",
                        "content": "[https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec](https://medium.com/@ayan-s/2-add-two-numbers-leetcode-af239ad21cec)\\nExplained each and every line with time complexity and space complexity"
                    },
                    {
                        "username": "ironskillet2",
                        "content": "no wonder this is \"medium\"\\n\\nI made code that did the same idea with normal lists quite easily, but I have never used Node before so now im just watching videos and trying to understand a whole new thing."
                    },
                    {
                        "username": "menesdevleetcode2022",
                        "content": "in java, you can use java.math.BigInteger class for difficult cases."
                    },
                    {
                        "username": "ironskillet2",
                        "content": "its funny, i have working code that does what this exercise wants. but i worked on it in another IDE without making a function. so now im jus thaving trouble throwing it in here lol"
                    },
                    {
                        "username": "daniel_ma0615",
                        "content": "I ran my codes under vscode and got passed all the testcases with no problem, but when pasted into leetcode it is giving me an error for line 50 in solution.js.... any suggestions?\\n\\n `Line 50 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 50: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "guo241024",
                        "content": "Their obsession about linked list puzzles me (when you can just use python list)."
                    },
                    {
                        "username": "Bruhtholomew",
                        "content": "nums = [2, 4, 3]\\nnums2 = [5, 6, 4]\\n\\nreverse_nums = nums[::-1]\\nreverse_nums2 = nums2[::-1]\\n\\nstorage = 0\\nstorage1 = 0\\n\\nfor i in reverse_nums:\\n    storage = storage * 10 + i\\nfor i in reverse_nums2:\\n    storage1 = storage1 * 10 + i\\n\\ntotal_storage = storage + storage1\\n\\nreverse_answer = 0\\nwhile total_storage != 0:\\n    inte = total_storage % 10\\n    reverse_answer = reverse_answer * 10 + inte\\n    total_storage //= 10\\n\\nprint(reverse_answer)\\n\\nI\\'m coding in python.\\n\\nI\\'m having difficulty with the class Solution. Code that works in my editor, this code for example, doesn\\'t work on the test, because class doesn\\'t have __getitem__. I tried adding it in, but i couldn\\'t figure out how to make it work.\\n\\nHow do I work around this. Can i add __getitem__ or is there another way to access the list through the class. Will this be a problem long term or is this unique to how LeetCode test?\\n\\nThanks a lot for your time. I appreciate any help."
                    },
                    {
                        "username": "adityapaluskar",
                        "content": "i solved the program in my personal console... but i don\\'t know how do i implement it here... ( new to LeetCode )"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "The description says \"Add the two numbers and return the sum as a linked list.\" \\n\\nMy code works in the playground returning correct answers on Examples 1 and 2 (will work on fixing logic again later), but run an error in Leetcode \"throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\"\\n\\nOr is it my code ?\\n`  \\n    var list_sum = null;\\n    var counter = 0;\\n    var list_leng = Math.max(l1.length, l2.length);\\n\\n    if (counter == 0) {\\n        for (var i = 0; i < list_leng; i++) {\\n            list_sum.push((l1[i] || 0) + (l2[i] || 0));\\n            if (i == list_leng - 1) {\\n                counter++;\\n            }\\n        }\\n    }\\n    if (counter > 0) {\\n        for (var i = 0; i <= list_sum.length; i++) {\\n            if (list_sum[i] >= 10) {\\n                var over = String(list_sum[i]).charAt(0);\\n                var over_num = Number(over);\\n                list_sum[i + 1] += over_num;\\n                var list_str = String(list_sum[i]).replace(over, \"\");\\n                var str_to_num = Number(list_str);\\n                list_sum[i] = str_to_num;\\n            }\\n            else {\\n                continue;\\n            }\\n        }\\n    }\\n    return list_sum;`"
                    },
                    {
                        "username": "visutthi-tiravisit",
                        "content": "[@charlieanthony](/charlieanthony) Hi, I able to solve this by using ListNode. somehow it only works in Leetcode but won\\'t work on my playground. \"ListNode is not defined\" but working fine when I submit it here. "
                    },
                    {
                        "username": "charlieanthony",
                        "content": "you need to represent your solution in the same way the question is formatted, using the ListNode class. I would recommend constructing it from the back forward, keeping track of the previous node and then setting it to ListNode.next"
                    }
                ]
            },
            {
                "id": 1755081,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1754783,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1750425,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1746703,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1744720,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1740364,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1739469,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1739138,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1738948,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1738276,
                "content": [
                    {
                        "username": "chrisboban07",
                        "content": "is there a data type that can hold bigger values than long long for int?"
                    },
                    {
                        "username": "lechaim",
                        "content": "I received the following error:\\nLine 86 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [] is not valid value for the expected return type ListNode\\n    Line 86: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 70: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\nHowever it does work outside this environment. "
                    },
                    {
                        "username": "ramsay9",
                        "content": "for the javascript method,  \\nvar addTwoNumbers = function(l1, l2) {\\n    let sum=0\\n    let carry=0\\nvar l3=new ListNode(0)\\n  var headL3=l3\\nwhy are we assigning another list and why cant we use the same listNode l3 "
                    },
                    {
                        "username": "NecroDuck",
                        "content": "You need to return the whole list, not the last node"
                    },
                    {
                        "username": "santoshnase",
                        "content": "How can we handle the case, when the size of both lists are different?"
                    },
                    {
                        "username": "ShreyaBhatia",
                        "content": "In Swift when i am trying to give list a \\'nil value\\' its showing \\'ListNode\\' is not compatible with nil"
                    },
                    {
                        "username": "user9783oS",
                        "content": "In my VS studio code worked as expected but when I try to send my solution I received the next error, anybody got such troubles ? =================================================================\\n==31==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000000e8 at pc 0x000000374544 bp 0x7ffe447cacb0 sp 0x7ffe447caca8\\nREAD of size 8 at 0x6060000000e8 thread T0\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x6060000000e8 is located 8 bytes inside of 64-byte region [0x6060000000e0,0x606000000120)\\nfreed by thread T0 here:\\n    #2 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\npreviously allocated by thread T0 here:\\n    #4 0x7fe0e459c0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nShadow bytes around the buggy address:\\n  0x0c0c7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa\\n=>0x0c0c7fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd\\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\\nShadow byte legend (one shadow byte represents 8 application bytes):\\n  Addressable:           00\\n  Partially addressable: 01 02 03 04 05 06 07 \\n  Heap left redzone:       fa\\n  Freed heap region:       fd\\n  Stack left redzone:      f1\\n  Stack mid redzone:       f2\\n  Stack right redzone:     f3\\n  Stack after return:      f5\\n  Stack use after scope:   f8\\n  Global redzone:          f9\\n  Global init order:       f6\\n  Poisoned by user:        f7\\n  Container overflow:      fc\\n  Array cookie:            ac\\n  Intra object redzone:    bb\\n  ASan internal:           fe\\n  Left alloca redzone:     ca\\n  Right alloca redzone:    cb\\n  Shadow gap:              cc\\n==31==ABORTING"
                    },
                    {
                        "username": "godlesscherry",
                        "content": " `java.lang.NoSuchMethodError: \\'ListNode ListNode.deserialize(java.lang.String)\\'\\n\\tat __Deserializer__.toListNode(Unknown Source)\\n  at line 80, __Driver__.main.`"
                    },
                    {
                        "username": "Saurabh1101",
                        "content": "I am getting Time Limit Exceeded Error. Am I doing any mistake in below code or how can I improve the code so it doesn't throw Time Limit Exceeded error?\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n       ListNode head = new ListNode(0);\n       ListNode curr = head;\n       int carry = 0;\n       while( l1  != null || l2 != null){\n\n           int x = l1 != null ? l1.val : 0; \n           int y = l2 != null ? l2.val : 0;\n           int value = x + y + carry;\n           carry = value / 10;\n           curr.next = new ListNode(value % 10);\n           curr = curr.next;\n           if (l1.next != null ) l1 = l1.next;\n           if (l2.next != null)  l2 = l2.next;\n       }\n       if(carry > 0){\n           curr.next = new ListNode(carry);\n       }\n       return head.next;\n    }"
                    },
                    {
                        "username": "Shaik-Misba",
                        "content": "Why i am  getting one extra zero at first node when i tried to create ListNode using java ?"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "Hello, so I've written this piece of code in C++, and it got accepted, but it uses a lot of memory compared to submissions of other people (71.5 MB, beats 13.30%). Why is it the case? I assume it's because of `new` operator being used a lot, but how else would I create a new linked list without allocating memory for it? Thank you in advance\n\n\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { \n        ListNode* head = new ListNode();\n        ListNode* tmp = head;\n        bool last = false;  //variable to keep track whether the last two two digits added up to value >= 10\n        while(l1 != NULL || l2 != NULL)\n        {\n            int sum;\n            if(l1 == NULL)\n                sum = l2->val; \n            else if(l2 == NULL)\n                sum = l1->val;\n            else \n                sum = l1->val + l2->val;\n            \n            if(!last && sum < 10)\n            {\n                tmp->next = new ListNode(sum);\n                last = false;\n            }\n            else if(!last && sum >= 10)\n            {\n                tmp->next = new ListNode(sum%10);\n                last = true;\n            }\n            else if(last && sum+1 < 10)\n            {\n                tmp->next = new ListNode(sum+1);\n                last = false;\n            }\n            else\n            {\n                tmp->next = new ListNode((sum+1)%10);\n                last = true;\n            }\n            tmp = tmp->next;\n            if(l1 != NULL)\n                l1 = l1->next;\n            if(l2 != NULL)\n                l2 = l2->next;\n        }\n        if(last)\n            tmp->next = new ListNode(1);\n        return head->next;\n    }"
                    }
                ]
            },
            {
                "id": 1737682,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1735742,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1735610,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1733310,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1733273,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1732057,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1731999,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1731759,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1731752,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1731732,
                "content": [
                    {
                        "username": "rivenofionia",
                        "content": "To anyone that is stuck on operating the ListNode input:\n\nIn all honesty, the most difficult part of this problem is understanding how [2,4,3] is represented as nested ListNodes.  After playing around with it for a little bit (the class in my terminal), I still didn't understand and was getting an error in my code when pressing \"run\" in leetcode. Once you get over this, the only difficulty left is outputting the final sum as a ListNode type, which does have it's trick.\nBest of luck and happy 2023!\nglhf <3"
                    },
                    {
                        "username": "balazs_rigo86",
                        "content": "I also have a problem with the testcase \\n\\nl1 =\\n[9]\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\nany idea?"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in java python c++ and c programming.\\n[https://thecscience.com/leetcode-add-two-numbers-problem-solution.html](https://thecscience.com/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "Giridhar002",
                        "content": "the test case like\\nl1=[2,4,9]\\nl2=[5,6,4,9]\\noutput which i got is\\n[8,9,8,5]\\nbut the  expected is \\n[7,0,4,0,1]  but this is not true right\\n\\nwhen we perform the addition we get 5898\\nthe answer should be [8,9,8,5]\\n"
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "ZAQ2003",
                        "content": "IDK if you still need an answer but we add 942 + 9465, since lists represent numbers in reverse order. Expected is correct, since [7,0,4,0,1] represents 10407, which does equal 942+9465."
                    },
                    {
                        "username": "GlebSa",
                        "content": "Why on condition:\n[9]\n[1,9,9,9,9,9,9,9,9,9]\nI have wrong result? [8,0,4,5,6,0,0,1,4,1]\nIn same time, on my computer all is normal.\nMaybe old kotlin version?"
                    },
                    {
                        "username": "Raman_Deep_Singh",
                        "content": "My C program well works in vs code but here there is a runtime error help me to find out if I have made any mistake  in this program \\n\\nstruct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2)\\n{\\n    struct ListNode *ptr1 = l1;\\n    struct ListNode *ptr2 = l2;\\n    int ele1 = 0, ele2 = 0;\\n    int i = 0;\\n    while (ptr1 != NULL)\\n    {\\n        ele1 = ele1 + (ptr1->val * pow(10, i));\\n        i++;\\n        ptr1 = ptr1->next;\\n    }\\n    i = 0;\\n    while (ptr2 != NULL)\\n    {\\n        ele2 = ele2 + (ptr2->val * pow(10, i));\\n        i++;\\n        ptr2 = ptr2->next;\\n    }\\n    int ele3 = ele1 + ele2;\\n    i = 0;\\n    struct ListNode *ptr4 = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n    struct ListNode *head3 = ptr4;\\n    while (ele3 > 0)\\n    {\\n        struct ListNode *ptr = (struct ListNode *)malloc(sizeof(struct ListNode *));\\n        ptr->val = ele3 % 10;\\n        ptr4->next = ptr;\\n        ptr4=ptr;\\n        ele3 = ele3 / 10;\\n        ptr4 = ptr4->next;\\n        if (i == 0)\\n        {\\n            head3 = ptr;\\n        }\\n        i++;\\n    }\\n    ptr4->next = NULL;\\n    return head3;\\n}"
                    },
                    {
                        "username": "gkillough",
                        "content": "> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n> . . .\\n> It is guaranteed that the list represents a number that does not have leading zeros.\\n\\nOne of the hidden test cases literally has a leading zero (and no, it\\'s not the number 0 itself)..."
                    },
                    {
                        "username": "irfandy",
                        "content": "How do I access next value?\n\nI tried \n\n```js\n    console.log('l1', l1)    // Shows [2,4,3]\n    console.log('l1.val', l1.val) // shows 2\n    console.log('l1.next', l1.next) // shows [4,3]\n    console.log('l1.next.val', l1.next.val) // This one does an error\n```\n\nOh nevermind, why does it run twice when I did the 4th line? Can anyone help?"
                    },
                    {
                        "username": "ruwhan",
                        "content": "got: \\n```\\nthrow new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: {\"val\":0,\"next\":[0]} is not valid value for the expected return type ListNode\\n```\\n\\nhave tried with returning object, new ListNode, no luck, javascript."
                    },
                    {
                        "username": "vickkyyy",
                        "content": "Why can\\'t I post my solution?"
                    }
                ]
            },
            {
                "id": 1731353,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1730698,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1730051,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1729574,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1728596,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1728354,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1727227,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1726427,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1726170,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1724930,
                "content": [
                    {
                        "username": "yxtiblya",
                        "content": "please explain to me how dummy writes references to the following nodelist\\n ```\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    carry, dummy := 0, new(ListNode)\\n    for node := dummy; l1 != nil || l2 != nil || carry > 0; node = node.Next {\\n        if l1 != nil {\\n            carry += l1.Val\\n            l1 = l1.Next\\n        }\\n        if l2 != nil {\\n            carry += l2.Val\\n            l2 = l2.Next\\n        }\\n        node.Next = &ListNode{carry%10, nil}\\n        carry /= 10\\n    }\\n    return dummy.Next\\n}\\n```"
                    },
                    {
                        "username": "redidacove",
                        "content": "why is this working \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n};\\n\\nbut this isnt \\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n            ListNode *sumList = NULL;\\n    int carry = 0;\\n\\n    while(true) {\\n        // check \\n        if(l1 == NULL && l2 == NULL) {\\n            break;\\n        }\\n\\n        // sum two numbers\\n        int sum = carry;\\n        carry = 0;\\n        if(l1 != NULL) {\\n            sum += l1->val;\\n        }\\n        if(l2 != NULL) {\\n            sum += l2->val;\\n        }\\n\\n        // Point to the next\\n        if(l1 != NULL) {\\n            l1 = l1->next;\\n        }\\n        if(l2 != NULL) {\\n            l2 = l2->next;\\n        }\\n\\n        if(sum >= 10) {\\n            int finalValue = sum % 10;\\n            carry = sum/10;\\n            sum = finalValue;\\n        }\\n\\n        // Add in sum-list\\n        sumList = insertNode(sumList, sum);\\n        if(l1 == NULL && l2 == NULL && carry > 0) {\\n            sumList = insertNode(sumList, carry);\\n        } \\n    }\\n\\n    return sumList;\\n}\\n\\npublic :\\nListNode *insertNode(ListNode *node, int data) {\\n    ListNode *newNode = new ListNode(data);\\n\\n    if(node == NULL) {\\n        node = newNode;\\n        return node;\\n    }\\n\\n    ListNode *last = node;\\n    while(last->next != NULL) {\\n        last = last->next;\\n    }\\n    last->next = newNode;\\n    return node;\\n}\\n}\\nplz help "
                    },
                    {
                        "username": "divakar_dhuriya",
                        "content": "Getting -> Uncaught Error: Cannot use object of type ListNode as array in php when i try to access value like \\'$l2[$key]\\' can anyone help me out what is the issue is there.."
                    },
                    {
                        "username": "DigDug",
                        "content": "Are we supposed to return the first node in the adjacency list or the whole list? Neither works when I implement it with my code."
                    },
                    {
                        "username": "Vrishabhshri",
                        "content": "How to access head of linked list in javascript?"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "This is my simple solution in java\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        if (l1 == null && l2 == null) {\\n            return null;\\n        }\\n        if (l1 == null) {\\n            l1 = new ListNode(0);\\n        }\\n        if (l2 == null) {\\n            l2 = new ListNode(0);\\n        }\\n        \\n        int listNodeSum = l1.val+l2.val;\\n        \\n        ListNode currentNode = new ListNode((listNodeSum) % 10);\\n        \\n        if ((listNodeSum) >= 10) {\\n            if (l2.next == null) {\\n                l2.next = new ListNode(1);\\n            } else {\\n                l2.next.val += 1;\\n            }\\n        }\\n        currentNode.next = addTwoNumbers(l1.next, l2.next);\\n        return (currentNode);\\n    }    \\n}"
                    },
                    {
                        "username": "akshay9933patil",
                        "content": "Code works finely in my idle but shows this error:\nobject of type 'ListNode' has no len()\n    for i in range(-1, -(len(li)), -1): \n `class Solution:\n    def sum_of_num(self, li):\n        temp = 0\n        for i in range(-1, -(len(li)), -1):\n            num = li[i] * (10 ** (len(li) + i)) + temp\n            temp = num\n        return num\n\n    def addTwoNumbers(self, l1, l2):\n        Sum = self.sum_of_num(l1) + self.sum_of_num(l2)\n        return Sum`"
                    },
                    {
                        "username": "Eziohunt",
                        "content": "l1 = [2,4,3]\\nl2 = [5,6,4]\\nl1.reverse()\\nl2.reverse()\\nl3 = list(map(int,l1))\\nl4 = list(map(int,l2))\\na = [str(i) for i in l3]\\nb = [str(i) for i in l4]\\naa = int(\"\".join(a))\\nbb = int(\"\".join(b))\\nprint(aa+bb)\\n"
                    },
                    {
                        "username": "jonznaren",
                        "content": "        result = ListNode()\n        current = result\n        carry = 0\n\n        while l1 or l2 or carry:\n\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n\n            current.next = ListNode(total % 10)\n            current = current.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return result.next"
                    },
                    {
                        "username": "JinruXue",
                        "content": "python:\n\n```\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def toint(node):\n            if node:\n                return node.val+ 10*(toint(node.next))\n            else:\n                return 0\n        def tonode(num):\n            if num <= 9:\n                return ListNode(num)\n            else:\n                node = ListNode(num%10)\n                node.next = tonode(num//10)\n            return node\n        return tonode(toint(l1) + toint(l2))\n```"
                    }
                ]
            },
            {
                "id": 1724820,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1724815,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1724681,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1724609,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1723958,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1723482,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1722429,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1720953,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1720914,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1720469,
                "content": [
                    {
                        "username": "CTRLDON",
                        "content": "How to convert my list to a ListNode"
                    },
                    {
                        "username": "deshmukh1234",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "giannicrivello",
                        "content": "Why would the case l1 = [2,4,9], l2 = [5,6,4,9] expected [7,0,4,0,1] ????"
                    },
                    {
                        "username": "IrishRugbyman",
                        "content": "Hello guys, I don\\'t understand why this doesn\\'t work. I\\'m getting a \"Out of memory\" error \\n\\nif(l1 == null || l2 == null) return null;\\nint k;\\nif(l1.val + l2.val >= 10)\\n{\\nk = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse k = (l1.val + l2.val);\\nListNode result = new ListNode(k,null);\\nListNode copie = result;\\nresult.next = copie;\\nwhile(l1 != null && l2 != null)\\n{\\nif(l1.val + l2.val >= 10)\\n{\\ncopie.next.val = (l1.val + l2.val) - 10;\\nl1.next.val += 1;\\n}\\nelse copie.next.val = (l1.val + l2.val);\\nConsole.WriteLine(copie.val);\\nl1 = l1.next;\\nl2 = l2.next;\\ncopie = copie.next;\\n}\\nif(l1 == null && l2 != null)\\n{\\ncopie.next = l2.next;\\nl2 = l2.next;\\n}\\nif(l2 == null && l1 != null)\\n{\\ncopie.next = l1.next;\\nl1 = l1.next;\\n}\\nreturn result;"
                    },
                    {
                        "username": "kaeldougherty",
                        "content": "Python3: why doesn\\'t L1.next.val return the value of the next?  How would you access it?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "To store the large values , do we have any method except using carry method in cpp??\\n"
                    },
                    {
                        "username": "sogs",
                        "content": "I\\'m stuck at 1565/1568 testcases passed, I think the double loses precision. Need help\\n/*\\npublic class ListNode {\\n\\t\\t int val;\\n\\t\\t ListNode next;\\n\\t\\t ListNode() {}\\n\\t\\t ListNode(int val) { this.val = val; }\\n\\t\\t ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n\\t}\\n*/\\n\\nclass Solution {\\n\\tpublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\t\\tdouble num1 = listToInt(l1);\\n\\t\\tdouble num2 = listToInt(l2);\\n\\t\\t// System.out.println(num1);\\n\\t\\t// System.out.println(num2);\\n        //System.out.printf(\"%30f\",num1);\\n        //System.out.printf(\"%31f\",num2);\\n\\t\\treturn intToList(num1+num2);\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tpublic double listToInt(ListNode head) {\\n\\t\\tdouble position = 1.0;\\n\\t\\tdouble val=0.0;\\n\\t\\tListNode count= head;\\n\\t\\twhile(count!=null) {\\n\\t\\t\\tval = val+(count.val*position);\\n\\t\\t\\tposition=position*10.0;\\n\\t\\t\\tcount = count.next;\\n\\t\\t}\\n\\t\\treturn val;  \\n    }\\n\\n    public ListNode intToList(double val) {\\n\\n\\t\\tdouble count = 0.0;\\n\\t\\t\\n\\t\\tListNode ans = new ListNode();\\n\\t\\tListNode prev = ans;\\n\\t\\t\\n\\t\\twhile(val>=10) {\\n\\t\\t\\tListNode next = new ListNode();\\n\\t\\t\\tcount = val%10;\\n\\t\\t\\tval = val/10;\\n\\t\\t\\tans.val = (int)count;\\n\\t\\t\\tans.next = next;\\n\\t\\t\\tans = ans.next;\\n\\t\\t}\\n        ans.val = (int)val;\\n\\t\\tans.next= null;\\n\\n\\t\\treturn prev;\\n\\t}\\n}"
                    },
                    {
                        "username": "shilan-kp",
                        "content": "what if one of the node.val has two or more digits? It is possible!"
                    },
                    {
                        "username": "bhanni01",
                        "content": "I can run the code in my text editor and its passing but i get this error here:\\nTypeError: \\'ListNode\\' object is not iterable\\n    "
                    },
                    {
                        "username": "xingle0917",
                        "content": "# Solution with python3 \nclass Solution:\n    def addTwoNumbers(self, l1, l2) :\n        if len(l1)>=len(l2):\n            max_ls=l1\n            min_ls=l2\n        else:\n            max_ls = l2\n            min_ls = l1\n        carry = 0\n        new_list = []\n        for index in range(len(max_ls)):\n            if index < len(min_ls):\n                sum = min_ls[index] + max_ls[index] + carry\n            else:\n                sum = max_ls[index] + carry\n            carry = int(sum / 10)\n            new_list.append(sum%10)\n            if index == len(max_ls)-1 and sum==10:\n                new_list.append(1)\n        return new_list\n"
                    }
                ]
            },
            {
                "id": 1720194,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1718521,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1718511,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1717554,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1716656,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1714932,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1714006,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1713421,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1712457,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1711627,
                "content": [
                    {
                        "username": "qvsg987",
                        "content": "[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\\n[5,6,4]\\n\\nThis case in valid"
                    },
                    {
                        "username": "theWhiteChamaleon",
                        "content": "Hello, \\n\\nI am new to java and learning, I am trying something as below\\n\\nint val13 = l1.val;\\nListNode l12 = l1.next;\\nint val12 = l12.val;\\n\\nBut I get a null Pointer exception for l1 :\\njava.lang.NullPointerException: Cannot read field \"val\" because \"local4\" is null"
                    },
                    {
                        "username": "Bombus",
                        "content": "Hi everyone! There was a runtime error: subtraction of unsigned offset from 0x000000000005 overflowed to 0x0c040000001f and SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:34:13... View code below. What's that unsigned offset in ny solution?\n `\n #include <vector>\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *res;\n        bool remembered = 0;\n        for(int i = 0; ((l1[i]).next != nullptr && (l2[i]).next != nullptr); i++){\n            int sum = remembered;\n            /* not interesting - just iterating of cases 'one of the lists ending' through if-else */\n            res[i] = sum%10;\n            if(sum>10)\n                remembered = 1;\n        }\n        return res;\n    }\n};\n`"
                    },
                    {
                        "username": "AbenezerAbera",
                        "content": "Is two linked list have the same length?"
                    },
                    {
                        "username": "Sher_Ali",
                        "content": "how we are getting input, as there is no clear instruction?"
                    },
                    {
                        "username": "DanilaBerezin",
                        "content": "what language are you using for your solution?"
                    },
                    {
                        "username": "MarcusMaggidi",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int carry = 0;\\n        ListNode* head = nullptr;\\n        ListNode* cur = head;\\n        while(l1 || l2 || carry){\\n            int x = ((l1)?l1->val:0)+((l2)?l2->val:0)+carry;\\n            carry = x/10;\\n            ListNode * temp = new ListNode(x%10);\\n            if(cur == nullptr){\\n                cur = temp;\\n                head = cur;\\n            }\\n            else{\\n                cur->next = temp;\\n                cur = cur->next;\\n            }\\n            if(l1)l1 = l1->next;\\n            if(l2)l2 = l2->next;\\n        }\\n        \\n\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "Jaume_Avinyo",
                        "content": "for C++ users:\\n\\nhi guys, as far as i know long long can store a maximun number of 64 numbers (i cheked), but I\\'m getting this error:\\n\\nsigned integer overflow: 1000000000000000000 * 10 cannot be represented in type \\'long long\\' (solution.cpp) (operation done when reversing numbers)\\n\\nall test cases are working, even the l1 = 9 and l2 = 1,9,9,9,9,9,9,9,9,9\\n\\nbut i guess there is a test case with a larger number giving me a runtime error.\\n\\nam I missing something=?"
                    },
                    {
                        "username": "Yash_2112",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    long reverse(long x){\\n        long n = 0;\\n        while(x != 0){\\n            n = n*10 + x%10;\\n            x /= 10;\\n        }\\n        return n;\\n    }\\n    \\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        long num1 = 0;\\n        long num2 = 0;\\n        ListNode l = new ListNode();\\n        l = l1;\\n        while(l != null){\\n            num1 = num1*10 + l.val;\\n            l = l.next;\\n        }\\n \\n\\n        l = l2;\\n        while(l != null){\\n            num2 = num2*10 + l.val;\\n            l = l.next;\\n        }\\n\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        num1 = reverse(num1);\\n        num2 = reverse(num2);\\n        System.out.println(num1 + \" \" + num2);\\n        \\n        long ans = num1 + num2;\\n        System.out.println(ans);\\n\\n        \\n       if(ans!=0){\\n           ListNode answer = null;\\n           ListNode helper = null;\\n\\n            while(ans != 0){\\n                ListNode temp = new ListNode((int)ans%10);\\n                temp.next = null;\\n                if(answer == null){\\n                    answer = temp;\\n                    helper = temp;\\n                }else{\\n                    helper.next = temp;\\n                    helper = temp;\\n                }\\n                ans /= 10;\\n            }\\n           return answer; \\n        }\\n        else\\n          return new ListNode(0,null);\\n\\n        \\n    }\\n}\\n//please help out me why I am getting  the wrong answer"
                    },
                    {
                        "username": "ArtemSkok",
                        "content": "I am getting this with my solution in JavaScript, but it perfectly runs on my machine with NodeJs:\n\n```\nRuntime Error\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\n```\n\nSolution itself:\n```\nfunction addTwoNumbers(l1, l2) {\n  let l1CurrentNode = l1;\n  let l2CurrentNode = l2;\n  let overflow = 0;\n  let resultRoot;\n  let currentResultNode;\n\n  while (l1CurrentNode || l2CurrentNode || overflow) {\n    let newResultNode;\n\n    if (!l1CurrentNode && !l2CurrentNode && overflow) {\n      newResultNode = new ListNode(overflow);\n    } else {\n      const value1 = l1CurrentNode?.val || 0;\n      const value2 = l2CurrentNode?.val || 0;\n\n      const sum = value1 + value2 + overflow;\n\n      newResultNode = new ListNode(sum % 10);\n\n      overflow = Math.floor(sum / 10);\n    }\n\n    if (resultRoot) {\n      currentResultNode.next = newResultNode;\n    } else {\n      resultRoot = newResultNode;\n    }\n\n    currentResultNode = newResultNode;\n    l1CurrentNode = l1CurrentNode?.next;\n    l2CurrentNode = l2CurrentNode?.next;\n  }\n\n  return resultRoot;\n}\n```\n\nI am wondering if this is the issue of my solution or of JavaScript or of this specific \"problem\" or of LeetCode in general?\n"
                    },
                    {
                        "username": "abdulbari131103",
                        "content": "This is my solution. Please look at it\\nclass Solution:\\n\\n    def adder(self, a, b, cin = 0):\\n        val = a + b + cin\\n        carry = val // 10\\n        if val >= 10:\\n            val = val % 10\\n        return (val, carry)\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        val, carry = self.adder(l1.val, l2.val)\\n        head = ListNode(val)\\n        newList = head\\n        list1Node = l1.next\\n        list2Node = l2.next\\n        while list1Node or list2Node:\\n            if not list1Node:\\n                list1Node = ListNode()\\n            if not list2Node:\\n                list2Node = ListNode()\\n            val, carry = self.adder(list1Node.val,list2Node.val, carry)            \\n            node = ListNode(val)\\n            \\n            newList.next = node\\n            newList = node\\n            list1Node = list1Node.next\\n            list2Node = list2Node.next\\n        if carry > 0:\\n            newList.next = ListNode(carry)\\n        return head"
                    }
                ]
            },
            {
                "id": 1711516,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1710707,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1709650,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1707201,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1706802,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1701505,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1700484,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1700250,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1700035,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1696711,
                "content": [
                    {
                        "username": "Reese_D",
                        "content": "Recursive solution c++\\n\\n `class Solution {\\npublic:\\n    \\n    int carryover = 0;\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){\\n        ListNode* dummyHead = new ListNode(0);\\n        _addTwoNumbers(l1, l2, dummyHead);\\n        //return child of the dummy head which is the real start of our list\\n        return dummyHead->next;\\n    }\\n    void _addTwoNumbers(ListNode* l1, ListNode* l2, ListNode* parent) {\\n        //we\\'ve reached the very end of both lists, we need to terminate\\n        if(!l1 && !l2){\\n            //if we still have some carry over we\\'ll need to push that onto the end now\\n            if(carryover > 0 ){\\n                parent->next = new ListNode(carryover);\\n            }\\n            return;\\n        }\\n        //add our current values + whatever carryover happened from the prior step\\n        int result = carryover;\\n        result += l1 ? l1->val : 0;\\n        result += l2 ? l2->val : 0;\\n        //Take the modulo of the result to get the value of our current node, I.E 12 % 10 = 2\\n        auto current = new ListNode(result % 10);\\n        parent->next = current;\\n        //And now integer division to get the carryover I.E 12 / 10 = 1\\n        carryover = result / 10;\\n        \\n        //repeat this recursively with the next two items\\n        _addTwoNumbers(l1 ? l1->next : nullptr, l2 ? l2->next : nullptr, current);\\n    }\\n};`"
                    },
                    {
                        "username": "ashin-55",
                        "content": " \\n\\n `/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    let a1=\\'\\',a2=\\'\\',b=0,c=[]\\n    for(i=l1.length-1;i>=0;i--){\\n       a1=a1+l1[i]\\n    }\\n    for(i=l2.length-1;i>=0;i--){\\n       a2=a2+l2[i]\\n    }\\n    b=String(Number(a1)+Number(a2))\\n    console.log(b)\\n    for(i=0;i<b.length;i++){\\n        c.push(Number(b[i]))\\n    }\\n    console.log(c)\\n   return c\\n    \\n};`\\ngetting this error why?\\n\\n`Line 46 in solution.js\\n             throw new TypeError(__serialize__(ret) + \" is not valid value for the expected return type ListNode\");\\n             ^\\nTypeError: [0] is not valid value for the expected return type ListNode\\n    Line 46: Char 20 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 30: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`"
                    },
                    {
                        "username": "DjKesu",
                        "content": "How can this possibly work with an int type when the test case makes it overflow beyond it\\'s range. Two solutions, change test case or update ListNode Class. Anyone have the issue?\\nTest case is:\\nl1 =\\n[9]\\n\\nl2 =\\n[1,9,9,9,9,9,9,9,9,9]\\n\\n"
                    },
                    {
                        "username": "madhuri7patel",
                        "content": "solution"
                    },
                    {
                        "username": "allaptr",
                        "content": "Getting compile error in Go\\n```\\nLine 33: Char 19: undefined: Deserializer (solution.go)\\nLine 34: Char 33: undefined: Deserializer (solution.go)\\nLine 77: Char 34: undefined: Serializer (solution.go)\\n```\\nThe code is compiled successfully with go1.9, below is the link to golang playground.  \\n`https://go.dev/play/p/rqrx3yS5ZC8`\\nLeetcode playground seems to be outdated and is giving a similar compile error."
                    },
                    {
                        "username": "dustindelgross",
                        "content": "## Probably Giving Up Programming\n\nTbh I'm really stumped on a lot of these questions. I have no idea how the hell you guys do it. I've been programming stuff for a few years now but I've been working at just this problem for like 4 hours and I can't figure it out. \n\nI think I'm just gonna choose a different career path. I love coding so much, and I want to make so many things, but I genuinely just don't think I'm smart enough for it.\n\nGood luck to the rest of you, hope you figure it out."
                    },
                    {
                        "username": "hdamnit",
                        "content": "just because you stuck in a single problem, you should net make an opinion for career change. something is wrong with you on fundamental level,"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(N) Soln. \\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0FAmazon | Microsoft | Facebook | Qualcomm\\n\\nhttps://leetcode.com/problems/add-two-numbers/solutions/2861400/easy-c-o-n-soln-amazon-microsoft-facebook-qualcomm/"
                    },
                    {
                        "username": "Modern_Cpp",
                        "content": "```C++\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode *head = new ListNode();\\n        ListNode *current = head;\\n        int carry = 0;\\n        while (l1 || l2) {\\n            int v1 = l1 ? l1->val : 0;\\n            int v2 = l2 ? l2->val : 0;\\n            int sum = v1 + v2 + carry;\\n            carry = sum / 10;\\n            current->next = new ListNode(sum % 10);\\n            current = current->next;\\n            l1 = l1 ? l1->next : nullptr;\\n            l2 = l2 ? l2->next : nullptr;\\n        }\\n        if (carry > 0) {\\n            current->next = new ListNode(1);\\n        }\\n        return head->next;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "ayushpandey19",
                        "content": "ListNode* l3 = new ListNode(0);\\n        int carry =0;\\n        ListNode* head = l3;\\n        while(l1 && l2)\\n        {              \\n            int value = l1->val+l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            l2 = l2->next;           \\n        }\\n        \\n        while(l1)\\n        { \\n             int value = l1->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l1 = l1->next;\\n            \\n        }\\n        \\n        while(l2)\\n        {\\n             int value = l2->val+carry; \\n            carry = value/10;\\n            l3->next  = new ListNode(value%10);\\n            l3 = l3->next;\\n            l2 = l2->next;     \\n            \\n        }\\n        \\n        if(carry)\\n        {\\n            l3 ->next = new ListNode(carry);\\n        }\\n        return head->next;"
                    },
                    {
                        "username": "CCharlie-xiu",
                        "content": "if I want to run it on the pycharm, how do I write ListNode:\nI wrote like:\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        root = ListNode(0)\n        result = root\n        excess = 0\n        while l1 or l2 or excess:\n            if l1:\n                excess += l1.val\n                l1 = l1.next\n            if l2:\n                excess += l2.val\n                l2 = l2.next\n\n            result.next = ListNode(excess % 10)\n            result = result.next\n            excess = excess // 10\n\n        return root.next\n```\n\nbut remind me: AttributeError: 'list' object has no attribute 'val', how to solve"
                    },
                    {
                        "username": "rivenofionia",
                        "content": "It isn\\'t a problem with your class, maybe when you are calling the function on pycharm, you are passing in a list as l1 or l2. Best of luck and happy 2023!"
                    }
                ]
            },
            {
                "id": 1694768,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1694645,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1692052,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1691239,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1687736,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1687732,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1685550,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1682318,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1677151,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1672605,
                "content": [
                    {
                        "username": "marssantoso",
                        "content": "Transforming the linked list to number first wouldn\\'t seem to work, because you\\'d get a huge linked list in some of the test cases and JS/TS starts to break because the node value\\'s type is `number` instead of `BigInt`..."
                    },
                    {
                        "username": "branched",
                        "content": "Why is l1.length undefined no matter what I do? My code runs fine in playground... This problem is so bad."
                    },
                    {
                        "username": "mudssira01",
                        "content": "Instead of loop both list, loop through to this single.\\nSee below answer.\\n\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n\\n        ListNode sumList = null;\\n        int carry = 0;\\n\\n        while(true) {\\n            // check \\n            if(l1 == null && l2 == null) {\\n                break;\\n            }\\n\\n            // sum two numbers\\n            int sum = carry;\\n            carry = 0;\\n            if(l1 != null) {\\n                sum += l1.val;\\n            }\\n            if(l2 != null) {\\n                sum += l2.val;\\n            }\\n\\n            // Point to the next\\n            if(l1 != null) {\\n                l1 = l1.next;\\n            }\\n            if(l2 != null) {\\n                l2 = l2.next;\\n            }\\n\\n            if(sum >= 10) {\\n                int finalValue = sum % 10;\\n                carry = sum/10;\\n                sum = finalValue;\\n            }\\n\\n            // Add in sum-list\\n            sumList = insertNode(sumList, sum);\\n            if(l1 == null && l2 == null && carry > 0) {\\n                sumList = insertNode(sumList, carry);\\n            } \\n        }\\n\\n        return sumList;\\n    }\\n\\n    public ListNode insertNode(ListNode node, int data) {\\n        ListNode newNode = new ListNode(data);\\n\\n        if(node == null) {\\n            node = newNode;\\n            return node;\\n        }\\n\\n        ListNode last = node;\\n        while(last.next != null) {\\n            last = last.next;\\n        }\\n        last.next = newNode;\\n        return node;\\n    }\\n\\n}"
                    },
                    {
                        "username": "Orlandouchiha425",
                        "content": "I must admit, i searched for this answer. However everywhere i look it talks about new ListNode(0) and next. what does that mean? "
                    },
                    {
                        "username": "sajal_19",
                        "content": "my solution passed 1565 test cases out of 1568, only beacause at the end one test case has\\n l1 =1000000000000000000000000000001\\nand l2=465\\nwhere the value of l1 exceeds the maximum value of long, how do you tackle that?"
                    },
                    {
                        "username": "sajal_19",
                        "content": "why are test cases even have numbers even bigger than the maximum value of long"
                    },
                    {
                        "username": "toweber86",
                        "content": "For my C++ solution I get an address sanitizer heap-use-after-free message. The code compiles and runs fine on my machine. Too bad I liked the problem, but I do not know what leet code actually does as clean up. This one gets a down vote from me."
                    },
                    {
                        "username": "madhumithayoo20",
                        "content": "i am getting an error called not a statement what does that mean\\nListNode*value=new ListNode(digit);\\ncurrentNode->next= value;\\ncurrentNode=value;\\n\\nremaining=remaining->next;\\n}\\nif(carry!=0){\\nListNode*value=new ListNode(carry);\\ncurrentNode->next = value;\\n\\nsomeone help me with this"
                    },
                    {
                        "username": "sermyro",
                        "content": "The output of example 3 is: [8,9,9,9,0,0,0,0,1] - four \\'0\\' not three "
                    },
                    {
                        "username": "tiparium",
                        "content": "Why is my current solution not working?\nTo begin, I know this isn't a complete solution, at the moment it assumes both input linked lists are the same size. But so long as that parameter is observed, I don't understand what is going wrong here. I'm trying to solve with a recursive approach, but currently this is giving me a member access within misaligned address runtime error. If I replace out with a NULL value before returning it, (second return statement, just after \"no final node\" print) suddenly my code runs way more recursive calls than I would expect. I am fairly stumped here, I can't tell if I'm just being stupid, or if this is C being quirky.\n```\nstruct ListNode* addTwoNumbersWithCarry(struct ListNode* l1, struct ListNode* l2, int carry)\n{\n    printf(\"----------------------------------------------------------------\\n\");\n    struct ListNode* out = (struct ListNode*)malloc(sizeof(struct ListNode));\n    // Both are null\n    if(l1 == NULL && l2 == NULL){\n        // There is a carry\n        printf(\"Null Hit\\n\");\n        if(carry > 0){\n            printf(\"One final node\\n\");\n            out->val = 0;\n            out->next = NULL;\n            return out;\n        } else {\n            printf(\"No final node\\n\");\n            return out;\n        }\n    }\n\n    int cOut = 0;\n    // Both contain valid entries\n    printf(\"l1Val: %d\\n\", l1->val);\n    printf(\"l2Val: %d\\n\", l2->val);\n    if(l1 != NULL && l2 != NULL)\n    {\n        int val = l1->val + l2->val + carry;\n        if(val > 9){\n            cOut++;\n            val = val - 10;\n        }\n        out->val = val;\n        printf(\"%d\\n\", out->val);\n        out->next = addTwoNumbersWithCarry(l1->next, l2->next, cOut);\n        return out;\n    }\n    printf(\"Exit condition reached\\n\");\n    return out;\n}\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    return addTwoNumbersWithCarry(l1, l2, 0);\n}\n```"
                    }
                ]
            },
            {
                "id": 1671220,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            },
            {
                "id": 1665790,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            },
            {
                "id": 1665068,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            },
            {
                "id": 1663908,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            },
            {
                "id": 1662433,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            },
            {
                "id": 1659766,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            },
            {
                "id": 1654836,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            },
            {
                "id": 1654563,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            },
            {
                "id": 1648280,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            },
            {
                "id": 1638335,
                "content": [
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java Python C++ and C programming.\n[https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-add-two-numbers-problem-solution.html)"
                    },
                    {
                        "username": "rajeshselvanayagam",
                        "content": "The expected result for input [2,4,9] & [5,6,4,9] seems to be [7,0,4,0,1] . Can someone help in explaining the testcase 22/1568.\\n\\nThanks in advance"
                    },
                    {
                        "username": "sumanthkuna",
                        "content": "942+9465=10407"
                    },
                    {
                        "username": "walopes23",
                        "content": "Tip: You don\\'t need anything additional to do the sums (but the response\\'s linked list itself)."
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "I have a question, in python:\\nIf I do:\\n          l1=l1.next\\n          print(l1.val)\\nI get that l1 is a NoneType and therefore it has no attribute val.\\n\\nHowever if I just add and if\\n          l1=l1.next\\n          if l1 != None:\\n               print(l1.val)\\n\\nI don\\'t get any errors.\\nWhat is going on?\\n"
                    },
                    {
                        "username": "ubiktovarl",
                        "content": "[@cjanowiak](/cjanowiak) But why do I have to check if the next field is None for it be recognized as an instance of a class? knowing that is not null."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Congratulations, you have discovered checking for null values. It is possible for the Next field to have no value (which in Python is represented by the keyword `None`), in which case you have reached the end of the linkedlist."
                    },
                    {
                        "username": "cjanowiak",
                        "content": "Several of the fastest python submissions on this one bypass the driver and simply feed the judge the expected output directly as text rather than returning linked lists! Can leetcode prune the submissions database and remove solutions that don\\'t actually provide a definition of `addTwoNumbers` as required?"
                    },
                    {
                        "username": "devintripp",
                        "content": "I thought that adding each digit in each place like elementary addition would be best here, but I got only 5% better than most haha. It seems like they are pusheing to make that the obvious solution. They already have the arrays reveresed and you do long addition starting with the lowests tenths value and carry over any \"extra ten\". Perhaps I just coded it sloppy, but shouldn't this be the fastest solution?\nMaybe because mine is not recursive?\n"
                    },
                    {
                        "username": "tonyvito12",
                        "content": "I'm trying to join the list and it says l1.join is not a function (using javascript)"
                    },
                    {
                        "username": "TheoPerignon",
                        "content": "Getting a Runtime Error and Stdout \" NaN \" can someone help me understand what i do wrong please.\\n\\nvar addTwoNumbers = function(l1, l2){\\n  var newArr = []\\n  var newArr2 = []\\n  for (var i = 0, j = l1.length - 1; i < l1.length; i++, j--) {      \\n        newArr[i] = l1[j];\\n    }   \\n     for (var i = 0, j = l2.length - 1; i < l2.length; i++, j--) {      \\n        newArr2[i] = l2[j];\\n    }   \\n  var j = newArr.join(\"\")\\n  var j2 = newArr2.join(\"\")\\n  var p = parseInt(j, 10)\\n  var p2 = parseInt(j2, 10)\\n  var sum = p + p2;\\n  console.log(sum)\\nvar rrr = Array.from(String(sum));\\n\\nvar result = rrr.map(str => Number(str));\\nvar resultArray = []\\n  for (var i = 0, j = result.length - 1; i < result.length; i++, j--) {      \\n        resultArray[i] = result[j];\\n    }   \\n\\n    return resultArray;\\n\\n}\\n"
                    },
                    {
                        "username": "oreoexpo505",
                        "content": "1) Do we need to account for the possibility that the linked lists might be of different size?\\n2) If two digits add up to >=10, the \"1\" is carried from the 10s column to the 1s column instead of the 100s column as it would be in normal addition.  Was this intended?"
                    },
                    {
                        "username": "parryrpy",
                        "content": "1. yes\n2. yes"
                    },
                    {
                        "username": "dung232003",
                        "content": "can i use array in here ?"
                    },
                    {
                        "username": "shibashis_deb",
                        "content": "I tried but it is difficult! Using array or ArrayList consumes a lot of extra memory and I got \"Time Limit Exceeded\".\\n"
                    }
                ]
            }
        ]
    }
]