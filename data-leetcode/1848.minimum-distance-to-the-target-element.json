[
    {
        "title": "Minimum Distance to the Target Element",
        "question_content": "Given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note that&nbsp;abs(x)&nbsp;is the absolute value of x.\nReturn abs(i - start).\nIt is guaranteed that target exists in nums.\n&nbsp;\nExample 1:\n\nInput: nums = [1,2,3,4,5], target = 5, start = 3\nOutput: 1\nExplanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.\n\nExample 2:\n\nInput: nums = [1], target = 1, start = 0\nOutput: 0\nExplanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.\n\nExample 3:\n\nInput: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0\nOutput: 0\nExplanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.\n\n&nbsp;\nConstraints:\n\n\t1 <= nums.length <= 1000\n\t1 <= nums[i] <= 104\n\t0 <= start < nums.length\n\ttarget is in nums.",
        "solutions": [
            {
                "id": 1186927,
                "title": "c-one-pass-optimization",
                "content": "As an optional optimization, we exit early if `res` cannot be improved anymore.\\n\\n\\n```cpp\\nint getMinDistance(vector<int>& nums, int target, int start) {\\n    int res = INT_MAX;\\n    for (int i = 0; i < nums.size() && res > abs(start - i); ++i)\\n        if (nums[i] == target)\\n            res = abs(start - i);\\n    return res;\\n}\\n```\\nAnother optimization is to initiate the search from the `start` position. It is potentially faster when the `target` is close to the `start`.\\n```cpp\\nint getMinDistance(vector<int>& nums, int t, int start) {\\n    int i = 0, sz = nums.size();\\n    while (nums[max(0, start - i)] != t && nums[min(start + i, sz - 1)] != t)\\n        ++i;\\n    return i;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nint getMinDistance(vector<int>& nums, int target, int start) {\\n    int res = INT_MAX;\\n    for (int i = 0; i < nums.size() && res > abs(start - i); ++i)\\n        if (nums[i] == target)\\n            res = abs(start - i);\\n    return res;\\n}\\n```\n```cpp\\nint getMinDistance(vector<int>& nums, int t, int start) {\\n    int i = 0, sz = nums.size();\\n    while (nums[max(0, start - i)] != t && nums[min(start + i, sz - 1)] != t)\\n        ++i;\\n    return i;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1186947,
                "title": "clean-python-3-o-answer",
                "content": "Will be faster if `target` is cloese to `start`.\\n\\nTime: `O(answer)`, degrade to `O(N)` if target is in the head or tail of the given array.\\nSpace: `O(1)`\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        l = r = start\\n        while l >= 0 or r < len(nums):\\n            if l >= 0 and nums[l] == target: return start - l\\n            if r < len(nums) and nums[r] == target: return r - start\\n            l -= 1\\n            r += 1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        l = r = start\\n        while l >= 0 or r < len(nums):\\n            if l >= 0 and nums[l] == target: return start - l\\n            if r < len(nums) and nums[r] == target: return r - start\\n            l -= 1\\n            r += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1186832,
                "title": "python-1-line-solution",
                "content": "# **Explanation**\\nIterate all values and check if it equals to target.\\n<br>\\n\\n# **Complexity**\\nTime `O(n)`\\nSpace `O(1)`\\n<br>\\n\\n\\n**Python**\\n```py\\n    def getMinDistance(self, A, target, start):\\n        return min(abs(i - start) for i, a in enumerate(A) if a == target)\\n```\\n",
                "solutionTags": [],
                "code": "```py\\n    def getMinDistance(self, A, target, start):\\n        return min(abs(i - start) for i, a in enumerate(A) if a == target)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1186862,
                "title": "python3-linear-sweep",
                "content": "\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        ans = inf\\n        for i, x in enumerate(nums): \\n            if x == target: \\n                ans = min(ans, abs(i - start))\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        ans = inf\\n        for i, x in enumerate(nums): \\n            if x == target: \\n                ans = min(ans, abs(i - start))\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1186825,
                "title": "c-java-self-explanatory",
                "content": "# c++\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans=INT_MAX;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target){\\n                ans=min(ans,abs(i-start));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n# java\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == target) {\\n                ans = Math.min(ans, Math.abs(i - start));\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```\\n**Feel free to ask any question in the comment section.**\\nI hope that you\\'ve found the solution useful.\\nIn that case, **please do upvote and encourage me** to on my quest to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans=INT_MAX;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target){\\n                ans=min(ans,abs(i-start));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == target) {\\n                ans = Math.min(ans, Math.abs(i - start));\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1186979,
                "title": "c-sequential-scan-two-pointer-approach",
                "content": "There are two ways to solve this problem.\\n\\n1. Doing a sequential traversal of array and updating the min(abs(start-i), min) whenever nums[i] == target.\\n2. Second is to use two pointers,  have two pointers starting from start and let them move in opposite directions. Whenever we reach the target, this is closest to start.\\n\\nCode for 2nd approach:\\n\\n```\\nint getMinDistance(vector<int>& nums, int target, int start) {\\n        int i = start, j = start;\\n        \\n        while(i >= 0 or j <= nums.size()-1) {\\n            if(i >= 0 and nums[i] == target) break;\\n            if(j <= nums.size() - 1 and nums[j] == target) break;\\n            \\n            j++;\\n            i--;\\n        }\\n        \\n        if(i >= 0 and nums[i] == target) {\\n            return abs(start - i);\\n        }\\n        \\n        return abs(start - j);\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint getMinDistance(vector<int>& nums, int target, int start) {\\n        int i = start, j = start;\\n        \\n        while(i >= 0 or j <= nums.size()-1) {\\n            if(i >= 0 and nums[i] == target) break;\\n            if(j <= nums.size() - 1 and nums[j] == target) break;\\n            \\n            j++;\\n            i--;\\n        }\\n        \\n        if(i >= 0 and nums[i] == target) {\\n            return abs(start - i);\\n        }\\n        \\n        return abs(start - j);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1187372,
                "title": "java-array-beats-100-0ms-t-c-o-n-s-c-o-1",
                "content": "\\n    // O(nums.length) O(1)\\n\\tpublic int getMinDistance(int[] nums, int target, int start) {\\n\\n\\t\\tint min = Integer.MAX_VALUE, len = nums.length;\\n\\t\\tfor (int i = 0; i < len; i++) {\\n\\t\\t\\tif (nums[i] == target) {\\n\\t\\t\\t\\tif (Math.abs(i - start) < min)\\n\\t\\t\\t\\t\\tmin = Math.abs(i - start);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn min;\\n\\t}",
                "solutionTags": [],
                "code": "\\n    // O(nums.length) O(1)\\n\\tpublic int getMinDistance(int[] nums, int target, int start) {\\n\\n\\t\\tint min = Integer.MAX_VALUE, len = nums.length;\\n\\t\\tfor (int i = 0; i < len; i++) {\\n\\t\\t\\tif (nums[i] == target) {\\n\\t\\t\\t\\tif (Math.abs(i - start) < min)\\n\\t\\t\\t\\t\\tmin = Math.abs(i - start);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn min;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 1188573,
                "title": "java-o-n-solution-using-stream",
                "content": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        return IntStream.range(0, nums.length)\\n            .filter(i -> nums[i] == target)\\n            .map(i -> Math.abs(i - start))\\n            .min()\\n            .getAsInt();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        return IntStream.range(0, nums.length)\\n            .filter(i -> nums[i] == target)\\n            .map(i -> Math.abs(i - start))\\n            .min()\\n            .getAsInt();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1186919,
                "title": "python-easy-to-undersand",
                "content": "Just in case, this code may be explained well for beginners.\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        a = []\\n        for i in range(len(nums)):\\n            if nums[i]==target:\\n                 a.append(abs(start-i))\\n        return min(a)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        a = []\\n        for i in range(len(nums)):\\n            if nums[i]==target:\\n                 a.append(abs(start-i))\\n        return min(a)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1262476,
                "title": "c-one-pass-4-lines-of-code-only",
                "content": "**PLZ UPVOTE IF YOU LIKED IT**\\n\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans=INT_MAX;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target) ans=min(ans,abs(start-i));\\n        }\\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans=INT_MAX;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target) ans=min(ans,abs(start-i));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2965311,
                "title": "java-easy-solution-3-line-code",
                "content": "please upvote, if you like it.Thak you\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] array, int target, int start) {\\n        int store = Integer.MAX_VALUE, min = Integer.MAX_VALUE;\\n        for (int i = 0; i < array.length; i++) {\\n            if (array[i] == target) store = i;\\n            min = Math.min(min, Math.abs(store - start));\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] array, int target, int start) {\\n        int store = Integer.MAX_VALUE, min = Integer.MAX_VALUE;\\n        for (int i = 0; i < array.length; i++) {\\n            if (array[i] == target) store = i;\\n            min = Math.min(min, Math.abs(store - start));\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1204659,
                "title": "python3-simple-solution-beats-90-users",
                "content": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        if nums[start] == target:return 0\\n        i, j = start-1, start+1\\n        while j < len(nums) or i > -1:\\n            if i > -1:\\n                if nums[i] == target:\\n                    return start-i\\n                i -= 1\\n            if j < len(nums):\\n                if nums[j] == target:\\n                    return j-start\\n                j += 1\\n```\\n**If you like this solution, please upvote for this**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        if nums[start] == target:return 0\\n        i, j = start-1, start+1\\n        while j < len(nums) or i > -1:\\n            if i > -1:\\n                if nums[i] == target:\\n                    return start-i\\n                i -= 1\\n            if j < len(nums):\\n                if nums[j] == target:\\n                    return j-start\\n                j += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1186800,
                "title": "python-2-simple-solutions-faster-than-100",
                "content": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        res = []\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                res.append(abs(i - start))\\n        return min(res)\\n```\\n\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        res = sys.maxsize\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                res = min(res,(abs(i - start)))\\n        return res\\n```\\n\\n![image](https://assets.leetcode.com/users/images/407ccaaa-0b71-4b0f-a453-34a0a54e68bb_1619928523.5857952.png)\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        res = []\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                res.append(abs(i - start))\\n        return min(res)\\n```\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        res = sys.maxsize\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                res = min(res,(abs(i - start)))\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3669607,
                "title": "100-beats-best-java-beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n     int n = nums.length;\\n     int min = Integer.MAX_VALUE;\\n     for(int i=0;i<n;i++){\\n         if(nums[i]==target){\\n          if(Math.abs(i-start)<min){\\n              min = Math.abs(i-start);\\n          }   \\n         }\\n     }\\n     return min;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n     int n = nums.length;\\n     int min = Integer.MAX_VALUE;\\n     for(int i=0;i<n;i++){\\n         if(nums[i]==target){\\n          if(Math.abs(i-start)<min){\\n              min = Math.abs(i-start);\\n          }   \\n         }\\n     }\\n     return min;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2914715,
                "title": "java-easy-peasy-solution",
                "content": "# Please Upvote :D\\n``` java []\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min = Integer.MAX_VALUE;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == target) {\\n                min = Math.min(min, Math.abs(i - start));\\n            }\\n        }\\n\\n        return min;\\n    }\\n}\\n\\n// TC: O(n), SC: O(1)\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "``` java []\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min = Integer.MAX_VALUE;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == target) {\\n                min = Math.min(min, Math.abs(i - start));\\n            }\\n        }\\n\\n        return min;\\n    }\\n}\\n\\n// TC: O(n), SC: O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2825709,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int sum=nums.length-1;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target){\\n              sum=Math.min(sum,Math.abs(i-start));  \\n            }\\n        }\\n        return sum;\\n    }}\\n\\t```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int sum=nums.length-1;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target){\\n              sum=Math.min(sum,Math.abs(i-start));  \\n            }\\n        }\\n        return sum;\\n    }}\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 2705184,
                "title": "o-n-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let min = Number.POSITIVE_INFINITY;\\n    for(let i =0;i<nums.length;i++){\\n        if(nums[i]==target){\\n            min = Math.min(min,Math.abs(i-start))\\n        }\\n    }\\n   return min\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let min = Number.POSITIVE_INFINITY;\\n    for(let i =0;i<nums.length;i++){\\n        if(nums[i]==target){\\n            min = Math.min(min,Math.abs(i-start))\\n        }\\n    }\\n   return min\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2589037,
                "title": "with-explanation-comments-time-8-ms-63-78-space-9-5-mb-96-11",
                "content": "**Like it? ->Upvote please!** \\u30C4\\n\\n\\'\\'\\'\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        \\n        //initialize a variable with the largest possible value\\n        int res=INT_MAX;\\n        \\n        //loop over the whole array elements\\n        for(int i=0;i<nums.size();i++){\\n            //check if the current value equals to the target one\\n            if(nums[i]==target)\\n                //if yes-> compare and save the minumum valid number reached in the loop\\n                res=min(res, abs(i-start));\\n                \\n        }\\n        \\n        //return the min absolute value of the two variables\\n        return res;\\n    }\\n};\\n\\'\\'\\'\\n\\n**Like it? ->Upvote please!** \\u30C4\\n**If still not understood, feel free to comment. I will help you out**\\n**Happy Coding :)**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        \\n        //initialize a variable with the largest possible value\\n        int res=INT_MAX;\\n        \\n        //loop over the whole array elements\\n        for(int i=0;i<nums.size();i++){\\n            //check if the current value equals to the target one\\n            if(nums[i]==target)\\n                //if yes-> compare and save the minumum valid number reached in the loop\\n                res=min(res, abs(i-start));\\n                \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1290930,
                "title": "python-for-beginners",
                "content": "\\t\\tclass Solution:\\n\\t\\t\\tdef getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n\\t\\t\\t\\treturn min(abs(i-start) for i,j in enumerate(nums) if nums[i]==target)",
                "solutionTags": [],
                "code": "\\t\\tclass Solution:\\n\\t\\t\\tdef getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n\\t\\t\\t\\treturn min(abs(i-start) for i,j in enumerate(nums) if nums[i]==target)",
                "codeTag": "Java"
            },
            {
                "id": 1200271,
                "title": "python-with-early-exit",
                "content": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        if nums[start] == target: return 0\\n        left, right = start-1, start+1\\n        N = len(nums)\\n        while True:\\n            if left >=0 and nums[left] == target:\\n                return start - left\\n            if right < N and nums[right] == target:\\n                return right - start\\n            left -= 1\\n            right += 1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        if nums[start] == target: return 0\\n        left, right = start-1, start+1\\n        N = len(nums)\\n        while True:\\n            if left >=0 and nums[left] == target:\\n                return start - left\\n            if right < N and nums[right] == target:\\n                return right - start\\n            left -= 1\\n            right += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1188277,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        let mut min_dist = std::i32::MAX;\\n        for (i, val) in nums.iter().enumerate() {\\n            if *val == target {\\n                min_dist = min_dist.min((i as i32 - start).abs());\\n                if min_dist == 0 {\\n                    break;\\n                }\\n            }\\n        }\\n        min_dist\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Enumeration"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        let mut min_dist = std::i32::MAX;\\n        for (i, val) in nums.iter().enumerate() {\\n            if *val == target {\\n                min_dist = min_dist.min((i as i32 - start).abs());\\n                if min_dist == 0 {\\n                    break;\\n                }\\n            }\\n        }\\n        min_dist\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3653440,
                "title": "java-easy-solution-0ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nhere i have used basic concept.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n       int min=Integer.MAX_VALUE;\\n       for(int i=0;i<nums.length;i++) {\\n           if(nums[i]==target){\\n               int ans=Math.abs(i-start);\\n               min=Math.min(ans,min);\\n           }\\n       }\\n       return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n       int min=Integer.MAX_VALUE;\\n       for(int i=0;i<nums.length;i++) {\\n           if(nums[i]==target){\\n               int ans=Math.abs(i-start);\\n               min=Math.min(ans,min);\\n           }\\n       }\\n       return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3596152,
                "title": "python-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        curVal=len(nums)\\n        for i in range(start,len(nums)):\\n            if nums[i]==target:\\n                curVal=min(curVal,abs(i-start))\\n                break\\n        j=start\\n        while(j>=0):\\n            if nums[j]==target:\\n                curVal=min(curVal,abs(j-start))\\n                break\\n            j-=1\\n        return curVal\\n            \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        curVal=len(nums)\\n        for i in range(start,len(nums)):\\n            if nums[i]==target:\\n                curVal=min(curVal,abs(i-start))\\n                break\\n        j=start\\n        while(j>=0):\\n            if nums[j]==target:\\n                curVal=min(curVal,abs(j-start))\\n                break\\n            j-=1\\n        return curVal\\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3516534,
                "title": "easy-c-solution-in-o-n-time-complexity",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFind the index of \\'target\\', then find the minimum value if target - start.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& a, int target, int start) {\\n        int e1 = -1;\\n        int dist = INT_MAX;\\n        \\n        for(int i = 0; i < a.size(); i++)\\n        {\\n            if(a[i] == target)\\n                e1 = i;    \\n            if(e1 != -1)\\n                if(abs(e1-start) < dist)\\n                    dist = abs(e1-start);\\n        }\\n        if(dist == INT_MAX)\\n            return -1;\\n        return dist;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& a, int target, int start) {\\n        int e1 = -1;\\n        int dist = INT_MAX;\\n        \\n        for(int i = 0; i < a.size(); i++)\\n        {\\n            if(a[i] == target)\\n                e1 = i;    \\n            if(e1 != -1)\\n                if(abs(e1-start) < dist)\\n                    dist = abs(e1-start);\\n        }\\n        if(dist == INT_MAX)\\n            return -1;\\n        return dist;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3413116,
                "title": "minimum-distance-to-the-target-element-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int i, min=INT_MAX;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            if(nums[i]==target && abs(i-start)<min)\\n            {\\n                min = abs(i-start);\\n            }\\n        }\\n        return min;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/792a2ee3-fa92-4936-9a87-216cd9a9ac02_1682613207.1269994.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int i, min=INT_MAX;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            if(nums[i]==target && abs(i-start)<min)\\n            {\\n                min = abs(i-start);\\n            }\\n        }\\n        return min;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3223288,
                "title": "java-runtime-0-ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        \\n        int index = nums.length;\\n\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target){\\n                index = Math.min(index,Math.abs(i-start));\\n            }\\n        }\\n        return index;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        \\n        int index = nums.length;\\n\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target){\\n                index = Math.min(index,Math.abs(i-start));\\n            }\\n        }\\n        return index;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2972643,
                "title": "fast-easy-js-solution",
                "content": "```\\nvar getMinDistance = function(nums, target, start) {\\n  let dif;\\n\\n  nums\\n    .map((num) => (num == target ? num : null))\\n    .forEach((el, i) => {\\n      if (el !== null) {\\n        const currDif = Math.abs(i - start);\\n\\n        if (dif == undefined) {\\n          dif = currDif;\\n        } else if (currDif < dif) {\\n          dif = currDif;\\n        }\\n      }\\n    });\\n\\n  return dif;  \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar getMinDistance = function(nums, target, start) {\\n  let dif;\\n\\n  nums\\n    .map((num) => (num == target ? num : null))\\n    .forEach((el, i) => {\\n      if (el !== null) {\\n        const currDif = Math.abs(i - start);\\n\\n        if (dif == undefined) {\\n          dif = currDif;\\n        } else if (currDif < dif) {\\n          dif = currDif;\\n        }\\n      }\\n    });\\n\\n  return dif;  \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2823504,
                "title": "easy-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n   let left = 0;\\n   let right = 0;\\n   for(let i = start; i>=0; i--){\\n     if(nums[i]===target){\\n       left  = Math.abs(i-start);\\n       break\\n     } else{\\n       left = nums.length;\\n     }\\n   }\\n    for(let i = start; i<nums.length; i++){\\n     if(nums[i]===target){\\n       right  = Math.abs(i-start);\\n       break\\n     } else{\\n       right = nums.length;\\n     }\\n   }  \\n   return left>right ? right : left;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n   let left = 0;\\n   let right = 0;\\n   for(let i = start; i>=0; i--){\\n     if(nums[i]===target){\\n       left  = Math.abs(i-start);\\n       break\\n     } else{\\n       left = nums.length;\\n     }\\n   }\\n    for(let i = start; i<nums.length; i++){\\n     if(nums[i]===target){\\n       right  = Math.abs(i-start);\\n       break\\n     } else{\\n       right = nums.length;\\n     }\\n   }  \\n   return left>right ? right : left;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2821922,
                "title": "java-beats-100-simple-easy",
                "content": "\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int minDistance = Integer.MAX_VALUE;\\n        for(int i=start; i>=0; i--){\\n            if(nums[i] == target){\\n                minDistance = start - i;\\n                break;\\n            }\\n        }\\n        for(int i=start+1; i<nums.length; i++){\\n            if(nums[i] == target){\\n                minDistance = Math.min(minDistance, i-start);\\n                break;\\n            }\\n        }\\n        return minDistance;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int minDistance = Integer.MAX_VALUE;\\n        for(int i=start; i>=0; i--){\\n            if(nums[i] == target){\\n                minDistance = start - i;\\n                break;\\n            }\\n        }\\n        for(int i=start+1; i<nums.length; i++){\\n            if(nums[i] == target){\\n                minDistance = Math.min(minDistance, i-start);\\n                break;\\n            }\\n        }\\n        return minDistance;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2626508,
                "title": "java-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int t=start;\\n        int ans;\\n        int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                ans=Math.abs(i-t);\\n                if(ans<min){\\n                    min=ans;\\n                }\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int t=start;\\n        int ans;\\n        int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                ans=Math.abs(i-t);\\n                if(ans<min){\\n                    min=ans;\\n                }\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2551734,
                "title": "short-javascript-solution",
                "content": "```\\nvar getMinDistance = function (nums, target, start) {\\n    let min = Infinity\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] === target && Math.abs(i - start) < min) {\\n            min = Math.abs(i - start)\\n        }\\n    }\\n\\t\\n    return min\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar getMinDistance = function (nums, target, start) {\\n    let min = Infinity\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] === target && Math.abs(i - start) < min) {\\n            min = Math.abs(i - start)\\n        }\\n    }\\n\\t\\n    return min\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2521585,
                "title": "python-minimum-distance-to-the-target-element-easy-understanding",
                "content": "```\\nclass Solution(object):\\n    def getMinDistance(self, nums, target, start):\\n        \"\"\"\\n        :type nums: List[int]\\n        :type target: int\\n        :type start: int\\n        :rtype: int\\n        \"\"\"\\n        index = 0\\n        result = []\\n        while index < len(nums):\\n            if nums[index] == target:\\n                result.append(abs(index - start))\\n            index += 1\\n        \\n        return min(result)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def getMinDistance(self, nums, target, start):\\n        \"\"\"\\n        :type nums: List[int]\\n        :type target: int\\n        :type start: int\\n        :rtype: int\\n        \"\"\"\\n        index = 0\\n        result = []\\n        while index < len(nums):\\n            if nums[index] == target:\\n                result.append(abs(index - start))\\n            index += 1\\n        \\n        return min(result)",
                "codeTag": "Java"
            },
            {
                "id": 2215549,
                "title": "c-2-lines-of-code-short-clean",
                "content": "![image](https://assets.leetcode.com/users/images/d3cf85cf-076a-4762-9722-d583db8daaae_1656541049.452096.png)\\n\\n**T->O(N) && S->O(1)**\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint getMinDistance(vector<int>& nums, int t, int s) {\\n\\t\\t\\tint ans=INT_MAX;\\n\\t\\t\\tfor(int i=0;i<nums.size();i++){\\n\\t\\t\\t\\tif(nums[i]==t) ans=min(ans,abs(i-s));\\n\\t\\t\\t}\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint getMinDistance(vector<int>& nums, int t, int s) {\\n\\t\\t\\tint ans=INT_MAX;\\n\\t\\t\\tfor(int i=0;i<nums.size();i++){\\n\\t\\t\\t\\tif(nums[i]==t) ans=min(ans,abs(i-s));\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1938581,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=1001;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n                min=Math.min(Math.abs(i-start),min);\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=1001;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n                min=Math.min(Math.abs(i-start),min);\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1831075,
                "title": "o-n-java-simple-beats-100",
                "content": "We will do a two pointer approach, where the `left` and `right` pointer will be initialized to `start` index and we will move our two pointers in opposite direction to find the `target` as soon as we found the target we will just return the required result.\\n\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        \\n        int left = start;\\n        int right = start;\\n        \\n        while(left >= 0 || right < nums.length){\\n            if(left >= 0 && nums[left] == target)\\n                return Math.abs(left - start);\\n            \\n            if(right < nums.length && nums[right] == target)\\n                return Math.abs(right - start);\\n            \\n            left--;\\n            right++;\\n        }\\n    \\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        \\n        int left = start;\\n        int right = start;\\n        \\n        while(left >= 0 || right < nums.length){\\n            if(left >= 0 && nums[left] == target)\\n                return Math.abs(left - start);\\n            \\n            if(right < nums.length && nums[right] == target)\\n                return Math.abs(right - start);\\n            \\n            left--;\\n            right++;\\n        }\\n    \\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1813450,
                "title": "c-easy-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        \\n        int i=0;\\n        int result=INT_MAX;\\n        \\n        while(i<nums.size())\\n        {\\n            if(nums[i]==target)\\n            {\\n                result=min(result,abs(i-start));\\n                \\n            }\\n            i++;\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        \\n        int i=0;\\n        int result=INT_MAX;\\n        \\n        while(i<nums.size())\\n        {\\n            if(nums[i]==target)\\n            {\\n                result=min(result,abs(i-start));\\n                \\n            }\\n            i++;\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1772913,
                "title": "easy-solution",
                "content": "class Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n  int res = INT_MAX;\\n    for (int i = 0; i < nums.size() && res > abs(start - i); ++i)\\n        if (nums[i] == target)\\n            res = abs(start - i);\\n    return res;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n  int res = INT_MAX;\\n    for (int i = 0; i < nums.size() && res > abs(start - i); ++i)\\n        if (nums[i] == target)\\n            res = abs(start - i);\\n    return res;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1687685,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        if (target == nums[start]) return 0;\\n        int minDis = Integer.MAX_VALUE;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == target)\\n                minDis = Math.min(minDis, Math.abs(i - start));\\n        }\\n        return minDis;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        if (target == nums[start]) return 0;\\n        int minDis = Integer.MAX_VALUE;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == target)\\n                minDis = Math.min(minDis, Math.abs(i - start));\\n        }\\n        return minDis;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1637535,
                "title": "java-easy-solution-100-faster",
                "content": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target) ans=Math.min(ans,Math.abs(i-start));\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target) ans=Math.min(ans,Math.abs(i-start));\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1596373,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        return functools.reduce(lambda a, b: min(a, abs(b[0] - start)) if (b[1] == target) else a, enumerate(nums), float(\\'inf\\'))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        return functools.reduce(lambda a, b: min(a, abs(b[0] - start)) if (b[1] == target) else a, enumerate(nums), float(\\'inf\\'))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1584649,
                "title": "python-sol-faster-than-99",
                "content": "![image](https://assets.leetcode.com/users/images/76662b9f-96ad-4fdd-aa44-c0fa3e4b438b_1637237611.385875.png)\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        if nums[start] == target:\\n            return 0\\n        i = start\\n        j = start\\n        left = 0\\n        right = 0\\n        \\n        while i < len(nums) or j > 0 :\\n            if nums[i] == target :\\n                \\n                return abs(i - start)\\n            if nums[j] == target:\\n                return abs(start - j)\\n            if i != len(nums) - 1:\\n                i += 1\\n            if j != 0 :\\n                j -= 1\\n        return\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        if nums[start] == target:\\n            return 0\\n        i = start\\n        j = start\\n        left = 0\\n        right = 0\\n        \\n        while i < len(nums) or j > 0 :\\n            if nums[i] == target :\\n                \\n                return abs(i - start)\\n            if nums[j] == target:\\n                return abs(start - j)\\n            if i != len(nums) - 1:\\n                i += 1\\n            if j != 0 :\\n                j -= 1\\n        return\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1538304,
                "title": "c-o-n-t-c-90-fast",
                "content": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n          int left=start;\\n           int right=start+1;\\n          while(left>=0){\\n              if(nums[left]==target) break;\\n              left--;\\n          }\\n        while(right<nums.size()){\\n            if(nums[right]==target) break;\\n            right++;\\n        }\\n          if(left<0 && right<nums.size()) return abs(right-start);\\n        else if(left>=0 && right>=nums.size()) return abs(left-start);\\n        return min(abs(left-start),abs(right-start));\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n          int left=start;\\n           int right=start+1;\\n          while(left>=0){\\n              if(nums[left]==target) break;\\n              left--;\\n          }",
                "codeTag": "Java"
            },
            {
                "id": 1490609,
                "title": "c-easy-solution-using-only-loops-6-line-code",
                "content": "```\\n// PLEASE UPVOTE IF YOU LIKE THE SOLUTION!!\\nclass Solution \\n{\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) \\n    {\\n        vector<int> l;\\n        int k=0;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target)\\n            {\\n                \\n                k=abs(i-start);\\n                l.push_back(k);// PUSH ALL THE VALUE SO THAT WE CAN FIND MINIMUM ONE\\n                \\n            }}\\n        sort(l.begin(),l.end());//SORTING\\n        \\n        return l[0];\\n    }\\n    \\n};\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution \\n{\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) \\n    {\\n        vector<int> l;\\n        int k=0;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target)\\n            {\\n                \\n                k=abs(i-start);\\n                l.push_back(k);// PUSH ALL THE VALUE SO THAT WE CAN FIND MINIMUM ONE\\n                \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1459507,
                "title": "c-solution-o-n-time-complexity-and-o-1-space-complexity",
                "content": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& a, int t, int s) {\\n        int n=a.size();\\n        int c=INT_MAX;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(a[i]==t)\\n            {\\n                if(abs(i-s)<c)\\n                    c=abs(i-s);\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& a, int t, int s) {\\n        int n=a.size();\\n        int c=INT_MAX;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(a[i]==t)\\n            {\\n                if(abs(i-s)<c)\\n                    c=abs(i-s);\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1433500,
                "title": "c-easy-solution-2-pointer-approach",
                "content": "```\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mini= INT_MAX;\\n        int st= 0;\\n        int end= nums.size()-1;\\n        \\n        while(st<=end)\\n        {\\n            if(nums[st] == target) {\\n                mini= min(mini, abs(st-start)); \\n                st++;\\n            }\\n            else if(nums[end] == target) {\\n                mini= min(mini, abs(end-start)); \\n                end--;\\n            }\\n            else {\\n                st++;   end--;\\n            }\\n        }\\n        return mini;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mini= INT_MAX;\\n        int st= 0;\\n        int end= nums.size()-1;\\n        \\n        while(st<=end)\\n        {\\n            if(nums[st] == target) {\\n                mini= min(mini, abs(st-start)); \\n                st++;\\n            }\\n            else if(nums[end] == target) {\\n                mini= min(mini, abs(end-start)); \\n                end--;\\n            }\\n            else {\\n                st++;   end--;\\n            }\\n        }\\n        return mini;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1428868,
                "title": "c-easy-to-understand-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mn=INT_MAX;\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(nums[i]==target)\\n                mn=min(mn, abs(i-start));\\n        }\\n        return mn;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mn=INT_MAX;\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(nums[i]==target)\\n                mn=min(mn, abs(i-start));\\n        }\\n        return mn;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1397435,
                "title": "simple-java-solution",
                "content": "class Solution {\\n\\n    public int getMinDistance(int[] n, int t, int s) {\\n        int i,j,c=Integer.MAX_VALUE,k=0;\\n        for(i=s;i<n.length;i++)\\n        {\\n            if(n[i]==t)\\n            {\\n                k=Math.abs(i-s);\\n                c=Math.min(c,k);\\n            }\\n        }\\n        {\\n            for(i=s;i>=0;i--)\\n            {\\n               if(n[i]==t)\\n               {\\n                   k=Math.abs(i-s);\\n                   c=Math.min(c,k);\\n               }\\n            }\\n        }\\n        return c;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public int getMinDistance(int[] n, int t, int s) {\\n        int i,j,c=Integer.MAX_VALUE,k=0;\\n        for(i=s;i<n.length;i++)\\n        {\\n            if(n[i]==t)\\n            {\\n                k=Math.abs(i-s);\\n                c=Math.min(c,k);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1388775,
                "title": "faster-than-92-05-of-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mn = INT_MAX,n = nums.size();\\n        for(int i = 0 ; i <n;i++)\\n        {\\n            if(nums[i] == target)\\n            {\\n                if(mn > abs(i-start))\\n                    mn = abs(i-start);\\n            }\\n        }\\n        return mn;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mn = INT_MAX,n = nums.size();\\n        for(int i = 0 ; i <n;i++)\\n        {\\n            if(nums[i] == target)\\n            {\\n                if(mn > abs(i-start))\\n                    mn = abs(i-start);\\n            }\\n        }\\n        return mn;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1297195,
                "title": "python-two-pointers",
                "content": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        l = r = start\\n        while 1:\\n            if l>=0:\\n                if nums[l]==target:\\n                    return start - l\\n                l-=1\\n            if r<len(nums):\\n                if nums[r]==target:\\n                    return r - start\\n                r+=1\\n            \\n            \\n            \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        l = r = start\\n        while 1:\\n            if l>=0:\\n                if nums[l]==target:\\n                    return start - l\\n                l-=1\\n            if r<len(nums):\\n                if nums[r]==target:\\n                    return r - start\\n                r+=1\\n            \\n            \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1294967,
                "title": "simple",
                "content": "guys if you find solution usefull \\ndo upvote\\nand feel free to ask in the comment\\n\\n\\n\\n\\n\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int minn=INT_MAX;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target)\\n             minn=min(minn,abs(i-start));   \\n            }\\n        return minn;\\n        }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int minn=INT_MAX;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target)\\n             minn=min(minn,abs(i-start));   \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1283284,
                "title": "optimum-solution-java-version",
                "content": "```java\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int left = start, right = start, leftFirstDiff = Integer.MAX_VALUE, rightFirstDiff =  Integer.MAX_VALUE;\\n        boolean leftContinue= true, rightContinue = true;\\n        while(left >= 0 && leftContinue){\\n            if(nums[left] == target){\\n                leftContinue = false;\\n                leftFirstDiff = Math.abs(left - start);\\n            }\\n            left--;\\n        }\\n        while(right < nums.length && rightContinue){\\n            if(nums[right] == target){\\n                rightContinue = false;\\n                rightFirstDiff = Math.abs(right - start);\\n            }\\n            right++;\\n        }\\n        return Math.min(leftFirstDiff, rightFirstDiff);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int left = start, right = start, leftFirstDiff = Integer.MAX_VALUE, rightFirstDiff =  Integer.MAX_VALUE;\\n        boolean leftContinue= true, rightContinue = true;\\n        while(left >= 0 && leftContinue){\\n            if(nums[left] == target){\\n                leftContinue = false;\\n                leftFirstDiff = Math.abs(left - start);\\n            }\\n            left--;\\n        }\\n        while(right < nums.length && rightContinue){\\n            if(nums[right] == target){\\n                rightContinue = false;\\n                rightFirstDiff = Math.abs(right - start);\\n            }\\n            right++;\\n        }\\n        return Math.min(leftFirstDiff, rightFirstDiff);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1277810,
                "title": "runtime-64-ms-faster-than-100-00-of-javascript-online-submissions",
                "content": "#### [](http://)Runtime: 64 ms, faster than 100.00% of JavaScript online submissions for Minimum Distance to the Target Element.\\n```\\nvar getMinDistance = function(nums, target, start) {\\n    let min = Infinity;\\n    for(let i=nums.indexOf(target);i<nums.length;i++){\\n        if(nums[i]===target){\\n            if(Math.abs(i-start)<min) min = Math.abs(i-start);\\n        }\\n    }\\n    return min;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar getMinDistance = function(nums, target, start) {\\n    let min = Infinity;\\n    for(let i=nums.indexOf(target);i<nums.length;i++){\\n        if(nums[i]===target){\\n            if(Math.abs(i-start)<min) min = Math.abs(i-start);\\n        }\\n    }\\n    return min;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1255146,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n       int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(target==nums[i])\\n            {   \\n                min=Math.min(min,Math.abs(i-start));\\n            }  \\n        }   \\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n       int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(target==nums[i])\\n            {   \\n                min=Math.min(min,Math.abs(i-start));\\n            }  \\n        }   \\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1242840,
                "title": "two-pointer-approach-cpp-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int i=start,j=start+1;\\n        int ans=INT_MAX;\\n        int n=nums.size();\\n        while(i>=0 || j<n){\\n            if(i>=0){\\n                if(nums[i]==target && ans>abs(i-start)){\\n                    return abs(i-start);\\n                }\\n            }\\n            if(j<n){\\n                if(nums[j]==target && ans>abs(j-start)){\\n                    return abs(j-start);\\n                }\\n            }\\n            i--;j++;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int i=start,j=start+1;\\n        int ans=INT_MAX;\\n        int n=nums.size();\\n        while(i>=0 || j<n){\\n            if(i>=0){\\n                if(nums[i]==target && ans>abs(i-start)){\\n                    return abs(i-start);\\n                }\\n            }\\n            if(j<n){\\n                if(nums[j]==target && ans>abs(j-start)){\\n                    return abs(j-start);\\n                }\\n            }\\n            i--;j++;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1234711,
                "title": "rust-linear-scan-to-high-low-pointers",
                "content": "\\n\\n<b>Problem List</b>\\n#High-LowPointers - [github](https://github.com/An7One/leetcode-problems-by-tag-an7one/blob/main/txt/by_technique/n_pointers/by_pointer_amount/high_low_pointers.txt)\\n#LinearScan - [github](https://github.com/An7One/leetcode-problems-by-tag-an7one/tree/main/txt/by_technique/n_pointers/by_pointer_amount/linear_scan)\\n\\nHigh-Low Pointers Approach\\n\\n```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        let len_n: i32 = nums.len() as i32;\\n        \\n        let mut lo: i32 = start;\\n        let mut hi: i32 = start;\\n        while lo >= 0 || hi < len_n{\\n            if lo >= 0 {\\n                if nums[lo as usize] == target{\\n                    return start - lo;\\n                }\\n                \\n                lo -= 1;\\n            }\\n            \\n            if hi < len_n{\\n                if nums[hi as usize] == target{\\n                    return hi - start;\\n                }\\n                \\n                hi += 1;\\n            }\\n        }\\n        \\n        unreachable!()\\n    }\\n}\\n```\\n\\nLinear Scan Approach:\\n```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        let len_n: i32 = nums.len() as i32;\\n        let mut min_dis: i32 = len_n;\\n        \\n        for (idx, num) in nums.into_iter().enumerate(){\\n            if num == target{\\n                min_dis = std::cmp::min(min_dis,\\n                (start - idx as i32).abs());\\n            }\\n        };\\n        \\n        min_dis\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        let len_n: i32 = nums.len() as i32;\\n        \\n        let mut lo: i32 = start;\\n        let mut hi: i32 = start;\\n        while lo >= 0 || hi < len_n{\\n            if lo >= 0 {\\n                if nums[lo as usize] == target{\\n                    return start - lo;\\n                }\\n                \\n                lo -= 1;\\n            }\\n            \\n            if hi < len_n{\\n                if nums[hi as usize] == target{\\n                    return hi - start;\\n                }\\n                \\n                hi += 1;\\n            }\\n        }\\n        \\n        unreachable!()\\n    }\\n}\\n```\n```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        let len_n: i32 = nums.len() as i32;\\n        let mut min_dis: i32 = len_n;\\n        \\n        for (idx, num) in nums.into_iter().enumerate(){\\n            if num == target{\\n                min_dis = std::cmp::min(min_dis,\\n                (start - idx as i32).abs());\\n            }\\n        };\\n        \\n        min_dis\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1220487,
                "title": "easy-to-understand-c-code-by-archit-garg",
                "content": "\\n\\nint getMinDistance(int* nums, int numsSize, int target, int start){\\n    int ans=INT_MAX;\\n        for(int i=0;i<numsSize && ans > abs(start-i);++i)\\n        {\\n            if(nums[i]==target)\\n            {\\n                ans= abs(start-i);\\n            }\\n        }\\n    return ans;\\n}",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n\\nint getMinDistance(int* nums, int numsSize, int target, int start){\\n    int ans=INT_MAX;\\n        for(int i=0;i<numsSize && ans > abs(start-i);++i)\\n        {\\n            if(nums[i]==target)\\n            {\\n                ans= abs(start-i);\\n            }\\n        }\\n    return ans;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 1218972,
                "title": "java-two-pointer",
                "content": "```\\npublic int getMinDistance(int[] nums, int target, int start) {\\n        \\n        /* Initialise two pointers Left (L) and Right (R) both to begin at start*/\\n        int n = nums.length -1;\\n        int L = start;\\n        int R = start;\\n        \\n        /* We need to find the minimum dist from start either on left or right of start.\\n\\t\\t * Loop to find the if the closest element is target such that the difference of the target \\n\\t\\t * index and start is minimum\\n         */\\n        while( L >= 0 || R <= n){\\n            if(L >= 0 && nums[L] == target) {\\n                return start - L;\\n            } \\n            if(R <= n && nums[R] == target){\\n                return R - start;\\n            }\\n            L--;\\n            R++;\\n        }\\n        \\n        return 0;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int getMinDistance(int[] nums, int target, int start) {\\n        \\n        /* Initialise two pointers Left (L) and Right (R) both to begin at start*/\\n        int n = nums.length -1;\\n        int L = start;\\n        int R = start;\\n        \\n        /* We need to find the minimum dist from start either on left or right of start.\\n\\t\\t * Loop to find the if the closest element is target such that the difference of the target \\n\\t\\t * index and start is minimum\\n         */\\n        while( L >= 0 || R <= n){\\n            if(L >= 0 && nums[L] == target) {\\n                return start - L;\\n            } \\n            if(R <= n && nums[R] == target){\\n                return R - start;\\n            }\\n            L--;\\n            R++;\\n        }\\n        \\n        return 0;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1216412,
                "title": "0ms-java-solution",
                "content": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min = Integer.MAX_VALUE;\\n        for (int i = start; i < nums.length; i++){\\n            if (nums[i] == target)\\n                min = Math.min(min, Math.abs(i-start));\\n        }\\n        for (int i = start; i >= 0; i--){\\n            if (nums[i] == target)\\n                min = Math.min(min, Math.abs(i-start));\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min = Integer.MAX_VALUE;\\n        for (int i = start; i < nums.length; i++){\\n            if (nums[i] == target)\\n                min = Math.min(min, Math.abs(i-start));\\n        }\\n        for (int i = start; i >= 0; i--){\\n            if (nums[i] == target)\\n                min = Math.min(min, Math.abs(i-start));\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1214397,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    var min = Infinity;\\n    for(let i=0; i<nums.length; i++){\\n        if(nums[i] === target){\\n            var diff = Math.abs(i - start);\\n            if(min > diff){\\n                min = diff\\n            }\\n        }\\n    }\\n    return min\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    var min = Infinity;\\n    for(let i=0; i<nums.length; i++){\\n        if(nums[i] === target){\\n            var diff = Math.abs(i - start);\\n            if(min > diff){\\n                min = diff\\n            }\\n        }\\n    }\\n    return min\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1195213,
                "title": "a-few-solutions",
                "content": "*Kotlin*\\n```\\nclass Solution {\\n    fun getMinDistance(A: IntArray, T: Int, K: Int): Int {\\n        return A.mapIndexed{ i, _ -> if (A[i] == T) Math.abs(i - K) else (1e9 + 7).toInt() }.min()!!\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet getMinDistance = (A, T, K) => Math.min(...A.map((_, i) => A[i] == T ? Math.abs(i - K) : Infinity));\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def getMinDistance(self, A: List[int], T: int, K: int) -> int:\\n        return min(abs(i - K) for i in range(len(A)) if A[i] == T)\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    int getMinDistance(VI& A, int T, int K, VI B = {}) {\\n        transform(A.begin(), A.end(), back_inserter(B), [&A, T, K, i = -1](auto _) mutable {\\n            return A[++i] == T ? abs(i - K) : int(1e9 + 7);\\n        });\\n        return *min_element(B.begin(), B.end());\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun getMinDistance(A: IntArray, T: Int, K: Int): Int {\\n        return A.mapIndexed{ i, _ -> if (A[i] == T) Math.abs(i - K) else (1e9 + 7).toInt() }.min()!!\\n    }\\n}\\n```\n```\\nlet getMinDistance = (A, T, K) => Math.min(...A.map((_, i) => A[i] == T ? Math.abs(i - K) : Infinity));\\n```\n```\\nclass Solution:\\n    def getMinDistance(self, A: List[int], T: int, K: int) -> int:\\n        return min(abs(i - K) for i in range(len(A)) if A[i] == T)\\n```\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    int getMinDistance(VI& A, int T, int K, VI B = {}) {\\n        transform(A.begin(), A.end(), back_inserter(B), [&A, T, K, i = -1](auto _) mutable {\\n            return A[++i] == T ? abs(i - K) : int(1e9 + 7);\\n        });\\n        return *min_element(B.begin(), B.end());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1191675,
                "title": "c-4ms-o-n-solution",
                "content": "```\\nclass Solution {\\npublic:  \\n    \\n    vector<int> Ind(vector<int> V, int val){\\n        // O(n) function\\n        vector<int> indi;\\n        \\n        for(int i{0}; i<V.size(); ++i){\\n            if(V[i] == val)\\n                indi.push_back(i);\\n        }\\n        return indi;\\n    }\\n    \\n    \\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans;\\n        vector<int> index = Ind(nums, target);\\n        for(auto &i : index) i = abs(i-start);\\n        ans = *min_element(index.begin(), index.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:  \\n    \\n    vector<int> Ind(vector<int> V, int val){\\n        // O(n) function\\n        vector<int> indi;\\n        \\n        for(int i{0}; i<V.size(); ++i){\\n            if(V[i] == val)\\n                indi.push_back(i);\\n        }\\n        return indi;\\n    }\\n    \\n    \\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans;\\n        vector<int> index = Ind(nums, target);\\n        for(auto &i : index) i = abs(i-start);\\n        ans = *min_element(index.begin(), index.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1191643,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        return min([abs(i-start) for i in range(len(nums)) if nums[i]==target]) \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        return min([abs(i-start) for i in range(len(nums)) if nums[i]==target]) \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1189619,
                "title": "swift-solution",
                "content": "Swift solution\\n```\\nclass Solution {\\n    func getMinDistance(_ nums: [Int], _ target: Int, _ start: Int) -> Int {\\n        let c = nums.count\\n        for i in 0...max(start, c - 1 - start) {\\n            let left = start - i, right = start + i\\n            if left >= 0 && nums[left] == target || right < c && nums[right] == target {\\n                return i\\n            }\\n        }\\n        return -1\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func getMinDistance(_ nums: [Int], _ target: Int, _ start: Int) -> Int {\\n        let c = nums.count\\n        for i in 0...max(start, c - 1 - start) {\\n            let left = start - i, right = start + i\\n            if left >= 0 && nums[left] == target || right < c && nums[right] == target {\\n                return i\\n            }\\n        }\\n        return -1\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1189571,
                "title": "faster-than-100-00",
                "content": "```\\nvar getMinDistance = function(nums, target, start) {\\n  let output = null\\n    for(let i = 0; i < nums.length; i++) {\\n      if(nums[i] === target) {\\n        if(output === null || output > Math.abs(start - i)) { //only storing the **minimized** value\\n          output = Math.abs(start - i)\\n        }\\n      }\\n    }\\n    return output\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar getMinDistance = function(nums, target, start) {\\n  let output = null\\n    for(let i = 0; i < nums.length; i++) {\\n      if(nums[i] === target) {\\n        if(output === null || output > Math.abs(start - i)) { //only storing the **minimized** value\\n          output = Math.abs(start - i)\\n        }\\n      }\\n    }\\n    return output\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1188162,
                "title": "javascript-one-pass",
                "content": "```\\nconst getMinDistance = (nums, target, start) => {\\n    let ans = 1000;\\n    for (let i = 0; i < nums.length; i++)\\n        if (nums[i] == target)\\n            ans = Math.min(ans, Math.abs(i - start));\\n    return ans;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nconst getMinDistance = (nums, target, start) => {\\n    let ans = 1000;\\n    for (let i = 0; i < nums.length; i++)\\n        if (nums[i] == target)\\n            ans = Math.min(ans, Math.abs(i - start));\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1187614,
                "title": "go-simple-solution",
                "content": "```\\nfunc getMinDistance(nums []int, target int, start int) int {\\n    ans := 100000\\n    for i, n := range(nums) {\\n        if n == target {\\n            diff := i - start\\n            if diff < 0 {\\n                diff = -diff\\n            }\\n            if diff < ans {\\n                ans = diff\\n            }\\n        }\\n    }\\n    return ans\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc getMinDistance(nums []int, target int, start int) int {\\n    ans := 100000\\n    for i, n := range(nums) {\\n        if n == target {\\n            diff := i - start\\n            if diff < 0 {\\n                diff = -diff\\n            }\\n            if diff < ans {\\n                ans = diff\\n            }\\n        }\\n    }\\n    return ans\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1187500,
                "title": "python-3-simple-solution",
                "content": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        n = len(nums)\\n        f = start\\n        b = start\\n        idx = None\\n        while f < n or b >= 0:\\n            if f < n:\\n                if nums[f] == target:\\n                    idx = f\\n                    break\\n                f += 1\\n            if b >= 0:\\n                if nums[b] == target:\\n                    idx  = b\\n                    break\\n                b -= 1\\n        return abs(idx-start)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        n = len(nums)\\n        f = start\\n        b = start\\n        idx = None\\n        while f < n or b >= 0:\\n            if f < n:\\n                if nums[f] == target:\\n                    idx = f\\n                    break\\n                f += 1\\n            if b >= 0:\\n                if nums[b] == target:\\n                    idx  = b\\n                    break\\n                b -= 1\\n        return abs(idx-start)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1186816,
                "title": "very-easy-one-pass-c-with-explanation",
                "content": "Time Complexity - O(N)\\nSpace Complexity - O(1)\\n\\n**Explanation**\\nInitialize ans variable with max value (INT_MAX)\\nIterate all values and check if it equals to target \\nIf it is equal to target update ans with min value between ans and abs(i-start)\\n\\n```\\nclass Solution {\\n   public:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans = INT_MAX;\\n        for (int i = 0; i < nums.size(); i++)\\n            if (nums[i] == target) ans = min(abs(i - start), ans);\\n        return ans;\\n    }\\n};\\n```\\n\\nFeel free to ask any doubts and \\nIf you like the solution and explanation please **upvote** !!",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\n   public:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans = INT_MAX;\\n        for (int i = 0; i < nums.size(); i++)\\n            if (nums[i] == target) ans = min(abs(i - start), ans);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077026,
                "title": "easiest-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n       int min=Integer.MAX_VALUE;\\n       for(int i=0;i<nums.length;i++) {\\n           if(nums[i]==target){\\n               int ans=Math.abs(i-start);\\n               min=Math.min(ans,min);\\n           }\\n       }\\n       return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n       int min=Integer.MAX_VALUE;\\n       for(int i=0;i<nums.length;i++) {\\n           if(nums[i]==target){\\n               int ans=Math.abs(i-start);\\n               min=Math.min(ans,min);\\n           }\\n       }\\n       return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070431,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        dist = 0\\n        while True:\\n            if start - dist >= 0 and nums[start - dist] == target:\\n                return dist\\n            if start + dist < len(nums) and nums[start + dist] == target:\\n                return dist\\n            dist += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        dist = 0\\n        while True:\\n            if start - dist >= 0 and nums[start - dist] == target:\\n                return dist\\n            if start + dist < len(nums) and nums[start + dist] == target:\\n                return dist\\n            dist += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066542,
                "title": "python3-o-n-time-o-1-space-complexity-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nBasic approach of finding min distance \\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        min_dis = len(nums)\\n        for i in range(0,len(nums)):\\n            if nums[i] == target:\\n                min_dis = min(abs(i - start), min_dis)\\n        return min_dis\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        min_dis = len(nums)\\n        for i in range(0,len(nums)):\\n            if nums[i] == target:\\n                min_dis = min(abs(i - start), min_dis)\\n        return min_dis\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064536,
                "title": "basic-concept",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int x=0;\\n        int min=32000;\\n        for (int i= 0;i<nums.length;i++){\\n            if (nums[i]==target){\\n                x=Math.abs(i-start);\\n                min=Math.min(x,min);\\n\\n            }\\n            \\n        }\\n     return min;  \\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int x=0;\\n        int min=32000;\\n        for (int i= 0;i<nums.length;i++){\\n            if (nums[i]==target){\\n                x=Math.abs(i-start);\\n                min=Math.min(x,min);\\n\\n            }\\n            \\n        }\\n     return min;  \\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059139,
                "title": "easy-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int  i = 0;\\n        while(start+i < nums.length || start-i >= 0){\\n            if(start+i < nums.length && nums[start+i] == target)\\n                return Math.abs(start-(start+i));\\n            if(start-i >= 0 && nums[start-i] == target)\\n                return Math.abs(start-(start-i));\\n            i++;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int  i = 0;\\n        while(start+i < nums.length || start-i >= 0){\\n            if(start+i < nums.length && nums[start+i] == target)\\n                return Math.abs(start-(start+i));\\n            if(start-i >= 0 && nums[start-i] == target)\\n                return Math.abs(start-(start-i));\\n            i++;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4044167,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:    \\n        return min(abs(i-start) for i, n in enumerate(nums) if n == target)         \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:    \\n        return min(abs(i-start) for i, n in enumerate(nums) if n == target)         \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040094,
                "title": "simple-c-solution-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int GetMinDistance(int[] nums, int target, int start) {\\n        \\n        int currentResult = Int32.MaxValue;\\n        for(int i = 0; i < nums.Length; i++)\\n        {\\n            if(nums[i] == target)\\n            {\\n                if(currentResult > Math.Abs(i - start))\\n                    currentResult = Math.Abs(i-start);\\n            }\\n        }\\n        return currentResult;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int GetMinDistance(int[] nums, int target, int start) {\\n        \\n        int currentResult = Int32.MaxValue;\\n        for(int i = 0; i < nums.Length; i++)\\n        {\\n            if(nums[i] == target)\\n            {\\n                if(currentResult > Math.Abs(i - start))\\n                    currentResult = Math.Abs(i-start);\\n            }\\n        }\\n        return currentResult;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4030828,
                "title": "easy-understand-solution-swift",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func getMinDistance(_ nums: [Int], _ target: Int, _ start: Int) -> Int {\\n        var result = [Int]()\\n        \\n        for (index, num) in nums.enumerated() {\\n            if num == target {\\n                result.append(abs(index - start))\\n            }\\n        }\\n        \\n        return result.min() ?? 0\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func getMinDistance(_ nums: [Int], _ target: Int, _ start: Int) -> Int {\\n        var result = [Int]()\\n        \\n        for (index, num) in nums.enumerated() {\\n            if num == target {\\n                result.append(abs(index - start))\\n            }\\n        }\\n        \\n        return result.min() ?? 0\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012972,
                "title": "0ms-beats-100-00-of-users",
                "content": "# Complexity\\n- Time complexity:\\nO(logn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int result = 100000;\\n        int i=0,j=nums.length-1;\\n        while(i<=j){\\n            if(nums[i] == target){\\n                result = Math.min(result, Math.abs(i-start));\\n            }\\n            if(nums[j] == target){\\n                result = Math.min(result, Math.abs(j-start));\\n            }\\n            i++;\\n            j--;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int result = 100000;\\n        int i=0,j=nums.length-1;\\n        while(i<=j){\\n            if(nums[i] == target){\\n                result = Math.min(result, Math.abs(i-start));\\n            }\\n            if(nums[j] == target){\\n                result = Math.min(result, Math.abs(j-start));\\n            }\\n            i++;\\n            j--;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3998759,
                "title": "minimum-distance-to-target-element-python-solution-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        mini = 9999\\n        n = len(nums)\\n        for i in range(0, n):\\n            if nums[i]==target and abs(i-start)<mini:\\n                mini = abs(i-start)\\n        if mini == 9999:\\n            return start\\n        return mini\\n```",
                "solutionTags": [
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        mini = 9999\\n        n = len(nums)\\n        for i in range(0, n):\\n            if nums[i]==target and abs(i-start)<mini:\\n                mini = abs(i-start)\\n        if mini == 9999:\\n            return start\\n        return mini\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3989939,
                "title": "easy-java-1ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target)\\n                list.add(Math.abs(i-start));\\n        }\\n        return Collections.min(list);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target)\\n                list.add(Math.abs(i-start));\\n        }\\n        return Collections.min(list);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3988036,
                "title": "c-bherry-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mn=INT_MAX;\\n        for(int i=0; i<nums.size(); i++){\\n            if(nums[i]==target){\\n                mn= min(abs(i - start), mn);\\n            }\\n        }\\n        return mn;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mn=INT_MAX;\\n        for(int i=0; i<nums.size(); i++){\\n            if(nums[i]==target){\\n                mn= min(abs(i - start), mn);\\n            }\\n        }\\n        return mn;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3986689,
                "title": "beats-100-python-brute-force",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:o(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        listx=  []\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                listx.append(i)\\n        return min(abs(i - start) for i in listx)\\n\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        listx=  []\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                listx.append(i)\\n        return min(abs(i - start) for i in listx)\\n\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981603,
                "title": "c-simple-and-easy-solution",
                "content": "upvote if you like the solution\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans = INT_MAX;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i] == target){\\n                ans = min(ans , abs(i - start));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans = INT_MAX;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i] == target){\\n                ans = min(ans , abs(i - start));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976916,
                "title": "easy-to-understand-python3-solution-tc-o-n-sc-o-n-worst-case",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        target_i = []\\n\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                target_i.append(i)\\n        \\n        min_val = float(\\'inf\\')\\n\\n        for i in target_i:\\n            min_val = min(min_val, abs(i-start))\\n\\n        return min_val\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        target_i = []\\n\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                target_i.append(i)\\n        \\n        min_val = float(\\'inf\\')\\n\\n        for i in target_i:\\n            min_val = min(min_val, abs(i-start))\\n\\n        return min_val\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976065,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int output = Integer.MAX_VALUE;\\n        if (nums[start] == target) {\\n            return 0;\\n        }\\n        for (int i = start; i < nums.length; i++) {\\n            if (nums[i] == target) {\\n                output = Math.abs(i - start);\\n                if (output == 1) {\\n                    return output;\\n                }                \\n                i = nums.length - 1;\\n            }\\n            if (i == nums.length - 1) {\\n                for (int j = 0; j < start; j++) {\\n                    if (nums[j] == target) {\\n                        output = Math.min(output, Math.abs(j - start));\\n                        if (output == 1) {\\n                            return output;\\n                        }\\n                    }                 \\n                }\\n            }\\n        }\\n        return output;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int output = Integer.MAX_VALUE;\\n        if (nums[start] == target) {\\n            return 0;\\n        }\\n        for (int i = start; i < nums.length; i++) {\\n            if (nums[i] == target) {\\n                output = Math.abs(i - start);\\n                if (output == 1) {\\n                    return output;\\n                }                \\n                i = nums.length - 1;\\n            }\\n            if (i == nums.length - 1) {\\n                for (int j = 0; j < start; j++) {\\n                    if (nums[j] == target) {\\n                        output = Math.min(output, Math.abs(j - start));\\n                        if (output == 1) {\\n                            return output;\\n                        }\\n                    }                 \\n                }\\n            }\\n        }\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3975194,
                "title": "easist-way-for-this-problem",
                "content": "```\\nvar getMinDistance = function (nums, target, start) {\\n  let min = nums.length;\\n  for (let i = 0; i < nums.length; i++) {\\n    if (nums[i] === target && Math.abs(i - start) < min) {\\n      min = Math.abs(i - start);\\n    }\\n  }\\n  return min;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar getMinDistance = function (nums, target, start) {\\n  let min = nums.length;\\n  for (let i = 0; i < nums.length; i++) {\\n    if (nums[i] === target && Math.abs(i - start) < min) {\\n      min = Math.abs(i - start);\\n    }\\n  }\\n  return min;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3968037,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int x = 0;\\n        ArrayList<Integer>list = new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target){\\n                x = Math.abs(i-start);\\n                list.add(x);\\n            }\\n        }\\n        Collections.sort(list);\\n        return list.get(0);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int x = 0;\\n        ArrayList<Integer>list = new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target){\\n                x = Math.abs(i-start);\\n                list.add(x);\\n            }\\n        }\\n        Collections.sort(list);\\n        return list.get(0);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3962480,
                "title": "python-simple-and-faster-98-o-n-space-o-1-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def getMinDistance(self, nums, target, start):\\n        \"\"\"\\n        :type nums: List[int]\\n        :type target: int\\n        :type start: int\\n        :rtype: int\\n        \"\"\"\\n        res = -1\\n        for j, i in enumerate(nums):\\n            if i != target: continue\\n            temp = abs(j - start)\\n            if res == -1 or (res > -1 and temp < res):\\n                res = temp\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def getMinDistance(self, nums, target, start):\\n        \"\"\"\\n        :type nums: List[int]\\n        :type target: int\\n        :type start: int\\n        :rtype: int\\n        \"\"\"\\n        res = -1\\n        for j, i in enumerate(nums):\\n            if i != target: continue\\n            temp = abs(j - start)\\n            if res == -1 or (res > -1 and temp < res):\\n                res = temp\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942296,
                "title": "simple-3-line-code-tc-o-n-beats-100-00-of-users-with-java",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n        for (int i = 0; i < nums.length; i++) {\\n            if(nums[i] == target) ans = Math.min(Math.abs(i - start), ans);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n        for (int i = 0; i < nums.length; i++) {\\n            if(nums[i] == target) ans = Math.min(Math.abs(i - start), ans);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923204,
                "title": "java-solution-one-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                int abs=Math.abs(i-start);\\n                min=Math.min(min,abs);\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                int abs=Math.abs(i-start);\\n                min=Math.min(min,abs);\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3915781,
                "title": "beats-100-in-runtime-c",
                "content": "# Intuition\\nCheck every elemet from the right of start, find the shortest distance.\\n\\nGo back to start, and do the same thing for elements to the left of start.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$: 1 iteration over the array total\\n\\n- Space complexity:\\n$$O(1)$$ Local variables have a single value, regardless of size\\n\\n# Code\\n```\\npublic class Solution {\\n    public int GetMinDistance(int[] nums, int target, int start) {\\n\\n        int direction = 1;\\n        int shortestRight = int.MaxValue;\\n        int shortestLeft = int.MaxValue;\\n\\n        for(int i = start; i >= 0; i += direction)\\n        {\\n            if(i == nums.Length)\\n            {\\n                i = start;\\n                direction *= -1;\\n                continue;\\n            }\\n\\n            if(nums[i] == target)\\n            {\\n                if(direction > 0)\\n                {\\n                    shortestRight = Math.Abs(i - start);\\n                    direction *= -1;\\n                    i = start;\\n                } \\n                else\\n                {\\n                    shortestLeft = Math.Abs(start - i); \\n                    break;\\n                } \\n            }\\n        }\\n\\n        return Math.Min(shortestRight, shortestLeft);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int GetMinDistance(int[] nums, int target, int start) {\\n\\n        int direction = 1;\\n        int shortestRight = int.MaxValue;\\n        int shortestLeft = int.MaxValue;\\n\\n        for(int i = start; i >= 0; i += direction)\\n        {\\n            if(i == nums.Length)\\n            {\\n                i = start;\\n                direction *= -1;\\n                continue;\\n            }\\n\\n            if(nums[i] == target)\\n            {\\n                if(direction > 0)\\n                {\\n                    shortestRight = Math.Abs(i - start);\\n                    direction *= -1;\\n                    i = start;\\n                } \\n                else\\n                {\\n                    shortestLeft = Math.Abs(start - i); \\n                    break;\\n                } \\n            }\\n        }\\n\\n        return Math.Min(shortestRight, shortestLeft);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3909354,
                "title": "getmindistance",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nuse a vector to store all the indexes of occurence of target.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        vector<int> v;\\n       \\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==target){v.push_back(i);}\\n        }\\n        int min=INT_MAX;\\n        for(auto i:v)\\n        {\\n            if(abs(i-start)<min)min=abs(i-start);\\n        }\\n        return min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        vector<int> v;\\n       \\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==target){v.push_back(i);}\\n        }\\n        int min=INT_MAX;\\n        for(auto i:v)\\n        {\\n            if(abs(i-start)<min)min=abs(i-start);\\n        }\\n        return min;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3885790,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int n = nums.length, min = 99000000;\\n\\n        for(int i = 0; i < n; i++)\\n            if(nums[i] == target)\\n                min = Math.min(min, Math.abs(i - start));\\n            \\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int n = nums.length, min = 99000000;\\n\\n        for(int i = 0; i < n; i++)\\n            if(nums[i] == target)\\n                min = Math.min(min, Math.abs(i - start));\\n            \\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3884266,
                "title": "minimum-distance-to-the-target-element",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min = Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                min = Math.min(min,Math.abs(i-start));\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min = Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                min = Math.min(min,Math.abs(i-start));\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3858173,
                "title": "minimum-distance-to-the-target-element",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) \\n    {\\n        int n=nums.size();\\n        int res=INT_MAX;\\n        for(int i=0;i<n; i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                int cnt= abs(i-start);\\n                res=min(cnt,res);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) \\n    {\\n        int n=nums.size();\\n        int res=INT_MAX;\\n        for(int i=0;i<n; i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                int cnt= abs(i-start);\\n                res=min(cnt,res);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3850790,
                "title": "js-simple-solution-faster-than-100",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let min = nums.length\\n\\n    for (let i = 0; i < nums.length; i++) if (nums[i] == target && Math.abs(i - start) < min) min = Math.abs(i - start)\\n\\n    return min\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let min = nums.length\\n\\n    for (let i = 0; i < nums.length; i++) if (nums[i] == target && Math.abs(i - start) < min) min = Math.abs(i - start)\\n\\n    return min\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3849736,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        vector<int> v;\\n        int ans;\\n        for(int i=0; i<nums.size(); i++){\\n            if(nums[i] == target)ans = abs(i-start);\\n            v.push_back(ans);\\n        }\\n        sort(v.begin(), v.end());\\n        return v[0];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        vector<int> v;\\n        int ans;\\n        for(int i=0; i<nums.size(); i++){\\n            if(nums[i] == target)ans = abs(i-start);\\n            v.push_back(ans);\\n        }\\n        sort(v.begin(), v.end());\\n        return v[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841825,
                "title": "easy-0ms-java-solution-beats-100-easypeasy-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int n=nums.length;\\n        int i,j;\\n        int a;\\n        int min=Integer.MAX_VALUE;\\n        for(i=0;i<=n-1;i++){\\n            if(nums[i]==target){\\n                a=Math.abs(i-start);\\n                if(a<min){\\n                    min=a;\\n                }\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int n=nums.length;\\n        int i,j;\\n        int a;\\n        int min=Integer.MAX_VALUE;\\n        for(i=0;i<=n-1;i++){\\n            if(nums[i]==target){\\n                a=Math.abs(i-start);\\n                if(a<min){\\n                    min=a;\\n                }\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3834521,
                "title": "easiest-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n\\n        for (int i = 0; i < nums.length; ++i) {\\n            if (nums[i] == target) {\\n                ans = Math.min(Math.abs(i-start), ans);\\n            }\\n        }\\n        //upvote if helpful\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n\\n        for (int i = 0; i < nums.length; ++i) {\\n            if (nums[i] == target) {\\n                ans = Math.min(Math.abs(i-start), ans);\\n            }\\n        }\\n        //upvote if helpful\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3820844,
                "title": "o-n-solution-in-cpp",
                "content": "\\n# Complexity\\n- Time complexity: ```O(n)```\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: ```O(1)```\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n     int ans = INT_MAX;\\n     for(int i = 0; i < nums.size(); i++){\\n         if(nums[i] == target)\\n            ans = min(ans, abs(i-start));\\n     }\\n\\n\\n     return ans;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```O(n)```\n```O(1)```\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n     int ans = INT_MAX;\\n     for(int i = 0; i < nums.size(); i++){\\n         if(nums[i] == target)\\n            ans = min(ans, abs(i-start));\\n     }\\n\\n\\n     return ans;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3818638,
                "title": "easy-solution-in-java-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] a, int t ,int s) {\\n         int m=Integer.MAX_VALUE;\\n         int n=a.length;\\n         for(int i=0;i<n;i++) {\\n           if(a[i]==t){\\n               int v=Math.abs(i-s);\\n               if(m>v)\\n               m=v;\\n           }\\n       }\\n       return m;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] a, int t ,int s) {\\n         int m=Integer.MAX_VALUE;\\n         int n=a.length;\\n         for(int i=0;i<n;i++) {\\n           if(a[i]==t){\\n               int v=Math.abs(i-s);\\n               if(m>v)\\n               m=v;\\n           }\\n       }\\n       return m;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3786167,
                "title": "easiest-question",
                "content": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>&n , int t , int s){\\n        int mn=INT_MAX;\\n        for(int i=0; i<n.size(); i++){\\n            if(n[i]==t){\\n                if(mn>abs(i-s)){\\n                    mn=abs(i-s);\\n                }\\n            }\\n        }\\n        return mn;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>&n , int t , int s){\\n        int mn=INT_MAX;\\n        for(int i=0; i<n.size(); i++){\\n            if(n[i]==t){\\n                if(mn>abs(i-s)){\\n                    mn=abs(i-s);\\n                }\\n            }\\n        }\\n        return mn;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3779411,
                "title": "java-easy-0-ms-fastest-don-t-think-complex",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        if(nums[start]==target) return 0;\\n        else {\\n            int min = nums.length+1;\\n            for(int i=start+1; i<nums.length; i++){\\n                if(nums[i]==target) {\\n                    min = i-start;\\n                    break;\\n                }\\n            }\\n            for(int i=start-1; i>=0; i--) {\\n                if(nums[i]==target) {\\n                    if(start-i < min) {\\n                        return start-i;\\n                    }\\n                }\\n            }\\n            return min;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        if(nums[start]==target) return 0;\\n        else {\\n            int min = nums.length+1;\\n            for(int i=start+1; i<nums.length; i++){\\n                if(nums[i]==target) {\\n                    min = i-start;\\n                    break;\\n                }\\n            }\\n            for(int i=start-1; i>=0; i--) {\\n                if(nums[i]==target) {\\n                    if(start-i < min) {\\n                        return start-i;\\n                    }\\n                }\\n            }\\n            return min;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3764340,
                "title": "simple-and-most-basic-solution-beats-100",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreate the minimun distace variable whhich contains the maximum value \\nof integer range.\\ncreate a variable to strore the final result and initial it with 0 then interte from start to end of array and check the fisrt condition of arr[i]==t n then create int dist...so we can ccalculate the result at each iteration.\\nthen compare each dist with minimun value varible and assign the value to ans varible.\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] arr, int t, int s) {\\n        int min_dis=Integer.MAX_VALUE;\\n        int ans=0;\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==t){\\n                int dis=Math.abs(i-s);\\n                if(dis<min_dis){\\n                    min_dis=dis;\\n                    ans=dis;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] arr, int t, int s) {\\n        int min_dis=Integer.MAX_VALUE;\\n        int ans=0;\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==t){\\n                int dis=Math.abs(i-s);\\n                if(dis<min_dis){\\n                    min_dis=dis;\\n                    ans=dis;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3760836,
                "title": "very-basic-java-soln-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=nums.length;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target)\\n                min=Math.min(min,Math.abs(i-start));\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=nums.length;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target)\\n                min=Math.min(min,Math.abs(i-start));\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3760446,
                "title": "easy-javascript-method",
                "content": "# Intuition\\nWe start at \\'start\\' position and we only need to search the left and right sides of it. \\n\\nThere are 3 situations\\n\\nLeft : a-i\\nRight : b+i\\nSelf : i=0\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n\\n    for (let i=0;i<=nums.length;i++){\\n    let a = nums[start-i];// Left\\n    let b = nums[start+i];// Right\\n    if (target == nums[start]) return i; //Self, i=0\\n    if (a==target || b==target) return i; //Left or Right\\n    }\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n\\n    for (let i=0;i<=nums.length;i++){\\n    let a = nums[start-i];// Left\\n    let b = nums[start+i];// Right\\n    if (target == nums[start]) return i; //Self, i=0\\n    if (a==target || b==target) return i; //Left or Right\\n    }\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3748933,
                "title": "runtime-67-ms-beats-78-61-memory-16-5-mb-beats-66-75",
                "content": "# Intuition\\nThe code aims to find the minimum distance between a target value and a given starting index in a list of numbers.\\n\\n# Approach\\nThe approach used in the code is to iterate through each element in the `nums` list. For each element, it checks if the element is equal to the target value. If it is, the code calculates the absolute difference between the current index and the starting index and appends it to the `value` list. By doing this for all elements in the `nums` list, the code obtains a list of distances from the target value to the starting index. Finally, it returns the minimum value from the `value` list, representing the minimum distance.\\n\\n# Complexity\\n- Time complexity:\\nThe code iterates through each element in the `nums` list and performs a constant-time operation for each element. Therefore, the time complexity of the code is O(n), where n is the length of the `nums` list.\\n\\n- Space complexity:\\nThe code uses an additional list `value` to store the distances. The maximum length of the `value` list is the same as the length of the `nums` list. Therefore, the space complexity of the code is O(n), as it requires additional space proportional to the input size.\\n\\n# Code\\n```python\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        value = []\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                value.append(abs(i-start))\\n        return min(value)\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "# Intuition\\nThe code aims to find the minimum distance between a target value and a given starting index in a list of numbers.\\n\\n# Approach\\nThe approach used in the code is to iterate through each element in the `nums` list. For each element, it checks if the element is equal to the target value. If it is, the code calculates the absolute difference between the current index and the starting index and appends it to the `value` list. By doing this for all elements in the `nums` list, the code obtains a list of distances from the target value to the starting index. Finally, it returns the minimum value from the `value` list, representing the minimum distance.\\n\\n# Complexity\\n- Time complexity:\\nThe code iterates through each element in the `nums` list and performs a constant-time operation for each element. Therefore, the time complexity of the code is O(n), where n is the length of the `nums` list.\\n\\n- Space complexity:\\nThe code uses an additional list `value` to store the distances. The maximum length of the `value` list is the same as the length of the `nums` list. Therefore, the space complexity of the code is O(n), as it requires additional space proportional to the input size.\\n\\n# Code\\n```python\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        value = []\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                value.append(abs(i-start))\\n        return min(value)\\n",
                "codeTag": "Java"
            },
            {
                "id": 3743586,
                "title": "easy-solution-o-n-linear-search",
                "content": "#\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mini=INT_MAX;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==target&&mini>abs(i-start))\\n             mini=abs(i-start);\\n        }\\n        return mini;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mini=INT_MAX;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==target&&mini>abs(i-start))\\n             mini=abs(i-start);\\n        }\\n        return mini;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3725514,
                "title": "js-2pointer-beats-100-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n2-pointer approch\\nstart 2 pointers left and right from start\\nincrease right and decrese left untill target is found\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nworst case senario-O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let left = start\\n    let right = start\\n    while(left>-1 || right<nums.length){\\n        if(nums[left] === target){\\n            return Math.abs(left-start)\\n        }\\n        if(nums[right] === target){\\n            return Math.abs(right-start)\\n        }\\n        left--\\n        right++\\n\\n    }\\n\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let left = start\\n    let right = start\\n    while(left>-1 || right<nums.length){\\n        if(nums[left] === target){\\n            return Math.abs(left-start)\\n        }\\n        if(nums[right] === target){\\n            return Math.abs(right-start)\\n        }\\n        left--\\n        right++\\n\\n    }\\n\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3721598,
                "title": "bfs-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        for i in range(len(nums)):\\n            if start+i < len(nums) and nums[start+i]==target:\\n                return i\\n            if start-i >= 0 and nums[start-i]==target:\\n                return i\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        for i in range(len(nums)):\\n            if start+i < len(nums) and nums[start+i]==target:\\n                return i\\n            if start-i >= 0 and nums[start-i]==target:\\n                return i\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3708501,
                "title": "easy-solution-in-c-beats-93",
                "content": "# Intuition\\n\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int minans=0;\\n        int currans=1111111111;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target){\\n                currans=min(currans,abs(i-start));\\n                minans=currans;\\n            }\\n        }\\n        return currans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int minans=0;\\n        int currans=1111111111;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target){\\n                currans=min(currans,abs(i-start));\\n                minans=currans;\\n            }\\n        }\\n        return currans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3708057,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans , mini = 1e9;\\n        for (int i=0 ; i<nums.size() ; i++){\\n            if (abs(i-start) < mini && nums[i]==target){\\n                mini = abs(i-start);\\n                ans = mini;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans , mini = 1e9;\\n        for (int i=0 ; i<nums.size() ; i++){\\n            if (abs(i-start) < mini && nums[i]==target){\\n                mini = abs(i-start);\\n                ans = mini;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3696847,
                "title": "minimum-distance-to-the-target-element-easy-solution-using-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int min=INT_MAX;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target){\\n                if(min>abs(start-i)){\\n                    min=abs(start-i);\\n                }\\n            }\\n        }\\n        return min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int min=INT_MAX;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target){\\n                if(min>abs(start-i)){\\n                    min=abs(start-i);\\n                }\\n            }\\n        }\\n        return min;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3695195,
                "title": "easiest-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target){\\n                if((int)Math.abs(i-start)<min)min=(int)Math.abs(i-start);\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==target){\\n                if((int)Math.abs(i-start)<min)min=(int)Math.abs(i-start);\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3685262,
                "title": "scala-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nobject Solution {\\n    def getMinDistance(nums: Array[Int], target: Int, start: Int): Int = {\\n        nums.zipWithIndex.filter(_._1 == target).map(pair => math.abs(pair._2 - start)).min\\n    }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n    def getMinDistance(nums: Array[Int], target: Int, start: Int): Int = {\\n        nums.zipWithIndex.filter(_._1 == target).map(pair => math.abs(pair._2 - start)).min\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3677025,
                "title": "easy-c-solution-beginner-friendly-approach-beats-92-in-both",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans = nums.size();\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(nums[i]==target)\\n                ans = min(abs(i-start), ans);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int ans = nums.size();\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(nums[i]==target)\\n                ans = min(abs(i-start), ans);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3654430,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity:  $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:  $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let min = Number.POSITIVE_INFINITY;\\n    for(let i =0; i<nums.length; i++){\\n        if(nums[i] == target){\\n            min = Math.min(min, Math.abs(i-start))\\n        }\\n    }\\n   return min\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let min = Number.POSITIVE_INFINITY;\\n    for(let i =0; i<nums.length; i++){\\n        if(nums[i] == target){\\n            min = Math.min(min, Math.abs(i-start))\\n        }\\n    }\\n   return min\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3651434,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int i,j;\\n        i=start-1;\\n        j=start+1;\\n        if(nums[start]==target)return 0;\\n        while(i>=0||j<nums.length){\\n            if(i>=0){\\n                if(nums[i]==target)return start-i;\\n                i--;\\n            }\\n            if(j<nums.length){\\n                if(nums[j]==target)return j-start;\\n                j++;\\n            }\\n        }\\n       return 0; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int i,j;\\n        i=start-1;\\n        j=start+1;\\n        if(nums[start]==target)return 0;\\n        while(i>=0||j<nums.length){\\n            if(i>=0){\\n                if(nums[i]==target)return start-i;\\n                i--;\\n            }\\n            if(j<nums.length){\\n                if(nums[j]==target)return j-start;\\n                j++;\\n            }\\n        }\\n       return 0; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3635641,
                "title": "java-solution-easy-understanding-runtime-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        \\n        int min = Integer.MAX_VALUE;\\n\\n        for(int i = 0; i<nums.length; i++)\\n        {\\n            if(nums[i] == target)\\n            {\\n                int diff = Math.abs(i - start);\\n                min = Math.min(diff, min);\\n            }\\n        }\\n\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        \\n        int min = Integer.MAX_VALUE;\\n\\n        for(int i = 0; i<nums.length; i++)\\n        {\\n            if(nums[i] == target)\\n            {\\n                int diff = Math.abs(i - start);\\n                min = Math.min(diff, min);\\n            }\\n        }\\n\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3625410,
                "title": "100-faster-and-less-memory-im-lazy-so-i-write-what-i-want-w-o-thinking",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        if nums[start as usize] == target {return 0}\\n        let mut left: i32 = start-1;\\n        let mut right: i32 = start + 1;\\n        let mut left_found: i32 = -1;\\n        let mut right_found: i32 = -1;\\n        while left >= 0 || right < nums.len() as i32 {\\n            if left_found != -1 && right_found != -1 {\\n                break;\\n            }\\n            if left >= 0 {\\n                if nums[left as usize] == target && left_found == -1{\\n                    left_found = left;\\n                }\\n                left -= 1;\\n            }\\n            if right < nums.len() as i32 {\\n                if nums[right as usize] == target && right_found == -1{\\n                    right_found = right;\\n                }\\n                right += 1;\\n            }\\n        }\\n        // println!(\"{} {}\", left_found, right_found);\\n        if left_found != -1 && right_found != -1 {\\n            let left_start: i32 = i32::abs(start-left_found);\\n            let right_start: i32 = i32::abs(start-right_found);\\n            if left_start < right_start {\\n                return left_start;\\n            }\\n            return right_start;\\n        }\\n        if left_found != -1 {\\n            return i32::abs(start-left_found);\\n        }\\n        i32::abs(start-right_found)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Array"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        if nums[start as usize] == target {return 0}\\n        let mut left: i32 = start-1;\\n        let mut right: i32 = start + 1;\\n        let mut left_found: i32 = -1;\\n        let mut right_found: i32 = -1;\\n        while left >= 0 || right < nums.len() as i32 {\\n            if left_found != -1 && right_found != -1 {\\n                break;\\n            }\\n            if left >= 0 {\\n                if nums[left as usize] == target && left_found == -1{\\n                    left_found = left;\\n                }\\n                left -= 1;\\n            }\\n            if right < nums.len() as i32 {\\n                if nums[right as usize] == target && right_found == -1{\\n                    right_found = right;\\n                }\\n                right += 1;\\n            }\\n        }\\n        // println!(\"{} {}\", left_found, right_found);\\n        if left_found != -1 && right_found != -1 {\\n            let left_start: i32 = i32::abs(start-left_found);\\n            let right_start: i32 = i32::abs(start-right_found);\\n            if left_start < right_start {\\n                return left_start;\\n            }\\n            return right_start;\\n        }\\n        if left_found != -1 {\\n            return i32::abs(start-left_found);\\n        }\\n        i32::abs(start-right_found)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3615602,
                "title": "java-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int Leftindex = 0, rightIndex = Integer.MAX_VALUE;\\n        for(int i = start; i < nums.length; i++){\\n            if(nums[i] == target){\\n                Leftindex = i;\\n                break;\\n            }\\n        }\\n\\n        for(int i = start; i >= 0; i--){\\n            if(nums[i] == target){\\n                rightIndex = i;\\n                break;\\n            }\\n        }\\n        return Math.min(Math.abs(Leftindex - start), Math.abs(rightIndex - start));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int Leftindex = 0, rightIndex = Integer.MAX_VALUE;\\n        for(int i = start; i < nums.length; i++){\\n            if(nums[i] == target){\\n                Leftindex = i;\\n                break;\\n            }\\n        }\\n\\n        for(int i = start; i >= 0; i--){\\n            if(nums[i] == target){\\n                rightIndex = i;\\n                break;\\n            }\\n        }\\n        return Math.min(Math.abs(Leftindex - start), Math.abs(rightIndex - start));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3606023,
                "title": "c-tc-o-n-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mini=INT_MAX;\\n       \\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target){\\n                mini=min(mini,abs(i-start));\\n               \\n            }\\n        }\\n        return mini;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mini=INT_MAX;\\n       \\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==target){\\n                mini=min(mini,abs(i-start));\\n               \\n            }\\n        }\\n        return mini;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3600839,
                "title": "simple-approach-easy-to-understand-o-n",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int Ans=INT_MAX;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                Ans=min(Ans,abs(i-start));\\n            }\\n        }\\n    return Ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int Ans=INT_MAX;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                Ans=min(Ans,abs(i-start));\\n            }\\n        }\\n    return Ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3596582,
                "title": "easiest-c-solution",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mini=INT_MAX;\\n       for(int i=0;i<=start;i++)\\n       {\\n           if(nums[i]==target)\\n              mini=min(mini,abs(i-start));\\n       } \\n       for(int i=start+1;i<nums.size();i++)\\n       {\\n           if(nums[i]==target)\\n              mini=min(mini,abs(i-start));\\n       } \\n       return mini;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int mini=INT_MAX;\\n       for(int i=0;i<=start;i++)\\n       {\\n           if(nums[i]==target)\\n              mini=min(mini,abs(i-start));\\n       } \\n       for(int i=start+1;i<nums.size();i++)\\n       {\\n           if(nums[i]==target)\\n              mini=min(mini,abs(i-start));\\n       } \\n       return mini;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3591976,
                "title": "python-simple-approach",
                "content": "# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        idx = []\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                idx.append(i)\\n        return min(abs(i - start) for i in idx)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        idx = []\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                idx.append(i)\\n        return min(abs(i - start) for i in idx)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3565334,
                "title": "java-easy",
                "content": "# Intuition\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int toReturn = 0;\\n        int currentMin = 1000;\\n        for(int i = 0; i < nums.length; i++){\\n            if(nums[i] == target) {\\n                toReturn = Math.abs(i - start);\\n                System.out.println(toReturn);\\n                if(toReturn < currentMin) currentMin = toReturn;\\n            }\\n        }\\n        return currentMin;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int toReturn = 0;\\n        int currentMin = 1000;\\n        for(int i = 0; i < nums.length; i++){\\n            if(nums[i] == target) {\\n                toReturn = Math.abs(i - start);\\n                System.out.println(toReturn);\\n                if(toReturn < currentMin) currentMin = toReturn;\\n            }\\n        }\\n        return currentMin;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3533784,
                "title": "minimum-distance-solution",
                "content": "# Intuition\\nThis is an very simple question that involves iterating through the given list.\\n\\n# Approach\\nHere is a brief pseudocode:\\n<ul>\\n<li>Iterate over the list one element at a time</li>\\n<li>If the element is equal to target, subtract it and store the result.</li>\\n<li>Check the result with the previous results and see if the new result is smaller.</li>\\n<li>update the result and return it</li>\\n</ul>\\n\\n# Complexity\\n- Time complexity:\\n  This is a very easy question with a very basic approach. However, it took me 30 minutes because i couldn\\'t understand the question. Then after debugging i finally understood the question. So on average this should take about 1 minute to do, maybe less\\n\\n- Space complexity:\\n  I tried making the program use as much less memory as possible but it still takes a lot.\\n\\n# Code\\n```\\n#include<limits>\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int> &a, int target, int start)\\n    {\\n        int i = 0;\\n        int prev = std::numeric_limits<int>::max();\\n        for (int x : a)\\n        {\\n            if (x == target)\\n            {\\n                int  p = std::abs(i -start);\\n                if (p < prev)\\n                {\\n                    prev = p;\\n                }\\n            }\\n            i++;\\n        }\\n        if (prev == std::numeric_limits<int>::max())\\n        {\\n            // nothing found\\n            return 0;\\n        }\\n        return prev;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\n#include<limits>\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int> &a, int target, int start)\\n    {\\n        int i = 0;\\n        int prev = std::numeric_limits<int>::max();\\n        for (int x : a)\\n        {\\n            if (x == target)\\n            {\\n                int  p = std::abs(i -start);\\n                if (p < prev)\\n                {\\n                    prev = p;\\n                }\\n            }\\n            i++;\\n        }\\n        if (prev == std::numeric_limits<int>::max())\\n        {\\n            // nothing found\\n            return 0;\\n        }\\n        return prev;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3520788,
                "title": "go-runtime-0-ms-memory-3-2-mb",
                "content": "# Code\\n```\\nfunc getMinDistance(nums []int, target int, start int) int {\\n\\tmin := math.MaxInt\\n\\tfor i, v := range nums {\\n\\t\\tif v == target {\\n\\t\\t\\tdiff := abs(i - start)\\n\\t\\t\\tif min > diff {\\n\\t\\t\\t\\tmin = diff\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn min\\n}\\n\\n// HELPERS ---------------------------------------\\nfunc abs(val int) int {\\n\\tif val < 0 {\\n\\t\\treturn -val\\n\\t}\\n\\treturn val\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc getMinDistance(nums []int, target int, start int) int {\\n\\tmin := math.MaxInt\\n\\tfor i, v := range nums {\\n\\t\\tif v == target {\\n\\t\\t\\tdiff := abs(i - start)\\n\\t\\t\\tif min > diff {\\n\\t\\t\\t\\tmin = diff\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn min\\n}\\n\\n// HELPERS ---------------------------------------\\nfunc abs(val int) int {\\n\\tif val < 0 {\\n\\t\\treturn -val\\n\\t}\\n\\treturn val\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3516788,
                "title": "minimum-distance-java-solution-0ms-beats-100-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have given the target element and the element from which we have to start. \\nWe iterate through the array , check where our target value lies and calculate the minimum distance.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Declared two variables max and min which are initially initialised as the Integer.MAX_VALUE;\\n- Then we iterate through the array,  and whenever we encounter our target element we store it\\'s index to the max variable.\\n- Now to calculate the minimum distance between the index, we use the Math.min() function where the parameters are the min value itself alongwith the positive difference between the max variable value and the start value.\\n- We then return the min value.\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int max = Integer.MAX_VALUE; \\n        int min = Integer.MAX_VALUE;\\n\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] == target){\\n                max = i;\\n\\n                min = Math.min(min , Math.abs(max - start));\\n            }\\n        }   \\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int max = Integer.MAX_VALUE; \\n        int min = Integer.MAX_VALUE;\\n\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] == target){\\n                max = i;\\n\\n                min = Math.min(min , Math.abs(max - start));\\n            }\\n        }   \\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3506789,
                "title": "straightforward-python-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        res = float(\"inf\")\\n        for i, n in enumerate(nums):\\n            if n == target:\\n                res = min(res, abs(i-start))\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        res = float(\"inf\")\\n        for i, n in enumerate(nums):\\n            if n == target:\\n                res = min(res, abs(i-start))\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3502241,
                "title": "100-easy-solution-using-java",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        \\n        int m=Integer.MAX_VALUE;\\n       for(int i=0;i<nums.length;i++){\\n           if(nums[i]==target){\\n             m=Math.min(m,Math.abs(i-start));  \\n           }\\n          \\n       } \\n       return m;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        \\n        int m=Integer.MAX_VALUE;\\n       for(int i=0;i<nums.length;i++){\\n           if(nums[i]==target){\\n             m=Math.min(m,Math.abs(i-start));  \\n           }\\n          \\n       } \\n       return m;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3497874,
                "title": "getmindistance",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n//    let index=0;\\n   let indices = [];\\n    if(nums.length >=1 && nums.length <= 1000 && start >=0 && start< nums.length && nums.includes(target)){\\n        nums.filter(function(ele, index) {\\n if(ele == target){\\n   indices.push(Math.abs(index-start))\\n }\\n});\\nreturn Math.min(...indices)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n//    let index=0;\\n   let indices = [];\\n    if(nums.length >=1 && nums.length <= 1000 && start >=0 && start< nums.length && nums.includes(target)){\\n        nums.filter(function(ele, index) {\\n if(ele == target){\\n   indices.push(Math.abs(index-start))\\n }\\n});\\nreturn Math.min(...indices)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3496479,
                "title": "easy-java-solution",
                "content": "`Please upvote if it helps you. Happy Coding!`\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min = Integer.MAX_VALUE;\\n        for(int i=0; i<nums.length; i++){\\n            if(nums[i]==target){\\n                min = Math.min(min, Math.abs(i-start));\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min = Integer.MAX_VALUE;\\n        for(int i=0; i<nums.length; i++){\\n            if(nums[i]==target){\\n                min = Math.min(min, Math.abs(i-start));\\n            }\\n        }\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3494169,
                "title": "0ms-100-beats-clean-java-solution-beconsistent",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n              if(Math.abs(i-start)<min)\\n              min=Math.abs(i-start);\\n            }\\n        }\\n   return min;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n              if(Math.abs(i-start)<min)\\n              min=Math.abs(i-start);\\n            }\\n        }\\n   return min;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3484215,
                "title": "minimum-distance-to-the-target-element",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        ans = math.inf\\n        for i, num in enumerate(nums):\\n            if num == target:\\n                ans = min(ans, abs(i - start))\\n\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        ans = math.inf\\n        for i, num in enumerate(nums):\\n            if num == target:\\n                ans = min(ans, abs(i - start))\\n\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3483739,
                "title": "minimum-distance-to-the-target-element-easy-solution-with-few-lines-of-code",
                "content": "class Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int smallval= INT_MAX;\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(nums[i]==target && abs(i-start)<smallval)\\n            {\\n               smallval = abs(i-start);\\n            }\\n              \\n\\n        }\\n        return smallval;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int smallval= INT_MAX;\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(nums[i]==target && abs(i-start)<smallval)\\n            {\\n               smallval = abs(i-start);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3478521,
                "title": "with-math-library-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n  let array = [];\\n    for ( let i = 0; i < nums.length; i++){\\n      if(nums[i] === target){\\n       array.push(Math.abs(i - start));\\n      }\\n    }\\n    return Math.min(...array)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n  let array = [];\\n    for ( let i = 0; i < nums.length; i++){\\n      if(nums[i] === target){\\n       array.push(Math.abs(i - start));\\n      }\\n    }\\n    return Math.min(...array)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3472603,
                "title": "java-expand-from-start-to-both-side-of-array-easy-to-understand-t-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int n = nums.length;\\n        int i = start;\\n        int j = start;\\n        int minDist = Integer.MAX_VALUE;\\n        while(i >= 0){\\n            if(nums[i] == target) {\\n                minDist = Math.min(minDist, Math.abs(i - start));\\n                break;\\n            }\\n            i--;\\n        }\\n\\n        while(j < n){\\n            if(nums[j] == target) {\\n                minDist = Math.min(minDist, Math.abs(j - start));\\n                break;\\n            }\\n            j++;\\n        }\\n        return minDist;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int n = nums.length;\\n        int i = start;\\n        int j = start;\\n        int minDist = Integer.MAX_VALUE;\\n        while(i >= 0){\\n            if(nums[i] == target) {\\n                minDist = Math.min(minDist, Math.abs(i - start));\\n                break;\\n            }\\n            i--;\\n        }\\n\\n        while(j < n){\\n            if(nums[j] == target) {\\n                minDist = Math.min(minDist, Math.abs(j - start));\\n                break;\\n            }\\n            j++;\\n        }\\n        return minDist;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3470428,
                "title": "python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        mini=float(\"inf\")\\n        for i in range(len(nums)):\\n            if nums[i]==target:\\n                mini=min(mini,abs(i-start))\\n        return mini\\n            \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        mini=float(\"inf\")\\n        for i in range(len(nums)):\\n            if nums[i]==target:\\n                mini=min(mini,abs(i-start))\\n        return mini\\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3460686,
                "title": "100-java-solutions",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n        boolean alreadyOccurred = false;\\n        for(int i=0; i<nums.length; i++ ){\\n            if(nums[i] == target){\\n                ans = alreadyOccurred ? Math.min(ans,Math.abs(i-start)) : Math.abs(i-start);\\n                alreadyOccurred = true;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n        boolean alreadyOccurred = false;\\n        for(int i=0; i<nums.length; i++ ){\\n            if(nums[i] == target){\\n                ans = alreadyOccurred ? Math.min(ans,Math.abs(i-start)) : Math.abs(i-start);\\n                alreadyOccurred = true;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457502,
                "title": "minimum-distance-javascript-o-n-51-ms",
                "content": "![image.png](https://assets.leetcode.com/users/images/1a408052-67c1-4cfb-b5f7-87ac9f96447f_1682515561.8084388.png)\\n\\n```\\nvar getMinDistance = function(nums, target, start) {    \\n    right = (10 ** 4), left  = - (10 ** 4)\\n\\n    for (let i = start; i < nums.length; i++) {\\n        if (nums[i] == target) {\\n            right = i\\n            break\\n        }\\n    }\\n\\n    for (let i = start; i >= 0; i--) {\\n        if (nums[i] == target) {\\n            left = i\\n            break\\n        }\\n    }\\n\\n    return Math.min(start - left, right - start)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar getMinDistance = function(nums, target, start) {    \\n    right = (10 ** 4), left  = - (10 ** 4)\\n\\n    for (let i = start; i < nums.length; i++) {\\n        if (nums[i] == target) {\\n            right = i\\n            break\\n        }\\n    }\\n\\n    for (let i = start; i >= 0; i--) {\\n        if (nums[i] == target) {\\n            left = i\\n            break\\n        }\\n    }\\n\\n    return Math.min(start - left, right - start)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3456482,
                "title": "python-basic-approach",
                "content": "# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        a = []\\n        for i in range(len(nums)):\\n            if nums[i]==target:\\n                a.append(abs(i-start))\\n        return min(a)        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        a = []\\n        for i in range(len(nums)):\\n            if nums[i]==target:\\n                a.append(abs(i-start))\\n        return min(a)        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3448304,
                "title": "rust-functional-style-iterators",
                "content": "# Intuition\\nBasic implementation of the problem. Technically there are ways that you could reduce the number of iterations necessary by starting from the middle, but in practice iteration is just faster.\\n\\n# Approach\\niter(), well, iterates over the vector. Note that this is read-only so it\\'s actually iterating over &i32 instead of i32.\\n\\nenumerate() turns an iterator of &i32 into an iterator of (usize, &i32) where the first term is the zero-indexed position. **Note**: we have to enumerate before filtering so our index is relative to its original position.\\n\\nfilter() removes any irrelevant elements from the iterator.\\n\\nmap() throws out the &i32 term (we\\'re done with it after the filter), and converts from i: usize into the absolute value distance measure as an i32.\\n\\nAfter the map, we now have an iterator of distances to \"start\". We use min() to collapse the iterator into Option<i32>; note that it is an option because Rust thinks the iterator might be empty (i.e. no elements match target).\\n\\nBut we\\'re told this is impossible, so we can just unwrap() and call it a day.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n), we do one pass over nums.\\n\\n- Space complexity:\\nO(1), the iterator struct takes up a finite amount of space and there are no heap allocations.\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        nums\\n        .iter()\\n        .enumerate()\\n        .filter(|(_, &num)| num == target)\\n        .map(|(i, _)| ((i as i32) - start).abs())\\n        .min()\\n        .unwrap()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn get_min_distance(nums: Vec<i32>, target: i32, start: i32) -> i32 {\\n        nums\\n        .iter()\\n        .enumerate()\\n        .filter(|(_, &num)| num == target)\\n        .map(|(i, _)| ((i as i32) - start).abs())\\n        .min()\\n        .unwrap()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3436903,
                "title": "java-simple-solution-bruteforce-find-minimum",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int minAbsolute = Integer.MAX_VALUE;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == target) {\\n                minAbsolute = Math.min(minAbsolute, Math.abs(i - start));\\n            }\\n        }\\n\\n        return minAbsolute;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int minAbsolute = Integer.MAX_VALUE;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == target) {\\n                minAbsolute = Math.min(minAbsolute, Math.abs(i - start));\\n            }\\n        }\\n\\n        return minAbsolute;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3412410,
                "title": "python-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n) where n is the length of nums\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n) where n is the length of nums\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        res = []\\n\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                res.append(abs(i -start))\\n\\n        return min(res)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        res = []\\n\\n        for i in range(len(nums)):\\n            if nums[i] == target:\\n                res.append(abs(i -start))\\n\\n        return min(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3402810,
                "title": "using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n        for(int i=0; i<nums.length; i++){\\n            if(nums[i]==target){\\n                ans = Math.min(ans, Math.abs(i-start));\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int ans = Integer.MAX_VALUE;\\n        for(int i=0; i<nums.length; i++){\\n            if(nums[i]==target){\\n                ans = Math.min(ans, Math.abs(i-start));\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3396909,
                "title": "3-line-easy-java-code-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int res = Integer.MAX_VALUE;\\n        for(int i=0; i<nums.length; i++)\\n            if(nums[i] == target)\\n               res = Math.min(res,  Math.abs(i - start));\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n        int res = Integer.MAX_VALUE;\\n        for(int i=0; i<nums.length; i++)\\n            if(nums[i] == target)\\n               res = Math.min(res,  Math.abs(i - start));\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3382703,
                "title": "c-bfs-from-start",
                "content": "No error checking since constraints say target must exist in vector.\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int l = start, r = start;\\n        while (true){\\n            if (l > -1 && nums[l] == target) return start - l;\\n            if (r < nums.size() && nums[r] == target) return r - start;\\n            --l, ++r;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int l = start, r = start;\\n        while (true){\\n            if (l > -1 && nums[l] == target) return start - l;\\n            if (r < nums.size() && nums[r] == target) return r - start;\\n            --l, ++r;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3368450,
                "title": "solution-to-absolute-value-question-with-proper-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAt first It was difficult to grasp what the question was trying to ask but i slowly and steadily understood the problem.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMy approach to solving this problem is quite different compared to other solutions. I have initiated with an array in a for loop which stores the absolute values of \"i-start\" ONLY if the current value of vector is equal to the target we need (since there can be multiple values which match the target value but we want one which is CLOSEST to the index of \"start\" to minimize the absolute value). The loop runs and constantly stores the absolute values whenever it encounters one. Next, I have initiated another loop to check for the MINIMUM absolute value out of all absolute values to get a minimized solution.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int len=nums.size();\\n\\n        int x=0;\\n        int arr[len];\\n        for(int i=0; i<len; i++){\\n            if(nums[i]==target){\\n                arr[x]=abs(i-start);\\n                x++;\\n            }\\n        }\\n        int min=arr[0];\\n        for(int i=1; i<x; i++){\\n            if(arr[0]>arr[i]){\\n                min=arr[i];\\n            }\\n        }\\n        return min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getMinDistance(vector<int>& nums, int target, int start) {\\n        int len=nums.size();\\n\\n        int x=0;\\n        int arr[len];\\n        for(int i=0; i<len; i++){\\n            if(nums[i]==target){\\n                arr[x]=abs(i-start);\\n                x++;\\n            }\\n        }\\n        int min=arr[0];\\n        for(int i=1; i<x; i++){\\n            if(arr[0]>arr[i]){\\n                min=arr[i];\\n            }\\n        }\\n        return min;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3358166,
                "title": "easy-5-lines-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let arr = [];\\n    for(let i = 0; i < nums.length; i++) {\\n        if(nums[i] == target) {\\n            arr.push(Math.abs(i - start));\\n        }\\n    }\\n    return Math.min(...arr);\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @param {number} start\\n * @return {number}\\n */\\nvar getMinDistance = function(nums, target, start) {\\n    let arr = [];\\n    for(let i = 0; i < nums.length; i++) {\\n        if(nums[i] == target) {\\n            arr.push(Math.abs(i - start));\\n        }\\n    }\\n    return Math.min(...arr);\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3354553,
                "title": "java-easiest-solution",
                "content": "class Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n\\n        int ans = Integer.MAX_VALUE;\\n        \\n        for (int i = 0 ; i < nums.length ; i++){\\n\\n            if (nums[i] == target){\\n\\n                ans = Math.min(ans, Math.abs(i - start));\\n\\n            }\\n\\n        }\\n\\n        return ans;\\n\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int getMinDistance(int[] nums, int target, int start) {\\n\\n        int ans = Integer.MAX_VALUE;\\n        \\n        for (int i = 0 ; i < nums.length ; i++){\\n\\n            if (nums[i] == target){\\n\\n                ans = Math.min(ans, Math.abs(i - start));\\n\\n            }",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1850808,
                "content": [
                    {
                        "username": "M1dn1ght",
                        "content": "Easy  problem  using Greedy Method"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint</span>\\nNo special algorithm. Just loop through.\\n\\n# <span style=\\'color:green\\'>Answer</span>\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        return min(abs(i - start) for i in range(len(nums)) if nums[i] == target)"
                    }
                ]
            },
            {
                "id": 1799174,
                "content": [
                    {
                        "username": "M1dn1ght",
                        "content": "Easy  problem  using Greedy Method"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint</span>\\nNo special algorithm. Just loop through.\\n\\n# <span style=\\'color:green\\'>Answer</span>\\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\\n        return min(abs(i - start) for i in range(len(nums)) if nums[i] == target)"
                    }
                ]
            }
        ]
    }
]