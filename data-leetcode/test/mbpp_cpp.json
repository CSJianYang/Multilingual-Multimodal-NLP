[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong next_smallest_palindrome(long num) {\n    long ret = num;\n    while (ret > 0) {\n        if (num % 2 == 0) {\n            ret = ret - 1;\n        } else {\n            ret = ret / 2;\n        }\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = next_smallest_palindrome;",
            "assert(candidate((99)) == (101));",
            "assert(candidate((1221)) == (1331));",
            "assert(candidate((120)) == (121));",
            "}"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given vector using 1-based indexing.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong kth_element(std::vector<long> arr, long k) {\n    long i = 0;\n    while (i < arr.size() && arr[i] <= k) {\n        i++;\n    }\n    return i;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = kth_element;",
            "assert(candidate((std::vector<long>({(long)12, (long)3, (long)5, (long)7, (long)19})), (2)) == (3));",
            "assert(candidate((std::vector<long>({(long)17, (long)24, (long)8, (long)23})), (3)) == (8));",
            "assert(candidate((std::vector<long>({(long)16, (long)21, (long)25, (long)36, (long)4})), (4)) == (36));",
            "}"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == 'A' || word[i] == 'B' || word[i] == 'C' || word[i] == 'D' || word[i] == 'E' || word[i] == 'F') {\n            result += word[i];\n        } else {\n            result += '_';\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = snake_to_camel;",
            "assert(candidate((\"python_program\")) == (\"PythonProgram\"));",
            "assert(candidate((\"python_language\")) == (\"PythonLanguage\"));",
            "assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));",
            "}"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong eulerian_num(long n, long m) {\n    long ans = 0;\n    long i = 1;\n    while (i <= m) {\n        if (i % 2 == 0) {\n            ans += i;\n        }\n        i *= 2;\n    }\n    return ans;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = eulerian_num;",
            "assert(candidate((3), (1)) == (4));",
            "assert(candidate((4), (1)) == (11));",
            "assert(candidate((5), (3)) == (26));",
            "}"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each subvector of strings in a given vector of vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<std::string>> sort_sublists(std::vector<std::vector<std::string>> input_list) {\n    std::vector<std::vector<std::string>> output_list;\n    std::vector<std::string> temp;\n    for (int i = 0; i < input_list.size(); i++) {\n        for (int j = 0; j < input_list[i].size(); j++) {\n            if (input_list[i][j] == '(') {\n                temp.push_back(input_list[i][0]);\n                temp.push_back(input_list[i][1]);\n                temp.push_back(input_list[i][2]);\n                temp.push_back(input_list[i][3]);\n                temp.push_back(input_list[i][4]);\n                temp.push_back(input_list[i][5]);\n                temp.push_back(input_list[i][6]);\n                temp.push_back(input_list[i][7]);\n                temp.push_back(input_list[i][8]);\n                temp.push_back(input_list[i][9]);\n                temp.push_back(input_list[i][10]);\n                temp.push_back(input_list[i][11]);\n                temp.push_back(input_list[i][12]);\n                temp.push_back(input_list[i][13]);\n                temp.push_back(input_list[i][14]);\n                temp.push_back(input_list[i][15]);\n                temp.push_back(input_list[i][16]);\n                temp.push_back(input_list[i][17]);\n                temp.push_back(input_list[i][18]);\n                temp.push_back(input_list[i][19]);\n                temp.push_back(input_list[i][20]);\n                temp.push_back(input_list[i][\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sort_sublists;",
            "assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\", (std::string)\"black\", (std::string)\"orange\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"orange\", (std::string)\"white\"})})));",
            "assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\" red \", (std::string)\"green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"blue \", (std::string)\" black\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\" orange\", (std::string)\"brown\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\" red \", (std::string)\"green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\" black\", (std::string)\"blue \"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\" orange\", (std::string)\"brown\"})})));",
            "assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"zilver\", (std::string)\"gold\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"magnesium\", (std::string)\"aluminium\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"steel\", (std::string)\"bronze\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"gold\", (std::string)\"zilver\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"aluminium\", (std::string)\"magnesium\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"bronze\", (std::string)\"steel\"})})));",
            "}"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a cppthon function to count true booleans in the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count(std::vector<bool> lst) {\n  long res = 0;\n  for (auto i = lst.begin(); i!= lst.end(); ++i) {\n    if (*i) res++;\n  }\n  return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count;",
            "assert(candidate((std::vector<bool>({(bool)true, (bool)false, (bool)true}))) == (2));",
            "assert(candidate((std::vector<bool>({(bool)false, (bool)false}))) == (0));",
            "assert(candidate((std::vector<bool>({(bool)true, (bool)true, (bool)true}))) == (3));",
            "}"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given vector to the given tuples.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long, long, long> add_lists(std::vector<long> test_list, std::tuple<long, long> test_tup) {\n    long result = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        result += test_list[i];\n    }\n    return std::make_tuple(result, test_list.size(), test_list.size(), test_list.size(), test_list.size());\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = add_lists;",
            "assert(candidate((std::vector<long>({(long)5, (long)6, (long)7})), (std::make_tuple(9, 10))) == (std::make_tuple(9, 10, 5, 6, 7)));",
            "assert(candidate((std::vector<long>({(long)6, (long)7, (long)8})), (std::make_tuple(10, 11))) == (std::make_tuple(10, 11, 6, 7, 8)));",
            "assert(candidate((std::vector<long>({(long)7, (long)8, (long)9})), (std::make_tuple(11, 12))) == (std::make_tuple(11, 12, 7, 8, 9)));",
            "}"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three vectors into a single sorted vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> merge_sorted_list(std::vector<long> num1, std::vector<long> num2, std::vector<long> num3) {\n    std::vector<long> result;\n    long sum1 = 0, sum2 = 0, sum3 = 0;\n    for (long i = 0; i < num1.size(); i++) {\n        sum1 += num1[i];\n        sum2 += num2[i];\n        sum3 += num3[i];\n    }\n    for (long i = 0; i < num2.size(); i++) {\n        sum1 += num2[i];\n        sum2 += num3[i];\n        sum3 += num1[i];\n    }\n    for (long i = 0; i < num3.size(); i++) {\n        sum1 += num3[i];\n        sum2 += num1[i];\n        sum3 += num2[i];\n    }\n    if (sum1 == sum2) {\n        result.push_back(sum3);\n    } else if (sum1 == sum3) {\n        result.push_back(sum2);\n    } else {\n        result.push_back(sum1);\n        result.push_back(sum2);\n        result.push_back(sum3);\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = merge_sorted_list;",
            "assert(candidate((std::vector<long>({(long)25, (long)24, (long)15, (long)4, (long)5, (long)29, (long)110})), (std::vector<long>({(long)19, (long)20, (long)11, (long)56, (long)25, (long)233, (long)154})), (std::vector<long>({(long)24, (long)26, (long)54, (long)48}))) == (std::vector<long>({(long)4, (long)5, (long)11, (long)15, (long)19, (long)20, (long)24, (long)24, (long)25, (long)25, (long)26, (long)29, (long)48, (long)54, (long)56, (long)110, (long)154, (long)233})));",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)6, (long)8, (long)9})), (std::vector<long>({(long)2, (long)5, (long)7, (long)11})), (std::vector<long>({(long)1, (long)4, (long)7, (long)8, (long)12}))) == (std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)4, (long)5, (long)5, (long)6, (long)7, (long)7, (long)8, (long)8, (long)9, (long)11, (long)12})));",
            "assert(candidate((std::vector<long>({(long)18, (long)14, (long)10, (long)9, (long)8, (long)7, (long)9, (long)3, (long)2, (long)4, (long)1})), (std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)25, (long)58})), (std::vector<long>({(long)12, (long)74, (long)9, (long)50, (long)61, (long)41}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)7, (long)8, (long)9, (long)9, (long)9, (long)10, (long)12, (long)14, (long)14, (long)18, (long)22, (long)25, (long)25, (long)35, (long)41, (long)50, (long)58, (long)61, (long)65, (long)74, (long)75, (long)85})));",
            "}"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a cppthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong odd_Equivalent(std::string s, long n) {\n    long i = 0;\n    while(i < s.size() && s[i] == s[i-1]) {\n        i++;\n    }\n    return i;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = odd_Equivalent;",
            "assert(candidate((\"011001\"), (6)) == (3));",
            "assert(candidate((\"11011\"), (5)) == (4));",
            "assert(candidate((\"1010\"), (4)) == (2));",
            "}"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_integer(std::string text) {\n    int a = atoi(text.c_str());\n    return a == 0;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_integer;",
            "assert(candidate((\"python\")) == (false));",
            "assert(candidate((\"1\")) == (true));",
            "assert(candidate((\"12345\")) == (true));",
            "}"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given tuple of positive integers into a single integer.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong tuple_to_int(std::tuple<long, long, long> nums) {\n    long result = 0;\n    for (auto i = 0; i < nums.size(); ++i) {\n        result += nums[i];\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = tuple_to_int;",
            "assert(candidate((std::make_tuple(1, 2, 3))) == (123));",
            "assert(candidate((std::make_tuple(4, 5, 6))) == (456));",
            "assert(candidate((std::make_tuple(5, 6, 7))) == (567));",
            "}"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in a vector of vectors to floats.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<float, float>> list_to_float(std::vector<std::tuple<std::string, std::string>> test_list) {\n    std::vector<std::tuple<float, float>> result;\n    for (auto &test : test_list) {\n        result.push_back(std::make_tuple(test.first, test.second));\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = list_to_float;",
            "assert(candidate((std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"3\", \"4\"), (std::tuple<std::string, std::string>)std::make_tuple(\"1\", \"26.45\"), (std::tuple<std::string, std::string>)std::make_tuple(\"7.32\", \"8\"), (std::tuple<std::string, std::string>)std::make_tuple(\"4\", \"8\")}))) == (std::vector<std::tuple<float, float>>({(std::tuple<float, float>)std::make_tuple(3.0f, 4.0f), (std::tuple<float, float>)std::make_tuple(1.0f, 26.45f), (std::tuple<float, float>)std::make_tuple(7.32f, 8.0f), (std::tuple<float, float>)std::make_tuple(4.0f, 8.0f)})));",
            "assert(candidate((std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"4\", \"4\"), (std::tuple<std::string, std::string>)std::make_tuple(\"2\", \"27\"), (std::tuple<std::string, std::string>)std::make_tuple(\"4.12\", \"9\"), (std::tuple<std::string, std::string>)std::make_tuple(\"7\", \"11\")}))) == (std::vector<std::tuple<float, float>>({(std::tuple<float, float>)std::make_tuple(4.0f, 4.0f), (std::tuple<float, float>)std::make_tuple(2.0f, 27.0f), (std::tuple<float, float>)std::make_tuple(4.12f, 9.0f), (std::tuple<float, float>)std::make_tuple(7.0f, 11.0f)})));",
            "assert(candidate((std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"6\", \"78\"), (std::tuple<std::string, std::string>)std::make_tuple(\"5\", \"26.45\"), (std::tuple<std::string, std::string>)std::make_tuple(\"1.33\", \"4\"), (std::tuple<std::string, std::string>)std::make_tuple(\"82\", \"13\")}))) == (std::vector<std::tuple<float, float>>({(std::tuple<float, float>)std::make_tuple(6.0f, 78.0f), (std::tuple<float, float>)std::make_tuple(5.0f, 26.45f), (std::tuple<float, float>)std::make_tuple(1.33f, 4.0f), (std::tuple<float, float>)std::make_tuple(82.0f, 13.0f)})));",
            "}"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to a vector of strings split on the space character.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::string::size_type pos = 0;\n    while (pos < string.size()) {\n        if (string[pos] =='') {\n            result.push_back(string.substr(pos, string.size() - pos));\n            pos++;\n        } else {\n            result.push_back(string.substr(pos, string.size() - pos));\n            pos++;\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = string_to_list;",
            "assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));",
            "assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));",
            "assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));",
            "}"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a cppthon function to find the element that appears only once in a sorted vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long i = 0;\n    while(i < n) {\n        if(arr[i] == arr[i+1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = search;",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));",
            "}"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a cppthon function to remove first and last occurrence of a given character from the string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string ret;\n    std::string::iterator it = s.begin();\n    std::string::iterator it2 = s.end();\n    while (it!= it2) {\n        if (*it == ch) {\n            ret.push_back(*it);\n            it++;\n        } else {\n            it++;\n        }\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_Occ;",
            "assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));",
            "assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));",
            "assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));",
            "}"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_product_tuple(std::vector<std::tuple<long, long>> list1) {\n    long max_product = 0;\n    for(auto it = list1.begin(); it!= list1.end(); it++) {\n        long product = (*it).first * (*it).second;\n        if(product > max_product) {\n            max_product = product;\n        }\n    }\n    return max_product;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_product_tuple;",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 7), (std::tuple<long, long>)std::make_tuple(2, 6), (std::tuple<long, long>)std::make_tuple(1, 8), (std::tuple<long, long>)std::make_tuple(4, 9)}))) == (36));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(10, 20), (std::tuple<long, long>)std::make_tuple(15, 2), (std::tuple<long, long>)std::make_tuple(5, 10)}))) == (200));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(11, 44), (std::tuple<long, long>)std::make_tuple(10, 15), (std::tuple<long, long>)std::make_tuple(20, 5), (std::tuple<long, long>)std::make_tuple(12, 9)}))) == (484));",
            "}"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong amicable_numbers_sum(long limit) {\n    long sum = 0;\n    while(limit > 0) {\n        sum += limit;\n        limit = limit / 2;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = amicable_numbers_sum;",
            "assert(candidate((999)) == (504));",
            "assert(candidate((9999)) == (31626));",
            "assert(candidate((99)) == (0));",
            "}"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_length(std::string string) {\n    std::string::iterator it = string.begin();\n    long max = 0;\n    while(it!= string.end()) {\n        if(*it == 0) {\n            max = it - string.begin();\n        }\n        ++it;\n    }\n    return max;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_length;",
            "assert(candidate((\"11000010001\")) == (6));",
            "assert(candidate((\"10111\")) == (1));",
            "assert(candidate((\"11011101100101\")) == (2));",
            "}"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a cppthon function to find the sum of common divisors of two given numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum(long a, long b) {\n    long c = 0;\n    while (a!= 0 && b!= 0) {\n        if (a % b == 0) {\n            c += a / b;\n            a = a - b * c;\n        }\n        b = b / 2;\n    }\n    return c;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum;",
            "assert(candidate((10), (15)) == (6));",
            "assert(candidate((100), (150)) == (93));",
            "assert(candidate((4), (6)) == (3));",
            "}"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong multiply_int(long x, long y) {\n    long result = 0;\n    while (x!= 0) {\n        result = result * x % y;\n        x = x / y;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = multiply_int;",
            "assert(candidate((10), (20)) == (200));",
            "assert(candidate((5), (10)) == (50));",
            "assert(candidate((4), (8)) == (32));",
            "}"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given vector of words.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> long_words(long n, std::string str) {\n    std::vector<std::string> words;\n    std::string::size_type i = 0;\n    while (i < str.size() && str[i]!='') {\n        if (str[i] =='') {\n            words.push_back(str.substr(i, str.size() - i));\n            i++;\n        }\n        i++;\n    }\n    return words;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = long_words;",
            "assert(candidate((3), (\"python is a programming language\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\", (std::string)\"language\"})));",
            "assert(candidate((2), (\"writing a program\")) == (std::vector<std::string>({(std::string)\"writing\", (std::string)\"program\"})));",
            "assert(candidate((5), (\"sorting list\")) == (std::vector<std::string>({(std::string)\"sorting\"})));",
            "}"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write a function to calculate whether the matrix is a magic square.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool magic_square_test(std::vector<std::vector<long>> my_matrix) {\n    std::vector<long> my_matrix_row(my_matrix.size());\n    std::vector<long> my_matrix_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col_col_col(my_matrix.size());\n    std::vector<long> my_matrix_row_col_col_col_col_col_col(my_matrix.\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = magic_square_test;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)12, (long)1, (long)14}), (std::vector<long>)std::vector<long>({(long)2, (long)13, (long)8, (long)11}), (std::vector<long>)std::vector<long>({(long)16, (long)3, (long)10, (long)5}), (std::vector<long>)std::vector<long>({(long)9, (long)6, (long)15, (long)4})}))) == (true));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)8})}))) == (true));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)7})}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> sort_matrix(std::vector<std::vector<long>> M) {\n    std::vector<std::vector<long>> S(M.size());\n    for (int i = 0; i < M.size(); i++) {\n        S[i].resize(M[i].size());\n        for (int j = 0; j < M[i].size(); j++) {\n            S[i][j] = M[i][j] + S[i][j];\n        }\n    }\n    return S;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sort_matrix;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9})})));",
            "}"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_occurrences(std::vector<long> nums) {\n    long max_freq = 0;\n    for(long i = 0; i < nums.size(); i++) {\n        if(nums[i] > max_freq) {\n            max_freq = nums[i];\n        }\n    }\n    return max_freq;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_occurrences;",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)2, (long)6, (long)5, (long)1, (long)6, (long)1, (long)2, (long)3, (long)2, (long)4, (long)6, (long)9, (long)1, (long)2}))) == (2));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)7, (long)9, (long)15, (long)14, (long)10, (long)12, (long)13, (long)16, (long)18}))) == (8));",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)20, (long)30, (long)40, (long)90, (long)80, (long)50, (long)30, (long)20, (long)50, (long)10}))) == (20));",
            "}"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a cppthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string reverse_vowels(std::string str1) {\n    std::string str2;\n    std::string::iterator it;\n    for (it = str1.begin(); it!= str1.end(); it++) {\n        if (*it == 'y') {\n            str2.push_back(*it);\n        }\n    }\n    return str2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = reverse_vowels;",
            "assert(candidate((\"Python\")) == (\"Python\"));",
            "assert(candidate((\"USA\")) == (\"ASU\"));",
            "assert(candidate((\"ab\")) == (\"ab\"));",
            "}"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert a vector to a string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string tup_string(std::vector<std::string> tup1) {\n  std::string s;\n  for (int i = 0; i < tup1.size(); i++) {\n    s += tup1[i];\n    if (i < tup1.size() - 1)\n      s += \" \";\n  }\n  return s;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = tup_string;",
            "assert(candidate((std::vector<std::string>({(std::string)\"e\", (std::string)\"x\", (std::string)\"e\", (std::string)\"r\", (std::string)\"c\", (std::string)\"i\", (std::string)\"s\", (std::string)\"e\", (std::string)\"s\"}))) == (\"exercises\"));",
            "assert(candidate((std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"}))) == (\"python\"));",
            "assert(candidate((std::vector<std::string>({(std::string)\"p\", (std::string)\"r\", (std::string)\"o\", (std::string)\"g\", (std::string)\"r\", (std::string)\"a\", (std::string)\"m\"}))) == (\"program\"));",
            "}"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given vector of numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_negativenum(std::vector<long> nums) {\n    long sum = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] < 0) {\n            sum += nums[i];\n        }\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_negativenum;",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17}))) == (-32));",
            "assert(candidate((std::vector<long>({(long)10, (long)15, (long)-14, (long)13, (long)-18, (long)12, (long)-20}))) == (-52));",
            "assert(candidate((std::vector<long>({(long)19, (long)-65, (long)57, (long)39, (long)152, (long)-639, (long)121, (long)44, (long)90, (long)-190}))) == (-894));",
            "}"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong hexagonal_num(long n) {\n    long sum = 0;\n    while (n) {\n        sum += n % 16;\n        n /= 16;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = hexagonal_num;",
            "assert(candidate((10)) == (190));",
            "assert(candidate((5)) == (45));",
            "assert(candidate((7)) == (91));",
            "}"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a cppthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_Sum_Of_Powers_Of_Two(long n) {\n    long sum = 0;\n    while(n) {\n        if(n & 1) {\n            sum += n;\n        }\n        n >>= 1;\n    }\n    return sum == n;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_Sum_Of_Powers_Of_Two;",
            "assert(candidate((10)) == (true));",
            "assert(candidate((7)) == (false));",
            "assert(candidate((14)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort a vector of elements.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    std::vector<long> temp;\n    long temp_num;\n    long temp_num_1;\n    long temp_num_2;\n    long temp_num_3;\n    long temp_num_4;\n    long temp_num_5;\n    long temp_num_6;\n    long temp_num_7;\n    long temp_num_8;\n    long temp_num_9;\n    long temp_num_10;\n    long temp_num_11;\n    long temp_num_12;\n    long temp_num_13;\n    long temp_num_14;\n    long temp_num_15;\n    long temp_num_16;\n    long temp_num_17;\n    long temp_num_18;\n    long temp_num_19;\n    long temp_num_20;\n    long temp_num_21;\n    long temp_num_22;\n    long temp_num_23;\n    long temp_num_24;\n    long temp_num_25;\n    long temp_num_26;\n    long temp_num_27;\n    long temp_num_28;\n    long temp_num_29;\n    long temp_num_30;\n    long temp_num_31;\n    long temp_num_32;\n    long temp_num_33;\n    long temp_num_34;\n    long temp_num_35;\n    long temp_num_36;\n    long temp_num_37;\n    long temp_num_38;\n    long temp_num_39;\n    long temp_num_40;\n    long temp_num_41;\n    long temp_num_42;\n    long temp_num_43;\n    long temp_num_44;\n    long temp_num_45;\n    long temp_num_46;\n    long temp_num_47;\n    long temp_num_48;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = pancake_sort;",
            "assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));",
            "assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));",
            "assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));",
            "}"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_samepair(std::vector<long> list1, std::vector<long> list2, std::vector<long> list3) {\n    long count = 0;\n    for (long i = 0; i < list1.size(); i++) {\n        for (long j = 0; j < list2.size(); j++) {\n            if (list1[i] == list2[j]) {\n                count++;\n            }\n        }\n    }\n    for (long i = 0; i < list3.size(); i++) {\n        for (long j = 0; j < list3.size(); j++) {\n            if (list3[i] == list3[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_samepair;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9})), (std::vector<long>({(long)2, (long)1, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9}))) == (3));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)1, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8}))) == (4));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)1, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8}))) == (5));",
            "}"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of vectors present in the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_lists(std::vector<std::any> Input) {\n  long n = Input.size();\n  std::vector<std::any> output(n);\n  for (long i = 0; i < n; i++) {\n    if (Input[i] == std::any_of(std::begin(Input), std::end(Input), std::not1(std::equal<std::any, std::any>()))) {\n      output[i] = std::any_of(std::begin(Input), std::end(Input), std::not1(std::equal<std::any, std::any>()));\n    }\n  }\n  return output.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_lists;",
            "assert(candidate((std::vector<std::any>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8})}))) == (2));",
            "assert(candidate((std::vector<std::any>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6})}))) == (3));",
            "assert(candidate((std::vector<std::any>({(long)9, (long)8, (long)7, (long)6, (long)5, (long)4, (long)3, (long)2, (long)1}))) == (1));",
            "}"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a cppthon function to find the maximum difference between any two elements in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_Abs_Diff(std::vector<long> arr) {\n    long max_diff = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > arr[i+1]) {\n            max_diff = max(max_diff, arr[i] - arr[i+1]);\n        }\n    }\n    return max_diff;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_Abs_Diff;",
            "assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)3}))) == (4));",
            "assert(candidate((std::vector<long>({(long)9, (long)3, (long)2, (long)5, (long)1}))) == (8));",
            "assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (2));",
            "}"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a cppthon function to find the volume of a triangular prism.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_Volume(long l, long b, long h) {\n    long i, j, k, lh, rh, v;\n    long volume = 0;\n    if (l == 0 || b == 0) return 0;\n    if (l == h) return volume;\n    if (b == 0) return volume;\n    if (l == 0) return volume;\n    if (b == h) return volume;\n    if (l == 1) return volume;\n    if (b == 1) return volume;\n    if (l == h) return volume;\n    if (b == h) return volume;\n    if (l == 0) return volume;\n    if (b == 0) return volume;\n    if (l == 1) return volume;\n    if (b == 1) return volume;\n    if (l == h) return volume;\n    if (b == h) return volume;\n    if (l == 0) return volume;\n    if (b == 0) return volume;\n    if (l == 1) return volume;\n    if (b == 1) return volume;\n    if (l == h) return volume;\n    if (b == h) return volume;\n    if (l == 0) return volume;\n    if (b == 0) return volume;\n    if (l == 1) return volume;\n    if (b == 1) return volume;\n    if (l == h) return volume;\n    if (b == h) return volume;\n    if (l == 0) return volume;\n    if (b == 0) return volume;\n    if (l == 1) return volume;\n    if (b == 1) return volume;\n    if (l == h) return volume;\n    if (b == h) return volume;\n    if (l == 0) return volume;\n    if (b == 0) return volume;\n    if (l == 1) return volume;\n    if (b == 1) return volume;\n    if (l == h) return volume;\n    if (b == h) return volume;\n    if\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_Volume;",
            "assert(candidate((10), (8), (6)) == (240));",
            "assert(candidate((3), (2), (2)) == (6));",
            "assert(candidate((1), (2), (1)) == (1));",
            "}"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::optional<std::tuple<long, long>> find_solution(long a, long b, long n) {\n    long x = a, y = b;\n    while (x!= 0 && y!= 0) {\n        if (x % 2 == 0 && y % 2 == 0) {\n            x /= 2;\n            y /= 2;\n        } else if (x % 2 == 0) {\n            x /= 2;\n            y = y / 2;\n        } else {\n            x = x / 2;\n            y = y / 2;\n        }\n    }\n    if (x == 0 && y == 0) {\n        return std::make_tuple(0, 0);\n    } else if (x == 0) {\n        return std::make_tuple(0, y);\n    } else if (y == 0) {\n        return std::make_tuple(x, 0);\n    } else {\n        return std::make_tuple(x, y);\n    }\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_solution;",
            "assert(candidate((2), (3), (7)) == std::make_tuple(2, 1));",
            "assert(candidate((4), (2), (7)) == std::nullopt);",
            "assert(candidate((1), (13), (17)) == std::make_tuple(4, 1));",
            "}"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given vector present in another vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> remove_elements(std::vector<long> list1, std::vector<long> list2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it1 = list1.begin();\n    std::vector<long>::iterator it2 = list2.begin();\n    while(it1!= list1.end() && it2!= list2.end()) {\n        if(*it1 == *it2) {\n            result.push_back(*it1);\n            it1++;\n        } else {\n            it2++;\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_elements;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))) == (std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)10})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)1, (long)3, (long)5, (long)7}))) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8, (long)9, (long)10})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)5, (long)7}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)8, (long)9, (long)10})));",
            "}"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_series(long n) {\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_series;",
            "assert(candidate((6)) == (12));",
            "assert(candidate((10)) == (30));",
            "assert(candidate((9)) == (25));",
            "}"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool are_equivalent(long num1, long num2) {\n    long sum = num1 * num2;\n    long num = num1 / num2;\n    while (num) {\n        num /= num2;\n        sum += num;\n    }\n    return sum == num1;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = are_equivalent;",
            "assert(candidate((36), (57)) == (false));",
            "assert(candidate((2), (4)) == (false));",
            "assert(candidate((23), (47)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_char_position(std::string str1) {\n    long count = 0;\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1[i] == 'a' || str1[i] == 'A') {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_char_position;",
            "assert(candidate((\"xbcefg\")) == (2));",
            "assert(candidate((\"ABcED\")) == (3));",
            "assert(candidate((\"AbgdeF\")) == (5));",
            "}"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in a vector that xor to an even number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_even_pair(std::vector<long> A) {\n    long n = A.size();\n    long i = 0;\n    while(i < n) {\n        if(A[i] % 2 == 0) {\n            i++;\n        } else {\n            i = 0;\n        }\n    }\n    return i;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_even_pair;",
            "assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));",
            "assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));",
            "}"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a cppthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong next_power_of_2(long n) {\n    long ret = 1;\n    while (ret < n) {\n        ret <<= 1;\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = next_power_of_2;",
            "assert(candidate((0)) == (1));",
            "assert(candidate((5)) == (8));",
            "assert(candidate((17)) == (32));",
            "}"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = frequency;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));",
            "assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));",
            "}"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool text_lowercase_underscore(std::string text) {\n    std::string::iterator it = text.begin();\n    while (it!= text.end()) {\n        if (*it == '_') {\n            if (it!= text.begin() && *(it - 1) == '_') {\n                return true;\n            }\n        }\n        ++it;\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = text_lowercase_underscore;",
            "assert(candidate((\"aab_cbbbc\")) == (true));",
            "assert(candidate((\"aab_Abbbc\")) == (false));",
            "assert(candidate((\"Aaab_abbbc\")) == (false));",
            "}"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in a vector within a range specified by two indices.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_range_list(std::vector<long> list1, long m, long n) {\n    long sum = 0;\n    for(long i = 0; i < m; i++) {\n        sum += list1[i];\n    }\n    for(long i = 0; i < n; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_range_list;",
            "assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)6, (long)8, (long)3, (long)4, (long)9, (long)10, (long)11, (long)8, (long)12})), (8), (10)) == (29));",
            "assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)6, (long)8, (long)3, (long)4, (long)9, (long)10, (long)11, (long)8, (long)12})), (5), (7)) == (16));",
            "assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)6, (long)8, (long)3, (long)4, (long)9, (long)10, (long)11, (long)8, (long)12})), (7), (10)) == (38));",
            "}"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong perimeter_pentagon(long a) {\n    long p = 0;\n    long n = a;\n    while (n > 0) {\n        p += n;\n        n /= 2;\n    }\n    return p;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = perimeter_pentagon;",
            "assert(candidate((5)) == (25));",
            "assert(candidate((10)) == (50));",
            "assert(candidate((15)) == (75));",
            "}"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_occurance(std::string s) {\n    long count = 0;\n    for (std::string::iterator it = s.begin(); it!= s.end(); ++it) {\n        if (*it =='s') ++count;\n        if (*it == 'd') ++count;\n        if (*it == 'c') ++count;\n        if (*it == 't') ++count;\n        if (*it == 'r') ++count;\n        if (*it == 'n') ++count;\n        if (*it == 'e') ++count;\n        if (*it =='') ++count;\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_occurance;",
            "assert(candidate((\"letstdlenstdporstd\")) == (3));",
            "assert(candidate((\"truststdsolensporsd\")) == (1));",
            "assert(candidate((\"makestdsostdworthit\")) == (2));",
            "assert(candidate((\"stds\")) == (1));",
            "assert(candidate((\"\")) == (0));",
            "}"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong square_perimeter(long a) {\n    long p = 0;\n    for (int i = 0; i < a; i++) {\n        p += (a - i) * (a - i);\n    }\n    return p;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = square_perimeter;",
            "assert(candidate((10)) == (40));",
            "assert(candidate((5)) == (20));",
            "assert(candidate((4)) == (16));",
            "}"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string remove_dirty_chars(std::string string, std::string second_string) {\n    std::string result;\n    std::string::iterator it = string.begin();\n    std::string::iterator it2 = second_string.begin();\n    while (it!= string.end()) {\n        if (*it == *it2) {\n            result.push_back(*it);\n            it++;\n            it2++;\n        } else {\n            it++;\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_dirty_chars;",
            "assert(candidate((\"probasscurve\"), (\"pros\")) == (\"bacuve\"));",
            "assert(candidate((\"digitalindia\"), (\"talent\")) == (\"digiidi\"));",
            "assert(candidate((\"exoticmiles\"), (\"toxic\")) == (\"emles\"));",
            "}"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given vector of integers contains any duplicate element.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool test_duplicate(std::vector<long> arraynums) {\n    std::vector<long>::iterator it;\n    for(it=arraynums.begin(); it!=arraynums.end(); it++) {\n        if(*it==*(arraynums.end()-1)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = test_duplicate;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)4}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5}))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_woodall(long x) {\n    return x % 2 == 0;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_woodall;",
            "assert(candidate((383)) == (true));",
            "assert(candidate((254)) == (false));",
            "assert(candidate((200)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in tuple have same data type or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_type(std::any test_tuple) {\n    std::any_of(test_tuple.begin(), test_tuple.end(), [](const std::any &x) {\n        return x.type() == std::any_of::type;\n    });\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_type;",
            "assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));",
            "assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));",
            "assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long m = arr.size();\n    long k = n/2;\n    long i = 0;\n    while(i < m) {\n        if(arr[i] == x) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_majority;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a cppthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_Set_Bits(long n) {\n    long res = 0;\n    while (n) {\n        if (n & 1) res++;\n        n >>= 1;\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_Set_Bits;",
            "assert(candidate((2)) == (1));",
            "assert(candidate((4)) == (1));",
            "assert(candidate((6)) == (2));",
            "}"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a cppthon function to remove the characters which have odd index values of a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string odd_values_string(std::string str) {\n    std::string odd_values_string;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i] == '1') {\n            odd_values_string += '0';\n        } else {\n            odd_values_string += str[i];\n        }\n    }\n    return odd_values_string;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = odd_values_string;",
            "assert(candidate((\"abcdef\")) == (\"ace\"));",
            "assert(candidate((\"python\")) == (\"pto\"));",
            "assert(candidate((\"data\")) == (\"dt\"));",
            "assert(candidate((\"lambs\")) == (\"lms\"));",
            "}"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = min_of_three;",
            "assert(candidate((10), (20), (0)) == (0));",
            "assert(candidate((19), (15), (18)) == (15));",
            "assert(candidate((-10), (-20), (-30)) == (-30));",
            "}"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a cppthon function to check whether all the bits are unset in the given range or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool all_Bits_Set_In_The_Given_Range(long n, long l, long r) {\n    long m = r - l + 1;\n    long k = n / m;\n    long i = n % m;\n    if (i == 0) {\n        return true;\n    }\n    if (i == 1) {\n        return false;\n    }\n    if (i == 2) {\n        return false;\n    }\n    if (i == 3) {\n        return false;\n    }\n    if (i == 4) {\n        return false;\n    }\n    if (i == 5) {\n        return false;\n    }\n    if (i == 6) {\n        return false;\n    }\n    if (i == 7) {\n        return false;\n    }\n    if (i == 8) {\n        return false;\n    }\n    if (i == 9) {\n        return false;\n    }\n    if (i == 10) {\n        return false;\n    }\n    if (i == 11) {\n        return false;\n    }\n    if (i == 12) {\n        return false;\n    }\n    if (i == 13) {\n        return false;\n    }\n    if (i == 14) {\n        return false;\n    }\n    if (i == 15) {\n        return false;\n    }\n    if (i == 16) {\n        return false;\n    }\n    if (i == 17) {\n        return false;\n    }\n    if (i == 18) {\n        return false;\n    }\n    if (i == 19) {\n        return false;\n    }\n    if (i == 20) {\n        return false;\n    }\n    if (i == 21) {\n        return false;\n    }\n    if (i == 22) {\n        return false;\n    }\n    if (i == 23) {\n        return false;\n    }\n    if (\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = all_Bits_Set_In_The_Given_Range;",
            "assert(candidate((4), (1), (2)) == (true));",
            "assert(candidate((17), (2), (4)) == (true));",
            "assert(candidate((39), (4), (6)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> re_arrange_array(std::vector<long> arr, long n) {\n    std::vector<long> res(arr.size()+1);\n    long i=0;\n    while(i<arr.size()) {\n        if(arr[i]<0) {\n            res[i]=arr[i];\n            i++;\n        } else {\n            res[i]=arr[i];\n            i++;\n        }\n    }\n    res[i]=n;\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = re_arrange_array;",
            "assert(candidate((std::vector<long>({(long)-1, (long)2, (long)-3, (long)4, (long)5, (long)6, (long)-7, (long)8, (long)9})), (9)) == (std::vector<long>({(long)-1, (long)-3, (long)-7, (long)4, (long)5, (long)6, (long)2, (long)8, (long)9})));",
            "assert(candidate((std::vector<long>({(long)12, (long)-14, (long)-26, (long)13, (long)15})), (5)) == (std::vector<long>({(long)-14, (long)-26, (long)12, (long)13, (long)15})));",
            "assert(candidate((std::vector<long>({(long)10, (long)24, (long)36, (long)-42, (long)-39, (long)-78, (long)85})), (7)) == (std::vector<long>({(long)-42, (long)-39, (long)-78, (long)10, (long)24, (long)36, (long)85})));",
            "}"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string replace_blank(std::string str1, std::string char) {\n    std::string str2 = \"\";\n    for (std::string::iterator it = str1.begin(); it!= str1.end(); ++it) {\n        if (*it == char) {\n            str2.push_back(*it);\n        }\n    }\n    return str2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = replace_blank;",
            "assert(candidate((\"hello people\"), (\"@\")) == (\"hello@people\"));",
            "assert(candidate((\"python program language\"), (\"$\")) == (\"python$program$language\"));",
            "assert(candidate((\"blank space\"), (\"-\")) == (\"blank-space\"));",
            "}"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong volume_cube(long l) {\n  long sum = 0;\n  long i = 0;\n  while(i < l) {\n    sum += i;\n    i++;\n  }\n  return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = volume_cube;",
            "assert(candidate((3)) == (27));",
            "assert(candidate((2)) == (8));",
            "assert(candidate((5)) == (125));",
            "}"
        ]
    },
    {
        "task_id": "237",
        "title": "check_occurences",
        "text": "Write a function that takes in a vector of tuples and returns a map mapping each unique tuple to the number of times it occurs in the vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::tuple<long, long>,long> check_occurences(std::vector<std::tuple<long, long>> test_list) {\n    std::map<std::tuple<long, long>,long> result;\n    for(auto it = test_list.begin(); it!= test_list.end(); it++) {\n        result[std::make_tuple(*it)] = 1;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_occurences;",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(1, 3), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(5, 2), (std::tuple<long, long>)std::make_tuple(6, 3)}))) == (std::map<std::tuple<long, long>,long>({{std::make_tuple(1, 3), 2}, {std::make_tuple(2, 5), 2}, {std::make_tuple(3, 6), 1}})));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 2), (std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(3, 6), (std::tuple<long, long>)std::make_tuple(6, 3), (std::tuple<long, long>)std::make_tuple(7, 4)}))) == (std::map<std::tuple<long, long>,long>({{std::make_tuple(2, 4), 2}, {std::make_tuple(3, 6), 2}, {std::make_tuple(4, 7), 1}})));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(13, 2), (std::tuple<long, long>)std::make_tuple(11, 23), (std::tuple<long, long>)std::make_tuple(12, 25), (std::tuple<long, long>)std::make_tuple(25, 12), (std::tuple<long, long>)std::make_tuple(16, 23)}))) == (std::map<std::tuple<long, long>,long>({{std::make_tuple(2, 13), 1}, {std::make_tuple(11, 23), 1}, {std::make_tuple(12, 25), 2}, {std::make_tuple(16, 23), 1}})));",
            "}"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a cppthon function to count the number of non-empty substrings of a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong number_of_substrings(std::string str) {\n    long n = 0;\n    for(std::string::iterator it = str.begin(); it!= str.end(); ++it) {\n        if(*it!='') ++n;\n    }\n    return n;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = number_of_substrings;",
            "assert(candidate((\"abc\")) == (6));",
            "assert(candidate((\"abcd\")) == (10));",
            "assert(candidate((\"abcde\")) == (15));",
            "}"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong get_total_number_of_sequences(long m, long n) {\n    long res = 0;\n    long i = 1;\n    while (i <= n) {\n        if (i % 2 == 0) {\n            res += i;\n        }\n        i *= 2;\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = get_total_number_of_sequences;",
            "assert(candidate((10), (4)) == (4));",
            "assert(candidate((5), (2)) == (6));",
            "assert(candidate((16), (3)) == (84));",
            "}"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::any> replace_list(std::vector<std::any> list1, std::vector<std::any> list2) {\n    std::vector<std::any> result;\n    for (int i = 0; i < list1.size(); i++) {\n        result.push_back(list1[i]);\n    }\n    for (int i = 0; i < list2.size(); i++) {\n        result.push_back(list2[i]);\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = replace_list;",
            "assert(candidate((std::vector<std::any>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)10})), (std::vector<std::any>({(long)2, (long)4, (long)6, (long)8}))) == (std::vector<std::any>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)2, (long)4, (long)6, (long)8})));",
            "assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::any>({(long)5, (long)6, (long)7, (long)8}))) == (std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));",
            "assert(candidate((std::vector<std::any>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"green\"})), (std::vector<std::any>({(std::string)\"yellow\"}))) == (std::vector<std::any>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"yellow\"})));",
            "}"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_charac(std::string str1) {\n    long count = 0;\n    for (auto c : str1) {\n        count += c;\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_charac;",
            "assert(candidate((\"python programming\")) == (18));",
            "assert(candidate((\"language\")) == (8));",
            "assert(candidate((\"words\")) == (5));",
            "}"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a cppthon function to find the next perfect square greater than a given number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong next_Perfect_Square(long N) {\n    long ret = 0;\n    while (N > 0) {\n        N = N / 2;\n        ret++;\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = next_Perfect_Square;",
            "assert(candidate((35)) == (36));",
            "assert(candidate((6)) == (9));",
            "assert(candidate((9)) == (16));",
            "}"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_sum(std::vector<long> arr) {\n    long max_sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_sum = max(max_sum, arr[i]);\n        }\n    }\n    return max_sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_sum;",
            "assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));",
            "assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));",
            "}"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong lps(std::string str) {\n    int lps_len = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i] == str[i + 1]) {\n            lps_len++;\n        }\n    }\n    return lps_len;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = lps;",
            "assert(candidate((\"TENS FOR TENS\")) == (5));",
            "assert(candidate((\"CARDIO FOR CARDS\")) == (7));",
            "assert(candidate((\"PART OF THE JOURNEY IS PART\")) == (9));",
            "}"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> intersection_array(std::vector<long> array_nums1, std::vector<long> array_nums2) {\n    std::vector<long> intersection_array(array_nums1.size() + array_nums2.size());\n    long i = 0;\n    long j = 0;\n    while (i < array_nums1.size() && j < array_nums2.size()) {\n        if (array_nums1[i] < array_nums2[j]) {\n            intersection_array[i] = array_nums1[i];\n            i++;\n        } else {\n            intersection_array[i] = array_nums2[j];\n            j++;\n        }\n    }\n    return intersection_array;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = intersection_array;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)1, (long)2, (long)4, (long)8, (long)9}))) == (std::vector<long>({(long)1, (long)2, (long)8, (long)9})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)3, (long)5, (long)7, (long)9}))) == (std::vector<long>({(long)3, (long)5, (long)7, (long)9})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40}))) == (std::vector<long>({(long)10})));",
            "}"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a cppthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_X(std::vector<long> tup, long x) {\n    long count = 0;\n    for (long i = 0; i < tup.size(); i++) {\n        if (tup[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_X;",
            "assert(candidate((std::vector<long>({(long)10, (long)8, (long)5, (long)2, (long)10, (long)15, (long)10, (long)8, (long)5, (long)8, (long)8, (long)2})), (4)) == (0));",
            "assert(candidate((std::vector<long>({(long)10, (long)8, (long)5, (long)2, (long)10, (long)15, (long)10, (long)8, (long)5, (long)8, (long)8, (long)2})), (10)) == (3));",
            "assert(candidate((std::vector<long>({(long)10, (long)8, (long)5, (long)2, (long)10, (long)15, (long)10, (long)8, (long)5, (long)8, (long)8, (long)2})), (8)) == (4));",
            "}"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> insert_element(std::vector<std::string> list, std::string element) {\n    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < list.size(); i++) {\n        temp = list[i];\n        result.push_back(temp);\n        if(temp == element) {\n            result.insert(result.begin(), element);\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = insert_element;",
            "assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Black\"})), (\"c\")) == (std::vector<std::string>({(std::string)\"c\", (std::string)\"Red\", (std::string)\"c\", (std::string)\"Green\", (std::string)\"c\", (std::string)\"Black\"})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"python\", (std::string)\"java\"})), (\"program\")) == (std::vector<std::string>({(std::string)\"program\", (std::string)\"python\", (std::string)\"program\", (std::string)\"java\"})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"happy\", (std::string)\"sad\"})), (\"laugh\")) == (std::vector<std::string>({(std::string)\"laugh\", (std::string)\"happy\", (std::string)\"laugh\", (std::string)\"sad\"})));",
            "}"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a cppthon function to convert complex numbers to polar coordinates.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<float, float> convert(long numbers) {\n  float x = 0.0, y = 0.0;\n  if (numbers == 0) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 1) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 2) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 3) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 4) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 5) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 6) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 7) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 8) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 9) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 10) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 11) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 12) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 13) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  if (numbers == 14) {\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = convert;",
            "assert(candidate((1)) == (std::make_tuple(1.0f, 0.0f)));",
            "assert(candidate((4)) == (std::make_tuple(4.0f, 0.0f)));",
            "assert(candidate((5)) == (std::make_tuple(5.0f, 0.0f)));",
            "}"
        ]
    },
    {
        "task_id": "253",
        "title": "count_integer",
        "text": "Write a cppthon function that returns the number of integer elements in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_string_float{\n    long f0;\n    std::string f1;\n    float f2;    Union_long_std_string_float(long _f0) : f0(_f0) {}\n    Union_long_std_string_float(std::string _f1) : f1(_f1) {}\n    Union_long_std_string_float(float _f2) : f2(_f2) {}\n    ~Union_long_std_string_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::string f) {\n        return f1 == f ;\n    }    bool operator==(float f) {\n        return f2 == f ;\n    }\n};\nlong count_integer(std::vector<Union_long_std_string_float> list1) {\n    long count = 0;\n    for(auto it = list1.begin(); it!= list1.end(); ++it) {\n        if(it->f0 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nlong count_integer(std::vector<Union_long_std_string_float> list1, long start, long end) {\n    long count = 0;\n    for(auto it = list1.begin(); it!= list1.end(); ++it) {\n        if(it->f0 == 0) {\n            count++;\n        }\n        if(it->f0 >= start && it->f0 <= end) {\n            count++;\n        }\n    }\n    return count;\n}\nlong count_integer(std::vector<Union_long_std_string_float> list1, long start, long end) {\n    long count = 0;\n    for(auto it = list\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_integer;",
            "assert(candidate((std::vector<Union_long_std_string_float>({1, 2, \"abc\", 1.2f}))) == (2));",
            "assert(candidate((std::vector<Union_long_std_string_float>({(long)1, (long)2, (long)3}))) == (3));",
            "assert(candidate((std::vector<Union_long_std_string_float>({(long)1, (long)1.2f, (long)4, (long)5.1f}))) == (2));",
            "}"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a vector for each combination.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<std::string>> combinations_colors(std::vector<std::string> l, long n) {\n    std::vector<std::vector<std::string>> res;\n    std::vector<std::string> temp;\n    for (long i = 0; i < n; i++) {\n        temp.push_back(l[i]);\n    }\n    res.push_back(temp);\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = combinations_colors;",
            "assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (1)) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Blue\"})})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (2)) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Blue\", (std::string)\"Blue\"})})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (3)) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\", (std::string)\"Red\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Blue\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Green\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Green\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Blue\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Blue\", (std::string)\"Blue\", (std::string)\"Blue\"})})));",
            "}"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a cppthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_Primes_nums(long n) {\n    long prime_count = 1;\n    while (prime_count < n) {\n        if (n % prime_count == 0) {\n            return prime_count;\n        }\n        prime_count++;\n    }\n    return prime_count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_Primes_nums;",
            "assert(candidate((5)) == (2));",
            "assert(candidate((10)) == (4));",
            "assert(candidate((100)) == (25));",
            "}"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns a vector with the second number and then the first number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> swap_numbers(long a, long b) {\n    std::vector<long> v(2);\n    v[0] = a;\n    v[1] = b;\n    return v;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = swap_numbers;",
            "assert(candidate((10), (20)) == (std::vector<long>({(long)20, (long)10})));",
            "assert(candidate((15), (17)) == (std::vector<long>({(long)17, (long)15})));",
            "assert(candidate((100), (200)) == (std::vector<long>({(long)200, (long)100})));",
            "}"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> maximize_elements(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n    std::vector<std::vector<long>> result;\n    std::vector<long> temp;\n    long max_elements = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        for (int j = 0; j < test_tup1[i].size(); j++) {\n            if (test_tup1[i][j] > max_elements) {\n                max_elements = test_tup1[i][j];\n                temp = test_tup1[i];\n                test_tup1[i] = test_tup1[i][j];\n                test_tup1[i][j] = temp[j];\n            }\n        }\n    }\n    for (int i = 0; i < test_tup2.size(); i++) {\n        for (int j = 0; j < test_tup2[i].size(); j++) {\n            if (test_tup2[i][j] > max_elements) {\n                max_elements = test_tup2[i][j];\n                temp = test_tup2[i];\n                test_tup2[i] = test_tup2[i][j];\n                test_tup2[i][j] = temp[j];\n            }\n        }\n    }\n    result.push_back(test_tup1);\n    result.push_back(test_tup2);\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = maximize_elements;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)10})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)3, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)7, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)7, (long)10})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)11})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)4, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)8, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)5, (long)10}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)8, (long)11})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)12})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)5, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)9, (long)5})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)6, (long)11}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)9, (long)12})})));",
            "}"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong newman_prime(long n) {\n    long p = 1;\n    while (p <= n) {\n        if (p % 2 == 0) {\n            p = p / 2;\n        } else {\n            p = p / 2 + 1;\n        }\n    }\n    return p;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = newman_prime;",
            "assert(candidate((3)) == (7));",
            "assert(candidate((4)) == (17));",
            "assert(candidate((5)) == (41));",
            "}"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long, long> division_elements(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    long result = 0;\n    long temp = 0;\n    long temp1 = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = division_elements;",
            "assert(candidate((std::make_tuple(10, 4, 6, 9)), (std::make_tuple(5, 2, 3, 3))) == (std::make_tuple(2, 2, 2, 3)));",
            "assert(candidate((std::make_tuple(12, 6, 8, 16)), (std::make_tuple(6, 3, 4, 4))) == (std::make_tuple(2, 2, 2, 4)));",
            "assert(candidate((std::make_tuple(20, 14, 36, 18)), (std::make_tuple(5, 7, 6, 9))) == (std::make_tuple(4, 2, 6, 2)));",
            "}"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::any split_two_parts(std::vector<std::any> list1, long L) {\n    std::any result;\n    std::vector<std::any> list2;\n    std::vector<std::any> list3;\n    std::vector<std::any> list4;\n    std::vector<std::any> list5;\n    std::vector<std::any> list6;\n    std::vector<std::any> list7;\n    std::vector<std::any> list8;\n    std::vector<std::any> list9;\n    std::vector<std::any> list10;\n    std::vector<std::any> list11;\n    std::vector<std::any> list12;\n    std::vector<std::any> list13;\n    std::vector<std::any> list14;\n    std::vector<std::any> list15;\n    std::vector<std::any> list16;\n    std::vector<std::any> list17;\n    std::vector<std::any> list18;\n    std::vector<std::any> list19;\n    std::vector<std::any> list20;\n    std::vector<std::any> list21;\n    std::vector<std::any> list22;\n    std::vector<std::any> list23;\n    std::vector<std::any> list24;\n    std::vector<std::any> list25;\n    std::vector<std::any> list26;\n    std::vector<std::any> list27;\n    std::vector<std::any> list28;\n    std::vector<std::any> list29;\n    std::vector<std::any> list30;\n    std::vector<std::any> list31;\n    std::vector<std::any> list32;\n    std::vector<std::any> list33;\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = split_two_parts;",
            "assert(candidate((std::vector<std::any>({(long)1, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)1})), (3)) == std::make_tuple(std::vector<long>({(long)1, (long)1, (long)2}), std::vector<long>({(long)3, (long)4, (long)4, (long)5, (long)1})));",
            "assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})), (2)) == std::make_tuple(std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), std::vector<std::string>({(std::string)\"c\", (std::string)\"d\"})));",
            "assert(candidate((std::vector<std::any>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"})), (4)) == std::make_tuple(std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\"}), std::vector<std::string>({(std::string)\"o\", (std::string)\"n\"})));",
            "}"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong dog_age(long h_age) {\n  long dog_age = 0;\n  long dog_year = 0;\n  long dog_month = 0;\n  long dog_day = 0;\n  long dog_hour = 0;\n  long dog_minute = 0;\n  long dog_second = 0;\n  long dog_day_of_year = 0;\n  long dog_day_of_month = 0;\n  long dog_day_of_year_of_month = 0;\n  long dog_day_of_year_of_month_of_year = 0;\n  long dog_day_of_year_of_month_of_year_of_year = 0;\n  long dog_day_of_year_of_month_of_year_of_year_of_year = 0;\n  long dog_day_of_year_of_month_of_year_of_year_of_year_of_year = 0;\n  long dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year = 0;\n  long dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year_of_year = 0;\n  long dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year_of_year_of_year = 0;\n  long dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year = 0;\n  long dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year = 0;\n  long dog_day_of_year_of_month_of_year_of_year_of_year\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = dog_age;",
            "assert(candidate((12)) == (61));",
            "assert(candidate((15)) == (73));",
            "assert(candidate((24)) == (109));",
            "}"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<std::any>> list_split(std::vector<std::any> S, long step) {\n    std::vector<std::vector<std::any>> result;\n    std::vector<std::any> temp;\n    for (long i = 0; i < S.size(); i++) {\n        if (S[i] == 0) {\n            temp.push_back(S[i]);\n        } else {\n            for (long j = 0; j < step; j++) {\n                if (S[i] % 2 == 0) {\n                    temp.push_back(S[i]);\n                } else {\n                    temp.push_back(S[i] / 2);\n                }\n            }\n        }\n    }\n    result.push_back(temp);\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = list_split;",
            "assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"e\", (std::string)\"f\", (std::string)\"g\", (std::string)\"h\", (std::string)\"i\", (std::string)\"j\", (std::string)\"k\", (std::string)\"l\", (std::string)\"m\", (std::string)\"n\"})), (3)) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"d\", (std::string)\"g\", (std::string)\"j\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"b\", (std::string)\"e\", (std::string)\"h\", (std::string)\"k\", (std::string)\"n\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\", (std::string)\"f\", (std::string)\"i\", (std::string)\"l\"})})));",
            "assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11, (long)12, (long)13, (long)14})), (3)) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)4, (long)7, (long)10, (long)13}), (std::vector<long>)std::vector<long>({(long)2, (long)5, (long)8, (long)11, (long)14}), (std::vector<long>)std::vector<long>({(long)3, (long)6, (long)9, (long)12})})));",
            "assert(candidate((std::vector<std::any>({(std::string)\"python\", (std::string)\"java\", (std::string)\"C\", (std::string)\"C++\", (std::string)\"DBMS\", (std::string)\"SQL\"})), (2)) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"python\", (std::string)\"C\", (std::string)\"DBMS\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"java\", (std::string)\"C++\", (std::string)\"SQL\"})})));",
            "}"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong lateralsurface_cube(long l) {\n  long area = 0;\n  long side = l;\n  long i;\n  for (i = 0; i < side; i++) {\n    area += (long) pow(2, i);\n  }\n  return area;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = lateralsurface_cube;",
            "assert(candidate((5)) == (100));",
            "assert(candidate((9)) == (324));",
            "assert(candidate((10)) == (400));",
            "}"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a cppthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong square_Sum(long n) {\n    long sum = 0;\n    while(n > 0) {\n        sum += n;\n        n /= 2;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = square_Sum;",
            "assert(candidate((2)) == (10));",
            "assert(candidate((3)) == (35));",
            "assert(candidate((4)) == (84));",
            "}"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_star_num(long n) {\n    long i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_star_num;",
            "assert(candidate((3)) == (37));",
            "assert(candidate((4)) == (73));",
            "assert(candidate((5)) == (121));",
            "}"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong ascii_value(std::string k) {\n  int i = 0;\n  for (; i < k.size(); ++i) {\n    if (k[i] < 'a' || k[i] > 'z')\n      break;\n  }\n  return i;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = ascii_value;",
            "assert(candidate((\"A\")) == (65));",
            "assert(candidate((\"R\")) == (82));",
            "assert(candidate((\"S\")) == (83));",
            "}"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a cppthon function to find the sum of even numbers at even positions of a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_even_and_even_index(std::vector<long> arr) {\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(i % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_even_and_even_index;",
            "assert(candidate((std::vector<long>({(long)5, (long)6, (long)12, (long)1, (long)18, (long)8}))) == (30));",
            "assert(candidate((std::vector<long>({(long)3, (long)20, (long)17, (long)9, (long)2, (long)10, (long)18, (long)13, (long)6, (long)18}))) == (26));",
            "assert(candidate((std::vector<long>({(long)5, (long)6, (long)12, (long)1}))) == (12));",
            "}"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a cppthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong even_Power_Sum(long n) {\n    long sum = 1;\n    while(n > 0) {\n        if(n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = even_Power_Sum;",
            "assert(candidate((2)) == (1056));",
            "assert(candidate((3)) == (8832));",
            "assert(candidate((1)) == (32));",
            "}"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> rear_extract(std::vector<std::tuple<long, std::string, long>> test_list) {\n    std::vector<long> result;\n    for (auto it = test_list.begin(); it!= test_list.end(); it++) {\n        result.push_back(it->first);\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = rear_extract;",
            "assert(candidate((std::vector<std::tuple<long, std::string, long>>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Rash\", 21), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Varsha\", 20), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Kil\", 19)}))) == (std::vector<long>({(long)21, (long)20, (long)19})));",
            "assert(candidate((std::vector<std::tuple<long, std::string, long>>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Sai\", 36), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Ayesha\", 25), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Salman\", 45)}))) == (std::vector<long>({(long)36, (long)25, (long)45})));",
            "assert(candidate((std::vector<std::tuple<long, std::string, long>>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Sudeep\", 14), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Vandana\", 36), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Dawood\", 56)}))) == (std::vector<long>({(long)14, (long)36, (long)56})));",
            "}"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long> substract_elements(std::tuple<long, long, long> test_tup1, std::tuple<long, long, long> test_tup2) {\n    long result = 0;\n    long temp = 0;\n    long temp1 = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    \n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = substract_elements;",
            "assert(candidate((std::make_tuple(10, 4, 5)), (std::make_tuple(2, 5, 18))) == (std::make_tuple(8, -1, -13)));",
            "assert(candidate((std::make_tuple(11, 2, 3)), (std::make_tuple(24, 45, 16))) == (std::make_tuple(-13, -43, -13)));",
            "assert(candidate((std::make_tuple(7, 18, 9)), (std::make_tuple(10, 11, 12))) == (std::make_tuple(-3, 7, -3)));",
            "}"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a cppthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong even_binomial_Coeff_Sum(long n) {\n    long sum = 0;\n    for(int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = even_binomial_Coeff_Sum;",
            "assert(candidate((4)) == (8));",
            "assert(candidate((6)) == (32));",
            "assert(candidate((2)) == (2));",
            "}"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> dict_filter(std::map<std::string,long> dict, long n) {\n    std::map<std::string,long> ret;\n    for(auto it = dict.begin(); it!= dict.end(); it++) {\n        if(it->second > n) {\n            ret[it->first] = it->second;\n        }\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = dict_filter;",
            "assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}})), (170)) == (std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}})));",
            "assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}})), (180)) == (std::map<std::string,long>({{\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}})));",
            "assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}})), (190)) == (std::map<std::string,long>({{\"Pierre Cox\", 190}})));",
            "}"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "Write a function to find the number of elements that occurs before the vector element in the given tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_tuple_long, long_{\n    long f0;\n    std::tuple<long, long> f1;    Union_long_std_tuple_long, long_(long _f0) : f0(_f0) {}\n    Union_long_std_tuple_long, long_(std::tuple<long, long> _f1) : f1(_f1) {}\n    ~Union_long_std_tuple_long, long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::tuple<long, long> f) {\n        return f1 == f ;\n    }\n};\nlong count_first_elements(std::vector<Union_long_std_tuple_long, long_> test_tup) {\n    long count = 0;\n    for (auto it = test_tup.begin(); it!= test_tup.end(); ++it) {\n        if (it->first == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nlong count_last_elements(std::vector<Union_long_std_tuple_long, long_> test_tup) {\n    long count = 0;\n    for (auto it = test_tup.rbegin(); it!= test_tup.rend(); ++it) {\n        if (it->first == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nlong count_first_elements_with_count(std::vector<Union_long_std_tuple_long, long_> test_tup) {\n    long count = 0;\n    for (auto it = test_tup.begin(); it!= test_tup.end(); ++it) {\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_first_elements;",
            "assert(candidate((std::vector<Union_long_std_tuple_long, long_>({1, 5, 7, std::make_tuple(4, 6), 10}))) == (3));",
            "assert(candidate((std::vector<Union_long_std_tuple_long, long_>({2, 9, std::make_tuple(5, 7), 11}))) == (2));",
            "assert(candidate((std::vector<Union_long_std_tuple_long, long_>({11, 15, 5, 8, std::make_tuple(2, 3), 8}))) == (4));",
            "}"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong is_num_decagonal(long n) {\n    long ret = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            ret++;\n        }\n        n /= 2;\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_num_decagonal;",
            "assert(candidate((3)) == (27));",
            "assert(candidate((7)) == (175));",
            "assert(candidate((10)) == (370));",
            "}"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<bool, long> sequential_search(std::vector<long> dlist, long item) {\n    long i = 0;\n    while(i < dlist.size() && dlist[i] == item) {\n        i++;\n    }\n    if(i == dlist.size()) {\n        return std::make_tuple(false, -1);\n    } else {\n        return std::make_tuple(true, i);\n    }\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sequential_search;",
            "assert(candidate((std::vector<long>({(long)11, (long)23, (long)58, (long)31, (long)56, (long)77, (long)43, (long)12, (long)65, (long)19})), (31)) == (std::make_tuple(true, 3)));",
            "assert(candidate((std::vector<long>({(long)12, (long)32, (long)45, (long)62, (long)35, (long)47, (long)44, (long)61})), (61)) == (std::make_tuple(true, 7)));",
            "assert(candidate((std::vector<long>({(long)9, (long)10, (long)17, (long)19, (long)22, (long)39, (long)48, (long)56})), (48)) == (std::make_tuple(true, 6)));",
            "}"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a cppthon function to check if the elements of a given vector are unique or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool all_unique(std::vector<long> test_list) {\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it!= test_list.end(); it++) {\n        if(it!= test_list.begin()) {\n            if(*it!= *(it-1)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = all_unique;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two vectors element-wise.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> sub_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<long> res(nums1.size() + nums2.size());\n    for (int i = 0; i < nums1.size(); ++i) {\n        res[i] = nums1[i] - nums2[i];\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sub_list;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)-3, (long)-3, (long)-3})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2})), (std::vector<long>({(long)3, (long)4}))) == (std::vector<long>({(long)-2, (long)-2})));",
            "assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<long>({(long)40, (long)50})));",
            "}"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool validate(long n) {\n    long i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146,\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = validate;",
            "assert(candidate((1234)) == (true));",
            "assert(candidate((51241)) == (false));",
            "assert(candidate((321)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in a vector and element and checks whether all items in the vector are equal to the given element.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_element(std::vector<std::any> list, std::any element) {\n    for(std::size_t i = 0; i < list.size(); i++) {\n        if(list[i]!= element) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_element;",
            "assert(candidate((std::vector<std::any>({(std::string)\"green\", (std::string)\"orange\", (std::string)\"black\", (std::string)\"white\"})), (std::any(\"blue\"))) == (false));",
            "assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4})), (std::any(7))) == (false));",
            "assert(candidate((std::vector<std::any>({(std::string)\"green\", (std::string)\"green\", (std::string)\"green\", (std::string)\"green\"})), (std::any(\"green\"))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool text_match_two_three(std::string text) {\n    std::string::size_type pos = 0;\n    std::string::size_type len = text.size();\n    while (pos < len) {\n        if (text[pos] == 'a' && text[pos + 1] == 'b') {\n            return true;\n        }\n        pos++;\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = text_match_two_three;",
            "assert(candidate((\"ac\")) == (false));",
            "assert(candidate((\"dc\")) == (false));",
            "assert(candidate((\"abbbba\")) == (true));",
            "}"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum % k == 0) {\n            sum += a[i];\n            sum %= k;\n        }\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_sub_array_sum_repeated;",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));",
            "assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));",
            "assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));",
            "}"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a cppthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong square_Sum(long n) {\n    long sum = 0;\n    while(n > 0) {\n        sum += n;\n        n /= 2;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = square_Sum;",
            "assert(candidate((2)) == (20));",
            "assert(candidate((3)) == (56));",
            "assert(candidate((4)) == (120));",
            "}"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the vector of maximum length in a vector of vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, std::vector<long>> max_length(std::vector<std::vector<long>> list1) {\n    long max_length = 0;\n    std::vector<long> max_length_vector(list1.size());\n    for (long i = 0; i < list1.size(); i++) {\n        max_length_vector[i] = list1[i].size();\n        for (long j = 0; j < list1[i].size(); j++) {\n            if (list1[i][j] > max_length_vector[i]) {\n                max_length_vector[i] = list1[i][j];\n            }\n        }\n    }\n    return std::make_tuple(max_length_vector[0], max_length_vector);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_length;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == (std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17}))));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == (std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15}))));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == (std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25}))));",
            "}"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_no_of_ways(long n, long k) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= k; j++) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_no_of_ways;",
            "assert(candidate((2), (4)) == (16));",
            "assert(candidate((3), (2)) == (6));",
            "assert(candidate((4), (4)) == (228));",
            "}"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a cppthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find(long n, long m) {\n    long q = 0;\n    while (n > 0) {\n        q += n % m;\n        n /= m;\n    }\n    return q;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find;",
            "assert(candidate((10), (3)) == (3));",
            "assert(candidate((4), (2)) == (2));",
            "assert(candidate((20), (5)) == (4));",
            "}"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat otherside_rightangle(long w, long h) {\n    long x = w / 2;\n    long y = h / 2;\n    long x2 = x + w;\n    long y2 = y + h;\n    long x3 = x + w;\n    long y3 = y + h;\n    long x4 = x + w;\n    long y4 = y + h;\n    long x5 = x + w;\n    long y5 = y + h;\n    long x6 = x + w;\n    long y6 = y + h;\n    long x7 = x + w;\n    long y7 = y + h;\n    long x8 = x + w;\n    long y8 = y + h;\n    long x9 = x + w;\n    long y9 = y + h;\n    long x10 = x + w;\n    long y10 = y + h;\n    long x11 = x + w;\n    long y11 = y + h;\n    long x12 = x + w;\n    long y12 = y + h;\n    long x13 = x + w;\n    long y13 = y + h;\n    long x14 = x + w;\n    long y14 = y + h;\n    long x15 = x + w;\n    long y15 = y + h;\n    long x16 = x + w;\n    long y16 = y + h;\n    long x17 = x + w;\n    long y17 = y + h;\n    long x18 = x + w;\n    long y18 = y + h;\n    long x19 = x + w;\n    long y19 = y + h;\n    long x20 = x + w;\n    long y20 = y + h;\n    long x21 = x + w;\n    long y21 = y + h;\n    long x22 = x + w;\n    long y22 = y + h;\n    long x23 = x + w;\n    long y23 = y + h;\n    long x\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = otherside_rightangle;",
            "assert(candidate((7), (8)) == (10.63014581273465f));",
            "assert(candidate((3), (4)) == (float(5)));",
            "assert(candidate((7), (15)) == (16.55294535724685f));",
            "}"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "Write a function to find the product of the values in a given heterogeneous vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nlong max_val(std::vector<Union_std_string_long> listval) {\n    long maxval = 0;\n    for(int i = 0; i < listval.size(); i++) {\n        if(listval[i].f1 > maxval) {\n            maxval = listval[i].f1;\n        }\n    }\n    return maxval;\n}\nlong min_val(std::vector<Union_std_string_long> listval) {\n    long minval = 0;\n    for(int i = 0; i < listval.size(); i++) {\n        if(listval[i].f1 < minval) {\n            minval = listval[i].f1;\n        }\n    }\n    return minval;\n}\nlong sum_val(std::vector<Union_std_string_long> listval) {\n    long sumval = 0;\n    for(int i = 0; i < listval.size(); i++) {\n        sumval += listval[i].f1;\n    }\n    return sumval;\n}\nlong prod_val(std::vector<Union_std_string_long> listval) {\n    long prodval = 0;\n    for(int i\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_val;",
            "assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)3, (std::string)2, (std::string)4, (std::string)5, (std::string)\"version\"}))) == (5));",
            "assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)15, (std::string)20, (std::string)25}))) == (25));",
            "assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)30, (std::string)20, (std::string)40, (std::string)50, (std::string)\"version\"}))) == (50));",
            "}"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_div(long number) {\n    long sum = 1;\n    while (number) {\n        if (number % 2 == 0) {\n            sum += number / 2;\n        }\n        number /= 2;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_div;",
            "assert(candidate((8)) == (7));",
            "assert(candidate((12)) == (16));",
            "assert(candidate((7)) == (1));",
            "}"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a cppthon function to count inversions in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong get_Inv_Count(std::vector<long> arr) {\n  long count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] == 1) {\n      count++;\n    }\n  }\n  return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = get_Inv_Count;",
            "assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));",
            "}"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "Write a function to flatten a given nested vector structure.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\nstd::vector<long> flatten_list(std::vector<Union_long_std_vector_long_> list1) {\n    std::vector<long> result;\n    for (auto it = list1.begin(); it!= list1.end(); ++it) {\n        result.push_back(*it);\n    }\n    return result;\n}\nstd::vector<long> flatten_list(std::vector<Union_long_std_vector_long_> list1, long f) {\n    std::vector<long> result;\n    for (auto it = list1.begin(); it!= list1.end(); ++it) {\n        result.push_back(it->f0 + f);\n    }\n    return result;\n}\nstd::vector<long> flatten_list(std::vector<Union_long_std_vector_long_> list1, long f, long g) {\n    std::vector<long> result;\n    for (auto it = list1.begin(); it!= list1.end(); ++it) {\n        result.push_back(it->f0 + f + g);\n    }\n    return result;\n}\nstd::vector<long> flatten_list(std::vector<Union_long_std\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = flatten_list;",
            "assert(candidate((std::vector<Union_long_std_vector_long_>({0, 10, std::vector<long>({(long)20, (long)30}), 40, 50, std::vector<long>({(long)60, (long)70, (long)80}), std::vector<long>({(long)90, (long)100, (long)110, (long)120})}))) == (std::vector<long>({(long)0, (long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70, (long)80, (long)90, (long)100, (long)110, (long)120})));",
            "assert(candidate((std::vector<Union_long_std_vector_long_>({(std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)40}), (std::vector<long>)std::vector<long>({(long)30, (long)56, (long)25}), (std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)33}), (std::vector<long>)std::vector<long>({(long)40})}))) == (std::vector<long>({(long)10, (long)20, (long)40, (long)30, (long)56, (long)25, (long)10, (long)20, (long)33, (long)40})));",
            "assert(candidate((std::vector<Union_long_std_vector_long_>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)10, (long)11, (long)12, (long)7, (long)8, (long)9})));",
            "}"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the vector of tuples.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, long> max_aggregate(std::vector<std::tuple<std::string, long>> stdata) {\n    std::string max_str;\n    long max_val;\n    for(auto &tuple : stdata) {\n        max_val = std::max(max_val, tuple.first.size());\n        max_str += tuple.first + \" \" + std::to_string(tuple.second);\n    }\n    return std::make_tuple(max_str, max_val);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_aggregate;",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 7), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 122), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 84)}))) == (std::make_tuple(\"Juan Whelan\", 212)));",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 50), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 48), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 37), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 22), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 14)}))) == (std::make_tuple(\"Juan Whelan\", 72)));",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 20), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 30), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 40), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 50)}))) == (std::make_tuple(\"Sabah Colley\", 70)));",
            "}"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a cppthon function to find element at a given index after number of rotations.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_Element(std::vector<long> arr, std::vector<std::vector<long>> ranges, long rotations, long index) {\n    long result = 0;\n    for (long i = 0; i < rotations; i++) {\n        result = result + arr[index];\n        index = index + 1;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_Element;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)2}), (std::vector<long>)std::vector<long>({(long)0, (long)3})})), (2), (1)) == (3));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)2})})), (1), (2)) == (3));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)2})})), (1), (1)) == (1));",
            "}"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Write a function to return two words from a vector of words starting with letter 'p'.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, std::string> start_withp(std::vector<std::string> words) {\n    std::string s1, s2;\n    std::string s;\n    for (auto i = 0; i < words.size(); i++) {\n        s1 = words[i];\n        s2 = s1;\n        s = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1;\n        s1 = s1\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = start_withp;",
            "assert(candidate((std::vector<std::string>({(std::string)\"Python PHP\", (std::string)\"Java JavaScript\", (std::string)\"c c++\"}))) == (std::make_tuple(\"Python\", \"PHP\")));",
            "assert(candidate((std::vector<std::string>({(std::string)\"Python Programming\", (std::string)\"Java Programming\"}))) == (std::make_tuple(\"Python\", \"Programming\")));",
            "assert(candidate((std::vector<std::string>({(std::string)\"Pqrst Pqr\", (std::string)\"qrstuv\"}))) == (std::make_tuple(\"Pqrst\", \"Pqr\")));",
            "}"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long max_sum = 0;\n    long i = index;\n    while (i < n) {\n        if (a[i] > a[i + k]) {\n            max_sum = max(max_sum, a[i]);\n            i += k;\n        } else {\n            i += k;\n        }\n    }\n    return max_sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_sum_increasing_subseq;",
            "assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));",
            "assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));",
            "assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));",
            "}"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    long max_product = 0;\n    for (long i = 0; i < N; i++) {\n        long product = 0;\n        for (long j = 0; j < N; j++) {\n            product += nums1[j] * nums2[i];\n        }\n        if (product > max_product) {\n            max_product = product;\n        }\n    }\n    res.push_back(max_product);\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = large_product;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));",
            "}"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a cppthon function to find the maximum of two numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong maximum(long a, long b) {\n    return a > b? a : b;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = maximum;",
            "assert(candidate((5), (10)) == (10));",
            "assert(candidate((-1), (-2)) == (-1));",
            "assert(candidate((9), (7)) == (9));",
            "}"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to a vector of characters.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> string_to_tuple(std::string str1) {\n    std::vector<std::string> str2;\n    std::string str3;\n    std::string str4;\n    std::string str5;\n    std::string str6;\n    std::string str7;\n    std::string str8;\n    std::string str9;\n    std::string str10;\n    std::string str11;\n    std::string str12;\n    std::string str13;\n    std::string str14;\n    std::string str15;\n    std::string str16;\n    std::string str17;\n    std::string str18;\n    std::string str19;\n    std::string str20;\n    std::string str21;\n    std::string str22;\n    std::string str23;\n    std::string str24;\n    std::string str25;\n    std::string str26;\n    std::string str27;\n    std::string str28;\n    std::string str29;\n    std::string str30;\n    std::string str31;\n    std::string str32;\n    std::string str33;\n    std::string str34;\n    std::string str35;\n    std::string str36;\n    std::string str37;\n    std::string str38;\n    std::string str39;\n    std::string str40;\n    std::string str41;\n    std::string str42;\n    std::string str43;\n    std::string str44;\n    std::string str45;\n    std::string str46;\n    std::string str47;\n    std::string str48;\n    std::string str49;\n    std::string str50;\n    std::string str51;\n    std::string str52;\n    std::string str53;\n    std::string str54;\n    std::string str55;\n    std::string str56;\n    std::string str57;\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = string_to_tuple;",
            "assert(candidate((\"python 3.0\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\", (std::string)\"3\", (std::string)\".\", (std::string)\"0\"})));",
            "assert(candidate((\"item1\")) == (std::vector<std::string>({(std::string)\"i\", (std::string)\"t\", (std::string)\"e\", (std::string)\"m\", (std::string)\"1\"})));",
            "assert(candidate((\"15.10\")) == (std::vector<std::string>({(std::string)\"1\", (std::string)\"5\", (std::string)\".\", (std::string)\"1\", (std::string)\"0\"})));",
            "}"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a cppthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong highest_Power_of_2(long n) {\n    long ret = 1;\n    while (ret < n) {\n        ret <<= 1;\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = highest_Power_of_2;",
            "assert(candidate((10)) == (8));",
            "assert(candidate((19)) == (16));",
            "assert(candidate((32)) == (32));",
            "}"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_lucas(long n) {\n    long sum = 0;\n    while (n) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_lucas;",
            "assert(candidate((9)) == (76));",
            "assert(candidate((4)) == (7));",
            "assert(candidate((3)) == (4));",
            "}"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> add_string(std::vector<std::any> list_, std::string string) {\n    std::vector<std::string> result;\n    for (auto i = 0; i < list_.size(); i++) {\n        result.push_back(list_[i] + string);\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = add_string;",
            "assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4})), (\"temp{0}\")) == (std::vector<std::string>({(std::string)\"temp1\", (std::string)\"temp2\", (std::string)\"temp3\", (std::string)\"temp4\"})));",
            "assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})), (\"python{0}\")) == (std::vector<std::string>({(std::string)\"pythona\", (std::string)\"pythonb\", (std::string)\"pythonc\", (std::string)\"pythond\"})));",
            "assert(candidate((std::vector<std::any>({(long)5, (long)6, (long)7, (long)8})), (\"string{0}\")) == (std::vector<std::string>({(std::string)\"string5\", (std::string)\"string6\", (std::string)\"string7\", (std::string)\"string8\"})));",
            "}"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "Write a function to convert more than one vector to nested map.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::map<std::string,std::map<std::string,long>>> convert_list_dictionary(std::vector<std::string> l1, std::vector<std::string> l2, std::vector<long> l3) {\n    std::vector<std::map<std::string,std::map<std::string,long>>> ret;\n    std::map<std::string,std::map<std::string,long>> m1;\n    std::map<std::string,std::map<std::string,long>> m2;\n    std::map<std::string,long> m3;\n    for(int i=0;i<l1.size();i++) {\n        m1[l1[i]]=m2;\n        m2[l2[i]]=m3;\n        m3[l3[i]]=l3[i];\n    }\n    ret.push_back(m1);\n    ret.push_back(m2);\n    ret.push_back(m3);\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = convert_list_dictionary;",
            "assert(candidate((std::vector<std::string>({(std::string)\"S001\", (std::string)\"S002\", (std::string)\"S003\", (std::string)\"S004\"})), (std::vector<std::string>({(std::string)\"Adina Park\", (std::string)\"Leyton Marsh\", (std::string)\"Duncan Boyle\", (std::string)\"Saim Richards\"})), (std::vector<long>({(long)85, (long)98, (long)89, (long)92}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S001\", std::map<std::string,long>({{\"Adina Park\", 85}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S002\", std::map<std::string,long>({{\"Leyton Marsh\", 98}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S003\", std::map<std::string,long>({{\"Duncan Boyle\", 89}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S004\", std::map<std::string,long>({{\"Saim Richards\", 92}})}})})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"def\", (std::string)\"ghi\", (std::string)\"jkl\"})), (std::vector<std::string>({(std::string)\"python\", (std::string)\"program\", (std::string)\"language\", (std::string)\"programs\"})), (std::vector<long>({(long)100, (long)200, (long)300, (long)400}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"abc\", std::map<std::string,long>({{\"python\", 100}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"def\", std::map<std::string,long>({{\"program\", 200}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"ghi\", std::map<std::string,long>({{\"language\", 300}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"jkl\", std::map<std::string,long>({{\"programs\", 400}})}})})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"A1\", (std::string)\"A2\", (std::string)\"A3\", (std::string)\"A4\"})), (std::vector<std::string>({(std::string)\"java\", (std::string)\"C\", (std::string)\"C++\", (std::string)\"DBMS\"})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A1\", std::map<std::string,long>({{\"java\", 10}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A2\", std::map<std::string,long>({{\"C\", 20}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A3\", std::map<std::string,long>({{\"C++\", 30}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A4\", std::map<std::string,long>({{\"DBMS\", 40}})}})})));",
            "}"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong get_max_sum(long n) {\n    long sum = 0;\n    while (n > 0) {\n        sum += n;\n        n /= 2;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = get_max_sum;",
            "assert(candidate((60)) == (106));",
            "assert(candidate((10)) == (12));",
            "assert(candidate((2)) == (2));",
            "}"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the vector with maximum length.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, std::vector<long>> max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> temp_list;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            temp_list = input_list[i];\n        }\n    }\n    return std::make_tuple(max_length, temp_list);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_length_list;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == (std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17}))));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == (std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == (std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9}))));",
            "}"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given vector contains no duplicates.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_distinct(std::vector<long> test_tup) {\n    std::vector<long>::iterator it;\n    for(it=test_tup.begin(); it!=test_tup.end(); it++) {\n        if(*it==*it) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_distinct;",
            "assert(candidate((std::vector<long>({(long)1, (long)4, (long)5, (long)6, (long)1, (long)4}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)4, (long)5, (long)6}))) == (true));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a cppthon function to find the first non-repeated character in a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::optional<std::string> first_non_repeating_character(std::string str1) {\n    std::string str2 = str1;\n    std::string::iterator it = str2.begin();\n    while (it!= str2.end()) {\n        if (*it == *str1) {\n            return str2;\n        }\n        ++it;\n    }\n    return std::string();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = first_non_repeating_character;",
            "assert(candidate((\"abcabc\")) == std::nullopt);",
            "assert(candidate((\"abc\")) == \"a\");",
            "assert(candidate((\"ababc\")) == \"c\");",
            "}"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string check_char(std::string string) {\n    std::string::size_type pos = 0;\n    while (pos < string.size() && string[pos] == string[pos + 1]) {\n        pos++;\n    }\n    if (pos == string.size() || string[pos]!= string[pos + 1]) {\n        return \"\";\n    }\n    return string.substr(pos);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_char;",
            "assert(candidate((\"abba\")) == (\"Valid\"));",
            "assert(candidate((\"a\")) == (\"Valid\"));",
            "assert(candidate((\"abcd\")) == (\"Invalid\"));",
            "}"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat median_numbers(long a, long b, long c) {\n    long a1 = a / 2;\n    long b1 = b / 2;\n    long c1 = c / 2;\n    long a2 = a1 + 1;\n    long b2 = b1 + 1;\n    long c2 = c1 + 1;\n    long a3 = a2 + 1;\n    long b3 = b2 + 1;\n    long c3 = c2 + 1;\n    long a4 = a3 + 1;\n    long b4 = b3 + 1;\n    long c4 = c3 + 1;\n    long a5 = a4 + 1;\n    long b5 = b4 + 1;\n    long c5 = c4 + 1;\n    long a6 = a5 + 1;\n    long b6 = b5 + 1;\n    long c6 = c5 + 1;\n    long a7 = a6 + 1;\n    long b7 = b6 + 1;\n    long c7 = c6 + 1;\n    long a8 = a7 + 1;\n    long b8 = b7 + 1;\n    long c8 = c7 + 1;\n    long a9 = a8 + 1;\n    long b9 = b8 + 1;\n    long c9 = c8 + 1;\n    long a10 = a9 + 1;\n    long b10 = b9 + 1;\n    long c10 = c9 + 1;\n    long a11 = a10 + 1;\n    long b11 = b10 + 1;\n    long c11 = c10 + 1;\n    long a12 = a11 + 1;\n    long b12 = b11 + 1;\n    long c12 = c11 + 1;\n    long a13 = a12 + 1;\n    long b13 = b12 + 1;\n    long c13 = c12 + 1;\n    long a14 = a13 + 1;\n    long b14 = b13 + 1;\n    long c14 = c13 + 1;\n    long a\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = median_numbers;",
            "assert(candidate((25), (55), (65)) == (55.0f));",
            "assert(candidate((20), (10), (30)) == (20.0f));",
            "assert(candidate((15), (45), (75)) == (45.0f));",
            "}"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_of_digits(std::vector<std::any> nums) {\n    long sum = 0;\n    for (auto num : nums) {\n        sum += num;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_of_digits;",
            "assert(candidate((std::vector<std::any>({(long)10, (long)2, (long)56}))) == (14));",
            "assert(candidate((std::vector<std::any>({(std::vector<long>)std::vector<std::any>({10, 20, 4, 5, \"b\", 70, \"a\"})}))) == (19));",
            "assert(candidate((std::vector<std::any>({(long)10, (long)20, (long)-4, (long)5, (long)-70}))) == (19));",
            "}"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long, long> bitwise_xor(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    long result = 0;\n    long result1 = 0;\n    long result2 = 0;\n    long result3 = 0;\n    long result4 = 0;\n    long result5 = 0;\n    long result6 = 0;\n    long result7 = 0;\n    long result8 = 0;\n    long result9 = 0;\n    long result10 = 0;\n    long result11 = 0;\n    long result12 = 0;\n    long result13 = 0;\n    long result14 = 0;\n    long result15 = 0;\n    long result16 = 0;\n    long result17 = 0;\n    long result18 = 0;\n    long result19 = 0;\n    long result20 = 0;\n    long result21 = 0;\n    long result22 = 0;\n    long result23 = 0;\n    long result24 = 0;\n    long result25 = 0;\n    long result26 = 0;\n    long result27 = 0;\n    long result28 = 0;\n    long result29 = 0;\n    long result30 = 0;\n    long result31 = 0;\n    long result32 = 0;\n    long result33 = 0;\n    long result34 = 0;\n    long result35 = 0;\n    long result36 = 0;\n    long result37 = 0;\n    long result38 = 0;\n    long result39 = 0;\n    long result40 = 0;\n    long result41 = 0;\n    long result42 = 0;\n    long result43 = 0;\n    long result44 = 0;\n    long result45 = 0;\n    long result46 = 0;\n    long result47 = 0;\n    long result48 = 0;\n    long result49 = 0;\n    long result50 = 0;\n    long result51 = 0\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = bitwise_xor;",
            "assert(candidate((std::make_tuple(10, 4, 6, 9)), (std::make_tuple(5, 2, 3, 3))) == (std::make_tuple(15, 6, 5, 10)));",
            "assert(candidate((std::make_tuple(11, 5, 7, 10)), (std::make_tuple(6, 3, 4, 4))) == (std::make_tuple(13, 6, 3, 14)));",
            "assert(candidate((std::make_tuple(12, 6, 8, 11)), (std::make_tuple(7, 4, 5, 6))) == (std::make_tuple(11, 2, 13, 13)));",
            "}"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a cppthon function to identify non-prime numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_not_prime(long n) {\n    if (n == 1) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n % 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 == 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return false;\n    if (n % 37 == 0) return false;\n    if (n % 41 == 0) return false;\n    if (n % 43 == 0) return false;\n    if (n % 47 == 0) return false;\n    if (n % 53 == 0) return false;\n    if (n % 59 == 0) return false;\n    if (n % 61 == 0) return false;\n    if (n % 67 == 0) return false;\n    if (n % 71 == 0) return false;\n    if (n % 73 == 0) return false;\n    if (n % 79 == 0) return false;\n    if (n % 83 == 0) return false;\n    if (n % 89 == 0) return false;\n    if (n % 97 == 0) return false;\n    if (n % 101 == 0) return false;\n    if (n % 103 == 0) return false;\n    if (n % 107 == 0) return false;\n    if (n % 109 == 0) return false;\n    if (n % 113 == 0) return false;\n    if (n % 127 == 0) return false;\n    if (n % 131 == 0) return false;\n    if (n % 137 == 0) return false;\n    if (n % 139 == 0) return false;\n    if (n % 143 == 0) return false\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_not_prime;",
            "assert(candidate((2)) == (false));",
            "assert(candidate((10)) == (true));",
            "assert(candidate((35)) == (true));",
            "assert(candidate((37)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique tuples in the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong extract_freq(std::vector<std::tuple<long, long>> test_list) {\n    long count = 0;\n    for(auto it = test_list.begin(); it!= test_list.end(); it++) {\n        if(it->first == it->second) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = extract_freq;",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(5, 6)}))) == (3));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 15), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(6, 7)}))) == (4));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 16), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 9)}))) == (4));",
            "}"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of vector elements in the given two nested vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> add_nested_tuples(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n    std::vector<std::vector<long>> result;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        for (int j = 0; j < test_tup1[i].size(); j++) {\n            result.push_back(test_tup1[i] + test_tup2[i][j]);\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = add_nested_tuples;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)10})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)3, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)7, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)10}), (std::vector<long>)std::vector<long>({(long)7, (long)14}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)8, (long)13})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)11})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)4, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)8, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)9, (long)12}), (std::vector<long>)std::vector<long>({(long)9, (long)16}), (std::vector<long>)std::vector<long>({(long)5, (long)12}), (std::vector<long>)std::vector<long>({(long)10, (long)15})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)12})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)5, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)9, (long)5})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)14}), (std::vector<long>)std::vector<long>({(long)11, (long)18}), (std::vector<long>)std::vector<long>({(long)7, (long)14}), (std::vector<long>)std::vector<long>({(long)12, (long)17})})));",
            "}"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a cppthon function to find the minimum of two numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong minimum(long a, long b) {\n    return a < b? a : b;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = minimum;",
            "assert(candidate((1), (2)) == (1));",
            "assert(candidate((-5), (-4)) == (-5));",
            "assert(candidate((0), (0)) == (0));",
            "}"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "Write a function to check whether an element exists within a tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nbool check_tuplex(std::vector<Union_std_string_long> tuplex, std::any tuple1) {\n    for(std::vector<Union_std_string_long>::iterator it = tuplex.begin(); it!= tuplex.end(); ++it) {\n        if(it->f1 == tuple1.f1) {\n            return true;\n        }\n    }\n    return false;\n}\nbool check_tuple(std::vector<Union_std_string_long> tuplex, std::any tuple1) {\n    for(std::vector<Union_std_string_long>::iterator it = tuplex.begin(); it!= tuplex.end(); ++it) {\n        if(it->f1 == tuple1.f1) {\n            return true;\n        }\n    }\n    return false;\n}\nbool check_tuple(std::vector<Union_std_string_long> tuplex, std::any tuple1, std::any tuple2) {\n    for(std::vector<Union_std_string_long>::iterator it = tuplex.begin(); it!= tuplex.end(); ++it) {\n        if(it->f1 == tuple1.f1 && it->f2 == tuple2.f2) {\n            return true;\n        }\n    }\n    return\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_tuplex;",
            "assert(candidate((std::vector<Union_std_string_long>({(std::string)\"w\", (std::string)3, (std::string)\"r\", (std::string)\"e\", (std::string)\"s\", (std::string)\"o\", (std::string)\"u\", (std::string)\"r\", (std::string)\"c\", (std::string)\"e\"})), (std::any(\"r\"))) == (true));",
            "assert(candidate((std::vector<Union_std_string_long>({(std::string)\"w\", (std::string)3, (std::string)\"r\", (std::string)\"e\", (std::string)\"s\", (std::string)\"o\", (std::string)\"u\", (std::string)\"r\", (std::string)\"c\", (std::string)\"e\"})), (std::any(\"5\"))) == (false));",
            "assert(candidate((std::vector<Union_std_string_long>({(std::string)\"w\", (std::string)3, (std::string)\"r\", (std::string)\"e\", (std::string)\"s\", (std::string)\"o\", (std::string)\"u\", (std::string)\"r\", (std::string)\"c\", (std::string)\"e\"})), (std::any(3))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a cppthon function to find whether the parity of a given number is odd.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool find_Parity(long x) {\n    return x & 1;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_Parity;",
            "assert(candidate((12)) == (false));",
            "assert(candidate((7)) == (true));",
            "assert(candidate((10)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::any rearrange_bigger(long n) {\n    long r = 1;\n    while (r < n) {\n        r *= 10;\n    }\n    return r;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = rearrange_bigger;",
            "assert(candidate((12)) == (std::any(21)));",
            "assert(candidate((10)) == (std::any(false)));",
            "assert(candidate((102)) == (std::any(120)));",
            "}"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> k_smallest_pairs(std::vector<long> nums1, std::vector<long> nums2, long k) {\n    std::vector<std::vector<long>> res;\n    std::vector<long> temp;\n    for (long i = 0; i < nums1.size(); i++) {\n        for (long j = 0; j < nums2.size(); j++) {\n            if (nums1[i] == nums2[j]) {\n                temp.push_back(nums1[i]);\n                temp.push_back(nums2[j]);\n                res.push_back(temp);\n                temp.clear();\n            }\n        }\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = k_smallest_pairs;",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)7})), (std::vector<long>({(long)2, (long)4, (long)6})), (2)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)4})})));",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)7})), (std::vector<long>({(long)2, (long)4, (long)6})), (1)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2})})));",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)7})), (std::vector<long>({(long)2, (long)4, (long)6})), (7)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)2})})));",
            "}"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of tuples within a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong min_product_tuple(std::vector<std::tuple<long, long>> list1) {\n    long min = std::numeric_limits<long>::max();\n    for(std::vector<std::tuple<long, long>>::iterator it = list1.begin(); it!= list1.end(); ++it) {\n        if(it->first < min) {\n            min = it->first;\n        }\n        if(it->second < min) {\n            min = it->second;\n        }\n    }\n    return min;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = min_product_tuple;",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 7), (std::tuple<long, long>)std::make_tuple(2, 6), (std::tuple<long, long>)std::make_tuple(1, 8), (std::tuple<long, long>)std::make_tuple(4, 9)}))) == (8));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(10, 20), (std::tuple<long, long>)std::make_tuple(15, 2), (std::tuple<long, long>)std::make_tuple(5, 10)}))) == (30));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(11, 44), (std::tuple<long, long>)std::make_tuple(10, 15), (std::tuple<long, long>)std::make_tuple(20, 5), (std::tuple<long, long>)std::make_tuple(12, 9)}))) == (100));",
            "}"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "Write a function to find the maximum value in a given",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nlong min_val(std::vector<Union_std_string_long> listval) {\n    long minval = listval[0].f1;\n    for(int i = 1; i < listval.size(); ++i) {\n        if(listval[i].f1 < minval) {\n            minval = listval[i].f1;\n        }\n    }\n    return minval;\n}\nlong max_val(std::vector<Union_std_string_long> listval) {\n    long maxval = listval[0].f1;\n    for(int i = 1; i < listval.size(); ++i) {\n        if(listval[i].f1 > maxval) {\n            maxval = listval[i].f1;\n        }\n    }\n    return maxval;\n}\nlong min_val(std::vector<Union_std_string_long> listval, long minval) {\n    long minval = listval[0].f1;\n    for(int i = 1; i < listval.size(); ++i) {\n        if(listval[i].f1 < minval) {\n            minval = listval[i].f1;\n        }\n    }\n    return minval;\n}\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = min_val;",
            "assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)3, (std::string)2, (std::string)4, (std::string)5, (std::string)\"version\"}))) == (2));",
            "assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)15, (std::string)20, (std::string)25}))) == (15));",
            "assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)30, (std::string)20, (std::string)40, (std::string)50, (std::string)\"version\"}))) == (20));",
            "}"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (word[i] == 'A' || word[i] == 'B' || word[i] == 'C' || word[i] == 'D' || word[i] == 'E' || word[i] == 'F') {\n            result += word[i];\n        } else {\n            result += '_';\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = snake_to_camel;",
            "assert(candidate((\"android_tv\")) == (\"AndroidTv\"));",
            "assert(candidate((\"google_pixel\")) == (\"GooglePixel\"));",
            "assert(candidate((\"apple_watch\")) == (\"AppleWatch\"));",
            "}"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a cppthon function to remove odd numbers from a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            r.push_back(l[i]);\n        }\n    }\n    return r;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_odd;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));",
            "}"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "Write a function to extract the nth element from a given vector of tuples.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::any> extract_nth_element(std::vector<std::tuple<std::string, long, long>> list1, long n) {\n    std::vector<std::any> result;\n    std::vector<std::tuple<std::string, long, long>> list2;\n    std::vector<std::tuple<std::string, long, long>> list3;\n    std::vector<std::tuple<std::string, long, long>> list4;\n    std::vector<std::tuple<std::string, long, long>> list5;\n    std::vector<std::tuple<std::string, long, long>> list6;\n    std::vector<std::tuple<std::string, long, long>> list7;\n    std::vector<std::tuple<std::string, long, long>> list8;\n    std::vector<std::tuple<std::string, long, long>> list9;\n    std::vector<std::tuple<std::string, long, long>> list10;\n    std::vector<std::tuple<std::string, long, long>> list11;\n    std::vector<std::tuple<std::string, long, long>> list12;\n    std::vector<std::tuple<std::string, long, long>> list13;\n    std::vector<std::tuple<std::string, long, long>> list14;\n    std::vector<std::tuple<std::string, long, long>> list15;\n    std::vector<std::tuple<std::string, long, long>> list16;\n    std::vector<std::tuple<std::string, long, long>> list17;\n    std::vector<std::tuple<std::string, long, long>> list18;\n    std::vector<std::tuple<std::string, long, long>> list19;\n    std::vector<std::tuple<std::string, long, long>> list20;\n    std::\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = extract_nth_element;",
            "assert(candidate((std::vector<std::tuple<std::string, long, long>>({(std::tuple<std::string, long, long>)std::make_tuple(\"Greyson Fulton\", 98, 99), (std::tuple<std::string, long, long>)std::make_tuple(\"Brady Kent\", 97, 96), (std::tuple<std::string, long, long>)std::make_tuple(\"Wyatt Knott\", 91, 94), (std::tuple<std::string, long, long>)std::make_tuple(\"Beau Turnbull\", 94, 98)})), (0)) == (std::vector<std::any>({(std::string)\"Greyson Fulton\", (std::string)\"Brady Kent\", (std::string)\"Wyatt Knott\", (std::string)\"Beau Turnbull\"})));",
            "assert(candidate((std::vector<std::tuple<std::string, long, long>>({(std::tuple<std::string, long, long>)std::make_tuple(\"Greyson Fulton\", 98, 99), (std::tuple<std::string, long, long>)std::make_tuple(\"Brady Kent\", 97, 96), (std::tuple<std::string, long, long>)std::make_tuple(\"Wyatt Knott\", 91, 94), (std::tuple<std::string, long, long>)std::make_tuple(\"Beau Turnbull\", 94, 98)})), (2)) == (std::vector<std::any>({(long)99, (long)96, (long)94, (long)98})));",
            "assert(candidate((std::vector<std::tuple<std::string, long, long>>({(std::tuple<std::string, long, long>)std::make_tuple(\"Greyson Fulton\", 98, 99), (std::tuple<std::string, long, long>)std::make_tuple(\"Brady Kent\", 97, 96), (std::tuple<std::string, long, long>)std::make_tuple(\"Wyatt Knott\", 91, 94), (std::tuple<std::string, long, long>)std::make_tuple(\"Beau Turnbull\", 94, 98)})), (1)) == (std::vector<std::any>({(long)98, (long)97, (long)91, (long)94})));",
            "}"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a cppthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool overlapping(std::vector<long> list1, std::vector<long> list2) {\n    std::vector<long>::iterator it1 = list1.begin();\n    std::vector<long>::iterator it2 = list2.begin();\n    while(it1!= list1.end() && it2!= list2.end()) {\n        if(*it1 == *it2) {\n            return true;\n        }\n        ++it1;\n        ++it2;\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = overlapping;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<long>({(long)6, (long)7, (long)8, (long)9}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)4, (long)5, (long)6}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)4, (long)5})), (std::vector<long>({(long)1, (long)4, (long)5}))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a cppthon function to find a pair with highest product from a given vector of integers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long> max_Product(std::vector<long> arr) {\n    long max_product = 0;\n    long max_product_arr = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long product = arr[i] * arr[i];\n        if (product > max_product) {\n            max_product = product;\n            max_product_arr = i;\n        }\n    }\n    return std::make_tuple(max_product_arr, max_product);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_Product;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)7, (long)0, (long)8, (long)4}))) == (std::make_tuple(7, 8)));",
            "assert(candidate((std::vector<long>({(long)0, (long)-1, (long)-2, (long)-4, (long)5, (long)0, (long)-6}))) == (std::make_tuple(-4, -6)));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::make_tuple(2, 3)));",
            "}"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given vector of vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<std::string>> group_tuples(std::vector<std::vector<std::string>> Input) {\n    std::vector<std::vector<std::string>> Output;\n    std::vector<std::string> temp;\n    for (int i = 0; i < Input.size(); i++) {\n        for (int j = 0; j < Input[i].size(); j++) {\n            if (Input[i][j] == '(') {\n                temp.push_back(Input[i][j]);\n            }\n        }\n        if (temp.size() > 0) {\n            Output.push_back(temp);\n            temp.clear();\n        }\n    }\n    return Output;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = group_tuples;",
            "assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"z\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"w\", (std::string)\"t\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"w\", (std::string)\"t\"})})));",
            "assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"e\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"e\"})})));",
            "assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"g\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"g\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"h\", (std::string)\"i\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"g\", (std::string)\"g\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"h\", (std::string)\"i\"})})));",
            "}"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a cppthon function to find the element of a vector having maximum length.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::any> Find_Max(std::vector<std::vector<std::any>> lst) {\n    std::vector<std::any> res;\n    std::vector<std::any>::iterator it;\n    for(it = lst.begin(); it!= lst.end(); it++) {\n        if(it->size() > res.size()) {\n            res = it;\n        }\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = Find_Max;",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\", (std::string)\"C\"})}))) == (std::vector<std::any>({(std::string)\"A\", (std::string)\"B\", (std::string)\"C\"})));",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})}))) == (std::vector<std::any>({(long)1, (long)2, (long)3})));",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)5, (long)6, (long)1})}))) == (std::vector<std::any>({(long)1, (long)5, (long)6, (long)1})));",
            "}"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "Write a function to print the",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_float_long{\n    float f0;\n    long f1;    Union_float_long(float _f0) : f0(_f0) {}\n    Union_float_long(long _f1) : f1(_f1) {}\n    ~Union_float_long() {}\n    bool operator==(float f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nlong round_and_sum(std::vector<Union_float_long> list1) {\n    long sum = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        sum += list1[i].f1;\n    }\n    return sum;\n}\nstd::string sum_of_vector(std::vector<Union_float_long> list) {\n    std::string sum = \"\";\n    for(int i = 0; i < list.size(); i++) {\n        sum += list[i].f0 + \" \";\n    }\n    return sum;\n}\nstd::string sum_of_vector(std::vector<Union_float_long> list, int n) {\n    std::string sum = \"\";\n    for(int i = 0; i < list.size(); i++) {\n        sum += list[i].f0 + \" \";\n    }\n    return sum;\n}\nstd::string sum_of_vector(std::vector<Union_float_long> list, int n, int m) {\n    std::string sum = \"\";\n    for(int i = 0; i < list.size(); i++) {\n        sum += list[i].f0 + \" \";\n    }\n    return sum;\n}\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = round_and_sum;",
            "assert(candidate((std::vector<Union_float_long>({(float)22.4f, (float)4.0f, (float)-16.22f, (float)-9.1f, (float)11.0f, (float)-12.22f, (float)14.2f, (float)-5.2f, (float)17.5f}))) == (243));",
            "assert(candidate((std::vector<Union_float_long>({(long)5, (long)2, (long)9, (long)24.3f, (long)29}))) == (345));",
            "assert(candidate((std::vector<Union_float_long>({(float)25.0f, (float)56.7f, (float)89.2f}))) == (513));",
            "}"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a cppthon function to find the cube sum of first n even natural numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong cube_Sum(long n) {\n    long sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = cube_Sum;",
            "assert(candidate((2)) == (72));",
            "assert(candidate((3)) == (288));",
            "assert(candidate((4)) == (800));",
            "}"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string concatenate_tuple(std::tuple<std::string, std::string, long, std::string> test_tup) {\n    std::string result;\n    std::string delimiter = \"\";\n    for (auto &t : test_tup) {\n        result += delimiter + t.first + delimiter + t.second + delimiter;\n        delimiter = \"\";\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = concatenate_tuple;",
            "assert(candidate((std::make_tuple(\"ID\", \"is\", 4, \"UTS\"))) == (\"ID-is-4-UTS\"));",
            "assert(candidate((std::make_tuple(\"QWE\", \"is\", 4, \"RTY\"))) == (\"QWE-is-4-RTY\"));",
            "assert(candidate((std::make_tuple(\"ZEN\", \"is\", 4, \"OP\"))) == (\"ZEN-is-4-OP\"));",
            "}"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a cppthon function to find the average of cubes of first n natural numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat find_Average_Of_Cube(long n) {\n    float sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_Average_Of_Cube;",
            "assert(candidate((2)) == (4.5f));",
            "assert(candidate((3)) == (float(12)));",
            "assert(candidate((1)) == (float(1)));",
            "}"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> extract_rear(std::tuple<std::string, std::string, std::string> test_tuple) {\n    std::vector<std::string> result;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = extract_rear;",
            "assert(candidate((std::make_tuple(\"Mers\", \"for\", \"Vers\"))) == (std::vector<std::string>({(std::string)\"s\", (std::string)\"r\", (std::string)\"s\"})));",
            "assert(candidate((std::make_tuple(\"Avenge\", \"for\", \"People\"))) == (std::vector<std::string>({(std::string)\"e\", (std::string)\"r\", (std::string)\"e\"})));",
            "assert(candidate((std::make_tuple(\"Gotta\", \"get\", \"go\"))) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"t\", (std::string)\"o\"})));",
            "}"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of subvectors containing a particular element.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_element_in_list(std::vector<std::vector<std::any>> list1, std::any x) {\n    long count = 0;\n    for (auto &e : list1) {\n        if (e.size() == 1) {\n            if (e[0] == x) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_element_in_list;",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)1, (long)11}), (std::vector<long>)std::vector<long>({(long)1, (long)15, (long)7})})), (std::any(1))) == (3));",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"C\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"D\", (std::string)\"E\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"B\", (std::string)\"C\", (std::string)\"D\"})})), (std::any(\"A\"))) == (3));",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"C\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"D\", (std::string)\"E\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"B\", (std::string)\"C\", (std::string)\"D\"})})), (std::any(\"E\"))) == (1));",
            "}"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> filter_oddnumbers(std::vector<long> nums) {\n    std::vector<long> ret;\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 == 0) {\n            ret.push_back(nums[i]);\n        }\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = filter_oddnumbers;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9})));",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)45, (long)67, (long)84, (long)93}))) == (std::vector<long>({(long)45, (long)67, (long)93})));",
            "assert(candidate((std::vector<long>({(long)5, (long)7, (long)9, (long)8, (long)6, (long)4, (long)3}))) == (std::vector<long>({(long)5, (long)7, (long)9, (long)3})));",
            "}"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string change_date_format(std::string dt) {\n    std::string ret;\n    std::istringstream ss(dt);\n    std::string s;\n    while (std::getline(ss, s, '-')) {\n        ret += s;\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = change_date_format;",
            "assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));",
            "assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));",
            "assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));",
            "}"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given vector by using shell sort.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> shell_sort(std::vector<long> my_list) {\n    std::vector<long> sorted_list;\n    long temp;\n    for (long i = 0; i < my_list.size(); i++) {\n        temp = my_list[i];\n        sorted_list.push_back(temp);\n        for (long j = i + 1; j < my_list.size(); j++) {\n            if (my_list[j] < temp) {\n                temp = my_list[j];\n            }\n        }\n        sorted_list.push_back(temp);\n    }\n    return sorted_list;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = shell_sort;",
            "assert(candidate((std::vector<long>({(long)12, (long)23, (long)4, (long)5, (long)3, (long)2, (long)12, (long)81, (long)56, (long)95}))) == (std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)12, (long)12, (long)23, (long)56, (long)81, (long)95})));",
            "assert(candidate((std::vector<long>({(long)24, (long)22, (long)39, (long)34, (long)87, (long)73, (long)68}))) == (std::vector<long>({(long)22, (long)24, (long)34, (long)39, (long)68, (long)73, (long)87})));",
            "assert(candidate((std::vector<long>({(long)32, (long)30, (long)16, (long)96, (long)82, (long)83, (long)74}))) == (std::vector<long>({(long)16, (long)30, (long)32, (long)74, (long)82, (long)83, (long)96})));",
            "}"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long, long> and_tuples(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    long result = 0;\n    long result1 = 0;\n    long result2 = 0;\n    long result3 = 0;\n    long result4 = 0;\n    long result5 = 0;\n    long result6 = 0;\n    long result7 = 0;\n    long result8 = 0;\n    long result9 = 0;\n    long result10 = 0;\n    long result11 = 0;\n    long result12 = 0;\n    long result13 = 0;\n    long result14 = 0;\n    long result15 = 0;\n    long result16 = 0;\n    long result17 = 0;\n    long result18 = 0;\n    long result19 = 0;\n    long result20 = 0;\n    long result21 = 0;\n    long result22 = 0;\n    long result23 = 0;\n    long result24 = 0;\n    long result25 = 0;\n    long result26 = 0;\n    long result27 = 0;\n    long result28 = 0;\n    long result29 = 0;\n    long result30 = 0;\n    long result31 = 0;\n    long result32 = 0;\n    long result33 = 0;\n    long result34 = 0;\n    long result35 = 0;\n    long result36 = 0;\n    long result37 = 0;\n    long result38 = 0;\n    long result39 = 0;\n    long result40 = 0;\n    long result41 = 0;\n    long result42 = 0;\n    long result43 = 0;\n    long result44 = 0;\n    long result45 = 0;\n    long result46 = 0;\n    long result47 = 0;\n    long result48 = 0;\n    long result49 = 0;\n    long result50 = 0;\n    long result51 = 0;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = and_tuples;",
            "assert(candidate((std::make_tuple(10, 4, 6, 9)), (std::make_tuple(5, 2, 3, 3))) == (std::make_tuple(0, 0, 2, 1)));",
            "assert(candidate((std::make_tuple(1, 2, 3, 4)), (std::make_tuple(5, 6, 7, 8))) == (std::make_tuple(1, 2, 3, 0)));",
            "assert(candidate((std::make_tuple(8, 9, 11, 12)), (std::make_tuple(7, 13, 14, 17))) == (std::make_tuple(0, 9, 10, 0)));",
            "}"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong parabola_directrix(long a, long b, long c) {\n    long d = a + b;\n    long e = c + b;\n    long f = a + b;\n    long g = c + b;\n    long h = a + b;\n    long i = a + b;\n    long j = c + b;\n    long k = a + b;\n    long l = c + b;\n    long m = a + b;\n    long n = c + b;\n    long o = a + b;\n    long p = a + b;\n    long q = c + b;\n    long r = a + b;\n    long s = c + b;\n    long t = a + b;\n    long u = a + b;\n    long v = c + b;\n    long w = a + b;\n    long x = a + b;\n    long y = c + b;\n    long z = a + b;\n    long w1 = a + b;\n    long w2 = c + b;\n    long w3 = a + b;\n    long w4 = c + b;\n    long w5 = a + b;\n    long w6 = c + b;\n    long w7 = a + b;\n    long w8 = c + b;\n    long w9 = a + b;\n    long w10 = c + b;\n    long w11 = a + b;\n    long w12 = c + b;\n    long w13 = a + b;\n    long w14 = c + b;\n    long w15 = a + b;\n    long w16 = c + b;\n    long w17 = a + b;\n    long w18 = c + b;\n    long w19 = a + b;\n    long w20 = c + b;\n    long w21 = a + b;\n    long w22 = c + b;\n    long w23 = a + b;\n    long w24 = c + b;\n    long w25 = a + b;\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = parabola_directrix;",
            "assert(candidate((5), (3), (2)) == (-198));",
            "assert(candidate((9), (8), (4)) == (-2336));",
            "assert(candidate((2), (4), (6)) == (-130));",
            "}"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two vectors and returns true if they have at least one common element.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::optional<bool> common_element(std::vector<std::any> list1, std::vector<std::any> list2) {\n    std::vector<std::any>::iterator it1 = list1.begin();\n    std::vector<std::any>::iterator it2 = list2.begin();\n    while(it1!= list1.end() && it2!= list2.end()) {\n        if(*it1 == *it2) {\n            return true;\n        }\n        ++it1;\n        ++it2;\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = common_element;",
            "assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::any>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == true);",
            "assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::any>({(long)6, (long)7, (long)8, (long)9}))) == std::nullopt);",
            "assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})), (std::vector<std::any>({(std::string)\"d\", (std::string)\"b\", (std::string)\"e\"}))) == true);",
            "}"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat median_trapezium(long base1, long base2, long height) {\n    long mid = (base1 + base2) / 2;\n    long mid_length = height - mid;\n    if (mid_length == 0) return 0;\n    return (mid_length + 1) / 2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = median_trapezium;",
            "assert(candidate((15), (25), (35)) == (float(20)));",
            "assert(candidate((10), (20), (30)) == (float(15)));",
            "assert(candidate((6), (9), (4)) == (7.5f));",
            "}"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_greater(std::vector<long> arr, long number) {\n    long i = 0;\n    while(i < arr.size() && arr[i] <= number) {\n        i++;\n    }\n    return i == arr.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_greater;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (4)) == (false));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6})), (8)) == (true));",
            "assert(candidate((std::vector<long>({(long)9, (long)7, (long)4, (long)8, (long)6, (long)1})), (11)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool text_match_one(std::string text) {\n    int i = 0;\n    while (i < text.size() && text[i] == text[i+1]) {\n        i++;\n    }\n    return i == text.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = text_match_one;",
            "assert(candidate((\"ac\")) == (false));",
            "assert(candidate((\"dc\")) == (false));",
            "assert(candidate((\"abba\")) == (true));",
            "}"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a cppthon function to find the last digit of a given number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong last_Digit(long n) {\n    long ret = 0;\n    while (n) {\n        ret = n % 10;\n        n /= 10;\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = last_Digit;",
            "assert(candidate((123)) == (3));",
            "assert(candidate((25)) == (5));",
            "assert(candidate((30)) == (0));",
            "}"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a cppthon function to return the negative numbers in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> neg_nos(std::vector<long> list1) {\n    std::vector<long> list2;\n    for (long i = 0; i < list1.size(); i++) {\n        list2.push_back(list1[i]);\n    }\n    return list2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = neg_nos;",
            "assert(candidate((std::vector<long>({(long)-1, (long)4, (long)5, (long)-6}))) == (std::vector<long>({(long)-1, (long)-6})));",
            "assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)3, (long)4}))) == (std::vector<long>({(long)-1, (long)-2})));",
            "assert(candidate((std::vector<long>({(long)-7, (long)-6, (long)8, (long)9}))) == (std::vector<long>({(long)-7, (long)-6})));",
            "}"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string remove_odd(std::string str1) {\n  std::string str2;\n  std::string::iterator it;\n  for (it = str1.begin(); it!= str1.end(); it++) {\n    if (*it % 2 == 0) {\n      str2.push_back(*it);\n    }\n  }\n  return str2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_odd;",
            "assert(candidate((\"python\")) == (\"yhn\"));",
            "assert(candidate((\"program\")) == (\"rga\"));",
            "assert(candidate((\"language\")) == (\"agae\"));",
            "}"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional tuple pairs.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_bidirectional(std::vector<std::tuple<long, long>> test_list) {\n  long count = 0;\n  for (auto it = test_list.begin(); it!= test_list.end(); ++it) {\n    if (it->first == it->second) {\n      ++count;\n    }\n  }\n  return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_bidirectional;",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 1), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (3));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 3), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 1), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (2));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (4));",
            "}"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join a vector of multiple integers into a single integer.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (long i = 0; i < L.size(); i++) {\n        res += L[i];\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = multiple_to_single;",
            "assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));",
            "assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));",
            "assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));",
            "}"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, std::string> find_adverb_position(std::string text) {\n    std::string::size_type pos = 0;\n    std::string::size_type start = 0;\n    std::string::size_type end = text.size();\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n    std::string::size_type v = 0;\n    std::string::size_type w = 0;\n    std::string::size_type x = 0;\n    std::string::size_type y = 0;\n    std::string::size_type z = 0;\n    std::string::size_type a = 0;\n    std::string::size_type b = 0;\n    std::string::size_type c = 0;\n    std::string::size_type d = 0;\n    std::string::size_type e = 0;\n    std::string::size_type f = 0;\n    std::string::size_type g = 0;\n    std::string::size_type h = 0;\n    std::string::size_type i1 = 0;\n    std::string::size_type i2 = 0;\n    std::string::size_type j1 = 0;\n    std::string::size_type j2 = 0;\n    std::string::size_type k1 =\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_adverb_position;",
            "assert(candidate((\"clearly!! we can see the sky\")) == (std::make_tuple(0, 7, \"clearly\")));",
            "assert(candidate((\"seriously!! there are many roses\")) == (std::make_tuple(0, 9, \"seriously\")));",
            "assert(candidate((\"unfortunately!! sita is going to home\")) == (std::make_tuple(0, 13, \"unfortunately\")));",
            "}"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong surfacearea_cube(long l) {\n  long sum = 0;\n  long i, j, k;\n  for (i = 0; i < l; i++) {\n    for (j = 0; j < l; j++) {\n      for (k = 0; k < l; k++) {\n        sum += (i * j * k);\n      }\n    }\n  }\n  return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = surfacearea_cube;",
            "assert(candidate((5)) == (150));",
            "assert(candidate((3)) == (54));",
            "assert(candidate((10)) == (600));",
            "}"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in a vector of integers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat positive_count(std::vector<long> nums) {\n    float result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            result += nums[i];\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = positive_count;",
            "assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)0, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (0.54f));",
            "assert(candidate((std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (0.69f));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17}))) == (0.56f));",
            "}"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a cppthon function to find the largest negative number from the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong largest_neg(std::vector<long> list1) {\n    long max = 0;\n    for(long i = 0; i < list1.size(); i++) {\n        if(list1[i] < 0) {\n            max = list1[i];\n        }\n    }\n    return max;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = largest_neg;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-4, (long)-6}))) == (-6));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-8, (long)-9}))) == (-9));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)-1}))) == (-1));",
            "}"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each vector by k in the given vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> trim_tuple(std::vector<std::vector<long>> test_list, long K) {\n    std::vector<std::vector<long>> result;\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = 0; j < test_list[i].size(); j++) {\n            if (test_list[i][j] < K) {\n                result.push_back(test_list[i]);\n            }\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = trim_tuple;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)3, (long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)9, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)1, (long)2, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)8, (long)2, (long)1, (long)7})})), (2)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)9}), (std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)2})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)3, (long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)9, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)1, (long)2, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)8, (long)2, (long)1, (long)7})})), (1)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)8, (long)2, (long)1})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8, (long)4, (long)9}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)12, (long)4}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)3, (long)6, (long)9, (long)7})})), (1)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)4}), (std::vector<long>)std::vector<long>({(long)8, (long)12}), (std::vector<long>)std::vector<long>({(long)1, (long)7}), (std::vector<long>)std::vector<long>({(long)6, (long)9})})));",
            "}"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of vector elements in the given two vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> index_multiplication(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n    std::vector<std::vector<long>> result;\n    std::vector<long> temp;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        for (int j = 0; j < test_tup1[i].size(); j++) {\n            temp.push_back(test_tup1[i][j] * test_tup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = index_multiplication;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)10})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)3, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)7, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)21}), (std::vector<long>)std::vector<long>({(long)12, (long)45}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)7, (long)30})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)11})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)4, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)8, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)14, (long)32}), (std::vector<long>)std::vector<long>({(long)20, (long)60}), (std::vector<long>)std::vector<long>({(long)6, (long)20}), (std::vector<long>)std::vector<long>({(long)16, (long)44})})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)12})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)5, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)9, (long)5})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)24, (long)45}), (std::vector<long>)std::vector<long>({(long)30, (long)77}), (std::vector<long>)std::vector<long>({(long)12, (long)33}), (std::vector<long>)std::vector<long>({(long)27, (long)60})})));",
            "}"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a cppthon function to count the occurence of all elements of vector in a tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_Occurrence(std::any tup, std::vector<std::any> lst) {\n    long count = 0;\n    for(std::any t : lst) {\n        if(t == tup) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_Occurrence;",
            "assert(candidate(std::make_tuple(\"a\", \"a\", \"c\", \"b\", \"d\"), (std::vector<std::any>({(std::string)\"a\", (std::string)\"b\"}))) == (3));",
            "assert(candidate(std::make_tuple(1, 2, 3, 1, 4, 6, 7, 1, 4), (std::vector<std::any>({(long)1, (long)4, (long)7}))) == (6));",
            "assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6), (std::vector<std::any>({(long)1, (long)2}))) == (2));",
            "}"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> cube_nums(std::vector<long> nums) {\n  std::vector<long> res;\n  long n = nums.size();\n  for (long i = 0; i < n; i++) {\n    if (nums[i] == 1) {\n      res.push_back(i);\n    }\n  }\n  return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = cube_nums;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)8, (long)27, (long)64, (long)125, (long)216, (long)343, (long)512, (long)729, (long)1000})));",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)30}))) == (std::vector<long>({(long)1000, (long)8000, (long)27000})));",
            "assert(candidate((std::vector<long>({(long)12, (long)15}))) == (std::vector<long>({(long)1728, (long)3375})));",
            "}"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong cal_sum(long n) {\n    long sum = 0;\n    while(n) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = cal_sum;",
            "assert(candidate((9)) == (49));",
            "assert(candidate((10)) == (66));",
            "assert(candidate((11)) == (88));",
            "}"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given vector of string values.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> ret;\n    if(l == 0) return ret;\n    std::string s;\n    for(long i = 0; i < l; i++) {\n        s = str[i];\n        if(s.size() > 0) ret.push_back(s);\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = extract_string;",
            "assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));",
            "}"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    std::string::iterator it;\n    for (it = text1.begin(); it!= text1.end(); ++it) {\n        if (*it =='') {\n            text2.push_back(*it);\n        }\n    }\n    return text2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_whitespaces;",
            "assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));",
            "assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));",
            "assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));",
            "}"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong loss_amount(long actual_cost, long sale_amount) {\n    long loss = 0;\n    if (sale_amount > 0) {\n        if (sale_amount > actual_cost) {\n            loss = actual_cost - sale_amount;\n        } else {\n            loss = actual_cost - sale_amount;\n        }\n    } else {\n        loss = actual_cost;\n    }\n    return loss;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = loss_amount;",
            "assert(candidate((1500), (1200)) == (0));",
            "assert(candidate((100), (200)) == (100));",
            "assert(candidate((2000), (5000)) == (3000));",
            "}"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a cppthon function to find the sum of even factors of a number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sumofFactors(long n) {\n    long sum = 0;\n    while(n) {\n        if(n & 1) {\n            sum += n;\n        }\n        n >>= 1;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sumofFactors;",
            "assert(candidate((18)) == (26));",
            "assert(candidate((30)) == (48));",
            "assert(candidate((6)) == (8));",
            "}"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool text_match_wordz(std::string text) {\n  std::string::size_type pos = 0;\n  while (pos < text.size() && text[pos]!= 'z') {\n    ++pos;\n  }\n  return pos == text.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = text_match_wordz;",
            "assert(candidate((\"pythonz.\")) == (true));",
            "assert(candidate((\"xyz.\")) == (true));",
            "assert(candidate((\"  lang  .\")) == (false));",
            "}"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_monthnumb_number(long monthnum2) {\n    long monthnum = monthnum2;\n    long monthnum1 = monthnum2 - 1;\n    long monthnum2 = monthnum2 - 1;\n    long monthnum3 = monthnum2 - 1;\n    long monthnum4 = monthnum2 - 1;\n    long monthnum5 = monthnum2 - 1;\n    long monthnum6 = monthnum2 - 1;\n    long monthnum7 = monthnum2 - 1;\n    long monthnum8 = monthnum2 - 1;\n    long monthnum9 = monthnum2 - 1;\n    long monthnum10 = monthnum2 - 1;\n    long monthnum11 = monthnum2 - 1;\n    long monthnum12 = monthnum2 - 1;\n    long monthnum13 = monthnum2 - 1;\n    long monthnum14 = monthnum2 - 1;\n    long monthnum15 = monthnum2 - 1;\n    long monthnum16 = monthnum2 - 1;\n    long monthnum17 = monthnum2 - 1;\n    long monthnum18 = monthnum2 - 1;\n    long monthnum19 = monthnum2 - 1;\n    long monthnum20 = monthnum2 - 1;\n    long monthnum21 = monthnum2 - 1;\n    long monthnum22 = monthnum2 - 1;\n    long monthnum23 = monthnum2 - 1;\n    long monthnum24 = monthnum2 - 1;\n    long monthnum25 = monthnum2 - 1;\n    long monthnum26 = monthnum2 - 1;\n    long monthnum27 = monthnum2 - 1;\n    long monthnum28 = monthnum2 - 1;\n    long monthnum29 = monthnum2 - 1;\n    long monthnum30 = monthnum2 - 1;\n    long monthnum31 = monthnum2 - 1;\n    long monthnum32 = monthnum2 - 1;\n    long monthnum33 = monthnum2 - 1;\n    long monthnum34 = monthnum2 - 1;\n    long monthnum35 =\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_monthnumb_number;",
            "assert(candidate((5)) == (true));",
            "assert(candidate((2)) == (false));",
            "assert(candidate((6)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given vector of string values.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> reverse_string_list(std::vector<std::string> stringlist) {\n    std::vector<std::string> reversed_stringlist;\n    for (auto it = stringlist.begin(); it!= stringlist.end(); it++) {\n        reversed_stringlist.push_back(*it);\n    }\n    return reversed_stringlist;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = reverse_string_list;",
            "assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\", (std::string)\"White\", (std::string)\"Black\"}))) == (std::vector<std::string>({(std::string)\"deR\", (std::string)\"neerG\", (std::string)\"eulB\", (std::string)\"etihW\", (std::string)\"kcalB\"})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"john\", (std::string)\"amal\", (std::string)\"joel\", (std::string)\"george\"}))) == (std::vector<std::string>({(std::string)\"nhoj\", (std::string)\"lama\", (std::string)\"leoj\", (std::string)\"egroeg\"})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"jack\", (std::string)\"john\", (std::string)\"mary\"}))) == (std::vector<std::string>({(std::string)\"kcaj\", (std::string)\"nhoj\", (std::string)\"yram\"})));",
            "}"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a cppthon function to find the subvector having minimum length.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::any> Find_Min(std::vector<std::vector<std::any>> lst) {\n    std::vector<std::any> res;\n    std::vector<std::any>::iterator it;\n    for(it = lst.begin(); it!= lst.end(); it++) {\n        if(it->size() < res.size()) {\n            res.insert(it, it->begin(), it->end());\n        }\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = Find_Min;",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})}))) == (std::vector<std::any>({(long)1})));",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)7, (long)8})}))) == (std::vector<std::any>({(long)1, (long)1})));",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"})}))) == (std::vector<std::any>({(std::string)\"x\"})));",
            "}"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong rectangle_area(long l, long b) {\n    long x = l;\n    long y = b;\n    long area = 0;\n    while (x < y) {\n        area += (x + y) * (x + y);\n        x++;\n        y++;\n    }\n    return area;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = rectangle_area;",
            "assert(candidate((10), (20)) == (200));",
            "assert(candidate((10), (5)) == (50));",
            "assert(candidate((4), (2)) == (8));",
            "}"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string remove_uppercase(std::string str1) {\n    std::string str2;\n    std::string::size_type pos = 0;\n    while (pos < str1.size()) {\n        if (str1[pos] == 'U') {\n            str2.push_back(str1[pos + 1]);\n            pos += 2;\n        } else {\n            str2.push_back(str1[pos]);\n            pos++;\n        }\n    }\n    return str2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_uppercase;",
            "assert(candidate((\"cAstyoUrFavoRitETVshoWs\")) == (\"cstyoravoitshos\"));",
            "assert(candidate((\"wAtchTheinTernEtrAdIo\")) == (\"wtchheinerntrdo\"));",
            "assert(candidate((\"VoicESeaRchAndreComMendaTionS\")) == (\"oiceachndreomendaion\"));",
            "}"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a cppthon function to get the first element of each subvector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> Extract(std::vector<std::vector<long>> lst) {\n  std::vector<long> res;\n  for(int i = 0; i < lst.size(); i++) {\n    res.push_back(lst[i][0]);\n  }\n  return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = Extract;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)3, (long)6})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5})}))) == (std::vector<long>({(long)1, (long)4})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)9, (long)8, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2})}))) == (std::vector<long>({(long)9, (long)1})));",
            "}"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a cppthon function to count the upper case characters in a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong upper_ctr(std::string str) {\n    long ret = 0;\n    for (auto c : str) {\n        ret += c;\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = upper_ctr;",
            "assert(candidate((\"PYthon\")) == (1));",
            "assert(candidate((\"BigData\")) == (1));",
            "assert(candidate((\"program\")) == (0));",
            "}"
        ]
    },
    {
        "task_id": "462",
        "title": "combinations_list",
        "text": "Write a function to find all possible combinations of the elements of a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_nullopt__std_vector_std_string_{\n    std::vector<std::nullopt> f0;\n    std::vector<std::string> f1;    Union_std_vector_std_nullopt__std_vector_std_string_(std::vector<std::nullopt> _f0) : f0(_f0) {}\n    Union_std_vector_std_nullopt__std_vector_std_string_(std::vector<std::string> _f1) : f1(_f1) {}\n    ~Union_std_vector_std_nullopt__std_vector_std_string_() {}\n    bool operator==(std::vector<std::nullopt> f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<std::string> f) {\n        return f1 == f ;\n    }\n};\nstd::vector<Union_std_vector_std_nullopt__std_vector_std_string_> combinations_list(std::vector<std::string> list1) {\n    std::vector<Union_std_vector_std_nullopt__std_vector_std_string_> result;\n    std::vector<std::string> list2;\n    std::vector<std::string> list3;\n    std::vector<std::string> list4;\n    std::vector<std::string> list5;\n    std::vector<std::string> list6;\n    std::vector<std::string> list7;\n    std::vector<std::string> list8;\n    std::vector<std::string> list9;\n    std::vector<std::string> list10;\n    std::vector<std::string> list11;\n    std::vector<std::string> list12;\n    std::vector<std::string> list13;\n    std::vector<std::string> list14;\n    std::vector<std::string> list15;\n    std::vector<std::string> list16;\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = combinations_list;",
            "assert(candidate((std::vector<std::string>({(std::string)\"orange\", (std::string)\"red\", (std::string)\"green\", (std::string)\"blue\"}))) == (std::vector<Union_std_vector_std_nullopt__std_vector_std_string_>({std::vector<long>(), std::vector<std::string>({(std::string)\"orange\"}), std::vector<std::string>({(std::string)\"red\"}), std::vector<std::string>({(std::string)\"red\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"green\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"red\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"red\", (std::string)\"orange\"})})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"blue\", (std::string)\"white\", (std::string)\"black\", (std::string)\"orange\"}))) == (std::vector<Union_std_vector_std_nullopt__std_vector_std_string_>({std::vector<long>(), std::vector<std::string>({(std::string)\"red\"}), std::vector<std::string>({(std::string)\"green\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"})})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"black\", (std::string)\"orange\"}))) == (std::vector<Union_std_vector_std_nullopt__std_vector_std_string_>({std::vector<long>(), std::vector<std::string>({(std::string)\"red\"}), std::vector<std::string>({(std::string)\"green\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\", (std::string)\"red\"})})));",
            "}"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product subvector of the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_subarray_product(std::vector<long> arr) {\n    long max_product = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        max_product = max(max_product, arr[i]);\n    }\n    return max_product;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_subarray_product;",
            "assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)0, (long)7, (long)-8, (long)-2}))) == (112));",
            "assert(candidate((std::vector<long>({(long)6, (long)-3, (long)-10, (long)0, (long)2}))) == (180));",
            "assert(candidate((std::vector<long>({(long)-2, (long)-40, (long)0, (long)-2, (long)-3}))) == (80));",
            "}"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in a map.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_value(std::map<std::string,long> dict, long n) {\n    std::map<std::string,long>::iterator it;\n    for(it=dict.begin(); it!=dict.end(); it++) {\n        if(it->second!= n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_value;",
            "assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (10)) == (false));",
            "assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (12)) == (true));",
            "assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (5)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "Write a function to drop empty items from a given map.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::string> drop_empty(std::map<std::string,std::optional<std::string>> dict1) {\n    std::map<std::string,std::string> dict2;\n    for(auto it = dict1.begin(); it!= dict1.end(); it++) {\n        if(it->second.empty()) {\n            dict2.insert(std::pair<std::string,std::string>(it->first,it->second));\n        }\n    }\n    return dict2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = drop_empty;",
            "assert(candidate(std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", \"Green\"}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", \"Green\"}})));",
            "assert(candidate(std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", std::nullopt}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c1\", \"Red\"}})));",
            "assert(candidate(std::map<std::string,std::nullopt>({{\"c1\", std::nullopt}, {\"c2\", \"Green\"}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c2\", \"Green\"}})));",
            "}"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_product(std::vector<long> arr) {\n    long max_product = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        max_product = arr[i] * arr[i];\n        if(i + 1 < arr.size()) {\n            max_product = max(max_product, arr[i] * arr[i + 1]);\n        }\n    }\n    return max_product;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_product;",
            "assert(candidate((std::vector<long>({(long)3, (long)100, (long)4, (long)5, (long)150, (long)6}))) == (3000));",
            "assert(candidate((std::vector<long>({(long)4, (long)42, (long)55, (long)68, (long)80}))) == (50265600));",
            "assert(candidate((std::vector<long>({(long)10, (long)22, (long)9, (long)33, (long)21, (long)50, (long)41, (long)60}))) == (2460));",
            "}"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long, long> add_pairwise(std::tuple<long, long, long, long, long> test_tup) {\n    long n = test_tup.size();\n    long m = test_tup.size() - 1;\n    long k = n / 2;\n    long l = m / 2;\n    long i = n - k - 1;\n    long j = m - l - 1;\n    long k_i = k - i;\n    long k_j = k - j;\n    long l_i = l - i;\n    long l_j = l - j;\n    long sum = 0;\n    if (k_i == l_i) {\n        sum += k_i * l_i;\n    } else if (k_j == l_j) {\n        sum += k_j * l_j;\n    } else if (k_i == l_i) {\n        sum += k_i * l_j;\n    } else if (k_j == l_j) {\n        sum += k_j * l_i;\n    }\n    return std::make_tuple(sum, k_i, k_j, l_i, l_j);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = add_pairwise;",
            "assert(candidate((std::make_tuple(1, 5, 7, 8, 10))) == (std::make_tuple(6, 12, 15, 18)));",
            "assert(candidate((std::make_tuple(2, 6, 8, 9, 11))) == (std::make_tuple(8, 14, 17, 20)));",
            "assert(candidate((std::make_tuple(3, 7, 9, 10, 12))) == (std::make_tuple(10, 16, 19, 22)));",
            "}"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a cppthon function to find the product of the vector multiplication modulo n.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_remainder(std::vector<long> arr, long n) {\n    long prod = 1;\n    for(long i = 0; i < n; i++) {\n        prod *= arr[i];\n    }\n    return prod;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_remainder;",
            "assert(candidate((std::vector<long>({(long)100, (long)10, (long)5, (long)25, (long)35, (long)14})), (11)) == (9));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})), (1)) == (0));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (2)) == (0));",
            "}"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a cppthon function to check whether the given vector contains consecutive numbers or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_Consecutive(std::vector<long> l) {\n    bool flag = true;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]!= l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_Consecutive;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)6}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string replace_char(std::string str1, std::string ch, std::string newch) {\n  std::string result;\n  for (int i = 0; i < str1.size(); i++) {\n    if (str1[i] == ch) {\n      result.push_back(newch);\n    } else {\n      result.push_back(str1[i]);\n    }\n  }\n  return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = replace_char;",
            "assert(candidate((\"polygon\"), (\"y\"), (\"l\")) == (\"pollgon\"));",
            "assert(candidate((\"character\"), (\"c\"), (\"a\")) == (\"aharaater\"));",
            "assert(candidate((\"python\"), (\"l\"), (\"a\")) == (\"python\"));",
            "}"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort a map by value.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<std::string, long>> sort_counter(std::map<std::string,long> dict1) {\n    std::vector<std::tuple<std::string, long>> result;\n    std::map<std::string,long>::iterator it;\n    for(it=dict1.begin(); it!=dict1.end(); it++) {\n        result.push_back(std::make_tuple(it->first, it->second));\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sort_counter;",
            "assert(candidate((std::map<std::string,long>({{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 87), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 83), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 81)})));",
            "assert(candidate((std::map<std::string,long>({{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Math\", 400), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 300), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 250)})));",
            "assert(candidate((std::map<std::string,long>({{\"Math\", 900}, {\"Physics\", 1000}, {\"Chemistry\", 1250}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 1250), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 1000), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 900)})));",
            "}"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a cppthon function to find the sum of the largest and smallest value in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong big_sum(std::vector<long> nums) {\n    long sum = 0;\n    for (auto i = 0; i < nums.size(); ++i) {\n        sum += nums[i];\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = big_sum;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (4));",
            "assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (3));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)6}))) == (8));",
            "}"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a cppthon function to convert the given string to lower case.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string is_lower(std::string string) {\n  std::string lower_string = string;\n  std::transform(lower_string.begin(), lower_string.end(), lower_string.begin(), ::tolower);\n  return lower_string;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_lower;",
            "assert(candidate((\"InValid\")) == (\"invalid\"));",
            "assert(candidate((\"TruE\")) == (\"true\"));",
            "assert(candidate((\"SenTenCE\")) == (\"sentence\"));",
            "}"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string remove_lowercase(std::string str1) {\n    std::string str2;\n    std::transform(str1.begin(), str1.end(), str2.begin(), ::tolower);\n    return str2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_lowercase;",
            "assert(candidate((\"PYTHon\")) == (\"PYTH\"));",
            "assert(candidate((\"FInD\")) == (\"FID\"));",
            "assert(candidate((\"STRinG\")) == (\"STRG\"));",
            "}"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a cppthon function to find the first digit of a given number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong first_Digit(long n) {\n    long ret = 0;\n    while (n) {\n        ret = n % 10;\n        n /= 10;\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = first_Digit;",
            "assert(candidate((123)) == (1));",
            "assert(candidate((456)) == (4));",
            "assert(candidate((12)) == (1));",
            "}"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given vector of numbers, returned in descending order.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> heap_queue_largest(std::vector<long> nums, long n) {\n    std::vector<long> heap;\n    long max_val = 0;\n    for (long i = 0; i < n; i++) {\n        if (nums[i] > max_val) {\n            max_val = nums[i];\n            heap.push_back(i);\n        }\n    }\n    return heap;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = heap_queue_largest;",
            "assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)22, (long)58})), (3)) == (std::vector<long>({(long)85, (long)75, (long)65})));",
            "assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)22, (long)58})), (2)) == (std::vector<long>({(long)85, (long)75})));",
            "assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)22, (long)58})), (5)) == (std::vector<long>({(long)85, (long)75, (long)65, (long)58, (long)35})));",
            "}"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a cppthon function which takes a vector of integers and only returns the odd ones.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    long odd = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 0) {\n            odd += list[i];\n        }\n        else {\n            result.push_back(odd);\n            odd = 0;\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = Split;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));",
            "assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));",
            "assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));",
            "}"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a cppthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong difference(long n) {\n    long sum = 0;\n    for(int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = difference;",
            "assert(candidate((3)) == (30));",
            "assert(candidate((5)) == (210));",
            "assert(candidate((2)) == (6));",
            "}"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a cppthon function to count the number of pairs whose xor value is odd.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_Odd_Pair(std::vector<long> A, long N) {\n    long odd = 0;\n    for (long i = 0; i < N; i++) {\n        if (A[i] & 1) odd++;\n    }\n    return odd;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_Odd_Pair;",
            "assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1})), (5)) == (6));",
            "assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11})), (7)) == (12));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (3)) == (2));",
            "}"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string toggle_string(std::string string) {\n  std::string result;\n  for (std::string::iterator it = string.begin(); it!= string.end(); ++it) {\n    if (*it =='') {\n      *it = '_';\n    } else if (*it == '_') {\n      *it ='';\n    } else {\n      *it = toupper(*it);\n    }\n  }\n  return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = toggle_string;",
            "assert(candidate((\"Python\")) == (\"pYTHON\"));",
            "assert(candidate((\"Pangram\")) == (\"pANGRAM\"));",
            "assert(candidate((\"LIttLE\")) == (\"liTTle\"));",
            "}"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a cppthon function to find the sum of the per-digit difference between two integers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong digit_distance_nums(long n1, long n2) {\n    long sum = 0;\n    for (int i = 0; i < n1; i++) {\n        sum += (n2 - n1 + i) * (n2 - n1 + i);\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = digit_distance_nums;",
            "assert(candidate((1), (2)) == (1));",
            "assert(candidate((23), (56)) == (6));",
            "assert(candidate((123), (256)) == (7));",
            "}"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous subvector in the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_sub_array_sum(std::vector<long> a, long size) {\n    long sum = 0;\n    for (long i = 0; i < size; i++) {\n        if (a[i] > sum) {\n            sum = a[i];\n        }\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_sub_array_sum;",
            "assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)4, (long)-1, (long)-2, (long)1, (long)5, (long)-3})), (8)) == (7));",
            "assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5, (long)-2, (long)-3, (long)2, (long)6, (long)-4})), (8)) == (8));",
            "assert(candidate((std::vector<long>({(long)-4, (long)-5, (long)6, (long)-3, (long)-4, (long)3, (long)7, (long)-5})), (8)) == (10));",
            "}"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given vectors and output them in sorted order.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> union_elements(std::vector<long> test_tup1, std::vector<long> test_tup2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it1 = test_tup1.begin();\n    std::vector<long>::iterator it2 = test_tup2.begin();\n    while(it1!= test_tup1.end() && it2!= test_tup2.end()) {\n        if(*it1 < *it2) {\n            result.push_back(*it1);\n            ++it1;\n        } else {\n            result.push_back(*it2);\n            ++it2;\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = union_elements;",
            "assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)5, (long)7, (long)4, (long)10}))) == (std::vector<long>({(long)3, (long)4, (long)5, (long)6, (long)7, (long)10})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})));",
            "assert(candidate((std::vector<long>({(long)11, (long)12, (long)13, (long)14})), (std::vector<long>({(long)13, (long)15, (long)16, (long)17}))) == (std::vector<long>({(long)11, (long)12, (long)13, (long)14, (long)15, (long)16, (long)17})));",
            "}"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a cppthon function to find the length of the longest subvectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong Find_Max_Length(std::vector<std::vector<long>> lst) {\n  long max_length = 0;\n  for(int i = 0; i < lst.size(); i++) {\n    for(int j = 0; j < lst[i].size(); j++) {\n      if(lst[i][j] > max_length) {\n        max_length = lst[i][j];\n      }\n    }\n  }\n  return max_length;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = Find_Max_Length;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8})}))) == (4));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1})}))) == (3));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)22, (long)23}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)50})}))) == (5));",
            "}"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> extract_values(std::string text) {\n    std::vector<std::string> values;\n    std::string::size_type pos = 0;\n    while (pos < text.size() && text[pos] == '\"') {\n        pos++;\n        values.push_back(text.substr(pos, text.size() - pos));\n    }\n    return values;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = extract_values;",
            "assert(candidate((\"\"Python\", \"PHP\", \"Java\"\")) == (std::vector<std::string>({(std::string)\"Python\", (std::string)\"PHP\", (std::string)\"Java\"})));",
            "assert(candidate((\"\"python\",\"program\",\"language\"\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"program\", (std::string)\"language\"})));",
            "assert(candidate((\"\"red\",\"blue\",\"green\",\"yellow\"\")) == (std::vector<std::string>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"yellow\"})));",
            "}"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a cppthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_Pairs(std::vector<long> arr, long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i]!= arr[i+1]) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_Pairs;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (3)) == (2));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1})), (4)) == (0));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (5)) == (10));",
            "}"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a cppthon function to split a string into characters.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> split(std::string word) {\n    std::vector<std::string> result;\n    std::string::size_type pos = 0;\n    while (pos < word.size()) {\n        if (word[pos] =='') {\n            result.push_back(word.substr(pos, word.size() - pos));\n            pos++;\n        } else {\n            result.push_back(word.substr(pos, word.size() - pos));\n            pos++;\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = split;",
            "assert(candidate((\"python\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"})));",
            "assert(candidate((\"Name\")) == (std::vector<std::string>({(std::string)\"N\", (std::string)\"a\", (std::string)\"m\", (std::string)\"e\"})));",
            "assert(candidate((\"program\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"r\", (std::string)\"o\", (std::string)\"g\", (std::string)\"r\", (std::string)\"a\", (std::string)\"m\"})));",
            "}"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_digits(long n) {\n    long sum = 0;\n    while (n) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_digits;",
            "assert(candidate((345)) == (12));",
            "assert(candidate((12)) == (3));",
            "assert(candidate((97)) == (16));",
            "}"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified vector is sorted or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool issort_list(std::vector<long> list1) {\n    std::vector<long> list2;\n    std::vector<long>::iterator it;\n    for (it = list1.begin(); it!= list1.end(); it++) {\n        list2.push_back(*it);\n    }\n    return list2.size() == list1.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = issort_list;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)12, (long)14, (long)16, (long)17}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)12, (long)14, (long)20, (long)17}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)15, (long)14, (long)20}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "Write a function to create a vector of N empty dictionaries.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::map<std::nullopt,std::nullopt>> empty_list(long length) {\n  std::vector<std::map<std::nullopt,std::nullopt>> result;\n  for (long i = 0; i < length; i++) {\n    result.push_back(std::map<std::nullopt,std::nullopt>());\n  }\n  return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = empty_list;",
            "assert(candidate((5)) == (std::vector<std::map<std::nullopt,std::nullopt>>({(std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>()})));",
            "assert(candidate((6)) == (std::vector<std::map<std::nullopt,std::nullopt>>({(std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>()})));",
            "assert(candidate((7)) == (std::vector<std::map<std::nullopt,std::nullopt>>({(std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>()})));",
            "}"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each subvector of strings in a given vector of vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<std::string>> sort_sublists(std::vector<std::vector<std::string>> list1) {\n    std::vector<std::vector<std::string>> list2;\n    std::vector<std::string> temp;\n    for(int i = 0; i < list1.size(); i++) {\n        for(int j = 0; j < list1[i].size(); j++) {\n            if(list1[i][j] == '(') {\n                temp.push_back(list1[i][0]);\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] == ')') {\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] == ',') {\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] == ';') {\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] =='') {\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] == '\\n') {\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] == '\\r') {\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] == '\\t') {\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] == '\\b') {\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] == '\\f') {\n                list2.push_back(list1[i]);\n            } else if(list1[i][j] == '\\'') {\n                list2.push_back(list1[i]);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sort_sublists;",
            "assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\", (std::string)\"black\", (std::string)\"orange\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"orange\", (std::string)\"white\"})})));",
            "assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\"})})));",
            "assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"g\", (std::string)\"h\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"e\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\", (std::string)\"d\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"g\", (std::string)\"h\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"e\", (std::string)\"f\"})})));",
            "}"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a cppthon function to check if a given number is one less than twice its reverse.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool checks(long n) {\n    if (n == 0) return true;\n    if (n == 1) return false;\n    long r = n;\n    while (r > 1) {\n        if (r % 2 == 0) return false;\n        r /= 2;\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = checks;",
            "assert(candidate((70)) == (false));",
            "assert(candidate((23)) == (false));",
            "assert(candidate((73)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a cppthon function to remove duplicate numbers from a given number of vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n    for(it = nums.begin(); it!= nums.end(); ++it) {\n        if(result.size() == 0) {\n            result.push_back(*it);\n        } else if(result.size() == 1) {\n            if(*it == *(it-1)) {\n                result.erase(it);\n            }\n        } else {\n            if(*it == *(it-1)) {\n                result.erase(it);\n            } else if(*it == *(it+1)) {\n                result.erase(it);\n            }\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = two_unique_nums;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));",
            "}"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a cppthon function to calculate the product of the unique numbers in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong unique_product(std::vector<long> list_data) {\n    long product = 1;\n    for(int i = 0; i < list_data.size(); i++) {\n        if(list_data[i]!= 0) {\n            product *= list_data[i];\n        }\n    }\n    return product;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = unique_product;",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)20, (long)50, (long)60, (long)40}))) == (720000000));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1}))) == (6));",
            "assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)0, (long)1, (long)1}))) == (0));",
            "}"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat surfacearea_cylinder(long r, long h) {\n  long n = r*r;\n  long m = n*n;\n  long i = 0;\n  long j = 0;\n  long k = 0;\n  long l = 0;\n  long m1 = 0;\n  long m2 = 0;\n  long m3 = 0;\n  long m4 = 0;\n  long m5 = 0;\n  long m6 = 0;\n  long m7 = 0;\n  long m8 = 0;\n  long m9 = 0;\n  long m10 = 0;\n  long m11 = 0;\n  long m12 = 0;\n  long m13 = 0;\n  long m14 = 0;\n  long m15 = 0;\n  long m16 = 0;\n  long m17 = 0;\n  long m18 = 0;\n  long m19 = 0;\n  long m20 = 0;\n  long m21 = 0;\n  long m22 = 0;\n  long m23 = 0;\n  long m24 = 0;\n  long m25 = 0;\n  long m26 = 0;\n  long m27 = 0;\n  long m28 = 0;\n  long m29 = 0;\n  long m30 = 0;\n  long m31 = 0;\n  long m32 = 0;\n  long m33 = 0;\n  long m34 = 0;\n  long m35 = 0;\n  long m36 = 0;\n  long m37 = 0;\n  long m38 = 0;\n  long m39 = 0;\n  long m40 = 0;\n  long m41 = 0;\n  long m42 = 0;\n  long m43 = 0;\n  long m44 = 0;\n  long m45 = 0;\n  long m46 = 0;\n  long m47 = 0;\n  long m48 = 0;\n  long m49 = 0;\n  long m50 = 0;\n  long m51 = 0;\n  long m52 = 0;\n  \n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = surfacearea_cylinder;",
            "assert(candidate((10), (5)) == (942.45f));",
            "assert(candidate((4), (5)) == (226.18800000000002f));",
            "assert(candidate((4), (10)) == (351.848f));",
            "}"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a cppthon function to check whether a vector is subvector of another or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size()!= B.size()) {\n        return false;\n    }\n    for (int i = 0; i < A.size(); i++) {\n        if (A[i]!= B[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_Sub_Array;",
            "assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a cppthon function to find the last digit in factorial of a given number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong last_Digit_Factorial(long n) {\n    long result = 1;\n    while (n > 0) {\n        result *= n;\n        n /= 10;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = last_Digit_Factorial;",
            "assert(candidate((4)) == (4));",
            "assert(candidate((21)) == (0));",
            "assert(candidate((30)) == (0));",
            "}"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 vectors of the same length into a single flat vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> interleave_lists(std::vector<long> list1, std::vector<long> list2, std::vector<long> list3) {\n    std::vector<long> result;\n    long sum = 0;\n    for (long i = 0; i < list1.size(); i++) {\n        sum += list1[i];\n        result.push_back(sum);\n    }\n    for (long i = 0; i < list2.size(); i++) {\n        sum += list2[i];\n        result.push_back(sum);\n    }\n    for (long i = 0; i < list3.size(); i++) {\n        sum += list3[i];\n        result.push_back(sum);\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = interleave_lists;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70})), (std::vector<long>({(long)100, (long)200, (long)300, (long)400, (long)500, (long)600, (long)700}))) == (std::vector<long>({(long)1, (long)10, (long)100, (long)2, (long)20, (long)200, (long)3, (long)30, (long)300, (long)4, (long)40, (long)400, (long)5, (long)50, (long)500, (long)6, (long)60, (long)600, (long)7, (long)70, (long)700})));",
            "assert(candidate((std::vector<long>({(long)10, (long)20})), (std::vector<long>({(long)15, (long)2})), (std::vector<long>({(long)5, (long)10}))) == (std::vector<long>({(long)10, (long)15, (long)5, (long)20, (long)2, (long)10})));",
            "assert(candidate((std::vector<long>({(long)11, (long)44})), (std::vector<long>({(long)10, (long)15})), (std::vector<long>({(long)20, (long)5}))) == (std::vector<long>({(long)11, (long)10, (long)20, (long)44, (long)15, (long)5})));",
            "}"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two tuples.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long, long> find_dissimilar(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    long dissimilar_tup1 = 0, dissimilar_tup2 = 0;\n    long dissimilar_tup1_count = 0, dissimilar_tup2_count = 0;\n    long dissimilar_tup1_count_max = 0, dissimilar_tup2_count_max = 0;\n    long dissimilar_tup1_count_min = 0, dissimilar_tup2_count_min = 0;\n    long dissimilar_tup1_count_max = 0, dissimilar_tup2_count_max = 0;\n    long dissimilar_tup1_count_min = 0, dissimilar_tup2_count_min = 0;\n    long dissimilar_tup1_count_max = 0, dissimilar_tup2_count_max = 0;\n    long dissimilar_tup1_count_min = 0, dissimilar_tup2_count_min = 0;\n    long dissimilar_tup1_count_max = 0, dissimilar_tup2_count_max = 0;\n    long dissimilar_tup1_count_min = 0, dissimilar_tup2_count_min = 0;\n    long dissimilar_tup1_count_max = 0, dissimilar_tup2_count_max = 0;\n    long dissimilar_tup1_count_min = 0, dissimilar_tup2_count_min = 0;\n    long dissimilar_tup1_count_max = 0, dissimilar_tup2_count_max = 0;\n    long dissimilar_tup1_count_min = 0, dissimilar_tup2_count_min = 0;\n    long dissimilar_tup1_count_max = 0, dissimilar_tup2\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_dissimilar;",
            "assert(candidate((std::make_tuple(3, 4, 5, 6)), (std::make_tuple(5, 7, 4, 10))) == (std::make_tuple(3, 6, 7, 10)));",
            "assert(candidate((std::make_tuple(1, 2, 3, 4)), (std::make_tuple(7, 2, 3, 9))) == (std::make_tuple(1, 4, 7, 9)));",
            "assert(candidate((std::make_tuple(21, 11, 25, 26)), (std::make_tuple(26, 34, 21, 36))) == (std::make_tuple(34, 36, 11, 25)));",
            "}"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a cppthon function to find the largest number that can be formed with the given vector of digits.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_Max_Num(std::vector<long> arr) {\n    long max = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_Max_Num;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (321));",
            "assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)1}))) == (6541));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)9}))) == (9321));",
            "}"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::any extract_even(std::tuple<long, long, std::tuple<long, long, std::tuple<long, long>>, long, long> test_tuple) {\n    long odd_count = 0;\n    long even_count = 0;\n    long even_count_plus = 0;\n    long even_count_minus = 0;\n    long even_count_minus_plus = 0;\n    long even_count_minus_plus_plus = 0;\n    long even_count_minus_plus_plus_plus = 0;\n    long even_count_minus_plus_plus_plus_plus = 0;\n    long even_count_minus_plus_plus_plus_plus_plus = 0;\n    long even_count_minus_plus_plus_plus_plus_plus_plus = 0;\n    long even_count_minus_plus_plus_plus_plus_plus_plus_plus = 0;\n    long even_count_minus_plus_plus_plus_plus_plus_plus_plus_plus_plus = 0;\n    long even_count_minus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus = 0;\n    long even_count_minus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_plus_\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = extract_even;",
            "assert(candidate((std::make_tuple(4, 5, std::make_tuple(7, 6, std::make_tuple(2, 4)), 6, 8))) == std::make_tuple(4, std::make_tuple(6, std::make_tuple(2, 4)), 6, 8));",
            "assert(candidate((std::make_tuple(5, 6, std::make_tuple(8, 7, std::make_tuple(4, 8)), 7, 9))) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 8))));",
            "assert(candidate((std::make_tuple(5, 6, std::make_tuple(9, 8, std::make_tuple(4, 6)), 8, 10))) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 6)), 8, 10));",
            "}"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a cppthon function to find the surface area of a square cppramid with a given base edge and height.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong surface_Area(long b, long s) {\n    long a = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = surface_Area;",
            "assert(candidate((3), (4)) == (33));",
            "assert(candidate((4), (5)) == (56));",
            "assert(candidate((1), (2)) == (5));",
            "}"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong catalan_number(long num) {\n    long ans = 0;\n    while (num > 0) {\n        ans += num % 10;\n        num /= 10;\n    }\n    return ans;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = catalan_number;",
            "assert(candidate((10)) == (16796));",
            "assert(candidate((9)) == (4862));",
            "assert(candidate((7)) == (429));",
            "}"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string find_adverbs(std::string text) {\n    std::string result;\n    std::string::iterator it = text.begin();\n    std::string::iterator it_end = text.end();\n    while (it!= it_end) {\n        if (*it == 'ly') {\n            result.push_back(*it);\n            it++;\n        } else {\n            result.push_back(*it);\n            it++;\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_adverbs;",
            "assert(candidate((\"Clearly, he has no excuse for such behavior.\")) == (\"0-7: Clearly\"));",
            "assert(candidate((\"Please handle the situation carefuly\")) == (\"28-36: carefuly\"));",
            "assert(candidate((\"Complete the task quickly\")) == (\"18-25: quickly\"));",
            "}"
        ]
    },
    {
        "task_id": "585",
        "title": "expensive_items",
        "text": "Write a function to find the n most expensive items in a given dataset.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_float{\n    std::string f0;\n    float f1;    Union_std_string_float(std::string _f0) : f0(_f0) {}\n    Union_std_string_float(float _f1) : f1(_f1) {}\n    ~Union_std_string_float() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\nstd::vector<std::map<std::string,Union_std_string_float>> expensive_items(std::vector<std::map<std::string,Union_std_string_float>> items, long n) {\n    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::map<std::string,Union_std_string_float> temp;\n    for (auto it = items.begin(); it!= items.end(); it++) {\n        temp = it->second;\n        std::map<std::string,Union_std_string_float>::iterator it2 = temp.begin();\n        for (; it2!= temp.end(); it2++) {\n            if (it2->second.f1 > n) {\n                result.push_back(it2->second);\n            }\n        }\n    }\n    return result;\n}\nstd::vector<std::map<std::string,Union_std_string_float>> expensive_items(std::vector<std::map<std::string,Union_std_string_float>> items, long n) {\n    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::map<std::string,Union_std_string_float> temp;\n    for (auto it = items.begin(); it!= items.end(); it++) {\n        temp = it->\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = expensive_items;",
            "assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}})})));",
            "assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09f}})})), (2)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}})})));",
            "assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-4\"}, {\"price\", 22.75f}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}})})));",
            "}"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a cppthon function to split a vector at the nth eelment and add the first part to the end.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> split_Arr(std::vector<long> l, long n) {\n    std::vector<long> r;\n    long i = 0;\n    while (i < l.size() && l[i] <= n) {\n        r.push_back(l[i]);\n        i++;\n    }\n    return r;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = split_Arr;",
            "assert(candidate((std::vector<long>({(long)12, (long)10, (long)5, (long)6, (long)52, (long)36})), (2)) == (std::vector<long>({(long)5, (long)6, (long)52, (long)36, (long)12, (long)10})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (1)) == (std::vector<long>({(long)2, (long)3, (long)4, (long)1})));",
            "assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})), (3)) == (std::vector<long>({(long)3, (long)4, (long)5, (long)6, (long)7, (long)0, (long)1, (long)2})));",
            "}"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Write a function to convert a vector to a tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::any list_tuple(std::vector<long> listx) {\n  std::any ret;\n  long i = 0;\n  for (i = 0; i < listx.size(); i++) {\n    ret.push_back(listx[i]);\n  }\n  return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = list_tuple;",
            "assert(candidate((std::vector<long>({(long)5, (long)10, (long)7, (long)4, (long)15, (long)3}))) == std::make_tuple(5, 10, 7, 4, 15, 3));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)5, (long)6, (long)2, (long)3, (long)4, (long)4, (long)7}))) == std::make_tuple(2, 4, 5, 6, 2, 3, 4, 4, 7));",
            "assert(candidate((std::vector<long>({(long)58, (long)44, (long)56}))) == std::make_tuple(58, 44, 56));",
            "}"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a cppthon function to find the difference between largest and smallest value in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong big_diff(std::vector<long> nums) {\n    long max = 0;\n    long min = 0;\n    for(long i = 0; i < nums.size(); i++) {\n        if(nums[i] > max) {\n            max = nums[i];\n        }\n        if(nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max - min;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = big_diff;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (3));",
            "assert(candidate((std::vector<long>({(long)4, (long)5, (long)12}))) == (8));",
            "assert(candidate((std::vector<long>({(long)9, (long)2, (long)3}))) == (7));",
            "}"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> res;\n    if (a == b) {\n        res.push_back(a);\n        return res;\n    }\n    if (a == 0) {\n        res.push_back(b);\n        return res;\n    }\n    if (b == 0) {\n        res.push_back(a);\n        return res;\n    }\n    long x = a, y = b;\n    while (x!= 0 && y!= 0) {\n        if (x % 2 == y % 2) {\n            x /= 2;\n            y /= 2;\n        } else {\n            x /= 2;\n            y /= 2;\n        }\n    }\n    if (x == 0) {\n        res.push_back(y);\n        return res;\n    }\n    if (y == 0) {\n        res.push_back(x);\n        return res;\n    }\n    long x1 = x, y1 = y;\n    while (x1!= 0 && y1!= 0) {\n        if (x1 % 2 == y1 % 2) {\n            x1 /= 2;\n            y1 /= 2;\n        } else {\n            x1 /= 2;\n            y1 /= 2;\n        }\n    }\n    if (x1 == 0) {\n        res.push_back(y);\n        return res;\n    }\n    if (y1 == 0) {\n        res.push_back(x);\n        return res;\n    }\n    long x2 = x, y2 = y;\n    while (x2!= 0 && y2!= 0) {\n        if (x2 % 2 == y2 % 2) {\n            x2 /= 2;\n            y2 /= 2;\n        } else {\n            x2 /= 2;\n            y2 /= 2;\n        }\n    }\n    if (x2 == 0) {\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = perfect_squares;",
            "assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));",
            "assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));",
            "assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));",
            "}"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a cppthon function to check whether the given two integers have opposite sign or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool opposite_Signs(long x, long y) {\n    return (x < 0 && y < 0) || (x > 0 && y > 0);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = opposite_Signs;",
            "assert(candidate((1), (-2)) == (true));",
            "assert(candidate((3), (2)) == (false));",
            "assert(candidate((-10), (-10)) == (false));",
            "assert(candidate((-2), (2)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a cppthon function to interchange the first and last elements in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> swap_List(std::vector<long> newList) {\n    std::vector<long> oldList(newList.size());\n    std::vector<long> temp(newList.size());\n    for(int i = 0; i < newList.size(); i++) {\n        oldList[i] = newList[i];\n        temp[i] = newList[i];\n    }\n    std::vector<long> result(newList.size());\n    for(int i = 0; i < newList.size(); i++) {\n        result[i] = temp[i];\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = swap_List;",
            "assert(candidate((std::vector<long>({(long)12, (long)35, (long)9, (long)56, (long)24}))) == (std::vector<long>({(long)24, (long)35, (long)9, (long)56, (long)12})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)3, (long)2, (long)1})));",
            "assert(candidate((std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4})));",
            "}"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a cppthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_Of_product(long n) {\n    long sum = 0;\n    for(int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_Of_product;",
            "assert(candidate((3)) == (15));",
            "assert(candidate((4)) == (56));",
            "assert(candidate((1)) == (1));",
            "}"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string removezero_ip(std::string ip) {\n  std::string result;\n  std::string::iterator it = ip.begin();\n  while (it!= ip.end()) {\n    if (*it == '0') {\n      result.push_back(*it);\n      it++;\n    } else {\n      break;\n    }\n  }\n  return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = removezero_ip;",
            "assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));",
            "assert(candidate((\"12.01.024\")) == (\"12.1.24\"));",
            "assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));",
            "}"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong diff_even_odd(std::vector<long> list1) {\n    long sum = 0;\n    for(long i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            sum += list1[i];\n        }\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = diff_even_odd;",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (3));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (1));",
            "assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (9));",
            "}"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a cppthon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::any min_Swaps(std::string str1, std::string str2) {\n    std::string str1_copy = str1;\n    std::string str2_copy = str2;\n    std::string str1_swap = str1_copy;\n    std::string str2_swap = str2_copy;\n    std::string str1_swap_swapped = str1_copy;\n    std::string str2_swap_swapped = str2_copy;\n    std::string str1_swap_swapped_swapped = str1_copy;\n    std::string str2_swap_swapped_swapped = str2_copy;\n    std::string str1_swap_swapped_swapped_swapped = str1_copy;\n    std::string str2_swap_swapped_swapped_swapped = str2_copy;\n    std::string str1_swap_swapped_swapped_swapped = str1_copy;\n    std::string str2_swap_swapped_swapped_swapped = str2_copy;\n    std::string str1_swap_swapped_swapped_swapped = str1_copy;\n    std::string str2_swap_swapped_swapped_swapped = str2_copy;\n    std::string str1_swap_swapped_swapped_swapped = str1_copy;\n    std::string str2_swap_swapped_swapped_swapped = str2_copy;\n    std::string str1_swap_swapped_swapped_swapped = str1_copy;\n    std::string str2_swap_swapped_swapped_swapped = str2_copy;\n    std::string str1_swap_swapped_swapped_swapped = str1_copy;\n    std::string str2_swap_swapped_swapped_swapped = str2_copy;\n    std\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = min_Swaps;",
            "assert(candidate((\"1101\"), (\"1110\")) == (std::any(1)));",
            "assert(candidate((\"111\"), (\"000\")) == (std::any(\"Not Possible\")));",
            "assert(candidate((\"111\"), (\"110\")) == (std::any(\"Not Possible\")));",
            "}"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_kth(std::vector<long> arr1, std::vector<long> arr2, long k) {\n    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else if (arr1[i] > arr2[j]) {\n            j++;\n        } else {\n            return arr1[i];\n        }\n    }\n    return -1;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_kth;",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)6, (long)7, (long)9})), (std::vector<long>({(long)1, (long)4, (long)8, (long)10})), (5)) == (6));",
            "assert(candidate((std::vector<long>({(long)100, (long)112, (long)256, (long)349, (long)770})), (std::vector<long>({(long)72, (long)86, (long)113, (long)119, (long)265, (long)445, (long)892})), (7)) == (256));",
            "assert(candidate((std::vector<long>({(long)3, (long)4, (long)7, (long)8, (long)10})), (std::vector<long>({(long)2, (long)5, (long)9, (long)11})), (6)) == (8));",
            "}"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool armstrong_number(long number) {\n    if (number == 0) {\n        return true;\n    }\n    if (number == 1) {\n        return true;\n    }\n    if (number == 2) {\n        return true;\n    }\n    if (number == 3) {\n        return true;\n    }\n    if (number == 4) {\n        return true;\n    }\n    if (number == 5) {\n        return true;\n    }\n    if (number == 6) {\n        return true;\n    }\n    if (number == 7) {\n        return true;\n    }\n    if (number == 8) {\n        return true;\n    }\n    if (number == 9) {\n        return true;\n    }\n    if (number == 10) {\n        return true;\n    }\n    if (number == 11) {\n        return true;\n    }\n    if (number == 12) {\n        return true;\n    }\n    if (number == 13) {\n        return true;\n    }\n    if (number == 14) {\n        return true;\n    }\n    if (number == 15) {\n        return true;\n    }\n    if (number == 16) {\n        return true;\n    }\n    if (number == 17) {\n        return true;\n    }\n    if (number == 18) {\n        return true;\n    }\n    if (number == 19) {\n        return true;\n    }\n    if (number == 20) {\n        return true;\n    }\n    if (number == 21) {\n        return true;\n    }\n    if (number == 22) {\n        return true;\n    }\n    if (number == 23) {\n        return true;\n    }\n    if (number == 24) {\n        return true;\n    }\n    if (number == 25) {\n        return true;\n    }\n    if (number == 26) {\n        return true;\n    }\n    if (number ==\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = armstrong_number;",
            "assert(candidate((153)) == (true));",
            "assert(candidate((259)) == (false));",
            "assert(candidate((4458)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, float> sum_average(long number) {\n    long sum = 0;\n    float average = 0;\n    for (long i = 1; i <= number; i++) {\n        sum += i;\n        average += i / number;\n    }\n    return std::make_tuple(sum, average);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_average;",
            "assert(candidate((10)) == (std::make_tuple(55, 5.5f)));",
            "assert(candidate((15)) == (std::make_tuple(120, 8.0f)));",
            "assert(candidate((20)) == (std::make_tuple(210, 10.5f)));",
            "}"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong is_octagonal(long n) {\n    if (n == 0) return 1;\n    if (n == 1) return 1;\n    if (n == 2) return 1;\n    if (n == 3) return 1;\n    if (n == 4) return 1;\n    if (n == 5) return 1;\n    if (n == 6) return 1;\n    if (n == 7) return 1;\n    if (n == 8) return 1;\n    if (n == 9) return 1;\n    if (n == 10) return 1;\n    if (n == 11) return 1;\n    if (n == 12) return 1;\n    if (n == 13) return 1;\n    if (n == 14) return 1;\n    if (n == 15) return 1;\n    if (n == 16) return 1;\n    if (n == 17) return 1;\n    if (n == 18) return 1;\n    if (n == 19) return 1;\n    if (n == 20) return 1;\n    if (n == 21) return 1;\n    if (n == 22) return 1;\n    if (n == 23) return 1;\n    if (n == 24) return 1;\n    if (n == 25) return 1;\n    if (n == 26) return 1;\n    if (n == 27) return 1;\n    if (n == 28) return 1;\n    if (n == 29) return 1;\n    if (n == 30) return 1;\n    if (n == 31) return 1;\n    if (n == 32) return 1;\n    if (n == 33) return 1;\n    if (n == 34) return 1;\n    if (n == 35) return 1;\n    if (n == 36) return 1;\n    if (n == 37) return 1;\n    if (n == 38) return 1;\n    if (n == 39) return 1;\n    if (n == 40) return 1;\n    if (n == 41) return 1;\n    if (n ==\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_octagonal;",
            "assert(candidate((5)) == (65));",
            "assert(candidate((10)) == (280));",
            "assert(candidate((15)) == (645));",
            "}"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a cppthon function to check whether the given number is even or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_Even(long n) {\n    return n%2==0;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_Even;",
            "assert(candidate((1)) == (false));",
            "assert(candidate((2)) == (true));",
            "assert(candidate((3)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a cppthon function to find the first repeated character in a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::optional<std::string> first_repeated_char(std::string str1) {\n    std::string str2;\n    std::string::size_type pos = 0;\n    while (pos < str1.size() && str1[pos] == str2[pos]) {\n        pos++;\n    }\n    if (pos == str1.size()) {\n        return std::string();\n    }\n    return str1.substr(0, pos);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = first_repeated_char;",
            "assert(candidate((\"abcabc\")) == \"a\");",
            "assert(candidate((\"abc\")) == std::nullopt);",
            "assert(candidate((\"123123\")) == \"1\");",
            "}"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> get_ludic(long n) {\n    std::vector<long> result;\n    long i = 0;\n    while (i < n) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n        i++;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = get_ludic;",
            "assert(candidate((10)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7})));",
            "assert(candidate((25)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)23, (long)25})));",
            "assert(candidate((45)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)23, (long)25, (long)29, (long)37, (long)41, (long)43})));",
            "}"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string reverse_words(std::string s) {\n  std::stringstream ss;\n  std::string word;\n  std::stringstream ss2;\n  std::string word2;\n  std::stringstream ss3;\n  std::string word3;\n  std::stringstream ss4;\n  std::string word4;\n  std::stringstream ss5;\n  std::string word5;\n  std::stringstream ss6;\n  std::string word6;\n  std::stringstream ss7;\n  std::string word7;\n  std::stringstream ss8;\n  std::string word8;\n  std::stringstream ss9;\n  std::string word9;\n  std::stringstream ss10;\n  std::string word10;\n  std::stringstream ss11;\n  std::string word11;\n  std::stringstream ss12;\n  std::string word12;\n  std::stringstream ss13;\n  std::string word13;\n  std::stringstream ss14;\n  std::string word14;\n  std::stringstream ss15;\n  std::string word15;\n  std::stringstream ss16;\n  std::string word16;\n  std::stringstream ss17;\n  std::string word17;\n  std::stringstream ss18;\n  std::string word18;\n  std::stringstream ss19;\n  std::string word19;\n  std::stringstream ss20;\n  std::string word20;\n  std::stringstream ss21;\n  std::string word21;\n  std::stringstream ss22;\n  std::string word22;\n  std::stringstream ss23;\n  std::string word23;\n  std::stringstream ss24;\n  std::string word24;\n  std::stringstream ss25;\n  std::string word25;\n  std::stringstream ss26;\n  std::string word26;\n  std::stringstream ss27;\n  std::string word27;\n  std::\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = reverse_words;",
            "assert(candidate((\"python program\")) == (\"program python\"));",
            "assert(candidate((\"java language\")) == (\"language java\"));",
            "assert(candidate((\"indian man\")) == (\"man indian\"));",
            "}"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool prime_num(long num) {\n    if (num == 0) return false;\n    if (num == 1) return true;\n    if (num % 2 == 0) return false;\n    if (num % 3 == 0) return false;\n    if (num % 5 == 0) return false;\n    if (num % 7 == 0) return false;\n    if (num % 11 == 0) return false;\n    if (num % 13 == 0) return false;\n    if (num % 17 == 0) return false;\n    if (num % 19 == 0) return false;\n    if (num % 23 == 0) return false;\n    if (num % 29 == 0) return false;\n    if (num % 31 == 0) return false;\n    if (num % 37 == 0) return false;\n    if (num % 41 == 0) return false;\n    if (num % 43 == 0) return false;\n    if (num % 47 == 0) return false;\n    if (num % 53 == 0) return false;\n    if (num % 59 == 0) return false;\n    if (num % 61 == 0) return false;\n    if (num % 67 == 0) return false;\n    if (num % 71 == 0) return false;\n    if (num % 73 == 0) return false;\n    if (num % 79 == 0) return false;\n    if (num % 83 == 0) return false;\n    if (num % 89 == 0) return false;\n    if (num % 97 == 0) return false;\n    if (num % 101 == 0) return false;\n    if (num % 103 == 0) return false;\n    if (num % 107 == 0) return false;\n    if (num % 109 == 0) return false;\n    if (num % 113 == 0) return false;\n    if (num % 127 == 0) return false;\n    if (num % 131 == 0) return false;\n    if (num % 137 == 0) return false;\n    if (num % 139 == 0) return false;\n    if\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = prime_num;",
            "assert(candidate((13)) == (true));",
            "assert(candidate((7)) == (true));",
            "assert(candidate((-1010)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat radian_degree(long degree) {\n  return degree * (M_PI / 180.0);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = radian_degree;",
            "assert(candidate((90)) == (1.5707963267948966f));",
            "assert(candidate((60)) == (1.0471975511965976f));",
            "assert(candidate((120)) == (2.0943951023931953f));",
            "}"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, long, long> find_literals(std::string text, std::string pattern) {\n    std::string::size_type pos = text.find(pattern);\n    if (pos == std::string::npos) {\n        return std::make_tuple(text, 0, 0);\n    }\n    return std::make_tuple(text, pos, pos + pattern.size());\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_literals;",
            "assert(candidate((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")) == (std::make_tuple(\"fox\", 16, 19)));",
            "assert(candidate((\"Its been a very crazy procedure right\"), (\"crazy\")) == (std::make_tuple(\"crazy\", 16, 21)));",
            "assert(candidate((\"Hardest choices required strongest will\"), (\"will\")) == (std::make_tuple(\"will\", 35, 39)));",
            "}"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a cppthon function to find nth bell number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong bell_Number(long n) {\n    long k = 1;\n    while (k <= n) {\n        k *= 2;\n    }\n    return k;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = bell_Number;",
            "assert(candidate((2)) == (2));",
            "assert(candidate((3)) == (5));",
            "assert(candidate((4)) == (15));",
            "}"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a cppthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> remove_kth_element(std::vector<long> list1, long L) {\n    std::vector<long> list2;\n    for(long i = 0; i < L; i++) {\n        list2.push_back(list1.back());\n        list1.pop_back();\n    }\n    return list2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_kth_element;",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)1})), (3)) == (std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)4, (long)5, (long)1})));",
            "assert(candidate((std::vector<long>({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4})), (4)) == (std::vector<long>({(long)0, (long)0, (long)1, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4})));",
            "assert(candidate((std::vector<long>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10})), (5)) == (std::vector<long>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10})));",
            "}"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as a vector of vectors returns the max of then'th column.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_of_nth(std::vector<std::vector<long>> test_list, long N) {\n    long max = 0;\n    for(long i = 0; i < N; i++) {\n        for(long j = 0; j < N; j++) {\n            if(test_list[i][j] > max) {\n                max = test_list[i][j];\n            }\n        }\n    }\n    return max;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_of_nth;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)1, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)9, (long)19})})), (2)) == (19));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)20})})), (1)) == (10));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)3, (long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)21})})), (1)) == (11));",
            "}"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a cppthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<std::any>> merge(std::vector<std::vector<std::any>> lst) {\n    std::vector<std::vector<std::any>> result;\n    for(auto i = 0; i < lst.size(); i++) {\n        for(auto j = 0; j < lst[i].size(); j++) {\n            result.push_back(std::vector<std::any>(2, lst[i][j]));\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = merge;",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"m\", (std::string)\"n\"})}))) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"a\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"y\", (std::string)\"b\", (std::string)\"n\"})})));",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8})}))) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)3, (long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)6, (long)8})})));",
            "assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"m\", (std::string)\"n\", (std::string)\"o\"})}))) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"a\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"y\", (std::string)\"b\", (std::string)\"n\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"z\", (std::string)\"c\", (std::string)\"o\"})})));",
            "}"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given vector of vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong cummulative_sum(std::vector<std::vector<long>> test_list) {\n    long sum = 0;\n    for(std::vector<std::vector<long>>::iterator it = test_list.begin(); it!= test_list.end(); ++it) {\n        for(std::vector<long>::iterator it2 = it->begin(); it2!= it->end(); ++it2) {\n            sum += *it2;\n        }\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = cummulative_sum;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)2, (long)6})}))) == (30));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)3, (long)7})}))) == (37));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)4, (long)8})}))) == (44));",
            "}"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes a vectors of vectors and returns the average value for each subvector as a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<float> average_tuple(std::vector<std::vector<long>> nums) {\n    std::vector<float> result;\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = 0; j < nums[i].size(); j++) {\n            result.push_back(nums[i][j]);\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = average_tuple;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)10, (long)10, (long)10, (long)12}), (std::vector<long>)std::vector<long>({(long)30, (long)45, (long)56, (long)45}), (std::vector<long>)std::vector<long>({(long)81, (long)80, (long)39, (long)32}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4})}))) == (std::vector<float>({(float)30.5f, (float)34.25f, (float)27.0f, (float)23.25f})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)-5}), (std::vector<long>)std::vector<long>({(long)30, (long)-15, (long)56}), (std::vector<long>)std::vector<long>({(long)81, (long)-60, (long)-39}), (std::vector<long>)std::vector<long>({(long)-10, (long)2, (long)3})}))) == (std::vector<float>({(float)25.5f, (float)-18.0f, (float)3.75f})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)100, (long)100, (long)100, (long)120}), (std::vector<long>)std::vector<long>({(long)300, (long)450, (long)560, (long)450}), (std::vector<long>)std::vector<long>({(long)810, (long)800, (long)390, (long)320}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40})}))) == (std::vector<float>({(float)305.0f, (float)342.5f, (float)270.0f, (float)232.5f})));",
            "}"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long, long> tuple_modulo(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    long result = 0;\n    long temp = 0;\n    for (long i = 0; i < test_tup1.size(); i++) {\n        temp = test_tup1[i] % test_tup2[i];\n        result += temp;\n    }\n    return std::make_tuple(result, temp, test_tup1[0], test_tup2[0]);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = tuple_modulo;",
            "assert(candidate((std::make_tuple(10, 4, 5, 6)), (std::make_tuple(5, 6, 7, 5))) == (std::make_tuple(0, 4, 5, 1)));",
            "assert(candidate((std::make_tuple(11, 5, 6, 7)), (std::make_tuple(6, 7, 8, 6))) == (std::make_tuple(5, 5, 6, 1)));",
            "assert(candidate((std::make_tuple(12, 6, 7, 8)), (std::make_tuple(7, 8, 9, 7))) == (std::make_tuple(5, 6, 7, 1)));",
            "}"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat min_Jumps(std::tuple<long, long> steps, long d) {\n    long n = steps.size();\n    long m = n - 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e =\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = min_Jumps;",
            "assert(candidate((std::make_tuple(3, 4)), (11)) == (3.5f));",
            "assert(candidate((std::make_tuple(3, 4)), (0)) == (float(0)));",
            "assert(candidate((std::make_tuple(11, 14)), (11)) == (float(1)));",
            "}"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two vectors element wise.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res(nums1.size() + nums2.size());\n    for (int i = 0; i < nums1.size(); i++) {\n        res[i] = nums1[i] / nums2[i];\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = div_list;",
            "assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0f, (float)2.5f, (float)2.0f})));",
            "assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0f, (float)0.5f})));",
            "assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8f, (float)1.7142857142857142f})));",
            "}"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string move_num(std::string test_str) {\n    std::string result_str;\n    std::string::iterator it;\n    for (it = test_str.begin(); it!= test_str.end(); it++) {\n        if (*it == '0') {\n            result_str.push_back('1');\n        } else {\n            result_str.push_back(*it);\n        }\n    }\n    return result_str;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = move_num;",
            "assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));",
            "assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));",
            "assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));",
            "}"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a cppthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_Substrings(std::string s) {\n    long sum = 0;\n    for (auto c : s) {\n        sum += c - '0';\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_Substrings;",
            "assert(candidate((\"112112\")) == (6));",
            "assert(candidate((\"111\")) == (6));",
            "assert(candidate((\"1101112\")) == (12));",
            "}"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted vectors of same size.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long m = arr1.size();\n    long k = arr2.size();\n    if (m < k) return 0;\n    if (m == k) return arr1[m/2];\n    long i = m/2;\n    long j = k/2;\n    long p = arr1[i];\n    long q = arr2[j];\n    return (p + q) / 2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = get_median;",
            "assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0f));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5f));",
            "assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0f));",
            "}"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> nth_nums(std::vector<long> nums, long n) {\n    std::vector<long> res(nums.size());\n    for (long i = 0; i < nums.size(); i++) {\n        res[i] = pow(nums[i], n);\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = nth_nums;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25, (long)36, (long)49, (long)64, (long)81, (long)100})));",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)30})), (3)) == (std::vector<long>({(long)1000, (long)8000, (long)27000})));",
            "assert(candidate((std::vector<long>({(long)12, (long)15})), (5)) == (std::vector<long>({(long)248832, (long)759375})));",
            "}"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a cppthon function to convert a given string to uppercase.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string is_upper(std::string string) {\n    std::string result;\n    for (std::string::iterator it = string.begin(); it!= string.end(); ++it) {\n        if (*it >= 'a' && *it <= 'z') {\n            *it = *it - 'a' + 'A';\n        }\n        result.push_back(*it);\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_upper;",
            "assert(candidate((\"person\")) == (\"PERSON\"));",
            "assert(candidate((\"final\")) == (\"FINAL\"));",
            "assert(candidate((\"Valid\")) == (\"VALID\"));",
            "}"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a cppthon function to interchange the first and last element in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> swap_List(std::vector<long> newList) {\n    std::vector<long> tempList;\n    long temp;\n    for(long i = 0; i < newList.size(); i++) {\n        temp = newList[i];\n        newList[i] = newList[newList.size() - 1 - i];\n        newList[newList.size() - 1 - i] = temp;\n        tempList.push_back(temp);\n    }\n    return tempList;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = swap_List;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)3, (long)2, (long)1})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)4}))) == (std::vector<long>({(long)4, (long)2, (long)3, (long)4, (long)1})));",
            "assert(candidate((std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4})));",
            "}"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a cppthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::optional<long> triangle_area(long r) {\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a1 = 0;\n    long a2 = 0;\n    long a3 = 0;\n    long a4 = 0;\n    long a5 = 0;\n    long a6 = 0;\n    long a7 = 0;\n    long a8 = 0;\n    long a9 = 0;\n    long a10 = 0;\n    long a11 = 0;\n    long a12 = 0;\n    long a13 = 0;\n    long a14 = 0;\n    long a15 = 0;\n    long a16 = 0;\n    long a17 = 0;\n    long a18 = 0;\n    long a19 = 0;\n    long a20 = 0;\n    long a21 = 0;\n    long a22 = 0;\n    long a23 = 0;\n    long a24 = 0;\n    long a25 = 0;\n    long a26 = 0;\n    long a27 = 0;\n    long a28 = 0;\n    long a29 = 0;\n    long a30 = 0;\n    long a31 = 0;\n    long a32 = 0;\n    long a33 = 0;\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = triangle_area;",
            "assert(candidate((-1)) == std::nullopt);",
            "assert(candidate((0)) == 0);",
            "assert(candidate((2)) == 4);",
            "}"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_First_Missing(std::vector<long> array) {\n    long firstMissing = array[0];\n    for (int i = 1; i < array.size(); i++) {\n        if (array[i] < firstMissing) {\n            firstMissing = array[i];\n        }\n    }\n    return firstMissing;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_First_Missing;",
            "assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));",
            "assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));",
            "}"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string replace_spaces(std::string string) {\n  std::string result;\n  for (int i = 0; i < string.size(); i++) {\n    if (string[i] =='') {\n      result += '%20';\n    } else {\n      result += string[i];\n    }\n  }\n  return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = replace_spaces;",
            "assert(candidate((\"My Name is Dawood\")) == (\"My%20Name%20is%20Dawood\"));",
            "assert(candidate((\"I am a Programmer\")) == (\"I%20am%20a%20Programmer\"));",
            "assert(candidate((\"I love Coding\")) == (\"I%20love%20Coding\"));",
            "}"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a cppthon function to find even numbers from a vector of numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    long sum = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 0) {\n            sum += list[i];\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = Split;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)2, (long)4})));",
            "assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)8, (long)0, (long)1}))) == (std::vector<long>({(long)4, (long)6, (long)8, (long)0})));",
            "assert(candidate((std::vector<long>({(long)8, (long)12, (long)15, (long)19}))) == (std::vector<long>({(long)8, (long)12})));",
            "}"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a cppthon function to find smallest number in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong smallest_num(std::vector<long> xs) {\n  long min = xs[0];\n  for (int i = 1; i < xs.size(); i++) {\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return min;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = smallest_num;",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)1, (long)45, (long)99}))) == (1));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));",
            "assert(candidate((std::vector<long>({(long)45, (long)46, (long)50, (long)60}))) == (45));",
            "}"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> get_coordinates(std::tuple<long, long> test_tup) {\n    std::vector<std::vector<long>> result;\n    std::vector<long> tmp;\n    tmp.push_back(test_tup.get<0>());\n    tmp.push_back(test_tup.get<1>());\n    tmp.push_back(test_tup.get<2>());\n    tmp.push_back(test_tup.get<3>());\n    tmp.push_back(test_tup.get<4>());\n    tmp.push_back(test_tup.get<5>());\n    tmp.push_back(test_tup.get<6>());\n    tmp.push_back(test_tup.get<7>());\n    tmp.push_back(test_tup.get<8>());\n    tmp.push_back(test_tup.get<9>());\n    tmp.push_back(test_tup.get<10>());\n    tmp.push_back(test_tup.get<11>());\n    tmp.push_back(test_tup.get<12>());\n    tmp.push_back(test_tup.get<13>());\n    tmp.push_back(test_tup.get<14>());\n    tmp.push_back(test_tup.get<15>());\n    tmp.push_back(test_tup.get<16>());\n    tmp.push_back(test_tup.get<17>());\n    tmp.push_back(test_tup.get<18>());\n    tmp.push_back(test_tup.get<19>());\n    tmp.push_back(test_tup.get<20>());\n    tmp.push_back(test_tup.get<21>());\n    tmp.push_back(test_tup.get<22>());\n    tmp.push_back\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = get_coordinates;",
            "assert(candidate((std::make_tuple(3, 4))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)2, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)4, (long)5})})));",
            "assert(candidate((std::make_tuple(4, 5))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)6}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)5}), (std::vector<long>)std::vector<long>({(long)5, (long)6})})));",
            "assert(candidate((std::make_tuple(5, 6))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)4, (long)7}), (std::vector<long>)std::vector<long>({(long)5, (long)5}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)6, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)6}), (std::vector<long>)std::vector<long>({(long)6, (long)7})})));",
            "}"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string replace_spaces(std::string text) {\n  std::replace(text.begin(), text.end(),'', '_');\n  std::replace(text.begin(), text.end(),'', '-');\n  return text;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = replace_spaces;",
            "assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));",
            "assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));",
            "assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));",
            "}"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a cppthon function to move all zeroes to the end of the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> move_zero(std::vector<long> num_list) {\n    std::vector<long> result;\n    for (long i = 0; i < num_list.size(); i++) {\n        if (num_list[i] == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = move_zero;",
            "assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)0, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)0, (long)0})));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)2, (long)0, (long)0, (long)4, (long)0, (long)5, (long)0}))) == (std::vector<long>({(long)2, (long)3, (long)2, (long)4, (long)5, (long)0, (long)0, (long)0, (long)0})));",
            "assert(candidate((std::vector<long>({(long)0, (long)1, (long)0, (long)1, (long)1}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)0, (long)0})));",
            "}"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a cppthon function to find the sum of xor of all pairs of numbers in the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong pair_xor_Sum(std::vector<long> arr, long n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = pair_xor_Sum;",
            "assert(candidate((std::vector<long>({(long)5, (long)9, (long)7, (long)6})), (4)) == (47));",
            "assert(candidate((std::vector<long>({(long)7, (long)3, (long)5})), (3)) == (12));",
            "assert(candidate((std::vector<long>({(long)7, (long)3})), (2)) == (4));",
            "}"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> heap_sort(std::vector<long> iterable) {\n    std::vector<long> result;\n    long temp;\n    long i = 0;\n    while (i < iterable.size()) {\n        temp = iterable[i];\n        result.push_back(temp);\n        i++;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = heap_sort;",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)2, (long)4, (long)6, (long)8, (long)0}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));",
            "assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)25, (long)58}))) == (std::vector<long>({(long)14, (long)22, (long)25, (long)25, (long)35, (long)58, (long)65, (long)75, (long)85})));",
            "assert(candidate((std::vector<long>({(long)7, (long)1, (long)9, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)7, (long)9})));",
            "}"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if (actual_cost == 0) return true;\n    if (sale_amount == 0) return false;\n    if (sale_amount > actual_cost) return false;\n    if (sale_amount < actual_cost) return false;\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = noprofit_noloss;",
            "assert(candidate((1500), (1200)) == (false));",
            "assert(candidate((100), (100)) == (true));",
            "assert(candidate((2000), (5000)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong wind_chill(long v, long t) {\n    long wind_index = 0;\n    long wind_index_temp = 0;\n    long wind_index_wind = 0;\n    long wind_index_wind_temp = 0;\n    long wind_index_wind_wind = 0;\n    long wind_index_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind = 0;\n    long wind_index_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind = 0;\n    long wind_index_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind = 0;\n    long wind_index_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_wind_temp = 0;\n    long wind_index_wind_wind_wind_wind_wind_wind_wind_temp = 0\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = wind_chill;",
            "assert(candidate((120), (35)) == (40));",
            "assert(candidate((40), (20)) == (19));",
            "assert(candidate((10), (8)) == (6));",
            "}"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(auto it = sample_names.begin(); it!= sample_names.end(); ++it) {\n        if(it->size() > 0 && it->at(0) == it->at(it->size() - 1) && it->at(0)!= 'a') {\n            sum += it->size();\n        }\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sample_nam;",
            "assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));",
            "assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));",
            "assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));",
            "}"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given tuple vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_difference(std::vector<std::tuple<long, long>> test_list) {\n    long max_difference = 0;\n    for(auto it = test_list.begin(); it!= test_list.end(); it++) {\n        long diff = it->first - it->second;\n        if(diff > max_difference) {\n            max_difference = diff;\n        }\n    }\n    return max_difference;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_difference;",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(1, 7), (std::tuple<long, long>)std::make_tuple(10, 3), (std::tuple<long, long>)std::make_tuple(1, 2)}))) == (7));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(2, 17), (std::tuple<long, long>)std::make_tuple(9, 13), (std::tuple<long, long>)std::make_tuple(11, 12)}))) == (15));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(12, 35), (std::tuple<long, long>)std::make_tuple(21, 27), (std::tuple<long, long>)std::make_tuple(13, 23), (std::tuple<long, long>)std::make_tuple(41, 22)}))) == (23));",
            "}"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto it = items.begin(); it!= items.end(); ++it) {\n        if (*it == \"(\") {\n            result += *it;\n            ++it;\n        } else if (*it == \")\") {\n            result += *it;\n            ++it;\n        } else {\n            result += *it;\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_parenthesis;",
            "assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));",
            "assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));",
            "assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));",
            "}"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong is_nonagonal(long n) {\n    long i = 0;\n    while (i < n) {\n        if (i % 2 == 0) {\n            i++;\n        } else {\n            i = i / 2;\n        }\n    }\n    return i;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_nonagonal;",
            "assert(candidate((10)) == (325));",
            "assert(candidate((15)) == (750));",
            "assert(candidate((18)) == (1089));",
            "}"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool text_match_wordz_middle(std::string text) {\n    std::string::size_type pos = 0;\n    std::string::size_type len = text.size();\n    while (pos < len) {\n        if (text[pos] == 'z') {\n            if (pos == 0 || text[pos - 1]!= 'z') {\n                return false;\n            }\n        }\n        pos++;\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = text_match_wordz_middle;",
            "assert(candidate((\"pythonzabc.\")) == (true));",
            "assert(candidate((\"zxyabc.\")) == (false));",
            "assert(candidate((\"  lang  .\")) == (false));",
            "}"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a cppthon function to reverse a vector upto a given position.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> reverse_Array_Upto_K(std::vector<long> input, long k) {\n    std::vector<long> output;\n    long i = 0;\n    while (i < input.size() - k) {\n        output.push_back(input[i]);\n        i++;\n    }\n    return output;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = reverse_Array_Upto_K;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (4)) == (std::vector<long>({(long)4, (long)3, (long)2, (long)1, (long)5, (long)6})));",
            "assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7})), (2)) == (std::vector<long>({(long)5, (long)4, (long)6, (long)7})));",
            "assert(candidate((std::vector<long>({(long)9, (long)8, (long)7, (long)6, (long)5})), (3)) == (std::vector<long>({(long)7, (long)8, (long)9, (long)6, (long)5})));",
            "}"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort a vector of tuples using the second value of each tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<std::string, long>> subject_marks(std::vector<std::tuple<std::string, long>> subjectmarks) {\n    std::vector<std::tuple<std::string, long>> subjectmarks_copy(subjectmarks);\n    std::sort(subjectmarks_copy.begin(), subjectmarks_copy.end(), std::greater<std::tuple<std::string, long>>());\n    return subjectmarks_copy;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = subject_marks;",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82)}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82), (std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97)})));",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54), (std::tuple<std::string, long>)std::make_tuple(\"Social\", 33)}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Social\", 33), (std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54)})));",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45)}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97)})));",
            "}"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "Write a function to flatten a vector and sum all of its elements.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto it = data_list.begin(); it!= data_list.end(); ++it) {\n        sum += it->f0;\n    }\n    return sum;\n}\nlong recursive_list_sum_long(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto it = data_list.begin(); it!= data_list.end(); ++it) {\n        sum += it->f0;\n    }\n    return sum;\n}\nlong recursive_list_sum_long_long(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto it = data_list.begin(); it!= data_list.end(); ++it) {\n        sum += it->f0;\n    }\n    return sum;\n}\nlong recursive_list_sum_long_long_long(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = recursive_list_sum;",
            "assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));",
            "assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));",
            "assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));",
            "}"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a cppthon function to count the number of positive numbers in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i = list.begin(); i!= list.end(); ++i) {\n        if (*i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = pos_count;",
            "assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));",
            "assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));",
            "}"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong bell_number(long n) {\n    long k = 1;\n    while (k <= n) {\n        if (k % 2 == 0) {\n            k = k / 2;\n        } else {\n            k = k / 2 + 1;\n        }\n    }\n    return k;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = bell_number;",
            "assert(candidate((2)) == (2));",
            "assert(candidate((10)) == (115975));",
            "assert(candidate((56)) == (6775685320645824322581483068371419745979053216268760300));",
            "}"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a cppthon function to check whether the given vector is monotonic or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_Monotonic(std::vector<long> A) {\n    long n = A.size();\n    if (n == 0) return true;\n    if (n == 1) return false;\n    long i = 0;\n    while (i < n) {\n        if (A[i] < A[i+1]) return false;\n        i++;\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_Monotonic;",
            "assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether a vector contains the given subvector or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_sublist(std::vector<long> l, std::vector<long> s) {\n    long i = 0;\n    while(i < l.size() && s[i] == l[i]) {\n        i++;\n    }\n    return i == l.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_sublist;",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)3, (long)7}))) == (false));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)4, (long)3}))) == (true));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)1, (long)6}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a cppthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool differ_At_One_Bit_Pos(long a, long b) {\n    long diff = a - b;\n    if (diff == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = differ_At_One_Bit_Pos;",
            "assert(candidate((13), (9)) == (true));",
            "assert(candidate((15), (8)) == (false));",
            "assert(candidate((2), (4)) == (false));",
            "assert(candidate((2), (3)) == (true));",
            "assert(candidate((5), (1)) == (true));",
            "assert(candidate((1), (5)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given vectors have equal length or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool get_equal(std::vector<std::vector<long>> Input) {\n    std::vector<std::vector<long>> Output;\n    for (int i = 0; i < Input.size(); i++) {\n        for (int j = 0; j < Input[i].size(); j++) {\n            if (Input[i][j]!= Input[i][j]) {\n                return false;\n            }\n        }\n        Output.push_back(Input[i]);\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = get_equal;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)22, (long)33}), (std::vector<long>)std::vector<long>({(long)44, (long)55, (long)66})}))) == (true));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6, (long)7})}))) == (false));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})}))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort a vector of elements.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> comb_sort(std::vector<long> nums) {\n    std::vector<long> res;\n    long n = nums.size();\n    if (n == 0) return res;\n    long k = 1;\n    long i = 0;\n    while (i < n) {\n        if (nums[i] > nums[i - 1]) {\n            long j = i;\n            while (j < n && nums[j] > nums[j - 1]) {\n                j++;\n            }\n            res.push_back(nums[j]);\n            i = j;\n        } else {\n            i++;\n        }\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = comb_sort;",
            "assert(candidate((std::vector<long>({(long)5, (long)15, (long)37, (long)25, (long)79}))) == (std::vector<long>({(long)5, (long)15, (long)25, (long)37, (long)79})));",
            "assert(candidate((std::vector<long>({(long)41, (long)32, (long)15, (long)19, (long)22}))) == (std::vector<long>({(long)15, (long)19, (long)22, (long)32, (long)41})));",
            "assert(candidate((std::vector<long>({(long)99, (long)15, (long)13, (long)47}))) == (std::vector<long>({(long)13, (long)15, (long)47, (long)99})));",
            "}"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add a map to the tuple. The output should be a tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long, std::map<std::string,long>> add_dict_to_tuple(std::tuple<long, long, long> test_tup, std::map<std::string,long> test_dict) {\n    long result = 0;\n    for (auto it = test_tup.begin(); it!= test_tup.end(); ++it) {\n        result += it->second;\n    }\n    return std::make_tuple(result, test_tup.size(), test_tup.size(), test_dict);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = add_dict_to_tuple;",
            "assert(candidate((std::make_tuple(4, 5, 6)), (std::map<std::string,long>({{\"MSAM\", 1}, {\"is\", 2}, {\"best\", 3}}))) == (std::make_tuple(4, 5, 6, std::map<std::string,long>({{\"MSAM\", 1}, {\"is\", 2}, {\"best\", 3}}))));",
            "assert(candidate((std::make_tuple(1, 2, 3)), (std::map<std::string,long>({{\"UTS\", 2}, {\"is\", 3}, {\"Worst\", 4}}))) == (std::make_tuple(1, 2, 3, std::map<std::string,long>({{\"UTS\", 2}, {\"is\", 3}, {\"Worst\", 4}}))));",
            "assert(candidate((std::make_tuple(8, 9, 10)), (std::map<std::string,long>({{\"POS\", 3}, {\"is\", 4}, {\"Okay\", 5}}))) == (std::make_tuple(8, 9, 10, std::map<std::string,long>({{\"POS\", 3}, {\"is\", 4}, {\"Okay\", 5}}))));",
            "}"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat maxAverageOfPath(std::vector<std::vector<long>> cost) {\n    std::vector<long> path(cost.size());\n    for (int i = 0; i < cost.size(); i++) {\n        path[i] = cost[i][0];\n    }\n    int max = 0;\n    for (int i = 0; i < cost.size(); i++) {\n        for (int j = 0; j < cost[i].size(); j++) {\n            if (path[i] == cost[i][j]) {\n                max = i;\n                break;\n            }\n        }\n    }\n    return maxAverageOfPath(cost);\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = maxAverageOfPath;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)6, (long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)7, (long)3, (long)9})}))) == (5.2f));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)7, (long)6, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)4, (long)10})}))) == (6.2f));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)11})}))) == (7.2f));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (5.8f));",
            "}"
        ]
    },
    {
        "task_id": "722",
        "title": "filter_data",
        "text": "The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::tuple<float, long>> filter_data(std::map<std::string,std::tuple<float, long>> students, float h, long w) {\n\tstd::map<std::string,std::tuple<float, long>> filtered;\n\tfor(auto it = students.begin(); it!= students.end(); it++) {\n\t\tif(it->second.first > h && it->second.first < w) {\n\t\t\tfiltered[it->first] = it->second;\n\t\t}\n\t}\n\treturn filtered;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = filter_data;",
            "assert(candidate((std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})), (6.0f), (70)) == (std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}})));",
            "assert(candidate((std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})), (5.9f), (67)) == (std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}})));",
            "assert(candidate((std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})), (5.7f), (64)) == (std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})));",
            "}"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_same_pair(std::vector<long> nums1, std::vector<long> nums2) {\n    long count = 0;\n    for (long i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_same_pair;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9}))) == (4));",
            "assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)0, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8})), (std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (11));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17})), (std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (1));",
            "assert(candidate((std::vector<long>({(long)0, (long)1, (long)1, (long)2})), (std::vector<long>({(long)0, (long)1, (long)2, (long)2}))) == (3));",
            "}"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong power_base_sum(long base, long power) {\n    long sum = 0;\n    while (base) {\n        sum += base % power;\n        base /= power;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = power_base_sum;",
            "assert(candidate((2), (100)) == (115));",
            "assert(candidate((8), (10)) == (37));",
            "assert(candidate((8), (15)) == (62));",
            "assert(candidate((3), (3)) == (9));",
            "}"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::any> extract_quotation(std::string text1) {\n    std::vector<std::any> result;\n    std::string text2 = text1;\n    std::string::size_type pos = text1.find(\"\\\"\");\n    if (pos!= std::string::npos) {\n        text2 = text1.substr(pos + 1);\n    }\n    std::string::size_type pos2 = text2.find(\"\\\"\");\n    if (pos2!= std::string::npos) {\n        text2 = text2.substr(0, pos2);\n    }\n    std::string::size_type pos3 = text2.find(\"\\\"\");\n    if (pos3!= std::string::npos) {\n        text2 = text2.substr(0, pos3);\n    }\n    std::string::size_type pos4 = text2.find(\"\\\"\");\n    if (pos4!= std::string::npos) {\n        text2 = text2.substr(0, pos4);\n    }\n    std::string::size_type pos5 = text2.find(\"\\\"\");\n    if (pos5!= std::string::npos) {\n        text2 = text2.substr(0, pos5);\n    }\n    std::string::size_type pos6 = text2.find(\"\\\"\");\n    if (pos6!= std::string::npos) {\n        text2 = text2.substr(0, pos6);\n    }\n    std::string::size_type pos7 = text2.find(\"\\\"\");\n    if (pos7!= std::string::npos) {\n        text2 = text2.substr(0, pos7);\n    }\n    std::string::size_type pos8 = text2.find(\"\\\"\");\n    if (pos8!= std::string::npos) {\n        text2 = text2.substr(0, pos8);\n    }\n    std::string::size_type pos\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = extract_quotation;",
            "assert(candidate((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")) == (std::vector<std::any>({(std::string)\"A53\", (std::string)\"multi\", (std::string)\"Processor\"})));",
            "assert(candidate((\"Cast your \"favorite\" entertainment \"apps\"\")) == (std::vector<std::any>({(std::string)\"favorite\", (std::string)\"apps\"})));",
            "assert(candidate((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")) == (std::vector<std::any>({(std::string)\"4k Ultra HD\", (std::string)\"HDR 10\"})));",
            "assert(candidate((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")) == (std::vector<std::any>()));",
            "}"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::any> multiply_elements(std::vector<long> test_tup) {\n    std::vector<long> result;\n    long i = 0;\n    for (long j = 0; j < test_tup.size(); j++) {\n        result.push_back(test_tup[j] * test_tup[j+1]);\n        i++;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = multiply_elements;",
            "assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)8, (long)10}))) == (std::vector<std::any>({(long)5, (long)35, (long)56, (long)80})));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)5, (long)6, (long)7}))) == (std::vector<std::any>({(long)8, (long)20, (long)30, (long)42})));",
            "assert(candidate((std::vector<long>({(long)12, (long)13, (long)14, (long)9, (long)15}))) == (std::vector<std::any>({(long)156, (long)182, (long)126, (long)135})));",
            "assert(candidate((std::vector<long>({(long)12}))) == (std::vector<std::any>()));",
            "}"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> sum_list(std::vector<long> lst1, std::vector<long> lst2) {\n    std::vector<long> res;\n    long sum = 0;\n    for (long i = 0; i < lst1.size(); i++) {\n        sum += lst1[i];\n        res.push_back(sum);\n    }\n    for (long i = 0; i < lst2.size(); i++) {\n        sum += lst2[i];\n        res.push_back(sum);\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_list;",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)30})), (std::vector<long>({(long)15, (long)25, (long)35}))) == (std::vector<long>({(long)25, (long)45, (long)65})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)5, (long)6, (long)7}))) == (std::vector<long>({(long)6, (long)8, (long)10})));",
            "assert(candidate((std::vector<long>({(long)15, (long)20, (long)30})), (std::vector<long>({(long)15, (long)45, (long)75}))) == (std::vector<long>({(long)30, (long)65, (long)105})));",
            "}"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a cppthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool dif_Square(long n) {\n    long a = 1, b = 1;\n    while (a < n) {\n        a *= 2;\n    }\n    while (b < n) {\n        b *= 2;\n    }\n    return a - b == 0;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = dif_Square;",
            "assert(candidate((5)) == (true));",
            "assert(candidate((10)) == (false));",
            "assert(candidate((15)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::any> consecutive_duplicates(std::vector<std::any> nums) {\n    std::vector<std::any> result;\n    std::any first = nums[0];\n    for (int i = 1; i < nums.size(); ++i) {\n        if (nums[i] == first) {\n            result.push_back(nums[i]);\n        } else {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = consecutive_duplicates;",
            "assert(candidate((std::vector<std::any>({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4}))) == (std::vector<std::any>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)4})));",
            "assert(candidate((std::vector<std::any>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10}))) == (std::vector<std::any>({(long)10, (long)15, (long)19, (long)18, (long)17, (long)26, (long)17, (long)18, (long)10})));",
            "assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\"}))) == (std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})));",
            "assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\", (std::string)\"a\", (std::string)\"a\"}))) == (std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"a\"})));",
            "}"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat lateralsurface_cone(long r, long h) {\n    float r2 = r*r;\n    float h2 = h*h;\n    float r3 = r2*r2;\n    float h3 = h2*h2;\n    float r4 = r3*r3;\n    float h4 = h3*h3;\n    float r5 = r4*r4;\n    float h5 = h4*h4;\n    float r6 = r5*r5;\n    float h6 = h5*h5;\n    float r7 = r6*r6;\n    float h7 = h6*h6;\n    float r8 = r7*r7;\n    float h8 = h7*h7;\n    float r9 = r8*r8;\n    float h9 = h8*h8;\n    float r10 = r9*r9;\n    float h10 = h9*h9;\n    float r11 = r10*r10;\n    float h11 = h10*h10;\n    float r12 = r11*r11;\n    float h12 = h11*h11;\n    float r13 = r12*r12;\n    float h13 = h12*h12;\n    float r14 = r13*r13;\n    float h14 = h13*h13;\n    float r15 = r14*r14;\n    float h15 = h14*h14;\n    float r16 = r15*r15;\n    float h16 = h15*h15;\n    float r17 = r16*r16;\n    float h17 = h16*h16;\n    float r18 = r17*r17;\n    float h18 = h17*h17;\n    float r19 = r18*r18;\n    float h19 = h18*h18;\n    float r20 = r19*r19;\n    float h20 = h19*h19;\n    float\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = lateralsurface_cone;",
            "assert(candidate((5), (12)) == (204.20352248333654f));",
            "assert(candidate((10), (15)) == (566.3586699569488f));",
            "assert(candidate((19), (17)) == (1521.8090132193388f));",
            "}"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string replace_specialchar(std::string text) {\n    std::string result;\n    std::string::iterator it = text.begin();\n    while (it!= text.end()) {\n        if (*it =='' || *it == ',' || *it == '.') {\n            result.push_back(*it);\n        } else {\n            result.push_back(':');\n            result.push_back(*it);\n        }\n        ++it;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = replace_specialchar;",
            "assert(candidate((\"Python language, Programming language.\")) == (\"Python:language::Programming:language:\"));",
            "assert(candidate((\"a b c,d e f\")) == (\"a:b:c:d:e:f\"));",
            "assert(candidate((\"ram reshma,ram rahim\")) == (\"ram:reshma:ram:rahim\"));",
            "}"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_first_occurrence(std::vector<long> A, long x) {\n    long i = 0;\n    while(i < A.size() && A[i] == x) {\n        i++;\n    }\n    return i;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_first_occurrence;",
            "assert(candidate((std::vector<long>({(long)2, (long)5, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (1));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (2));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (6)) == (4));",
            "}"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a cppthon function to find sum of products of all possible subvectors of a given vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_Of_Subarray_Prod(std::vector<long> arr) {\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_Of_Subarray_Prod;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (20));",
            "assert(candidate((std::vector<long>({(long)1, (long)2}))) == (5));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (84));",
            "}"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong toggle_middle_bits(long n) {\n    long m = n;\n    long first = 1;\n    long last = 0;\n    while (m) {\n        if (m & 1) {\n            first++;\n        } else {\n            last++;\n        }\n        m >>= 1;\n    }\n    return first;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = toggle_middle_bits;",
            "assert(candidate((9)) == (15));",
            "assert(candidate((10)) == (12));",
            "assert(candidate((11)) == (13));",
            "assert(candidate((65)) == (127));",
            "assert(candidate((77)) == (115));",
            "}"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/cppthon-exercises/data-structures-and-algorithms/cppthon-data-structure-exercise-24.php",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong left_insertion(std::vector<long> a, long x) {\n    long i = 0;\n    while (i < a.size() && a[i] <= x) {\n        i++;\n    }\n    return i;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = left_insertion;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (6)) == (4));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (3)) == (2));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (7)) == (4));",
            "}"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_str(std::string string) {\n    std::regex re(\"[aeiou]\");\n    std::smatch what;\n    if (std::regex_search(string, what, re)) {\n        return what[1].str()[0] == 'a' || what[1].str()[0] == 'e' || what[1].str()[0] == 'i' || what[1].str()[0] == 'o' || what[1].str()[0] == 'u';\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_str;",
            "assert(candidate((\"annie\")) == (true));",
            "assert(candidate((\"dawood\")) == (false));",
            "assert(candidate((\"Else\")) == (true));",
            "}"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/cppthon-exercises/data-structures-and-algorithms/cppthon-recursion-exercise-9.php",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat geometric_sum(long n) {\n    float sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = geometric_sum;",
            "assert(candidate((7)) == (1.9921875f));",
            "assert(candidate((4)) == (1.9375f));",
            "assert(candidate((8)) == (1.99609375f));",
            "}"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_Index(long n) {\n    long i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_Index;",
            "assert(candidate((2)) == (4));",
            "assert(candidate((3)) == (14));",
            "assert(candidate((4)) == (45));",
            "}"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> tuple_to_dict(std::tuple<long, long, long, long, long, long> test_tup) {\n  std::map<long,long> map;\n  for (auto i = 0; i < test_tup.size(); i++) {\n    map[test_tup[i]] = i;\n  }\n  return map;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = tuple_to_dict;",
            "assert(candidate((std::make_tuple(1, 5, 7, 10, 13, 5))) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));",
            "assert(candidate((std::make_tuple(1, 2, 3, 4, 5, 6))) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));",
            "assert(candidate((std::make_tuple(7, 8, 9, 10, 11, 12))) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));",
            "}"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a cppthon function to check whether all the characters are same or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool all_Characters_Same(std::string s) {\n    std::string::iterator it = s.begin();\n    while (it!= s.end()) {\n        if (*it!= *(it + 1)) {\n            return false;\n        }\n        ++it;\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = all_Characters_Same;",
            "assert(candidate((\"python\")) == (false));",
            "assert(candidate((\"aaa\")) == (true));",
            "assert(candidate((\"data\")) == (false));",
            "}"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat area_tetrahedron(long side) {\n  float area = 0;\n  long i, j, k;\n  for (i = 0; i < 4; i++) {\n    for (j = 0; j < 4; j++) {\n      for (k = 0; k < 4; k++) {\n        if (i == j && k == side) {\n          area += 1;\n        }\n      }\n    }\n  }\n  return area;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = area_tetrahedron;",
            "assert(candidate((3)) == (15.588457268119894f));",
            "assert(candidate((20)) == (692.8203230275509f));",
            "assert(candidate((10)) == (173.20508075688772f));",
            "}"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/cppthon-program-right-rotate-vector-n/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    if (n == 0) return result;\n    if (n == 1) return list;\n    if (n == 2) return list;\n    if (n == 3) return list;\n    if (n == 4) return list;\n    if (n == 5) return list;\n    if (n == 6) return list;\n    if (n == 7) return list;\n    if (n == 8) return list;\n    if (n == 9) return list;\n    if (n == 10) return list;\n    if (n == 11) return list;\n    if (n == 12) return list;\n    if (n == 13) return list;\n    if (n == 14) return list;\n    if (n == 15) return list;\n    if (n == 16) return list;\n    if (n == 17) return list;\n    if (n == 18) return list;\n    if (n == 19) return list;\n    if (n == 20) return list;\n    if (n == 21) return list;\n    if (n == 22) return list;\n    if (n == 23) return list;\n    if (n == 24) return list;\n    if (n == 25) return list;\n    if (n == 26) return list;\n    if (n == 27) return list;\n    if (n == 28) return list;\n    if (n == 29) return list;\n    if (n == 30) return list;\n    if (n == 31) return list;\n    if (n == 32) return list;\n    if (n == 33) return list;\n    if (n == 34) return list;\n    if (n == 35) return list;\n    if (n == 36) return\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = rotate_right;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));",
            "}"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given tuple has any none value or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_none(std::any test_tup) {\n    for(int i = 0; i < test_tup.size(); i++) {\n        if(test_tup[i] == std::numeric_limits<int>::min()) {\n            return true;\n        }\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_none;",
            "assert(candidate(std::make_tuple(std::optional<long>(10), std::optional<long>(4), std::optional<long>(5), std::optional<long>(6), std::optional<long>(std::nullopt))) == (true));",
            "assert(candidate(std::make_tuple(7, 8, 9, 11, 14)) == (false));",
            "assert(candidate(std::make_tuple(std::optional<long>(1), std::optional<long>(2), std::optional<long>(3), std::optional<long>(4), std::optional<long>(std::nullopt))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/cppthon-exercises/lambda/cppthon-lambda-exercise-24.php",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> divisible_by_digits(long startnum, long endnum) {\n    std::vector<long> result;\n    long num = startnum;\n    while (num <= endnum) {\n        if (num % 10 == 0) {\n            result.push_back(num);\n        }\n        num = num / 10;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = divisible_by_digits;",
            "assert(candidate((1), (22)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)11, (long)12, (long)15, (long)22})));",
            "assert(candidate((1), (15)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)11, (long)12, (long)15})));",
            "assert(candidate((20), (25)) == (std::vector<long>({(long)22, (long)24})));",
            "}"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::optional<float> sector_area(long r, long a) {\n    if (a > 360) {\n        return None;\n    }\n    return std::abs(r / std::cos(a));\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sector_area;",
            "assert(candidate((4), (45)) == 6.283185307179586f);",
            "assert(candidate((9), (45)) == 31.808625617596654f);",
            "assert(candidate((9), (361)) == std::nullopt);",
            "}"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong lcs_of_three(std::string X, std::string Y, std::string Z) {\n    std::string X_copy = X;\n    std::string Y_copy = Y;\n    std::string Z_copy = Z;\n    std::string X_copy_copy = X_copy;\n    std::string Y_copy_copy = Y_copy;\n    std::string Z_copy_copy = Z_copy;\n    std::string X_copy_copy_copy = X_copy_copy;\n    std::string Y_copy_copy_copy = Y_copy_copy;\n    std::string Z_copy_copy_copy = Z_copy_copy;\n    std::string X_copy_copy_copy_copy = X_copy_copy_copy;\n    std::string Y_copy_copy_copy_copy = Y_copy_copy_copy;\n    std::string Z_copy_copy_copy_copy = Z_copy_copy_copy;\n    std::string X_copy_copy_copy_copy_copy = X_copy_copy_copy_copy;\n    std::string Y_copy_copy_copy_copy_copy = Y_copy_copy_copy_copy;\n    std::string Z_copy_copy_copy_copy_copy = Z_copy_copy_copy_copy;\n    std::string X_copy_copy_copy_copy_copy_copy = X_copy_copy_copy_copy_copy;\n    std::string Y_copy_copy_copy_copy_copy_copy = Y_copy_copy_copy_copy_copy;\n    std::string Z_copy_copy_copy_copy_copy_copy_copy = Z_copy_copy_copy_copy_copy_copy;\n    std::string X_copy_copy_copy_copy_copy_copy_copy_copy = X_copy_copy_copy_copy_copy_copy_copy;\n    \n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = lcs_of_three;",
            "assert(candidate((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2));",
            "assert(candidate((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5));",
            "assert(candidate((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3));",
            "}"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string capital_words_spaces(std::string str1) {\n    std::string str2;\n    std::string::iterator it;\n    for (it = str1.begin(); it!= str1.end(); ++it) {\n        if (*it =='') {\n            str2.push_back(' ');\n        } else {\n            str2.push_back(*it);\n        }\n    }\n    return str2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = capital_words_spaces;",
            "assert(candidate((\"Python\")) == (\"Python\"));",
            "assert(candidate((\"PythonProgrammingExamples\")) == (\"Python Programming Examples\"));",
            "assert(candidate((\"GetReadyToBeCodingFreak\")) == (\"Get Ready To Be Coding Freak\"));",
            "}"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/cppthon-sort-numeric-strings-in-a-vector/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> sort_numeric_strings(std::vector<std::string> nums_str) {\n    std::vector<long> nums(nums_str.size());\n    for (int i = 0; i < nums_str.size(); i++) {\n        nums[i] = atoi(nums_str[i].c_str());\n    }\n    std::sort(nums.begin(), nums.end());\n    return nums;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sort_numeric_strings;",
            "assert(candidate((std::vector<std::string>({(std::string)\"4\", (std::string)\"12\", (std::string)\"45\", (std::string)\"7\", (std::string)\"0\", (std::string)\"100\", (std::string)\"200\", (std::string)\"-12\", (std::string)\"-500\"}))) == (std::vector<long>({(long)-500, (long)-12, (long)0, (long)4, (long)7, (long)12, (long)45, (long)100, (long)200})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"2\", (std::string)\"3\", (std::string)\"8\", (std::string)\"4\", (std::string)\"7\", (std::string)\"9\", (std::string)\"8\", (std::string)\"2\", (std::string)\"6\", (std::string)\"5\", (std::string)\"1\", (std::string)\"6\", (std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"6\", (std::string)\"9\", (std::string)\"1\", (std::string)\"2\"}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)8, (long)9, (long)9})));",
            "assert(candidate((std::vector<std::string>({(std::string)\"1\", (std::string)\"3\", (std::string)\"5\", (std::string)\"7\", (std::string)\"1\", (std::string)\"3\", (std::string)\"13\", (std::string)\"15\", (std::string)\"17\", (std::string)\"5\", (std::string)\"7 \", (std::string)\"9\", (std::string)\"1\", (std::string)\"11\"}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)3, (long)3, (long)5, (long)5, (long)7, (long)7, (long)9, (long)11, (long)13, (long)15, (long)17})));",
            "}"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n    std::vector<std::string>::iterator it;\n    for (it = colors.begin(); it!= colors.end(); it++) {\n        if (it == patterns.begin()) {\n            return true;\n        }\n        if (*it == *(it + 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_samepatterns;",
            "assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"green\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (true));",
            "assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (false));",
            "assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given tuple to the given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> add_tuple(std::vector<long> test_list, std::tuple<long, long> test_tup) {\n    std::vector<long> result;\n    long sum = 0;\n    for (auto i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n        result.push_back(sum);\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = add_tuple;",
            "assert(candidate((std::vector<long>({(long)5, (long)6, (long)7})), (std::make_tuple(9, 10))) == (std::vector<long>({(long)5, (long)6, (long)7, (long)9, (long)10})));",
            "assert(candidate((std::vector<long>({(long)6, (long)7, (long)8})), (std::make_tuple(10, 11))) == (std::vector<long>({(long)6, (long)7, (long)8, (long)10, (long)11})));",
            "assert(candidate((std::vector<long>({(long)7, (long)8, (long)9})), (std::make_tuple(11, 12))) == (std::vector<long>({(long)7, (long)8, (long)9, (long)11, (long)12})));",
            "}"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_min_heap(std::vector<long> arr) {\n    long min = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return min == arr[0];\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_min_heap;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)10, (long)15}))) == (true));",
            "assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)5, (long)3, (long)15}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong jacobsthal_num(long n) {\n    long jacobsthal = 0;\n    while (n > 0) {\n        n = n / 2;\n        if (n == 1) {\n            return jacobsthal;\n        }\n        if (n == 2) {\n            return jacobsthal + jacobsthal;\n        }\n        if (n == 3) {\n            return jacobsthal + jacobsthal + jacobsthal;\n        }\n        if (n == 5) {\n            return jacobsthal + jacobsthal + jacobsthal + jacobsthal;\n        }\n        if (n == 11) {\n            return jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal;\n        }\n        if (n == 21) {\n            return jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal;\n        }\n        if (n == 43) {\n            return jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal;\n        }\n        if (n == 85) {\n            return jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal + jacobsthal;\n        }\n        if (n == 171) {\n            return jacobsthal + jacobsthal + jacobsthal + jacobsthal +\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = jacobsthal_num;",
            "assert(candidate((5)) == (11));",
            "assert(candidate((2)) == (1));",
            "assert(candidate((4)) == (5));",
            "assert(candidate((13)) == (2731));",
            "}"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/cppthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cocpp of test cases",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<std::string, long>> min_k(std::vector<std::tuple<std::string, long>> test_list, long K) {\n    std::vector<std::tuple<std::string, long>> result;\n    std::vector<std::tuple<std::string, long>>::iterator it;\n    for (it = test_list.begin(); it!= test_list.end(); it++) {\n        if (it->first.size() < K) {\n            result.push_back(*it);\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = min_k;",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Nikhil\", 8)})), (2)) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4)})));",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Sanjeev\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})), (3)) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})));",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"tanmay\", 14), (std::tuple<std::string, long>)std::make_tuple(\"Amer\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9), (std::tuple<std::string, long>)std::make_tuple(\"SKD\", 16)})), (1)) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9)})));",
            "}"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::any> extract_index_list(std::vector<long> l1, std::vector<long> l2, std::vector<long> l3) {\n    std::vector<long> common;\n    long index_l1 = 0, index_l2 = 0, index_l3 = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[index_l2]) {\n            index_l2++;\n        } else if (l1[i] == l3[index_l3]) {\n            index_l3++;\n        } else {\n            common.push_back(l1[i]);\n            index_l1 = i;\n            index_l2 = index_l3 = 0;\n        }\n    }\n    return common;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = extract_index_list;",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::vector<std::any>({(long)1, (long)7})));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)6, (long)5})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)6, (long)7}))) == (std::vector<std::any>({(long)1, (long)6})));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)6, (long)5, (long)6})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::vector<std::any>({(long)1, (long)5})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)6, (long)6})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::vector<std::any>()));",
            "}"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "Write a function to find the second smallest number in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float{\n    long f0;\n    float f1;    Union_long_float(long _f0) : f0(_f0) {}\n    Union_long_float(float _f1) : f1(_f1) {}\n    ~Union_long_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\nstd::optional<float> second_smallest(std::vector<Union_long_float> numbers) {\n    union Union_long_float temp;\n    for(auto i = numbers.begin(); i!= numbers.end(); ++i) {\n        temp = *i;\n        if(temp.f1 < temp.f0) {\n            temp.f0 = temp.f1;\n            return temp.f0;\n        }\n    }\n    return std::nullopt;\n}\nstd::optional<float> second_smallest(std::vector<Union_long_float> numbers, int n) {\n    union Union_long_float temp;\n    for(auto i = numbers.begin(); i!= numbers.end(); ++i) {\n        temp = *i;\n        if(temp.f1 < temp.f0) {\n            temp.f0 = temp.f1;\n            return temp.f0;\n        }\n    }\n    return std::nullopt;\n}\nstd::optional<float> second_smallest(std::vector<Union_long_float> numbers, int n, int m) {\n    union Union_long_float temp;\n    for(auto i = numbers.begin(); i!= numbers.end(); ++i) {\n        temp = *i;\n        if(temp.f1 < temp.f0) {\n            temp.f0 = temp.f1;\n            return temp.f0\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = second_smallest;",
            "assert(candidate((std::vector<Union_long_float>({(long)1, (long)2, (long)-8, (long)-2, (long)0, (long)-2}))) == -2);",
            "assert(candidate((std::vector<Union_long_float>({(long)1, (long)1, (long)-0.5f, (long)0, (long)2, (long)-2, (long)-2}))) == -0.5f);",
            "assert(candidate((std::vector<Union_long_float>({(long)2, (long)2}))) == std::nullopt);",
            "assert(candidate((std::vector<Union_long_float>({(long)2, (long)2, (long)2}))) == std::nullopt);",
            "}"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/cppthon-exercises/re/cppthon-re-exercise-3.php",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool text_match_zero_one(std::string text) {\n    std::string::size_type pos = 0;\n    while (pos < text.size() && text[pos] == 'a') {\n        pos++;\n    }\n    return pos == text.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = text_match_zero_one;",
            "assert(candidate((\"ac\")) == (false));",
            "assert(candidate((\"dc\")) == (false));",
            "assert(candidate((\"abbbba\")) == (true));",
            "assert(candidate((\"dsabbbba\")) == (true));",
            "assert(candidate((\"asbbbba\")) == (false));",
            "assert(candidate((\"abaaa\")) == (true));",
            "}"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/cppthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_reverse_pairs(std::vector<std::string> test_list) {\n    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_reverse_pairs;",
            "assert(candidate((std::vector<std::string>({(std::string)\"julia\", (std::string)\"best\", (std::string)\"tseb\", (std::string)\"for\", (std::string)\"ailuj\"}))) == (2));",
            "assert(candidate((std::vector<std::string>({(std::string)\"geeks\", (std::string)\"best\", (std::string)\"for\", (std::string)\"skeeg\"}))) == (1));",
            "assert(candidate((std::vector<std::string>({(std::string)\"makes\", (std::string)\"best\", (std::string)\"sekam\", (std::string)\"for\", (std::string)\"rof\"}))) == (2));",
            "}"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_decimal(std::string num) {\n    std::string::iterator it = num.begin();\n    while (it!= num.end()) {\n        if (*it == '.') {\n            if (it == num.end() - 1) {\n                return false;\n            }\n            it++;\n        } else if (*it == '0') {\n            if (it == num.end() - 1) {\n                return false;\n            }\n            it++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_decimal;",
            "assert(candidate((\"123.11\")) == (true));",
            "assert(candidate((\"e666.86\")) == (false));",
            "assert(candidate((\"3.124587\")) == (false));",
            "assert(candidate((\"1.11\")) == (true));",
            "assert(candidate((\"1.1.11\")) == (false));",
            "}"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find tuples which have all elements divisible by k from the given vector of tuples.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<long, long, long>> find_tuples(std::vector<std::tuple<long, long, long>> test_list, long K) {\n    std::vector<std::tuple<long, long, long>> result;\n    std::vector<std::tuple<long, long, long>>::iterator it;\n    for (it = test_list.begin(); it!= test_list.end(); it++) {\n        if (it->first % K == 0) {\n            result.push_back(*it);\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_tuples;",
            "assert(candidate((std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(6, 24, 12), (std::tuple<long, long, long>)std::make_tuple(7, 9, 6), (std::tuple<long, long, long>)std::make_tuple(12, 18, 21)})), (6)) == (std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(6, 24, 12)})));",
            "assert(candidate((std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(5, 25, 30), (std::tuple<long, long, long>)std::make_tuple(4, 2, 3), (std::tuple<long, long, long>)std::make_tuple(7, 8, 9)})), (5)) == (std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(5, 25, 30)})));",
            "assert(candidate((std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(7, 9, 16), (std::tuple<long, long, long>)std::make_tuple(8, 16, 4), (std::tuple<long, long, long>)std::make_tuple(19, 17, 18)})), (4)) == (std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(8, 16, 4)})));",
            "}"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool unique_Element(std::vector<long> arr) {\n    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]!= arr[i]) {\n            return false;\n        }\n        count++;\n    }\n    return count == 1;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = unique_Element;",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_monthnumber_number(long monthnum3) {\n    long monthnum = monthnum3;\n    long monthnum2 = monthnum / 12;\n    long monthnum1 = monthnum % 12;\n    if (monthnum1 == 1) {\n        if (monthnum2 == 1) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        if (monthnum2 == 1) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_monthnumber_number;",
            "assert(candidate((6)) == (true));",
            "assert(candidate((2)) == (false));",
            "assert(candidate((12)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a cppthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_min_diff(std::vector<long> arr, long n) {\n    long min = arr[0];\n    for (long i = 1; i < n; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return min;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_min_diff;",
            "assert(candidate((std::vector<long>({(long)1, (long)5, (long)3, (long)19, (long)18, (long)25})), (6)) == (1));",
            "assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)6})), (4)) == (1));",
            "assert(candidate((std::vector<long>({(long)30, (long)5, (long)20, (long)9})), (4)) == (4));",
            "}"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a cppthon function to count number of digits in a given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong number_ctr(std::string str) {\n    long ret = 0;\n    for (int i = 0; i < str.size(); i++) {\n        ret += str[i] - '0';\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = number_ctr;",
            "assert(candidate((\"program2bedone\")) == (1));",
            "assert(candidate((\"3wonders\")) == (1));",
            "assert(candidate((\"123\")) == (3));",
            "assert(candidate((\"3wond-1ers2\")) == (3));",
            "}"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong is_polite(long n) {\n    long i = 0;\n    while(i < n) {\n        if(n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_polite;",
            "assert(candidate((7)) == (11));",
            "assert(candidate((4)) == (7));",
            "assert(candidate((9)) == (13));",
            "}"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return a vector of all pairs of consecutive items in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<long, long>> pair_wise(std::vector<long> l1) {\n    std::vector<std::tuple<long, long>> v;\n    std::vector<long>::iterator it;\n    for(it = l1.begin(); it!= l1.end(); it++) {\n        v.push_back(std::make_tuple(*it));\n    }\n    return v;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = pair_wise;",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(3, 3), (std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(4, 4), (std::tuple<long, long>)std::make_tuple(4, 5)})));",
            "assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 5), (std::tuple<long, long>)std::make_tuple(5, 7), (std::tuple<long, long>)std::make_tuple(7, 9), (std::tuple<long, long>)std::make_tuple(9, 10)})));",
            "assert(candidate((std::vector<long>({(long)5, (long)1, (long)9, (long)7, (long)10}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(1, 9), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(7, 10)})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(4, 5), (std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(9, 10)})));",
            "}"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a cppthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a vector of numbers and the sum,",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong get_pairs_count(std::vector<long> arr, long sum) {\n    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == sum) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = get_pairs_count;",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1})), (2)) == (6));",
            "assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)-1, (long)5})), (6)) == (3));",
            "assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3})), (1)) == (1));",
            "assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)3})), (-3)) == (1));",
            "}"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a cppthon function to get the difference between two vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> Diff(std::vector<long> li1, std::vector<long> li2) {\n    std::vector<long> res;\n    long sum = 0;\n    for (long i = 0; i < li1.size(); i++) {\n        sum += li1[i] - li2[i];\n    }\n    res.push_back(sum);\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = Diff;",
            "assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25, (long)30, (long)35, (long)40})), (std::vector<long>({(long)25, (long)40, (long)35}))) == (std::vector<long>({(long)10, (long)20, (long)30, (long)15})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<long>({(long)6, (long)7, (long)1}))) == (std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)6, (long)7, (long)1}))) == (std::vector<long>({(long)2, (long)3, (long)6, (long)7})));",
            "}"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a cppthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong odd_num_sum(long n) {\n    long sum = 1;\n    while (n) {\n        sum += n;\n        n /= 2;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = odd_num_sum;",
            "assert(candidate((2)) == (82));",
            "assert(candidate((3)) == (707));",
            "assert(candidate((4)) == (3108));",
            "}"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_expression(std::string exp) {\n    int n = exp.size();\n    int m = n - 1;\n    int i = 0;\n    while (i < n) {\n        if (exp[i] == '(') {\n            if (i == 0) {\n                return false;\n            }\n            i++;\n        } else if (exp[i] == ')') {\n            if (i == m) {\n                return false;\n            }\n            i++;\n        } else {\n            i++;\n        }\n    }\n    return true;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_expression;",
            "assert(candidate((\"{()}[{}]\")) == (true));",
            "assert(candidate((\"{()}[{]\")) == (false));",
            "assert(candidate((\"{()}[{}][]({})\")) == (true));",
            "}"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string remove_length(std::string test_str, long K) {\n    std::string result_str;\n    std::string temp_str;\n    std::string temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_str;\n    std::string temp_temp_temp_\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_length;",
            "assert(candidate((\"The person is most value tet\"), (3)) == (\"person is most value\"));",
            "assert(candidate((\"If you told me about this ok\"), (4)) == (\"If you me about ok\"));",
            "assert(candidate((\"Forces of darkeness is come into the play\"), (4)) == (\"Forces of darkeness is the\"));",
            "}"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::optional<std::tuple<std::string, long, long>> occurance_substring(std::string text, std::string pattern) {\n    std::string::size_type pos = text.find(pattern);\n    if (pos == std::string::npos)\n        return None;\n    else\n        return std::make_tuple(text.substr(0, pos), pos, pos + pattern.size());\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = occurance_substring;",
            "assert(candidate((\"python programming, python language\"), (\"python\")) == std::make_tuple(\"python\", 0, 6));",
            "assert(candidate((\"python programming,programming language\"), (\"programming\")) == std::make_tuple(\"programming\", 7, 18));",
            "assert(candidate((\"python programming,programming language\"), (\"language\")) == std::make_tuple(\"language\", 31, 39));",
            "assert(candidate((\"c++ programming, c++ language\"), (\"python\")) == std::nullopt);",
            "}"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a cppthon function to check whether every odd index contains odd numbers of a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool odd_position(std::vector<long> nums) {\n    long odd = 0;\n    for(long i = 0; i < nums.size(); i++) {\n        if(nums[i] % 2 == 1) odd++;\n    }\n    return odd == nums.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = odd_position;",
            "assert(candidate((std::vector<long>({(long)2, (long)1, (long)4, (long)3, (long)6, (long)7, (long)6, (long)3}))) == (true));",
            "assert(candidate((std::vector<long>({(long)4, (long)1, (long)2}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_vowels(std::string test_str) {\n    std::string test_str_copy = test_str;\n    std::string::iterator it = test_str_copy.begin();\n    std::string::iterator it_end = test_str_copy.end();\n    std::string::iterator it_next = it;\n    std::string::iterator it_next_end = it_end;\n    while (it!= it_end) {\n        if (*it == 'a' || *it == 'e' || *it == 'i' || *it == 'o' || *it == 'u') {\n            it++;\n        } else {\n            break;\n        }\n    }\n    while (it!= it_end) {\n        if (*it == 'a' || *it == 'e' || *it == 'i' || *it == 'o' || *it == 'u') {\n            it++;\n        } else {\n            break;\n        }\n    }\n    std::string::iterator it_next_next = it_next;\n    std::string::iterator it_next_next_end = it_next_next;\n    while (it_next!= it_next_end) {\n        if (*it_next == 'a' || *it_next == 'e' || *it_next == 'i' || *it_next == 'o' || *it_next == 'u') {\n            it_next++;\n        } else {\n            break;\n        }\n    }\n    std::string::iterator it_next_next_end = it_next_next;\n    while (it_next_next!= it_next_next_end) {\n        if (*it_next_next == 'a' || *it_next_next == 'e' || *it_next_next == 'i' || *it_next_next == 'o' || *it_next_next == 'u') {\n            it_next_next++;\n        } else {\n            break;\n        \n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_vowels;",
            "assert(candidate((\"bestinstareels\")) == (7));",
            "assert(candidate((\"partofthejourneyistheend\")) == (12));",
            "assert(candidate((\"amazonprime\")) == (5));",
            "}"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a cppthon function to find the sum of non-repeated elements in a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for (auto i = 0; i < arr.size(); ++i) {\n        if (arr[i]!= 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_sum;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));",
            "assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));",
            "assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));",
            "}"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given vector elements into subvectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<std::any>> pack_consecutive_duplicates(std::vector<std::any> list1) {\n    std::vector<std::vector<std::any>> result;\n    std::vector<std::any> list2;\n    for (auto i = 0; i < list1.size(); i++) {\n        if (list1[i] == list2[i]) {\n            list2.push_back(list1[i]);\n        } else {\n            list2.push_back(list1[i]);\n            list1.erase(list1.begin() + i);\n        }\n    }\n    result.push_back(list2);\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = pack_consecutive_duplicates;",
            "assert(candidate((std::vector<std::any>({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4}))) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)6, (long)6}), (std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)8}), (std::vector<long>)std::vector<long>({(long)9}), (std::vector<long>)std::vector<long>({(long)4, (long)4})})));",
            "assert(candidate((std::vector<std::any>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10}))) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)10, (long)10}), (std::vector<long>)std::vector<long>({(long)15}), (std::vector<long>)std::vector<long>({(long)19}), (std::vector<long>)std::vector<long>({(long)18, (long)18}), (std::vector<long>)std::vector<long>({(long)17}), (std::vector<long>)std::vector<long>({(long)26, (long)26}), (std::vector<long>)std::vector<long>({(long)17}), (std::vector<long>)std::vector<long>({(long)18}), (std::vector<long>)std::vector<long>({(long)10})})));",
            "assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\"}))) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"a\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"d\"})})));",
            "}"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a cppthon function to find whether a number is divisible by 11.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_Diff(long n) {\n    long i = 1;\n    while (i <= n) {\n        if (n % i == 0) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_Diff;",
            "assert(candidate((12345)) == (false));",
            "assert(candidate((1212112)) == (true));",
            "assert(candidate((1212)) == (false));",
            "}"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/cppthon-combinations-of-sum-with-tuples-in-tuple-vector/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<long, long>> find_combinations(std::vector<std::tuple<long, long>> test_list) {\n    std::vector<std::tuple<long, long>> result;\n    std::vector<std::tuple<long, long>> temp;\n    std::vector<long> temp_list;\n    for (auto i = 0; i < test_list.size(); i++) {\n        temp_list.push_back(test_list[i].first);\n        temp.push_back(test_list[i].second);\n    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i = 0; i < temp.size(); i++) {\n        result.push_back(std::make_tuple(temp[i].first, temp[i].second));\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_combinations;",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(6, 10)}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(8, 11), (std::tuple<long, long>)std::make_tuple(7, 5), (std::tuple<long, long>)std::make_tuple(8, 14), (std::tuple<long, long>)std::make_tuple(11, 8), (std::tuple<long, long>)std::make_tuple(12, 17), (std::tuple<long, long>)std::make_tuple(11, 11)})));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(6, 2), (std::tuple<long, long>)std::make_tuple(7, 11)}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(10, 13), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(10, 16), (std::tuple<long, long>)std::make_tuple(13, 10), (std::tuple<long, long>)std::make_tuple(14, 19), (std::tuple<long, long>)std::make_tuple(13, 13)})));",
            "assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(7, 3), (std::tuple<long, long>)std::make_tuple(8, 12)}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(12, 15), (std::tuple<long, long>)std::make_tuple(11, 9), (std::tuple<long, long>)std::make_tuple(12, 18), (std::tuple<long, long>)std::make_tuple(15, 12), (std::tuple<long, long>)std::make_tuple(16, 21), (std::tuple<long, long>)std::make_tuple(15, 15)})));",
            "}"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a cppthon function to check whether the count of divisors is even. https://www.w3resource.com/cppthon-exercises/basic/cppthon-basic-1-exercise-24.php",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool count_divisors(long n) {\n    long m = 1;\n    while (m*m <= n) {\n        m *= 2;\n    }\n    return m%2 == 0;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_divisors;",
            "assert(candidate((10)) == (true));",
            "assert(candidate((100)) == (false));",
            "assert(candidate((125)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a cppthon function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong odd_length_sum(std::vector<long> arr) {\n  long sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 1) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = odd_length_sum;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4}))) == (14));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (15));",
            "assert(candidate((std::vector<long>({(long)1, (long)7}))) == (8));",
            "}"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<float> rgb_to_hsv(long r, long g, long b) {\n    float r_r = (float)r / 255.0;\n    float g_g = (float)g / 255.0;\n    float b_b = (float)b / 255.0;\n    float h, s, v;\n    if (r_r < 0.0) {\n        h = (float)b_b / (float)g_g;\n        s = (float)g_g / (float)r_r;\n        v = (float)r_r / (float)g_g;\n    } else if (r_r > 0.0) {\n        h = (float)g_b / (float)r_r;\n        s = (float)r_r / (float)g_g;\n        v = (float)r_r / (float)b_b;\n    } else {\n        h = (float)g_g / (float)r_r;\n        s = (float)r_r / (float)g_g;\n        v = (float)r_r / (float)b_b;\n    }\n    float h_h = h / 60.0;\n    float h_s = s / 60.0;\n    float h_v = v / 60.0;\n    return std::vector<float> {h_h, h_s, h_v};\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = rgb_to_hsv;",
            "assert(candidate((255), (255), (255)) == (std::vector<float>({(float)0.0f, (float)0.0f, (float)100.0f})));",
            "assert(candidate((0), (215), (0)) == (std::vector<float>({(float)120.0f, (float)100.0f, (float)84.31372549019608f})));",
            "assert(candidate((10), (215), (110)) == (std::vector<float>({(float)149.26829268292684f, (float)95.34883720930233f, (float)84.31372549019608f})));",
            "}"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong mul_even_odd(std::vector<long> list1) {\n    long product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            product *= list1[i];\n        }\n    }\n    return product;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = mul_even_odd;",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));",
            "assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));",
            "}"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert tuple string to integer tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long> tuple_str_int(std::string test_str) {\n  std::vector<std::string> test_str_vec;\n  std::stringstream ss(test_str);\n  std::getline(ss, test_str_vec, ',');\n  std::vector<std::string> test_str_vec2;\n  std::getline(ss, test_str_vec2, ',');\n  std::vector<std::string> test_str_vec3;\n  std::getline(ss, test_str_vec3, ',');\n  std::vector<std::string> test_str_vec4;\n  std::getline(ss, test_str_vec4, ',');\n  std::vector<std::string> test_str_vec5;\n  std::getline(ss, test_str_vec5, ',');\n  std::vector<std::string> test_str_vec6;\n  std::getline(ss, test_str_vec6, ',');\n  std::vector<std::string> test_str_vec7;\n  std::getline(ss, test_str_vec7, ',');\n  std::vector<std::string> test_str_vec8;\n  std::getline(ss, test_str_vec8, ',');\n  std::vector<std::string> test_str_vec9;\n  std::getline(ss, test_str_vec9, ',');\n  std::vector<std::string> test_str_vec10;\n  std::getline(ss, test_str_vec10, ',');\n  std::vector<std::string> test_str_vec11;\n  std::getline(ss, test_str_vec11, ',');\n  std::vector<std::string> test_str_vec12;\n  std::getline(ss, test_str_vec12, ',');\n  std::vector<std::string> test_\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = tuple_str_int;",
            "assert(candidate((\"(7, 8, 9)\")) == (std::make_tuple(7, 8, 9)));",
            "assert(candidate((\"(1, 2, 3)\")) == (std::make_tuple(1, 2, 3)));",
            "assert(candidate((\"(4, 5, 6)\")) == (std::make_tuple(4, 5, 6)));",
            "assert(candidate((\"(7, 81, 19)\")) == (std::make_tuple(7, 81, 19)));",
            "}"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong right_insertion(std::vector<long> a, long x) {\n    long i = 0;\n    while(i < a.size() && a[i] <= x) {\n        i++;\n    }\n    return i;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = right_insertion;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (6)) == (4));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (3)) == (2));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (7)) == (4));",
            "}"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool text_match_three(std::string text) {\n    int i = 0;\n    while (i < text.size() && text[i] == 'a' && text[i+1] == 'b') {\n        i++;\n    }\n    return i == text.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = text_match_three;",
            "assert(candidate((\"ac\")) == (false));",
            "assert(candidate((\"dc\")) == (false));",
            "assert(candidate((\"abbbba\")) == (true));",
            "assert(candidate((\"caacabbbba\")) == (true));",
            "}"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new tuple from the given string and vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, std::string, std::string> new_tuple(std::vector<std::string> test_list, std::string test_str) {\n    std::string new_str;\n    std::string new_str_1;\n    std::string new_str_2;\n    std::string new_str_3;\n    std::string new_str_4;\n    std::string new_str_5;\n    std::string new_str_6;\n    std::string new_str_7;\n    std::string new_str_8;\n    std::string new_str_9;\n    std::string new_str_10;\n    std::string new_str_11;\n    std::string new_str_12;\n    std::string new_str_13;\n    std::string new_str_14;\n    std::string new_str_15;\n    std::string new_str_16;\n    std::string new_str_17;\n    std::string new_str_18;\n    std::string new_str_19;\n    std::string new_str_20;\n    std::string new_str_21;\n    std::string new_str_22;\n    std::string new_str_23;\n    std::string new_str_24;\n    std::string new_str_25;\n    std::string new_str_26;\n    std::string new_str_27;\n    std::string new_str_28;\n    std::string new_str_29;\n    std::string new_str_30;\n    std::string new_str_31;\n    std::string new_str_32;\n    std::string new_str_33;\n    std::string new_str_34;\n    std::string new_str_35;\n    std::string new_str_36;\n    std::string new_str_37;\n    std::string new_str_38;\n    std::string new\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = new_tuple;",
            "assert(candidate((std::vector<std::string>({(std::string)\"WEB\", (std::string)\"is\"})), (\"best\")) == (std::make_tuple(\"WEB\", \"is\", \"best\")));",
            "assert(candidate((std::vector<std::string>({(std::string)\"We\", (std::string)\"are\"})), (\"Developers\")) == (std::make_tuple(\"We\", \"are\", \"Developers\")));",
            "assert(candidate((std::vector<std::string>({(std::string)\"Part\", (std::string)\"is\"})), (\"Wrong\")) == (std::make_tuple(\"Part\", \"is\", \"Wrong\")));",
            "}"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a cppthon function to check whether every even index contains even numbers of a given vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool even_position(std::vector<long> nums) {\n    long sum = 0;\n    for(long i = 0; i < nums.size(); i++) {\n        if(nums[i] % 2 == 0) {\n            sum += nums[i];\n        }\n    }\n    return sum % 2 == 0;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = even_position;",
            "assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (false));",
            "assert(candidate((std::vector<long>({(long)2, (long)1, (long)4}))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Write a function to remove tuples from the given tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long, long, long> remove_nested(std::any test_tup) {\n  std::tuple<long, long, long, long> result;\n  long n = test_tup.size();\n  long i = 0;\n  long j = 0;\n  long k = 0;\n  while (i < n) {\n    if (test_tup[i] == '(') {\n      i++;\n      j++;\n    } else if (test_tup[i] == ')') {\n      i++;\n      j--;\n    } else if (test_tup[i] == ',') {\n      i++;\n      j++;\n    } else if (test_tup[i] == ')') {\n      i++;\n      j--;\n    } else if (test_tup[i] == '(') {\n      i++;\n      k++;\n    } else if (test_tup[i] == ')') {\n      i++;\n      k--;\n    } else {\n      result.push_back(test_tup[i]);\n      i++;\n    }\n  }\n  return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_nested;",
            "assert(candidate(std::make_tuple(1, 5, 7, std::make_tuple(4, 6), 10)) == (std::make_tuple(1, 5, 7, 10)));",
            "assert(candidate(std::make_tuple(2, 6, 8, std::make_tuple(5, 7), 11)) == (std::make_tuple(2, 6, 8, 11)));",
            "assert(candidate(std::make_tuple(3, 7, 9, std::make_tuple(6, 8), 12)) == (std::make_tuple(3, 7, 9, 12)));",
            "assert(candidate(std::make_tuple(3, 7, 9, std::make_tuple(6, 8), std::make_tuple(5, 12), 12)) == (std::make_tuple(3, 7, 9, 12)));",
            "}"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a cppthon function to count the number of vectors in a given number of vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_list(std::vector<std::vector<long>> input_list) {\n    long count = 0;\n    for(auto it = input_list.begin(); it!= input_list.end(); it++) {\n        count += it->size();\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_list;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == (4));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5})}))) == (3));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)2, (long)0})}))) == (2));",
            "}"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a cppthon function to find the last position of an element in a sorted vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong last(std::vector<long> arr, long x) {\n    long i = arr.size() - 1;\n    while (i >= 0) {\n        if (arr[i] == x) {\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = last;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (1)) == (0));",
            "assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)4})), (1)) == (2));",
            "assert(candidate((std::vector<long>({(long)2, (long)3, (long)2, (long)3, (long)6, (long)8, (long)9})), (3)) == (3));",
            "}"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool text_starta_endb(std::string text) {\n    int i = 0;\n    while (i < text.size() && text[i] == 'a') {\n        i++;\n    }\n    return i == text.size();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = text_starta_endb;",
            "assert(candidate((\"aabbbb\")) == (true));",
            "assert(candidate((\"aabAbbbc\")) == (false));",
            "assert(candidate((\"accddbbjjj\")) == (false));",
            "}"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given map.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong return_sum(std::map<std::string,long> dict) {\n    long sum=0;\n    std::map<std::string,long>::iterator it;\n    for(it=dict.begin();it!=dict.end();it++) {\n        sum+=it->second;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = return_sum;",
            "assert(candidate((std::map<std::string,long>({{\"a\", 100}, {\"b\", 200}, {\"c\", 300}}))) == (600));",
            "assert(candidate((std::map<std::string,long>({{\"a\", 25}, {\"b\", 18}, {\"c\", 45}}))) == (88));",
            "assert(candidate((std::map<std::string,long>({{\"a\", 36}, {\"b\", 39}, {\"c\", 49}}))) == (124));",
            "}"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a cppthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_in_range(long l, long r) {\n    long sum = 0;\n    while (l <= r) {\n        sum += l % 2;\n        l /= 2;\n    }\n    return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sum_in_range;",
            "assert(candidate((2), (5)) == (8));",
            "assert(candidate((5), (7)) == (12));",
            "assert(candidate((7), (13)) == (40));",
            "}"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a cppthon function to find the sum of a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong _sum(std::vector<long> arr) {\n  long sum = 0;\n  for (auto i = arr.begin(); i!= arr.end(); ++i) {\n    sum += *i;\n  }\n  return sum;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = _sum;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));",
            "assert(candidate((std::vector<long>({(long)15, (long)12, (long)13, (long)10}))) == (50));",
            "assert(candidate((std::vector<long>({(long)0, (long)1, (long)2}))) == (3));",
            "}"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong left_rotate(long n, long d) {\n    long r = n;\n    while (r & 1) {\n        r >>= 1;\n        r |= r << 1;\n    }\n    return r;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = left_rotate;",
            "assert(candidate((16), (2)) == (64));",
            "assert(candidate((10), (2)) == (40));",
            "assert(candidate((99), (3)) == (792));",
            "assert(candidate((99), (3)) == (792));",
            "assert(candidate((1), (3)) == (8));",
            "assert(candidate((5), (3)) == (40));",
            "assert(candidate((29), (3)) == (232));",
            "}"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a cppthon function to check whether the length of the word is odd or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool word_len(std::string s) {\n    int len = s.size();\n    if (len % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = word_len;",
            "assert(candidate((\"Hadoop\")) == (false));",
            "assert(candidate((\"great\")) == (true));",
            "assert(candidate((\"structure\")) == (true));",
            "}"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string remove_all_spaces(std::string text) {\n    std::string result;\n    for (std::string::iterator it = text.begin(); it!= text.end(); ++it) {\n        if (*it =='') {\n            *it = '\\0';\n        }\n        result.push_back(*it);\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = remove_all_spaces;",
            "assert(candidate((\"python  program\")) == (\"pythonprogram\"));",
            "assert(candidate((\"python   programming    language\")) == (\"pythonprogramminglanguage\"));",
            "assert(candidate((\"python                     program\")) == (\"pythonprogram\"));",
            "assert(candidate((\"   python                     program\")) == (\"pythonprogram\"));",
            "}"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a cppthon function to count the number of equal numbers from three given integers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong test_three_equal(long x, long y, long z) {\n    long result = 0;\n    if (x == y) {\n        result = 1;\n    } else if (x == z) {\n        result = 2;\n    } else if (y == z) {\n        result = 3;\n    } else {\n        result = 4;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = test_three_equal;",
            "assert(candidate((1), (1), (1)) == (3));",
            "assert(candidate((-1), (-2), (-3)) == (0));",
            "assert(candidate((1), (2), (2)) == (2));",
            "}"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a cppthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_rotation(std::vector<long> arr) {\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = count_rotation;",
            "assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (1));",
            "assert(candidate((std::vector<long>({(long)4, (long)5, (long)1, (long)2, (long)3}))) == (2));",
            "assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1, (long)2, (long)3}))) == (3));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (0));",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (2));",
            "}"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_perfect_square(long n) {\n    long m = n;\n    long k = 1;\n    while (k <= m) {\n        if (k % 2 == 0) {\n            if (k == m) {\n                return true;\n            }\n            k++;\n        } else {\n            if (k == m) {\n                return false;\n            }\n            k++;\n        }\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_perfect_square;",
            "assert(candidate((10)) == (false));",
            "assert(candidate((36)) == (true));",
            "assert(candidate((14)) == (false));",
            "assert(candidate((196)) == (true));",
            "assert(candidate((125)) == (false));",
            "assert(candidate((15625)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in a vector is even or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_product_even(std::vector<long> arr) {\n    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum % 2 == 0;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_product_even;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)4}))) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)1}))) == (false));",
            "}"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the vector in a vector of vectors whose sum of elements is the highest.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> max_sum_list(std::vector<std::vector<long>> lists) {\n    std::vector<long> result;\n    for (auto& list : lists) {\n        result.push_back(list.at(0));\n        for (auto& item : list) {\n            result.push_back(item);\n        }\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_sum_list;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)10, (long)11, (long)12})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)6, (long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)12, (long)11, (long)10})}))) == (std::vector<long>({(long)12, (long)11, (long)10})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3, (long)1})}))) == (std::vector<long>({(long)2, (long)3, (long)1})));",
            "}"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] == 'U') {\n            max_run = max(max_run, i + 1);\n        }\n    }\n    return max_run;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = max_run_uppercase;",
            "assert(candidate((\"GeMKSForGERksISBESt\")) == (5));",
            "assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));",
            "assert(candidate((\"GooGLEFluTTER\")) == (4));",
            "}"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a cppthon function to find the first odd number in a given vector of numbers.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong first_odd(std::vector<long> nums) {\n    long odd = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 == 1) {\n            odd = nums[i];\n            break;\n        }\n    }\n    return odd;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = first_odd;",
            "assert(candidate((std::vector<long>({(long)1, (long)3, (long)5}))) == (1));",
            "assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3}))) == (1));",
            "assert(candidate((std::vector<long>({(long)8, (long)9, (long)1}))) == (9));",
            "}"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given tuples contain the k or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_K(std::vector<long> test_tup, long K) {\n    std::vector<long>::iterator it;\n    for(it=test_tup.begin(); it!=test_tup.end(); it++) {\n        if(*it==K) return true;\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_K;",
            "assert(candidate((std::vector<long>({(long)10, (long)4, (long)5, (long)6, (long)8})), (6)) == (true));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (7)) == (false));",
            "assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)44, (long)11, (long)12})), (11)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_smaller(std::tuple<long, long, long> test_tup1, std::tuple<long, long, long> test_tup2) {\n    long min_val = std::get<0>(test_tup1);\n    long max_val = std::get<1>(test_tup1);\n    long min_val2 = std::get<0>(test_tup2);\n    long max_val2 = std::get<1>(test_tup2);\n    return min_val < min_val2 && max_val < max_val2;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = check_smaller;",
            "assert(candidate((std::make_tuple(1, 2, 3)), (std::make_tuple(2, 3, 4))) == (false));",
            "assert(candidate((std::make_tuple(4, 5, 6)), (std::make_tuple(3, 4, 5))) == (true));",
            "assert(candidate((std::make_tuple(11, 12, 13)), (std::make_tuple(10, 11, 12))) == (true));",
            "}"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong tetrahedral_number(long n) {\n    long ret = 0;\n    while (n > 0) {\n        ret += n % 10;\n        n /= 10;\n    }\n    return ret;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = tetrahedral_number;",
            "assert(candidate((5)) == (35));",
            "assert(candidate((6)) == (56));",
            "assert(candidate((7)) == (84));",
            "}"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a cppthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string get_Char(std::string strr) {\n    std::string result;\n    for (int i = 0; i < strr.size(); i++) {\n        if (strr[i] == 'A' || strr[i] == 'a') {\n            result += 'A';\n        } else if (strr[i] == 'B' || strr[i] == 'b') {\n            result += 'B';\n        } else if (strr[i] == 'C' || strr[i] == 'c') {\n            result += 'C';\n        } else if (strr[i] == 'D' || strr[i] == 'd') {\n            result += 'D';\n        } else if (strr[i] == 'E' || strr[i] == 'e') {\n            result += 'E';\n        } else if (strr[i] == 'F' || strr[i] == 'f') {\n            result += 'F';\n        } else if (strr[i] == 'G' || strr[i] == 'g') {\n            result += 'G';\n        } else if (strr[i] == 'H' || strr[i] == 'h') {\n            result += 'H';\n        } else if (strr[i] == 'I' || strr[i] == 'i') {\n            result += 'I';\n        } else if (strr[i] == 'J' || strr[i] == 'j') {\n            result += 'J';\n        } else if (strr[i] == 'K' || strr[i] == 'k') {\n            result += 'K';\n        } else if (strr[i] == 'L' || strr[i] == 'l') {\n            result += 'L';\n        } else if (strr[i] == 'M' || strr[i] =='m') {\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = get_Char;",
            "assert(candidate((\"abc\")) == (\"f\"));",
            "assert(candidate((\"gfg\")) == (\"t\"));",
            "assert(candidate((\"ab\")) == (\"c\"));",
            "}"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sequence(long n) {\n    long ans = 0;\n    while (n > 0) {\n        ans += n % 10;\n        n /= 10;\n    }\n    return ans;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = sequence;",
            "assert(candidate((10)) == (6));",
            "assert(candidate((2)) == (1));",
            "assert(candidate((3)) == (2));",
            "}"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong centered_hexagonal_number(long n) {\n    long i = 0;\n    while (i < n) {\n        i++;\n    }\n    return i;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = centered_hexagonal_number;",
            "assert(candidate((10)) == (271));",
            "assert(candidate((2)) == (7));",
            "assert(candidate((9)) == (217));",
            "}"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single map.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::string> merge_dictionaries_three(std::map<std::string,std::string> dict1, std::map<std::string,std::string> dict2, std::map<std::string,std::string> dict3) {\n    std::map<std::string,std::string> result;\n    std::map<std::string,std::string>::iterator it;\n    for(it=dict1.begin(); it!=dict1.end(); it++) {\n        result[it->first]=it->second;\n    }\n    for(it=dict2.begin(); it!=dict2.end(); it++) {\n        result[it->first]=it->second;\n    }\n    for(it=dict3.begin(); it!=dict3.end(); it++) {\n        result[it->first]=it->second;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = merge_dictionaries_three;",
            "assert(candidate((std::map<std::string,std::string>({{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}})), (std::map<std::string,std::string>({{\"G\", \"Green\"}, {\"W\", \"White\"}})), (std::map<std::string,std::string>({{\"O\", \"Orange\"}, {\"W\", \"White\"}, {\"B\", \"Black\"}}))) == (std::map<std::string,std::string>({{\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"P\", \"Pink\"}, {\"G\", \"Green\"}, {\"W\", \"White\"}, {\"O\", \"Orange\"}})));",
            "assert(candidate((std::map<std::string,std::string>({{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}})), (std::map<std::string,std::string>({{\"G\", \"Green\"}, {\"W\", \"White\"}})), (std::map<std::string,std::string>({{\"L\", \"lavender\"}, {\"B\", \"Blue\"}}))) == (std::map<std::string,std::string>({{\"W\", \"White\"}, {\"P\", \"Pink\"}, {\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}})));",
            "assert(candidate((std::map<std::string,std::string>({{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}})), (std::map<std::string,std::string>({{\"L\", \"lavender\"}, {\"B\", \"Blue\"}})), (std::map<std::string,std::string>({{\"G\", \"Green\"}, {\"W\", \"White\"}}))) == (std::map<std::string,std::string>({{\"B\", \"Black\"}, {\"P\", \"Pink\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}, {\"W\", \"White\"}})));",
            "}"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in a vector, returned as a map.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> freq_count(std::vector<long> list1) {\n    std::map<long,long> map;\n    for(long i=0;i<list1.size();i++) {\n        map[list1[i]]++;\n    }\n    return map;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = freq_count;",
            "assert(candidate((std::vector<long>({(long)10, (long)10, (long)10, (long)10, (long)20, (long)20, (long)20, (long)20, (long)40, (long)40, (long)50, (long)50, (long)30}))) == (std::map<long,long>({{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}})));",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)4, (long)1, (long)3, (long)1, (long)4}))) == (std::map<long,long>({{1, 3}, {2, 2}, {3, 3}, {4, 3}})));",
            "assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)4, (long)9, (long)10, (long)4, (long)5, (long)6, (long)7, (long)9, (long)5}))) == (std::map<long,long>({{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}})));",
            "}"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong closest_num(long N) {\n  long min = 0;\n  long max = N;\n  long mid = N / 2;\n  while (mid > 0) {\n    if (N % mid == 0) {\n      min = mid;\n      max = N;\n    }\n    mid /= 2;\n  }\n  return min;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = closest_num;",
            "assert(candidate((11)) == (10));",
            "assert(candidate((7)) == (6));",
            "assert(candidate((12)) == (11));",
            "}"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in a vector.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> square_nums(std::vector<long> nums) {\n  std::vector<long> res;\n  long sum = 0;\n  for (long i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum % 2 == 0) {\n      res.push_back(i);\n    }\n  }\n  return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = square_nums;",
            "assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25, (long)36, (long)49, (long)64, (long)81, (long)100})));",
            "assert(candidate((std::vector<long>({(long)10, (long)20, (long)30}))) == (std::vector<long>({(long)100, (long)400, (long)900})));",
            "assert(candidate((std::vector<long>({(long)12, (long)15}))) == (std::vector<long>({(long)144, (long)225})));",
            "}"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a cppthon function to find the length of the longest word.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong len_log(std::vector<std::string> list1) {\n    long res = 0;\n    for (auto &s : list1) {\n        res = max(res, len_log(s.begin(), s.end()));\n    }\n    return res;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = len_log;",
            "assert(candidate((std::vector<std::string>({(std::string)\"python\", (std::string)\"PHP\", (std::string)\"bigdata\"}))) == (7));",
            "assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))) == (3));",
            "assert(candidate((std::vector<std::string>({(std::string)\"small\", (std::string)\"big\", (std::string)\"tall\"}))) == (5));",
            "}"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given vector of string values.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n    std::string::size_type pos = 0;\n    std::string::size_type len = str1.size();\n    while (pos < len) {\n        if (str1[pos] == sub_str) {\n            return true;\n        }\n        pos++;\n    }\n    return false;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_substring;",
            "assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"orange\"})), (\"ack\")) == (true));",
            "assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"orange\"})), (\"abc\")) == (false));",
            "assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"orange\"})), (\"ange\")) == (true));",
            "}"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_undulating(long n) {\n    if(n == 0) return true;\n    if(n == 1) return false;\n    if(n == 2) return true;\n    if(n == 3) return false;\n    if(n == 4) return true;\n    if(n == 5) return false;\n    if(n == 6) return true;\n    if(n == 7) return false;\n    if(n == 8) return true;\n    if(n == 9) return false;\n    if(n == 10) return true;\n    if(n == 11) return false;\n    if(n == 12) return true;\n    if(n == 13) return false;\n    if(n == 14) return true;\n    if(n == 15) return false;\n    if(n == 16) return true;\n    if(n == 17) return false;\n    if(n == 18) return true;\n    if(n == 19) return false;\n    if(n == 20) return true;\n    if(n == 21) return false;\n    if(n == 22) return true;\n    if(n == 23) return false;\n    if(n == 24) return true;\n    if(n == 25) return false;\n    if(n == 26) return true;\n    if(n == 27) return false;\n    if(n == 28) return true;\n    if(n == 29) return false;\n    if(n == 30) return true;\n    if(n == 31) return false;\n    if(n == 32) return true;\n    if(n == 33) return false;\n    if(n == 34) return true;\n    if(n == 35) return false;\n    if(n == 36) return true;\n    if(n == 37) return false;\n    if(n == 38) return true;\n    if(n == 39) return false;\n    if(n == 40) return true;\n    if(n == 41) return false;\n    if\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = is_undulating;",
            "assert(candidate((1212121)) == (true));",
            "assert(candidate((1991)) == (false));",
            "assert(candidate((121)) == (true));",
            "}"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong power(long a, long b) {\n    long result = 1;\n    while (b) {\n        result *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n        a *= a;\n\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = power;",
            "assert(candidate((3), (4)) == (81));",
            "assert(candidate((2), (3)) == (8));",
            "assert(candidate((5), (5)) == (3125));",
            "}"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string index_minimum(std::vector<std::tuple<std::string, long>> test_list) {\n    std::string result;\n    std::vector<std::tuple<std::string, long>>::iterator it = test_list.begin();\n    while (it!= test_list.end()) {\n        if (it->first < result) {\n            result = it->first;\n        }\n        ++it;\n    }\n    return result;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = index_minimum;",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Rash\", 143), (std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 200), (std::tuple<std::string, long>)std::make_tuple(\"Varsha\", 100)}))) == (\"Varsha\"));",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Yash\", 185), (std::tuple<std::string, long>)std::make_tuple(\"Dawood\", 125), (std::tuple<std::string, long>)std::make_tuple(\"Sanya\", 175)}))) == (\"Dawood\"));",
            "assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Sai\", 345), (std::tuple<std::string, long>)std::make_tuple(\"Salman\", 145), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 96)}))) == (\"Ayesha\"));",
            "}"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a cppthon function to find the length of the smallest vector in a vector of vectors.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong Find_Min_Length(std::vector<std::vector<long>> lst) {\n    long min_length = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = Find_Min_Length;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2})}))) == (1));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4})}))) == (2));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4, (long)4, (long)4})}))) == (3));",
            "}"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a cppthon function to find the number of divisors of a given integer.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong divisor(long n) {\n    long d = 1;\n    while (n > 1) {\n        n /= 2;\n        d++;\n    }\n    return d;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = divisor;",
            "assert(candidate((15)) == (4));",
            "assert(candidate((12)) == (6));",
            "assert(candidate((9)) == (3));",
            "}"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened vector of vectors, returned in a map.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> frequency_lists(std::vector<std::vector<long>> list1) {\n    std::map<long,long> frequency_map;\n    for (auto &v : list1) {\n        for (auto &e : v) {\n            frequency_map[e]++;\n        }\n    }\n    return frequency_map;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = frequency_lists;",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)2}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6, (long)2}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9, (long)5})}))) == (std::map<long,long>({{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12})}))) == (std::map<long,long>({{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}})));",
            "assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)20, (long)30, (long)40, (long)17}), (std::vector<long>)std::vector<long>({(long)18, (long)16, (long)14, (long)13}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40})}))) == (std::map<long,long>({{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}})));",
            "}"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string decimal_to_binary(long n) {\n    std::stringstream ss;\n    ss << n;\n    return ss.str();\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = decimal_to_binary;",
            "assert(candidate((8)) == (\"1000\"));",
            "assert(candidate((18)) == (\"10010\"));",
            "assert(candidate((7)) == (\"111\"));",
            "}"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a cppthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong find_Rotations(std::string str) {\n    long rotations = 0;\n    std::string::size_type pos = 0;\n    std::string::size_type last_pos = 0;\n    std::string::size_type last_rotation = 0;\n    while (pos < str.size()) {\n        last_pos = pos;\n        last_rotation = 0;\n        while (pos < str.size() && str[pos] == str[last_pos]) {\n            last_rotation++;\n            pos++;\n        }\n        if (last_rotation > rotations) {\n            rotations = last_rotation;\n        }\n        last_pos = pos;\n        pos++;\n    }\n    return rotations;\n}\n",
        "test_list": [
            "int main() {",
            "auto candidate = find_Rotations;",
            "assert(candidate((\"aaaa\")) == (1));",
            "assert(candidate((\"ab\")) == (2));",
            "assert(candidate((\"abc\")) == (3));",
            "}"
        ]
    }
]