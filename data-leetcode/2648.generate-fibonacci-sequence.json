[
    {
        "title": "Generate Fibonacci Sequence",
        "question_content": "Write a generator function that returns a generator object which yields the&nbsp;fibonacci sequence.\nThe&nbsp;fibonacci sequence&nbsp;is defined by the relation Xn&nbsp;= Xn-1&nbsp;+ Xn-2.\nThe first few numbers&nbsp;of the series are 0, 1, 1, 2, 3, 5, 8, 13.\n&nbsp;\nExample 1:\n\nInput: callCount = 5\nOutput: [0,1,1,2,3]\nExplanation:\nconst gen = fibGenerator();\ngen.next().value; // 0\ngen.next().value; // 1\ngen.next().value; // 1\ngen.next().value; // 2\ngen.next().value; // 3\n\nExample 2:\n\nInput: callCount = 0\nOutput: []\nExplanation: gen.next() is never called so nothing is outputted\n\n&nbsp;\nConstraints:\n\n\t0 <= callCount <= 50",
        "solutions": [
            {
                "id": 3587908,
                "title": "easy-solution-2648-generate-fibonacci-sequence-level-up-your-js-skills-day-29",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. We can use a generator function to generate the Fibonacci sequence one number at a time.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize two variables, `current` and `next`, with values 0 and 1\\nrespectively. These variables represent the current Fibonacci number and the next Fibonacci number in the sequence.\\n2. Use a while loop to generate the Fibonacci sequence indefinitely.\\n3. Inside the loop, yield the value of `current` as the next value of the generator.\\n4. Update the values of `current` and `next` by swapping their values. Set `current` to the value of `next` and `next` to the sum of `current` and `next`.\\n5. Repeat steps 3 and 4 indefinitely to generate the Fibonacci sequence.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of generating the Fibonacci sequence using a generator function is $O(1)$ per iteration. This is because each Fibonacci number is generated on the fly as requested, without needing to generate the entire sequence in advance.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is $O(1)$ because we only need a constant amount of space to store the current and next Fibonacci numbers. The generator function does not require any additional space proportional to the size of the sequence.\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n  let current = 0; \\n  let next = 1;\\n\\n  while (true) {\\n    yield current; \\n\\n    [current, next] = [next, current + next];\\n\\n    // The above line is equivalent to the following:\\n    // let temp = current;\\n    // current = next;\\n    // next = temp + next;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n\\n\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n\\n## There are several ways to implement a Fibonacci generator in JavaScript. Here are a few alternative approaches:\\n- ## Implementation 1: Using a Closure\\n```JS []\\nconst fibGenerator = () => {\\n  let current = 0;\\n  let next = 1;\\n\\n  return () => {\\n    const result = current;\\n    [current, next] = [next, current + next];\\n    return result;\\n  };\\n};\\n\\nconst gen = fibGenerator();\\nconsole.log(gen()); // 0\\nconsole.log(gen()); // 1\\n\\n```\\n>In this approach, we use a closure to create a Fibonacci generator. The `fibGenerator` function returns another function that generates the Fibonacci numbers. The inner function keeps track of the `current` and `next` values using a closure. Each time the inner function is called, it calculates the next Fibonacci number, updates the values, and returns the current one.\\n\\n- ## Implementation 2: Using an Iterator\\n```JS []\\nconst fibGenerator = {\\n  [Symbol.iterator]: function*() {\\n    let current = 0;\\n    let next = 1;\\n\\n    while (true) {\\n      yield current;\\n      [current, next] = [next, current + next];\\n    }\\n  }\\n};\\n\\nconst gen = fibGenerator[Symbol.iterator]();\\nconsole.log(gen.next().value); // 0\\nconsole.log(gen.next().value); // 1\\n\\n```\\n>In this approach, we define `fibGenerator` as an object with a\\n`Symbol.iterator` method. The `Symbol.iterator` method is a generator\\nfunction that generates the Fibonacci sequence. We can then create an iterator by calling `fibGenerator[Symbol.iterator]()` and use it to retrieve the Fibonacci numbers.\\n\\n- ## Implementation 3: Using a Recursive Generator\\n``` JS []\\nfunction* fibGenerator(current = 0, next = 1) {\\n  yield current;\\n  yield* fibGenerator(next, current + next);\\n}\\n\\nconst gen = fibGenerator();\\nconsole.log(gen.next().value); // 0\\nconsole.log(gen.next().value); // 1\\n\\n```\\n>In this approach, we define the `fibGenerator` function as a recursive generator. It takes two parameters, `current` and `next`, representing the current and next Fibonacci numbers. It yields the current number and then delegates to itself with the updated values of `next` and `current + next`. This recursive generator generates the Fibonacci sequence indefinitely.\\n\\n- ## Implementation 4: Without using a generator function\\n``` JS []\\nconst fibGenerator = {\\n  current: 0,\\n  next: 1,\\n  nextNumber: function() {\\n    const result = this.current;\\n    [this.current, this.next] = [this.next, this.current + this.next];\\n    return result;\\n  }\\n};\\n\\nconsole.log(fibGenerator.nextNumber()); // 0\\nconsole.log(fibGenerator.nextNumber()); // 1\\n\\n```\\nIn this approach, we define `fibGenerator` as an object with properties `current` and `next` to store the current and next Fibonacci numbers, respectively. The `nextNumber` method calculates and returns the next Fibonacci number while updating the `current` and `next` properties accordingly.\\nTo generate Fibonacci numbers, you can simply call the `nextNumber` method of the `fibGenerator` object. Each call to `nextNumber` will return the next Fibonacci number in the sequence.\\n>Note: that this approach does not provide the infinite sequence of Fibonacci numbers like a generator function does. Instead, it generates the Fibonacci numbers one at a time upon each method call.\\n\\n\\n\\n# Important topic to Learn \\n\\n| Sr No. | Topic | Sr No. | Topic |\\n|-----|-----|-----|-----|\\n1.|Arrays , Array methods() |2.|Function programming *|\\n3.|Higher-order function|4.|Memoization|\\n5.|Currying|6.|Promises, async/await|\\n7.|Compare Objects|8.|Prototypes, inheritance|\\n9.|Generators, advanced iteration*|10.|----------------\\n>[ Note:- * marked is related to today\\'s problem ]\\n\\n<img src=\"https://media.giphy.com/media/Xd6WrGsyh1su7X0ZGF/giphy.gif\" width=\"40\">\\n\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D \\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```\\n\\n\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n  let current = 0; \\n  let next = 1;\\n\\n  while (true) {\\n    yield current; \\n\\n    [current, next] = [next, current + next];\\n\\n    // The above line is equivalent to the following:\\n    // let temp = current;\\n    // current = next;\\n    // next = temp + next;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n```JS []\\nconst fibGenerator = () => {\\n  let current = 0;\\n  let next = 1;\\n\\n  return () => {\\n    const result = current;\\n    [current, next] = [next, current + next];\\n    return result;\\n  };\\n};\\n\\nconst gen = fibGenerator();\\nconsole.log(gen()); // 0\\nconsole.log(gen()); // 1\\n\\n```\n```JS []\\nconst fibGenerator = {\\n  [Symbol.iterator]: function*() {\\n    let current = 0;\\n    let next = 1;\\n\\n    while (true) {\\n      yield current;\\n      [current, next] = [next, current + next];\\n    }\\n  }\\n};\\n\\nconst gen = fibGenerator[Symbol.iterator]();\\nconsole.log(gen.next().value); // 0\\nconsole.log(gen.next().value); // 1\\n\\n```\n``` JS []\\nfunction* fibGenerator(current = 0, next = 1) {\\n  yield current;\\n  yield* fibGenerator(next, current + next);\\n}\\n\\nconst gen = fibGenerator();\\nconsole.log(gen.next().value); // 0\\nconsole.log(gen.next().value); // 1\\n\\n```\n``` JS []\\nconst fibGenerator = {\\n  current: 0,\\n  next: 1,\\n  nextNumber: function() {\\n    const result = this.current;\\n    [this.current, this.next] = [this.next, this.current + this.next];\\n    return result;\\n  }\\n};\\n\\nconsole.log(fibGenerator.nextNumber()); // 0\\nconsole.log(fibGenerator.nextNumber()); // 1\\n\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3439825,
                "title": "yield-solution-with-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    // initialise first 2 sequence numbers\\n    // initialise a loop so that function can return values indefinitely when called\\n    // yield pauses fx execution and returns value, before continuing subsequent steps\\n    // fibonacci sequence is updated in steps after yield\\n        // note: \\n            // third term is the sum of first and second term\\n            // therefore: n term is sum of n-1 term + n-2 term\\n    let a = 0;\\n    let b = 1;\\n\\n    while (true){\\n        yield a;\\n        [a,b] = [b,a+b];\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    // initialise first 2 sequence numbers\\n    // initialise a loop so that function can return values indefinitely when called\\n    // yield pauses fx execution and returns value, before continuing subsequent steps\\n    // fibonacci sequence is updated in steps after yield\\n        // note: \\n            // third term is the sum of first and second term\\n            // therefore: n term is sum of n-1 term + n-2 term\\n    let a = 0;\\n    let b = 1;\\n\\n    while (true){\\n        yield a;\\n        [a,b] = [b,a+b];\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3588028,
                "title": "mastering-generator-functions-learn-with-exciting-examples-beginner-friendly-js-ts",
                "content": "# Generator functions \\uD83D\\uDE80\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n##### Generator functions are a special type of function in JavaScript that can be paused and resumed during execution. \\nYes, you heard it right, these functions can be magically paused during execution and can be resumed later. \\uD83E\\uDE84\\nThey allow you to generate a sequence of values on-the-fly instead of computing and storing them all at once. Here\\'s a simple example to help illustrate the concept:\\n\\n```\\nfunction* countToThree() {\\n  yield 1;\\n  yield 2;\\n  yield 3;\\n}\\n\\nconst generator = countToThree(); // Creating a generator object\\n\\nconsole.log(generator.next().value); // 1\\nconsole.log(generator.next().value); // 2\\nconsole.log(generator.next().value); // 3\\n```\\n\\n- We can then use the `next()` method on the generator object to get the next value in the sequence.\\n- The `value` property of the returned object gives us the yielded value.\\n\\n# Real-life implementations of generator functions can be found in various scenarios, such as:\\n\\n- **Iterating over large or infinite data sets:** Generator functions can be used to iterate over data that is too large to fit in memory all at once. Instead of loading the entire dataset into memory, you can generate and process the data one piece at a time, saving memory resources.\\n- **Asynchronous programming:** Generators can be combined with asynchronous operations to simplify asynchronous code. By using yield with promises or async/await syntax, you can write asynchronous code that looks more like synchronous code, making it easier to understand and maintain.\\n- **Parsing and tokenization:** Generator functions can be used in parsing or tokenization tasks. They can generate a sequence of tokens or parsed elements as needed, allowing you to process large streams of data efficiently.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n1. Define a generator function `fibGenerator`.\\n2. Initialize `current` to 0 and `next` to 1.\\n3. Use a loop to iterate `callCount` times.\\n    - Yield `next`.\\n    - Calculate the next Fibonacci number: `temp = current + next`, `current = next`, `next = temp`.\\n4. Return or yield any remaining Fibonacci numbers.\\n\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ (linear time) where `n` is the number of times the generator function is called.\\n\\n- Space complexity: $$O(1)$$ (constant space)\\n\\n<img src=\"https://assets.leetcode.com/users/images/b93dcc50-7e19-44d3-80ec-c41558d719ba_1684043630.2104852.png\" width=\"50%\">\\n\\n\\n# Code\\n``` javascript []\\nvar fibGenerator = function*() {\\n\\n  let current = 0; \\n  let next = 1;\\n\\n  while (true) {\\n    yield current; \\n    let temp = current + next;\\n    current = next;\\n    next = temp;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\\n\\n``` Typescript []\\nfunction* fibGenerator(): Generator<number, any, number> {\\n  let current = 0; \\n  let next = 1;\\n\\n  while (true) {\\n    yield current; \\n    // easier way to swap elements\\n    [current, next] = [next, current + next];\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction* countToThree() {\\n  yield 1;\\n  yield 2;\\n  yield 3;\\n}\\n\\nconst generator = countToThree(); // Creating a generator object\\n\\nconsole.log(generator.next().value); // 1\\nconsole.log(generator.next().value); // 2\\nconsole.log(generator.next().value); // 3\\n```\n``` javascript []\\nvar fibGenerator = function*() {\\n\\n  let current = 0; \\n  let next = 1;\\n\\n  while (true) {\\n    yield current; \\n    let temp = current + next;\\n    current = next;\\n    next = temp;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\n``` Typescript []\\nfunction* fibGenerator(): Generator<number, any, number> {\\n  let current = 0; \\n  let next = 1;\\n\\n  while (true) {\\n    yield current; \\n    // easier way to swap elements\\n    [current, next] = [next, current + next];\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3439599,
                "title": "the-best",
                "content": "```js\\nconst fibGenerator = function*() {\\n    let [a, b] = [0, 1]\\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a + b]\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst fibGenerator = function*() {\\n    let [a, b] = [0, 1]\\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a + b]\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3439913,
                "title": "javascript-detailed-explanation",
                "content": "Here, fibGenerator is a generator function that produces an infinite sequence of Fibonacci numbers. Each time you call fibGenerator().next().value, it will return the next number in the sequence.\\n\\nThe * symbol is used to denote that this function is a generator function. It allows the function to use the yield keyword to pause the function\\'s execution and return a value to the caller.\\n\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var a=0, b=1\\n    yield a\\n    yield b\\n    while(true){\\n        var c= a+b\\n        yield c\\n        a=b\\n        b=c\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var a=0, b=1\\n    yield a\\n    yield b\\n    while(true){\\n        var c= a+b\\n        yield c\\n        a=b\\n        b=c\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587777,
                "title": "java-script-solution-for-generate-fibonacci-sequence-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the fibGenerator function is to generate the Fibonacci sequence using a generator.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIt follows the approach of calculating the Fibonacci numbers iteratively by keeping track of the previous and current values. The function yields the Fibonacci numbers one by one as it is called\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the solution is O(n), where n is the number of Fibonacci numbers to be generated. The loop runs for n iterations, and in each iteration, a constant amount of work is done to calculate the next Fibonacci number.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the solution is O(1) because it only requires a constant amount of additional space to store the previous and current values.\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let prev = 0;\\n  let curr = 1;\\n\\n  yield prev; // Yield the initial value 0\\n  yield curr; // Yield the initial value 1\\n\\n  for (let i = 2; i <= 50; i++) {\\n    const next = prev + curr;\\n    yield next; // Yield the next Fibonacci number\\n    prev = curr;\\n    curr = next;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let prev = 0;\\n  let curr = 1;\\n\\n  yield prev; // Yield the initial value 0\\n  yield curr; // Yield the initial value 1\\n\\n  for (let i = 2; i <= 50; i++) {\\n    const next = prev + curr;\\n    yield next; // Yield the next Fibonacci number\\n    prev = curr;\\n    curr = next;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3453650,
                "title": "easy-recursive-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*(a = 0, b=1) {\\n    yield a;\\n    yield* fibGenerator(b, a+b);\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*(a = 0, b=1) {\\n    yield a;\\n    yield* fibGenerator(b, a+b);\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3439492,
                "title": "typescript-solution",
                "content": "For simplicity\\'s sake, we hardcode the first two `yield` values for `fib(0)` and `fib(1)`, then after that we use a loop to generate Fibonacci numbers as usual. Space complexity is O(1), and time complexity is O(1) per `next()` call.\\n\\n```typescript\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    // fib(0) === 0\\n    yield 0;\\n    // fib(1) === 1\\n    yield 1;\\n    \\n    let a: number = 0;\\n    let b: number = 1;\\n    \\n    while (true) {\\n        const c: number = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```typescript\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    // fib(0) === 0\\n    yield 0;\\n    // fib(1) === 1\\n    yield 1;\\n    \\n    let a: number = 0;\\n    let b: number = 1;\\n    \\n    while (true) {\\n        const c: number = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587979,
                "title": "fibonacci-generator-yield-dp",
                "content": "We define a generator function that yields the Fibonacci sequence. \\n\\nIt initializes an array with the first two Fibonacci numbers, `0` and `1`, and yields them. \\n\\nInside an infinite loop, it calculates the next Fibonacci number by adding the previous two numbers from the array and yields it. The array is then updated with the new values, shifting them to the left. \\n\\nBy reusing the previously calculated numbers, we avoid redundant calculations and improves performance. When the generator is called, it generates Fibonacci numbers lazily on-demand, allowing for efficient memory usage and flexibility.\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let fib = [0, 1];\\n\\n  yield fib[0];\\n  yield fib[1];\\n\\n  while (true) {\\n    let next = fib[0] + fib[1];\\n    yield next;\\n    fib[0] = fib[1];\\n    fib[1] = next;\\n  }\\n};\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Dynamic Programming"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let fib = [0, 1];\\n\\n  yield fib[0];\\n  yield fib[1];\\n\\n  while (true) {\\n    let next = fib[0] + fib[1];\\n    yield next;\\n    fib[0] = fib[1];\\n    fib[1] = next;\\n  }\\n};\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3533474,
                "title": "very-simple-and-easy-solution-in-javascript-wow-super-one-thanks-myself",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1\\n    yield 0\\n    yield 1\\n    while(true) {\\n        [a,b] = [b, a + b]\\n        yield b\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1\\n    yield 0\\n    yield 1\\n    while(true) {\\n        [a,b] = [b, a + b]\\n        yield b\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3446097,
                "title": "javascript-solution",
                "content": "\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var x=0,y=1\\n    yield x\\n    yield y\\n    while(true){\\n        var z=x+y\\n        yield z\\n        x=y\\n        y=z\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var x=0,y=1\\n    yield x\\n    yield y\\n    while(true){\\n        var z=x+y\\n        yield z\\n        x=y\\n        y=z\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587998,
                "title": "understand-generator-function-with-the-help-of-example",
                "content": "What is actually generators ?\\n\\nIn javascript generators are the functions which have special functionality, they can pause and resume during execution. (We define generator function with the help of special syntax , `function * generatorFunctionName() { }`)\\n\\nUnderstand with the help of example -\\n```\\nfunction* generatorFunction() {\\n  console.log(\\'Execution started\\');\\n  yield 1;\\n  console.log(\\'After first yield\\');\\n  yield 2;\\n  console.log(\\'After second yield\\');\\n  yield 3;\\n  console.log(\\'Execution completed\\');\\n}\\n\\nconst generator = generatorFunction(); // Creating an instance of the generator\\n\\nconsole.log(generator.next()); // Output: { value: 1, done: false }\\nconsole.log(generator.next()); // Output: { value: 2, done: false }\\nconsole.log(generator.next()); // Output: { value: 3, done: false }\\nconsole.log(generator.next()); // Output: { value: undefined, done: true }\\n```\\nWhen we call `generatorFunction()` it will not execute the function, instead of this it will return a generator object, which have `next` method, by calling next method we can resume the execution of generator.\\nWhen function see yield in function it will stop the execution and return the object which have to fields which store the yield value and done state of the function.\\n\\nWe can say we use next method to resume the execution of generator function and use yield keyword to pause the execution.\\n# Code\\n```\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    yield a;\\n    let b = 1;\\n    yield b;\\n    while(true){\\n        const fibNumber = a + b;\\n        a = b;\\n        b = fibNumber;\\n        yield fibNumber;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction* generatorFunction() {\\n  console.log(\\'Execution started\\');\\n  yield 1;\\n  console.log(\\'After first yield\\');\\n  yield 2;\\n  console.log(\\'After second yield\\');\\n  yield 3;\\n  console.log(\\'Execution completed\\');\\n}\\n\\nconst generator = generatorFunction(); // Creating an instance of the generator\\n\\nconsole.log(generator.next()); // Output: { value: 1, done: false }\\nconsole.log(generator.next()); // Output: { value: 2, done: false }\\nconsole.log(generator.next()); // Output: { value: 3, done: false }\\nconsole.log(generator.next()); // Output: { value: undefined, done: true }\\n```\n```\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    yield a;\\n    let b = 1;\\n    yield b;\\n    while(true){\\n        const fibNumber = a + b;\\n        a = b;\\n        b = fibNumber;\\n        yield fibNumber;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587957,
                "title": "easy-solutions",
                "content": "**Javascript Solution**\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let prev1 = 0, prev2 = 1;\\n\\n    while (true) {\\n      yield prev1;\\n      [prev1, prev2] = [prev2, prev1+prev2];\\n    }\\n\\n};\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\\n**Typescript Solution**\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n     let prev1:number = 0, prev2:number = 1;\\n\\n        while (true) {\\n          yield prev1;\\n          [prev1, prev2] = [prev2, prev1+prev2];\\n        }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let prev1 = 0, prev2 = 1;\\n\\n    while (true) {\\n      yield prev1;\\n      [prev1, prev2] = [prev2, prev1+prev2];\\n    }\\n\\n};\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n     let prev1:number = 0, prev2:number = 1;\\n\\n        while (true) {\\n          yield prev1;\\n          [prev1, prev2] = [prev2, prev1+prev2];\\n        }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587673,
                "title": "javascript-yield-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let prev1 = 0;\\n    let prev2 = 1;\\n\\n    while (true) {\\n      yield prev1;\\n      [prev1, prev2] = [prev2, prev1+prev2];\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let prev1 = 0;\\n    let prev2 = 1;\\n\\n    while (true) {\\n      yield prev1;\\n      [prev1, prev2] = [prev2, prev1+prev2];\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3577700,
                "title": "full-simple-explanation-beginner-friendly-introduction",
                "content": "# Approach\\nGenerator functions (indicated by the ```*``` in ```function*()```) is a function that allows you to iterate throughout code in a function to return different values by calling the same function. While this can be done with regular functions, the conveinent thing with generator functions is they allow you to use the keyword ```yield```, which allows you to stop in the middle of the code and return a value, then when you come back to the function with another call, you pick up where you left off. We can do this using the ```.next().value``` method call, which generator functions automatically have.\\n1. Initialize the first two numbers in the Fibonacci sequence with ```a = 0``` and ```b = 1```, of which ```a``` will always be smaller than ```b```.\\n2. Yield value a and value b in succession. When you make the first ```.next().value``` call, it will run into ```yield a``` and return 0, and on the second call will pick off from the ```yield a``` line, run into the ```yield b``` line, and return 1.\\n3. Make a forever running while loop, so we can generate as many numbers in the sequence as we\\'d like. In this sequence, we set ```c``` to ```a + b```, and yield the value ```c```. After the ```yield c``` line, set ```a = b``` and ```b = c```, for the next iteration of calculating ```c```.\\n\\n# Code\\n```\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    yield a; // first call returns 0\\n    yield b; // second call returns 1\\n\\n    let c;\\n    while (true) { // third call and after enters this loop\\n        c = a + b; // calculate c for current call\\n        yield c; // return c\\n\\n        // when another call is made, set a and b to next iteration to calculate next c value\\n        a = b;\\n        b = c;\\n    }\\n};\\n```\\nUPVOTE if this was helpful \\uD83C\\uDF5E\\uD83C\\uDF5E\\uD83C\\uDF5E",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```*```\n```function*()```\n```yield```\n```.next().value```\n```a = 0```\n```b = 1```\n```a```\n```b```\n```.next().value```\n```yield a```\n```yield a```\n```yield b```\n```c```\n```a + b```\n```c```\n```yield c```\n```a = b```\n```b = c```\n```c```\n```\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    yield a; // first call returns 0\\n    yield b; // second call returns 1\\n\\n    let c;\\n    while (true) { // third call and after enters this loop\\n        c = a + b; // calculate c for current call\\n        yield c; // return c\\n\\n        // when another call is made, set a and b to next iteration to calculate next c value\\n        a = b;\\n        b = c;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3457399,
                "title": "my-fibgenerator",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n  let count = 0;\\n  let a = 0;\\n  let b = 1;\\n  \\n  while (true) {\\n    if (count === 0) {\\n      yield a;\\n      count++;\\n    } else if (count === 1) {\\n      yield b;\\n      count++;\\n    } else {\\n      yield a + b;\\n      const sum = a + b;\\n      a = b;\\n      b = sum;\\n    }\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n  let count = 0;\\n  let a = 0;\\n  let b = 1;\\n  \\n  while (true) {\\n    if (count === 0) {\\n      yield a;\\n      count++;\\n    } else if (count === 1) {\\n      yield b;\\n      count++;\\n    } else {\\n      yield a + b;\\n      const sum = a + b;\\n      a = b;\\n      b = sum;\\n    }\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3451942,
                "title": "one-line-two-variables-without-destructuring-assignment",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIt\\'s like swapping two variables tricks.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n---\\n* You could find some other extraordinary solutions in my [profile](https://leetcode.com/almostmonday/) on the Solutions tab (I don\\'t post obvious or not interesting solutions at all.)\\n* If this was helpful, please upvote so that others can see this solution too.\\n---\\n\\n# Code\\n```\\nvar fibGenerator = function*() {\\n    for (let a = 0, b = 1; true; b += a, a = b - a) yield a;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\nvar fibGenerator = function*() {\\n    for (let a = 0, b = 1; true; b += a, a = b - a) yield a;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3442514,
                "title": "javascript-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let a1=0, a2=1;\\n  let next;\\n  while(true){\\n      next = a1+a2;\\n      yield a1;\\n      a1 = a2;\\n      a2 = next;\\n  }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let a1=0, a2=1;\\n  let next;\\n  while(true){\\n      next = a1+a2;\\n      yield a1;\\n      a1 = a2;\\n      a2 = next;\\n  }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3588377,
                "title": "typescript-solution",
                "content": "```\\nfunction* fibGenerator(): Generator<number> {\\n    let a = 0, b = 1\\n    \\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a+b]\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number> {\\n    let a = 0, b = 1\\n    \\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a+b]\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3565242,
                "title": "easy-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let pre = -1, cur = 1;\\n\\n  while (true) {\\n    yield pre + cur;\\n    let temp = pre + cur\\n    pre = cur;\\n    cur = temp\\n  }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let pre = -1, cur = 1;\\n\\n  while (true) {\\n    yield pre + cur;\\n    let temp = pre + cur\\n    pre = cur;\\n    cur = temp\\n  }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3536119,
                "title": "simple-js-solution-following-the-hints",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield 0\\n    yield 1\\n    let vals = [0, 1]\\n    while (true) {\\n        vals.push(vals[vals.length -1] + vals[vals.length -2])\\n        yield vals[vals.length - 1]\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield 0\\n    yield 1\\n    let vals = [0, 1]\\n    while (true) {\\n        vals.push(vals[vals.length -1] + vals[vals.length -2])\\n        yield vals[vals.length - 1]\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3445298,
                "title": "simple-recursive-solution",
                "content": "```javascript\\nvar fibGenerator = function*(a=0,b=1) {\\nyield* [a,b];\\nyield* fibGenerator(a+b, a+2*b);\\n};\\n```",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "```javascript\\nvar fibGenerator = function*(a=0,b=1) {\\nyield* [a,b];\\nyield* fibGenerator(a+b, a+2*b);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085263,
                "title": "js-abc",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1, c;\\n    while(true){\\n        yield a;\\n        c = a+b;\\n        a = b;\\n        b = c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1, c;\\n    while(true){\\n        yield a;\\n        c = a+b;\\n        a = b;\\n        b = c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074485,
                "title": "simple-but-powerful-solution-beats-over-87-of-users-at-runtime-and-over-99-of-users-at-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nbased on array records not variables and yield the current record array[i]\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nsimple array.push() method with loop statement \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\ntook me about 3 minutes to figure out which path i approach\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let arr=[];\\n    for(i=0;i<=100;i++){\\n        if(i<=1){\\n        arr.push(i);\\n        yield arr[i];\\n        }else{\\n        arr.push(arr[i-1]+arr[i-2]);\\n        yield arr[i];\\n        }\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let arr=[];\\n    for(i=0;i<=100;i++){\\n        if(i<=1){\\n        arr.push(i);\\n        yield arr[i];\\n        }else{\\n        arr.push(arr[i-1]+arr[i-2]);\\n        yield arr[i];\\n        }\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070085,
                "title": "using-yield",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let i=0, j=1;\\n    yield i;\\n    yield j;\\n    while(true){\\n        yield i+j;\\n        let temp = i;\\n        i = j;\\n        j = temp+j;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let i=0, j=1;\\n    yield i;\\n    yield j;\\n    while(true){\\n        yield i+j;\\n        let temp = i;\\n        i = j;\\n        j = temp+j;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069990,
                "title": "easy-js-solution-yield",
                "content": "# Refernces\\n- [function* and yield](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*)\\n- [Fibonacci sequence in JS](https://www.programiz.com/javascript/examples/fibonacci-series)\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let n1 = 0, n2 = 1, nextNum;\\n    while(true){\\n        yield n1\\n        nextNum = n1 + n2 \\n        n1 = n2\\n        n2 = nextNum\\n    }\\n};\\n\\n\\n```\\n# VOTE UP! PLS\\uD83E\\uDD7A\\n![Vote up.jpg](https://assets.leetcode.com/users/images/7f0308f7-724d-4bea-bd2e-713788159bd5_1695239026.7445886.jpeg)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let n1 = 0, n2 = 1, nextNum;\\n    while(true){\\n        yield n1\\n        nextNum = n1 + n2 \\n        n1 = n2\\n        n2 = nextNum\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066203,
                "title": "simple-c-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  yield 0;\\n  yield 1;\\n  let n1 = 0, n2 = 1;\\n    while(true)\\n    {\\n      let n = n1 + n2;\\n      n1 = n2;\\n      n2 = n;\\n      yield n;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  yield 0;\\n  yield 1;\\n  let n1 = 0, n2 = 1;\\n    while(true)\\n    {\\n      let n = n1 + n2;\\n      n1 = n2;\\n      n2 = n;\\n      yield n;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057548,
                "title": "easy-js-solution",
                "content": "# 2648. Generate Fibonacci Sequence\\n\\n## Code\\n```\\nvar fibGenerator = function*() {\\n    let f = [0, 1];\\n    while (true) {\\n        yield f[0];\\n        f = [f[1], f[0]+f[1]];        \\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar fibGenerator = function*() {\\n    let f = [0, 1];\\n    while (true) {\\n        yield f[0];\\n        f = [f[1], f[0]+f[1]];        \\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4054460,
                "title": "js-easy-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let current = 0\\n    let next = 1\\n\\n    while (true) {\\n        yield current\\n        let temp = current + next\\n        current = next\\n        next = temp\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let current = 0\\n    let next = 1\\n\\n    while (true) {\\n        yield current\\n        let temp = current + next\\n        current = next\\n        next = temp\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050558,
                "title": "simple-solution-with-array-loop-beats-94-93-of-javascrip",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\n\\n\\nvar fibGenerator = function* ()\\n{\\n    let arr = [];\\n    arr.push(0);\\n    for(let i = 1 ; i <= 50; i ++)\\n    {\\n        if(arr.length === 1) arr.push(i);\\n            arr.push(arr[i-1] + arr[i]);\\n    }\\n    let count = 0;\\n    while(true)\\n    {\\n        yield arr[count++];\\n    }\\n\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\n\\n\\nvar fibGenerator = function* ()\\n{\\n    let arr = [];\\n    arr.push(0);\\n    for(let i = 1 ; i <= 50; i ++)\\n    {\\n        if(arr.length === 1) arr.push(i);\\n            arr.push(arr[i-1] + arr[i]);\\n    }\\n    let count = 0;\\n    while(true)\\n    {\\n        yield arr[count++];\\n    }\\n\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4027214,
                "title": "simple-js-ts-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let firstNum = 0;\\n    let secondNum = 1;\\n    while (true) {\\n        yield firstNum;\\n        [firstNum, secondNum] = [secondNum, firstNum+secondNum];\\n    }\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let firstNum = 0;\\n    let secondNum = 1;\\n    while (true) {\\n        yield firstNum;\\n        [firstNum, secondNum] = [secondNum, firstNum+secondNum];\\n    }\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4013156,
                "title": "javascript-very-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nfunction* fibGenerator() {\\n    let prev = 0;\\n    let current = 1;\\n\\n    for (let i = 0; i < 50; i++) {\\n        yield prev;\\n        const next = prev + current;\\n        prev = current;\\n        current = next;\\n    }\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nfunction* fibGenerator() {\\n    let prev = 0;\\n    let current = 1;\\n\\n    for (let i = 0; i < 50; i++) {\\n        yield prev;\\n        const next = prev + current;\\n        prev = current;\\n        current = next;\\n    }\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4012623,
                "title": "fibonacci-sequence-generator-in-js",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let i = 0, j = 1, k = 2;\\n    yield i;\\n    yield j;\\n    while (true) {\\n        k = i + j;\\n        yield k;\\n        i = j;\\n        j = k;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let i = 0, j = 1, k = 2;\\n    yield i;\\n    yield j;\\n    while (true) {\\n        k = i + j;\\n        yield k;\\n        i = j;\\n        j = k;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4011788,
                "title": "fibonacci-sequence-using-yield-keyword",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n   let fib=[0,1];\\n   yield fib[0];\\n   yield fib[1];\\n   while(1)\\n   {\\n        let next =fib[0]+fib[1];\\n        yield next;\\n        fib[0]=fib[1];\\n        fib[1]= next;\\n   }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n   let fib=[0,1];\\n   yield fib[0];\\n   yield fib[1];\\n   while(1)\\n   {\\n        let next =fib[0]+fib[1];\\n        yield next;\\n        fib[0]=fib[1];\\n        fib[1]= next;\\n   }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978836,
                "title": "easy-approach",
                "content": "\\n\\n# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let a=0,b=1;\\n    while(1){\\n        yield a;\\n        [a,b] = [b,a+b]\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let a=0,b=1;\\n    while(1){\\n        yield a;\\n        [a,b] = [b,a+b]\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3977023,
                "title": "titan",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let fib = [0, 1];\\n\\n  yield fib[0];\\n  yield fib[1];\\n\\n  while (true) {\\n    let next = fib[0] + fib[1];\\n    yield next;\\n    fib[0] = fib[1];\\n    fib[1] = next;\\n  }    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let fib = [0, 1];\\n\\n  yield fib[0];\\n  yield fib[1];\\n\\n  while (true) {\\n    let next = fib[0] + fib[1];\\n    yield next;\\n    fib[0] = fib[1];\\n    fib[1] = next;\\n  }    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3976322,
                "title": "2648-generate-fibonacci-sequence-using-yield-keyword",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */  \\n\\n\\nvar fibGenerator = function* (callCount) {\\n  let current = 0; \\n  let next = 1;\\n\\n  while (true) {\\n    yield current; \\n\\n    [current, next] = [next, current + next];\\n\\n  } \\n};\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */  \\n\\n\\nvar fibGenerator = function* (callCount) {\\n  let current = 0; \\n  let next = 1;\\n\\n  while (true) {\\n    yield current; \\n\\n    [current, next] = [next, current + next];\\n\\n  } \\n};\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3969920,
                "title": "easy-solution",
                "content": "# Intuition\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let [result,sum] = [0,1] //assign two variables for starting two numbers i.e 0,1\\n    while(true){\\n        yield result; // return the current result\\n        [result,sum]= [sum,result+sum] // then add the two preceeding to values to  get suceeding value\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let [result,sum] = [0,1] //assign two variables for starting two numbers i.e 0,1\\n    while(true){\\n        yield result; // return the current result\\n        [result,sum]= [sum,result+sum] // then add the two preceeding to values to  get suceeding value\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3962240,
                "title": "infinite-loop-solution",
                "content": "```\\n/**\\n * @return {Generator<number>}\\n */\\nconst fibGenerator = function*() {\\n    let prev = 0\\n    let curr = 1\\n\\n    while (true) {\\n        yield prev\\n        const next = prev + curr\\n        prev = curr\\n        curr = next\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nconst fibGenerator = function*() {\\n    let prev = 0\\n    let curr = 1\\n\\n    while (true) {\\n        yield prev\\n        const next = prev + curr\\n        prev = curr\\n        curr = next\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3959435,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let a=0\\n    let b=1\\n\\n    while(true){\\n        yield a\\n        let tmp=a\\n        a=b\\n        b+=tmp\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let a=0\\n    let b=1\\n\\n    while(true){\\n        yield a\\n        let tmp=a\\n        a=b\\n        b+=tmp\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3951927,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n  let count = 0;\\n  while (true) {\\n    const res = fib(count)\\n    count += 1;\\n    yield res\\n  }\\n};\\n\\nfunction fib(count) {\\n  if (count === 0) return 0;\\n  if (count === 1) return 1;\\n  let a = 0;\\n  let b = 1;\\n  for (let i = 2; i <= count; i++) {\\n    let c = a + b;\\n    a = b;\\n    b = c;\\n  }\\n  return b;\\n}\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n  let count = 0;\\n  while (true) {\\n    const res = fib(count)\\n    count += 1;\\n    yield res\\n  }\\n};\\n\\nfunction fib(count) {\\n  if (count === 0) return 0;\\n  if (count === 1) return 1;\\n  let a = 0;\\n  let b = 1;\\n  for (let i = 2; i <= count; i++) {\\n    let c = a + b;\\n    a = b;\\n    b = c;\\n  }\\n  return b;\\n}\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3939362,
                "title": "javascript-simple-solution-yield",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n\\n    while (true){\\n        yield a;\\n        [a,b] = [b,a+b];\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n\\n    while (true){\\n        yield a;\\n        [a,b] = [b,a+b];\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3923198,
                "title": "typescript-simple-solution-clean-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let prev = 0, curr = 1;\\n    while ( true ) {\\n        yield prev;\\n        curr = curr + prev;\\n        prev = curr - prev;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Math"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let prev = 0, curr = 1;\\n    while ( true ) {\\n        yield prev;\\n        curr = curr + prev;\\n        prev = curr - prev;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3917108,
                "title": "easy-javascript-solution",
                "content": "> Vote Up If you Like it\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev=0\\n    let curr=1\\n    yield prev\\n    yield curr\\n    while(true){\\n        let next_val=prev+curr\\n        yield next_val\\n        prev=curr\\n        curr=next_val\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev=0\\n    let curr=1\\n    yield prev\\n    yield curr\\n    while(true){\\n        let next_val=prev+curr\\n        yield next_val\\n        prev=curr\\n        curr=next_val\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3900801,
                "title": "javascript-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a=0;\\n    yield a;\\n    let b=1;\\n    yield b;\\n    while(true){\\n        var c=a+b;\\n        yield c;\\n        a=b;\\n        b=c;\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a=0;\\n    yield a;\\n    let b=1;\\n    yield b;\\n    while(true){\\n        var c=a+b;\\n        yield c;\\n        a=b;\\n        b=c;\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3897782,
                "title": "fibonacci-sequence-generator-using-generator-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code is intended to generate the Fibonacci sequence using a generator function. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The intuition behind the code is to use a generator to create an iterable sequence of Fibonacci numbers.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code defines a generator function named fibGenerator. Inside this function:\\n\\n- Two variables, a and b, are initialized to 0 and 1 respectively. These variables will keep track of the last two Fibonacci numbers.\\n\\n- The generator function starts by yielding the initial value a, which is 0.\\n\\n- The for loop iterates from 1 to 49 (50 iterations in total). In each iteration, the next Fibonacci number c is calculated as the sum of the previous two numbers a and b.\\n\\n- The current Fibonacci number a is yielded using the yield keyword.\\n\\n- The values of a and b are then updated to prepare for the next iteration.\\n\\n# Complexity\\n**- Time Complexity:**\\nThe time complexity of the generator function mainly depends on the number of iterations in the loop. Since the loop iterates 50 times, the time complexity of generating the first 50 Fibonacci numbers is O(50), which is essentially **O(1)** in terms of practical considerations.\\n\\n**- Space Complexity:** \\nThe space complexity is **O(1)** because the generator function only uses a constant amount of extra space for variables, regardless of the input size.\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b =1;\\n\\n    for(let i =1 ; i<=50 ; i++){\\n        let c = a+b ;\\n        yield a;\\n\\n        a =b ;\\n        b =c;\\n\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b =1;\\n\\n    for(let i =1 ; i<=50 ; i++){\\n        let c = a+b ;\\n        yield a;\\n\\n        a =b ;\\n        b =c;\\n\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3894968,
                "title": "easy-solution-javascript",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let num1 = 0, num2 = 1\\n    yield num1\\n    yield num2\\n    for(;;) {\\n      const next = num1 + num2\\n      yield next\\n      num1 = num2\\n      num2 = next\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let num1 = 0, num2 = 1\\n    yield num1\\n    yield num2\\n    for(;;) {\\n      const next = num1 + num2\\n      yield next\\n      num1 = num2\\n      num2 = next\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3879002,
                "title": "efficient-fibonacci-generator-on-demand-fibonacci-number-calculation-using-javascript-generator-func",
                "content": "# Intuition\\nThe intuition behind this approach is to use a generator function to generate Fibonacci numbers on-demand. A generator function allows us to calculate and yield the Fibonacci numbers one by one without storing all of them in memory at once. This approach is memory-efficient and suitable for scenarios where we only need a limited number of Fibonacci numbers.\\n\\n# Approach\\nWe define the fibGenerator function as a generator function using the function* syntax in JavaScript.\\nWe initialize mylist with the first two Fibonacci numbers [0, 1].\\nWe use the yield keyword to yield the first two Fibonacci numbers (0 and 1) as base cases.\\nIn the for loop, we start calculating the next Fibonacci numbers using the previous two numbers in the mylist array.\\nWe continuously push the new Fibonacci numbers into the mylist array and yield the calculated Fibonacci number using yield num.\\nThe generator will keep generating Fibonacci numbers indefinitely.\\n# Complexity\\n- Time complexity:\\nTime complexity: O(1) for each next() call on the generator. Calculating each Fibonacci number takes constant time, so the time complexity of generating one Fibonacci number is constant.\\n\\n- Space complexity:\\nSpace complexity: O(n) where n is the number of Fibonacci numbers generated. The generator keeps an internal list mylist to store the generated Fibonacci numbers. The space complexity increases as more Fibonacci numbers are generated, but it grows linearly with the number of generated Fibonacci numbers.\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n    let mylist = [0, 1];\\n\\n    \\n    yield mylist[0];\\n    yield mylist[1];\\n\\n    for (let i = 2; ; i++) {\\n        let num = mylist[i - 1] + mylist[i - 2];\\n        mylist.push(num);\\n        yield num;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n    let mylist = [0, 1];\\n\\n    \\n    yield mylist[0];\\n    yield mylist[1];\\n\\n    for (let i = 2; ; i++) {\\n        let num = mylist[i - 1] + mylist[i - 2];\\n        mylist.push(num);\\n        yield num;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3875457,
                "title": "2648-generate-fibonacci-sequence",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n     let firstTerm = 0;\\n    yield firstTerm;\\n    let secondTerm = 1;\\n    yield secondTerm;\\n    let nextTerm;\\n    while (true) {\\n        nextTerm = firstTerm + secondTerm;\\n        firstTerm = secondTerm;\\n        secondTerm = nextTerm;\\n        yield nextTerm;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n     let firstTerm = 0;\\n    yield firstTerm;\\n    let secondTerm = 1;\\n    yield secondTerm;\\n    let nextTerm;\\n    while (true) {\\n        nextTerm = firstTerm + secondTerm;\\n        firstTerm = secondTerm;\\n        secondTerm = nextTerm;\\n        yield nextTerm;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3868238,
                "title": "while-looppppppppp",
                "content": "# Intuition\\nwhat is fibonacci sequence ? \\uD83D\\uDE05\\n\\n# Approach\\nusing while loop\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\nlet firstOne = -1;\\nlet secondOne = 1;\\nlet start = 0;\\n    while(start<=50){\\n        let val = secondOne + firstOne;\\n         firstOne = secondOne;\\n        secondOne = val;\\n        yield val;\\n        start++\\n    }\\n};\\n\\n\\n const gen = fibGenerator();\\n  gen.next().value; // 0\\n  gen.next().value; // 1\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\nlet firstOne = -1;\\nlet secondOne = 1;\\nlet start = 0;\\n    while(start<=50){\\n        let val = secondOne + firstOne;\\n         firstOne = secondOne;\\n        secondOne = val;\\n        yield val;\\n        start++\\n    }\\n};\\n\\n\\n const gen = fibGenerator();\\n  gen.next().value; // 0\\n  gen.next().value; // 1\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3846293,
                "title": "used-generator-function-for-fibonacci-sequence",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*(n) {\\n        let a = 0;\\n        let b = 1;\\n        let c = 0;\\n        yield a;\\n        yield b;\\n        while(true){\\n          c = a + b;\\n          yield c;\\n          a = b;\\n          b = c;\\n        }\\n};\\n\\n//here have kept while true. In gen function \\n- if we have yield more than one. whenever we call gen function it will not execute the previous if it\\'s already executed. Js remembers how many time yield or gen function have been called. \\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*(n) {\\n        let a = 0;\\n        let b = 1;\\n        let c = 0;\\n        yield a;\\n        yield b;\\n        while(true){\\n          c = a + b;\\n          yield c;\\n          a = b;\\n          b = c;\\n        }\\n};\\n\\n//here have kept while true. In gen function \\n- if we have yield more than one. whenever we call gen function it will not execute the previous if it\\'s already executed. Js remembers how many time yield or gen function have been called. \\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3829253,
                "title": "simple-js-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    const last = [0, 1]\\n    yield 0\\n    yield 1\\n     for (let i = 2; i < 50; i++) {\\n         const curr = last[0] + last[1]\\n         last.push(curr)\\n         last.shift()\\n         yield curr\\n     }\\n};\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    const last = [0, 1]\\n    yield 0\\n    yield 1\\n     for (let i = 2; i < 50; i++) {\\n         const curr = last[0] + last[1]\\n         last.push(curr)\\n         last.shift()\\n         yield curr\\n     }\\n};\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3807257,
                "title": "javascript-generator",
                "content": "Generator function by default will not yield on the first try that\\'s why i made it yield the previous value which will show first value on the second try and so on. while wraping the yield inside a while true loop so it can be useable everytime the generator function is called.\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let [prev,curr] = [0,1]\\n    while(true){\\n        yield prev;\\n        [prev,curr] = [curr,prev+curr]  \\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let [prev,curr] = [0,1]\\n    while(true){\\n        yield prev;\\n        [prev,curr] = [curr,prev+curr]  \\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3806920,
                "title": "fibonacci-sequence-optimized",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let arr = [0,1];\\n\\n    for(let i = 2; i <=50; i++){\\n        arr.push(arr[i-1] + arr[i-2]);\\n    }\\n\\n    for(let val of arr){\\n        yield val;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let arr = [0,1];\\n\\n    for(let i = 2; i <=50; i++){\\n        arr.push(arr[i-1] + arr[i-2]);\\n    }\\n\\n    for(let val of arr){\\n        yield val;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3804225,
                "title": "beats-97-79-in-runtime-and-71-31-in-memory-using-simple-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let arr = [0,1];\\n    yield arr[0];\\n    yield arr[1];\\n    for (let i=2;i<51;i++){\\n           arr.push(arr[i-1]+arr[i-2])\\n            yield arr[i]\\n        }\\n \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let arr = [0,1];\\n    yield arr[0];\\n    yield arr[1];\\n    for (let i=2;i<51;i++){\\n           arr.push(arr[i-1]+arr[i-2])\\n            yield arr[i]\\n        }\\n \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3761391,
                "title": "typescript-following-the-hints",
                "content": "# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    yield 0\\n    yield 1\\n    let a = 0\\n    let b = 1\\n    while(true) {\\n        yield a+b\\n        let tmp = b\\n        b = a+b\\n        a = tmp\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    yield 0\\n    yield 1\\n    let a = 0\\n    let b = 1\\n    while(true) {\\n        yield a+b\\n        let tmp = b\\n        b = a+b\\n        a = tmp\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3760505,
                "title": "javascript-solution-using-closures",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI tried to think of way in which I can store prev and current value 0 and 1 and new value can be derived from prev and current and shifiting this two pointer \\n```prev = curr``` and ```curr = newValue```\\nSo I tried to implement it using closures.\\none trick was there for starting two calls I don\\'t to perform this operation so conditionally I returned 0 and 1 for first two calls then apply rest logic of fibonacci.\\n\\n# Complexity\\n- Time complexity: constant\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: constant\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function() {\\n    let prev = 0;\\n    let curr = 1;\\n    let count = 0;\\n    return {\\n        next : function () {\\n            if(count < 2){\\n                return {\\n                    \"value\" : count++\\n                }\\n            }\\n            let ans = prev + curr;\\n            prev = curr;\\n            curr = ans;\\n            return {\\n                \"value\" : ans\\n            }\\n        }\\n    }\\n};\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers",
                    "Memoization"
                ],
                "code": "```prev = curr```\n```curr = newValue```\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function() {\\n    let prev = 0;\\n    let curr = 1;\\n    let count = 0;\\n    return {\\n        next : function () {\\n            if(count < 2){\\n                return {\\n                    \"value\" : count++\\n                }\\n            }\\n            let ans = prev + curr;\\n            prev = curr;\\n            curr = ans;\\n            return {\\n                \"value\" : ans\\n            }\\n        }\\n    }\\n};\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3750194,
                "title": "simplest-javascript-solution-space-and-time-complexity-o-1",
                "content": "# Intuition\\nSwap and Yield!\\n\\n# Approach\\nInitialize two variables as current and next having values as 0, 1 respectively. It employs a generator function to yield Fibonacci numbers one by one without having to calculate all of them upfront. We are yielding the current value and then swapping current, next with next, current + next respectively.\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let current = 0, next = 1;\\n    \\n  while(true){\\n    yield current;\\n    [current, next] = [next, current + next]\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let current = 0, next = 1;\\n    \\n  while(true){\\n    yield current;\\n    [current, next] = [next, current + next]\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3749401,
                "title": "the-js-way",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let num1 = 0;\\n    let num2 = 1;\\n    \\n    yield num1;\\n    yield num2;\\n\\n    while(true) {\\n        const num3 = num1 + num2;\\n\\n        yield num3;\\n\\n        num1 = num2;\\n        num2 = num3;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let num1 = 0;\\n    let num2 = 1;\\n    \\n    yield num1;\\n    yield num2;\\n\\n    while(true) {\\n        const num3 = num1 + num2;\\n\\n        yield num3;\\n\\n        num1 = num2;\\n        num2 = num3;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3726745,
                "title": "fibonacci-sequence-using-generator-function-by-switching-different-variables-in-a-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code implements a Fibonacci number generator using a generator function. The generator produces an infinite sequence of Fibonacci numbers.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is to use a while loop to generate Fibonacci numbers indefinitely. The generator function maintains three variables: i, j, and k. It starts with i = 0, j = undefined, and k = undefined. Inside the loop, it follows the Fibonacci sequence logic to update the values of i, j, and k and yield the Fibonacci number i.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity is O(\\u221E) or simply as O(1), each Fibonacci number is generated in constant time.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(1).\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let i = 0\\n    let j\\n    let k\\n    \\n    while(true){\\n        if (i == 0){\\n            yield i\\n            i = 1\\n            j = 0\\n        } else if(i == 1 && j == 0){\\n            yield i\\n            i = 1\\n            j = 1\\n        }\\n        yield i\\n        k = j\\n        j = i\\n        i = i + k\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n * 0,1,1,2,3,5,8,13,21,34\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let i = 0\\n    let j\\n    let k\\n    \\n    while(true){\\n        if (i == 0){\\n            yield i\\n            i = 1\\n            j = 0\\n        } else if(i == 1 && j == 0){\\n            yield i\\n            i = 1\\n            j = 1\\n        }\\n        yield i\\n        k = j\\n        j = i\\n        i = i + k\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n * 0,1,1,2,3,5,8,13,21,34\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3695997,
                "title": "yield-keyword-is-used-to-pause-and-resume-generator-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    for (let a = 0, b = 1; true; b += a, a = b - a) yield a;\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    for (let a = 0, b = 1; true; b += a, a = b - a) yield a;\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3688908,
                "title": "javascript-solution-for-beginner",
                "content": "# Code\\n```\\nvar fibGenerator = function*() {\\n  let current = 0; \\n  let next = 1;\\n  while (true) {\\n    yield current; \\n    [current, next] = [next, current + next];\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar fibGenerator = function*() {\\n  let current = 0; \\n  let next = 1;\\n  while (true) {\\n    yield current; \\n    [current, next] = [next, current + next];\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3657482,
                "title": "fibonacci-generator-in-js-95-pretty-standard-fare",
                "content": "# Intuition\\nI had heard JS had generator functions, but I\\'ve never found a need to use them, as I also heard they are pretty slow.  It was also my first time coming across function*.  I read up, and it seemed easy enough.\\n\\n# Approach\\nI wrote a version with 3 yield statements, but that was apparently too slow, so I had to take a look again.  I realised posNeg2 was what was always asked for, and I know for loops let you maintain local scope with a let variable, so that might speed it up.  Reorganizing things worked, but although it got 95% faster it could just as easily have 49%; it all varies cause of the testing servers.  It\\'s hard to be confident this would actually be performant unless I did further testing, but I checked mine against most at the top, and it\\'s pretty similar.\\n\\nThe actual submission results:\\nhttps://leetcode.com/problems/generate-fibonacci-sequence/submissions/974828184/\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let posNeg2 = 0\\n    let posNeg1 = 1\\n    for(let pos=0;true;){\\n        yield posNeg2;\\n        pos = posNeg1+posNeg2;\\n        posNeg2 = posNeg1;\\n        posNeg1 = pos;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let posNeg2 = 0\\n    let posNeg1 = 1\\n    for(let pos=0;true;){\\n        yield posNeg2;\\n        pos = posNeg1+posNeg2;\\n        posNeg2 = posNeg1;\\n        posNeg1 = pos;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3657478,
                "title": "infinity-fibonanchi-you-can-understand-it-too-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n        let myArr = [0, 1], t=2;\\n\\n    yield myArr[0]\\n    yield myArr[1]\\n\\n    while (true) {\\n        myArr.push(myArr[t - 1] + myArr[t - 2]);\\n        yield myArr[myArr.length - 1];\\n        t++;\\n       \\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n        let myArr = [0, 1], t=2;\\n\\n    yield myArr[0]\\n    yield myArr[1]\\n\\n    while (true) {\\n        myArr.push(myArr[t - 1] + myArr[t - 2]);\\n        yield myArr[myArr.length - 1];\\n        t++;\\n       \\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3640131,
                "title": "easy-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var current = 0;\\n  var next = 1;\\n\\n  while (true) {\\n    yield current;\\n    [current, next] = [next, current + next];\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var current = 0;\\n  var next = 1;\\n\\n  while (true) {\\n    yield current;\\n    [current, next] = [next, current + next];\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3638034,
                "title": "js-solution-beats-56-in-memory",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    yield a;\\n    yield b;\\n\\n    while (true) {\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Dynamic Programming"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    yield a;\\n    yield b;\\n\\n    while (true) {\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3604751,
                "title": "easy-js-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev1 = 0;\\n    let prev2 = 1;\\n    while(true) {\\n        yield prev1;\\n        const temp = prev1;\\n        prev1 = prev2;\\n        prev2 += temp;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev1 = 0;\\n    let prev2 = 1;\\n    while(true) {\\n        yield prev1;\\n        const temp = prev1;\\n        prev1 = prev2;\\n        prev2 += temp;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3594484,
                "title": "easy-self-explainary-day-29",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let n1= 0, n2 = 1\\n\\n    while(true){\\n        yield n1;\\n        [n1,n2]= [n2, n1+n2]\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let n1= 0, n2 = 1\\n\\n    while(true){\\n        yield n1;\\n        [n1,n2]= [n2, n1+n2]\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3593572,
                "title": "generator-function-concept-typescript-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given problem involves implementing a `Fibonacci` number generator using a generator function. The generator should yield Fibonacci numbers in sequence, starting from 0 and 1, and then generating subsequent Fibonacci numbers by summing the previous two numbers.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Create a generator function `fibGenerator`.\\n2. Initialize two variables, `a` and `b`, to store the first two Fibonacci numbers: 0 and 1, respectively.\\n3. Use the `yield` keyword to yield the value of `a`, which is the first Fibonacci number and the value of `b`, which is the second Fibonacci number.\\n4. Run an infinite loop using `while(true)`. This loop will generate subsequent Fibonacci numbers indefinitely.\\n5. Inside the loop, calculate the next Fibonacci number by adding `a` and `b` and assign it to the variable `c`.\\n6. Update the values of `a` and `b` by shifting `b` to `a` and `c` to `b`, respectively. This prepares the variables for the next iteration.\\n7. Use the `yield` keyword to yield the value of `c`, which is the next Fibonacci number.\\n8. Since the loop is infinite, the generator function will keep yielding Fibonacci numbers as long as it is iterated.\\n\\n# Code\\n``` javascript []\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    yield a;\\n    yield b;\\n\\n    while(true) {\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\\n``` typescript []\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let a = 0, b = 1;\\n    yield a;\\n    yield b;\\n\\n    while(true) {\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "``` javascript []\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    yield a;\\n    yield b;\\n\\n    while(true) {\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\n``` typescript []\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let a = 0, b = 1;\\n    yield a;\\n    yield b;\\n\\n    while(true) {\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3593432,
                "title": "day-29-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let a = 0; yield a;\\n  let b = 1; yield b;\\n\\n  while (true) {\\n    let temp = b;\\n    b += a;\\n    a = temp;\\n    yield b;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let a = 0; yield a;\\n  let b = 1; yield b;\\n\\n  while (true) {\\n    let temp = b;\\n    b += a;\\n    a = temp;\\n    yield b;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3593301,
                "title": "simple-solution-typescript-while-loop",
                "content": "# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let first = 0;\\n    let second = 1;\\n    let value = 0;\\n    let count = 0;\\n    while(true){\\n        if(count <= 1){\\n            count++;\\n            yield value++;\\n        }\\n        else{\\n            value = first + second;\\n            first = second;\\n            second = value;\\n            yield value;\\n        }\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let first = 0;\\n    let second = 1;\\n    let value = 0;\\n    let count = 0;\\n    while(true){\\n        if(count <= 1){\\n            count++;\\n            yield value++;\\n        }\\n        else{\\n            value = first + second;\\n            first = second;\\n            second = value;\\n            yield value;\\n        }\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3592810,
                "title": "generators-easiest-solution-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a=0;\\n    let b=1;\\n\\n    while(true){\\n        yield a;\\n        [a,b]=[b,a+b];\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a=0;\\n    let b=1;\\n\\n    while(true){\\n        yield a;\\n        [a,b]=[b,a+b];\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3592292,
                "title": "javascript-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let a = 0;\\n     yield a;\\n    let b = 1;\\n     yield b\\n     while(true) {\\n      let c = a+b;\\n      yield c;\\n      a=b;\\n      b=c;\\n     }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let a = 0;\\n     yield a;\\n    let b = 1;\\n     yield b\\n     while(true) {\\n      let c = a+b;\\n      yield c;\\n      a=b;\\n      b=c;\\n     }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3591865,
                "title": "beginner-friendly-js-solution",
                "content": "> **DISCLAIMER: ** I am not a Pro, Just sharing my solution here to start a healthy discussion, if you feel it could have been better, please feel free to share your solution and thoughts \\uD83D\\uDE4F below\\n\\n# Intuition\\nWhile loop will be useful \\uD83E\\uDD14\\uD83D\\uDE00\\n\\n# Approach\\nAs Fibonacci series is defined by this relation `Xn = Xn-1 + Xn-2`\\nWe need three variables in total a,b & c.\\n\\nFibonacci series starts with 0 and 1, Hence assiging those values to a & b and then `c = a + b`\\n\\nneed to handle yielding of 0 and 1 separately rest of the series will taken care by our `while` loop\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n![image.png](https://assets.leetcode.com/users/images/dbe33423-1b15-458a-8d91-e9af0f8079f1_1685774097.9031093.png)\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n  let a = 0;\\n  let b = 1;\\n  let c = 0;\\n\\n  if (c === 0) {\\n    c = a + b;\\n    yield 0;\\n  }\\n  if (c === 1) {\\n    yield 1;\\n  }\\n\\n  while (true) {\\n    c = a + b;\\n    a = b;\\n    b = c;\\n    yield c;\\n  }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n  let a = 0;\\n  let b = 1;\\n  let c = 0;\\n\\n  if (c === 0) {\\n    c = a + b;\\n    yield 0;\\n  }\\n  if (c === 1) {\\n    yield 1;\\n  }\\n\\n  while (true) {\\n    c = a + b;\\n    a = b;\\n    b = c;\\n    yield c;\\n  }\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3591396,
                "title": "javascript-simple-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let [n1, n2] = [0, 1]\\n\\n    while (true) {\\n        yield n1;\\n        [n1, n2] = [n2, n1 + n2]\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let [n1, n2] = [0, 1]\\n\\n    while (true) {\\n        yield n1;\\n        [n1, n2] = [n2, n1 + n2]\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3590738,
                "title": "javascript-faster-than-90",
                "content": "# Intuition\\nJust calculate the next value.\\n\\n# Approach\\nJust calculate the next value, use `yield` keyword to return the current value.\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let k0 = 0;\\n    let k1 = 1;\\n    let n = 0;\\n    while (true)\\n    {\\n        if (n == 0) yield k0;\\n        if (n == 1) yield k1;\\n        let next = k0 + k1;\\n        k0 = k1;\\n        k1 = next;\\n        n++;\\n        yield k1;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let k0 = 0;\\n    let k1 = 1;\\n    let n = 0;\\n    while (true)\\n    {\\n        if (n == 0) yield k0;\\n        if (n == 1) yield k1;\\n        let next = k0 + k1;\\n        k0 = k1;\\n        k1 = next;\\n        n++;\\n        yield k1;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3590650,
                "title": "simple-but-only-for-the-first-50-numbers",
                "content": "# Intuition\\nThis is a very well known sequence, and it\\'s quite easy to generate 50 numbers.\\n\\n# Approach\\nHardcode the first 50 Fibonacci numbers, and use the `yield*` notation to turn this array into a generator.\\n\\n# Complexity\\n- Time complexity:\\nConstant time per call.\\n\\n- Space complexity:\\nConstant space, although it would take more space if you wanted to be able to call this more than 50 times.\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield* [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074]\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield* [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074]\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3590472,
                "title": "javascript-beginner-easy-solution",
                "content": "# Intuition\\nIn fibonacci the element is the sum of previous two elements\\n\\n# Approach\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    yield a;\\n    yield b;\\n\\n    while(true) {\\n        let c = a+b;\\n        a = b;\\n        b = c;\\n        yield b;\\n    } \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    yield a;\\n    yield b;\\n\\n    while(true) {\\n        let c = a+b;\\n        a = b;\\n        b = c;\\n        yield b;\\n    } \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3590385,
                "title": "simple-solution-using-array-destructuring-assignment",
                "content": "Inside the function, it initializes a to 0 and b to 1, which are the first two numbers in the Fibonacci sequence. It then enters an infinite loop using while (true).\\nWithin each iteration of the loop, it yields the current value of a, effectively pausing the function and returning the value.\\n After that, it updates the values of a and b by swapping them, where a becomes the previous value of b, and b becomes the sum of the previous values of a and b.\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n   let a = 0, b = 1;\\n\\n  while (true) {\\n    yield a;\\n    [a, b] = [b, a + b];\\n\\n}\\n};\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n   let a = 0, b = 1;\\n\\n  while (true) {\\n    yield a;\\n    [a, b] = [b, a + b];\\n\\n}\\n};\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3590365,
                "title": "day-29-javascript",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev1 = 0;\\n    let prev2 = 1;\\n\\n    while(true) {\\n        yield prev1;\\n        const temp = prev1;\\n        prev1 = prev2;\\n        prev2 += temp;\\n    }\\n};\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev1 = 0;\\n    let prev2 = 1;\\n\\n    while(true) {\\n        yield prev1;\\n        const temp = prev1;\\n        prev1 = prev2;\\n        prev2 += temp;\\n    }\\n};\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3590317,
                "title": "simple-fibonacci-generator",
                "content": "# Intuition\\nHelpful for understanding generators: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\\n\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1, temp;\\n    while(true){\\n        yield a;\\n        yield b;\\n        temp = b;\\n        a = a + b;\\n        b = a + temp;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1, temp;\\n    while(true){\\n        yield a;\\n        yield b;\\n        temp = b;\\n        a = a + b;\\n        b = a + temp;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3590287,
                "title": "easy-javascript-solution",
                "content": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let curr = 0;\\n    let next = 1;\\n    \\n    while(true){\\n        yield curr;\\n        [curr, next] = [next, curr + next];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let curr = 0;\\n    let next = 1;\\n    \\n    while(true){\\n        yield curr;\\n        [curr, next] = [next, curr + next];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589645,
                "title": "simple-solution-easy-to-understand-o-1-time-o-1-space",
                "content": "# Complexity\\n- Time complexity: **O(1)**\\n- Space complexity: **O(1)**\\n\\n# Code\\n```\\nvar fibGenerator = function*() {\\n    yield 0;\\n    yield 1;\\n    let prev = 0;\\n    let current = 1;\\n    \\n    while(true) {\\n        const temp = prev + current;\\n        prev = current;\\n        current = temp;\\n        yield current;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar fibGenerator = function*() {\\n    yield 0;\\n    yield 1;\\n    let prev = 0;\\n    let current = 1;\\n    \\n    while(true) {\\n        const temp = prev + current;\\n        prev = current;\\n        current = temp;\\n        yield current;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589565,
                "title": "easy-solution-o-1",
                "content": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let [a, b] = [0, 1];\\n    while(true){\\n        yield a;\\n        [a, b] = [b, a+b];\\n    };\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let [a, b] = [0, 1];\\n    while(true){\\n        yield a;\\n        [a, b] = [b, a+b];\\n    };\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589513,
                "title": "javascript-made-simple",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a0 = 0;\\n    let a1 = 1;\\n    while(true){\\n        yield a0;\\n        let temp = a0;\\n        a0 = a1;\\n        a1 = temp + a1;\\n    };\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a0 = 0;\\n    let a1 = 1;\\n    while(true){\\n        yield a0;\\n        let temp = a0;\\n        a0 = a1;\\n        a1 = temp + a1;\\n    };\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589434,
                "title": "typescript-using-while-loop-and-yielding-runtime-100-memory-60",
                "content": "\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```TypeScript\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let xn_2 = 0;\\n    let xn_1 = 1;\\n    yield xn_2;\\n    yield xn_1;\\n    while(true) {\\n        const sum = xn_1 + xn_2;\\n        yield sum;\\n        xn_2 = xn_1;\\n        xn_1 = sum;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```TypeScript\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let xn_2 = 0;\\n    let xn_1 = 1;\\n    yield xn_2;\\n    yield xn_1;\\n    while(true) {\\n        const sum = xn_1 + xn_2;\\n        yield sum;\\n        xn_2 = xn_1;\\n        xn_1 = sum;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589431,
                "title": "simple-javascript-solution",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    while(1)\\n    {\\n        yield a;\\n        let temp = a;\\n        a = b;\\n        b = temp + b;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    while(1)\\n    {\\n        yield a;\\n        let temp = a;\\n        a = b;\\n        b = temp + b;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589233,
                "title": "solution-typescript-javascript",
                "content": "# Code\\n``` typescript []\\nconst fibGenerator = (): Iterator<number> => {\\n    const lengthOfSequence: number = 50;\\n    const fibonacciSequence: number[] = Array(lengthOfSequence).fill(0);\\n    fibonacciSequence[1] = 1;\\n    for (let i = 2; i < fibonacciSequence.length; i++) {\\n        fibonacciSequence[i] = fibonacciSequence[i - 1] + fibonacciSequence[i - 2];\\n    }\\n    return fibonacciSequence[Symbol.iterator]();\\n};\\n```\\n``` javascript []\\nvar fibGenerator = function() {\\n    const lengthOfSequence = 50;\\n    const fibonacciSequence = Array(lengthOfSequence).fill(0);\\n    fibonacciSequence[1] = 1;\\n    for (let i = 2; i < fibonacciSequence.length; i++) {\\n        fibonacciSequence[i] = fibonacciSequence[i - 1] + fibonacciSequence[i - 2];\\n    }\\n    return fibonacciSequence[Symbol.iterator]();\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "``` typescript []\\nconst fibGenerator = (): Iterator<number> => {\\n    const lengthOfSequence: number = 50;\\n    const fibonacciSequence: number[] = Array(lengthOfSequence).fill(0);\\n    fibonacciSequence[1] = 1;\\n    for (let i = 2; i < fibonacciSequence.length; i++) {\\n        fibonacciSequence[i] = fibonacciSequence[i - 1] + fibonacciSequence[i - 2];\\n    }\\n    return fibonacciSequence[Symbol.iterator]();\\n};\\n```\n``` javascript []\\nvar fibGenerator = function() {\\n    const lengthOfSequence = 50;\\n    const fibonacciSequence = Array(lengthOfSequence).fill(0);\\n    fibonacciSequence[1] = 1;\\n    for (let i = 2; i < fibonacciSequence.length; i++) {\\n        fibonacciSequence[i] = fibonacciSequence[i - 1] + fibonacciSequence[i - 2];\\n    }\\n    return fibonacciSequence[Symbol.iterator]();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589174,
                "title": "simple-fibonacci-generator-in-javascript-beats-80",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust simple implementation of generator in JavaScript.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initially declare two variables - a and b. They will be yielded.\\n2. Each call of our generator will produce the next value in Fibonacci series. We did this by creating auxiliary next variable inside while loop.\\n\\n# Complexity\\n- Time complexity: O(1) because it involves a fixed number of mathematical operations. `For each call` of course.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: Constant time - O(n). Only keeps track of two latest numbers - a,b \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n\\n    yield a;\\n    yield b;\\n\\n    while (true) {\\n        let next = a + b;\\n        yield next;\\n        a = b;\\n        b = next;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n\\n    yield a;\\n    yield b;\\n\\n    while (true) {\\n        let next = a + b;\\n        yield next;\\n        a = b;\\n        b = next;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589057,
                "title": "easiest-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**Generator Function:** \\n- It is defined like a normal function, but when it needs to generate a value, it does it with the *yield* keyword, (not the return keyword).\\n- The *yield* statement suspends the execution of function and sends back a value to the caller, but it retains the state to make the function to resume from where it is left off.\\n- On resuming, the function\\'s execution continues immediately after the last *yield* was executed. \\n\\n# Code\\n``` javaScript []\\nvar fibGenerator = function*() {\\n    var [a, b] = [0, 1];\\n\\n    while (!false){\\n        yield a;\\n        [a, b] = [b, a+b];\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` javaScript []\\nvar fibGenerator = function*() {\\n    var [a, b] = [0, 1];\\n\\n    while (!false){\\n        yield a;\\n        [a, b] = [b, a+b];\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3588945,
                "title": "javascript-simple-javascript-typescript-solution",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Approach 1 Using Javascript :\\n# Runtime: 60 ms, faster than 43.81% of JavaScript online submissions for Generate Fibonacci Sequence.\\n# Memory Usage: 41.6 MB, less than 89.04% of JavaScript online submissions for Generate Fibonacci Sequence.\\n\\tvar fibGenerator = function*() {\\n\\n\\t\\tlet first = 0 , second = 1;\\n\\n\\t\\twhile(true){\\n\\n\\t\\t\\tyield first;\\n\\n\\t\\t\\tlet next_number = first + second;\\n\\n\\t\\t\\tfirst = second;\\n\\n\\t\\t\\tsecond = next_number;\\n\\t\\t}\\n\\t};\\n# Approach 2 Using Typescript :\\n# Runtime: 55 ms, faster than 86.29% of TypeScript online submissions for Generate Fibonacci Sequence.\\n# Memory Usage: 42.9 MB, less than 67.49% of TypeScript online submissions for Generate Fibonacci Sequence.\\n\\tfunction* fibGenerator(): Generator<number, any, number> {\\n\\n\\t\\tlet first = 0 , second = 1;\\n\\n\\t\\twhile(true){\\n\\n\\t\\t\\tyield first;\\n\\n\\t\\t\\tlet next_number = first + second;\\n\\n\\t\\t\\tfirst = second;\\n\\n\\t\\t\\tsecond = next_number;\\n\\t\\t}\\n\\t};\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Approach 1 Using Javascript :\\n# Runtime: 60 ms, faster than 43.81% of JavaScript online submissions for Generate Fibonacci Sequence.\\n# Memory Usage: 41.6 MB, less than 89.04% of JavaScript online submissions for Generate Fibonacci Sequence.\\n\\tvar fibGenerator = function*() {\\n\\n\\t\\tlet first = 0 , second = 1;\\n\\n\\t\\twhile(true){\\n\\n\\t\\t\\tyield first;\\n\\n\\t\\t\\tlet next_number = first + second;\\n\\n\\t\\t\\tfirst = second;\\n\\n\\t\\t\\tsecond = next_number;\\n\\t\\t}\\n\\t};\\n# Approach 2 Using Typescript :\\n# Runtime: 55 ms, faster than 86.29% of TypeScript online submissions for Generate Fibonacci Sequence.\\n# Memory Usage: 42.9 MB, less than 67.49% of TypeScript online submissions for Generate Fibonacci Sequence.\\n\\tfunction* fibGenerator(): Generator<number, any, number> {\\n\\n\\t\\tlet first = 0 , second = 1;\\n\\n\\t\\twhile(true){\\n\\n\\t\\t\\tyield first;\\n\\n\\t\\t\\tlet next_number = first + second;\\n\\n\\t\\t\\tfirst = second;\\n\\n\\t\\t\\tsecond = next_number;\\n\\t\\t}\\n\\t};\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Unknown"
            },
            {
                "id": 3588800,
                "title": "js-generator-time-50ms-90-space-42mb-56",
                "content": "# Approach\\nWe\\'ll implement the typical fibonacci function, but with `yield` to make it a generator.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    // init\\n    let curr = 0;\\n    let next = 1;\\n\\n    // fibonacci sequence\\n    while(true) {\\n        yield curr;\\n        [curr, next] = [next, curr + next];\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    // init\\n    let curr = 0;\\n    let next = 1;\\n\\n    // fibonacci sequence\\n    while(true) {\\n        yield curr;\\n        [curr, next] = [next, curr + next];\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3588633,
                "title": "chatgpt-code-snippet",
                "content": "**Generate Fibonacci Sequence**\\n\\n**Problem Statement:**\\n\\nWrite a generator function that returns a generator object which yields the Fibonacci sequence.\\n\\nThe Fibonacci sequence is defined by the relation Xn = Xn-1 + Xn-2. The first few numbers of the series are 0, 1, 1, 2, 3, 5, 8, 13.\\n\\n**Intuition:**\\n\\nTo generate the Fibonacci sequence, we can use a generator function in JavaScript. The generator function allows us to easily yield the Fibonacci numbers one by one, without the need to calculate and store the entire sequence in memory. By utilizing the generator function\\'s `yield` keyword, we can lazily generate and retrieve Fibonacci numbers on demand.\\n\\n**Approach:**\\n\\n1. Initialize two variables, `a` and `b`, with the initial values of 0 and 1 respectively.\\n2. Yield the initial value `a` (0) using the `yield` keyword.\\n3. Enter an infinite loop.\\n4. Inside the loop, yield the current Fibonacci number `b`.\\n5. Calculate the next Fibonacci number by adding `a` and `b`, and assign it to the variable `next`.\\n6. Update `a` to the value of `b` and `b` to the value of `next` for the next iteration.\\n\\n**Complexity Analysis:**\\n\\nTime complexity: The time complexity of generating each Fibonacci number is O(1) since it only involves simple addition. The total time complexity depends on the number of Fibonacci numbers requested.\\n\\nSpace complexity: The space complexity is O(1) since we are not storing the entire sequence in memory. The generator function generates Fibonacci numbers on the fly, so it requires constant space regardless of the number of Fibonacci numbers generated.\\n\\n**Code:**\\n\\n```javascript\\n/**\\n * @return {Generator<number>}\\n */\\nfunction* fibGenerator() {\\n  let a = 0;\\n  let b = 1;\\n\\n  yield a; // yield the initial value 0\\n\\n  while (true) {\\n    yield b; // yield the current Fibonacci number\\n\\n    const next = a + b;\\n    a = b;\\n    b = next;\\n  }\\n}\\n\\n// Example usage\\nconst gen = fibGenerator();\\nconst callCount = 5;\\nfor (let i = 0; i < callCount; i++) {\\n  const value = gen.next().value;\\n  console.log(value);\\n}\\n```\\n\\nIn this code, the `fibGenerator` function is defined as a generator function using the `function*` syntax. It initializes two variables `a` and `b` to keep track of the previous two Fibonacci numbers. It starts by yielding the initial value (`a`), and then enters an infinite loop. In each iteration, it yields the current Fibonacci number (`b`) and calculates the next Fibonacci number by updating the values of `a` and `b`. The example usage demonstrates how to use the generator function to generate and print the Fibonacci sequence with a specified `callCount`.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @return {Generator<number>}\\n */\\nfunction* fibGenerator() {\\n  let a = 0;\\n  let b = 1;\\n\\n  yield a; // yield the initial value 0\\n\\n  while (true) {\\n    yield b; // yield the current Fibonacci number\\n\\n    const next = a + b;\\n    a = b;\\n    b = next;\\n  }\\n}\\n\\n// Example usage\\nconst gen = fibGenerator();\\nconst callCount = 5;\\nfor (let i = 0; i < callCount; i++) {\\n  const value = gen.next().value;\\n  console.log(value);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3588625,
                "title": "javascript-fibonacci-sequence-generator-using-generator-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo generate the Fibonacci sequence, we can use a generator function that yields each Fibonacci number one by one. I start with the initial values of 0 and 1. Then, in an infinite loop, I calculate the next Fibonacci number by adding the previous two numbers. I yield each Fibonacci number and update the previous and current values accordingly.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Define the generator function `fibGenerator` using the `function*` syntax.\\n2. Initialize the variables `prev` and `curr` with the values 0 and 1.\\n3. Yield the initial value of 0 using `yield prev`.\\n4. Check if `curr` is equal to 1 and yield it if true using `yield curr`.\\n5. Enter an infinite loop using `for (;;)`.\\n6. Calculate the next Fibonacci number by adding `prev` and `curr` and assign it to `next`.\\n7. Yield the value of `next` using `yield next`.\\n8. Update the values of `prev` and `curr` by assigning `curr` to `prev` and `next` to `curr`.\\n9. Outside the generator function, initialize the variable `callCount` to the desired number of Fibonacci numbers to generate.\\n10. Create a generator object `gen` by calling `fibGenerator()`.\\n11. Create an empty array `fibonacciSequence`.\\n12. Iterate `callCount` times using a `for` loop.\\n13. In each iteration, call `gen.next().value` to retrieve the next Fibonacci number and push it to the `fibonacciSequence` array.\\n14. Finally, log the `fibonacciSequence` array to the console.\\n\\n# Complexity\\n- Time complexity: O(n) where n is the `callCount` since I generate n Fibonacci numbes.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n) where n is the `callCount` since I store n Fibonacci numbers in the `fibonacciSequence` array.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev = 0;\\n    let curr = 1;\\n\\n    yield prev;\\n    if (curr === 1) {\\n        yield curr;\\n    }\\n\\n    for (;;) {\\n        const next = prev + curr;\\n        yield next;\\n        prev = curr;\\n        curr = next;\\n    }\\n};\\n\\nconst callCount = 5;\\nconst gen = fibGenerator();\\n\\nconst fibonacciSequence = [];\\nfor (let i = 0; i < callCount; i++) {\\n    fibonacciSequence.push(gen.next().value);\\n}\\nconsole.log(fibonacciSequence);\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev = 0;\\n    let curr = 1;\\n\\n    yield prev;\\n    if (curr === 1) {\\n        yield curr;\\n    }\\n\\n    for (;;) {\\n        const next = prev + curr;\\n        yield next;\\n        prev = curr;\\n        curr = next;\\n    }\\n};\\n\\nconst callCount = 5;\\nconst gen = fibGenerator();\\n\\nconst fibonacciSequence = [];\\nfor (let i = 0; i < callCount; i++) {\\n    fibonacciSequence.push(gen.next().value);\\n}\\nconsole.log(fibonacciSequence);\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3588573,
                "title": "easy-solution-2648-generate-fibonacci-sequence-javascript-day-29",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    n1=0\\n    n2=1\\n    while(true){\\n        yield n1;\\n        [n1,n2]=[n2,n1+n2];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    n1=0\\n    n2=1\\n    while(true){\\n        yield n1;\\n        [n1,n2]=[n2,n1+n2];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3588249,
                "title": "day29-2-simple-and-easy-js-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n# Code\\n```\\n\\nvar fibGenerator = function*() {\\n    let [a,b]=[0,1];\\n   while(true){\\n       yield a;\\n       [a,b]=[b,a+b];\\n   }\\n};\\n\\n```\\n\\n\\n```\\n\\nvar fibGenerator = function*() {\\n     let x = 0;\\n    let y = 1;\\n    yield x\\n    yield y;\\n    while(true){\\n        const ans = x+ y;\\n        yield ans;\\n        x=y;\\n        y=ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar fibGenerator = function*() {\\n    let [a,b]=[0,1];\\n   while(true){\\n       yield a;\\n       [a,b]=[b,a+b];\\n   }\\n};\\n\\n```\n```\\n\\nvar fibGenerator = function*() {\\n     let x = 0;\\n    let y = 1;\\n    yield x\\n    yield y;\\n    while(true){\\n        const ans = x+ y;\\n        yield ans;\\n        x=y;\\n        y=ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3588146,
                "title": "javascript-a-typescript-detailed-explanation",
                "content": "* fibGenerator is a generator function that produces an infinite sequence of Fibonacci numbers. Each time you call fibGenerator().next().value, it will return the next number in the sequence.\\n\\n* The * symbol is used to denote that this function is a generator function. It allows the function to use the yield keyword to pause the function\\'s execution and return a value to the\\n\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0\\n    let b = 1\\n\\n    yield a\\n    yield b\\n\\n    while(true){\\n        let c = a + b\\n        yield c\\n        a = b\\n        b = c\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\\n\\n\\n---\\n\\n\\n---\\n\\n* For simplicity\\'s sake, we hardcode the first two yield values for fib(0) and fib(1), then after that we use a loop to generate Fibonacci numbers as usual. \\n\\n# code\\n\\n```typescript []\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    // fib(0) === 0\\n    yield 0;\\n    // fib(1) === 1\\n    yield 1;\\n    \\n    let a: number = 0;\\n    let b: number = 1;\\n    \\n    while (true) {\\n        const c: number = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0\\n    let b = 1\\n\\n    yield a\\n    yield b\\n\\n    while(true){\\n        let c = a + b\\n        yield c\\n        a = b\\n        b = c\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\n```typescript []\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    // fib(0) === 0\\n    yield 0;\\n    // fib(1) === 1\\n    yield 1;\\n    \\n    let a: number = 0;\\n    let b: number = 1;\\n    \\n    while (true) {\\n        const c: number = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3588128,
                "title": "generate-fibonacci-sequence",
                "content": "\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\n\\n\\nvar fibGenerator = function*() {\\n    let a = 0; // first number in the fibonacci sequence\\n    let b = 1; // second number in the fibonacci sequence\\n\\n    for (;;) {\\n        yield a; // yielding\\n        [a, b] = [b, a + b]; \\n    }\\n};\\n\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\n\\n\\nvar fibGenerator = function*() {\\n    let a = 0; // first number in the fibonacci sequence\\n    let b = 1; // second number in the fibonacci sequence\\n\\n    for (;;) {\\n        yield a; // yielding\\n        [a, b] = [b, a + b]; \\n    }\\n};\\n\\n\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587949,
                "title": "easy-js-solution",
                "content": "var fibGenerator = function*() {\\n \\n  let prev = 0;\\n  let curr = 1;\\n  \\n  yield prev;\\n  yield curr;\\n  \\n  for (let i = 2; i <= 50; i++) {\\n    const next = prev + curr;\\n    yield next;\\n    prev = curr;\\n    curr = next;\\n  }\\n\\n   \\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var fibGenerator = function*() {\\n \\n  let prev = 0;\\n  let curr = 1;\\n  \\n  yield prev;\\n  yield curr;\\n  \\n  for (let i = 2; i <= 50; i++) {\\n    const next = prev + curr;\\n    yield next;\\n    prev = curr;\\n    curr = next;\\n  }\\n\\n   \\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 3587914,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev1=0;\\n    let prev2=1;\\n    while(true){\\n        yield prev1;\\n        [prev1 , prev2]=[prev2 , prev1+prev2];\\n    } \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let prev1=0;\\n    let prev2=1;\\n    while(true){\\n        yield prev1;\\n        [prev1 , prev2]=[prev2 , prev1+prev2];\\n    } \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587911,
                "title": "easy-javascript-solution",
                "content": "# Approach\\nCertainly! Here\\'s an approach to generating the Fibonacci sequence using a generator function:\\n\\n1. Define a generator function called `fibGenerator()`.\\n2. Inside the function, initialize two variables, `prev` and `curr`, to 0 and 1 respectively. These represent the previous and current numbers in the Fibonacci sequence.\\n3. Use the `yield` keyword to yield the initial value of `prev`.\\n4. Create an infinite loop using `while (true)`.\\n5. Inside the loop, yield the current value of `curr`.\\n6. Calculate the next Fibonacci number by adding `prev` and `curr` and store it in a variable called `next`.\\n7. Update `prev` to the current value of `curr`.\\n8. Update `curr` to the value of `next`.\\n9. Repeat steps 5-8 indefinitely, generating the Fibonacci sequence.\\n\\nTo use the generator function and retrieve the Fibonacci sequence, follow these steps:\\n\\n1. Create an empty array called `sequence` to store the Fibonacci sequence elements.\\n2. Create a generator object by calling `fibGenerator()`, and store it in a variable called `gen`.\\n3. Use a loop to call `gen.next().value` the desired number of times, and push each value to the `sequence` array.\\n4. Once the loop is complete, return the `sequence` array.\\n\\nThis approach allows you to generate the Fibonacci sequence dynamically by controlling the number of times you call `gen.next().value`.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nfunction* fibGenerator() {\\n    let prev = 0;\\n    let curr = 1;\\n\\n    yield prev;\\n\\n    while (true) {\\n      yield curr;\\n      const next = prev + curr;\\n      prev = curr;\\n      curr = next;\\n    }\\n}\\n\\n  function getFibonacciSequence(callCount) {\\n    const sequence = [];\\n    const gen = fibGenerator();\\n\\n    for (let i = 0; i < callCount; i++) {\\n      sequence.push(gen.next().value);\\n    }\\n\\n    return sequence;\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nfunction* fibGenerator() {\\n    let prev = 0;\\n    let curr = 1;\\n\\n    yield prev;\\n\\n    while (true) {\\n      yield curr;\\n      const next = prev + curr;\\n      prev = curr;\\n      curr = next;\\n    }\\n}\\n\\n  function getFibonacciSequence(callCount) {\\n    const sequence = [];\\n    const gen = fibGenerator();\\n\\n    for (let i = 0; i < callCount; i++) {\\n      sequence.push(gen.next().value);\\n    }\\n\\n    return sequence;\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587816,
                "title": "java-script-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let prev1 = 0;\\n    let prev2 = 1;\\n\\n    while (true) {\\n      yield prev1;\\n      [prev1, prev2] = [prev2, prev1+prev2];\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    let prev1 = 0;\\n    let prev2 = 1;\\n\\n    while (true) {\\n      yield prev1;\\n      [prev1, prev2] = [prev2, prev1+prev2];\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587812,
                "title": "day-29-solution-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n\\n    while (true){\\n        yield a;\\n        [a,b] = [b, a+b];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n\\n    while (true){\\n        yield a;\\n        [a,b] = [b, a+b];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587730,
                "title": "my-approach-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let f = 0;\\n    let s = 1;\\n    yield f;\\n    yield s;\\n    while(true){\\n        yield f+s;\\n        let temp = s;\\n        s = f+s;\\n        f = temp;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let f = 0;\\n    let s = 1;\\n    yield f;\\n    yield s;\\n    while(true){\\n        yield f+s;\\n        let temp = s;\\n        s = f+s;\\n        f = temp;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587715,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let a = 0;\\n  let b = 1;\\n  let temp = [0,1]\\n\\n  yield a\\n  yield b\\n\\n  while(true){\\n    let n = temp.length\\n    let c = temp[n-2] + temp[n-1]\\n    temp.push(c)\\n    yield c\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let a = 0;\\n  let b = 1;\\n  let temp = [0,1]\\n\\n  yield a\\n  yield b\\n\\n  while(true){\\n    let n = temp.length\\n    let c = temp[n-2] + temp[n-1]\\n    temp.push(c)\\n    yield c\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587683,
                "title": "javascript-typescript-4-lines-time-space-o-1",
                "content": "# Complexity\\n- Time complexity: O(1)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nconst fibGenerator = function*() {\\n    let i = 0, j = 1\\n    yield i\\n    yield j\\n    while (1) yield j = i + ( i = j )\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nconst fibGenerator = function*() {\\n    let i = 0, j = 1\\n    yield i\\n    yield j\\n    while (1) yield j = i + ( i = j )\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587656,
                "title": "day-29-easy-solution-in-js",
                "content": "\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    for(let a=0,b=1;true;b+=a,a=b-a)yield a;\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    for(let a=0,b=1;true;b+=a,a=b-a)yield a;\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587647,
                "title": "using-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    /*\\nIn JavaScript, the yield keyword is used in generator functions to pause and resume the execution of the function. It is part of the generator functionality introduced in ECMAScript 2015 (ES6).\\n    */\\n    let a = 0;\\n    let b = 1;\\n\\n    while(true){\\n        yield a;\\n        // [a,b] = [b,a+b]; using destructuring\\n        let temp = b;\\n        b = a+b;\\n        a = temp;\\n\\n        // console.log(a,b);\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    /*\\nIn JavaScript, the yield keyword is used in generator functions to pause and resume the execution of the function. It is part of the generator functionality introduced in ECMAScript 2015 (ES6).\\n    */\\n    let a = 0;\\n    let b = 1;\\n\\n    while(true){\\n        yield a;\\n        // [a,b] = [b,a+b]; using destructuring\\n        let temp = b;\\n        b = a+b;\\n        a = temp;\\n\\n        // console.log(a,b);\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587644,
                "title": "typescript-solution-using-shifted-array",
                "content": "\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n  const fib = [0, 1, 1];\\n  while (true) {\\n    yield fib.shift()!;\\n    fib.push(fib[0] + fib[1]);\\n  }\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n  const fib = [0, 1, 1];\\n  while (true) {\\n    yield fib.shift()!;\\n    fib.push(fib[0] + fib[1]);\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587605,
                "title": "js-simple-and-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield 0;\\n    yield 1;\\n    let a=1,b=0,c=0;\\n    while(true){\\n      c=a+b;\\n      b=a;\\n      a=c;\\n      yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield 0;\\n    yield 1;\\n    let a=1,b=0,c=0;\\n    while(true){\\n      c=a+b;\\n      b=a;\\n      a=c;\\n      yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587567,
                "title": "shortest-code",
                "content": "# Complexity\\n- Time complexity: O(1) for each `next` operation\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a=0, b=1;\\n    while(true) {\\n        yield a;\\n        b += a;\\n        a = b-a;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a=0, b=1;\\n    while(true) {\\n        yield a;\\n        b += a;\\n        a = b-a;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587554,
                "title": "javascript-yield-2-state-dp",
                "content": "```\\n/**\\n * @return {Generator<number>}\\n */\\n\\nvar fibGenerator = function*() {\\n\\n    let last1 = 0\\n    let last2 = 1\\n\\n    yield 0\\n    yield 1\\n    \\n    while (true) {\\n        let res = last1 + last2\\n        last1 = last2\\n        last2 = res\\n        yield res\\n    }\\n\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\n\\nvar fibGenerator = function*() {\\n\\n    let last1 = 0\\n    let last2 = 1\\n\\n    yield 0\\n    yield 1\\n    \\n    while (true) {\\n        let res = last1 + last2\\n        last1 = last2\\n        last2 = res\\n        yield res\\n    }\\n\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 3587542,
                "title": "day-29",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let x1 = 0, x2 = 1;\\n  while (true) {\\n    yield x1;\\n    [x1, x2] = [x2, x1 + x2];\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n  let x1 = 0, x2 = 1;\\n  while (true) {\\n    yield x1;\\n    [x1, x2] = [x2, x1 + x2];\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3583796,
                "title": "2648-generate-fibonacci-sequence",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    let temp = 0;\\n    while(true) {\\n        yield a;\\n        temp = a + b\\n        a = b;\\n        b = temp;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    let temp = 0;\\n    while(true) {\\n        yield a;\\n        temp = a + b\\n        a = b;\\n        b = temp;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3575089,
                "title": "easy-js-solution-using-while-loop",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield x = 0; \\n    yield y = 1;\\n    while(true) {\\n        const next = x + y\\n        x = y\\n        y = next\\n        yield next\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield x = 0; \\n    yield y = 1;\\n    while(true) {\\n        const next = x + y\\n        x = y\\n        y = next\\n        yield next\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3557659,
                "title": "javascript-very-easy-solution-o-n-beats-100",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let x = 0, y = 1;\\n    while(true) {\\n        yield x;\\n        yield y;\\n        x = x + y;\\n        y = x + y;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let x = 0, y = 1;\\n    while(true) {\\n        yield x;\\n        yield y;\\n        x = x + y;\\n        y = x + y;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3553476,
                "title": "javascript-with-comments-begineer-friendly",
                "content": "# Intuition\\nIn JavaScript, yield is used to pause the execution of a function. When the function is invoked again, the execution continues from the last yield statement. A generator returns a generator object, which is an iterator. This object generates one value at a time and then pauses execution.\\n\\n# Code\\n```\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    while(true) {\\n        yield a; // Gives value of a and pause the function\\n        [a, b] = [b, a+b]; // Get next value of Fibonacci Sequence\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    while(true) {\\n        yield a; // Gives value of a and pause the function\\n        [a, b] = [b, a+b]; // Get next value of Fibonacci Sequence\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3551850,
                "title": "yield-simplest-solution-in-js",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    var a = 0;\\n    var b = 1;\\n\\n    while(true) {\\n        yield a;\\n        var temp = a;\\n        a = b;\\n        b = temp+b;\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n\\n    var a = 0;\\n    var b = 1;\\n\\n    while(true) {\\n        yield a;\\n        var temp = a;\\n        a = b;\\n        b = temp+b;\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3526432,
                "title": "js-using-only-2-variables",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0\\n    let b = 1 \\n\\n    while(true) {\\n        if (b === 1) {\\n            yield a ? 1 : 0\\n        }\\n\\n        b = a + b;\\n        a = b - a;\\n        yield b \\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0\\n    let b = 1 \\n\\n    while(true) {\\n        if (b === 1) {\\n            yield a ? 1 : 0\\n        }\\n\\n        b = a + b;\\n        a = b - a;\\n        yield b \\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3519908,
                "title": "javascript-1line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\n    var fibGenerator = function*() {\\n    for (let a = 0, b = 1; true; b += a, a = b - a) yield a;\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\n    var fibGenerator = function*() {\\n    for (let a = 0, b = 1; true; b += a, a = b - a) yield a;\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3513744,
                "title": "js-easy-solution",
                "content": "# Code\\n```\\n\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    while (true){\\n        yield a;\\n        [a,b] = [b,a+b]\\n    } \\n};\\n // Note : The yield operator is used to pause and resume a generator function.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Code\\n```\\n\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    while (true){\\n        yield a;\\n        [a,b] = [b,a+b]\\n    } \\n};\\n // Note : The yield operator is used to pause and resume a generator function.",
                "codeTag": "Unknown"
            },
            {
                "id": 3508663,
                "title": "fibonacci-generator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n  let a = 0,\\n    b = 1,\\n    c\\n  yield a\\n  yield b\\n  while (true) {\\n    yield (c = a + b)\\n    a = b\\n    b = c\\n  }\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n  let a = 0,\\n    b = 1,\\n    c\\n  yield a\\n  yield b\\n  while (true) {\\n    yield (c = a + b)\\n    a = b\\n    b = c\\n  }\\n}\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3508497,
                "title": "javascript-solution-easy-to-understand",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var i = 1, fb = [0, 1];\\n    yield 0;\\n    while (true) {\\n        yield fb[i++ % 2] = fb[i % 2] + fb[(i + 1) % 2];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var i = 1, fb = [0, 1];\\n    yield 0;\\n    while (true) {\\n        yield fb[i++ % 2] = fb[i % 2] + fb[(i + 1) % 2];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3505665,
                "title": "simple-js-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1, c = 0;\\n    yield a;\\n    yield b;\\n    while (true) {\\n        c = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1, c = 0;\\n    yield a;\\n    yield b;\\n    while (true) {\\n        c = a + b;\\n        a = b;\\n        b = c;\\n        yield c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501454,
                "title": "yield",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield 0;\\n    yield 1;\\n    let a = 0 ,b = 1;\\n    while(true){\\n        yield a + b;\\n        [a,b] = [b,a+b];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield 0;\\n    yield 1;\\n    let a = 0 ,b = 1;\\n    while(true){\\n        yield a + b;\\n        [a,b] = [b,a+b];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498678,
                "title": "javascript-solution-s-per-easy-to-understand",
                "content": "```javascript\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a + b];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0, b = 1;\\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a + b];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497333,
                "title": "easy-solution-with-for",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n    let a = 1;\\n    let b = 0;\\n\\n    for (let i = 3; ; i++) {\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n        yield a;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n    let a = 1;\\n    let b = 0;\\n\\n    for (let i = 3; ; i++) {\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n        yield a;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3496762,
                "title": "easy-to-understand-solution-using-yield",
                "content": "Please Upvote if it helps you!\\n# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    yield 0;\\n    yield 1;\\n    \\n    let previous = 0;\\n    let current = 1;\\n    let next = 0;\\n\\n    while(true) {\\n        next = previous + current;\\n        previous = current;\\n        current = next;\\n        yield next;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    yield 0;\\n    yield 1;\\n    \\n    let previous = 0;\\n    let current = 1;\\n    let next = 0;\\n\\n    while(true) {\\n        next = previous + current;\\n        previous = current;\\n        current = next;\\n        yield next;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3491744,
                "title": "javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let x = 0;\\n    let y = 1;\\n    yield x;\\n    yield y;\\n    while(true){\\n        let z= x+y;\\n        yield z\\n        x=y\\n        y=z\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let x = 0;\\n    let y = 1;\\n    yield x;\\n    yield y;\\n    while(true){\\n        let z= x+y;\\n        yield z\\n        x=y\\n        y=z\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489863,
                "title": "js-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\n\\nvar fibGenerator = function*() {\\n    let x= 0;\\n    let y= 1;\\n\\n    while (true){\\n        yield x;\\n        let t = x;\\n        x = y;\\n        y = t + y;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\n\\nvar fibGenerator = function*() {\\n    let x= 0;\\n    let y= 1;\\n\\n    while (true){\\n        yield x;\\n        let t = x;\\n        x = y;\\n        y = t + y;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486235,
                "title": "js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let first = 0;\\n    let second = 1;\\n\\n    yield first;\\n    yield second;\\n\\n    while(true){\\n\\n        let newNum = first + second;\\n        yield newNum;\\n\\n        first = second;\\n        second = newNum;\\n\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let first = 0;\\n    let second = 1;\\n\\n    yield first;\\n    yield second;\\n\\n    while(true){\\n\\n        let newNum = first + second;\\n        yield newNum;\\n\\n        first = second;\\n        second = newNum;\\n\\n    }\\n    \\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3483755,
                "title": "easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n    let x = 0, y = 1\\n    yield x\\n    yield y\\n    while (true) {\\n        let z = x + y\\n        yield z\\n        x = y\\n        y = z\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function* () {\\n    let x = 0, y = 1\\n    yield x\\n    yield y\\n    while (true) {\\n        let z = x + y\\n        yield z\\n        x = y\\n        y = z\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3483091,
                "title": "typescript",
                "content": "# Intuition\\nMy first thoughts on solving this problem were to use a generator function to create an iterable object that yields the Fibonacci sequence one number at a time. This way, we can efficiently generate the sequence without calculating and storing all values at once.\\n\\n# Approach\\n1. Create a generator function `fibGenerator` that yields the Fibonacci sequence.\\n2. Initialize two variables `a` and `b` with the first two numbers of the Fibonacci sequence (0 and 1).\\n3. Use an infinite loop to continually generate the next numbers in the sequence.\\n4. In each iteration, yield the current value of `a`, then update the values of `a` and `b` to generate the next number in the sequence.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$, where `n` is the number of calls to the generator\\'s `next` method. The generator only computes the next number in the sequence when requested, so the time complexity for each call to `next` is $$O(1)$$.\\n\\n- Space complexity: $$O(1)$$, as the generator only stores two numbers (`a` and `b`) at a time, regardless of the number of calls to the `next` method.\\n\\n# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let a = 0;\\n    let b = 1;\\n    \\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a + b];\\n    }\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let a = 0;\\n    let b = 1;\\n    \\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a + b];\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3483088,
                "title": "easiest-solution-for-beginners",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var value1 = 0;\\n    var value2 = 1;\\n    \\n    while(true) {\\n        yield value1;\\n        value2 +=value1;\\n        value1 = value2-value1;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    var value1 = 0;\\n    var value2 = 1;\\n    \\n    while(true) {\\n        yield value1;\\n        value2 +=value1;\\n        value1 = value2-value1;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3477378,
                "title": "array-based-3-liner",
                "content": "# Intuition\\nI choose an array as a datastructure to hold the results, as it provides fast access to adding and removing elements on it\\'s ends.\\n\\n# Approach\\nThe most non-trivial thing here was the meaning of generaror function. It was not obvious for me that on *yield* the current execution of *next()* is paused and *.value* available as an value next to *yield*. On subsequent *next()* calls, execution is started from the next line of previous *yield*.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    const fib = [0, 1];\\n    while (true) {\\n        fib.push(fib[0] + fib[1]);\\n        yield fib.shift();\\n    }\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    const fib = [0, 1];\\n    while (true) {\\n        fib.push(fib[0] + fib[1]);\\n        yield fib.shift();\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3466420,
                "title": "easy-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    while(true) {\\n        yield a;\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    while(true) {\\n        yield a;\\n        let c = a + b;\\n        a = b;\\n        b = c;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3462105,
                "title": "easy-solution-ts",
                "content": "\\n# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    yield* generator();\\n};\\n\\nfunction* generator () {\\n    let f_0 = 0, f_1 = 1;\\n\\n    yield f_0;\\n    yield f_1;\\n\\n    while (true) {\\n        yield f_0 + f_1;\\n\\n        let temp = f_0;\\n        f_0 = f_1;\\n        f_1 = temp + f_1;\\n    }\\n}",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "\\n# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    yield* generator();\\n};\\n\\nfunction* generator () {\\n    let f_0 = 0, f_1 = 1;\\n\\n    yield f_0;\\n    yield f_1;\\n\\n    while (true) {\\n        yield f_0 + f_1;\\n\\n        let temp = f_0;\\n        f_0 = f_1;\\n        f_1 = temp + f_1;\\n    }\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 3460679,
                "title": "accepted-javascript",
                "content": "```\\nvar fibGenerator = function*() {\\n\\n    var prev = 0;\\n    var cur = 1;\\n\\n    while (true) {\\n        yield prev;\\n        [prev, cur] = [cur, prev + cur];\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar fibGenerator = function*() {\\n\\n    var prev = 0;\\n    var cur = 1;\\n\\n    while (true) {\\n        yield prev;\\n        [prev, cur] = [cur, prev + cur];\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3460191,
                "title": "simple-ts-js-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield 0;\\n    yield 1;\\n    const list= [0,1];\\n    for(let i=0; i<list.length; i++){\\n        const value=list[list.length-1] + list[list.length-2];\\n        list.push(value)\\n        yield value\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    yield 0;\\n    yield 1;\\n    const list= [0,1];\\n    for(let i=0; i<list.length; i++){\\n        const value=list[list.length-1] + list[list.length-2];\\n        list.push(value)\\n        yield value\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3459691,
                "title": "easy-to-understand-using-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let arr = [0,1];\\n    let i = 0;\\n    let k = 0;\\n    let m = 1;\\n    while (true) {\\n        yield arr[i];\\n        arr.push(arr[k]+arr[m]);\\n        k++;\\n        m++;\\n        i++;\\n    }\\n};\\n\\n\\n/**\\nThis is more efficient \\nlet [prev, curr] = [0, 1];\\n  while (true) {\\n    yield prev;\\n    [prev, curr] = [curr, prev + curr];\\n  }\\n*/\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let arr = [0,1];\\n    let i = 0;\\n    let k = 0;\\n    let m = 1;\\n    while (true) {\\n        yield arr[i];\\n        arr.push(arr[k]+arr[m]);\\n        k++;\\n        m++;\\n        i++;\\n    }\\n};\\n\\n\\n/**\\nThis is more efficient \\nlet [prev, curr] = [0, 1];\\n  while (true) {\\n    yield prev;\\n    [prev, curr] = [curr, prev + curr];\\n  }\\n*/\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3459677,
                "title": "easy-to-understand-using-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let arr = [0,1];\\n    let i = 0;\\n    let k = 0;\\n    let m = 1;\\n    while (true) {\\n        yield arr[i];\\n        arr.push(arr[k]+arr[m]);\\n        k++;\\n        m++;\\n        i++;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let arr = [0,1];\\n    let i = 0;\\n    let k = 0;\\n    let m = 1;\\n    while (true) {\\n        yield arr[i];\\n        arr.push(arr[k]+arr[m]);\\n        k++;\\n        m++;\\n        i++;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3456343,
                "title": "simple-and-easy-solution-typescript-js",
                "content": "# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let prev_num = 0;\\n    let curr_num = 1;\\n    yield prev_num; // first next\\n    yield curr_num; // second next\\n\\n    // inifinite loop\\n    // next seconds, many nexts\\n    while (true){\\n        const temp_num = curr_num;\\n        curr_num += prev_num;\\n        prev_num = temp_num;\\n        yield curr_num;\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let prev_num = 0;\\n    let curr_num = 1;\\n    yield prev_num; // first next\\n    yield curr_num; // second next\\n\\n    // inifinite loop\\n    // next seconds, many nexts\\n    while (true){\\n        const temp_num = curr_num;\\n        curr_num += prev_num;\\n        prev_num = temp_num;\\n        yield curr_num;\\n    }\\n\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3453841,
                "title": "100-short-typesrcipt-click",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let i = 2;\\n    let mem = {0: 0, 1: 1};\\n    yield mem[0];\\n    yield mem[1];\\n    while(true) {\\n        mem[i] = mem[i-1] + mem[i-2];\\n        yield mem[i];\\n        i++;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let i = 2;\\n    let mem = {0: 0, 1: 1};\\n    yield mem[0];\\n    yield mem[1];\\n    while(true) {\\n        mem[i] = mem[i-1] + mem[i-2];\\n        yield mem[i];\\n        i++;\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3453657,
                "title": "2648-generate-fibonacci-sequence-javascript-accepted",
                "content": "\\n When a function is marked as a generator using the  function* syntax, it can use the yield keyword to produce a value that can be retrieved by the caller. \\n\\nThe generator function will pause its execution at the yield statement and return the value specified in the statement to the caller. The generator function can then be resumed by calling the next() method on the generator object.\\n\\n\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\nlet prev = 0;\\nlet curr = 1;\\nyield prev;\\nyield curr;\\nwhile(true) {\\n  let val = prev + curr;\\n  yield val;\\n  prev = curr;\\n  curr = val;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```\\nif u want any explanation ,please comment below , **HAPPY to HELP YOU!!**\\nif u Like\\uD83E\\uDD70 Please **UPVOTE** !!\\nThank You \\nHappy Coding!\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\nlet prev = 0;\\nlet curr = 1;\\nyield prev;\\nyield curr;\\nwhile(true) {\\n  let val = prev + curr;\\n  yield val;\\n  prev = curr;\\n  curr = val;\\n  }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3453528,
                "title": "ts-lazy-tabulation-approach-98-time-50ms-80-space-42-7mb",
                "content": "Ah, good old Fibonacci, the father of Dynamic Programming in the mind of many students. Also, a Tuscan like Leonardo da Vinci, Niccol\\xF2 Macchiavelli... and me \\uD83D\\uDE06!\\n\\nBut enough with the trivia bit; assuming we all encountered before, let\\'s go straight to the point, by initially declaring:\\n* `i`, our pointer, initially set to `0`;\\n* `fibs`, our collections of Fibonacci numbers.\\n\\nOur main loop will forever (`while (true)`, since we know the number of calls will never overflow):\\n* check if `i` is now pointing outside the current boundaries of `fibs` (ie: `i == fibs.length`) and in case append an element given by the sum of the last two to it;\\n* `yield` `fibs[i]`;\\n* increase `i` by `1`.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$ (for each call)\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```ts\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let i = 0, fibs = [0, 1];\\n    while (true) {\\n        if (i == fibs.length) fibs.push(fibs[i - 1] + fibs[i - 2]);\\n        yield fibs[i++];\\n    }\\n};\\n```\\n\\nCan we do better? Well, since we do not need to store the whole sequence, but just the last two values, definitely so!\\n\\nWe will just declare `a` and `b` initially set to be `0` and `1` respectively, `return` `i` for the first `2` iterations and then `return` `b` computed as the sum of the previous two values, updating `a` to take the previous `b` value a we go.\\n\\nSo, for example:\\n\\n```ts\\ni = 0, a = 0, b = 1 => i // which is 0 - initial run\\ni = 1, a = 0, b = 1 => i // which is 1 - second run\\ni = 2, a = 1, b = 1 => b // which is 1 - third run\\ni = 2, a = 1, b = 2 => b // which is 2 - fourth run\\ni = 2, a = 2, b = 3 => b // which is 3 - fifth run\\ni = 2, a = 3, b = 5 => b // which is 5 - sixth run\\ni = 2, a = 5, b = 8 => b // which is 5 - seventh run\\n...\\n```\\n\\nNotice we do not even waste computation updating `i` once it reaches the threshold of `2`, just computing the next Fibonacci number in a lazy way.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$ (for each call)\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```ts\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let i = 0, [a, b] = [0, 1];\\n    while (true) {\\n        if (i >= 2) [b, a] = [a + b, b]; \\n        yield i < 2 ? i++ : b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Array",
                    "Dynamic Programming"
                ],
                "code": "```ts\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let i = 0, fibs = [0, 1];\\n    while (true) {\\n        if (i == fibs.length) fibs.push(fibs[i - 1] + fibs[i - 2]);\\n        yield fibs[i++];\\n    }\\n};\\n```\n```ts\\ni = 0, a = 0, b = 1 => i // which is 0 - initial run\\ni = 1, a = 0, b = 1 => i // which is 1 - second run\\ni = 2, a = 1, b = 1 => b // which is 1 - third run\\ni = 2, a = 1, b = 2 => b // which is 2 - fourth run\\ni = 2, a = 2, b = 3 => b // which is 3 - fifth run\\ni = 2, a = 3, b = 5 => b // which is 5 - sixth run\\ni = 2, a = 5, b = 8 => b // which is 5 - seventh run\\n...\\n```\n```ts\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    let i = 0, [a, b] = [0, 1];\\n    while (true) {\\n        if (i >= 2) [b, a] = [a + b, b]; \\n        yield i < 2 ? i++ : b;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3453085,
                "title": "using-while-loop-and-yield-keyword",
                "content": "# Code\\n```\\nconst fibGenerator = function*() {\\n    let [a,b] = [0,1];\\n    while(1){\\n        yield a;\\n        [a,b] = [b, a+b];\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst fibGenerator = function*() {\\n    let [a,b] = [0,1];\\n    while(1){\\n        yield a;\\n        [a,b] = [b, a+b];\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3453009,
                "title": "javascript-ez-solution",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a + b];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Generator<number>}\\n */\\nvar fibGenerator = function*() {\\n    let a = 0;\\n    let b = 1;\\n    while (true) {\\n        yield a;\\n        [a, b] = [b, a + b];\\n    }\\n};\\n\\n/**\\n * const gen = fibGenerator();\\n * gen.next().value; // 0\\n * gen.next().value; // 1\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3453002,
                "title": "javascript-beat-92-in-space-beat-88-in-time",
                "content": "# CODE \\n```\\nvar fibGenerator = function*() {\\n    let x = 0;\\n    let y = 1;\\n    yield x;\\n    yield y;\\n    \\n    while (true) {\\n        let temp = x + y;\\n        yield temp;\\n        x = y;\\n        y = temp;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar fibGenerator = function*() {\\n    let x = 0;\\n    let y = 1;\\n    yield x;\\n    yield y;\\n    \\n    while (true) {\\n        let temp = x + y;\\n        yield temp;\\n        x = y;\\n        y = temp;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3451145,
                "title": "js-code-with-c-solution-too",
                "content": "\\n```\\nvar fibGenerator = function*() {\\n     for(fib=[-1,1]; ;yield (fib=[fib[1],fib[0]+fib[1]])[1]);       \\n};\\n```\\n\\nThe C++ solution for the same:\\n\\nstruct FibGenerator {\\n    int f[2] = {-1, 1};\\n    int operator() () {\\n        int temp = f[0];\\n        f[0] = f[1];\\n        f[1] += temp;\\n        return f[1];\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nvar fibGenerator = function*() {\\n     for(fib=[-1,1]; ;yield (fib=[fib[1],fib[0]+fib[1]])[1]);       \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3450170,
                "title": "answer-use-yield",
                "content": "# Code\\n```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    yield 0;\\n    yield 1;\\n    \\n    let a = 0, b = 1;\\n    \\n    while (1) {\\n        const c = a + b;\\n        [a, b] = [b, c];\\n        \\n        yield c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction* fibGenerator(): Generator<number, any, number> {\\n    yield 0;\\n    yield 1;\\n    \\n    let a = 0, b = 1;\\n    \\n    while (1) {\\n        const c = a + b;\\n        [a, b] = [b, c];\\n        \\n        yield c;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1914243,
                "content": [
                    {
                        "username": "Selithrarion",
                        "content": "hmm i needed to add `;` (semicolon) after `yield a` \\uD83D\\uDE2F"
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re looking for one line solution without destructuring assignment, it\\'s [here](https://leetcode.com/problems/generate-fibonacci-sequence/solutions/3451942/one-line-two-variables-without-destructuring-assignment/)."
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "Why there is a need to add semi-colon  `;` after yield a"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Cool to know that yield and generators exist in JS too, brings back Python memories 😊"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day29 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTip : You can use yield keyword in generator functions "
                    },
                    {
                        "username": "ildarum21",
                        "content": "My solution works in the browser, bit doesn\\'t work on leetcode. Returned nulls. Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "It\\'s hard for anyone to help without seeing your code."
                    },
                    {
                        "username": "FrontEndDeveloping",
                        "content": "Why I can\\'t create solution from my code? Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "To creat a solution you need to submit your code, when you then go to solutions and click on add solution it should automatically grab your last submission. It\\'s hard to say why it didn\\'t work for you without knowing what you did exactly."
                    }
                ]
            },
            {
                "id": 1873110,
                "content": [
                    {
                        "username": "Selithrarion",
                        "content": "hmm i needed to add `;` (semicolon) after `yield a` \\uD83D\\uDE2F"
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re looking for one line solution without destructuring assignment, it\\'s [here](https://leetcode.com/problems/generate-fibonacci-sequence/solutions/3451942/one-line-two-variables-without-destructuring-assignment/)."
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "Why there is a need to add semi-colon  `;` after yield a"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Cool to know that yield and generators exist in JS too, brings back Python memories 😊"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day29 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTip : You can use yield keyword in generator functions "
                    },
                    {
                        "username": "ildarum21",
                        "content": "My solution works in the browser, bit doesn\\'t work on leetcode. Returned nulls. Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "It\\'s hard for anyone to help without seeing your code."
                    },
                    {
                        "username": "FrontEndDeveloping",
                        "content": "Why I can\\'t create solution from my code? Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "To creat a solution you need to submit your code, when you then go to solutions and click on add solution it should automatically grab your last submission. It\\'s hard to say why it didn\\'t work for you without knowing what you did exactly."
                    }
                ]
            },
            {
                "id": 1914475,
                "content": [
                    {
                        "username": "Selithrarion",
                        "content": "hmm i needed to add `;` (semicolon) after `yield a` \\uD83D\\uDE2F"
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re looking for one line solution without destructuring assignment, it\\'s [here](https://leetcode.com/problems/generate-fibonacci-sequence/solutions/3451942/one-line-two-variables-without-destructuring-assignment/)."
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "Why there is a need to add semi-colon  `;` after yield a"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Cool to know that yield and generators exist in JS too, brings back Python memories 😊"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day29 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTip : You can use yield keyword in generator functions "
                    },
                    {
                        "username": "ildarum21",
                        "content": "My solution works in the browser, bit doesn\\'t work on leetcode. Returned nulls. Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "It\\'s hard for anyone to help without seeing your code."
                    },
                    {
                        "username": "FrontEndDeveloping",
                        "content": "Why I can\\'t create solution from my code? Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "To creat a solution you need to submit your code, when you then go to solutions and click on add solution it should automatically grab your last submission. It\\'s hard to say why it didn\\'t work for you without knowing what you did exactly."
                    }
                ]
            },
            {
                "id": 1913831,
                "content": [
                    {
                        "username": "Selithrarion",
                        "content": "hmm i needed to add `;` (semicolon) after `yield a` \\uD83D\\uDE2F"
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re looking for one line solution without destructuring assignment, it\\'s [here](https://leetcode.com/problems/generate-fibonacci-sequence/solutions/3451942/one-line-two-variables-without-destructuring-assignment/)."
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "Why there is a need to add semi-colon  `;` after yield a"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Cool to know that yield and generators exist in JS too, brings back Python memories 😊"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day29 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTip : You can use yield keyword in generator functions "
                    },
                    {
                        "username": "ildarum21",
                        "content": "My solution works in the browser, bit doesn\\'t work on leetcode. Returned nulls. Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "It\\'s hard for anyone to help without seeing your code."
                    },
                    {
                        "username": "FrontEndDeveloping",
                        "content": "Why I can\\'t create solution from my code? Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "To creat a solution you need to submit your code, when you then go to solutions and click on add solution it should automatically grab your last submission. It\\'s hard to say why it didn\\'t work for you without knowing what you did exactly."
                    }
                ]
            },
            {
                "id": 1913817,
                "content": [
                    {
                        "username": "Selithrarion",
                        "content": "hmm i needed to add `;` (semicolon) after `yield a` \\uD83D\\uDE2F"
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re looking for one line solution without destructuring assignment, it\\'s [here](https://leetcode.com/problems/generate-fibonacci-sequence/solutions/3451942/one-line-two-variables-without-destructuring-assignment/)."
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "Why there is a need to add semi-colon  `;` after yield a"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Cool to know that yield and generators exist in JS too, brings back Python memories 😊"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day29 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTip : You can use yield keyword in generator functions "
                    },
                    {
                        "username": "ildarum21",
                        "content": "My solution works in the browser, bit doesn\\'t work on leetcode. Returned nulls. Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "It\\'s hard for anyone to help without seeing your code."
                    },
                    {
                        "username": "FrontEndDeveloping",
                        "content": "Why I can\\'t create solution from my code? Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "To creat a solution you need to submit your code, when you then go to solutions and click on add solution it should automatically grab your last submission. It\\'s hard to say why it didn\\'t work for you without knowing what you did exactly."
                    }
                ]
            },
            {
                "id": 1886056,
                "content": [
                    {
                        "username": "Selithrarion",
                        "content": "hmm i needed to add `;` (semicolon) after `yield a` \\uD83D\\uDE2F"
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re looking for one line solution without destructuring assignment, it\\'s [here](https://leetcode.com/problems/generate-fibonacci-sequence/solutions/3451942/one-line-two-variables-without-destructuring-assignment/)."
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "Why there is a need to add semi-colon  `;` after yield a"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Cool to know that yield and generators exist in JS too, brings back Python memories 😊"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day29 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTip : You can use yield keyword in generator functions "
                    },
                    {
                        "username": "ildarum21",
                        "content": "My solution works in the browser, bit doesn\\'t work on leetcode. Returned nulls. Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "It\\'s hard for anyone to help without seeing your code."
                    },
                    {
                        "username": "FrontEndDeveloping",
                        "content": "Why I can\\'t create solution from my code? Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "To creat a solution you need to submit your code, when you then go to solutions and click on add solution it should automatically grab your last submission. It\\'s hard to say why it didn\\'t work for you without knowing what you did exactly."
                    }
                ]
            },
            {
                "id": 1870304,
                "content": [
                    {
                        "username": "Selithrarion",
                        "content": "hmm i needed to add `;` (semicolon) after `yield a` \\uD83D\\uDE2F"
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re looking for one line solution without destructuring assignment, it\\'s [here](https://leetcode.com/problems/generate-fibonacci-sequence/solutions/3451942/one-line-two-variables-without-destructuring-assignment/)."
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "Why there is a need to add semi-colon  `;` after yield a"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Cool to know that yield and generators exist in JS too, brings back Python memories 😊"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day29 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTip : You can use yield keyword in generator functions "
                    },
                    {
                        "username": "ildarum21",
                        "content": "My solution works in the browser, bit doesn\\'t work on leetcode. Returned nulls. Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "It\\'s hard for anyone to help without seeing your code."
                    },
                    {
                        "username": "FrontEndDeveloping",
                        "content": "Why I can\\'t create solution from my code? Can someone explain?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "To creat a solution you need to submit your code, when you then go to solutions and click on add solution it should automatically grab your last submission. It\\'s hard to say why it didn\\'t work for you without knowing what you did exactly."
                    }
                ]
            }
        ]
    }
]