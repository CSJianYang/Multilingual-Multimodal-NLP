[
    {
        "title": "Minimize String Length",
        "question_content": "Given a 0-indexed string s, repeatedly perform the following operation any number of times:\n\n\tChoose an index i in the string, and let c be the character in position i. Delete the closest occurrence of c to the left of i (if any) and the closest occurrence of c to the right of i (if any).\n\nYour task is to minimize the length of s by performing the above operation any number of times.\nReturn an integer denoting the length of the minimized string.\n&nbsp;\nExample 1:\n\nInput: s = \"aaabc\"\nOutput: 3\nExplanation: In this example, s is \"aaabc\". We can start by selecting the character 'a' at index 1. We then remove the closest 'a' to the left of index 1, which is at index 0, and the closest 'a' to the right of index 1, which is at index 2. After this operation, the string becomes \"abc\". Any further operation we perform on the string will leave it unchanged. Therefore, the length of the minimized string is 3.\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: 3\nExplanation: For this we can start with character 'b' at index 1. There is no occurrence of 'b' to the left of index 1, but there is one to the right at index 2, so we delete the 'b' at index 2. The string becomes \"cbd\" and further operations will leave it unchanged. Hence, the minimized length is 3.&nbsp;\n\nExample 3:\n\nInput: s = \"dddaaa\"\nOutput: 2\nExplanation: For this, we can start with the character 'd' at index 1. The closest occurrence of a 'd' to its left is at index 0, and the closest occurrence of a 'd' to its right is at index 2. We delete both index 0 and 2, so the string becomes \"daaa\". In the new string, we can select the character 'a' at index 2. The closest occurrence of an 'a' to its left is at index 1, and the closest occurrence of an 'a' to its right is at index 3. We delete both of them, and the string becomes \"da\". We cannot minimize this further, so the minimized length is 2.\n\n&nbsp;\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 100\n\ts contains only lowercase English letters",
        "solutions": [
            {
                "id": 3616312,
                "title": "one-line-code-for-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set((s)))\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set((s)))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595131,
                "title": "find-unique-character-very-simple-and-easy-to-understand-solution",
                "content": "<b>Up vote if you like the solution </b>\\nIt can be observed that the we can remove all the duplicate of a character except the last one. So basically we just need to find number of unique character we have in the string as the answer.\\n\\n# Code\\n```\\nint minimizedStringLength(string s) {\\n    unordered_set<char> st;\\n    for(auto c: s) st.insert(c);\\n    return st.size();\\n}\\n```\\n\\n<b>Here is an article of my recent interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint minimizedStringLength(string s) {\\n    unordered_set<char> st;\\n    for(auto c: s) st.insert(c);\\n    return st.size();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3595387,
                "title": "one-line-solution-c-java-python",
                "content": "# Intuition\\nJust count the number of distinct characters.\\n\\n# Approach\\nJust count the number of distinct characters.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\nC++\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        return unordered_set<char>(s.begin(), s.end()).size();\\n    }\\n};\\n```\\n\\nJava\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        return (int) s.chars().distinct().count();\\n    }\\n}\\n```\\n\\nPython\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        return unordered_set<char>(s.begin(), s.end()).size();\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        return (int) s.chars().distinct().count();\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3594946,
                "title": "hashset",
                "content": "We can remove all occurances of `c` except the last one.\\n\\n**Python 3**\\n```python\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len({*s})\\n```\\n\\n**C++**\\n```cpp\\nint minimizedStringLength(string s) {\\n    return unordered_set(begin(s), end(s)).size();\\n}\\n```",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```python\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len({*s})\\n```\n```cpp\\nint minimizedStringLength(string s) {\\n    return unordered_set(begin(s), end(s)).size();\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3594961,
                "title": "java-easy-solution-6-lines",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int minimizedStringLength(String s) {\\n    var map = new boolean[26];\\n    var ans = 0;\\n    \\n    for (var c : s.toCharArray())\\n      map[c - \\'a\\'] = true;\\n\\n    for (var c : map) if (c) ans++;\\n    \\n    return ans;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public int minimizedStringLength(String s) {\\n    var map = new boolean[26];\\n    var ans = 0;\\n    \\n    for (var c : s.toCharArray())\\n      map[c - \\'a\\'] = true;\\n\\n    for (var c : map) if (c) ans++;\\n    \\n    return ans;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3594910,
                "title": "use-new-set-2-lines",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nconst minimizedStringLength = function(s) {\\n    const u = new Set(s)\\n    return u.size\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nconst minimizedStringLength = function(s) {\\n    const u = new Set(s)\\n    return u.size\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3596066,
                "title": "python-3-1-line-w-explanation-t-m-98-46",
                "content": "The problem can be reduced to this:\\n\\nIf a character occurs more than once in`s`, then we may remove at least one of those characters with each move. If exactly one of a character is present, then it may not be removed. Hence, the answer is the count of distinct\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        \\n        return len(set(s))\\n```\\n[https://leetcode.com/problems/minimize-string-length/submissions/963522297/](http://)\\n\\n\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(1) in which *N* ~ count of distinct characters.",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        \\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595507,
                "title": "java-c-python-hashset",
                "content": "# **Explanation**\\nFor all same character, at least one will be left.\\nSo we only need to know,\\nahow many different characters in the input `s`\\nWe can use a hash set to find this.\\n<br>\\n\\n# **Complexity**\\nTime `O(n)`\\nSpace `O(26)`\\n<br>\\n\\n**Java**\\nUse `distinct`\\n```java\\n    public int minimizedStringLength(String s) {\\n        return (int) s.chars().distinct().count();\\n    }\\n```\\n\\n**C++**\\n```cpp\\n    int minimizedStringLength(string s) {\\n        return unordered_set(s.begin(), s.end()).size();\\n    }\\n```\\n\\n**Python**\\n```py\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```java\\n    public int minimizedStringLength(String s) {\\n        return (int) s.chars().distinct().count();\\n    }\\n```\n```cpp\\n    int minimizedStringLength(string s) {\\n        return unordered_set(s.begin(), s.end()).size();\\n    }\\n```\n```py\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3625803,
                "title": "easy-solution-in-java-0ms-100-beats",
                "content": "# Approach\\nThe approach to solving the problem is as follows:\\n\\n1. A method named `minimizedStringLength` is defined, which takes a string parameter `s`.\\n2. Inside the method, an integer array `arr` of size 26 is created to store the count of each letter in the alphabet.\\n3. The method iterates through each character `c` in the string `s` using a for-each loop.\\n4. For each character, the count at the corresponding index in the `arr` array is incremented by 1. This step counts the occurrences of each letter in the string.\\n5. After counting the occurrences of each letter, a variable `count` is initialized to 0.\\n6. The method iterates through each element `n` in the `arr` array.\\n7. For each element, if it is not zero (indicating that the letter is present in the string), the `count` variable is incremented by 1.\\n8. Finally, the value of `count` is returned, which represents the number of distinct letters present in the string `s`.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] arr = new int[26];\\n\\n        for(char c : s.toCharArray())\\n            arr[c - \\'a\\']++;\\n\\n        int count = 0;\\n\\n        for(int n : arr) \\n            if(n != 0) count++;\\n\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] arr = new int[26];\\n\\n        for(char c : s.toCharArray())\\n            arr[c - \\'a\\']++;\\n\\n        int count = 0;\\n\\n        for(int n : arr) \\n            if(n != 0) count++;\\n\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595845,
                "title": "count-disticnt-no-of-chars-c",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        vector<bool> v(26,0);\\n        int ans = 0;\\n        for(auto &i: s){\\n            if(!v[i-\\'a\\']){\\n                ans++;\\n                v[i-\\'a\\'] = true;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        vector<bool> v(26,0);\\n        int ans = 0;\\n        for(auto &i: s){\\n            if(!v[i-\\'a\\']){\\n                ans++;\\n                v[i-\\'a\\'] = true;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595137,
                "title": "c-very-easy-solution-using-map-stl",
                "content": "# Intuition\\nAt first glance, we can clearly see that we have to count all unique characters in given string.\\n\\n# Approach\\nThe code uses a map data structure, count, to keep track of the frequency of each character in the string. It iterates over the characters in the string using a for loop and updates the count for each character. After counting all the characters, the size of the map is returned, which represents the number of distinct characters in the string.\\n\\n# Complexity\\n- Time complexity:\\nO(n), where n is the length of the input string. As the code iterates over each character in the string once\\n\\n- Space complexity:\\nO(n), as the map will store n key-value pairs, where n is the length of the input string\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        \\n        \\n        map<char, int> count;\\n        for(int i = 0; i < s.size(); i++){\\n            count[s[i]]++;\\n        }\\n        \\n        return count.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Ordered Map"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        \\n        \\n        map<char, int> count;\\n        for(int i = 0; i < s.size(); i++){\\n            count[s[i]]++;\\n        }\\n        \\n        return count.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3959846,
                "title": "very-easy-java-solution-using-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Create a hashset of type characters \\n- Iterate all the characters of the string and add those characters in the hashset\\n- Hashset do not allow duplicate elememts \\n- return the size of the hashset\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> set=new HashSet();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> set=new HashSet();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3924430,
                "title": "4-lines-solution-java-hashset",
                "content": "# Intuition\\nThe problem is all about removing all duplicates.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nSo, use hashSet and return the size of the set.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> set = new HashSet<>();\\n        for(char c : s.toCharArray()){\\n            set.add(c);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> set = new HashSet<>();\\n        for(char c : s.toCharArray()){\\n            set.add(c);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3786530,
                "title": "java-faster-then-100-1-liner",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(26)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Codes :\\n### **1st method : 100% faster**\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean map[] = new boolean[26];\\n        int ans = 0;\\n        for(char c : s.toCharArray()) \\n            map[c - \\'a\\'] = true;\\n        for(boolean b : map)\\n            if(b == true) ans ++;\\n        return ans;\\n    }\\n}\\n```\\n### **2nd method : 1 liner**\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        return (int)s.chars().distinct().count();\\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean map[] = new boolean[26];\\n        int ans = 0;\\n        for(char c : s.toCharArray()) \\n            map[c - \\'a\\'] = true;\\n        for(boolean b : map)\\n            if(b == true) ans ++;\\n        return ans;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        return (int)s.chars().distinct().count();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3606038,
                "title": "c-java-count-number-of-unique-characters",
                "content": "Given the problem that asks us to select an index `i` within a string and then delete the nearest instances of that character to the left and right of `i`, we can infer that we should remove all duplicate occurrences of each character, leaving only one occurrence of each. Therefore, the problem can be simplified to determining the count of unique characters within the string.\\n\\nWe can solve this problem using a hashset, but this method might be too time-consuming. As an optimization, we can use a boolean array instead. The first time we encounter a character, we increment a count. This count, maintained throughout the iteration of the string, serves as the final solution.\\n\\nC++:\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int count = 0;\\n        boolean[] visited = new boolean[26];\\n        for (char c : s.toCharArray()) {\\n            if (visited[c - \\'a\\']) continue;\\n            visited[c - \\'a\\'] = true;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```\\n\\nJava:\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int count = 0;\\n        boolean[] visited = new boolean[26];\\n        for (char c : s.toCharArray()) {\\n            if (visited[c - \\'a\\']) continue;\\n            visited[c - \\'a\\'] = true;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int count = 0;\\n        boolean[] visited = new boolean[26];\\n        for (char c : s.toCharArray()) {\\n            if (visited[c - \\'a\\']) continue;\\n            visited[c - \\'a\\'] = true;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int count = 0;\\n        boolean[] visited = new boolean[26];\\n        for (char c : s.toCharArray()) {\\n            if (visited[c - \\'a\\']) continue;\\n            visited[c - \\'a\\'] = true;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3598133,
                "title": "python-elegant-short-1-line-hash-set-size",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3597498,
                "title": "easy-java-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> set = new HashSet<>();\\n        for(int i=0; i<s.length(); i++) {\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> set = new HashSet<>();\\n        for(int i=0; i<s.length(); i++) {\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3597086,
                "title": "c-solution-stack-beginner-friendly-o-n",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        stack<char> stk;\\n        map<char, int> mp;\\n        for (int i=0;i<s.length(); i++) {\\n            if ((!stk.empty() && s[i] == stk.top()) or (!stk.empty() && mp.find(s[i]) != mp.end())) {\\n                // \\n            } else {\\n                stk.push(s[i]);\\n                mp.insert({s[i], i});\\n            }\\n        }\\n        return stk.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        stack<char> stk;\\n        map<char, int> mp;\\n        for (int i=0;i<s.length(); i++) {\\n            if ((!stk.empty() && s[i] == stk.top()) or (!stk.empty() && mp.find(s[i]) != mp.end())) {\\n                // \\n            } else {\\n                stk.push(s[i]);\\n                mp.insert({s[i], i});\\n            }\\n        }\\n        return stk.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595303,
                "title": "o-n-easy-to-understand-java",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Check if the result contains the character or not. If the result contains\\n    the character then do not add it, else add that charcter to the resultant\\n    string.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        String result = \"\";\\n        for (int i = 0; i < s.length(); i++) {\\n            if(!result.contains(String.valueOf(s.charAt(i)))) {\\n                result += String.valueOf(s.charAt(i));\\n            }\\n        }\\n        return result.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        String result = \"\";\\n        for (int i = 0; i < s.length(); i++) {\\n            if(!result.contains(String.valueOf(s.charAt(i)))) {\\n                result += String.valueOf(s.charAt(i));\\n            }\\n        }\\n        return result.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595248,
                "title": "simple-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int len = s.length();\\n        int charIndex = 0;\\n        while(charIndex < 26) {\\n            int i=0;\\n            while(i < s.length() && s.charAt(i) != (char) (\\'a\\' + charIndex))\\n                i++;\\n            int end = i+1;\\n            int count = 0;\\n            while(end < s.length()) {\\n                if(s.charAt(end) == (char)(\\'a\\' + charIndex))\\n                    count++;\\n                if(count == 2) {\\n                    len -= 2;\\n                    count = 0;\\n                }\\n                end++;\\n            }\\n            if(count > 0)\\n                len -= 1;\\n            charIndex++;\\n        }\\n        \\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int len = s.length();\\n        int charIndex = 0;\\n        while(charIndex < 26) {\\n            int i=0;\\n            while(i < s.length() && s.charAt(i) != (char) (\\'a\\' + charIndex))\\n                i++;\\n            int end = i+1;\\n            int count = 0;\\n            while(end < s.length()) {\\n                if(s.charAt(end) == (char)(\\'a\\' + charIndex))\\n                    count++;\\n                if(count == 2) {\\n                    len -= 2;\\n                    count = 0;\\n                }\\n                end++;\\n            }\\n            if(count > 0)\\n                len -= 1;\\n            charIndex++;\\n        }\\n        \\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595149,
                "title": "just-2-lines-c-easiest-problem",
                "content": "CODE\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<int>set(s.begin(),s.end());\\n        return set.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<int>set(s.begin(),s.end());\\n        return set.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3925129,
                "title": "easy-understanding-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        char[] chars = s.toCharArray();\\n        int[] counts = new int[26];\\n        int result =0;\\n        for(char c: chars){\\n            counts[c-\\'a\\']++;\\n        }\\n        for(int i:counts){\\n            if(i>0){\\n                result++;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        char[] chars = s.toCharArray();\\n        int[] counts = new int[26];\\n        int result =0;\\n        for(char c: chars){\\n            counts[c-\\'a\\']++;\\n        }\\n        for(int i:counts){\\n            if(i>0){\\n                result++;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3908437,
                "title": "super-easy-python3-solution-beats-75",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        res = []\\n        for i in s:\\n            res.append(i)\\n        news=set(res)\\n        return len(news)\\n```\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        \\n        return len(set(res))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        res = []\\n        for i in s:\\n            res.append(i)\\n        news=set(res)\\n        return len(news)\\n```\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        \\n        return len(set(res))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838984,
                "title": "can-you-optimize-it-c-solution-beats-95",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        string ans =\"\";\\n        sort(s.begin(),s.end());\\n        for(int i = 1 ; i<s.length();i++ ){\\n            if(s[i]!=s[i-1]){\\n                ans+=s[i];\\n            }\\n        }\\n        return ans.length()+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        string ans =\"\";\\n        sort(s.begin(),s.end());\\n        for(int i = 1 ; i<s.length();i++ ){\\n            if(s[i]!=s[i-1]){\\n                ans+=s[i];\\n            }\\n        }\\n        return ans.length()+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3704884,
                "title": "c-easy-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/2fe5698a-d0e5-4549-8638-57aecfff5a34_1688226708.6732652.png)\\n\\n# Intuition\\nJust return the number of different chars.\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) {\\n        return new HashSet<char>(s).Count();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) {\\n        return new HashSet<char>(s).Count();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3619491,
                "title": "python3-one-liner-beats-90",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf at every character, we are allowed to remove its left and right occurrences then basically we can remove all its duplicate occurrences.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can just return the length of the set of given string as, the set object in python removes all duplicate occurrences of all the elements present in the iterative object passed to it. \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ where n is the length of s\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Ordered Map",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3612504,
                "title": "simple-c-code",
                "content": "# Code\\n\\n## Code 1 : Using Unordered Set\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set <char> us;\\n        for(auto &it:s)\\n            us.insert(it);\\n        return us.size();\\n    }\\n};\\n```\\n\\n## Code 2: Using Unordered Map\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_map <char,bool> ump;\\n        for(auto &it:s)\\n            ump[it]=1;\\n        return ump.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String",
                    "Ordered Map",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set <char> us;\\n        for(auto &it:s)\\n            us.insert(it);\\n        return us.size();\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_map <char,bool> ump;\\n        for(auto &it:s)\\n            ump[it]=1;\\n        return ump.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3597035,
                "title": "python3-solution",
                "content": "\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3596812,
                "title": "one-liner-solution-as-simple-as-it-can-get",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set st(s.begin(),s.end());\\n        return st.size();       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set st(s.begin(),s.end());\\n        return st.size();       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3596319,
                "title": "minimize-string-length",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character>hs = new HashSet<>();\\n        for (char c : s.toCharArray()) {\\n            hs.add(c);\\n        }\\n        return hs.size();\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character>hs = new HashSet<>();\\n        for (char c : s.toCharArray()) {\\n            hs.add(c);\\n        }\\n        return hs.size();\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595430,
                "title": "c-python-java-easy-solution-w-intuition-code",
                "content": "# Intuition\\nIn this problem, you can prove that only one occurance of any character will remain by the end of all operation.\\nConsider the string s=\"abcdabacd\"\\n```html\\nindex  - 0 1 2 3 4 5 6 7 8 9\\nstring - a b c d a b a c d a\\n```\\nWe\\'ll consider the index to be unchanged after removal for simplicity of explanation.\\n\\nAt i=0, the \"a\" present at i=4 will be removed.\\nAt i=6, the \"a\" present at i=0 and i=9 will be removed.\\n\\nSimilarly, at each occurance of \"a\", at least 1 other \"a\" will be removed(if any exist). This way only one occurance of every character will remain. \\n\\n# Approach\\nSince we know that we just have to count the number of distinct character, the approach is as simple as using a hashset to get the number of distinct characters.\\n\\n# Code\\n```cpp []\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> cset;\\n        for(char c: s)\\n            cset.insert(c);\\n        return cset.size();\\n    }\\n};\\n```\\n```python []\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        return len(set(s))\\n```\\n```java []\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        for(int i=0; i<s.length(); i++)\\n            hs.add(s.charAt(i));\\n        return hs.size();\\n    }\\n}\\n```\\n```cpp []\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        vector<bool> hs(26, false);\\n        for(char c: s)\\n            hs[c-\\'a\\'] = true;\\n        int res{0};\\n        for(bool c: hs)\\n            res += c;\\n        return res;\\n    }\\n};\\n```\\n\\n# Complexity\\n\\n- Time complexity: $$O(n)$$\\nSince we\\'re traversing the entire string once.\\n\\n- Space complexity: $$O(n)$$ \\nBecause we are storing all the characters of `s` in the Hash Set. In this specific case, the constraint \"*`s` contains only lowercase English letters*\" makes it $$O(26)$$.\\n\\n>### Note\\n>- Upvote if you liked my solution\\n>- Drop a comment if you have any doubt",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "```html\\nindex  - 0 1 2 3 4 5 6 7 8 9\\nstring - a b c d a b a c d a\\n```\n```cpp []\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> cset;\\n        for(char c: s)\\n            cset.insert(c);\\n        return cset.size();\\n    }\\n};\\n```\n```python []\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        return len(set(s))\\n```\n```java []\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        for(int i=0; i<s.length(); i++)\\n            hs.add(s.charAt(i));\\n        return hs.size();\\n    }\\n}\\n```\n```cpp []\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        vector<bool> hs(26, false);\\n        for(char c: s)\\n            hs[c-\\'a\\'] = true;\\n        int res{0};\\n        for(bool c: hs)\\n            res += c;\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595420,
                "title": "return-len-set-s",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595322,
                "title": "easy-c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        \\n        unordered_map<char, vector<int>> mp;\\n        for(int i = 0; i < s.size(); i++) {\\n            char ch = s[i];\\n            mp[ch].push_back(i);\\n        }\\n        \\n        return mp.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        \\n        unordered_map<char, vector<int>> mp;\\n        for(int i = 0; i < s.size(); i++) {\\n            char ch = s[i];\\n            mp[ch].push_back(i);\\n        }\\n        \\n        return mp.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595317,
                "title": "python3-solution-one-linear",
                "content": "# Intuition\\nWe can delete any letters as much if its duplicate exist. So we need to count the number of all different characters in the string.\\n\\n# Approach\\nBy using Counter in python we can achieve the above. the len of the counter is the number of different characters in the string.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(26)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(Counter(s))\\n```",
                "solutionTags": [
                    "Python3",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(Counter(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595313,
                "title": "c-o-n-simple-solution",
                "content": "# Intuition\\nJust return the number of different chars.\\n\\n# Approach\\nAt first count number of each char:\\n```\\nprivate Dictionary<char, int> CreateMinimizedStringLengt(string s)\\n```\\nThen return the number of different chars:\\n```\\nvar dic = CreateMinimizedStringLengt(s);\\nreturn dic.Count;\\n```\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$, where n is the length of s\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) {\\n        var dic = CreateMinimizedStringLengt(s);\\n        return dic.Count;\\n    }\\n    private Dictionary<char, int> CreateMinimizedStringLengt(string s)\\n    {\\n        var rs = new Dictionary<char, int>();\\n        for (int i = 0; i < s.Length; i++)\\n        {\\n            if (!rs.ContainsKey(s[i]))\\n            {\\n                rs.Add(s[i], 1);\\n            }\\n            else\\n            {\\n                rs[s[i]]++;\\n            }\\n        }\\n        return rs;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\nprivate Dictionary<char, int> CreateMinimizedStringLengt(string s)\\n```\n```\\nvar dic = CreateMinimizedStringLengt(s);\\nreturn dic.Count;\\n```\n```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) {\\n        var dic = CreateMinimizedStringLengt(s);\\n        return dic.Count;\\n    }\\n    private Dictionary<char, int> CreateMinimizedStringLengt(string s)\\n    {\\n        var rs = new Dictionary<char, int>();\\n        for (int i = 0; i < s.Length; i++)\\n        {\\n            if (!rs.ContainsKey(s[i]))\\n            {\\n                rs.Add(s[i], 1);\\n            }\\n            else\\n            {\\n                rs[s[i]]++;\\n            }\\n        }\\n        return rs;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595246,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>st;\\n        for(auto it:s) st.insert(it);\\n        return st.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>st;\\n        for(auto it:s) st.insert(it);\\n        return st.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595098,
                "title": "easy-java-6-line-hashset",
                "content": "```\\nclass Solution {\\n   public static int minimizedStringLength(String s) {\\n      char str[]=s.toCharArray();\\n      HashSet<Character> hs=new HashSet<>();\\n      for(int i=0;i<s.length();i++){\\n        hs.add(s.charAt(i));\\n      }\\n      return hs.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n   public static int minimizedStringLength(String s) {\\n      char str[]=s.toCharArray();\\n      HashSet<Character> hs=new HashSet<>();\\n      for(int i=0;i<s.length();i++){\\n        hs.add(s.charAt(i));\\n      }\\n      return hs.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595088,
                "title": "javascript-easy-solution",
                "content": "# Intuition\\n    We need to count unique char in the string\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(m) \\n    m = number of unique char, max value is 26\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nconst minimizedStringLength = (s) => {\\n    const uniqueChars = new Set([...s]);\\n    return uniqueChars.size;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nconst minimizedStringLength = (s) => {\\n    const uniqueChars = new Set([...s]);\\n    return uniqueChars.size;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3595082,
                "title": "python3-solution-using-hashmap",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse a hashmap to store each character in the string. If the character is already inside the hashmap, skip it or just increment its count by 1.\\nWe then can return the length of the hashmap which will only include distinct characters.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n), we visit each character inside s only once. n is the length of s.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n) Worst case, every character is distinct and we have to store all of them inside the hashmap.\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        # Use a hashmap. If character already inside map, don\\'t add. Then return length of hashmap\\n        duplicate = {}\\n\\n        if len(s) == 1:\\n            return 1\\n        for c in s:\\n            if c not in duplicate:\\n                duplicate[c] = 1\\n            duplicate[c] += 1\\n        \\n        return len(duplicate)\\n            \\n            \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        # Use a hashmap. If character already inside map, don\\'t add. Then return length of hashmap\\n        duplicate = {}\\n\\n        if len(s) == 1:\\n            return 1\\n        for c in s:\\n            if c not in duplicate:\\n                duplicate[c] = 1\\n            duplicate[c] += 1\\n        \\n        return len(duplicate)\\n            \\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595065,
                "title": "c-solutions-explained-line-by-line-easy-to-understand-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code uses a map to count the occurrence of each character in the string. By iterating over the map and incrementing a counter variable, it effectively counts the number of unique characters in the string. The final count represents the minimum length of the string after removing duplicate characters.\\n\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code uses a map<int,int> called m to store the count of each character in the input string s.\\n\\nThe for loop iterates through each character it in the string s and increments its count in the map m.\\n\\nAfter counting all the characters, the variable ans is initialized to 0.\\n\\nThe second for loop iterates through each key-value pair it in the map m.\\n\\nIn each iteration, the variable ans is incremented by 1, effectively counting the number of unique characters in the string.\\n\\nFinally, the value of ans is returned as the minimum length of the string after removing duplicates.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the code is O(n), where n is the length of the input string s. This is because the code iterates over each character in the string to count their occurrences and then iterates over the map to count the number of unique characters. Both iterations have a linear time complexity with respect to the length of the string.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the code is O(n), where n is the length of the input string s. This is because the map m stores the count of each character, which can be at most the length of the string.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n     \\n    map<int,int> m; // Create a map to store character counts\\n    for(auto it:s) m[it]++; // Count the occurrence of each character in the input string\\n    int ans=0; // Initialize a variable to store the count of unique characters\\n    for(auto it:m) {\\n        ans++; // Increment the count for each unique character in the map\\n    }\\n    return ans; // Return the count of unique characters\\n      \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n     \\n    map<int,int> m; // Create a map to store character counts\\n    for(auto it:s) m[it]++; // Count the occurrence of each character in the input string\\n    int ans=0; // Initialize a variable to store the count of unique characters\\n    for(auto it:m) {\\n        ans++; // Increment the count for each unique character in the map\\n    }\\n    return ans; // Return the count of unique characters\\n      \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595056,
                "title": "groupby",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) \\n    {\\n        return s.Select(x=>x).GroupBy(x=>x).Count();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) \\n    {\\n        return s.Select(x=>x).GroupBy(x=>x).Count();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595039,
                "title": "c-easy-solution-hashmap",
                "content": "The given code is a C++ solution for the problem of finding the length of the minimized string after performing a specific operation on a given string.\\n\\nA loop is used to iterate over each character in the string s. For each character, it is inserted into the mp unordered map with a value of true. This effectively removes any duplicate characters from the map since keys in an unordered map are unique.\\n```\\n#include<unordered_map>\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n         int n = s.size();\\n        unordered_map<char, bool> mp;\\n\\n        for (int i = 0; i < n; i++) {\\n            mp[s[i]] = true;\\n        }\\n\\n        return mp.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n#include<unordered_map>\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n         int n = s.size();\\n        unordered_map<char, bool> mp;\\n\\n        for (int i = 0; i < n; i++) {\\n            mp[s[i]] = true;\\n        }\\n\\n        return mp.size();\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3595036,
                "title": "stack-and-dict-python-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s):\\n        cnt = defaultdict(int)\\n        for i in s:\\n            cnt[i] += 1\\n        cnt = dict(sorted(cnt.items(), key=lambda x:x[1], reverse=True))\\n        st = []\\n        for i in s:\\n            #only append if cnt is 1. else decrease cnt \\n            if cnt[i] == 1: st.append(i)\\n            else: cnt[i] -= 1\\n        return len(st)\\n\\n```\\n\\n\\n\\n# Complexity\\n- Time complexity: O(n log n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->",
                "solutionTags": [
                    "Python3",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s):\\n        cnt = defaultdict(int)\\n        for i in s:\\n            cnt[i] += 1\\n        cnt = dict(sorted(cnt.items(), key=lambda x:x[1], reverse=True))\\n        st = []\\n        for i in s:\\n            #only append if cnt is 1. else decrease cnt \\n            if cnt[i] == 1: st.append(i)\\n            else: cnt[i] -= 1\\n        return len(st)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595029,
                "title": "python3-one-liner",
                "content": "# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595022,
                "title": "3-line-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> st;\\n        for(auto ch:s)\\n            st.insert(ch);\\n        \\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> st;\\n        for(auto ch:s)\\n            st.insert(ch);\\n        \\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3594991,
                "title": "super-easy-c-solution",
                "content": "# Code\\n```\\nclass Solution \\n{\\npublic:\\n    int minimizedStringLength(string s) \\n    {\\n        set<char> st;\\n        for(auto ch: s) st.insert(ch);\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int minimizedStringLength(string s) \\n    {\\n        set<char> st;\\n        for(auto ch: s) st.insert(ch);\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3594974,
                "title": "short-simple-clean-java-solution",
                "content": "\\n```java []\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<String> set = new HashSet();\\n        for(int i=0; i<s.length(); i++) set.add(s.charAt(i)+\"\");\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<String> set = new HashSet();\\n        for(int i=0; i<s.length(); i++) set.add(s.charAt(i)+\"\");\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4091256,
                "title": "simple-with-unit-tests",
                "content": "## Follow Vaclav Kosar for more software and machine learning at https://vaclavkosar.com/\\n\\n\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        \"\"\"\\n        Given a string `s`.\\n        Operation: select position `i` with character `c`, delete closest occurent of `c` to the left if any and right if any.\\n        Repeat Operation any number of times to minimize length of string `s`.\\n        Return length of the minimized string.\\n\\n        The operation above, allows us to deduplicate characters in the string.\\n        While removing the middle duplicates lead to faster results, because we can remove the characters in pairs.\\n\\n        >>> Solution().minimizedStringLength(\"aikadua\")\\n        5\\n\\n        # Explanation: I would select the middle \"a\" to remove. len(\"ikadu\")\\n\\n\\n        >>> Solution().minimizedStringLength(\"aaabc\")\\n        3\\n\\n        # len(\"abc\")\\n\\n\\n        >>> Solution().minimizedStringLength(\"cbbd\")\\n        3\\n\\n\\n        >>> Solution().minimizedStringLength(\"dddaaa\")\\n        2\\n\\n        # len(\"abc\")\\n\\n\\n        Another opportunity is ability to find the duplicate characters quickly.\\n        Perhaps one option would be to index them with for example dictionary.\\n\\n        Let me index the string into dictionary by character.\\n        Then deduplicate within that index.\\n        Then return remaining length.\\n\\n        Now to save time, I can just use set to get the right answer already and get the same result.\\n\\n        \"\"\"\\n\\n        # char_index = defaultdict(list)\\n        # for i, c in enumerate(s):\\n        #    char_index[c].append(i)\\n        # for c in char_index:\\n        #   indexes = char_index[c]\\n        #   indexes.pop(0); indexes.pop(-1)\\n        #\\n        # ...\\n\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        \"\"\"\\n        Given a string `s`.\\n        Operation: select position `i` with character `c`, delete closest occurent of `c` to the left if any and right if any.\\n        Repeat Operation any number of times to minimize length of string `s`.\\n        Return length of the minimized string.\\n\\n        The operation above, allows us to deduplicate characters in the string.\\n        While removing the middle duplicates lead to faster results, because we can remove the characters in pairs.\\n\\n        >>> Solution().minimizedStringLength(\"aikadua\")\\n        5\\n\\n        # Explanation: I would select the middle \"a\" to remove. len(\"ikadu\")\\n\\n\\n        >>> Solution().minimizedStringLength(\"aaabc\")\\n        3\\n\\n        # len(\"abc\")\\n\\n\\n        >>> Solution().minimizedStringLength(\"cbbd\")\\n        3\\n\\n\\n        >>> Solution().minimizedStringLength(\"dddaaa\")\\n        2\\n\\n        # len(\"abc\")\\n\\n\\n        Another opportunity is ability to find the duplicate characters quickly.\\n        Perhaps one option would be to index them with for example dictionary.\\n\\n        Let me index the string into dictionary by character.\\n        Then deduplicate within that index.\\n        Then return remaining length.\\n\\n        Now to save time, I can just use set to get the right answer already and get the same result.\\n\\n        \"\"\"\\n\\n        # char_index = defaultdict(list)\\n        # for i, c in enumerate(s):\\n        #    char_index[c].append(i)\\n        # for c in char_index:\\n        #   indexes = char_index[c]\\n        #   indexes.pop(0); indexes.pop(-1)\\n        #\\n        # ...\\n\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4085382,
                "title": "minimize-string-length-js-as-short-as-possible",
                "content": "```\\nvar minimizedStringLength = function(s) {\\n    return new Set(s).size\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minimizedStringLength = function(s) {\\n    return new Set(s).size\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082545,
                "title": "python-dictionary",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        dic = {}\\n        for i in s:\\n            if i in dic:\\n                dic[i] += 1\\n            else:\\n                dic[i] = 1\\n        count = 0\\n        for i in dic:\\n            count += 1\\n        return count \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        dic = {}\\n        for i in s:\\n            if i in dic:\\n                dic[i] += 1\\n            else:\\n                dic[i] = 1\\n        count = 0\\n        for i in dic:\\n            count += 1\\n        return count \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081844,
                "title": "best-solution-using-hash-map-in-c",
                "content": "\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        map <char, int> mp;\\n        for(auto i : s) {\\n            mp[i]++;\\n        }\\n        return mp.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        map <char, int> mp;\\n        for(auto i : s) {\\n            mp[i]++;\\n        }\\n        return mp.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079835,
                "title": "simple-hashtable-as-boolean-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n\\n        boolean[] lowers = new boolean[\\'z\\' - \\'a\\' + 1];\\n        int size = 0;\\n\\n        for(int i = 0; i < s.length(); i ++) {\\n            char ch = s.charAt(i);\\n\\n            if(!lowers[ch - \\'a\\']) {\\n                size ++;\\n                lowers[ch - \\'a\\'] = true;\\n            }\\n        }\\n\\n\\n        return size;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n\\n        boolean[] lowers = new boolean[\\'z\\' - \\'a\\' + 1];\\n        int size = 0;\\n\\n        for(int i = 0; i < s.length(); i ++) {\\n            char ch = s.charAt(i);\\n\\n            if(!lowers[ch - \\'a\\']) {\\n                size ++;\\n                lowers[ch - \\'a\\'] = true;\\n            }\\n        }\\n\\n\\n        return size;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077975,
                "title": "python-one-line-solution-easy-solution",
                "content": "# Intuition\\nuse set: it store only non repeted values and then return the length\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076864,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] arr = new int[27];\\n        for (char c : s.toCharArray()) {\\n            arr[c - \\'a\\']++;\\n        }\\n        for (int i : arr) {\\n            if (i > 0) {\\n                arr[26]++;\\n            }\\n        }\\n        return --arr[26];        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] arr = new int[27];\\n        for (char c : s.toCharArray()) {\\n            arr[c - \\'a\\']++;\\n        }\\n        for (int i : arr) {\\n            if (i > 0) {\\n                arr[26]++;\\n            }\\n        }\\n        return --arr[26];        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073422,
                "title": "c-straightforward-approach-with-loops",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) {\\n        for (int i = 0; i < s.Length; i++)\\n        {\\n            for (int j = i + 1; j < s.Length;)\\n            {\\n                if (s[i] == s[j])\\n                {\\n                    s = s.Remove(j, 1);\\n                }\\n                else\\n                {\\n                    j++;\\n                }\\n            }\\n        }\\n\\n        return s.Length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) {\\n        for (int i = 0; i < s.Length; i++)\\n        {\\n            for (int j = i + 1; j < s.Length;)\\n            {\\n                if (s[i] == s[j])\\n                {\\n                    s = s.Remove(j, 1);\\n                }\\n                else\\n                {\\n                    j++;\\n                }\\n            }\\n        }\\n\\n        return s.Length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072370,
                "title": "return-size-of-hashmap",
                "content": "# Intuition\\nthere will be only 1 key for repeated chars, so return len of keys.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashMap<Character,Integer> mapple = new HashMap<>();\\n        for (int i = 0; i <s.length(); i++) {\\n            mapple.put(s.charAt(i),1);\\n        }\\n        return mapple.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashMap<Character,Integer> mapple = new HashMap<>();\\n        for (int i = 0; i <s.length(); i++) {\\n            mapple.put(s.charAt(i),1);\\n        }\\n        return mapple.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069635,
                "title": "simple-c-solution",
                "content": "# Intuition\\n\\n\\n# Approach\\nusign map STL\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        map<char, int> count;\\n        for(int i = 0; i < s.size(); i++){\\n            count[s[i]]++;\\n        }\\n        return count.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        map<char, int> count;\\n        for(int i = 0; i < s.size(); i++){\\n            count[s[i]]++;\\n        }\\n        return count.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069478,
                "title": "2716-minimize-string-length-easy-simple-solutions",
                "content": "# Code\\n```Python []\\n\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        # Using built-in function: `return len(set(s))`\\n        res = \"\"\\n        for i in s:\\n            if i not in res:\\n                res += i\\n        return len(res)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```Python []\\n\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        # Using built-in function: `return len(set(s))`\\n        res = \"\"\\n        for i in s:\\n            if i not in res:\\n                res += i\\n        return len(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068678,
                "title": "4-line-code",
                "content": "# Intuition\\nuse a HashSet to prevent the entry of duplicates and return the size of the HashSet\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> len=new HashSet<>();\\n        for(int i=0;i<s.length();i++)\\n            len.add(s.charAt(i));\\n        return len.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> len=new HashSet<>();\\n        for(int i=0;i<s.length();i++)\\n            len.add(s.charAt(i));\\n        return len.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068238,
                "title": "simple-and-easy-java-solution-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean visit[] = new boolean[26];\\n        int ans =0;\\n        for(char c:s.toCharArray()){\\n            if(!visit[c-\\'a\\']){\\n                ans++;\\n                visit[c-\\'a\\'] =true;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean visit[] = new boolean[26];\\n        int ans =0;\\n        for(char c:s.toCharArray()){\\n            if(!visit[c-\\'a\\']){\\n                ans++;\\n                visit[c-\\'a\\'] =true;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066711,
                "title": "using-object",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimizedStringLength = function(s) {\\n    var obj={};\\n    for(var i=0;i<s.length;i++)\\n    {\\n        if(obj[s[i]]==undefined)\\n        {\\n           obj[s[i]]=1;\\n        }\\n        else\\n        {\\n            obj[s[i]]++;\\n        }\\n    }\\n    var ky=Object.keys(obj);\\n    return ky.length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimizedStringLength = function(s) {\\n    var obj={};\\n    for(var i=0;i<s.length;i++)\\n    {\\n        if(obj[s[i]]==undefined)\\n        {\\n           obj[s[i]]=1;\\n        }\\n        else\\n        {\\n            obj[s[i]]++;\\n        }\\n    }\\n    var ky=Object.keys(obj);\\n    return ky.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4062189,
                "title": "one-line-answer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051607,
                "title": "beats-100-very-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] arr = new int[26];\\n        int count = 0;\\n       //To store repeated character at one place\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            arr[ch-\\'a\\']++;\\n        }\\n       //To count same char only once \\n          for(int i=0;i<26;i++){\\n              if(arr[i] > 0)\\n              count++;\\n          }\\n          return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] arr = new int[26];\\n        int count = 0;\\n       //To store repeated character at one place\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            arr[ch-\\'a\\']++;\\n        }\\n       //To count same char only once \\n          for(int i=0;i<26;i++){\\n              if(arr[i] > 0)\\n              count++;\\n          }\\n          return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049269,
                "title": "one-line-solution-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSimplest way is to make a set out of string \\'s\\' in order to find all unique elements from the string and return its length\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049001,
                "title": "very-easy-to-understand-beats-100-java",
                "content": "\\n# Here\\'s how the code works:\\n\\n1. It initializes a variable ```count``` to 0, which will be used to count the unique letters.\\n2. It creates a ```boolean array flag``` with 26 elements, representing the 26 lowercase letters of the English alphabet. Each element is initially set to ```false```.\\n3. It then iterates over the characters in the input string s.\\nFor each character c in the string, it calculates its position in the array flag by subtracting \\'a\\' from it. This effectively maps ```\\'a\\'``` to ```index 0```, ```\\'b\\'``` to ```index 1```, and so on.\\n4. It sets the corresponding element in the flag array to true to indicate that the letter has been encountered.\\n5. After processing all characters in the input ```string```, it iterates over the ```flag array``` to count how many letters have been marked as ```true```.\\n6. The count of unique letters is stored in the ```count``` variable, which is then returned as the result.\\nIn the end, this code returns the count of unique lowercase letters in the input ```string s```. A simple and efficient way to achieve this task.\\n\\n\\n\\n\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int count=0;\\n        boolean[] flag=new boolean[26];\\n        for(int i=0;i<s.length();i++){\\n            flag[s.charAt(i)-\\'a\\'] = true;\\n        }\\n        for(int i=0;i<flag.length;i++){\\n            if(flag[i]) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```count```\n```boolean array flag```\n```false```\n```\\'a\\'```\n```index 0```\n```\\'b\\'```\n```index 1```\n```string```\n```flag array```\n```true```\n```count```\n```string s```\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int count=0;\\n        boolean[] flag=new boolean[26];\\n        for(int i=0;i<s.length();i++){\\n            flag[s.charAt(i)-\\'a\\'] = true;\\n        }\\n        for(int i=0;i<flag.length;i++){\\n            if(flag[i]) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4048360,
                "title": "java-solution-beats-86-85",
                "content": "\\n# Approach\\n1) Every character must occur minimum times.\\n2) The least no of times that a character occurs has to be 1.\\n3) Let\\'s make a string str of characters from \\'a\\' to \\'z\\'.\\n4) Check if each separate character in str is present in s.\\n5) The count of the string will start to minimise because only individual characters will be counted i.e only once.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s)\\n    {\\n        String str=\"abcdefghijklmnopqrstuvwxyz\";\\n        int min_len=0;\\n        for(int i=0;i<str.length();i++)\\n        {\\n            if(s.indexOf(str.charAt(i))!=-1)\\n               min_len++;\\n        }\\n       return min_len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s)\\n    {\\n        String str=\"abcdefghijklmnopqrstuvwxyz\";\\n        int min_len=0;\\n        for(int i=0;i<str.length();i++)\\n        {\\n            if(s.indexOf(str.charAt(i))!=-1)\\n               min_len++;\\n        }\\n       return min_len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4044087,
                "title": "easy-solution-using-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing Hashset\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<String> h1 = new HashSet<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            h1.add(s.substring(i,i+1));\\n        }\\n        System.out.println(\"h1 is \"+h1);\\n        return h1.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<String> h1 = new HashSet<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            h1.add(s.substring(i,i+1));\\n        }\\n        System.out.println(\"h1 is \"+h1);\\n        return h1.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4043328,
                "title": "100-runtime-beats-99-40-memory-beats-optimal-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int arr[]=new int[26];\\n        int count=0;\\n        for(char c : s.toCharArray()){\\n            arr[c-\\'a\\']++;\\n        }\\n        for(int n:arr){\\n            if(n!=0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int arr[]=new int[26];\\n        int count=0;\\n        for(char c : s.toCharArray()){\\n            arr[c-\\'a\\']++;\\n        }\\n        for(int n:arr){\\n            if(n!=0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042765,
                "title": "python-1-line-solution-beats-97",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040820,
                "title": "c-o-1-memory-complexity",
                "content": "class Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        \\n        sort(s.begin(),s.end());\\n        int cnt=1;\\n        \\n        for(int i=1;i<s.size();i++){\\n            \\n            if(s[i]!=s[i-1]){\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n        \\n    }\\n};",
                "solutionTags": [
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        \\n        sort(s.begin(),s.end());\\n        int cnt=1;\\n        \\n        for(int i=1;i<s.size();i++){\\n            \\n            if(s[i]!=s[i-1]){\\n                cnt++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4040329,
                "title": "python-beat-80",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n      res = 0\\n      st = set(s)\\n      for i in st:\\n        res += 1\\n      return res\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n      res = 0\\n      st = set(s)\\n      for i in st:\\n        res += 1\\n      return res\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4036551,
                "title": "c-easy-and-readable-solution-faster-than-62",
                "content": "![image.png](https://assets.leetcode.com/users/images/02707d73-80c2-425c-814c-d8783e5284d5_1694538701.2099478.png)\\n\\n**Don\\'t hesitate to suggest or ask bellow about something that you don\\'t understand**\\n\\n```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) {\\n        Dictionary<char, int> dc = new ();\\n        for (int i = 0; i < s.Length; i++)\\n            if (!dc.ContainsKey(s[i]))\\n                dc.Add(s[i], 1);\\n            else\\n                dc[s[i]]++;\\n        return dc.Count;\\n    }\\n}\\n```\\n\\nIf you like it don\\'t forget to **upvote!**",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimizedStringLength(string s) {\\n        Dictionary<char, int> dc = new ();\\n        for (int i = 0; i < s.Length; i++)\\n            if (!dc.ContainsKey(s[i]))\\n                dc.Add(s[i], 1);\\n            else\\n                dc[s[i]]++;\\n        return dc.Count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031544,
                "title": "easiest-solution-o-n-beat-90",
                "content": "\\n# Complexity\\n- Time complexity:\\n ```\\nO(N)\\n```\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n```\\nO(N)\\n```\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        if(s.length()==1)\\n        return 1;\\n         string str;\\n        sort(s.begin(),s.end());\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(str.length()>0)\\n            { if(s[i]==str[str.length()-1])\\n            {\\n                continue;\\n            }\\n            else\\n            { str+=s[i];\\n\\n            }\\n\\n            }\\n            else\\n            {\\n                str+=s[i];\\n            }\\n        }\\n        return str.length();\\n    }\\n};\\n```\\n\\nhope you found it useful....btw i didnt get leetcode submit algorithm \\uD83D\\uDE05...when i submit first time this code beats 98% takes only 8ms hahaha",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nO(N)\\n```\n```\\nO(N)\\n```\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        if(s.length()==1)\\n        return 1;\\n         string str;\\n        sort(s.begin(),s.end());\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(str.length()>0)\\n            { if(s[i]==str[str.length()-1])\\n            {\\n                continue;\\n            }\\n            else\\n            { str+=s[i];\\n\\n            }\\n\\n            }\\n            else\\n            {\\n                str+=s[i];\\n            }\\n        }\\n        return str.length();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4025324,
                "title": "one-line-code-with-no-extra-space-and-linear-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:**O(n)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:**O(1)** ---> Set can be Constructed of Size(26) Worst Case Possible. So it is Constant\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> set = new HashSet<>();\\n        for(int i=0; i<s.length(); i++){\\n            set.add(s.charAt(i));\\n        }\\n\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> set = new HashSet<>();\\n        for(int i=0; i<s.length(); i++){\\n            set.add(s.charAt(i));\\n        }\\n\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4022345,
                "title": "easy-to-understand-python-solution-1-liner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4016358,
                "title": "elixir-mapset-rust-hashset-solutions",
                "content": "### Elixir\\n\\n```\\ndefmodule Solution do\\n  @spec minimized_string_length(s :: String.t()) :: integer\\n  def minimized_string_length(s) do\\n    s |> String.graphemes() |> MapSet.new() |> MapSet.size()\\n  end\\nend\\n\\n```\\n\\n### Rust\\n\\n```\\nuse std::collections::HashSet;\\nuse std::iter::FromIterator;\\n\\nimpl Solution {\\n    pub fn minimized_string_length(s: String) -> i32 {\\n        let st: HashSet<u8> = HashSet::from_iter(s.bytes().into_iter());\\n        st.len() as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Elixir"
                ],
                "code": "```\\ndefmodule Solution do\\n  @spec minimized_string_length(s :: String.t()) :: integer\\n  def minimized_string_length(s) do\\n    s |> String.graphemes() |> MapSet.new() |> MapSet.size()\\n  end\\nend\\n\\n```\n```\\nuse std::collections::HashSet;\\nuse std::iter::FromIterator;\\n\\nimpl Solution {\\n    pub fn minimized_string_length(s: String) -> i32 {\\n        let st: HashSet<u8> = HashSet::from_iter(s.bytes().into_iter());\\n        st.len() as i32\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4015125,
                "title": "accepted-one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func minimizedStringLength(_ s: String) -> Int {\\n        Set(s).count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    func minimizedStringLength(_ s: String) -> Int {\\n        Set(s).count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014349,
                "title": "javascript-1-liner",
                "content": "# Code\\n```\\nvar minimizedStringLength = function(s) {\\n    return new Set(s.split(\\'\\')).size;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minimizedStringLength = function(s) {\\n    return new Set(s.split(\\'\\')).size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4013784,
                "title": "beats-100-in-time-space",
                "content": "# Approach - Use int array and store as 1 for the character is present\\n\\nThen calculate the total by iterating over the loop\\nThis beats the Set and HashMap solution flat out doubled the time\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] alpha = new int[26];\\n        for(int i=0;i<s.length();i++){\\n            alpha[s.charAt(i)-\\'a\\'] = 1;\\n        }\\n        int total = 0;\\n        for(int num:alpha){\\n            total+=num;\\n        }\\n        return total;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] alpha = new int[26];\\n        for(int i=0;i<s.length();i++){\\n            alpha[s.charAt(i)-\\'a\\'] = 1;\\n        }\\n        int total = 0;\\n        for(int num:alpha){\\n            total+=num;\\n        }\\n        return total;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4013281,
                "title": "simple-c-program-answer",
                "content": "# Intuition\\nSOLUTION IN C PROGRAM .\\n\\n# Approach\\nBY SORTING THE CHARACTER INSIDE THE STRING AND COUNTING THE INDIVIUAL CHARACTER \\n\\n# Code\\n```\\nint minimizedStringLength(char * s){\\n\\n   int length = strlen(s); \\n   int count = 0;\\n   \\n   char temp;\\n   for(int i=0;i<length;i++){\\n       for(int j=i+1;j<length;j++){\\n           if(s[i] > s[j]){\\n               temp = s[i];\\n               s[i] = s[j];\\n               s[j] = temp;\\n           } \\n       }\\n   }\\n\\n   for(int i=1; i<length; i++){\\n       if(s[i] != s[count]){\\n           count++;\\n           s[count] = s[i];\\n       }\\n   }\\n\\n   return count + 1;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint minimizedStringLength(char * s){\\n\\n   int length = strlen(s); \\n   int count = 0;\\n   \\n   char temp;\\n   for(int i=0;i<length;i++){\\n       for(int j=i+1;j<length;j++){\\n           if(s[i] > s[j]){\\n               temp = s[i];\\n               s[i] = s[j];\\n               s[j] = temp;\\n           } \\n       }\\n   }\\n\\n   for(int i=1; i<length; i++){\\n       if(s[i] != s[count]){\\n           count++;\\n           s[count] = s[i];\\n       }\\n   }\\n\\n   return count + 1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4010143,
                "title": "java-solution-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean alphabets[] = new boolean[26];\\n        int ans = 0;\\n\\n        for(char c : s.toCharArray()){\\n            if(!alphabets[c - \\'a\\']){\\n                ans++;\\n                alphabets[c - \\'a\\'] = true;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean alphabets[] = new boolean[26];\\n        int ans = 0;\\n\\n        for(char c : s.toCharArray()){\\n            if(!alphabets[c - \\'a\\']){\\n                ans++;\\n                alphabets[c - \\'a\\'] = true;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4009932,
                "title": "2lines-code-easy-code-java-string",
                "content": "\\n# Code\\n```\\nimport java.util.Arrays;\\n\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        char[] ch = s.toCharArray();\\n        Arrays.sort(ch);\\n        int count = 0;\\n        for (int i = 0; i < s.length() - 1; i++) {\\n            if (ch[i] != ch[i + 1]) {\\n                count++;\\n            }\\n        }\\n        // Increment count for the last unique character\\n        count++;\\n        return count;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.util.Arrays;\\n\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        char[] ch = s.toCharArray();\\n        Arrays.sort(ch);\\n        int count = 0;\\n        for (int i = 0; i < s.length() - 1; i++) {\\n            if (ch[i] != ch[i + 1]) {\\n                count++;\\n            }\\n        }\\n        // Increment count for the last unique character\\n        count++;\\n        return count;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005654,
                "title": "o-n-solution-using-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nOnce you have analysed, the goal is to find the unique elements in the string\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Using a set, try to insert all the elements in the set\\n2. Return the size of the set\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set <char> ans;\\n        for(auto x : s) {\\n            ans.insert(x);\\n        }\\n        return ans.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set <char> ans;\\n        for(auto x : s) {\\n            ans.insert(x);\\n        }\\n        return ans.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002535,
                "title": "two-types-of-code-array-and-string-method-both",
                "content": "\\n```\\nfunction minimizedStringLength(s: string): number {\\n    //  let strArr = [...s];\\n    // let count = 0;\\n\\n    // for (let i = 0; i < strArr.length; i++) {\\n    //     for (let j = i + 1; j < strArr.length; j++) {\\n    //         if (strArr[i] === strArr[j]) {\\n    //             strArr[j] = \".\";\\n    //         }\\n    //     }\\n    // }\\n\\n    // for (let i = 0; i < strArr.length; i++) {\\n    //     if (strArr[i] != \".\") {\\n    //         count++;\\n    //     }\\n    // }\\n\\n    // return count;\\n\\n     let str = \"\";\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (!str.includes(s[i])) {\\n            str += s[i];\\n        }\\n    }\\n\\n    return str.length;\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Array",
                    "String"
                ],
                "code": "```\\nfunction minimizedStringLength(s: string): number {\\n    //  let strArr = [...s];\\n    // let count = 0;\\n\\n    // for (let i = 0; i < strArr.length; i++) {\\n    //     for (let j = i + 1; j < strArr.length; j++) {\\n    //         if (strArr[i] === strArr[j]) {\\n    //             strArr[j] = \".\";\\n    //         }\\n    //     }\\n    // }\\n\\n    // for (let i = 0; i < strArr.length; i++) {\\n    //     if (strArr[i] != \".\") {\\n    //         count++;\\n    //     }\\n    // }\\n\\n    // return count;\\n\\n     let str = \"\";\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (!str.includes(s[i])) {\\n            str += s[i];\\n        }\\n    }\\n\\n    return str.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4001122,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#include <string>\\nclass Solution {\\n    public:\\n    int minimizedStringLength(string s) {\\n        int n=s.size();\\n        for (int i=0;i<n;){\\n            char ch=s[i];\\n            int j=i+1;\\n            while(j<n){\\n                if (s[j]==ch){\\n                    s.erase(j,1);\\n                    n--;\\n                }\\n                else j++;\\n            }\\n            i++;\\n        }\\n        return s.size();\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n#include <string>\\nclass Solution {\\n    public:\\n    int minimizedStringLength(string s) {\\n        int n=s.size();\\n        for (int i=0;i<n;){\\n            char ch=s[i];\\n            int j=i+1;\\n            while(j<n){\\n                if (s[j]==ch){\\n                    s.erase(j,1);\\n                    n--;\\n                }\\n                else j++;\\n            }\\n            i++;\\n        }\\n        return s.size();\\n    }\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3992806,
                "title": "trick-solution-easy-solution-using-set-4-line-only",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst thought was breaking the solution but it seemed too much work so I tried reading the question again.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAfter reading it again I suspected a trick solution might work.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> res = new HashSet<>();\\n        for(char c : s.toCharArray())\\n            res.add(c);\\n        return res.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> res = new HashSet<>();\\n        for(char c : s.toCharArray())\\n            res.add(c);\\n        return res.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3992235,
                "title": "minimize-string-length",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    We just have to return the number of unique character in String\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(k) where k is the number of unique element. \\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Map<Character,Integer> map = new HashMap<>(); \\n        \\n        int ans = 0;\\n        for(char ch : s.toCharArray())\\n        {\\n            if(map.containsKey(ch)) continue;\\n            else{\\n                map.put(ch,1);\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Ordered Map"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Map<Character,Integer> map = new HashMap<>(); \\n        \\n        int ans = 0;\\n        for(char ch : s.toCharArray())\\n        {\\n            if(map.containsKey(ch)) continue;\\n            else{\\n                map.put(ch,1);\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3988060,
                "title": "c-2-line-easy-solution",
                "content": "# C++ | 2 Line | easy solution\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        sort(s.begin(),s.end());\\n        s.erase(unique(s.begin(),s.end()),s.end());\\n        return s.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        sort(s.begin(),s.end());\\n        s.erase(unique(s.begin(),s.end()),s.end());\\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3985282,
                "title": "typescript-solution",
                "content": "```\\nfunction minimizedStringLength(s: string): number {\\n    const chars: string[] = [...new Set(s.split(\\'\\'))];\\n    return chars.length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction minimizedStringLength(s: string): number {\\n    const chars: string[] = [...new Set(s.split(\\'\\'))];\\n    return chars.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3983548,
                "title": "solution-with-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFist I was thinking that I will leave string \"absba\"\\nBut after carfully reading the task I understod that I neeed only distince letters.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set set = new HashSet<>();\\n        for(int i = 0; i < s.length(); i++){\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set set = new HashSet<>();\\n        for(int i = 0; i < s.length(); i++){\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981569,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character>h=new HashSet();\\n        for(int i=0;i<s.length();i++){\\n            h.add(s.charAt(i));\\n        }\\n        return h.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character>h=new HashSet();\\n        for(int i=0;i<s.length();i++){\\n            h.add(s.charAt(i));\\n        }\\n        return h.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3980359,
                "title": "best-explained-and-easiest-solution",
                "content": "# Intuition\\nBasicaly the question is to return the size of substring in a given string which has no duplicate characters,so if you think about it the easiest way to solve this problem is to use set data structure,because set doesnt contain duplicates.\\n\\n# Approach\\n-Traverse through the string and insert every character to set.\\n-In the end return the size of a set.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n# Code\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n    set<char>st;\\n    for(char c:s){\\n      st.insert(c);\\n    }    \\n    return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n    set<char>st;\\n    for(char c:s){\\n      st.insert(c);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3979931,
                "title": "python-one-line-solution",
                "content": "The only challenge here was to not misinterpret the description and sample cases\\n\\nthe final string will contain no duplicates\\n# Solution\\n```\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978878,
                "title": "simple-java-solution-using-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n\\n        HashSet<String> set = new HashSet<>();\\n        for(int i=0; i<s.length(); i++){\\n            set.add(String.valueOf(s.charAt(i)));\\n        }\\n        return set.size();\\n\\n\\n        // StringBuilder sb = new StringBuilder(s);\\n        // for(int i=0; i<sb.length()-1; i++){\\n        //     for(int j=0; j<sb.length()-1; j++){\\n        //         if(sb.charAt(j)==sb.charAt(j+1)){\\n        //             sb.deleteCharAt(j);\\n        //         }\\n        //     }\\n        // }\\n        // String str = sb.toString();\\n        // return str.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n\\n        HashSet<String> set = new HashSet<>();\\n        for(int i=0; i<s.length(); i++){\\n            set.add(String.valueOf(s.charAt(i)));\\n        }\\n        return set.size();\\n\\n\\n        // StringBuilder sb = new StringBuilder(s);\\n        // for(int i=0; i<sb.length()-1; i++){\\n        //     for(int j=0; j<sb.length()-1; j++){\\n        //         if(sb.charAt(j)==sb.charAt(j+1)){\\n        //             sb.deleteCharAt(j);\\n        //         }\\n        //     }\\n        // }\\n        // String str = sb.toString();\\n        // return str.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978609,
                "title": "go-beats-100",
                "content": "# Intuition\\nf the input string contains only lowercase English letters, you can use an array of size 26 to count the frequency of each letter in the string\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nfunc minimizedStringLength(s string) int {\\n    freq := [26]int{}\\n\\n    for _, c := range s {\\n        freq[c-\\'a\\']++\\n    }\\n\\n    count := 0\\n    for _, f := range freq {\\n        if f > 0 {\\n            count++\\n        }\\n    }\\n\\n    return count\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc minimizedStringLength(s string) int {\\n    freq := [26]int{}\\n\\n    for _, c := range s {\\n        freq[c-\\'a\\']++\\n    }\\n\\n    count := 0\\n    for _, f := range freq {\\n        if f > 0 {\\n            count++\\n        }\\n    }\\n\\n    return count\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3973020,
                "title": "easy-java-solution-by-using-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> h = new HashSet<>();\\n        for(int i =0;i<s.length();i++){\\n            h.add(s.charAt(i));\\n        }\\n\\n    return h.size();}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> h = new HashSet<>();\\n        for(int i =0;i<s.length();i++){\\n            h.add(s.charAt(i));\\n        }\\n\\n    return h.size();}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3972899,
                "title": "solution-with-constant-time-and-memory",
                "content": "\\n# Approach\\nWe need the number of the unique characters. If a character appears\\nmore than 1 time, it can be reduced to 1 apparition. Instead of \\nusing set or map (which occupies a lot memory), use a 26 sized-array(\\nwe are working with small letters) like a map of <int, int> or like a set.\\n![image.png](https://assets.leetcode.com/users/images/e8fc8a39-f97c-4101-9999-1b3d6a3a387c_1693244183.0110075.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        //s contains only lowercase English letters\\n        int arr[26] = {0};\\n        for (auto c : s)\\n        {\\n            arr[c - \\'a\\']++;\\n        }\\n        int nr = 0;\\n        for (int c = \\'a\\'; c <= \\'z\\'; c++)\\n        {\\n            if (arr [c - \\'a\\'] >= 1)\\n            {\\n                nr ++;\\n            }\\n        }\\n        return nr;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        //s contains only lowercase English letters\\n        int arr[26] = {0};\\n        for (auto c : s)\\n        {\\n            arr[c - \\'a\\']++;\\n        }\\n        int nr = 0;\\n        for (int c = \\'a\\'; c <= \\'z\\'; c++)\\n        {\\n            if (arr [c - \\'a\\'] >= 1)\\n            {\\n                nr ++;\\n            }\\n        }\\n        return nr;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3972775,
                "title": "hash-map-please-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        map<char, int> mp;\\n\\n        for (int i=0;i<s.size();i++) {\\n            mp[s[i]]++;\\n        }\\n\\n        return mp.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        map<char, int> mp;\\n\\n        for (int i=0;i<s.size();i++) {\\n            mp[s[i]]++;\\n        }\\n\\n        return mp.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3955894,
                "title": "ruby-one-line-beats-100-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# @param {String} s\\n# @return {Integer}\\ndef minimized_string_length(s)\\n    return s.split(\"\").tally.size\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {String} s\\n# @return {Integer}\\ndef minimized_string_length(s)\\n    return s.split(\"\").tally.size\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3951560,
                "title": "easy-solution-in-c",
                "content": "# Intuition\\n\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_map<char,int>m;\\n        int ans=0;\\n        for(int i=0;i<s.length();i++){\\n            m[s[i]]++;\\n            if(m[s[i]]==1)\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_map<char,int>m;\\n        int ans=0;\\n        for(int i=0;i<s.length();i++){\\n            m[s[i]]++;\\n            if(m[s[i]]==1)\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3951308,
                "title": "c-bits-manipulation-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        int mask = 0;\\n        for(char &ele:s){\\n            mask |= (1<<(ele-\\'a\\'));\\n        }\\n        int res = 0;\\n        while(mask){\\n            res += (mask&1);\\n            mask = mask>>1;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        int mask = 0;\\n        for(char &ele:s){\\n            mask |= (1<<(ele-\\'a\\'));\\n        }\\n        int res = 0;\\n        while(mask){\\n            res += (mask&1);\\n            mask = mask>>1;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3949226,
                "title": "minimize-string-length-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> set = new HashSet<>();\\n        for(int i =0; i < s.length(); i++){\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> set = new HashSet<>();\\n        for(int i =0; i < s.length(); i++){\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3946369,
                "title": "js-hashmap-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimizedStringLength = function(arr) {\\n    let map = new Map();\\n\\n\\n    for(let i=0; i<arr.length; i++){\\n        if(!map.has(arr[i])) map.set(arr[i], 1)\\n    }\\n\\n    return map.size;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimizedStringLength = function(arr) {\\n    let map = new Map();\\n\\n\\n    for(let i=0; i<arr.length; i++){\\n        if(!map.has(arr[i])) map.set(arr[i], 1)\\n    }\\n\\n    return map.size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3943656,
                "title": "java-solution",
                "content": "# Complexity\\n- Time complexity: $$O(NLogN)$$\\n\\n- Space complexity: $$O(n)$$ \\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int j = 0;\\n        int resultCount = 1;\\n        char[] tmp = s.toCharArray();\\n\\n        Arrays.sort(tmp);\\n\\n        for (int i = 1; i < tmp.length; i++) {\\n            if (tmp[i] != tmp[j]) {\\n                resultCount++;\\n                j = i;\\n            }\\n        }\\n\\n        return resultCount;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int j = 0;\\n        int resultCount = 1;\\n        char[] tmp = s.toCharArray();\\n\\n        Arrays.sort(tmp);\\n\\n        for (int i = 1; i < tmp.length; i++) {\\n            if (tmp[i] != tmp[j]) {\\n                resultCount++;\\n                j = i;\\n            }\\n        }\\n\\n        return resultCount;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942288,
                "title": "easy-code-easy-to-understand-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        string temp=\"\";\\n        sort(s.begin(),s.end());\\n        temp.push_back(s[0]);\\n        for(int i=1;i<s.length();i++)\\n        {\\n            if(temp.back()!=s[i])\\n            {\\n                temp.push_back(s[i]);\\n            }\\n        }\\n        return temp.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        string temp=\"\";\\n        sort(s.begin(),s.end());\\n        temp.push_back(s[0]);\\n        for(int i=1;i<s.length();i++)\\n        {\\n            if(temp.back()!=s[i])\\n            {\\n                temp.push_back(s[i]);\\n            }\\n        }\\n        return temp.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941177,
                "title": "simple-solution-4-lines-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> sb = new HashSet<>();\\n        for(char c:s.toCharArray()){\\n            sb.add(c);\\n        }\\n        return sb.size();\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> sb = new HashSet<>();\\n        for(char c:s.toCharArray()){\\n            sb.add(c);\\n        }\\n        return sb.size();\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939092,
                "title": "clean-golang-solution",
                "content": "# Code\\n```\\nfunc minimizedStringLength(s string) int {\\n    set := make(map[rune]struct{},0)\\n    for _,v := range s {\\n        set[v] = struct{}{}\\n    }\\n    return len(set)\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc minimizedStringLength(s string) int {\\n    set := make(map[rune]struct{},0)\\n    for _,v := range s {\\n        set[v] = struct{}{}\\n    }\\n    return len(set)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3937649,
                "title": "2716-minimize-string-length-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity : O(N);\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N);\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#include <algorithm>\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        //taking the int variables i,j \\n        int i=0,j=0;\\n        //taking the one string variable\\n        string st=\"\";\\n        //using the sort method to sort the string \\n        sort(s.begin(), s.end());\\n        while(i<s.length()){\\n            st+=s[i];\\n            if(s[i]==s[i+1]){\\n                st.pop_back();\\n            }\\n            else{\\n                j++;\\n                st+=s[i];\\n            }\\n            i++;\\n        }\\n        return j;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\n#include <algorithm>\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        //taking the int variables i,j \\n        int i=0,j=0;\\n        //taking the one string variable\\n        string st=\"\";\\n        //using the sort method to sort the string \\n        sort(s.begin(), s.end());\\n        while(i<s.length()){\\n            st+=s[i];\\n            if(s[i]==s[i+1]){\\n                st.pop_back();\\n            }\\n            else{\\n                j++;\\n                st+=s[i];\\n            }\\n            i++;\\n        }\\n        return j;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3932732,
                "title": "easy-solution-2-lines-using-set",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>st(s.begin(),s.end());\\n       return st.size();\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>st(s.begin(),s.end());\\n       return st.size();\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931847,
                "title": "one-word-solution-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        return len(set(s))\\n        \\n        \\n            \\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        return len(set(s))\\n        \\n        \\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3928205,
                "title": "easy-to-understand-c-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>st(s.begin(),s.end());\\n\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>st(s.begin(),s.end());\\n\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3926241,
                "title": "simple-java-solution-single-loop",
                "content": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        StringBuilder r = new StringBuilder();\\n        for (char c : s.toCharArray()) {\\n            if (r.indexOf(String.valueOf(c)) == -1) {\\n                r.append(c);\\n            }\\n        }\\n        return r.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        StringBuilder r = new StringBuilder();\\n        for (char c : s.toCharArray()) {\\n            if (r.indexOf(String.valueOf(c)) == -1) {\\n                r.append(c);\\n            }\\n        }\\n        return r.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3925031,
                "title": "easy-python-solution-for-minimize-the-string-length",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        res = \\'\\'\\n        for i in s:\\n            if i not in res:\\n                res += i\\n            else:\\n                pass\\n        return len(res)\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        res = \\'\\'\\n        for i in s:\\n            if i not in res:\\n                res += i\\n            else:\\n                pass\\n        return len(res)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923048,
                "title": "short-and-easy-solution-using-set-using-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nintuition is simple to take unique elements from strings\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nso i think about set as it stors only unique elements\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTC is O(N)\\n\\n- Space complexity:\\n- O(N) as we took set  \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>st;\\n        for(auto c:s)\\n        {\\n            st.insert(c);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>st;\\n        for(auto c:s)\\n        {\\n            st.insert(c);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3921937,
                "title": "java-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char c : s.toCharArray()) \\n        {\\n            if (sb.indexOf(String.valueOf(c)) == -1) \\n            {\\n                sb.append(c);\\n            }\\n        }\\n        return sb.length();\\n         }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char c : s.toCharArray()) \\n        {\\n            if (sb.indexOf(String.valueOf(c)) == -1) \\n            {\\n                sb.append(c);\\n            }\\n        }\\n        return sb.length();\\n         }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3921726,
                "title": "c-solution",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    int minimizedStringLength(const string& s)\\n    {\\n        int freq[26] = {0};\\n        for (char c : s)\\n        {\\n            freq[c - \\'a\\']++;\\n        }\\n\\n        int count = 0;\\n        for (int i = 0; i < 26; i++)\\n        {\\n            if (freq[i] > 0)\\n            {\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int minimizedStringLength(const string& s)\\n    {\\n        int freq[26] = {0};\\n        for (char c : s)\\n        {\\n            freq[c - \\'a\\']++;\\n        }\\n\\n        int count = 0;\\n        for (int i = 0; i < 26; i++)\\n        {\\n            if (freq[i] > 0)\\n            {\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3921046,
                "title": "easy-solution-using-java",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int count = 0;\\n        int[] arr = new int[26];\\n        for(char c:s.toCharArray()){\\n            if(arr[c - \\'a\\'] == 0){\\n                count++;\\n                arr[c - \\'a\\'] = 1;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int count = 0;\\n        int[] arr = new int[26];\\n        for(char c:s.toCharArray()){\\n            if(arr[c - \\'a\\'] == 0){\\n                count++;\\n                arr[c - \\'a\\'] = 1;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3919817,
                "title": "just-count-the-unique-characters-o-n-beats-100",
                "content": "# intuition\\nfor any character having more than one occurence, it can be deleted from left or right of chosen pivot character.\\nonly the pivot character can\\'t be deleted.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean[] distincts = new boolean[26];\\n        for(char ch: s.toCharArray()) {\\n            distincts[ch-97] = true;\\n        }\\n        int sum = 0;\\n        for(boolean b: distincts) {\\n            sum += b?1:0;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean[] distincts = new boolean[26];\\n        for(char ch: s.toCharArray()) {\\n            distincts[ch-97] = true;\\n        }\\n        int sum = 0;\\n        for(boolean b: distincts) {\\n            sum += b?1:0;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3917891,
                "title": "dart-solution-in-one-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int minimizedStringLength(String s) {\\n      return s.split(\\'\\').toSet().length;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int minimizedStringLength(String s) {\\n      return s.split(\\'\\').toSet().length;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3917314,
                "title": "go-simple-solution",
                "content": "# Code\\n```go\\nfunc minimizedStringLength(s string) (l int) {\\n    // recommended slices more than map which is slower\\n    v := make([]bool, 26)\\n    for _, b := range s {\\n        if v[b-\\'a\\'] {\\n            continue\\n        }\\n        v[b-\\'a\\'] = true \\n        l++\\n    }\\n    return\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc minimizedStringLength(s string) (l int) {\\n    // recommended slices more than map which is slower\\n    v := make([]bool, 26)\\n    for _, b := range s {\\n        if v[b-\\'a\\'] {\\n            continue\\n        }\\n        v[b-\\'a\\'] = true \\n        l++\\n    }\\n    return\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3916820,
                "title": "easy-understanding",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(m) where m isthe unique charecters in the string\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        int count = 0;\\n        char ch = s[0];\\n        int n = s.size();\\n        unordered_map<int, int> umap;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(umap.find(s[i]) != umap.end())\\n            {\\n                continue;\\n            }\\n            else\\n            {\\n                count++;\\n                umap[s[i]]++;\\n            }\\n        }\\n        return umap.size();\\n        // for(int i=1;i<n;i++)\\n        // {\\n        //     if(s[i] == ch)\\n        //     {\\n        //         continue;\\n        //     }\\n        //     else\\n        //     {\\n        //         count++;\\n        //         ch = s[i];\\n        //     }\\n        // }\\n        // return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        int count = 0;\\n        char ch = s[0];\\n        int n = s.size();\\n        unordered_map<int, int> umap;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(umap.find(s[i]) != umap.end())\\n            {\\n                continue;\\n            }\\n            else\\n            {\\n                count++;\\n                umap[s[i]]++;\\n            }\\n        }\\n        return umap.size();\\n        // for(int i=1;i<n;i++)\\n        // {\\n        //     if(s[i] == ch)\\n        //     {\\n        //         continue;\\n        //     }\\n        //     else\\n        //     {\\n        //         count++;\\n        //         ch = s[i];\\n        //     }\\n        // }\\n        // return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916506,
                "title": "96-with-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        vector<int> arr(26,0);\\n        int ans=0;\\n        for(auto i:s){\\n            arr[i-\\'a\\']++;\\n            if(arr[i-\\'a\\']==1)\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        vector<int> arr(26,0);\\n        int ans=0;\\n        for(auto i:s){\\n            arr[i-\\'a\\']++;\\n            if(arr[i-\\'a\\']==1)\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916035,
                "title": "java-fastest-solution",
                "content": "\\n# Complexity\\n- Time complexity:  $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:  $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean[] table = new boolean[26];\\n        int count = 0;\\n\\n        for(char c : s.toCharArray())\\n           table[c -\\'a\\'] = true;\\n        \\n        for(int i = 0; i < 26; i++)\\n           if(table[i]) count++;\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        boolean[] table = new boolean[26];\\n        int count = 0;\\n\\n        for(char c : s.toCharArray())\\n           table[c -\\'a\\'] = true;\\n        \\n        for(int i = 0; i < 26; i++)\\n           if(table[i]) count++;\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3914310,
                "title": "easy-solution-using-set-python",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3910404,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe are just removing the duplicate here.\\nSo just remove the duplicate string elements.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        List<Character> list=new ArrayList<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(!list.contains(s.charAt(i)))\\n            {\\n                list.add(s.charAt(i));\\n            }\\n        }\\n        return list.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        List<Character> list=new ArrayList<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(!list.contains(s.charAt(i)))\\n            {\\n                list.add(s.charAt(i));\\n            }\\n        }\\n        return list.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3907841,
                "title": "using-map-in-c-very-easy-solution",
                "content": "class Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        \\n        //Time and space com = O(n);\\n        unordered_map<char,int> mp;\\n        for(char ch : s)\\n        {\\n            mp[ch]++;\\n        }\\n        \\n        return mp.size();\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        \\n        //Time and space com = O(n);\\n        unordered_map<char,int> mp;\\n        for(char ch : s)\\n        {\\n            mp[ch]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3902678,
                "title": "o-n-simple-solution-using-mapping-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nJust use pigeonhole sort principle\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint minimizedStringLength(char * s){\\n    int arr[26] = {0};\\n    for(int i = 0;i < strlen(s);i++){\\n        arr[s[i] - \\'a\\']++;\\n    }\\n    int p = 0;\\n    for(int i = 0;i < 26;i++){\\n        if(arr[i] > 0){\\n            p++;\\n        }\\n    }\\n    return(p);\\n\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint minimizedStringLength(char * s){\\n    int arr[26] = {0};\\n    for(int i = 0;i < strlen(s);i++){\\n        arr[s[i] - \\'a\\']++;\\n    }\\n    int p = 0;\\n    for(int i = 0;i < 26;i++){\\n        if(arr[i] > 0){\\n            p++;\\n        }\\n    }\\n    return(p);\\n\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3901474,
                "title": "simple-approach-is-using-set",
                "content": "\\n# Approach\\nSince any characher from left or right has to be deleted\\nTherefore any dublicate will be removed in the end.\\nso, the question boils down to count of unique elements.\\n\\n\\n\\n# Code\\n```\\n    int minimizedStringLength(string s) {\\n        set<char>se;\\n        for(char ch:s)se.insert(ch);\\n        return se.size();\\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n    int minimizedStringLength(string s) {\\n        set<char>se;\\n        for(char ch:s)se.insert(ch);\\n        return se.size();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3898481,
                "title": "one-line-solution-with-easy-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimizedStringLength = function (s) {\\n\\n    // remove same character from string s using Set() and convert into string from array using join() and find length of string using .length property and return it\\n    return [...new Set([...s])].join(\\'\\').length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimizedStringLength = function (s) {\\n\\n    // remove same character from string s using Set() and convert into string from array using join() and find length of string using .length property and return it\\n    return [...new Set([...s])].join(\\'\\').length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3895120,
                "title": "very-easy-to-understand-just-go-and-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\ntraverse every character of set and add it to hashset; lastly return set size;\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> A = new HashSet<>();\\n        for(int i =0;i<s.length(); i++){\\n            if(!A.contains(s.charAt(i))){\\n                A.add(s.charAt(i));\\n            }\\n        }\\n        return A.size();\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        HashSet<Character> A = new HashSet<>();\\n        for(int i =0;i<s.length(); i++){\\n            if(!A.contains(s.charAt(i))){\\n                A.add(s.charAt(i));\\n            }\\n        }\\n        return A.size();\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894988,
                "title": "python3-and-python-100-simple-solution",
                "content": "\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        res = [i for i in set(s)]\\n        return len(res)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        res = [i for i in set(s)]\\n        return len(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894144,
                "title": "beginner-friendly-hashset-sol",
                "content": "# Intuition\\nThe answer string consist of only distinct characters\\n\\n# Approach\\nHashSet\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(char c : s.toCharArray()) {\\n            if(!set.add(c)) continue;\\n            else set.add(c);\\n        }\\n        \\n        return set.size();\\n    }\\n}\\n```\\n\\nPLEASE UPVOTE(if you\\'re not gay)",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(char c : s.toCharArray()) {\\n            if(!set.add(c)) continue;\\n            else set.add(c);\\n        }\\n        \\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3893003,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n    int i = 1;\\n    while (i < s.length()) {\\n        cout << s << endl;\\n        \\n        int left = i - 1;\\n        while (left >= 0 && s[left] != s[i]) {\\n            left--;\\n        }\\n        if (left >= 0) {\\n            s.erase(left, 1);\\n            i--;\\n        }\\n\\n        int right = i + 1;\\n        while (right < s.length() && s[right] != s[i]) {\\n            right++;\\n        }\\n        if (right < s.length()) {\\n            s.erase(right, 1);\\n        }\\n\\n        i++;\\n    }\\n    return s.length();\\n}\\n\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n    int i = 1;\\n    while (i < s.length()) {\\n        cout << s << endl;\\n        \\n        int left = i - 1;\\n        while (left >= 0 && s[left] != s[i]) {\\n            left--;\\n        }\\n        if (left >= 0) {\\n            s.erase(left, 1);\\n            i--;\\n        }\\n\\n        int right = i + 1;\\n        while (right < s.length() && s[right] != s[i]) {\\n            right++;\\n        }\\n        if (right < s.length()) {\\n            s.erase(right, 1);\\n        }\\n\\n        i++;\\n    }\\n    return s.length();\\n}\\n\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3881800,
                "title": "3-lines-solution-incl-return-statement",
                "content": "# Intuition\\nRead between the lines. No need to search for similar chars inside of a string. All you are asked for is a count of unique chars.\\n\\n# Approach\\n- sort it\\n- remove duplicates\\n\\nerase(unique) idiom works just fine\\n\\n# Complexity\\n- Time complexity:\\n$$O(NlogN)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        std::sort(s.begin(), s.end());\\n        s.erase(std::unique(s.begin(), s.end()), s.end() );\\n        return s.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        std::sort(s.begin(), s.end());\\n        s.erase(std::unique(s.begin(), s.end()), s.end() );\\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3879996,
                "title": "begineers-friendly-c-easy-to-understand",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_map<char, int> mp;\\n\\n        for(auto it:s){\\n            mp[it]++;\\n        }\\n        return mp.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_map<char, int> mp;\\n\\n        for(auto it:s){\\n            mp[it]++;\\n        }\\n        return mp.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3873211,
                "title": "in-1-line",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        s = set(s)\\n        return len(s)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimizedStringLength(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        s = set(s)\\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3872551,
                "title": "two-line-code-using-counter-function-runtime-45ms-beat-98-in-runtime",
                "content": "# Intuition\\n-> count the number of distinct character in string and return that count\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n->count the occurances of characters in string using counter function and return the number of distinct keys using len and keys function\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity : O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfrom collections import Counter\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        c=Counter(s)\\n        return len(c.keys())\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        c=Counter(s)\\n        return len(c.keys())\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3864868,
                "title": "python-one-liner-faster-than",
                "content": "# Intuition\\nThis problem is nothing more than a roundabout way of counting the number of unique characters in a string.  There are a number of ways to do this.\\n\\n# Approach\\nMy approach focuses on a \"real-world\" solution to this, which means convenient for the author.  For that reason, this solution is a one-liner.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n**O(n)**: We iterate through a string of length `n` once, performing constant time operations each iteration.  This solution beat 98.55% submissions.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n**O(n)**: We store potentially `n` characters in a set.  While one might be tempted to say this is O(1) space as the constraints specify the input characters are lowercase English letters, the proper abstraction applies to any range of character inputs.  This solution beat 70.97% of submissions.\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        #this is literally just returning the number of unique characters\\n        return len({i for i in s})\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        #this is literally just returning the number of unique characters\\n        return len({i for i in s})\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3862849,
                "title": "easy-to-understand-with-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nuse std::collections::HashSet;\\n\\nimpl Solution {\\n    pub fn minimized_string_length(s: String) -> i32 {\\n        let mut unique: HashSet<char> = HashSet::new();\\n    \\n        for char in s.chars() {\\n            unique.insert(char);\\n        }\\n\\n        unique.len() as i32 //.try_into().unwrap()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::collections::HashSet;\\n\\nimpl Solution {\\n    pub fn minimized_string_length(s: String) -> i32 {\\n        let mut unique: HashSet<char> = HashSet::new();\\n    \\n        for char in s.chars() {\\n            unique.insert(char);\\n        }\\n\\n        unique.len() as i32 //.try_into().unwrap()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3859841,
                "title": "python",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        # for i, c in enumerate(s):\\n        #     p = s[i::].find(c)\\n        #     s[p].replace(s[p], \" \")\\n        #     q = s[:i].find(c)\\n        #     s[q].replace(s[q], \" \")\\n        # return len(s)\\n        return len(set(s))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        # for i, c in enumerate(s):\\n        #     p = s[i::].find(c)\\n        #     s[p].replace(s[p], \" \")\\n        #     q = s[:i].find(c)\\n        #     s[q].replace(s[q], \" \")\\n        # return len(s)\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3858325,
                "title": "accepted-swift",
                "content": "```\\nclass Solution {\\n    func minimizedStringLength(_ s: String) -> Int {\\n        Set(s).count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func minimizedStringLength(_ s: String) -> Int {\\n        Set(s).count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3857964,
                "title": "simple-solution-for-beginner-using-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        l1=[]\\n        l2=[]\\n        for i in s:\\n            if i not in l1:\\n                l1.append(i)\\n            else:\\n                l2.append(i)\\n        return len(l1)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        l1=[]\\n        l2=[]\\n        for i in s:\\n            if i not in l1:\\n                l1.append(i)\\n            else:\\n                l2.append(i)\\n        return len(l1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3855703,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(strlen(s))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1) as it does not depend on strlen but it \\'26\\'+\\'1\\' extra space used. \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint minimizedStringLength(char * s){\\n    int ans[\\'z\\'-64]={0};\\n    int count=0;\\n   for(int i=0;i<strlen(s);i++)\\n   {\\n       if(ans[s[i]-65]==0)\\n       {\\n           count++;\\n           ans[s[i]-65]++;\\n       }\\n       else\\n       continue;\\n   }\\n   return count;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint minimizedStringLength(char * s){\\n    int ans[\\'z\\'-64]={0};\\n    int count=0;\\n   for(int i=0;i<strlen(s);i++)\\n   {\\n       if(ans[s[i]-65]==0)\\n       {\\n           count++;\\n           ans[s[i]-65]++;\\n       }\\n       else\\n       continue;\\n   }\\n   return count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3853728,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(LogN)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>ss;\\n        for(auto i:s){\\n            ss.insert(i);\\n        }\\n\\n        return ss.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        set<char>ss;\\n        for(auto i:s){\\n            ss.insert(i);\\n        }\\n\\n        return ss.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3853714,
                "title": "java-easy-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] arr = new int[26];\\n\\n        for(char c : s.toCharArray())\\n            arr[c - \\'a\\']++;\\n\\n        int count = 0;\\n\\n        for(int n : arr) \\n            if(n != 0) count++;\\n\\n        return count;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        int[] arr = new int[26];\\n\\n        for(char c : s.toCharArray())\\n            arr[c - \\'a\\']++;\\n\\n        int count = 0;\\n\\n        for(int n : arr) \\n            if(n != 0) count++;\\n\\n        return count;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3849099,
                "title": "using-hashmap-one-line-solution",
                "content": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        # Using Hashmap\\n        # hash_ = {}\\n        # for i in s:\\n        #     if i not in hash_:\\n        #         hash_[i] = 1\\n        #     hash_[i] += 1\\n        # return len(hash_)\\n        \\n        # One line.\\n        return len(set(s))\\n```\\n\\nThanks for reading :)",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimizedStringLength(self, s: str) -> int:\\n        # Using Hashmap\\n        # hash_ = {}\\n        # for i in s:\\n        #     if i not in hash_:\\n        #         hash_[i] = 1\\n        #     hash_[i] += 1\\n        # return len(hash_)\\n        \\n        # One line.\\n        return len(set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3846026,
                "title": "beginner-friendly-using-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character>set=new HashSet<>();\\n        for(int i=0;i<s.length();i++){\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimizedStringLength(String s) {\\n        Set<Character>set=new HashSet<>();\\n        for(int i=0;i<s.length();i++){\\n            set.add(s.charAt(i));\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3845826,
                "title": "java-3ms-beats-100-00",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    // HashSet + StringBuilder strategy: 8ms Beats 79.21%\\n    // boolean[123] + StringBuilder strategy: 4ms Beats 99.80%\\n    // boolean[123] + int numChars strategy: 3ms Beats 100.00%\\n\\n    public int minimizedStringLength(String s) {\\n\\n        boolean[] skipForever = new boolean[123];\\n        int numChars = 0;  // what we\\'ll return\\n\\n        for (char c : s.toCharArray()) {\\n            if (!skipForever[c]) {\\n                ++numChars;\\n                skipForever[c] = true;\\n            }\\n        }\\n\\n        return numChars;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    // HashSet + StringBuilder strategy: 8ms Beats 79.21%\\n    // boolean[123] + StringBuilder strategy: 4ms Beats 99.80%\\n    // boolean[123] + int numChars strategy: 3ms Beats 100.00%\\n\\n    public int minimizedStringLength(String s) {\\n\\n        boolean[] skipForever = new boolean[123];\\n        int numChars = 0;  // what we\\'ll return\\n\\n        for (char c : s.toCharArray()) {\\n            if (!skipForever[c]) {\\n                ++numChars;\\n                skipForever[c] = true;\\n            }\\n        }\\n\\n        return numChars;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3845701,
                "title": "c-efficient-concise",
                "content": "# Intuition\\nThe problem description is a bit confusing, but it boils down to a count of unique characters.\\n# Approach\\nUse a set to count unique characters.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)\\n\\n- Space complexity:\\n$$O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string& s) {\\n        unordered_set<char> t(s.begin(), s.end());\\n        return t.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string& s) {\\n        unordered_set<char> t(s.begin(), s.end());\\n        return t.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3844318,
                "title": "c-easy-o-n-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_map<char, int> ump;\\n        for(auto i : s) ump[i]++;\\n        \\n        int extra = 0;\\n        for(auto i : ump) {\\n            if(i.second > 1) extra += i.second - 1;\\n        }\\n        return s.size() - extra;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_map<char, int> ump;\\n        for(auto i : s) ump[i]++;\\n        \\n        int extra = 0;\\n        for(auto i : ump) {\\n            if(i.second > 1) extra += i.second - 1;\\n        }\\n        return s.size() - extra;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1916536,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1916041,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1916139,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1916884,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 2069258,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 2054998,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1980052,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1975797,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1931513,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1921418,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1916536,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1916041,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1916139,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1916884,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 2069258,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 2054998,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1980052,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1975797,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1931513,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            },
            {
                "id": 1921418,
                "content": [
                    {
                        "username": "Kavya_Goyal",
                        "content": "The problem statement is not properly written as in this we not suppose to count just the unique characters or remove duplicates .\\nWe should remove left and right and count the character Like if a testcase is like aaabbcdaa so the length of this should be 5 instead of 4 as by removing left and right occurrence of the same characters \\nSo  left out characters  should be abcda this how length of this will be 5 \\nThis is what problem state instead of what the solution it is accepting."
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "[@matamv](/matamv) Now they have update the tag but fail to update the problem statement They can simply write remove duplicates or count unique character if this is a solution they need."
                    },
                    {
                        "username": "laticm",
                        "content": "yeah this is where i was stuck. also, it had medium tag in contest. i went blank "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "It\\'s not at all a medium level problem. Should be marked easy."
                    },
                    {
                        "username": "aquaman55",
                        "content": "you should be marked as easy"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "it is marked as a easy\\n"
                    },
                    {
                        "username": "Socrii13",
                        "content": "The only thing in this question was how did u take the question as sample case can mislead ."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "One line problem. ```Set``` is your the best friend here"
                    },
                    {
                        "username": "SidKay",
                        "content": "I really do not understand what this problem description is saying, but `set` it is then."
                    },
                    {
                        "username": "ss6156852",
                        "content": "SEt is your friend here\\n"
                    },
                    {
                        "username": "najwer23",
                        "content": "Soo... \\n\\nif I have string \"aaaadddaaa\":\\n\\nit should be \"ad\" or \"ada\""
                    },
                    {
                        "username": "Zimzozaur",
                        "content": "Question just ask for returning number of unique char. When you submit `return len(set(s))`, you will pass the test."
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Performing the operations any number of time, will always leave the string full with unique characters. There are no tests checking in which order, do you take the characters away, and also it is not that clear in the description, in which order should you do if there are only two  similar characters in ex: \"abca\". Should you take the left \"a\" or the right \"a\" and give a result of \"abc\" or \"bca\". \\n\\nAnd since it checks if you have taken all the non-unique characters out, instead of using a hashmap and wondering whether you should remove the left or the right character, you can use the set() function and pass the tests."
                    },
                    {
                        "username": "MaheshK04",
                        "content": "does anyone know how to do this problem without hashset?\\nif u know please tell me the approach to solve it "
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "You may sort and then count chars not equal to their left neighbor. "
                    },
                    {
                        "username": "aryan1905",
                        "content": "just check for number of unique charachter occurences which will lead to removal of duplicates.\\n\\nclass Solution {\\npublic:\\n    int minimizedStringLength(string s) {\\n        unordered_set<char> uniqueChars;\\n        for (char ch : s) {\\n            if (uniqueChars.find(ch) == uniqueChars.end()) {\\n                uniqueChars.insert(ch);\\n            }\\n        }\\n        return uniqueChars.size();\\n    }\\n};"
                    },
                    {
                        "username": "Kavya_Goyal",
                        "content": "class Solution {\\n    public int minimizedStringLength(String s) {\\n       int arr[]= new int[26];\\n        int count=0;\\n        for(int i =0;i<s.length();i++){\\n            arr[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i =0;i<arr.length;i++){\\n            if(arr[i]>0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\nThis is how you can solve it without hashset\\n"
                    },
                    {
                        "username": "laticm",
                        "content": "you can use an array of size 26 to keep track of the count of elements, and if any of their count>0 increment result by 1. return result\\n"
                    },
                    {
                        "username": "sadhukhansubham588",
                        "content": "why this is giving me a wrong ans on 1125 testcase.\n`your inline code...your inline code...\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        int i=0 ;\n        int N =s.size();\n        for (int j = 0 ; j < N ; j++ ){\n            if(s[i]!=s[j]){\n                s[i+1]=s[j];\n                i++;\n            }\n        }\n        return{i+1};\n    }\n};`"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "bro you\\'re checking adjacent elements only but they asked for closest occurrence\\n\\ncheck this solution\\nhttps://leetcode.com/problems/minimize-string-length/solutions/3613884/best-approach-easy-java-solution-beats-100/\\n"
                    }
                ]
            }
        ]
    }
]