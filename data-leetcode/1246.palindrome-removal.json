[
    {
        "title": "Palindrome Removal",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1565552,
                "content": [
                    {
                        "username": "rielan",
                        "content": "I tried [1,2,3,4,3,2,1,1,7,8,7,1] as a test case. I think the answer should be 2, but the system gives expected answer of 3."
                    },
                    {
                        "username": "liang54",
                        "content": "For most of palindrome problems such as LC 516 - Longest Palindromic Subsequence and LC 647 - Palindromic Substrings, part of their DP transformation uses dp[i+1][j] and dp[i][j-1] when s[i] != s[j] (such as this solution https://leetcode.com/problems/longest-palindromic-subsequence/discuss/99101/Straight-forward-Java-DP-solution)\\n\\nHowever, for this problem, still in case of s[i] != s[j], I see all of the answers are breaking [i,j] with different length of [i,k]. Why can\\'t we still use dp[i+1][j] and dp[i][j-1]? The transformation in this problem can be something like:\\nwhen s[i] == s[j], dp[i][j] = dp[i+1][j-1]\\nwhne s[i] != s[j], dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 // min removal from [i+1,j] or [i,j-1] plus the removal at position i+1 or j-1 \\n\\nThanks!"
                    },
                    {
                        "username": "dixiao2020",
                        "content": "This is subarray removal not subsequence."
                    }
                ]
            },
            {
                "id": 1573847,
                "content": [
                    {
                        "username": "rielan",
                        "content": "I tried [1,2,3,4,3,2,1,1,7,8,7,1] as a test case. I think the answer should be 2, but the system gives expected answer of 3."
                    },
                    {
                        "username": "liang54",
                        "content": "For most of palindrome problems such as LC 516 - Longest Palindromic Subsequence and LC 647 - Palindromic Substrings, part of their DP transformation uses dp[i+1][j] and dp[i][j-1] when s[i] != s[j] (such as this solution https://leetcode.com/problems/longest-palindromic-subsequence/discuss/99101/Straight-forward-Java-DP-solution)\\n\\nHowever, for this problem, still in case of s[i] != s[j], I see all of the answers are breaking [i,j] with different length of [i,k]. Why can\\'t we still use dp[i+1][j] and dp[i][j-1]? The transformation in this problem can be something like:\\nwhen s[i] == s[j], dp[i][j] = dp[i+1][j-1]\\nwhne s[i] != s[j], dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 // min removal from [i+1,j] or [i,j-1] plus the removal at position i+1 or j-1 \\n\\nThanks!"
                    },
                    {
                        "username": "dixiao2020",
                        "content": "This is subarray removal not subsequence."
                    }
                ]
            }
        ]
    }
]