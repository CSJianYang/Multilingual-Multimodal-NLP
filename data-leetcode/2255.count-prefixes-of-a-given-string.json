[
    {
        "title": "Count Prefixes of a Given String",
        "question_content": "You are given a string array words and a string s, where words[i] and s comprise only of lowercase English letters.\nReturn the number of strings in words that are a prefix of s.\nA prefix of a string is a substring that occurs at the beginning of the string. A substring is a contiguous sequence of characters within a string.\n&nbsp;\nExample 1:\n\nInput: words = [\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"], s = \"abc\"\nOutput: 3\nExplanation:\nThe strings in words which are a prefix of s = \"abc\" are:\n\"a\", \"ab\", and \"abc\".\nThus the number of strings in words which are a prefix of s is 3.\nExample 2:\n\nInput: words = [\"a\",\"a\"], s = \"aa\"\nOutput: 2\nExplanation:\nBoth of the strings are a prefix of s. \nNote that the same string can occur multiple times in words, and it should be counted each time.\n&nbsp;\nConstraints:\n\n\t1 <= words.length <= 1000\n\t1 <= words[i].length, s.length <= 10\n\twords[i] and s consist of lowercase English letters only.",
        "solutions": [
            {
                "id": 1994777,
                "title": "java-c-python-starts-with",
                "content": "# **Explanation**\\nfor each word `w` in `words` list,\\ncheck if word `w` `startsWith` the string `s`\\n<br>\\n\\n# **Complexity**\\nTime `O(NS)`\\nSpace `O(1)`\\n<br>\\n\\n**Java**\\n```java\\n    public int countPrefixes(String[] words, String s) {\\n        int res = 0;\\n        for (String w : words)\\n            if (s.startsWith(w))\\n                res++;\\n        return res;\\n    }\\n```\\n\\n**C++**\\nTime O(NWS)\\n```cpp\\n    int countPrefixes(vector<string>& words, string s) {\\n        int res = 0;\\n        for (auto& w : words)\\n            res += s.find(w) < 1;\\n        return res; \\n    }\\n```\\n\\n**C++**\\nSuggested by @mzchen\\n```cpp\\n    int countPrefixes(vector<string>& words, string s) {\\n        int res = 0;\\n        for (auto& w : words)\\n            res += !s.compare(0, w.size(), w);\\n        return res;\\n    }\\n```\\n\\n**Python**\\n```py\\n    def countPrefixes(self, words, s):\\n        return sum(map(s.startswith, words))\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```java\\n    public int countPrefixes(String[] words, String s) {\\n        int res = 0;\\n        for (String w : words)\\n            if (s.startsWith(w))\\n                res++;\\n        return res;\\n    }\\n```\n```cpp\\n    int countPrefixes(vector<string>& words, string s) {\\n        int res = 0;\\n        for (auto& w : words)\\n            res += s.find(w) < 1;\\n        return res; \\n    }\\n```\n```cpp\\n    int countPrefixes(vector<string>& words, string s) {\\n        int res = 0;\\n        for (auto& w : words)\\n            res += !s.compare(0, w.size(), w);\\n        return res;\\n    }\\n```\n```py\\n    def countPrefixes(self, words, s):\\n        return sum(map(s.startswith, words))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1994746,
                "title": "c-easy-o-nxs-solution-string",
                "content": "```\\nclass Solution {\\npublic:\\n    //iterate over each words[i] and take the sub-string str from s of size equals to words[i].\\n    //and compare str with words[i] if both are equal increase count by 1.\\n    int countPrefixes(vector<string>& words, string s) \\n    {\\n        int count=0;\\n        for(auto it: words)\\n        {\\n            string str = s.substr(0, it.size());\\n            if(str == it) count++;            \\n        }\\n        return count;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    //iterate over each words[i] and take the sub-string str from s of size equals to words[i].\\n    //and compare str with words[i] if both are equal increase count by 1.\\n    int countPrefixes(vector<string>& words, string s) \\n    {\\n        int count=0;\\n        for(auto it: words)\\n        {\\n            string str = s.substr(0, it.size());\\n            if(str == it) count++;            \\n        }\\n        return count;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1997418,
                "title": "java-1-liner",
                "content": "```java\\npublic int countPrefixes(String[] words, String s) {\\n        return (int) Arrays.stream(words).filter(s::startsWith).count();\\n    }\\n```\\n\\nMy repositories with leetcode problems solving - [Java](https://github.com/FLlGHT/algorithms/tree/master/j-algorithms/src/main/java),  [C++](https://github.com/FLlGHT/algorithms/tree/master/c-algorithms/src/main/c%2B%2B)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\npublic int countPrefixes(String[] words, String s) {\\n        return (int) Arrays.stream(words).filter(s::startsWith).count();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2076295,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if (s[:len(i)]==i):\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if (s[:len(i)]==i):\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994712,
                "title": "c-easy-to-understand-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) \\n    {\\n        int counter = 0;\\n        \\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(words[i] == s.substr(0,words[i].size()))  \\n                counter++;\\n        }\\n\\n        return counter;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) \\n    {\\n        int counter = 0;\\n        \\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(words[i] == s.substr(0,words[i].size()))  \\n                counter++;\\n        }\\n\\n        return counter;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1999377,
                "title": "count-if",
                "content": "**C++**\\n```cpp\\nint countPrefixes(vector<string>& words, string s) {\\n    return count_if(begin(words), end(words), [&](const auto &w){ return s.compare(0, w.size(), w) == 0; });\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nint countPrefixes(vector<string>& words, string s) {\\n    return count_if(begin(words), end(words), [&](const auto &w){ return s.compare(0, w.size(), w) == 0; });\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994767,
                "title": "2-lines-c-java",
                "content": "Apply **find()** in case of c++ and **indexof()** in case of java on every word and check if return position is 0.\\nReturn the count of such strings.\\n# C++\\n    int countPrefixes(vector<string>& words, string s, int cnt=0){\\n        for(auto i:words) if(s.find(i)==0) cnt++;\\n        return cnt;\\n    }\\n\\t\\n# Java\\n    public int countPrefixes(String[] words, String s) {\\n        int cnt=0;\\n        for(var i:words) if(s.indexOf(i)==0) cnt++;\\n        return cnt;\\n    }",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "Apply **find()** in case of c++ and **indexof()** in case of java on every word and check if return position is 0.\\nReturn the count of such strings.\\n# C++\\n    int countPrefixes(vector<string>& words, string s, int cnt=0){\\n        for(auto i:words) if(s.find(i)==0) cnt++;\\n        return cnt;\\n    }\\n\\t\\n# Java\\n    public int countPrefixes(String[] words, String s) {\\n        int cnt=0;\\n        for(var i:words) if(s.indexOf(i)==0) cnt++;\\n        return cnt;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1994720,
                "title": "c-basic-string-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int cnt = 0;\\n        int i, j;\\n        for(i=0; i<words.size(); i++){\\n            j = 0;\\n            while(j< words[i].size()){\\n                if(words[i][j] != s[j])\\n                    break;\\n                j++;\\n            }\\n            if(j == words[i].size())\\n                cnt++;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int cnt = 0;\\n        int i, j;\\n        for(i=0; i<words.size(); i++){\\n            j = 0;\\n            while(j< words[i].size()){\\n                if(words[i][j] != s[j])\\n                    break;\\n                j++;\\n            }\\n            if(j == words[i].size())\\n                cnt++;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3003590,
                "title": "python-simple-solution",
                "content": "# Approach\\nCheck for each word if is prefix of s.\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        res = 0\\n\\n        for word in words:\\n            if s.startswith(word):\\n                res += 1\\n\\n        return res\\n```\\n\\nLike it? Please upvote!",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        res = 0\\n\\n        for word in words:\\n            if s.startswith(word):\\n                res += 1\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2726605,
                "title": "java-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\n        public int countPrefixes(String[] words, String s) {\\n        \\n        int result = 0;\\n        for (int i=0; i<=s.length(); i++) {\\n            String x = s.substring(0, i);\\n            for (int j = 0; j<words.length; j++) {\\n                if (x.equals(words[j]))\\n                    result++;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n        public int countPrefixes(String[] words, String s) {\\n        \\n        int result = 0;\\n        for (int i=0; i<=s.length(); i++) {\\n            String x = s.substring(0, i);\\n            for (int j = 0; j<words.length; j++) {\\n                if (x.equals(words[j]))\\n                    result++;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2461131,
                "title": "3-different-fastest-approaches-with-javascript-including-one-liner",
                "content": "// approach 1 \\n\\n```\\nvar countPrefixes = function(words, s) {\\n     let counter = 0\\n     for (let i = 0; i < words.length; i++) {\\n         if (words[i]) === s.slice(0,words[i].length)) {\\n            counter++\\n        }\\n     }\\n    return counter\\n};\\n```\\n\\n// one liner approach - 2\\n\\n```\\nvar countPrefixes = function(words, s) {\\n    return words.filter((word) => word === s.slice(0,word.length)).length;\\n};\\n```\\n\\n// approach 3\\n\\n```\\nvar countPrefixes = function(words, s) {\\n    return words.filter(data=> s.indexOf(data) == 0).length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {\\n     let counter = 0\\n     for (let i = 0; i < words.length; i++) {\\n         if (words[i]) === s.slice(0,words[i].length)) {\\n            counter++\\n        }\\n     }\\n    return counter\\n};\\n```\n```\\nvar countPrefixes = function(words, s) {\\n    return words.filter((word) => word === s.slice(0,word.length)).length;\\n};\\n```\n```\\nvar countPrefixes = function(words, s) {\\n    return words.filter(data=> s.indexOf(data) == 0).length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2084421,
                "title": "straightforward-javascript-solution-faster-than-96-67",
                "content": "```\\nvar countPrefixes = function(words, s) {\\n    let count = 0;\\n    for (let word of words) {\\n        if (s.startsWith(word)) count++\\n    } return count;\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/9ebdaad0-0ac6-40e8-98da-26c37a70fab5_1653758537.70002.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {\\n    let count = 0;\\n    for (let word of words) {\\n        if (s.startsWith(word)) count++\\n    } return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2008421,
                "title": "js-easiest-way",
                "content": "```\\nvar countPrefixes = function(words, s) {\\n  \\n    let cont = 0;\\n    \\n    for(i = 0; i < words.length; i++){\\n        for(j = 1; j <= s.length; j++){\\n            if(words[i] == s.slice(0, j)){\\n                cont++;\\n            }\\n        }        \\n    }\\n     return cont;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {\\n  \\n    let cont = 0;\\n    \\n    for(i = 0; i < words.length; i++){\\n        for(j = 1; j <= s.length; j++){\\n            if(words[i] == s.slice(0, j)){\\n                cont++;\\n            }\\n        }        \\n    }\\n     return cont;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994686,
                "title": "python-straightforward-with-startswith",
                "content": "```\\ndef countPrefixes(self, words: List[str], s: str) -> int:\\n\\n    c = 0\\n    for w in words:\\n        if s.startswith(w):\\n            c += 1\\n\\n    return c\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef countPrefixes(self, words: List[str], s: str) -> int:\\n\\n    c = 0\\n    for w in words:\\n        if s.startswith(w):\\n            c += 1\\n\\n    return c\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3955799,
                "title": "java-100-beats-2-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for (String i : words)\\n            if (s.startsWith(i)) count++;\\n        return count;\\n\\n\\n//                          Another solution\\n\\n        // int count = 0;\\n        // int low = 0;\\n        // for(int i=1; i<=s.length(); i++){\\n        //    for(int j=0; j<words.length; j++){\\n        //        if(words[j].equals(s.substring(low,i))){\\n        //           count++;\\n        //        } \\n        //    }\\n        // }\\n        // return count;\\n    } \\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for (String i : words)\\n            if (s.startsWith(i)) count++;\\n        return count;\\n\\n\\n//                          Another solution\\n\\n        // int count = 0;\\n        // int low = 0;\\n        // for(int i=1; i<=s.length(); i++){\\n        //    for(int j=0; j<words.length; j++){\\n        //        if(words[j].equals(s.substring(low,i))){\\n        //           count++;\\n        //        } \\n        //    }\\n        // }\\n        // return count;\\n    } \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994877,
                "title": "c-simple-solution-using-substr",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int n = words.size();\\n        int cnt = 0;\\n        for(int i=0; i<n; i++) {\\n            string str = words[i];\\n            if(str == s.substr(0, str.size())) cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int n = words.size();\\n        int cnt = 0;\\n        for(int i=0; i<n; i++) {\\n            string str = words[i];\\n            if(str == s.substr(0, str.size())) cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994683,
                "title": "java-easy-appraoch",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        for(int k = 0; k < words.length; k++){\\n            if(words[k].length() > s.length()){\\n                continue;\\n            }\\n            \\n            while(i < words[k].length() && words[k].charAt(i) == s.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            if(i == words[k].length()){\\n                count++;\\n            }\\n            i = 0;\\n            j = 0;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        for(int k = 0; k < words.length; k++){\\n            if(words[k].length() > s.length()){\\n                continue;\\n            }\\n            \\n            while(i < words[k].length() && words[k].charAt(i) == s.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            if(i == words[k].length()){\\n                count++;\\n            }\\n            i = 0;\\n            j = 0;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994652,
                "title": "best-solution-using-set-easy-to-understand",
                "content": "Approach\\nStep 1 : Define a map and empty stirng\\nStep2 : insert prefixes in map\\nStep3 : check how many array of words element is present in map\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        unordered_set<string> mp;\\n        string st = \"\";\\n        for(int i=0;i<s.length();i++){\\n            st += s[i];\\n            mp.insert(st);\\n        }\\n        int k=0;\\n        for(auto it:words){\\n            if(mp.count(it)){\\n                k++;\\n            }\\n        }\\n        return k;\\n    }\\n};\\n```\\n\\n# ****PLEASE UPVOTE",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        unordered_set<string> mp;\\n        string st = \"\";\\n        for(int i=0;i<s.length();i++){\\n            st += s[i];\\n            mp.insert(st);\\n        }\\n        int k=0;\\n        for(auto it:words){\\n            if(mp.count(it)){\\n                k++;\\n            }\\n        }\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2864115,
                "title": "c-3-line-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\t//time:O(n), space: O(1)\\n\\t\\tint countPrefixes(vector<string>& words, string s) {\\n\\t\\t\\tint count = 0;\\n\\t\\t\\tfor(auto wd : words)\\n\\t\\t\\t\\tif(s.find(wd) < 1) count++; //if first occurrence of sub-string is in the specified string\\n\\t\\t\\treturn count;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\t//time:O(n), space: O(1)\\n\\t\\tint countPrefixes(vector<string>& words, string s) {\\n\\t\\t\\tint count = 0;\\n\\t\\t\\tfor(auto wd : words)\\n\\t\\t\\t\\tif(s.find(wd) < 1) count++; //if first occurrence of sub-string is in the specified string\\n\\t\\t\\treturn count;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3583196,
                "title": "one-line-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n       return sum(1 for x in words if s.startswith(x))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n       return sum(1 for x in words if s.startswith(x))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2965007,
                "title": "python3-code",
                "content": "# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return len([word for word in words if s.startswith(word)])\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/7ded423d-5651-41aa-8a7e-b8343efb856e_1672271463.1473987.png)\\n![image.png](https://assets.leetcode.com/users/images/65605e1b-564a-4ea3-8bf0-acad0d5862ea_1672271490.074425.png)",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return len([word for word in words if s.startswith(word)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2938964,
                "title": "easy-and-fast-c-solution",
                "content": "# Approach\\nUsing **s.find(words[i])** function which returns the index of words[i] if it is present in the string s , and to check whether words[i] occurs as a prefix use **s.find(words[i])==0**  ( since prefix always occurs at index 0).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n      int countPrefix = 0;\\n\\n      for(int i=0;i<words.size();++i){\\n          if(s.find(words[i])!=string::npos && s.find(words[i])==0){\\n              countPrefix++;\\n          }\\n      }  \\n      return countPrefix;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n      int countPrefix = 0;\\n\\n      for(int i=0;i<words.size();++i){\\n          if(s.find(words[i])!=string::npos && s.find(words[i])==0){\\n              countPrefix++;\\n          }\\n      }  \\n      return countPrefix;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2768430,
                "title": "easy-o-n-maintain-a-set",
                "content": "We maintian a set called seen and add all the prefixes in the set and then simply check if the word in word list is present in the set or not\\n\\n***Leave an upvote if this helps!!!***\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        seen=set()\\n        count=0\\n        for i in range(1,len(s)+1):\\n            seen.add(s[:i])\\n        for i in words:\\n            if i in seen:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        seen=set()\\n        count=0\\n        for i in range(1,len(s)+1):\\n            seen.add(s[:i])\\n        for i in words:\\n            if i in seen:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2048968,
                "title": "easy-python-solution",
                "content": "```\\ndef countPrefixes(self, words: List[str], s: str) -> int:\\n        c=0\\n        for i in words:\\n            l=len(i)\\n            if i==s[:l]:\\n                c+=1\\n        return c\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef countPrefixes(self, words: List[str], s: str) -> int:\\n        c=0\\n        for i in words:\\n            l=len(i)\\n            if i==s[:l]:\\n                c+=1\\n        return c\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1995252,
                "title": "c-online-with-std-count-if-and-string-rfind",
                "content": "This [stackover flow post](https://stackoverflow.com/questions/1878001/how-do-i-check-if-a-c-stdstring-starts-with-a-certain-string-and-convert-a) descrives how to you ```string::rfind``` to implement ```startsWith```, which leads to following over all code to solve to problem.\\n\\n```\\nint countPrefixes(const vector<string>& ws, const string& s) {\\n    return count_if(begin(ws), end(ws), [&](const string& w) { return s.rfind(w, 0) == 0; });\\n}\\n```\\n\\nOne might was well could use ```string::compare``` to solve the problem as well:\\n\\n```\\nint countPrefixes(const vector<string>& ws, const string& s) {\\n    return count_if(begin(ws), end(ws), [&](const string& w) {\\n        return s.compare(0, size(w), w) == 0;\\n    });\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```string::rfind```\n```startsWith```\n```\\nint countPrefixes(const vector<string>& ws, const string& s) {\\n    return count_if(begin(ws), end(ws), [&](const string& w) { return s.rfind(w, 0) == 0; });\\n}\\n```\n```string::compare```\n```\\nint countPrefixes(const vector<string>& ws, const string& s) {\\n    return count_if(begin(ws), end(ws), [&](const string& w) {\\n        return s.compare(0, size(w), w) == 0;\\n    });\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995152,
                "title": "c-5-lines-code-very-easy-o-n-solution",
                "content": "```\\nint countPrefixes(vector<string>& words, string s) {\\n       int c=0;\\n       for(string str:words){\\n            int len=str.length();\\n           string subs=s.substr(0,len);\\n           if(str==subs){\\n                c++;\\n           }\\n       } \\n       return c;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Iterator"
                ],
                "code": "```\\nint countPrefixes(vector<string>& words, string s) {\\n       int c=0;\\n       for(string str:words){\\n            int len=str.length();\\n           string subs=s.substr(0,len);\\n           if(str==subs){\\n                c++;\\n           }\\n       } \\n       return c;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994752,
                "title": "java",
                "content": "int ans=0;\\n        HashMap<String,Integer> l=new HashMap<>();\\n        for(String str:words)\\n            l.put(str,l.getOrDefault(str,0)+1);\\n        for(int i=0;i<=s.length();i++)\\n        {\\n            String st=s.substring(0,i);\\n            if(l.containsKey(st))\\n                ans=ans+l.get(st);\\n        }\\n        return ans;",
                "solutionTags": [
                    "Java"
                ],
                "code": "int ans=0;\\n        HashMap<String,Integer> l=new HashMap<>();\\n        for(String str:words)\\n            l.put(str,l.getOrDefault(str,0)+1);\\n        for(int i=0;i<=s.length();i++)\\n        {\\n            String st=s.substring(0,i);\\n            if(l.containsKey(st))\\n                ans=ans+l.get(st);\\n        }\\n        return ans;",
                "codeTag": "Unknown"
            },
            {
                "id": 3827383,
                "title": "python-one-line-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return len([i for i in words if s.startswith(i)])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return len([i for i in words if s.startswith(i)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534504,
                "title": "simple-easy-100-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3450978,
                "title": "easy-to-understand",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n        if it starts with element present in array count++;\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3443668,
                "title": "simple-using-substr-c",
                "content": "`Please Upvote If you Like the Solution !!!`\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans = 0;\\n        for(auto &w : words) {\\n            int n = w.size();\\n            if(s.substr(0,n) == w) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans = 0;\\n        for(auto &w : words) {\\n            int n = w.size();\\n            if(s.substr(0,n) == w) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362962,
                "title": "simple-java-3-line-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for(int i =0; i<words.length; i++){\\n            if(s.startsWith(words[i])) count++;\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for(int i =0; i<words.length; i++){\\n            if(s.startsWith(words[i])) count++;\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3337621,
                "title": "esay-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        while(s.length()!=0){\\n        for(String y:words){\\n             if(y.equals(s))\\n             c++;\\n        }\\n        s=s.substring(0,s.length()-1); //Decreasing the length by 1\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        while(s.length()!=0){\\n        for(String y:words){\\n             if(y.equals(s))\\n             c++;\\n        }\\n        s=s.substring(0,s.length()-1); //Decreasing the length by 1\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3278881,
                "title": "c-easy-simple",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for (string word : words)\\n        {\\n            if(s.find(word) == 0) \\n            { \\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for (string word : words)\\n        {\\n            if(s.find(word) == 0) \\n            { \\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176731,
                "title": "simple-c-code-easy-beats-100",
                "content": "\\n\\nRuntime: Beats 100%\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c=0;\\n        for(auto j:words){\\n            int b=1;\\n            for(int i=0;i<j.size();i++){\\n                if(j[i]!=s[i]){\\n                    b=0;\\n                    break;\\n                }\\n            }\\n            if(b==1){\\n                    c++;\\n                }\\n        }\\n        return c;\\n    }\\n};\\n```\\nHope you liked the implementation of the code, if you like it feel free to upvote \\uD83D\\uDC4D",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c=0;\\n        for(auto j:words){\\n            int b=1;\\n            for(int i=0;i<j.size();i++){\\n                if(j[i]!=s[i]){\\n                    b=0;\\n                    break;\\n                }\\n            }\\n            if(b==1){\\n                    c++;\\n                }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174986,
                "title": "c-o-n-simple-approach-using-string-s-find-func",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n    int count = 0;\\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        if (s.find(words[i])==0)\\n        {\\n            count++;\\n        }\\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n    int count = 0;\\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        if (s.find(words[i])==0)\\n        {\\n            count++;\\n        }\\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2868501,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s)\\n    {\\n        string w = \"\" ;\\n        int count = 0 ;\\n        for(int i=0 ; i<words.size() ; i++)\\n        {\\n            w = words[i] ;\\n            int j ;\\n            for(j=0 ; j<w.size() ; j++)\\n            {\\n                if(w[j]!=s[j])\\n                {\\n                    break ;\\n                }\\n            }\\n            if(j==w.size())\\n            {\\n                count++ ;\\n            }\\n        }   \\n        return count ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s)\\n    {\\n        string w = \"\" ;\\n        int count = 0 ;\\n        for(int i=0 ; i<words.size() ; i++)\\n        {\\n            w = words[i] ;\\n            int j ;\\n            for(j=0 ; j<w.size() ; j++)\\n            {\\n                if(w[j]!=s[j])\\n                {\\n                    break ;\\n                }\\n            }\\n            if(j==w.size())\\n            {\\n                count++ ;\\n            }\\n        }   \\n        return count ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2701416,
                "title": "c-easy-approach-93-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) { \\n        int ans = 0;\\n        for(int i = 0 ; i<words.size() ; i++){\\n            string element = words[i];\\n            int len = element.length();\\n            \\n            for(int j = 0 ; j<len ; j++){\\n               \\n                if(element[j] != s[j]){\\n                    break;      \\n                }     \\n                if(j==len-1){\\n                    ans++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) { \\n        int ans = 0;\\n        for(int i = 0 ; i<words.size() ; i++){\\n            string element = words[i];\\n            int len = element.length();\\n            \\n            for(int j = 0 ; j<len ; j++){\\n               \\n                if(element[j] != s[j]){\\n                    break;      \\n                }     \\n                if(j==len-1){\\n                    ans++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2651729,
                "title": "startswith-in-java-java",
                "content": "```\\nif(you like)\\n\\tplease upvote;\\n```\\n![image.png](https://assets.leetcode.com/users/images/c46bfd5c-cd60-4a0f-a3af-d56e67ae236a_1664727810.0896583.png)\\n\\n# Java Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int cnt = 0;\\n        for(String str:words)        \\n        {\\n            if(s.startsWith(str) == true)\\n                cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nif(you like)\\n\\tplease upvote;\\n```\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int cnt = 0;\\n        for(String str:words)        \\n        {\\n            if(s.startsWith(str) == true)\\n                cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2649512,
                "title": "python-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef countPrefixes(self, words: List[str], s: str) -> int:\\n\\t\\t\\tres = 0\\n\\t\\t\\tfor word in words:\\n\\t\\t\\t\\tif s[:len(word)] == word: res += 1\\n\\t\\t\\treturn res",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef countPrefixes(self, words: List[str], s: str) -> int:\\n\\t\\t\\tres = 0\\n\\t\\t\\tfor word in words:\\n\\t\\t\\t\\tif s[:len(word)] == word: res += 1\\n\\t\\t\\treturn res",
                "codeTag": "Java"
            },
            {
                "id": 2566238,
                "title": "python-straight-forward-one-liner",
                "content": "Here is what I did:\\n\\n```python\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(s.startswith(word) for word in words)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(s.startswith(word) for word in words)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2229509,
                "title": "javascript-straightforward-solution-simple-understandable-fast",
                "content": "**Runtime: 68 ms, faster than 91.85% of JavaScript online submissions for Count Prefixes of a Given String.\\nMemory Usage: 43 MB, less than 40.00% of JavaScript online submissions for Count Prefixes of a Given String.**\\n\\n```\\nvar countPrefixes = function(words, s) {\\n    let count = 0\\n    for (i of words) {\\n        if (s.startsWith(i)) {\\n            count++\\n        }\\n    } \\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {\\n    let count = 0\\n    for (i of words) {\\n        if (s.startsWith(i)) {\\n            count++\\n        }\\n    } \\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2007119,
                "title": "c-linq-one-line",
                "content": "```\\n\\tpublic int CountPrefixes(string[] words, string s) \\n        => words.Count(w => s.StartsWith(w));    \\n```",
                "solutionTags": [],
                "code": "```\\n\\tpublic int CountPrefixes(string[] words, string s) \\n        => words.Count(w => s.StartsWith(w));    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1997642,
                "title": "rust-solutions",
                "content": "1. Simle use of `starts_with`:\\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words.iter().filter(|w| s.starts_with(w.as_str())).count() as _\\n    }\\n}\\n```\\n2. Slice comparison\\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words\\n            .iter()\\n            .filter(|w| w.len() <= s.len() && w.as_str() == &s[..w.len()])\\n            .count() as _\\n    }\\n}\\n```\\n3. Functional solution with `zip`:\\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words\\n            .iter()\\n            .filter(|w| w.len() <= s.len() && w.chars().zip(s.chars()).all(|(a, b)| a == b))\\n            .count() as _\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words.iter().filter(|w| s.starts_with(w.as_str())).count() as _\\n    }\\n}\\n```\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words\\n            .iter()\\n            .filter(|w| w.len() <= s.len() && w.as_str() == &s[..w.len()])\\n            .count() as _\\n    }\\n}\\n```\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words\\n            .iter()\\n            .filter(|w| w.len() <= s.len() && w.chars().zip(s.chars()).all(|(a, b)| a == b))\\n            .count() as _\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995303,
                "title": "c-very-easy-to-understand-solution-using-unordered-set",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        unordered_set<string> st;\\n        int size = s.size();\\n        for(int i = 0;i<size;i++){\\n            string temp = \"\";\\n            for(int j = 0;j<=i;j++){\\n                temp+=s[j];\\n            }\\n            st.insert(temp);\\n        }\\n        int ans = 0;\\n        for(int i = 0;i<words.size();i++){\\n            if(st.find(words[i])!=st.end())\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        unordered_set<string> st;\\n        int size = s.size();\\n        for(int i = 0;i<size;i++){\\n            string temp = \"\";\\n            for(int j = 0;j<=i;j++){\\n                temp+=s[j];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1994612,
                "title": "c-easy-to-understand-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c=0;\\n        for(auto word:words)\\n        {\\n                string str=word;\\n                int l=word.size();\\n                string s2=s.substr(0,l);\\n                if(s2==word)\\n                    c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c=0;\\n        for(auto word:words)\\n        {\\n                string str=word;\\n                int l=word.size();\\n                string s2=s.substr(0,l);\\n                if(s2==word)\\n                    c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994558,
                "title": "java-simple",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n    \\n       int preFixCount=0;\\n       for(String curr:words){\\n           int i=0;\\n           \\n           if(curr.length()>s.length())     // if current  string length greater than s length invalid prefix\\n           continue; \\n           int j;\\n           for(j=0;j<curr.length();j++,i++){\\n               if(curr.charAt(j)==s.charAt(i))\\n               continue;\\n               else \\n               break;\\n                   \\n           }\\n           if(j==curr.length())             // if all character matches than mark valid \\n           preFixCount++;\\n       }\\n     return preFixCount;     \\n    }\\n   \\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countPrefixes(String[] words, String s) {\\n    \\n       int preFixCount=0;\\n       for(String curr:words){\\n           int i=0;\\n           \\n           if(curr.length()>s.length())     // if current  string length greater than s length invalid prefix\\n           continue; \\n           int j;\\n           for(j=0;j<curr.length();j++,i++){\\n               if(curr.charAt(j)==s.charAt(i))\\n               continue;\\n               else \\n               break;\\n                   \\n           }",
                "codeTag": "Java"
            },
            {
                "id": 3972694,
                "title": "javascript-easy-one-line-solution",
                "content": "# Complexity\\n- Time complexity: O(n*m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function (words, s) {\\n  return words.filter((item) => s.startsWith(item)).length\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function (words, s) {\\n  return words.filter((item) => s.startsWith(item)).length\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3917786,
                "title": "go-easy",
                "content": "\\n\\n# Code\\n```\\nfunc countPrefixes(words []string, s string) int {\\n\\tvar count int\\n\\n\\tfor _, v := range words {\\n\\t\\tif strings.HasPrefix(s, v) {\\n\\t\\t\\tcount++\\n\\t\\t}\\n\\t}\\n\\n\\treturn count\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc countPrefixes(words []string, s string) int {\\n\\tvar count int\\n\\n\\tfor _, v := range words {\\n\\t\\tif strings.HasPrefix(s, v) {\\n\\t\\t\\tcount++\\n\\t\\t}\\n\\t}\\n\\n\\treturn count\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3297434,
                "title": "count-prefixes-of-a-given-string-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n*m)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int i, j, count=0;\\n        string str=\"\";\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            str += s[i];\\n            for(j=0 ; j<words.size() ; j++)\\n            {\\n                if(str==words[j])\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int i, j, count=0;\\n        string str=\"\";\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            str += s[i];\\n            for(j=0 ; j<words.size() ; j++)\\n            {\\n                if(str==words[j])\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249714,
                "title": "pyhton3-oneliner-using-startswith",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0\\n        for i in words:\\n            if s.startswith(i):\\n                count += 1\\n        return count\\n\\n        #One Liner\\n\\n        return sum(1 for i in words if s.startswith(i))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0\\n        for i in words:\\n            if s.startswith(i):\\n                count += 1\\n        return count\\n\\n        #One Liner\\n\\n        return sum(1 for i in words if s.startswith(i))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3149760,
                "title": "pooping-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nPoop the loop\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        c = 0\\n        for i in words:\\n            if i in s[:len(i)]:\\n                c+=1\\n        return c \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        c = 0\\n        for i in words:\\n            if i in s[:len(i)]:\\n                c+=1\\n        return c \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114743,
                "title": "count-prefixes-of-a-given-string",
                "content": "```\\nint count=0;\\n        for(auto it:words){\\n            string str=s.substr(0,it.size());\\n            if(str==it)\\n            count++;\\n        }\\n        \\n        return count;\\n\\t\\t\\n```",
                "solutionTags": [
                    "C",
                    "Iterator"
                ],
                "code": "```\\nint count=0;\\n        for(auto it:words){\\n            string str=s.substr(0,it.size());\\n            if(str==it)\\n            count++;\\n        }\\n        \\n        return count;\\n\\t\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2804300,
                "title": "count-prefixes-of-a-given-string-solution-java",
                "content": "class Solution {\\n  public int countPrefixes(String[] words, String s) {\\n    return (int) Arrays.stream(words).filter(word -> s.startsWith(word)).count();\\n  }\\n}\\n",
                "solutionTags": [
                    "Array",
                    "String"
                ],
                "code": "class Solution {\\n  public int countPrefixes(String[] words, String s) {\\n    return (int) Arrays.stream(words).filter(word -> s.startsWith(word)).count();\\n  }",
                "codeTag": "Java"
            },
            {
                "id": 2672445,
                "title": "java-solution-startswith-or-indexof",
                "content": "### Please Upvote :D\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        \\n        for (String str : words) {\\n            // if (s.indexOf(str) == 0) count++;\\n            if (s.startsWith(str)) count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n// TC: O(n)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        \\n        for (String str : words) {\\n            // if (s.indexOf(str) == 0) count++;\\n            if (s.startsWith(str)) count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n// TC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2651727,
                "title": "c-short-97-faster-than-all",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n     int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(auto word:words){\\n            bool isPrefix = true;\\n            for(int i=0; i<word.length(); i++){\\n                if(word[i] != s[i]){\\n                    isPrefix = false;\\n                    break;\\n                }\\n            }\\n            if(isPrefix) count++;\\n        }\\n    return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(auto word:words){\\n            bool isPrefix = true;\\n            for(int i=0; i<word.length(); i++){\\n                if(word[i] != s[i]){\\n                    isPrefix = false;\\n                    break;\\n                }\\n            }\\n            if(isPrefix) count++;\\n        }\\n    return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2626764,
                "title": "python-o-n",
                "content": "Time Complexcity O(N)\\nspace Complexcity O(1)\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for word in words:\\n            n=len(word)\\n            if s[0:n]==word:\\n                count+=1\\n        return count\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for word in words:\\n            n=len(word)\\n            if s[0:n]==word:\\n                count+=1\\n        return count\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2612849,
                "title": "java-soln",
                "content": "class Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        \\n        int count =0;\\n        for(int i=0; i<words.length; i++){\\n         if(s.startsWith(words[i])){\\n             count++;\\n         }\\n        } \\n        return count;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        \\n        int count =0;\\n        for(int i=0; i<words.length; i++){\\n         if(s.startsWith(words[i])){\\n             count++;\\n         }",
                "codeTag": "Java"
            },
            {
                "id": 2601418,
                "title": "javascript-easy-solution",
                "content": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i=0; i<words.length; i++) {\\n        if(words[i] === s.slice(0, words[i].length)) {\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i=0; i<words.length; i++) {\\n        if(words[i] === s.slice(0, words[i].length)) {\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2561291,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ct=0;\\n        for(string&word:words){\\n          bool flag=true;\\n          if(word.length()<=s.length()){\\n             for(int i=0; i<min(word.length(),s.length()); ++i){\\n                if(word[i]!=s[i]){\\n                   flag=false;\\n                   break;\\n                }\\n             }\\n            flag?ct++:ct+=0;\\n          }\\n        }\\n        return ct;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ct=0;\\n        for(string&word:words){\\n          bool flag=true;\\n          if(word.length()<=s.length()){\\n             for(int i=0; i<min(word.length(),s.length()); ++i){\\n                if(word[i]!=s[i]){\\n                   flag=false;\\n                   break;\\n                }\\n             }\\n            flag?ct++:ct+=0;\\n          }\\n        }\\n        return ct;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2545761,
                "title": "count-prefixes-of-a-given-string",
                "content": "python3 sol\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count= 0 \\n        for i in words:\\n            if i ==s:\\n                count+=1\\n            else:\\n                if i ==s[:len(i)]:\\n                    count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count= 0 \\n        for i in words:\\n            if i ==s:\\n                count+=1\\n            else:\\n                if i ==s[:len(i)]:\\n                    count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2502759,
                "title": "easy-fast-short-solution",
                "content": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```\\n```\\n        int count = 0;\\n        for(String temp: words)\\n            if (s.indexOf(temp) == 0)\\n                count++;\\n        return count;",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2500078,
                "title": "c-solution-count-prefixes-of-a-given-string",
                "content": "```\\nclass Solution {\\nprivate:\\n    int linear_search(vector<string>& words , string prefix){\\n        int count = 0;\\n        for(int i = 0 ; i < words.size() ; i++){\\n            if(prefix == words[i])\\n                count++;\\n        }\\n        return count;\\n    }\\n    \\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        vector<string> prefix;\\n        int count = 0;\\n        \\n        for(int i = 1 ; i <= s.length() ; i++){\\n            prefix.push_back(s.substr(0,i));\\n        }\\n        \\n        \\n        for(int i = 0 ; i < prefix.size() ; i++){\\n            count = count + linear_search(words , prefix[i]);\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    int linear_search(vector<string>& words , string prefix){\\n        int count = 0;\\n        for(int i = 0 ; i < words.size() ; i++){\\n            if(prefix == words[i])\\n                count++;\\n        }\\n        return count;\\n    }\\n    \\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        vector<string> prefix;\\n        int count = 0;\\n        \\n        for(int i = 1 ; i <= s.length() ; i++){\\n            prefix.push_back(s.substr(0,i));\\n        }\\n        \\n        \\n        for(int i = 0 ; i < prefix.size() ; i++){\\n            count = count + linear_search(words , prefix[i]);\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2498493,
                "title": "java-solution-easy-100",
                "content": "public static int prefixcount(String[] words, String s) {\\n        int out = 0;\\n\\n        for (int i = 0; i < words.length; i++) {\\n            if (s.startsWith(words[i])) {\\n                out++;\\n            }\\n        }\\n        return out;",
                "solutionTags": [],
                "code": "public static int prefixcount(String[] words, String s) {\\n        int out = 0;\\n\\n        for (int i = 0; i < words.length; i++) {\\n            if (s.startsWith(words[i])) {\\n                out++;\\n            }\\n        }\\n        return out;",
                "codeTag": "Unknown"
            },
            {
                "id": 2488556,
                "title": "runtime-22-ms-faster-than-18-45-of-c-online-submissions-for-count-prefixes-of-a-given-string",
                "content": "\\n    int count = 0;\\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        if (s.find(words[i])==0)\\n        {\\n            count++;\\n        }\\n    }\\n    return count;\\n}\\n//   upvote if you like\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n    int count = 0;\\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        if (s.find(words[i])==0)\\n        {\\n            count++;\\n        }\\n    }\\n    return count;\\n}\\n//   upvote if you like\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2471556,
                "title": "java-solution-0ms-100-faster-easy-to-understand-linear-search-o-n",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] arr, String s) {\\n        int cnt = 0;\\n        for (String str : arr) {\\n            if (s.startsWith(str)) cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] arr, String s) {\\n        int cnt = 0;\\n        for (String str : arr) {\\n            if (s.startsWith(str)) cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2402405,
                "title": "easy-and-clear-solution-python3",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for word in words:\\n            if word == s[:len(word)]:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for word in words:\\n            if word == s[:len(word)]:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2346554,
                "title": "c-brute-force-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        string sk;\\n        bool istrue;\\n        int count=0;\\n        for(int i=0;i<words.size();i++){\\n            sk=words[i];\\n            for(int j=0;j<sk.length();j++){\\n                if(sk[j]!=s[j]){\\n                    istrue=false; \\n                    break;\\n                }\\n                else{\\n                     istrue=true;\\n                }\\n            }\\n            \\n            if(istrue==true){\\n                cout<<sk<<endl;\\n                count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        string sk;\\n        bool istrue;\\n        int count=0;\\n        for(int i=0;i<words.size();i++){\\n            sk=words[i];\\n            for(int j=0;j<sk.length();j++){\\n                if(sk[j]!=s[j]){\\n                    istrue=false; \\n                    break;\\n                }\\n                else{\\n                     istrue=true;\\n                }\\n            }\\n            \\n            if(istrue==true){\\n                cout<<sk<<endl;\\n                count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2326109,
                "title": "one-liner-python",
                "content": "```\\nreturn sum([1 for word in words if s.startswith(word)])\\n```\\n**Please upvote if you want to see more one liners and simple solutions**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nreturn sum([1 for word in words if s.startswith(word)])\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2308148,
                "title": "c-solution-easy-to-understand-one-line",
                "content": "```C#\\npublic class Solution {\\n    public int CountPrefixes(string[] words, string s) => words.Count(x => s.StartsWith(x));\\n}\\n```",
                "solutionTags": [],
                "code": "```C#\\npublic class Solution {\\n    public int CountPrefixes(string[] words, string s) => words.Count(x => s.StartsWith(x));\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2303504,
                "title": "cpp-trie-solution",
                "content": "```\\n class Trie{\\n        public:\\n        char c;\\n        Trie* ch[26];\\n        int we;\\n        Trie(char d){\\n            c=d;\\n            for(int i=0;i<26;i++) ch[i]=NULL;\\n            we=0;\\n        }\\n    };\\n    Trie* r=new Trie(\\'0\\');\\n    \\n    void add(string s){\\n        Trie* h=r;\\n        for(int i=0;i<s.size();i++){\\n            int ind=s[i]-\\'a\\';\\n            h->ch[ind]=new Trie(s[i]);\\n            h=h->ch[ind];\\n        }\\n        h->we=1;\\n    }\\n    \\n    bool check(string s){\\n        Trie* h=r;\\n        for(int i=0;i<s.size();i++){\\n            int ind=s[i]-\\'a\\';\\n            if(h->ch[ind]==NULL) return 0;\\n            h=h->ch[ind];\\n        }\\n        return 1;\\n    }\\n    int countPrefixes(vector<string>& words, string s) {\\n        add(s);\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            if(check(words[i])){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "Trie"
                ],
                "code": "```\\n class Trie{\\n        public:\\n        char c;\\n        Trie* ch[26];\\n        int we;\\n        Trie(char d){\\n            c=d;\\n            for(int i=0;i<26;i++) ch[i]=NULL;\\n            we=0;\\n        }\\n    };\\n    Trie* r=new Trie(\\'0\\');\\n    \\n    void add(string s){\\n        Trie* h=r;\\n        for(int i=0;i<s.size();i++){\\n            int ind=s[i]-\\'a\\';\\n            h->ch[ind]=new Trie(s[i]);\\n            h=h->ch[ind];\\n        }\\n        h->we=1;\\n    }\\n    \\n    bool check(string s){\\n        Trie* h=r;\\n        for(int i=0;i<s.size();i++){\\n            int ind=s[i]-\\'a\\';\\n            if(h->ch[ind]==NULL) return 0;\\n            h=h->ch[ind];\\n        }\\n        return 1;\\n    }\\n    int countPrefixes(vector<string>& words, string s) {\\n        add(s);\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            if(check(words[i])){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2200749,
                "title": "python-straightforward",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        countPrefixe = 0\\n        for word in words:\\n            if word in s and word == s[:len(word)]:\\n                countPrefixe += 1\\n        return countPrefixe\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        countPrefixe = 0\\n        for word in words:\\n            if word in s and word == s[:len(word)]:\\n                countPrefixe += 1\\n        return countPrefixe\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2197461,
                "title": "javascript-solution-with-foreach",
                "content": "```\\nvar countPrefixes = function(words, s) {    \\n\\n    let count = 0; \\n\\t\\n    words.forEach((word) => {\\n        if( s.startsWith(word) ) \\n\\t\\t\\tcount++;\\n    });\\n    \\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {    \\n\\n    let count = 0; \\n\\t\\n    words.forEach((word) => {\\n        if( s.startsWith(word) ) \\n\\t\\t\\tcount++;\\n    });\\n    \\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2191967,
                "title": "my-easy-to-understand-2ms-java-code",
                "content": "```\\nclass Solution \\n{\\n    public int countPrefixes(String[] words, String s) \\n    {\\n        int c=0;\\n        for(String i:words)\\n        {\\n            if(s.startsWith(i))\\n            {\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution \\n{\\n    public int countPrefixes(String[] words, String s) \\n    {\\n        int c=0;\\n        for(String i:words)\\n        {\\n            if(s.startsWith(i))\\n            {\\n                c++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2181067,
                "title": "python-trie-for-fast-queries",
                "content": "Prefix Tree aka Trie might be an overkill for this easy problem, but when you are not allowed to use startswith and need to reduce time complexity of multiple queries it\\'s a good option - linear scan of path to get sum of all words on the path.\\n\\n```\\nclass Node(object):\\n    def __init__(self):\\n        self.children = {}\\n        self.is_word = False\\n        self.count = 0\\n\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        root = Node()\\n        \\n        # build a trie\\n        for w in words:\\n            node = root\\n            for c in w:\\n                if c not in node.children:\\n                    node.children[c] = Node()\\n                node = node.children[c]\\n            node.count = 1 if not node.is_word else node.count + 1\\n            node.is_word = True\\n        \\n        # count prefix-words in s\\n        node = root\\n\\n        res = 0\\n        for c in s:\\n            if c in node.children:\\n                node = node.children[c]\\n                res += node.count if node.is_word else 0\\n            else:\\n                break\\n                \\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Trie"
                ],
                "code": "```\\nclass Node(object):\\n    def __init__(self):\\n        self.children = {}\\n        self.is_word = False\\n        self.count = 0\\n\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        root = Node()\\n        \\n        # build a trie\\n        for w in words:\\n            node = root\\n            for c in w:\\n                if c not in node.children:\\n                    node.children[c] = Node()\\n                node = node.children[c]\\n            node.count = 1 if not node.is_word else node.count + 1\\n            node.is_word = True\\n        \\n        # count prefix-words in s\\n        node = root\\n\\n        res = 0\\n        for c in s:\\n            if c in node.children:\\n                node = node.children[c]\\n                res += node.count if node.is_word else 0\\n            else:\\n                break\\n                \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2147734,
                "title": "c-simple-solution",
                "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans=0;\\n        for(auto w : words)\\n        {\\n            int count=0;\\n            for(int i=0;i<w.length();i++)\\n            {\\n               if(w[i]==s[i])\\n                   count++; \\n            }\\n            if(count==w.length())\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans=0;\\n        for(auto w : words)\\n        {\\n            int count=0;\\n            for(int i=0;i<w.length();i++)\\n            {\\n               if(w[i]==s[i])\\n                   count++; \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2143292,
                "title": "c-very-easy-solution-using-sets",
                "content": "```\\nint countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        set<string>ss;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            ss.insert(s.substr(0,i+1));\\n        }\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(ss.find(words[i])!=ss.end())\\n                count++;\\n        }\\n        return count;\\n    }",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nint countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        set<string>ss;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            ss.insert(s.substr(0,i+1));\\n        }\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(ss.find(words[i])!=ss.end())\\n                count++;\\n        }\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2140038,
                "title": "c-easy-traversal",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n       unordered_map<string,int>harsh;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            harsh[s.substr(0,i+1)]++;\\n        }\\n        int cnt=0;\\n        for(auto val:words)\\n        {\\n            if(harsh.find(val) != harsh.end())\\n            {\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n       unordered_map<string,int>harsh;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            harsh[s.substr(0,i+1)]++;\\n        }\\n        int cnt=0;\\n        for(auto val:words)\\n        {\\n            if(harsh.find(val) != harsh.end())\\n            {\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2132698,
                "title": "easy-java-solution-faster-100",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int sum = 0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])){\\n                sum++;\\n            }\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int sum = 0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])){\\n                sum++;\\n            }\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2098364,
                "title": "python-easy-beginer-friendly",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, a: List[str], s: str) -> int:\\n        r=0\\n        for i in a:\\n            if len(i)<=len(s) and i==s[:len(i)]:\\n                r+=1\\n        return r\\n```\\n![image](https://assets.leetcode.com/users/images/c570329e-69a5-4674-aff5-3562d8a29ea8_1654088247.904313.jpeg)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, a: List[str], s: str) -> int:\\n        r=0\\n        for i in a:\\n            if len(i)<=len(s) and i==s[:len(i)]:\\n                r+=1\\n        return r\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2070262,
                "title": "fastest-java-solution-0ms",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c = 0;\\n        for(String word:words)\\n            if(s.startsWith(word))\\n                c++;\\n        return c;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c = 0;\\n        for(String word:words)\\n            if(s.startsWith(word))\\n                c++;\\n        return c;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2048287,
                "title": "python3-two-1-liners",
                "content": "class Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        return sum(word == s[:len(word)] for word in words)\\n\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n\\t\\n        return sum(s.find(word) == 0 for word in words)",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        return sum(word == s[:len(word)] for word in words)\\n\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n\\t\\n        return sum(s.find(word) == 0 for word in words)",
                "codeTag": "Java"
            },
            {
                "id": 2037971,
                "title": "c-easy-solution",
                "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& w, string s) {\\n        int res=0;\\n        for(int i=0;i<w.size();i++)\\n        {\\n            int flag=0;\\n            for(int j=0;j<w[i].size();j++)\\n            {\\n                if(w[i][j]!=s[j])\\n                    flag=1;\\n            }\\n            if (flag==0)\\n                res++;\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& w, string s) {\\n        int res=0;\\n        for(int i=0;i<w.size();i++)\\n        {\\n            int flag=0;\\n            for(int j=0;j<w[i].size();j++)\\n            {\\n                if(w[i][j]!=s[j])\\n                    flag=1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2022531,
                "title": "python3-one-line-solution",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum([1 for w in words if w == s[:len(w)]])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum([1 for w in words if w == s[:len(w)]])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2014637,
                "title": "3ms-beats-95-c-submissions-easytounderstand",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& a, string s) {\\n        int ans=0;\\n        int n=s.size();\\n        for(auto it:a){\\n            int m=it.size();\\n            if(m<=n){\\n                int f=1;\\n                int k=0;\\n                for(auto i:it)\\n                    if(i!=s[k++])\\n                        {\\n                            f=0;\\n                            break;\\n                        }\\n                if(f)ans++;\\n            }\\n        }\\n     return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& a, string s) {\\n        int ans=0;\\n        int n=s.size();\\n        for(auto it:a){\\n            int m=it.size();\\n            if(m<=n){\\n                int f=1;\\n                int k=0;\\n                for(auto i:it)\\n                    if(i!=s[k++])\\n                        {\\n                            f=0;\\n                            break;\\n                        }\\n                if(f)ans++;\\n            }\\n        }\\n     return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2013095,
                "title": "runtime-12-ms-c-solution",
                "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        string str=\"\";\\n        int count=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            str+=s[i];\\n            for(int j=0;j<words.size();j++)\\n            {\\n                if(words[j]==str)\\n                {\\n                    count++;\\n                }\\n                \\n            }\\n            \\n        }\\n        return count;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        string str=\"\";\\n        int count=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            str+=s[i];\\n            for(int j=0;j<words.size();j++)\\n            {\\n                if(words[j]==str)\\n                {\\n                    count++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2006744,
                "title": "c-efficient-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    bool contains(vector<string> vec, string & elem){\\n    bool result = false;\\n    if( find(vec.begin(), vec.end(), elem) != vec.end() )\\n    {\\n        result = true;\\n    }\\n    return result;\\n    }\\n    \\n    vector<string> vec;\\n    string temp=\"\";\\n    int c=0;\\n    int countPrefixes(vector<string>& words, string s) {\\n        for(int i=0;i<s.size();i++){\\n            temp+=s[i];\\n            vec.push_back(temp);\\n        }\\n        for(int i=0;i<words.size();i++){\\n            if(contains(vec,words[i])) c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool contains(vector<string> vec, string & elem){\\n    bool result = false;\\n    if( find(vec.begin(), vec.end(), elem) != vec.end() )\\n    {\\n        result = true;\\n    }\\n    return result;\\n    }\\n    \\n    vector<string> vec;\\n    string temp=\"\";\\n    int c=0;\\n    int countPrefixes(vector<string>& words, string s) {\\n        for(int i=0;i<s.size();i++){\\n            temp+=s[i];\\n            vec.push_back(temp);\\n        }\\n        for(int i=0;i<words.size();i++){\\n            if(contains(vec,words[i])) c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1998165,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        c=0\\n        for i in range(len(words)):\\n            if s.startswith(words[i]):\\n                    c+=1\\n        return c\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        c=0\\n        for i in range(len(words)):\\n            if s.startswith(words[i]):\\n                    c+=1\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1997765,
                "title": "c-using-substr",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans1 = 0;\\n        for(int i=0;i<=s.size();i++){\\n            string h = s.substr(0,i);\\n            int x = count(words.begin(),words.end(),h);\\n            if(x>0)    ans1+=x;\\n        }\\n        return ans1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans1 = 0;\\n        for(int i=0;i<=s.size();i++){\\n            string h = s.substr(0,i);\\n            int x = count(words.begin(),words.end(),h);\\n            if(x>0)    ans1+=x;\\n        }\\n        return ans1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1995903,
                "title": "go-golang-solution",
                "content": "```go\\nfunc countPrefixes(words []string, s string) int {\\n    ans := 0\\n    for _, word := range words {\\n        n := len(word)\\n        if n > len(s) { continue }\\n        if word == s[:n] { ans++ }\\n    }\\n    return ans\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc countPrefixes(words []string, s string) int {\\n    ans := 0\\n    for _, word := range words {\\n        n := len(word)\\n        if n > len(s) { continue }\\n        if word == s[:n] { ans++ }\\n    }\\n    return ans\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995794,
                "title": "easy-java-implementation",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        \\n        int count =0;\\n        \\n        for(String str : words){\\n \\xA0 \\xA0 \\xA0 \\xA0 if\\xA0(s.indexOf(str)==0) count++;\\n \\xA0 \\xA0 \\xA0 \\xA0}\\n \\xA0 \\xA0 \\xA0 \\xA0return count;\\n \\xA0 \\xA0}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        \\n        int count =0;\\n        \\n        for(String str : words){\\n \\xA0 \\xA0 \\xA0 \\xA0 if\\xA0(s.indexOf(str)==0) count++;\\n \\xA0 \\xA0 \\xA0 \\xA0}\\n \\xA0 \\xA0 \\xA0 \\xA0return count;\\n \\xA0 \\xA0}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1995491,
                "title": "c-3-lines-no-substr-copy-or-global-find",
                "content": "Use `string::compare` to avoid substring copy and whole string scanning.\\n```\\nint countPrefixes(vector<string>& words, string s) {\\n    return count_if(words.begin(), words.end(), [&](string &w) {\\n        return !s.compare(0, w.size(), w);\\n    });\\n}\\n```\\n\\nEven better if LeetCode allows C++20 so that we could use the standard `string::starts_with`.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countPrefixes(vector<string>& words, string s) {\\n    return count_if(words.begin(), words.end(), [&](string &w) {\\n        return !s.compare(0, w.size(), w);\\n    });\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995485,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(w == s[:len(w)] for w in words)\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(w == s[:len(w)] for w in words)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1995010,
                "title": "ruby-solution",
                "content": "```\\n# @param {String[]} words\\n# @param {String} s\\n# @return {Integer}\\ndef count_prefixes(words, s)\\n    count = 0\\n    words.each {|word| count += 1 if word == s[0...word.length]}\\n    count\\nend\\n",
                "solutionTags": [],
                "code": "```\\n# @param {String[]} words\\n# @param {String} s\\n# @return {Integer}\\ndef count_prefixes(words, s)\\n    count = 0\\n    words.each {|word| count += 1 if word == s[0...word.length]}\\n    count\\nend\\n",
                "codeTag": "Python3"
            },
            {
                "id": 1994972,
                "title": "c",
                "content": "Just use substring to check is the same or not,\\nprefix must be a substring of string and length will be prefix self length.\\n[C# testcase](https://github.com/AhChao/OnceLeetCodePerDay/blob/main/OnceLeetCodePerDay/Contest/0430/Tests/L6051CountPrefixesOfAGivenStringTests.cs)\\n```\\npublic int CountPrefixes(string[] words, string s) {\\n\\tvar result = 0;\\n\\tforeach(var i in words)\\n\\t{\\n\\t\\tif(i.Length > s.Length) continue;\\n\\t\\tresult += s.Substring(0,i.Length) == i ? 1 : 0;\\n\\t}\\n\\treturn result;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int CountPrefixes(string[] words, string s) {\\n\\tvar result = 0;\\n\\tforeach(var i in words)\\n\\t{\\n\\t\\tif(i.Length > s.Length) continue;\\n\\t\\tresult += s.Substring(0,i.Length) == i ? 1 : 0;\\n\\t}\\n\\treturn result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994856,
                "title": "python-hashset",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        c = 0 \\n        n = len(words)\\n        d = []\\n        for i in range(len(s)):\\n            d.append(s[:i+1])\\n        \\n        dd = set(d)\\n        \\n        for i in words:\\n            if i in dd:\\n                c += 1 \\n        return c\\n```\\n\\nDont miss to **Upvote** Coders, wish your very **great journey of coding**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        c = 0 \\n        n = len(words)\\n        d = []\\n        for i in range(len(s)):\\n            d.append(s[:i+1])\\n        \\n        dd = set(d)\\n        \\n        for i in words:\\n            if i in dd:\\n                c += 1 \\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994706,
                "title": "easy-to-understand-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        map<string, int> mpp;\\n        int ans = 0;\\n        string str;\\n        for(auto str : words) mpp[str]++;\\n        for(int i = 0; i < s.size(); i++){\\n                str += s[i];\\n                ans += mpp[str];\\n                cout << str << \" \";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        map<string, int> mpp;\\n        int ans = 0;\\n        string str;\\n        for(auto str : words) mpp[str]++;\\n        for(int i = 0; i < s.size(); i++){\\n                str += s[i];\\n                ans += mpp[str];\\n                cout << str << \" \";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1994667,
                "title": "3-liner-easy-to-implement",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(int i = 0 ; i < words.size() ; i++) if(words[i] == s.substr(0,words[i].size())) count++;\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(int i = 0 ; i < words.size() ; i++) if(words[i] == s.substr(0,words[i].size())) count++;\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994641,
                "title": "one-liner-easy-c-substr",
                "content": "```\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(int i = 0; i < words.size(); i++)\\n            if(words[i].substr(0,words[i].size()) == s.substr(0,words[i].size()))\\n                count++;\\n        return count;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(int i = 0; i < words.size(); i++)\\n            if(words[i].substr(0,words[i].size()) == s.substr(0,words[i].size()))\\n                count++;\\n        return count;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994629,
                "title": "very-easy-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c = 0;\\n        unordered_map<string,int> hmp;\\n        int l = s.length();\\n        for(int i=0; i<words.size(); i++) {\\n            hmp[words[i]]++;\\n        }\\n        for(int i=1; i<=l; i++) {\\n            string str = s.substr(0,i);\\n            if(hmp.find(str)!=hmp.end())\\n                c += hmp[str];\\n        }\\n        return c;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c = 0;\\n        unordered_map<string,int> hmp;\\n        int l = s.length();\\n        for(int i=0; i<words.size(); i++) {\\n            hmp[words[i]]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1994607,
                "title": "simple-c-substring",
                "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        \\n        int num = 0;\\n        for(auto str:words){\\n            int len = str.size();\\n            string sub = s.substr(0,len);\\n            if(str == sub)\\n                num++;\\n        }\\n        \\n        return num;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        \\n        int num = 0;\\n        for(auto str:words){\\n            int len = str.size();\\n            string sub = s.substr(0,len);\\n            if(str == sub)\\n                num++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1994580,
                "title": "java-startswith-easiest",
                "content": "```\\nclass Solution\\n{\\n    public int countPrefixes(String[] words, String s)\\n    {\\n        int count = 0;\\n        for(String word : words)\\n            if(s.startsWith(word))\\n                count++;\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int countPrefixes(String[] words, String s)\\n    {\\n        int count = 0;\\n        for(String word : words)\\n            if(s.startsWith(word))\\n                count++;\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994576,
                "title": "c-3-lines-find-function",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int a=0;\\n        for(auto i:words)   a += s.find(i)==0;\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int a=0;\\n        for(auto i:words)   a += s.find(i)==0;\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994564,
                "title": "c-4-lines-elegant-solution-using-std-mismatch",
                "content": "Built in C++ functions always comes handy in contests \\uD83D\\uDCAF\\n\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& a, string s) {\\n        int res = 0;\\n        for(auto i: a)\\n            if(mismatch(i.begin(), i.end(), s.begin(), s.end()).first == i.end()) res++;\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& a, string s) {\\n        int res = 0;\\n        for(auto i: a)\\n            if(mismatch(i.begin(), i.end(), s.begin(), s.end()).first == i.end()) res++;\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994561,
                "title": "simple-elegant-4-line-cpp-code-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& w, string s) {\\n        int ct=0;\\n        for(int i=0; i<w.size(); i++){\\n            if(s.substr(0,w[i].length())==w[i]) ct++;\\n        }\\n        return ct;\\n    }\\n};\\n```\\nTime Complexity: O(n)\\nSpace Complexity: O(1)\\n\\nLet me know if you\\'d like to add any point of if I have missed anything.\\nHappy Coding!",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& w, string s) {\\n        int ct=0;\\n        for(int i=0; i<w.size(); i++){\\n            if(s.substr(0,w[i].length())==w[i]) ct++;\\n        }\\n        return ct;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4093620,
                "title": "easy-one-liner-c",
                "content": "\\n# Approach\\nUsing Count and StartsWith\\n\\n# Code\\n```\\npublic class Solution {\\n    public int CountPrefixes(string[] words, string s) {\\n        return words.Count(i => s.StartsWith(i));\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int CountPrefixes(string[] words, string s) {\\n        return words.Count(i => s.StartsWith(i));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4088337,
                "title": "java-best-ever-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4085650,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n\\n        for(int i=0; i<words.size(); i++){\\n            if (s.rfind(words[i], 0) == 0) { \\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n\\n        for(int i=0; i<words.size(); i++){\\n            if (s.rfind(words[i], 0) == 0) { \\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4083046,
                "title": "detailed-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe have to find how many the elements in a words(list) can be prefixes to the string **S.**\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nwe have to take a variabe named counter.\\nstr\\n```python []\\ncount=0\\n\\n```\\nThen iterate through the loop to find whether the **elements in list  will match to the string S.** \\n```python []\\n    s[:len(i)]==i:\\n\\n```\\nthen increase the count value by 1\\n```python []\\ncount+=1\\n\\n```\\nFinally return the value of the count.\\n```python []\\nreturn count\\n\\n```\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if s[:len(i)]==i:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python3",
                    "String",
                    "String Matching"
                ],
                "code": "```python []\\ncount=0\\n\\n```\n```python []\\n    s[:len(i)]==i:\\n\\n```\n```python []\\ncount+=1\\n\\n```\n```python []\\nreturn count\\n\\n```\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if s[:len(i)]==i:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081682,
                "title": "easy-to-understand-iterative",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIteratively check if each words is prefix or not\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize the count.\\n2. Iterate through each word.\\n3. If the word is the prefix of s, increment count.\\n4. Return count.\\n\\n# Complexity\\n- Time complexity: O(n*m) , n=number of words, m=size of each word\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        count=0\\n        for w in words:\\n            n=len(w)\\n            if n<=len(s) and w==s[:n]:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        count=0\\n        for w in words:\\n            n=len(w)\\n            if n<=len(s) and w==s[:n]:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079643,
                "title": "simple-java-solution-100-beats-4-lines-of-code-with-expanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    Please Upvote.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        // Variable to store the value of answer.\\n        int ans=0;\\n        // Iterate through all the strings of the array.\\n        for(String word:words){\\n            // If \\'s\\' starts with the current string then increse the answer count by one.\\n            if(s.startsWith(word)) ans++;\\n        }\\n        // Finaly return the answer.\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        // Variable to store the value of answer.\\n        int ans=0;\\n        // Iterate through all the strings of the array.\\n        for(String word:words){\\n            // If \\'s\\' starts with the current string then increse the answer count by one.\\n            if(s.startsWith(word)) ans++;\\n        }\\n        // Finaly return the answer.\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079160,
                "title": "c-100-faster-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n    \\tint countOfPattern = 0;\\n\\n    \\tint inputSize = words.size();\\n\\n    \\tfor (int i = 0; i < inputSize; ++i)\\n    \\t{\\n    \\t\\tif(isPrefix(s,words[i])){\\n                countOfPattern++;\\n    \\t\\t}\\n    \\t}\\n\\n    \\treturn countOfPattern;\\n\\n    }\\n\\n\\tbool isPrefix(string str,string pattern){\\n\\n\\t\\tint size = pattern.size();\\n\\n\\t\\tfor (int i = 0; i < size; ++i)\\n\\t\\t{\\n\\t\\t\\tif(str[i] != pattern[i]){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n    \\tint countOfPattern = 0;\\n\\n    \\tint inputSize = words.size();\\n\\n    \\tfor (int i = 0; i < inputSize; ++i)\\n    \\t{\\n    \\t\\tif(isPrefix(s,words[i])){\\n                countOfPattern++;\\n    \\t\\t}\\n    \\t}\\n\\n    \\treturn countOfPattern;\\n\\n    }\\n\\n\\tbool isPrefix(string str,string pattern){\\n\\n\\t\\tint size = pattern.size();\\n\\n\\t\\tfor (int i = 0; i < size; ++i)\\n\\t\\t{\\n\\t\\t\\tif(str[i] != pattern[i]){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077227,
                "title": "beats-100-only-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])) count ++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])) count ++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076286,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(s.startswith(word) for word in words)       \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(s.startswith(word) for word in words)       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073928,
                "title": "beats-100-00-of-users-with-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n         int count=0;\\n        for(String word: words)\\n        {\\n            if(s.indexOf(word)==0)\\n            {\\n                  count++;\\n            }\\n        }\\n        \\n    return count;}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n         int count=0;\\n        for(String word: words)\\n        {\\n            if(s.indexOf(word)==0)\\n            {\\n                  count++;\\n            }\\n        }\\n        \\n    return count;}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071268,
                "title": "naive-method-96-beats-simple-solution-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if len(i)<=len(s):\\n                c=0\\n                for j in range(len(i)):\\n                    if s[j]!=i[j]:\\n                        c=1\\n                        break\\n                if c==0:\\n                    count+=1\\n        return count\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if len(i)<=len(s):\\n                c=0\\n                for j in range(len(i)):\\n                    if s[j]!=i[j]:\\n                        c=1\\n                        break\\n                if c==0:\\n                    count+=1\\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069485,
                "title": "easy-c-soln",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int n = words.size();\\n        int m = s.size();\\n        int count = 0;\\n        string str = \"\";\\n        for(int i=0; i<m; i++){\\n            str += s[i];\\n            for(int j=0; j<n; j++){\\n                if(words[j] == str){\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int n = words.size();\\n        int m = s.size();\\n        int count = 0;\\n        string str = \"\";\\n        for(int i=0; i<m; i++){\\n            str += s[i];\\n            for(int j=0; j<n; j++){\\n                if(words[j] == str){\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4067888,
                "title": "1-line-c-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public int CountPrefixes(string[] words, string s)\\n    {\\n        return words.Count(s.StartsWith);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int CountPrefixes(string[] words, string s)\\n    {\\n        return words.Count(s.StartsWith);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064105,
                "title": "1-line-of-code-beast-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n func countPrefixes(_ words: [String], _ s: String) -> Int {\\n    \\n    return words.filter {s.hasPrefix($0)}.count\\n}\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n func countPrefixes(_ words: [String], _ s: String) -> Int {\\n    \\n    return words.filter {s.hasPrefix($0)}.count\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063523,
                "title": "c-solution-by-ajeet20-iit-kanpur",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n        int count = 0;\\n        for(int i = 0; i < s.size(); i++)\\n        {\\n            string str = s.substr(0, i+1);\\n            for(int j = 0; j < words.size(); j++) {\\n                if(words[j] == str) count++;\\n            }\\n        }    \\n        return count;    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n        int count = 0;\\n        for(int i = 0; i < s.size(); i++)\\n        {\\n            string str = s.substr(0, i+1);\\n            for(int j = 0; j < words.size(); j++) {\\n                if(words[j] == str) count++;\\n            }\\n        }    \\n        return count;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4062738,
                "title": "hash-map-unordered-set-c-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        \\n        unordered_map<string,int> map;\\n        for(auto it :words)\\n        {\\n            map[it]++;\\n        }\\n        int ans  = 0;\\n        unordered_set<string> seti(words.begin(), words.end());\\n        for(int j = 1;j <= s.size();j++)\\n        {\\n            string temp = s.substr(0,j);\\n            if(seti.find(temp) != seti.end())\\n            {\\n                seti.erase(temp);\\n                ans += map[temp]++;\\n                map.erase(temp);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        \\n        unordered_map<string,int> map;\\n        for(auto it :words)\\n        {\\n            map[it]++;\\n        }\\n        int ans  = 0;\\n        unordered_set<string> seti(words.begin(), words.end());\\n        for(int j = 1;j <= s.size();j++)\\n        {\\n            string temp = s.substr(0,j);\\n            if(seti.find(temp) != seti.end())\\n            {\\n                seti.erase(temp);\\n                ans += map[temp]++;\\n                map.erase(temp);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4061412,
                "title": "using-hashset-without-any-in-build-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0 ; \\n        Set<String> hs = new HashSet<>() ;\\n        for(int j=1;j<=s.length();j++) {\\n               hs.add(s.substring(0,j)) ; \\n            }\\n        for(int i = 0 ; i<words.length ; i++){\\n            if(words[i].length()>s.length())continue ; \\n            // for(int j=1;j<=s.length();j++) {\\n            //     if(words[i].equals(s.substring(0,j))) {count++ ; break ;}\\n            // }\\n            if(hs.contains(words[i]))count++ ; \\n        }\\n        return count ; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0 ; \\n        Set<String> hs = new HashSet<>() ;\\n        for(int j=1;j<=s.length();j++) {\\n               hs.add(s.substring(0,j)) ; \\n            }\\n        for(int i = 0 ; i<words.length ; i++){\\n            if(words[i].length()>s.length())continue ; \\n            // for(int j=1;j<=s.length();j++) {\\n            //     if(words[i].equals(s.substring(0,j))) {count++ ; break ;}\\n            // }\\n            if(hs.contains(words[i]))count++ ; \\n        }\\n        return count ; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4050484,
                "title": "js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n      return words.filter((item) => s.startsWith(item)).length\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n      return words.filter((item) => s.startsWith(item)).length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050311,
                "title": "simple-easy-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n   let count = 0\\n    for(let i = 0; i<words.length; i++){\\n         if(s.startsWith(words[i])){\\n            count = count + 1\\n         }\\n    }\\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n   let count = 0\\n    for(let i = 0; i<words.length; i++){\\n         if(s.startsWith(words[i])){\\n            count = count + 1\\n         }\\n    }\\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037732,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int countPrefixes(String[] words, String s) \\n    {\\n        int c = 0;\\n        for(int i = 1; i<=s.length(); i++)\\n        {\\n            String s1 = s.substring(0,i);\\n            for(int j = 0; j<words.length; j++)\\n            {\\n                if(words[j].equals(s1))\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int countPrefixes(String[] words, String s) \\n    {\\n        int c = 0;\\n        for(int i = 1; i<=s.length(); i++)\\n        {\\n            String s1 = s.substring(0,i);\\n            for(int j = 0; j<words.length; j++)\\n            {\\n                if(words[j].equals(s1))\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031001,
                "title": "100-beats-in-java",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for (String i : words)\\n            if (s.startsWith(i)) count++;\\n        return count;\\n\\n    } \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for (String i : words)\\n            if (s.startsWith(i)) count++;\\n        return count;\\n\\n    } \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023312,
                "title": "begineers-must-see",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {int a=0;\\n    for(int j=0;j<s.length();j++){\\n        for(int i=0;i<words.length;i++){\\n            if(words[i].equals (s.substring(0,j+1)))a++;\\n        }}\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {int a=0;\\n    for(int j=0;j<s.length();j++){\\n        for(int i=0;i<words.length;i++){\\n            if(words[i].equals (s.substring(0,j+1)))a++;\\n        }}\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014679,
                "title": "3lines-code-easy-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n        for(String str:words)\\n        {\\n            if(s.indexOf(str)==0)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n        for(String str:words)\\n        {\\n            if(s.indexOf(str)==0)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011936,
                "title": "direct-approach-using-java",
                "content": "\\n\\n# Java Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        String temp = \"\";\\n        for(int i =0;i<s.length();i++){\\n            temp+=Character.toString(s.charAt(i));\\n            for(String x:words)\\n                if(temp.equals(x))\\n                    count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        String temp = \"\";\\n        for(int i =0;i<s.length();i++){\\n            temp+=Character.toString(s.charAt(i));\\n            for(String x:words)\\n                if(temp.equals(x))\\n                    count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011673,
                "title": "easy-python-linear-search-82-72-faster",
                "content": "faster than\\xA082.72%\\n\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0        \\n        # make s into tree.\\n        \\n        # traverse for each to see. If not, then not. \\n        for word in words:\\n            \\n            # word longer, cannot be prefix\\n            if len(word) > len(s):\\n                continue\\n                \\n            for i, ch in enumerate(word):\\n                \\n                if ch != s[i]:\\n                    break\\n                    \\n                if i == len(word) - 1:\\n                    count += 1\\n        \\n        return count\\n                \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0        \\n        # make s into tree.\\n        \\n        # traverse for each to see. If not, then not. \\n        for word in words:\\n            \\n            # word longer, cannot be prefix\\n            if len(word) > len(s):\\n                continue\\n                \\n            for i, ch in enumerate(word):\\n                \\n                if ch != s[i]:\\n                    break\\n                    \\n                if i == len(word) - 1:\\n                    count += 1\\n        \\n        return count\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007127,
                "title": "easy-java-solution-0-ms-beats-100-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i]))\\n                c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i]))\\n                c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005419,
                "title": "world-easy-solution-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let number=0;\\n    for(let i = 0 ; i< words.length; i++){\\n        let a = checkme(words[i], s);\\n        if(a){\\n            number++;\\n        }\\n    }\\n    return number;\\n    \\n};\\nfunction checkme(word, s){\\n    // if(word.length>s.length){\\n        for(let i = 0 ; i< word.length; i++){\\n            if(word[i]!=s[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    // }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let number=0;\\n    for(let i = 0 ; i< words.length; i++){\\n        let a = checkme(words[i], s);\\n        if(a){\\n            number++;\\n        }\\n    }\\n    return number;\\n    \\n};\\nfunction checkme(word, s){\\n    // if(word.length>s.length){\\n        for(let i = 0 ; i< word.length; i++){\\n            if(word[i]!=s[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    // }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4004148,
                "title": "easy-c-solution-using-find",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int cnt=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            string str=words[i];\\n            if(s.find(str)==0)cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int cnt=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            string str=words[i];\\n            if(s.find(str)==0)cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4000672,
                "title": "typescript-1-line-solution-o-n",
                "content": "# Complexity\\n- Time complexity: $O(n)$\\n- Space complexity: $O(1)$\\n\\n# Code\\n```\\nconst countPrefixes = (words: string[], s: string): number => words.reduce((a, w) => s.startsWith(w) ? a + 1 : a, 0)\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Array",
                    "String"
                ],
                "code": "```\\nconst countPrefixes = (words: string[], s: string): number => words.reduce((a, w) => s.startsWith(w) ? a + 1 : a, 0)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3989630,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n int countPrefixes(List<String> words, String s) {\\n  int result = 0;\\n\\n  for (int i = 0; i < words.length; i++) {\\n    if (s.startsWith(words[i])) {\\n      result++;\\n    }\\n  }\\n  return result;\\n}\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n int countPrefixes(List<String> words, String s) {\\n  int result = 0;\\n\\n  for (int i = 0; i < words.length; i++) {\\n    if (s.startsWith(words[i])) {\\n      result++;\\n    }\\n  }\\n  return result;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3986090,
                "title": "simple-java-solution-no-sms-nor-registration-required",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf a word is a prefix of the string s, it means the string s starts with that word. The Java String class provides a method startsWith() that can be used to determine if a string starts with a certain prefix. We can use this method to simplify our solution.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize a Counter: Start by initializing a counter to zero. This will keep track of how many words from the array are prefixes of s.\\n\\n2. Iterate Over the Words: Go through each word in the words array.\\n\\n3. Check for Prefix: For each word, check if s starts with that word using the startsWith() method. If it does, increment the counter.\\n\\n4. Return the Counter: After checking all the words, return the counter.\\n\\n# Complexity\\n- Time complexity: O(n * m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nwhere n is the number of words and m is the average length of a word. This is because the startsWith() method compares characters of the word with the string s and, in the worst case, this can be O(m).\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nas we are using only a fixed amount of extra space (the counter) regardless of the size of the input.\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n\\n        for (int i = 0; i < words.length; i++){\\n            if (s.startsWith(words[i])){\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n\\n        for (int i = 0; i < words.length; i++){\\n            if (s.startsWith(words[i])){\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981590,
                "title": "easy-python-solution-slicing-string",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        output = 0 \\n        for i in words :\\n            if i == s[:len(i)] :\\n                output += 1\\n        return output\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        output = 0 \\n        for i in words :\\n            if i == s[:len(i)] :\\n                output += 1\\n        return output\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974113,
                "title": "check-prefix-java-o-n",
                "content": "\\tclass Solution {\\n\\t\\tpublic int countPrefixes(String[] words, String s) {\\n\\t\\t\\tint count=0;\\n\\t\\t\\tfor(String word: words){\\n\\t\\t\\t\\tint temp = word.length(); // substring length\\n\\t\\t\\t\\tif((s.length() >= temp) && word.equals(s.substring(0,temp))) count++;\\n\\t\\t\\t}\\n\\t\\t\\treturn count;\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n\\t\\tpublic int countPrefixes(String[] words, String s) {\\n\\t\\t\\tint count=0;\\n\\t\\t\\tfor(String word: words){\\n\\t\\t\\t\\tint temp = word.length(); // substring length\\n\\t\\t\\t\\tif((s.length() >= temp) && word.equals(s.substring(0,temp))) count++;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3971387,
                "title": "one-line-solution-using-list-comprehensions",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum([words.count(s[:i]) for i in range(1, len(s)+1)])\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum([words.count(s[:i]) for i in range(1, len(s)+1)])\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954226,
                "title": "easy",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0\\n        for i in words:\\n            if i == s[0:len(i)]: \\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0\\n        for i in words:\\n            if i == s[0:len(i)]: \\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3946446,
                "title": "easy-php-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param String[] $words\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function countPrefixes($words, $s) {\\n        $count = 0;\\n        $sLen = strlen($s);\\n        for($i=1; $i<=$sLen; $i++){\\n            $str = substr($s,0,$i);\\n            foreach($words as $word){\\n                if($word == $str){\\n                    $count++;\\n                }\\n            }\\n        }\\n\\n        return $count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param String[] $words\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function countPrefixes($words, $s) {\\n        $count = 0;\\n        $sLen = strlen($s);\\n        for($i=1; $i<=$sLen; $i++){\\n            $str = substr($s,0,$i);\\n            foreach($words as $word){\\n                if($word == $str){\\n                    $count++;\\n                }\\n            }\\n        }\\n\\n        return $count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941401,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n  const hasPrefix = words.filter( string => {\\n    return s.startsWith(string)\\n  })\\n\\n  return hasPrefix.length\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n  const hasPrefix = words.filter( string => {\\n    return s.startsWith(string)\\n  })\\n\\n  return hasPrefix.length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3941261,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int countPrefixes(List<String> words, String s) {\\n      var c = 0;\\n      for (int i = 0; i < words.length; i++) {\\n          if (s.startsWith(words[i])) {\\n              c += 1;\\n          }\\n      }\\n\\n      return c;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int countPrefixes(List<String> words, String s) {\\n      var c = 0;\\n      for (int i = 0; i < words.length; i++) {\\n          if (s.startsWith(words[i])) {\\n              c += 1;\\n          }\\n      }\\n\\n      return c;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3940064,
                "title": "javascript-single-line-functional-declarative-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    return words.filter(word => s.startsWith(word)).length\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    return words.filter(word => s.startsWith(word)).length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3937084,
                "title": "javascript-beats-32-51",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let count=0;\\n   for (let index = 0; index < words.length; index++) if (s.startsWith(words[index])) count += 1;\\n   return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let count=0;\\n   for (let index = 0; index < words.length; index++) if (s.startsWith(words[index])) count += 1;\\n   return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3936190,
                "title": "python-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution(object):\\n    def countPrefixes(self, words, s):\\n        count = 0\\n        for i in range(len(words)):\\n            item = words[i]\\n            if s[0 : len(item)] == item:\\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def countPrefixes(self, words, s):\\n        count = 0\\n        for i in range(len(words)):\\n            item = words[i]\\n            if s[0 : len(item)] == item:\\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3932521,
                "title": "simple-approach-runtime-60ms-beat-93-in-runtime-and-memory",
                "content": "# Intuition\\n=>check prefix of each string in word if equal then increment the count otherwise pass on\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n=>create count equal to zero and iterate a loop and check for each string in word if its string equal to starting elements of prefix string increment the count otherwise pass\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        cnt=0\\n        for i in words:\\n            if i==s[:len(i)]:\\n                cnt+=1\\n        return cnt\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        cnt=0\\n        for i in words:\\n            if i==s[:len(i)]:\\n                cnt+=1\\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931816,
                "title": "ez-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int sum=0;\\n        for(int i=0;i<words.size();i++){\\n            if(words[i].size()>s.size()){\\n                continue;\\n            }\\n            else {\\n                if(words[i]==s.substr(0,words[i].size())){\\n                    sum++;\\n                }\\n            }\\n        }\\n        return sum;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int sum=0;\\n        for(int i=0;i<words.size();i++){\\n            if(words[i].size()>s.size()){\\n                continue;\\n            }\\n            else {\\n                if(words[i]==s.substr(0,words[i].size())){\\n                    sum++;\\n                }\\n            }\\n        }\\n        return sum;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923639,
                "title": "very-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n# - Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923636,
                "title": "very-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1732909,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            },
            {
                "id": 2039571,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            },
            {
                "id": 1908446,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            },
            {
                "id": 1875133,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            },
            {
                "id": 1676289,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            }
        ]
    }
]