[
    {
        "title": "Average Selling Price",
        "question_content": "Table: Prices\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| start_date    | date    |\n| end_date      | date    |\n| price         | int     |\n+---------------+---------+\n(product_id, start_date, end_date) is the primary key (combination of columns with unique values) for this table.\nEach row of this table indicates the price of the product_id in the period from start_date to end_date.\nFor each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id.\n\n&nbsp;\nTable: UnitsSold\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| purchase_date | date    |\n| units         | int     |\n+---------------+---------+\nThis table may contain duplicate rows.\nEach row of this table indicates the date, units, and product_id of each product sold. \n\n&nbsp;\nWrite a solution to find the average selling price for each product. average_price should be rounded to 2 decimal places.\nReturn the result table in any order.\nThe&nbsp;result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nPrices table:\n+------------+------------+------------+--------+\n| product_id | start_date | end_date   | price  |\n+------------+------------+------------+--------+\n| 1          | 2019-02-17 | 2019-02-28 | 5      |\n| 1          | 2019-03-01 | 2019-03-22 | 20     |\n| 2          | 2019-02-01 | 2019-02-20 | 15     |\n| 2          | 2019-02-21 | 2019-03-31 | 30     |\n+------------+------------+------------+--------+\nUnitsSold table:\n+------------+---------------+-------+\n| product_id | purchase_date | units |\n+------------+---------------+-------+\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n+------------+---------------+-------+\nOutput: \n+------------+---------------+\n| product_id | average_price |\n+------------+---------------+\n| 1          | 6.96          |\n| 2          | 16.96         |\n+------------+---------------+\nExplanation: \nAverage selling price = Total Price of Product / Number of products sold.\nAverage selling price for product 1 = ((100 * 5) + (15 * 20)) / 115 = 6.96\nAverage selling price for product 2 = ((200 * 15) + (30 * 30)) / 230 = 16.96",
        "solutions": [
            {
                "id": 423672,
                "title": "simple-and-concise-mysql-solution-beats-100",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT a.product_id,IFNULL(ROUND(SUM(b.units*a.price)/SUM(b.units),2),0) as average_price\\nFROM Prices as a\\nLEFT JOIN UnitsSold as b\\nON a.product_id=b.product_id AND (b.purchase_date BETWEEN a.start_date AND a.end_date)\\nGROUP BY product_id;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT a.product_id,IFNULL(ROUND(SUM(b.units*a.price)/SUM(b.units),2),0) as average_price\\nFROM Prices as a\\nLEFT JOIN UnitsSold as b\\nON a.product_id=b.product_id AND (b.purchase_date BETWEEN a.start_date AND a.end_date)\\nGROUP BY product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2542542,
                "title": "easiest-and-fastest-complete-beginner-guide",
                "content": "There are two tricks that might make this query a bit difficult: \\n1. _How do we join the tables together when we have start and end dates on one and just a purchase date on the other?_\\n2. _The calculation of the average is not straight forward..._\\n\\nLet\\'s tackle these one-by-one.\\n\\n__1. So how do we join this data together?__ The trick here is that __you can use any logical operator you want to join tables__. We\\'re used to seeing joins done like this `JOIN t2 ON t2.column = t1.column`, but we are not limited to only using `=` for join logic. We could just as easily do `ON t2.column LIKE t1.column`, or use `AND` and `OR` to combine logic for more complex joins. In fact, __any logic that you can use in a `WHERE` clause can be used in your `JOIN` clauses__, and more complicated joins can read very much like a `WHERE` clause.\\n\\nFor this problem, we want to join these tables where product_id values are equal __AND where the unit purchase date is BETWEEN the start_date and end_date values of the `prices` table__. So this join will be tricky, in that we are joining based on two criteria (product_id and dates) and that we are using `BETWEEN` as the logical operator to join based on the dates. So this is what our join will look like:\\n```\\nFROM unitssold u \\nJOIN prices p ON 1=1\\n    AND p.product_id = u.product_id \\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n```\\n_Note: you might wonder why that \"`ON 1=1`\" is there. It doesn\\'t actually do anything at all; it is just a trick that allows us to separate the real logical steps of our join onto separate lines for readability\\'s sake. Since `1=1` is always True, then `1=1 AND other_condition` will only depend on `other_condition`, so we can add it to the join without it affecting anything. Note on the Note: if you are using `OR` rather than `AND`, then putting `1=0` will have the same effect._\\n\\n__2. How do we calculate this weird average?__ We\\'re provided the following formula to calculate the average price, `Average selling price = Total Price of Product / Number of products sold`. _So how do we get these numbers?_ The denominator is easy enough: just `SUM(unitssold.units)`. The numerator requires a bit of thinking. The \"Total Price of Product\" would be more accurately named \"_Extended Price_ of Product,\" which is a fancy retail name for... \"__Sales__\". \"Sales\" is pretty easy to wrap your head around; it\\'s just `SUM(price * units)`. So our average selling price is calculated by `SUM(price * units) / SUM(units)`.\\n\\nNow, we\\'re not quite done. We\\'re using the aggregate, or group, function `SUM` here, so we need to ask ourselves _Over what group are we calculating the sum?_ We need the average price __by product__, so we will need to group our query by `product_id`.\\n\\nNow we have our final query:\\n\\n```\\nSELECT\\n    u.product_id,\\n    ROUND(SUM(p.price * u.units) / SUM(u.units), 2) AS average_price    -- Note: the prompt requires us to round results to 2 places.\\nFROM unitssold u \\nJOIN prices p ON 1=1  -- remember, the 1=1 is just so we can format the code better.\\n    AND p.product_id = u.product_id \\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date  -- we can use any logic to join two tables, not just \"=\"\\nGROUP BY u.product_id\\n```\\n\\nHope this helps, and happy coding!",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nFROM unitssold u \\nJOIN prices p ON 1=1\\n    AND p.product_id = u.product_id \\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n```\n```\\nSELECT\\n    u.product_id,\\n    ROUND(SUM(p.price * u.units) / SUM(u.units), 2) AS average_price    -- Note: the prompt requires us to round results to 2 places.\\nFROM unitssold u \\nJOIN prices p ON 1=1  -- remember, the 1=1 is just so we can format the code better.\\n    AND p.product_id = u.product_id \\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date  -- we can use any logic to join two tables, not just \"=\"\\nGROUP BY u.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3721742,
                "title": "step-by-step-detailed-solution-easy-to-understand-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA beginner friendly answer is written by following basic concepts step by step.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLooking at the result table we write the basic select statement \\nSELECT product_id, ____ as average_price FROM ___\\n\\nAS average_price should be rounded to 2 decimal places\\nSELECT p.product_id, round(_____,2) as average_price\\n\\nNow as evident from Explanation given, the two - price and units, required to calculate average_price are from different tables hence we need to join these tables (as product_id is common in these two tables we join on product_id)\\n-> update for the new test case \\nI have used LEFT JOIN in place of INNER JOIN, to include all the product_ids in the Prices table even if it in not present in the UnitsSold table.\\nSELECT p.product_id, round(_____,2) as average_price\\nFROM Prices p LEFT JOIN UnitsSold u \\nON p.product_id = u.product_id\\n\\n-> update for the new test case \\nNow as there can be null value for the average_price (as we are left joining tables) to handle these null values (and replace null with a 0 in result table) we can use IFNULL() function as follows\\nSELECT p.product_id, IFNULL(round(_____,2),0) as average_price\\n\\nNow to calculate average_price, we need to add price x units of all the products (of that particulat product_id) and then divide it by the sum of all its units \\nThis is formulated as:SUM(p.price*u.units)/SUM(u.units)\\nusing SUM() function\\n\\nFor the calculation of average_price we first need to determine the price per unit based on the purchase date\\nHence, modifying JOIN staement by adding the following condition\\nu.purchase_date BETWEEN p.Start_date and p.end_date\\n\\nNow finally to have one product_id only once in the result table and calculate average_price for each product we: Group by product_id\\n\\nThus the final code becomes\\nSELECT p.product_id, IFNULL(round(SUM(p.price*u.units)/sum(u.units),2),0) as average_price\\nFROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND u.purchase_date BETWEEN p.Start_date and p.end_date\\nGROUP BY p.product_id\\n\\nIn the above code Aliases () are used as product_id belongs to both the tables and without them it is difficult to judge which table\\'s product_id is being referred to. (i.e product_id will be ambiguous)\\n# Complexity\\n- Runtime : 1240 ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Beats: 98.06%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.product_id, IFNULL(round(SUM(p.price*u.units)/sum(u.units),2),0) as average_price\\nFROM Prices p \\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND \\nu.purchase_date BETWEEN p.Start_date and p.end_date\\nGROUP BY p.product_id\\n```\\nIf you like my explanation kindly upvote for me :)",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT p.product_id, IFNULL(round(SUM(p.price*u.units)/sum(u.units),2),0) as average_price\\nFROM Prices p \\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND \\nu.purchase_date BETWEEN p.Start_date and p.end_date\\nGROUP BY p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3872311,
                "title": "beats-82-easy-mysql-solution-round-sum-between",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe cannot use the pre-defined AVG() function as here there are 2 tables and the formula for calaculating average selling price is different.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will be using the same formula which is given in the porblem description. The formula given for calculating the average selling price is :\\nAverage selling price of product x = SUM[units of product x * price of product x(for which the purchase date lies between the start_date and end_Date)] / Total number of units sold of product x sold\\n\\nFor the numerator and denominator in the above formula we can use the predefined SUM() function in SQL.\\n\\nAverage selling price of product = SUM(units*price)/SUM(units)\\n\\nSince, we also want that the purchase date must be in between the start date and end date so we will specify that in code because we want that price for that number of units is corresponding to that purchase date. \\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.product_id, IFNULL(ROUND(SUM(units*price)/SUM(units),2),0) AS average_price\\nFROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND\\nu.purchase_date BETWEEN start_date AND end_date\\ngroup by product_id\\n```\\n\\n##### Please upvote if you found it helpful.\\n![Upvote picture.jpg](https://assets.leetcode.com/users/images/aceaeaf3-2151-4b68-b4dd-10f84e9b7f15_1691329605.3144674.jpeg)\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT p.product_id, IFNULL(ROUND(SUM(units*price)/SUM(units),2),0) AS average_price\\nFROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND\\nu.purchase_date BETWEEN start_date AND end_date\\ngroup by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1921840,
                "title": "simple-mysql-solution-faster-than-100-easy-to-understand",
                "content": "```\\nselect prices.product_id, ROUND(SUM(price * units) / SUM(units), 2) as average_price\\nfrom Prices join UnitsSold \\non prices.product_id = unitssold.product_id\\nand purchase_date between start_date and end_date\\ngroup by product_id\\n\\n# Do upvote if you like the solution.\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect prices.product_id, ROUND(SUM(price * units) / SUM(units), 2) as average_price\\nfrom Prices join UnitsSold \\non prices.product_id = unitssold.product_id\\nand purchase_date between start_date and end_date\\ngroup by product_id\\n\\n# Do upvote if you like the solution.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 544263,
                "title": "faster-than-81-easy-to-understand-mysql",
                "content": "```\\nselect \\n\\tp.product_id, \\n\\tround(sum(u.units*p.price)/sum(u.units), 2)  as average_price \\nfrom prices as p join unitssold as u \\n\\twhere \\n\\t\\tu.product_id = p.product_id and \\n\\t\\tu.purchase_date <= p.end_date and \\n\\t\\tu.purchase_date >= p.start_date \\n\\tgroup by p.product_id;\\n```\\n\\n**I hope that you\\'ve found it useful.**\\n*In that case, please do upvote*",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect \\n\\tp.product_id, \\n\\tround(sum(u.units*p.price)/sum(u.units), 2)  as average_price \\nfrom prices as p join unitssold as u \\n\\twhere \\n\\t\\tu.product_id = p.product_id and \\n\\t\\tu.purchase_date <= p.end_date and \\n\\t\\tu.purchase_date >= p.start_date \\n\\tgroup by p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3710278,
                "title": "easy-understandible-solution",
                "content": "# Code\\n```\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) as average_price \\nfrom Prices p \\nleft join \\nUnitsSold u \\non p.product_id=u.product_id \\nwhere u.purchase_date>=p.start_date and u.purchase_date<=p.end_date \\ngroup by p.product_id\\n```PLEASE UPVOTE TO MOTIVATE ME WRITE MORE SOLUTION2",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) as average_price \\nfrom Prices p \\nleft join \\nUnitsSold u \\non p.product_id=u.product_id \\nwhere u.purchase_date>=p.start_date and u.purchase_date<=p.end_date \\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 471823,
                "title": "mysql-solution-the-easiest",
                "content": "```\\nselect \\nu.product_id, \\nround(sum(u.units * p.price) / sum(u.units), 2) as average_price from \\nprices p \\njoin unitssold u \\non p.product_id = u.product_id \\nand u.purchase_date between p.start_date and p.end_date\\ngroup by \\nu.product_id",
                "solutionTags": [],
                "code": "```\\nselect \\nu.product_id, \\nround(sum(u.units * p.price) / sum(u.units), 2) as average_price from \\nprices p \\njoin unitssold u \\non p.product_id = u.product_id \\nand u.purchase_date between p.start_date and p.end_date\\ngroup by \\nu.product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 3587534,
                "title": "postgres-oracle-solution-perform-group-by-and-inner-join-beats-50",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. We should select all products that were purchased in correct dates. Otherwise we get the incorrect duplicate records.\\n2. After completing this step we just perform `GROUP BY` operation.\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT \\n    p.product_id,\\n    ROUND(SUM(u.units * p.price)/SUM(u.units), 2) AS average_price\\nFROM \\n    Prices p \\n    INNER JOIN UnitsSold u ON p.product_id = u.product_id\\nWHERE\\n    u.purchase_date >= p.start_date AND u.purchase_date <= p.end_date\\nGROUP BY \\n    p.product_id;\\n\\n```",
                "solutionTags": [
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT \\n    p.product_id,\\n    ROUND(SUM(u.units * p.price)/SUM(u.units), 2) AS average_price\\nFROM \\n    Prices p \\n    INNER JOIN UnitsSold u ON p.product_id = u.product_id\\nWHERE\\n    u.purchase_date >= p.start_date AND u.purchase_date <= p.end_date\\nGROUP BY \\n    p.product_id;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3636260,
                "title": "used-as-less-jargons-as-possible",
                "content": "# Code\\n```\\nselect p.product_id, round(sum(price * units) / sum(units), 2) as average_price \\nfrom Prices p\\njoin UnitsSold u on p.product_id=u.product_id\\nwhere u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect p.product_id, round(sum(price * units) / sum(units), 2) as average_price \\nfrom Prices p\\njoin UnitsSold u on p.product_id=u.product_id\\nwhere u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3692617,
                "title": "round-sum-left-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nSimple join and basic maths\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) as average_price \\nfrom Prices p \\nleft join \\nUnitsSold u \\non p.product_id=u.product_id \\nwhere u.purchase_date>=p.start_date and u.purchase_date<=p.end_date \\ngroup by product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) as average_price \\nfrom Prices p \\nleft join \\nUnitsSold u \\non p.product_id=u.product_id \\nwhere u.purchase_date>=p.start_date and u.purchase_date<=p.end_date \\ngroup by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3590781,
                "title": "step-by-step-explanation-with-optimum-solution",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe goal is to calculate the average selling price for each product based on the units sold and their corresponding prices within a specified time period.\\n\\n# Approach\\n1. Join the \"Prices\" table with the \"UnitsSold\" table using the \"product_id\" column to obtain the relevant data for each product.\\n1. Filter the data based on the purchase date being between the start and end dates specified in the \"Prices\" table.\\n1. Calculate the average price by dividing the sum of (price * units) by the sum of units for each product.\\n1. Round the average price to two decimal places to match the required output format.\\n1. Group the results by the product_id to calculate the average price for each product.\\n1. Sort the results in ascending order based on the product_id.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution depends on the size of the \"Prices\" table and the \"UnitsSold\" table. Let\\'s assume the sizes of these tables are n and m, respectively. The join operation will take $$O(n + m)$$ time complexity. The subsequent calculations and grouping will also take $$O(n + m)$$ time complexity. Therefore, the overall time complexity is $$O(n + m)$$.\\n\\n- Space complexity:\\nThe space complexity of this solution depends on the number of distinct product_ids in the \"Prices\" table. Let\\'s assume there are k distinct product_ids. The space required to store the output results is O(k) since we have k rows in the result set. The additional space required for processing and joining the tables is $$O(n + m)$$. Therefore, the overall space complexity is $$O(n + m + k)$$.\\n\\nOverall, your solution efficiently calculates the average selling price for each product within the specified time period.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT \\n    p.product_id, \\n    round(sum(price*units)/sum(units),2) AS average_price \\nFROM Prices p\\nJOIN UnitsSold u using (product_id)\\nWHERE u.purchase_date between p.start_date AND p.end_date\\nGROUP BY p.product_id\\n```\\n***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/b2463670-a1d1-42e8-b0fd-165b6acb9d79_1685736992.4540915.jpeg)\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT \\n    p.product_id, \\n    round(sum(price*units)/sum(units),2) AS average_price \\nFROM Prices p\\nJOIN UnitsSold u using (product_id)\\nWHERE u.purchase_date between p.start_date AND p.end_date\\nGROUP BY p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3540380,
                "title": "mysql-solution-for-average-selling-price-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given SQL query calculates the average price for each product based on the units sold and the corresponding prices. It joins the \"Prices\" and \"UnitsSold\" tables on the product_id and filters the units sold based on the purchase date falling within the price\\'s start_date and end_date range. The query then groups the results by product_id and sorts them in ascending order.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The query starts by selecting the distinct product_id and calculates the average price for each product.\\n1. It performs an inner join between the \"Prices\" and \"UnitsSold\" tables using the product_id.\\n1. The join condition also includes a filter on the purchase_date to ensure it falls within the price\\'s start_date and end_date range.\\n1. The price * units is summed for each product, as well as the total units sold.\\n1. The average price is calculated by dividing the sum of (price * units) by the sum of units.\\n1. The result is grouped by product_id and ordered in ascending order.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the query depends on the number of rows in the \"Prices\" and \"UnitsSold\" tables. It involves joining the tables, performing calculations, grouping, and sorting. The time complexity is typically determined by the size of the result set and can be expressed as O(n log n), where n is the total number of rows in the joined tables.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the query depends on the number of distinct product_ids and the space required to store the result set. The space required for storing the result is proportional to the number of distinct product_ids. The space complexity is typically O(n) due to the size of the result set.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct p.product_id, round(sum(price * units) / sum(units), 2) as average_price from\\nPrices as p join UnitsSold as U on\\np.product_id  = u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\norder by p.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct p.product_id, round(sum(price * units) / sum(units), 2) as average_price from\\nPrices as p join UnitsSold as U on\\np.product_id  = u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\norder by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3992624,
                "title": "easy-sql-solution",
                "content": "\\n# Approach\\n1)USE JOIN TO MAKE p.product_id = u.product_id\\n2)ALSO CHECK IF purchase_date is between start_date and end_date or not\\n3)We use INNER JOIN to combine the \"Prices\" and \"UnitsSold\" tables based on the common product_id column.\\nWe provide aliases for the tables to make the query more readable (p for \"Prices\" and u for \"UnitsSold\").\\nThe WHERE clause filters the results to only include rows where the purchase_date from \"UnitsSold\" falls within the date range defined by the start_date and end_date columns in the \"Prices\" table.\\nThe GROUP BY clause groups the results by product_id.\\n4)We use the ROUND function to calculate the average price rounded to two decimal places.\\n\\n# Code\\n```\\nSELECT p.product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM Prices AS p\\nINNER JOIN UnitsSold AS u ON p.product_id = u.product_id\\nWHERE u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT p.product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM Prices AS p\\nINNER JOIN UnitsSold AS u ON p.product_id = u.product_id\\nWHERE u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3863175,
                "title": "100-easy-fast-clean-solution",
                "content": "IF THIS WILL BE HELPFUL TO YOU, PLEASE UPVOTE !\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT P.product_id, ROUND(SUM(U.units * P.price) / SUM(U.units),2) \\n\\nAS average_price FROM Prices P INNER JOIN UnitsSold U ON \\n\\nP.product_id = U.product_id AND U.purchase_date BETWEEN \\n\\nP.start_date AND P.end_date  GROUP BY P.product_id\\n\\n```\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/9d0926d6-8fb9-4cb1-8255-945e02bfe475_1691159221.1510832.jpeg)",
                "solutionTags": [
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT P.product_id, ROUND(SUM(U.units * P.price) / SUM(U.units),2) \\n\\nAS average_price FROM Prices P INNER JOIN UnitsSold U ON \\n\\nP.product_id = U.product_id AND U.purchase_date BETWEEN \\n\\nP.start_date AND P.end_date  GROUP BY P.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3608128,
                "title": "simple-sql-solution-javith-sadham-hussain",
                "content": "# Code\\n```\\nSelect \\n    p.product_id,\\n    round(sum(u.units * p.price) / sum(u.units) , 2) as average_price \\nfrom Prices p\\njoin UnitsSold u\\non (p.product_id = u.product_id and\\n    u.purchase_date between p.start_date and p.end_date)\\ngroup by product_id;\\n \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect \\n    p.product_id,\\n    round(sum(u.units * p.price) / sum(u.units) , 2) as average_price \\nfrom Prices p\\njoin UnitsSold u\\non (p.product_id = u.product_id and\\n    u.purchase_date between p.start_date and p.end_date)\\ngroup by product_id;\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3358797,
                "title": "straightforward-ms-sql-server-solution",
                "content": "# Code\\n```\\nselect unitssold.product_id, round(cast(sum(units*price) as float) / sum(units), 2) as average_price from unitssold\\nleft join prices on unitssold.product_id = prices.product_id and purchase_date >= start_date and purchase_date <= end_date\\ngroup by unitssold.product_id\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect unitssold.product_id, round(cast(sum(units*price) as float) / sum(units), 2) as average_price from unitssold\\nleft join prices on unitssold.product_id = prices.product_id and purchase_date >= start_date and purchase_date <= end_date\\ngroup by unitssold.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 931164,
                "title": "simply-mysql-solution-using-between-sum-and-where",
                "content": "```\\nSELECT product_id, IFNULL(ROUND(SUM(price*units)/SUM(units),2),0) AS average_price\\nFROM Prices\\nJOIN UnitsSold\\nUSING(product_id)\\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id\\nORDER BY product_id\\n\\n\\n```\\n",
                "solutionTags": [],
                "code": "```\\nSELECT product_id, IFNULL(ROUND(SUM(price*units)/SUM(units),2),0) AS average_price\\nFROM Prices\\nJOIN UnitsSold\\nUSING(product_id)\\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id\\nORDER BY product_id\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 435593,
                "title": "simple-mysql-solution",
                "content": "```\\n\\nselect \\n\\t\\tp.product_id ,\\n\\t\\tROUND((SUM(u.units*p.price)/SUM(units)),2) average_price \\n\\nfrom Prices p , UnitsSold u \\nwhere \\n\\t\\tp.product_id = u.product_id \\n\\t\\tand u.purchase_date between p.start_date and p.end_date \\n\\t\\t\\ngroup by p.product_id\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nselect \\n\\t\\tp.product_id ,\\n\\t\\tROUND((SUM(u.units*p.price)/SUM(units)),2) average_price \\n\\nfrom Prices p , UnitsSold u \\nwhere \\n\\t\\tp.product_id = u.product_id \\n\\t\\tand u.purchase_date between p.start_date and p.end_date \\n\\t\\t\\ngroup by p.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3764604,
                "title": "mysql-simple-and-clean-beats-93-34",
                "content": "### Please upvote if you find this helpful. \\u270C\\n<img src=\"https://assets.leetcode.com/users/images/b8e25620-d320-420a-ae09-94c7453bd033_1678818986.7001078.jpeg\" alt=\"Cute Robot - Stable diffusion\" width=\"200\"/>\\n\\n# Intuition\\nThe problem asks us to calculate the average price of each product, weighted by the number of units sold within a given date range. Our first thought might be to join the `Prices` and `UnitsSold` tables, filter the results by the given date range, group the results by `product_id`, and then calculate the weighted average of the `price` column for each group.\\n\\n# Approach\\n1. Join the `Prices` and `UnitsSold` tables using the `product_id` column.\\n2. Filter the results by the given date range using the `purchase_date`, `start_date`, and `end_date` columns.\\n3. Group the results by `product_id`.\\n4. Calculate the weighted average of the `price` column for each group using the `SUM` and `AVG` functions.\\n5. Round the result to 2 digits using the `ROUND` function.\\n\\n# Complexity\\n- Time complexity: Depends on the size of the `Prices` and `UnitsSold` tables, as well as the efficiency of the join and filter operations.\\n- Space complexity: Depends on the size of these tables and the number of groups created by the `GROUP BY` clause.\\n\\n\\n# Code\\n```\\nselect p.product_id, round(sum(p.price*u.units)/sum(u.units),2) as average_price\\nfrom Prices p\\njoin UnitsSold u on p.product_id = u.product_id and purchase_date between start_date and end_date\\ngroup by p.product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id, round(sum(p.price*u.units)/sum(u.units),2) as average_price\\nfrom Prices p\\njoin UnitsSold u on p.product_id = u.product_id and purchase_date between start_date and end_date\\ngroup by p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3608563,
                "title": "sql-round-sum-group-by-easy-to-understand",
                "content": "![image.png](https://assets.leetcode.com/users/images/70b32547-5da1-4c00-a75b-487c26841b86_1686130124.8750567.png)\\n\\n\\n# Code\\n```\\nselect \\np.product_id,\\nround(sum(p.price *  u.units) / sum(u.units),2) as average_price  \\nfrom Prices p join UnitsSold u \\n        on p.product_id = u.product_id and p.start_date <= u.purchase_date and u.purchase_date <= p.end_date\\ngroup by p.product_id\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nselect \\np.product_id,\\nround(sum(p.price *  u.units) / sum(u.units),2) as average_price  \\nfrom Prices p join UnitsSold u \\n        on p.product_id = u.product_id and p.start_date <= u.purchase_date and u.purchase_date <= p.end_date\\ngroup by p.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498765,
                "title": "99-80-beat-easy-solution-with-join-and-aggregate-functions",
                "content": "# Code\\n```sql\\nSELECT\\n    p.product_id AS product_id,\\n    ROUND(SUM(u.units * p.price) / SUM(u.units), 2) AS average_price\\n\\nFROM\\n    Prices AS p JOIN\\n    UnitsSold AS u\\n\\nON (\\n    (u.purchase_date BETWEEN p.start_date AND p.end_date) AND\\n    u.product_id = p.product_id\\n)\\n\\nGROUP BY p.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT\\n    p.product_id AS product_id,\\n    ROUND(SUM(u.units * p.price) / SUM(u.units), 2) AS average_price\\n\\nFROM\\n    Prices AS p JOIN\\n    UnitsSold AS u\\n\\nON (\\n    (u.purchase_date BETWEEN p.start_date AND p.end_date) AND\\n    u.product_id = p.product_id\\n)\\n\\nGROUP BY p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2029987,
                "title": "simple-mysql-solution-beats-100",
                "content": "```\\nSELECT\\n    Prices.product_id,\\n    ROUND(SUM(Prices.price * UnitsSold.units) / SUM(UnitsSold.units), 2) as average_price\\nFROM\\n    Prices\\nINNER JOIN\\n    UnitsSold\\nON\\n    UnitsSold.purchase_date BETWEEN Prices.start_date AND Prices.end_date\\n    AND\\n    UnitsSold.product_id = Prices.product_id\\nGROUP BY\\n    Prices.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    Prices.product_id,\\n    ROUND(SUM(Prices.price * UnitsSold.units) / SUM(UnitsSold.units), 2) as average_price\\nFROM\\n    Prices\\nINNER JOIN\\n    UnitsSold\\nON\\n    UnitsSold.purchase_date BETWEEN Prices.start_date AND Prices.end_date\\n    AND\\n    UnitsSold.product_id = Prices.product_id\\nGROUP BY\\n    Prices.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1186932,
                "title": "mysql-solution-simple-and-easy",
                "content": "```\\nSELECT\\n    p.product_id,\\n    ROUND((SUM(p.price * us.units) / SUM(us.units)), 2) average_price\\nFROM prices p \\nJOIN UnitsSold us \\nON p.product_id = us.product_id\\n    AND us.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    p.product_id,\\n    ROUND((SUM(p.price * us.units) / SUM(us.units)), 2) average_price\\nFROM prices p \\nJOIN UnitsSold us \\nON p.product_id = us.product_id\\n    AND us.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058519,
                "title": "for-the-16th-last-test-case-where-an-extra-product-id-3-is-added",
                "content": "# Intuition\\nDate: 18-09-2023\\n\\nThe issue with most common solution is that id does not pass the 15th test case, because we join using product_id and then filter out the relevant rows using where clause (using dates). Due to this the third row i.e with product_id == 3 also gets filtered out EVEN IF we use left join, As joins are executed first then followed by the filtering of the where clause. \\n\\n# Approach\\n\\nInstead of using where clause to filter out the results, filter out using an addtional condition in the join clause itself. This way when we use left join, the third row (product_id == 3) will be retianed. \\n\\nWe will also need to apply an IF contion in the select clause to make sure that whenever units are null, it returns zero. \\n\\nI hope this helps. \\n\\n# Complexity\\n- Time complexity: Not sure.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: Not sure. \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSelect p.product_id, if(sum(units) is not null, round(sum(price*units)/sum(units),2),0) as average_price\\nfrom Prices p\\nleft join UnitsSold u on (p.product_id = u.product_id AND u.purchase_date between p.start_date and p.end_date)\\ngroup by p.product_id\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSelect p.product_id, if(sum(units) is not null, round(sum(price*units)/sum(units),2),0) as average_price\\nfrom Prices p\\nleft join UnitsSold u on (p.product_id = u.product_id AND u.purchase_date between p.start_date and p.end_date)\\ngroup by p.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3611685,
                "title": "solution-with-simple-query-mysql",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\nWITH CTE AS (\\r\\n        SELECT\\r\\n            T1.product_id,\\r\\n            T1.price,\\r\\n            T2.units,\\r\\n            T2.units * T1.price  selling\\r\\n        FROM    \\r\\n            Prices T1 \\r\\n        LEFT JOIN\\r\\n            UnitsSold T2 ON T1.product_id = T2.product_id\\r\\n            AND\\r\\n                T2.purchase_date BETWEEN T1.start_date AND T1.end_date\\r\\n)\\r\\nSELECT DISTINCT\\r\\n    product_id,\\r\\n    ROUND(SUM(selling) OVER(PARTITION BY product_id) / SUM(units) OVER(PARTITION BY product_id) ,2) average_price\\r\\nFROM\\r\\n    CTE\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\nWITH CTE AS (\\r\\n        SELECT\\r\\n            T1.product_id,\\r\\n            T1.price,\\r\\n            T2.units,\\r\\n            T2.units * T1.price  selling\\r\\n        FROM    \\r\\n            Prices T1 \\r\\n        LEFT JOIN\\r\\n            UnitsSold T2 ON T1.product_id = T2.product_id\\r\\n            AND\\r\\n                T2.purchase_date BETWEEN T1.start_date AND T1.end_date\\r\\n)\\r\\nSELECT DISTINCT\\r\\n    product_id,\\r\\n    ROUND(SUM(selling) OVER(PARTITION BY product_id) / SUM(units) OVER(PARTITION BY product_id) ,2) average_price\\r\\nFROM\\r\\n    CTE\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3563518,
                "title": "easy-implementation-with-join-between-group-by",
                "content": "This problem requires a good understanding of GROUP BY and how you can aggregate the average_price. At first, you might get an idea to use `AVG()` but on further implementation, you will notice that you have to divide by the **total units** and not just the **count of rows**.\\n\\n# Code\\n``` MS_SQL []\\nSELECT p.product_id, ROUND(CAST(SUM(price * units) AS FLOAT)/SUM(units), 2) as average_price\\nFROM Prices p\\nJOIN UnitsSold u\\nON p.product_id = u.product_id\\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id\\n```\\n``` MySQL []\\nSELECT p.product_id, ROUND(CAST(SUM(price * units) AS FLOAT)/SUM(units), 2) as average_price\\nFROM Prices p\\nJOIN UnitsSold u\\nON p.product_id = u.product_id\\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id\\n```\\n``` Oracle []\\nSELECT p.product_id, ROUND(CAST(SUM(price * units) AS FLOAT)/SUM(units), 2) as average_price\\nFROM Prices p\\nJOIN UnitsSold u\\nON p.product_id = u.product_id\\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id\\n```\\n\\n# Intuition\\n1. `JOIN ` the two tables on **product_id**\\n2. Specify the condition to contain the purchase date within the start_date and the end_date using `BETWEEN`. You can also use `<` or `>`.\\n3. `GROUP BY` the product_id to **group similar product_id**\\n4. `ROUND(CAST(SUM(price * units) AS FLOAT)/SUM(units), 2)` calculates the average by multiplying the price and units to find the total price. \\n5. Since we require a decimal value, we need to `CAST` it as **float/decimal/numeric**.\\n6. Finally `ROUND` the value to 2 decimal places as required.",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "``` MS_SQL []\\nSELECT p.product_id, ROUND(CAST(SUM(price * units) AS FLOAT)/SUM(units), 2) as average_price\\nFROM Prices p\\nJOIN UnitsSold u\\nON p.product_id = u.product_id\\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id\\n```\n``` MySQL []\\nSELECT p.product_id, ROUND(CAST(SUM(price * units) AS FLOAT)/SUM(units), 2) as average_price\\nFROM Prices p\\nJOIN UnitsSold u\\nON p.product_id = u.product_id\\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id\\n```\n``` Oracle []\\nSELECT p.product_id, ROUND(CAST(SUM(price * units) AS FLOAT)/SUM(units), 2) as average_price\\nFROM Prices p\\nJOIN UnitsSold u\\nON p.product_id = u.product_id\\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3431472,
                "title": "solution-with-sum-over-sql-server",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n\\r\\n\\r\\nWITH CTE AS (\\r\\n        SELECT\\r\\n            T1.product_id,\\r\\n            T1.price,\\r\\n            T2.units,\\r\\n            T2.units * CAST(T1.price AS DECIMAL(10,2)) [selling]\\r\\n        FROM    \\r\\n            Prices T1 \\r\\n        LEFT JOIN\\r\\n            UnitsSold T2 ON T1.product_id = T2.product_id\\r\\n            AND\\r\\n                T2.purchase_date BETWEEN T1.start_date AND T1.end_date\\r\\n)\\r\\nSELECT DISTINCT\\r\\n    product_id,\\r\\n    ROUND(SUM([selling]) OVER(PARTITION BY product_id) / CAST(SUM(units) OVER(PARTITION BY product_id) AS DECIMAL(10,2)),2) average_price\\r\\nFROM\\r\\n    CTE\\r\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n\\r\\n\\r\\nWITH CTE AS (\\r\\n        SELECT\\r\\n            T1.product_id,\\r\\n            T1.price,\\r\\n            T2.units,\\r\\n            T2.units * CAST(T1.price AS DECIMAL(10,2)) [selling]\\r\\n        FROM    \\r\\n            Prices T1 \\r\\n        LEFT JOIN\\r\\n            UnitsSold T2 ON T1.product_id = T2.product_id\\r\\n            AND\\r\\n                T2.purchase_date BETWEEN T1.start_date AND T1.end_date\\r\\n)\\r\\nSELECT DISTINCT\\r\\n    product_id,\\r\\n    ROUND(SUM([selling]) OVER(PARTITION BY product_id) / CAST(SUM(units) OVER(PARTITION BY product_id) AS DECIMAL(10,2)),2) average_price\\r\\nFROM\\r\\n    CTE\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406452,
                "title": "faster-than-99-49-left-join-subquery-and-sum-round",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT t.product_id, ROUND(SUM(t.total_price)*1.0 / SUM(t.units), 2) AS average_price\\nFROM(SELECT u.product_id, u.units, p.price, u.units * p.price AS total_price\\n    FROM UnitsSold u LEFT JOIN Prices p ON u.product_id = p.product_id\\n    WHERE u.purchase_date >= p.start_date AND u.purchase_date <= p.end_date) t\\nGROUP BY t.product_id\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT t.product_id, ROUND(SUM(t.total_price)*1.0 / SUM(t.units), 2) AS average_price\\nFROM(SELECT u.product_id, u.units, p.price, u.units * p.price AS total_price\\n    FROM UnitsSold u LEFT JOIN Prices p ON u.product_id = p.product_id\\n    WHERE u.purchase_date >= p.start_date AND u.purchase_date <= p.end_date) t\\nGROUP BY t.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2273213,
                "title": "mysql-4-lines",
                "content": "```\\nSELECT p.product_id, ROUND(SUM(p.price*u.units)/SUM(u.units),2) AS average_price\\nFROM Prices p, UnitsSold u\\nWhere p.product_id = u.product_id and u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT p.product_id, ROUND(SUM(p.price*u.units)/SUM(u.units),2) AS average_price\\nFROM Prices p, UnitsSold u\\nWhere p.product_id = u.product_id and u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2180301,
                "title": "mysql-properly-styled-sum-left-join-between",
                "content": "Once unspoken requirement that you need to understand is that the purchase price applies to the date of purchase.\\nEx. I made a purchase on 1-1-2021 buying 10 units of product 3. This price is $4.00 between 12-1-2020 and 1-31-2021.\\n\\n```\\nSELECT\\n    Prices.product_id AS product_id,\\n    ROUND(SUM(Prices.price * UnitsSold.units) / SUM(UnitsSold.units), 2) AS average_price\\nFROM Prices\\nLEFT JOIN UnitsSold\\n    ON Prices.product_id = UnitsSold.product_id\\n        AND UnitsSold.purchase_date BETWEEN Prices.start_date AND Prices.end_date\\nGROUP BY Prices.product_id\\n```\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    Prices.product_id AS product_id,\\n    ROUND(SUM(Prices.price * UnitsSold.units) / SUM(UnitsSold.units), 2) AS average_price\\nFROM Prices\\nLEFT JOIN UnitsSold\\n    ON Prices.product_id = UnitsSold.product_id\\n        AND UnitsSold.purchase_date BETWEEN Prices.start_date AND Prices.end_date\\nGROUP BY Prices.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1505402,
                "title": "easy-mysql",
                "content": "```\\nselect p.product_id,  round(sum(price * units) / sum(units), 2) as average_price \\nfrom prices p\\nleft join unitssold u\\non p.product_id = u.product_id and purchase_date between start_date and end_date\\ngroup by product_id\\n```",
                "solutionTags": [],
                "code": "```\\nselect p.product_id,  round(sum(price * units) / sum(units), 2) as average_price \\nfrom prices p\\nleft join unitssold u\\non p.product_id = u.product_id and purchase_date between start_date and end_date\\ngroup by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1139922,
                "title": "mysql-join-and-aggregation",
                "content": "```\\nselect us.product_id,round(sum(units * price) / sum(units), 2) as average_price\\nfrom unitssold us\\njoin prices p\\non us.product_id = p.product_id and us.purchase_date between p.start_date and p.end_date\\ngroup by 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect us.product_id,round(sum(units * price) / sum(units), 2) as average_price\\nfrom unitssold us\\njoin prices p\\non us.product_id = p.product_id and us.purchase_date between p.start_date and p.end_date\\ngroup by 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 921150,
                "title": "ms-sql-using-cte",
                "content": "```\\nwith cte as (\\n    select p.product_id, p.start_date, p.end_date, u.units as quantity, (p.price*u.units) as selling_price\\n    from Prices p\\n    left join UnitsSold u\\n    on p.product_id = u.product_id\\n    and u.purchase_date between p.start_date and p.end_date\\n)\\n\\nselect product_id, round ((sum(selling_price) * 1.00 /sum(quantity)),2) as average_price\\nfrom cte\\ngroup by product_id\\n```",
                "solutionTags": [],
                "code": "```\\nwith cte as (\\n    select p.product_id, p.start_date, p.end_date, u.units as quantity, (p.price*u.units) as selling_price\\n    from Prices p\\n    left join UnitsSold u\\n    on p.product_id = u.product_id\\n    and u.purchase_date between p.start_date and p.end_date\\n)\\n\\nselect product_id, round ((sum(selling_price) * 1.00 /sum(quantity)),2) as average_price\\nfrom cte\\ngroup by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 817105,
                "title": "ms-sql-solution-easy",
                "content": "select u.product_id, round(sum(price* units *1.0)/sum(units), 2) as average_price\\nFROM UnitsSold u JOIN Prices p\\nON u.product_id = p.product_id\\nand u.purchase_date between p.start_date and p.end_date\\nGROUP BY u.product_id",
                "solutionTags": [],
                "code": "select u.product_id, round(sum(price* units *1.0)/sum(units), 2) as average_price\\nFROM UnitsSold u JOIN Prices p\\nON u.product_id = p.product_id\\nand u.purchase_date between p.start_date and p.end_date\\nGROUP BY u.product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 657537,
                "title": "sql-server-using-window-function-faster-than-97-18",
                "content": "select distinct\\n    p.product_id,\\n    cast(cast(sum(price*units) over (partition by p.product_id) as numeric)/cast(sum(units) over(partition by  p.product_id) as numeric) as decimal(10,2)) as average_price\\nfrom Prices p\\njoin UnitsSold s\\non p.product_id = s.product_id and\\n    s.purchase_date between p.start_date and p.end_date",
                "solutionTags": [],
                "code": "select distinct\\n    p.product_id,\\n    cast(cast(sum(price*units) over (partition by p.product_id) as numeric)/cast(sum(units) over(partition by  p.product_id) as numeric) as decimal(10,2)) as average_price\\nfrom Prices p\\njoin UnitsSold s\\non p.product_id = s.product_id and\\n    s.purchase_date between p.start_date and p.end_date",
                "codeTag": "Unknown"
            },
            {
                "id": 454726,
                "title": "mssql-answer",
                "content": "```\\n\\n\\n    SELECT A.product_id, \\n           ROUND(CAST(SUM(A.units*B.price) AS FLOAT)/SUM(A.units),2)  AS average_price\\n    FROM   UnitsSold  AS A \\n    INNER JOIN Prices AS B ON A.product_id = B.product_id \\n                          AND A.purchase_date BETWEEN B.start_date AND B.end_Date\\n    GROUP BY A.product_id\\n",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n\\n\\n    SELECT A.product_id, \\n           ROUND(CAST(SUM(A.units*B.price) AS FLOAT)/SUM(A.units),2)  AS average_price\\n    FROM   UnitsSold  AS A \\n    INNER JOIN Prices AS B ON A.product_id = B.product_id \\n                          AND A.purchase_date BETWEEN B.start_date AND B.end_Date\\n    GROUP BY A.product_id\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 435923,
                "title": "sql-server",
                "content": "```\\nSelect product_id, Round(Sum(total_Sales) / Sum(units),2) as average_price from \\n(Select u.product_id, p.price, u.units, Cast((price * units) as Float) total_Sales from Prices p inner join UnitsSold u on \\n(p.product_id = u.product_id and u.purchase_date >= p.start_date and u.purchase_date <= p.end_date)) sub \\ngroup by product_id\\n```",
                "solutionTags": [],
                "code": "```\\nSelect product_id, Round(Sum(total_Sales) / Sum(units),2) as average_price from \\n(Select u.product_id, p.price, u.units, Cast((price * units) as Float) total_Sales from Prices p inner join UnitsSold u on \\n(p.product_id = u.product_id and u.purchase_date >= p.start_date and u.purchase_date <= p.end_date)) sub \\ngroup by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 429961,
                "title": "ms-sql-server-solution",
                "content": "select subsub.product_id,\\n       round(subsub.total_revenue/subsub.total_units,2) AS average_price\\nfrom       \\n(select sub.product_id,\\n       CAST(SUM(sub.price * sub.units) AS FLOAT)  AS total_revenue,\\n       CAST(SUM(sub.units) AS FLOAT) AS total_units\\nfrom \\n(select u.product_id,\\n         p.price,\\n         u.units\\n  from UnitsSold u, Prices p\\n  where (u.purchase_date >= p.start_date) AND (u.purchase_date <= p.end_date) AND (u.product_id = p.product_id) )  sub  \\n  group by sub.product_id) subsub",
                "solutionTags": [],
                "code": "select subsub.product_id,\\n       round(subsub.total_revenue/subsub.total_units,2) AS average_price\\nfrom       \\n(select sub.product_id,\\n       CAST(SUM(sub.price * sub.units) AS FLOAT)  AS total_revenue,\\n       CAST(SUM(sub.units) AS FLOAT) AS total_units\\nfrom \\n(select u.product_id,\\n         p.price,\\n         u.units\\n  from UnitsSold u, Prices p\\n  where (u.purchase_date >= p.start_date) AND (u.purchase_date <= p.end_date) AND (u.product_id = p.product_id) )  sub  \\n  group by sub.product_id) subsub",
                "codeTag": "Unknown"
            },
            {
                "id": 4072993,
                "title": "pandas-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    units_sold = units_sold.merge(prices, on=\\'product_id\\', how=\\'left\\')\\n    units_sold[\\'matching\\'] = (units_sold[\\'purchase_date\\'] >= units_sold[\\'start_date\\']) & (units_sold[\\'purchase_date\\'] <= units_sold[\\'end_date\\'])\\n    units_sold = units_sold[units_sold[\\'matching\\']==True]\\n    units_sold[\\'total_spent\\'] = units_sold[\\'units\\']*units_sold[\\'price\\']\\n    units_sold = units_sold.groupby(\\'product_id\\').agg(total_spent=(\\'total_spent\\', lambda x: sum(x)), total_units=(\\'units\\', lambda x: sum(x))).reset_index()\\n    units_sold[\\'average_price\\'] = round(units_sold[\\'total_spent\\']/units_sold[\\'total_units\\'],2)\\n    prices = pd.DataFrame(columns=[\\'product_id\\'], data=prices[\\'product_id\\'].unique())\\n    return prices.merge(units_sold[[\\'product_id\\', \\'average_price\\']], on=\\'product_id\\', how=\\'left\\').fillna(0)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    units_sold = units_sold.merge(prices, on=\\'product_id\\', how=\\'left\\')\\n    units_sold[\\'matching\\'] = (units_sold[\\'purchase_date\\'] >= units_sold[\\'start_date\\']) & (units_sold[\\'purchase_date\\'] <= units_sold[\\'end_date\\'])\\n    units_sold = units_sold[units_sold[\\'matching\\']==True]\\n    units_sold[\\'total_spent\\'] = units_sold[\\'units\\']*units_sold[\\'price\\']\\n    units_sold = units_sold.groupby(\\'product_id\\').agg(total_spent=(\\'total_spent\\', lambda x: sum(x)), total_units=(\\'units\\', lambda x: sum(x))).reset_index()\\n    units_sold[\\'average_price\\'] = round(units_sold[\\'total_spent\\']/units_sold[\\'total_units\\'],2)\\n    prices = pd.DataFrame(columns=[\\'product_id\\'], data=prices[\\'product_id\\'].unique())\\n    return prices.merge(units_sold[[\\'product_id\\', \\'average_price\\']], on=\\'product_id\\', how=\\'left\\').fillna(0)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4066325,
                "title": "new-query",
                "content": "```\\nSelect  Prices.product_id, ifnull(round(sum(units * price)/sum(units),2),0) as average_price  from Prices left join UnitsSold on UnitsSold.purchase_date >= Prices.start_date and UnitsSold.purchase_date <= Prices.end_date and Prices.product_id = UnitsSold.product_id group by Prices.product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect  Prices.product_id, ifnull(round(sum(units * price)/sum(units),2),0) as average_price  from Prices left join UnitsSold on UnitsSold.purchase_date >= Prices.start_date and UnitsSold.purchase_date <= Prices.end_date and Prices.product_id = UnitsSold.product_id group by Prices.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3982050,
                "title": "easy-solution-with-explanation-mysql",
                "content": "```\\n# Write your MySQL query statement below\\nselect p.product_id , round(sum(price*units)/sum(units),2) as average_price from prices p join unitssold u on p.product_id = u.product_id and u.purchase_date between p.start_date and p.end_date group by product_id;\\n```\\n\\n\\n1. `SELECT p.product_id, ...`: This part of the query selects the `product_id` column from the `prices` table and calculates the average price using the formula `(SUM(price * units) / SUM(units))` rounded to two decimal places.\\n\\n2. `FROM prices p`: This specifies the source table as the `prices` table and uses the alias `p` for it.\\n\\n3. `JOIN unitssold u ON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date`: This is a `JOIN` operation between the `prices` table (`p`) and the `unitssold` table (`u`). It joins the tables based on the common `product_id` column and ensures that the `purchase_date` falls within the range defined by the `start_date` and `end_date` columns in the `prices` table.\\n\\n4. `GROUP BY p.product_id`: This groups the results by the `product_id` column, which means that the average price will be calculated separately for each unique product.\\n\\n.\\n.\\n.\\n.\\nUPVOTE PLEASE....\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id , round(sum(price*units)/sum(units),2) as average_price from prices p join unitssold u on p.product_id = u.product_id and u.purchase_date between p.start_date and p.end_date group by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3872899,
                "title": "step-by-step-detailed-solution-easy-to-understand-mysql",
                "content": "This SQL query calculates the average price for each product based on data from the `Prices` and `UnitsSold` tables. The average price is computed by summing the total revenue (`price * units`) for each product in the `UnitsSold` table and then dividing it by the total number of units sold for that product. The result is rounded to two decimal places.\\n\\nLet\\'s break down the query step by step:\\n\\n```sql\\nSELECT t1.product_id,\\n       ROUND(SUM(t1.price * t2.units) / SUM(t2.units), 2) AS average_price\\nFROM Prices AS t1\\nJOIN UnitsSold AS t2\\nON t1.product_id = t2.product_id AND t2.purchase_date BETWEEN t1.start_date AND t1.end_date\\nGROUP BY product_id;\\n```\\n\\n**Explanation:**\\n\\n1. **Main Query:**\\n   ```\\n   SELECT t1.product_id,\\n          ROUND(SUM(t1.price * t2.units) / SUM(t2.units), 2) AS average_price\\n   ```\\n   The main query selects two columns: `product_id` from the `Prices` table (aliased as `t1`) and the `average_price`. The `average_price` is calculated by dividing the total revenue (sum of `price * units`) for each product by the total number of units sold (`SUM(t2.units)`) for that product. The result is rounded to two decimal places using the `ROUND` function.\\n\\n2. **Table Aliases:**\\n   The query uses table aliases `t1` and `t2` for the `Prices` and `UnitsSold` tables, respectively.\\n\\n3. **JOIN:**\\n   ```\\n   FROM Prices AS t1\\n   JOIN UnitsSold AS t2\\n   ON t1.product_id = t2.product_id AND t2.purchase_date BETWEEN t1.start_date AND t1.end_date\\n   ```\\n   The query performs an inner join (`JOIN`) between the `Prices` table (`t1`) and the `UnitsSold` table (`t2`) using the `product_id` column as the joining condition. Additionally, it restricts the joined rows based on the condition that `t2.purchase_date` falls within the range defined by `t1.start_date` and `t1.end_date`.\\n\\n4. **GROUP BY:**\\n   ```\\n   GROUP BY product_id;\\n   ```\\n   The result is grouped by `product_id`. This means that the average price will be calculated separately for each unique product.\\n\\n**Note:**\\nThe query assumes that the `Prices` and `UnitsSold` tables contain columns named `product_id`, `price`, `units`, `start_date`, and `end_date`.\\n\\nThe result of this query will be a list of `product_id` along with their corresponding `average_price`, showing the average price for each product based on the data from the two tables.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT t1.product_id,round(sum(t1.price * t2.units)/sum(t2.units) , 2 )  as average_price  FROM Prices AS t1  JOIN UnitsSold as t2\\nON t1.product_id = t2.product_id and t2.purchase_date between t1.start_date and t1.end_date\\ngroup by product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT t1.product_id,\\n       ROUND(SUM(t1.price * t2.units) / SUM(t2.units), 2) AS average_price\\nFROM Prices AS t1\\nJOIN UnitsSold AS t2\\nON t1.product_id = t2.product_id AND t2.purchase_date BETWEEN t1.start_date AND t1.end_date\\nGROUP BY product_id;\\n```\n```\\n   SELECT t1.product_id,\\n          ROUND(SUM(t1.price * t2.units) / SUM(t2.units), 2) AS average_price\\n   ```\n```\\n   FROM Prices AS t1\\n   JOIN UnitsSold AS t2\\n   ON t1.product_id = t2.product_id AND t2.purchase_date BETWEEN t1.start_date AND t1.end_date\\n   ```\n```\\n   GROUP BY product_id;\\n   ```\n```\\n# Write your MySQL query statement below\\nSELECT t1.product_id,round(sum(t1.price * t2.units)/sum(t2.units) , 2 )  as average_price  FROM Prices AS t1  JOIN UnitsSold as t2\\nON t1.product_id = t2.product_id and t2.purchase_date between t1.start_date and t1.end_date\\ngroup by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3849759,
                "title": "mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n# Write your MySQL query statement below\\nselect distinct p.product_id, round(sum(price * units) / sum(units), 2) as average_price from\\nPrices as p join UnitsSold as U on\\np.product_id  = u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\norder by p.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n# Write your MySQL query statement below\\nselect distinct p.product_id, round(sum(price * units) / sum(units), 2) as average_price from\\nPrices as p join UnitsSold as U on\\np.product_id  = u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\norder by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3595502,
                "title": "very-easy-mysql-solution-with-explanation-beats-80",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- To find the average selling price, we **sum the product of price and units and divide it with the sum of units**. This gives two rows with same product_id as there are two prices for every product (1st testcase).\\n- To find the **average for each product**, we group the output by product_id. \\n- We state a condition such that the **purchase_date is between start_date and end_date**. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. In the SELECT statement, we retrieve the **product_id and the average_price rounded to 2 decimals** as discussed above. \\n2. In the FROM statement, we perform an **INNER JOIN on Prices and UnitsSold** such that P.product_id = U.product_id AND purchase_date BETWEEN start_date and end_date  \\n3. The **GROUP BY clause** groups the output by product_id so we get a single row for every product.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT P.product_id, ROUND(SUM(P.price*U.units)/SUM(U.units),2) as average_price\\nFROM Prices as P INNER JOIN UnitsSold as U\\nON P.product_id = U.product_id AND purchase_date BETWEEN start_date and end_date\\nGROUP BY P.product_id\\n```\\n# Note\\nPlease upvote if you find my solution helpful. If you have any doubts, suggestion or want to discuss any solution, comment it. If you wish to discuss other related topics, feel free to message me on LinkedIn, https://leetcode.com/prathams29/",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT P.product_id, ROUND(SUM(P.price*U.units)/SUM(U.units),2) as average_price\\nFROM Prices as P INNER JOIN UnitsSold as U\\nON P.product_id = U.product_id AND purchase_date BETWEEN start_date and end_date\\nGROUP BY P.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3585368,
                "title": "simple-query-using-inner-join-and-sum",
                "content": "\\n\\n# oracle and mysql\\n```\\n/* Write your PL/SQL query statement below */\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) average_price from Prices p inner join UnitsSold u on p.product_id=u.product_id and p.start_date<= u.purchase_date and p.end_date >= u.purchase_date group by p.product_id;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) average_price from Prices p inner join UnitsSold u on p.product_id=u.product_id and p.start_date<= u.purchase_date and p.end_date >= u.purchase_date group by p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2623520,
                "title": "easy-mysql",
                "content": "```\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) as  average_price\\nfrom prices p\\njoin unitssold u\\non p.product_id=u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) as  average_price\\nfrom prices p\\njoin unitssold u\\non p.product_id=u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2600681,
                "title": "simple-to-understand-with-best-memory-and-faster-than-85-solution",
                "content": "```\\nselect\\n    final_data.product_id\\n    , round(final_data.net_cost/final_data.net_units, 2) as average_price\\nfrom\\n(\\n    select\\n        mstr.product_id\\n        , sum(mstr.cost) as net_cost\\n        , sum(mstr.units) as net_units\\n    from\\n    (\\n        select\\n            pcs.product_id, us.purchase_date, sum(pcs.price*us.units) as cost, sum(us.units) as units\\n        from\\n            Prices pcs\\n        join\\n            UnitsSold us\\n        on\\n            pcs.product_id = us.product_id\\n            and us.purchase_date >= pcs.start_date \\n            and us.purchase_date <= pcs.end_date\\n        group by\\n            us.product_id, us.purchase_date\\n    ) mstr\\n    group by\\n        mstr.product_id\\n) final_data\\ngroup by\\n    final_data.product_id\\n\\n```\\n\\nI hope this is useful for the beginners here. Do upvote if you found it useful.",
                "solutionTags": [],
                "code": "```\\nselect\\n    final_data.product_id\\n    , round(final_data.net_cost/final_data.net_units, 2) as average_price\\nfrom\\n(\\n    select\\n        mstr.product_id\\n        , sum(mstr.cost) as net_cost\\n        , sum(mstr.units) as net_units\\n    from\\n    (\\n        select\\n            pcs.product_id, us.purchase_date, sum(pcs.price*us.units) as cost, sum(us.units) as units\\n        from\\n            Prices pcs\\n        join\\n            UnitsSold us\\n        on\\n            pcs.product_id = us.product_id\\n            and us.purchase_date >= pcs.start_date \\n            and us.purchase_date <= pcs.end_date\\n        group by\\n            us.product_id, us.purchase_date\\n    ) mstr\\n    group by\\n        mstr.product_id\\n) final_data\\ngroup by\\n    final_data.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2560927,
                "title": "simply-solution-over-86-69",
                "content": "SELECT product_id, ROUND(SUM(p.price*u.units)/SUM(u.units),2) AS average_price \\nFROM Prices AS p\\nLEFT JOIN UnitsSold AS u\\nUSING (product_id)\\nWHERE u.purchase_date BETWEEN p.start_date AND p.end_date   \\nGROUP BY product_id",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT product_id, ROUND(SUM(p.price*u.units)/SUM(u.units),2) AS average_price \\nFROM Prices AS p\\nLEFT JOIN UnitsSold AS u\\nUSING (product_id)\\nWHERE u.purchase_date BETWEEN p.start_date AND p.end_date   \\nGROUP BY product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 2391537,
                "title": "mysql-simple-solution",
                "content": "```\\n# Write your MySQL query statement below\\nselect U.product_id, round(sum(U.units * P.price) / sum(U.units),2) as average_price\\nfrom UnitsSold U left outer join Prices P on U.product_id = P.product_id \\nwhere U.purchase_date between P.start_date and P.end_date \\ngroup by U.product_id\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect U.product_id, round(sum(U.units * P.price) / sum(U.units),2) as average_price\\nfrom UnitsSold U left outer join Prices P on U.product_id = P.product_id \\nwhere U.purchase_date between P.start_date and P.end_date \\ngroup by U.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2309684,
                "title": "simple-solution-left-join-with-explanation",
                "content": "```\\n# find the average selling price for each product.\\n#average_price should be rounded to 2 decimal places.\\n\\nSELECT p.product_id,ROUND(SUM(price*units)/SUM(units),2) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id AND (\\n    purchase_date >= start_date AND purchase_date <= end_date\\n)\\nGROUP BY p.product_id\\n\\n```\\nMAIN POINTS:\\n\\n* calculate the average price:\\n```\\nSUM(price*units)/SUM(units)\\n```\\n\\n* USING Left join ON id AND date, to find whether purchase_date IS WITHIN the period in TABLE Prices.\\n```\\npurchase_date >= start_date AND purchase_date <= end_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# find the average selling price for each product.\\n#average_price should be rounded to 2 decimal places.\\n\\nSELECT p.product_id,ROUND(SUM(price*units)/SUM(units),2) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id AND (\\n    purchase_date >= start_date AND purchase_date <= end_date\\n)\\nGROUP BY p.product_id\\n\\n```\n```\\nSUM(price*units)/SUM(units)\\n```\n```\\npurchase_date >= start_date AND purchase_date <= end_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2218338,
                "title": "with-left-join",
                "content": "```\\nselect p.product_id as product_id , round(sum(p.price * u.units) / sum(u.units),2) AS average_price   from prices p\\nleft  join  unitsSold  u \\nON  u.product_id = p.product_id \\nwhere u.purchase_date between p.start_date AND p.end_date \\ngroup by 1 \\n```",
                "solutionTags": [],
                "code": "```\\nselect p.product_id as product_id , round(sum(p.price * u.units) / sum(u.units),2) AS average_price   from prices p\\nleft  join  unitsSold  u \\nON  u.product_id = p.product_id \\nwhere u.purchase_date between p.start_date AND p.end_date \\ngroup by 1 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2067455,
                "title": "mysql-easy-to-understand",
                "content": "SELECT u.product_id, ROUND(SUM(u.units * p.price) / SUM(u.units), 2) AS average_price FROM unitssold u LEFT JOIN prices p ON u.product_id = p.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date GROUP BY u.product_id",
                "solutionTags": [],
                "code": "SELECT u.product_id, ROUND(SUM(u.units * p.price) / SUM(u.units), 2) AS average_price FROM unitssold u LEFT JOIN prices p ON u.product_id = p.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date GROUP BY u.product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 1828316,
                "title": "mysql-solution",
                "content": "```\\nSELECT \\n    us.product_id, ROUND(SUM(us.units*p.price)/SUM(us.units),2) AS average_price\\nFROM UnitsSold us\\nLEFT JOIN Prices p \\nON us.product_id = p.product_id AND us.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY product_id;\\n````",
                "solutionTags": [],
                "code": "```\\nSELECT \\n    us.product_id, ROUND(SUM(us.units*p.price)/SUM(us.units),2) AS average_price\\nFROM UnitsSold us\\nLEFT JOIN Prices p \\nON us.product_id = p.product_id AND us.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1755990,
                "title": "really-simple",
                "content": "```\\nselect unitssold.product_id, round(sum(units *price)/sum(units),2) as average_price\\nfrom unitssold\\njoin prices using (product_id)\\nwhere unitssold.purchase_date between start_date and end_date\\ngroup by 1 \\n```",
                "solutionTags": [],
                "code": "```\\nselect unitssold.product_id, round(sum(units *price)/sum(units),2) as average_price\\nfrom unitssold\\njoin prices using (product_id)\\nwhere unitssold.purchase_date between start_date and end_date\\ngroup by 1 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1710636,
                "title": "simple-mysql-solution",
                "content": "```\\nselect p.product_id as product_id, round(sum(u.units*p.price)/sum(u.units),2) as average_price\\nfrom UnitsSold u, Prices p\\nwhere u.product_id=p.product_id\\nand u.purchase_date between p.start_date and p.end_date\\ngroup by product_id\\n```",
                "solutionTags": [],
                "code": "```\\nselect p.product_id as product_id, round(sum(u.units*p.price)/sum(u.units),2) as average_price\\nfrom UnitsSold u, Prices p\\nwhere u.product_id=p.product_id\\nand u.purchase_date between p.start_date and p.end_date\\ngroup by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1647162,
                "title": "solution-oracle-cte-and-without-cte",
                "content": "```\\n/* Write your PL/SQL query statement below */\\n/* USING CTE */\\nwith cte1 as (\\nSELECT \\n\\tp.product_id, \\n\\t(p.price*u.units) as total_price \\nFROM prices p JOIN UnitsSold u ON p.product_id = u.product_id \\nand u.purchase_date between p.start_date and p.end_date\\n), \\ncte2 as (\\n\\tSELECT product_id, \\n\\t\\t   sum(units) as total_units \\nFROM UnitsSold group by product_id\\n) SELECT cte1.product_id, \\n\\t     coalesce(round((sum(cte1.total_price)/cte2.total_units),2),0.0) as average_price \\n\\tFROM cte1 JOIN cte2 ON cte1.product_id = cte2.product_id \\n\\tGROUP BY cte1.product_id, cte2.total_units;\\n \\n \\n /* Write your PL/SQL query statement below */\\n /* Much Simpler approach */\\n\\nSELECT p.product_id, \\n\\t   coalesce(round(sum(p.price*u.units)/sum(u.units),2),0.0)  as average_price\\nFROM prices p JOIN UnitsSold u ON p.product_id = u.product_id \\nand u.purchase_date between p.start_date and p.end_date \\nGROUP BY p.product_id\\n```",
                "solutionTags": [],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n/* USING CTE */\\nwith cte1 as (\\nSELECT \\n\\tp.product_id, \\n\\t(p.price*u.units) as total_price \\nFROM prices p JOIN UnitsSold u ON p.product_id = u.product_id \\nand u.purchase_date between p.start_date and p.end_date\\n), \\ncte2 as (\\n\\tSELECT product_id, \\n\\t\\t   sum(units) as total_units \\nFROM UnitsSold group by product_id\\n) SELECT cte1.product_id, \\n\\t     coalesce(round((sum(cte1.total_price)/cte2.total_units),2),0.0) as average_price \\n\\tFROM cte1 JOIN cte2 ON cte1.product_id = cte2.product_id \\n\\tGROUP BY cte1.product_id, cte2.total_units;\\n \\n \\n /* Write your PL/SQL query statement below */\\n /* Much Simpler approach */\\n\\nSELECT p.product_id, \\n\\t   coalesce(round(sum(p.price*u.units)/sum(u.units),2),0.0)  as average_price\\nFROM prices p JOIN UnitsSold u ON p.product_id = u.product_id \\nand u.purchase_date between p.start_date and p.end_date \\nGROUP BY p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1575810,
                "title": "mysql-superfast-and-super-easy",
                "content": "select u.product_id, round (sum(units*price)/sum(units), 2) as average_price\\nfrom Prices p \\njoin UnitsSold u\\non   p.product_id = u.product_id\\nwhere  purchase_date between start_date and end_date\\ngroup by p.product_id",
                "solutionTags": [],
                "code": "select u.product_id, round (sum(units*price)/sum(units), 2) as average_price\\nfrom Prices p \\njoin UnitsSold u\\non   p.product_id = u.product_id\\nwhere  purchase_date between start_date and end_date\\ngroup by p.product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 1552070,
                "title": "easy-to-understand-mysql",
                "content": "```\\nwith tmp as(\\nselect p.product_id,sum(units*price) as revenue, sum(units) as quantity\\nfrom Prices p \\njoin UnitsSold u\\non p.product_id = u.product_id\\nwhere purchase_date between start_date and end_date\\ngroup by p.product_id)\\n\\nselect product_id, round(revenue/quantity,2) as average_price\\nfrom tmp;\\n```",
                "solutionTags": [],
                "code": "```\\nwith tmp as(\\nselect p.product_id,sum(units*price) as revenue, sum(units) as quantity\\nfrom Prices p \\njoin UnitsSold u\\non p.product_id = u.product_id\\nwhere purchase_date between start_date and end_date\\ngroup by p.product_id)\\n\\nselect product_id, round(revenue/quantity,2) as average_price\\nfrom tmp;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1492181,
                "title": "mysql",
                "content": "\\'\\'\\'\\nSELECT p.product_id, ROUND(SUM(p.price*u.units)/SUM(u.units),2) AS average_price\\nFROM Prices p LEFT JOIN UnitsSold u ON\\np.product_id=u.product_id\\nWHERE u.purchase_date>= p.start_date AND u.purchase_date<= p.end_date\\nGROUP BY p.product_id\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\nSELECT p.product_id, ROUND(SUM(p.price*u.units)/SUM(u.units),2) AS average_price\\nFROM Prices p LEFT JOIN UnitsSold u ON\\np.product_id=u.product_id\\nWHERE u.purchase_date>= p.start_date AND u.purchase_date<= p.end_date\\nGROUP BY p.product_id\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 1439610,
                "title": "simple-mysql-using-cte-and-sum",
                "content": "```\\nWITH cte AS (\\n    SELECT u.*, p.price, p.start_date, p.end_date, u.units*p.price AS \\'revenue\\'\\n    FROM UnitsSold u INNER JOIN Prices p\\n    ON u.product_id = p.product_id \\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND((SUM(revenue)/SUM(units)), 2)  AS \\'average_price\\'\\nFROM cte \\nGROUP BY 1\\nORDER BY 1",
                "solutionTags": [],
                "code": "```\\nWITH cte AS (\\n    SELECT u.*, p.price, p.start_date, p.end_date, u.units*p.price AS \\'revenue\\'\\n    FROM UnitsSold u INNER JOIN Prices p\\n    ON u.product_id = p.product_id \\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND((SUM(revenue)/SUM(units)), 2)  AS \\'average_price\\'\\nFROM cte \\nGROUP BY 1\\nORDER BY 1",
                "codeTag": "Unknown"
            },
            {
                "id": 1412787,
                "title": "mysql-without-subquery",
                "content": "```\\nSELECT \\n\\tP.product_id,\\n    ROUND(SUM(p.price * u.units) / SUM(u.units), 2) as average_price\\nFROM \\n        unitssold u \\n JOIN \\n        prices p\\nON \\n        p.product_id = u.product_id and u.purchase_date>=p.start_date and u.purchase_date<=p.end_date group by p.product_id;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n\\tP.product_id,\\n    ROUND(SUM(p.price * u.units) / SUM(u.units), 2) as average_price\\nFROM \\n        unitssold u \\n JOIN \\n        prices p\\nON \\n        p.product_id = u.product_id and u.purchase_date>=p.start_date and u.purchase_date<=p.end_date group by p.product_id;",
                "codeTag": "Unknown"
            },
            {
                "id": 1325647,
                "title": "faster-than-89-35-of-mysql-online-submissions",
                "content": "\\nSELECT PRODUCT_ID, ROUND(SOLD/UNITS,2) AS AVERAGE_PRICE\\nFROM\\n(\\n    SELECT A.PRODUCT_ID\\n, SUM(B.UNITS*PRICE) AS SOLD\\n ,SUM(UNITS) AS UNITS\\nFROM PRICES AS A\\nLEFT JOIN UNITSSOLD AS B\\nON A.PRODUCT_ID=B.PRODUCT_ID AND B.PURCHASE_DATE BETWEEN START_DATE AND END_DATE\\nGROUP BY 1\\n)\\nAS A",
                "solutionTags": [],
                "code": "\\nSELECT PRODUCT_ID, ROUND(SOLD/UNITS,2) AS AVERAGE_PRICE\\nFROM\\n(\\n    SELECT A.PRODUCT_ID\\n, SUM(B.UNITS*PRICE) AS SOLD\\n ,SUM(UNITS) AS UNITS\\nFROM PRICES AS A\\nLEFT JOIN UNITSSOLD AS B\\nON A.PRODUCT_ID=B.PRODUCT_ID AND B.PURCHASE_DATE BETWEEN START_DATE AND END_DATE\\nGROUP BY 1\\n)\\nAS A",
                "codeTag": "Unknown"
            },
            {
                "id": 1213207,
                "title": "mysql-solution",
                "content": "```\\n# Write your MySQL query statement below\\n\\nwith temp as\\n(\\nselect p.product_id , price , units , price * units as tot_price\\nfrom prices p join unitssold u\\non p.product_id = u.product_id\\nwhere  purchase_date  between start_date and end_date\\n)\\n\\nselect product_id , round(sum(tot_price)/sum(units),2) as average_price\\nfrom temp\\ngroup by product_id\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\n\\nwith temp as\\n(\\nselect p.product_id , price , units , price * units as tot_price\\nfrom prices p join unitssold u\\non p.product_id = u.product_id\\nwhere  purchase_date  between start_date and end_date\\n)\\n\\nselect product_id , round(sum(tot_price)/sum(units),2) as average_price\\nfrom temp\\ngroup by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1078607,
                "title": "simple-mssql-4-line-solution",
                "content": "select product_id, round(sum(units*price)*1.00/sum(units),2) as average_price\\nfrom (select u.*, p.price \\nfrom unitssold u join prices p on u.product_id=p.product_id \\nwhere u.purchase_date between p.start_date and p.end_date) t \\ngroup by t.product_id;",
                "solutionTags": [],
                "code": "select product_id, round(sum(units*price)*1.00/sum(units),2) as average_price\\nfrom (select u.*, p.price \\nfrom unitssold u join prices p on u.product_id=p.product_id \\nwhere u.purchase_date between p.start_date and p.end_date) t \\ngroup by t.product_id;",
                "codeTag": "Unknown"
            },
            {
                "id": 939688,
                "title": "mysql-and-mssql-round-syntax-diff",
                "content": "mysql\\n```\\nselect p.product_id, \\nround(sum(u.units * p.price) / sum(u.units) ,2) as average_price\\nfrom UnitsSold u, prices p\\nwhere u.product_id = p.product_id\\nand (u.purchase_date between p.start_date and p.end_date)\\ngroup by p.product_id\\n```\\nmssql\\n```\\nselect p.product_id, Round((cast (sum(u.units * p.price) as float) / sum(u.units)), 2) as average_price\\nfrom prices p\\njoin unitssold u\\non u.product_id = p.product_id\\nwhere u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "solutionTags": [],
                "code": "```\\nselect p.product_id, \\nround(sum(u.units * p.price) / sum(u.units) ,2) as average_price\\nfrom UnitsSold u, prices p\\nwhere u.product_id = p.product_id\\nand (u.purchase_date between p.start_date and p.end_date)\\ngroup by p.product_id\\n```\n```\\nselect p.product_id, Round((cast (sum(u.units * p.price) as float) / sum(u.units)), 2) as average_price\\nfrom prices p\\njoin unitssold u\\non u.product_id = p.product_id\\nwhere u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 854011,
                "title": "neat-and-simple-mysql",
                "content": "select  product_id,\\n\\nround(sum(units*price)/ sum(units) ,2)  as average_price from (\\n\\nselect a.*, units from prices a \\njoin unitssold b on \\na.product_id  =  b.product_id and \\na.start_date <= b.purchase_date and\\na.end_date  >= b.purchase_date ) as K\\ngroup by product_id",
                "solutionTags": [],
                "code": "select  product_id,\\n\\nround(sum(units*price)/ sum(units) ,2)  as average_price from (\\n\\nselect a.*, units from prices a \\njoin unitssold b on \\na.product_id  =  b.product_id and \\na.start_date <= b.purchase_date and\\na.end_date  >= b.purchase_date ) as K\\ngroup by product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 753201,
                "title": "ms-sql-server",
                "content": "```\\nselect p.product_id,\\nround(cast(sum(u.units*p.price) as float)/sum(u.units),2) as average_price from Prices p join UnitsSold u on\\np.product_id = u.product_id and p.start_date <= u.purchase_date and\\np.end_date>=u.purchase_date\\ngroup by p.product_id\\n```",
                "solutionTags": [],
                "code": "```\\nselect p.product_id,\\nround(cast(sum(u.units*p.price) as float)/sum(u.units),2) as average_price from Prices p join UnitsSold u on\\np.product_id = u.product_id and p.start_date <= u.purchase_date and\\np.end_date>=u.purchase_date\\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 700830,
                "title": "easy-mysql-solution-using-joins-and-group-by",
                "content": "```\\nselect p1.product_id, round((sum(p1.price*p2.units)/(sum(p2.units))),2) as average_price from prices p1 join UnitsSold p2\\non p1.product_id =p2.product_id and p2.purchase_date between p1.start_date and p1.end_date group by product_id;\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect p1.product_id, round((sum(p1.price*p2.units)/(sum(p2.units))),2) as average_price from prices p1 join UnitsSold p2\\non p1.product_id =p2.product_id and p2.purchase_date between p1.start_date and p1.end_date group by product_id;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 666521,
                "title": "simple-fast-and-concise-mysql",
                "content": "```\\nselect product_id, round(sum(units*price)/sum(units),2) as average_price\\nfrom prices p \\njoin unitssold u \\nusing (product_id) \\nwhere purchase_date between start_date and end_date\\ngroup by product_id\\n```\\n",
                "solutionTags": [],
                "code": "```\\nselect product_id, round(sum(units*price)/sum(units),2) as average_price\\nfrom prices p \\njoin unitssold u \\nusing (product_id) \\nwhere purchase_date between start_date and end_date\\ngroup by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 539517,
                "title": "mysql-simply-using-round-sum-and-between-with-inline-comments",
                "content": "```\\nSELECT \\n    Prices.product_id, \\n    # Round result to 2 places\\n    ROUND(\\n        # With Group By and Where Between Sum up total price\\n        SUM(UnitsSold.units * Prices.price) / \\n        # Divide by total units to get average\\n        SUM(UnitsSold.units), \\n        2) as average_price\\nFROM Prices, UnitsSold\\nWHERE \\n    Prices.product_id = UnitsSold.product_id\\n    AND\\n    # Get correct prices by checking in data range\\n    UnitsSold.purchase_date between Prices.start_date and Prices.end_date\\nGROUP By Prices.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n    Prices.product_id, \\n    # Round result to 2 places\\n    ROUND(\\n        # With Group By and Where Between Sum up total price\\n        SUM(UnitsSold.units * Prices.price) / \\n        # Divide by total units to get average\\n        SUM(UnitsSold.units), \\n        2) as average_price\\nFROM Prices, UnitsSold\\nWHERE \\n    Prices.product_id = UnitsSold.product_id\\n    AND\\n    # Get correct prices by checking in data range\\n    UnitsSold.purchase_date between Prices.start_date and Prices.end_date\\nGROUP By Prices.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 514492,
                "title": "ms-sql-solution-95-fast",
                "content": "select p.product_id, round(sum(price*units)*1.0/sum(units)*1.0, 2) as average_price\\nfrom Prices p JOIN UnitsSold u\\non p.product_id = u.product_id\\nwhere purchase_date between start_date and end_date\\ngroup by p.product_id",
                "solutionTags": [],
                "code": "select p.product_id, round(sum(price*units)*1.0/sum(units)*1.0, 2) as average_price\\nfrom Prices p JOIN UnitsSold u\\non p.product_id = u.product_id\\nwhere purchase_date between start_date and end_date\\ngroup by p.product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 463940,
                "title": "mysql-beats-95",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT AGG.product_id, \\nROUND(SUM(AGG.sales) / SUM(AGG.units), 2) \\'average_price\\'\\nFROM (SELECT Prices.product_id, price, units, (price * units) \\'sales\\'\\nFROM Prices\\nLEFT JOIN UnitsSold\\nON Prices.product_id = UnitsSold.product_id\\nWHERE UnitsSold.purchase_date \\nBETWEEN Prices.start_date AND Prices.end_date) AS AGG\\nGROUP BY AGG.product_id",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT AGG.product_id, \\nROUND(SUM(AGG.sales) / SUM(AGG.units), 2) \\'average_price\\'\\nFROM (SELECT Prices.product_id, price, units, (price * units) \\'sales\\'\\nFROM Prices\\nLEFT JOIN UnitsSold\\nON Prices.product_id = UnitsSold.product_id\\nWHERE UnitsSold.purchase_date \\nBETWEEN Prices.start_date AND Prices.end_date) AS AGG\\nGROUP BY AGG.product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 434108,
                "title": "easy-to-understand-sql",
                "content": "select \\np.product_id as product_id,\\nround((sum(s.units * p.price)/ sum(s.units)),2) as average_price\\nfrom Prices p\\nleft join UnitsSold s on p.product_id = s.product_id\\nwhere s.purchase_date between p.start_date and p.end_date\\ngroup by product_id",
                "solutionTags": [],
                "code": "select \\np.product_id as product_id,\\nround((sum(s.units * p.price)/ sum(s.units)),2) as average_price\\nfrom Prices p\\nleft join UnitsSold s on p.product_id = s.product_id\\nwhere s.purchase_date between p.start_date and p.end_date\\ngroup by product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 433877,
                "title": "mysql-table-join",
                "content": "\\n```\\nSELECT \\n    p.product_id, \\n    ROUND(SUM(p.price*u.units)/SUM(u.units), 2) AS average_price\\nFROM \\n    Prices p JOIN UnitsSold u \\n    ON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\nORDER BY 1; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n    p.product_id, \\n    ROUND(SUM(p.price*u.units)/SUM(u.units), 2) AS average_price\\nFROM \\n    Prices p JOIN UnitsSold u \\n    ON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\nORDER BY 1; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 425734,
                "title": "simple-mysql-solution-using-inner-join-without-subquery",
                "content": "```\\nselect a.product_id, round(sum(price*units)/sum(units),2) as average_price\\nfrom \\nprices a inner join unitssold b on a.product_id = b.product_id and b.purchase_date between a.start_date and a.end_date\\ngroup by product_id\\n```",
                "solutionTags": [],
                "code": "```\\nselect a.product_id, round(sum(price*units)/sum(units),2) as average_price\\nfrom \\nprices a inner join unitssold b on a.product_id = b.product_id and b.purchase_date between a.start_date and a.end_date\\ngroup by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 424327,
                "title": "easy-to-understand-mysql-current-100",
                "content": "```\\nselect product_id,\\n       round(sum(price * units)/sum(units),2) as average_price\\nfrom(\\nselect p.product_id, p.price, u.units\\nfrom Prices p\\nleft join UnitsSold u\\non p.product_id = u.product_id and\\nu.purchase_date between p.start_date and p.end_date) as a\\ngroup by product_id;\\n```",
                "solutionTags": [],
                "code": "```\\nselect product_id,\\n       round(sum(price * units)/sum(units),2) as average_price\\nfrom(\\nselect p.product_id, p.price, u.units\\nfrom Prices p\\nleft join UnitsSold u\\non p.product_id = u.product_id and\\nu.purchase_date between p.start_date and p.end_date) as a\\ngroup by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 424226,
                "title": "mysql-solution",
                "content": "```\\nSELECT P.product_id, ROUND(SUM(units * price) / SUM(units), 2) as average_price\\nFROM Prices as P\\nJOIN UnitsSold as U\\nON  P.product_id = U.product_id\\nAND (U.purchase_date BETWEEN P.start_date AND P.end_date)\\nGROUP BY product_id;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT P.product_id, ROUND(SUM(units * price) / SUM(units), 2) as average_price\\nFROM Prices as P\\nJOIN UnitsSold as U\\nON  P.product_id = U.product_id\\nAND (U.purchase_date BETWEEN P.start_date AND P.end_date)\\nGROUP BY product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 423657,
                "title": "simpler-oracle-sql",
                "content": "select u.product_id \"product_id\", round(sum(u.units*p.price)/sum(u.units), 2) \"average_price\" \\nfrom  prices p, UnitsSold u\\nwhere p.product_id = u.product_id and\\n      u.purchase_date between start_date and end_date\\ngroup by u.product_id",
                "solutionTags": [],
                "code": "select u.product_id \"product_id\", round(sum(u.units*p.price)/sum(u.units), 2) \"average_price\" \\nfrom  prices p, UnitsSold u\\nwhere p.product_id = u.product_id and\\n      u.purchase_date between start_date and end_date\\ngroup by u.product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 4107016,
                "title": "step-by-step-full-explanation-edge-case-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have to use join here as we need result from both the table. As we need product_id which are under a specific date so \"BETWEEN\" method comes to mind.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nOur scenario involves two tables: Prices and UnitsSold. The Prices table stores historical price data for products, while the UnitsSold table records sales transactions. To find the average selling price for each product, we must follow these steps:\\n\\n1. Join the Prices and UnitsSold tables using the product_id as the key.\\n\\n2. Calculate the revenue generated by each sale by multiplying the product\\'s price by the number of units sold.\\n\\n3. Sum the revenues for each product.\\n\\n4. Sum the total units sold for each product.\\n\\n5. Divide the total revenue by the total units sold to compute the average selling price.\\n\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id,IFNULL(round((sum(p.price*u.units)/sum(u.units)),2),0) as average_price\\nfrom unitssold u right join prices p on u.product_id=p.product_id and u.purchase_date between p.start_date and p.end_date group by product_id\\n\\n```\\n# Difference between using AND/ WHERE, what is IFNULL\\n\\nI faced problems passing the test case where product_id was present in price table but not in the another table.\\nI was using where condition and I was not able to get the correct output.\\n \\n**So, the key difference lies in how the WHERE clause affects the join:**\\n\\n- Using AND in the join condition includes all products from the left table (prices) and only matches those from the right table (unitssold) where the condition holds. It retains products from the left table with no matches in the right table, giving you the expected result.\\n\\n- Using WHERE for filtering after the join effectively turns it into an inner join, excluding products from the left table with no matches in the right table, which may not be what you want. \\n\\n**IFNULL**\\nThe IFNULL() function returns a specified value if the expression is NULL.\\nIFNULL is used here to provide a default value of 0 for the average_price when there are no sales data for a product i.e product_id is not present in unitsSold table, ensuring that the result is always a number.\\n\\n\\nUPVOTE button is on bottom left side.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id,IFNULL(round((sum(p.price*u.units)/sum(u.units)),2),0) as average_price\\nfrom unitssold u right join prices p on u.product_id=p.product_id and u.purchase_date between p.start_date and p.end_date group by product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4105907,
                "title": "very-simple-solution-by-using-subquery",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT\\nsub.C as product_id\\n,COALESCE(ROUND(SUM(sub.D * sub.E) / SUM(sub.E),2),0) as average_price\\nFROM\\n(SELECT\\nA.product_id as C\\n,A.price as D\\n,COALESCE(CASE WHEN B.purchase_date BETWEEN A.start_date AND end_date THEN B.units END,0) as E\\nFROM Prices A\\nLEFT JOIN UnitsSold B\\nUSING(product_id)) sub\\nGROUP BY 1",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT\\nsub.C as product_id\\n,COALESCE(ROUND(SUM(sub.D * sub.E) / SUM(sub.E),2),0) as average_price\\nFROM\\n(SELECT\\nA.product_id as C\\n,A.price as D\\n,COALESCE(CASE WHEN B.purchase_date BETWEEN A.start_date AND end_date THEN B.units END,0) as E\\nFROM Prices A\\nLEFT JOIN UnitsSold B\\nUSING(product_id)) sub\\nGROUP BY 1",
                "codeTag": "Unknown"
            },
            {
                "id": 4103634,
                "title": "funny-simple-as-hell-beats-97-91-of-users-memory-efficient-solution",
                "content": "# Approach\\n1. We joined ***Prices*** and ***UnitsSold*** using left join to get all the rows from the prices table.\\n2. Instead of writing the condition in the where clause, we wrote it after the ***ON*** statement to exclude all the products having average as 0.\\n3. We then grouped the result by ***product_id*** as we used aggregate function inside the ***SELECT*** statement.\\n4. To handle null in the query results, we used the ***IFNULL()*** to be on the safer side.\\n\\n![meme.jpg](https://assets.leetcode.com/users/images/c0889553-6668-4776-947b-9abab7093f35_1695965150.8584096.jpeg)\\n\\n\\n# Complexity\\n- Time complexity: 1223ms (Beats 97.91% of users)\\n\\n- Space complexity: 0.00 MB (Beats 100% uf users)\\n\\nLet\\'s look at the code to get more understanding of the approach.\\n\\n# Code\\n```\\nSELECT\\n    p.product_id AS product_id,\\n    IFNULL(ROUND(SUM(p.price * s.units) / SUM(s.units), 2), 0) AS average_price\\n\\nFROM Prices p\\n\\nLEFT JOIN UnitsSold s\\n\\nON p.product_id = s.product_id AND\\ns.purchase_date BETWEEN p.start_date AND p.end_date\\n\\nGROUP BY p.product_id;\\n```\\n",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT\\n    p.product_id AS product_id,\\n    IFNULL(ROUND(SUM(p.price * s.units) / SUM(s.units), 2), 0) AS average_price\\n\\nFROM Prices p\\n\\nLEFT JOIN UnitsSold s\\n\\nON p.product_id = s.product_id AND\\ns.purchase_date BETWEEN p.start_date AND p.end_date\\n\\nGROUP BY p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4102785,
                "title": "1251-average-selling-price-solution-and-detailed-explanations",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id, \\nifnull(round(sum(price * units)/sum(units), 2),0) as average_price\\n    from Prices p LEFT JOIN UnitsSold u\\n    on p.product_id = u.product_id \\n    and u.purchase_date BETWEEN start_date AND end_date\\n    group by product_id\\n```\\n\\n# Intuition\\nPrint out the \"product id\" and the average price of each product.\\n\\n# Steps\\nselect p.product_id, \\n- Selects the \"product_id\" column from the \"Prices\" table.\\n\\nifnull(round(sum(price * units)/sum(units), 2), 0) as average_price \\n- sum(price * units): total revenue = \"price\" * \"units\"\\n- sum(units): total number of units sold for each product.\\n- sum(price * units)/sum(units) computes the average price \\n- round(..., 2) rounds the average price to two decimal places.\\n- ifnull(..., 0)If there are no records, it returns 0 as the average price.\\n\\nfrom Prices p LEFT JOIN UnitsSold u on p.product_id = u.product_id and u.purchase_date BETWEEN start_date AND end_date \\n- The data is being retrieved from the \"Prices\" and the \"UnitsSold\" table. It performs a LEFT JOIN operation between the two tables based on the \"product_id\" column. \\n- it filters the results by checking if the \"purchase_date\" falls within the specified \"start_date\" and \"end_date\" range.\\n\\ngroup by product_id \\n- This groups the results by the \"product_id.\" It means that the calculations (average price) will be done for each unique product, and the results will be presented in a tabular format with one row per product, showing the product\\'s unique identifier (\"product_id\") and the corresponding average price within the specified date range.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id, \\nifnull(round(sum(price * units)/sum(units), 2),0) as average_price\\n    from Prices p LEFT JOIN UnitsSold u\\n    on p.product_id = u.product_id \\n    and u.purchase_date BETWEEN start_date AND end_date\\n    group by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4099523,
                "title": "mysql-easy-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id, COALESCE(round(sum(p.price * u.units)/sum(u.units), 2), 0) as average_price\\nfrom prices as p left join unitssold as u\\non p.product_id = u.product_id\\nwhere u.purchase_date is null or u.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\ngroup by p.product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id, COALESCE(round(sum(p.price * u.units)/sum(u.units), 2), 0) as average_price\\nfrom prices as p left join unitssold as u\\non p.product_id = u.product_id\\nwhere u.purchase_date is null or u.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\ngroup by p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4098495,
                "title": "pass-testcase-16",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach \\n<!-- Describe your approach to solving the problem. -->\\nNeed to use \"where purchase_date between start_date and end_date **or purchase_date is Null**\" to keep all of the product_id of prices. Otherwise not passing test case 16\\n\\n# Complexity\\n- Time complexity: 1326ms, beats 92.59%\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect\\n    product_id,\\n    if(units is not Null,round(sum(price*units)/sum(units),2),0)   as average_price\\nfrom prices \\nleft join unitssold using (product_id)\\nwhere purchase_date between start_date and end_date or purchase_date is Null\\ngroup by product_id\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect\\n    product_id,\\n    if(units is not Null,round(sum(price*units)/sum(units),2),0)   as average_price\\nfrom prices \\nleft join unitssold using (product_id)\\nwhere purchase_date between start_date and end_date or purchase_date is Null\\ngroup by product_id\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096992,
                "title": "using-coalesce-and-sum",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.product_id, COALESCE(ROUND(SUM(p.price*u.units)/SUM(u.units),2),0) as average_price FROM Prices p LEFT JOIN UnitsSold u ON p.product_id=u.product_id WHERE u.purchase_date between p.start_date AND  p.end_date OR u.units  IS NULL GROUP BY p.product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT p.product_id, COALESCE(ROUND(SUM(p.price*u.units)/SUM(u.units),2),0) as average_price FROM Prices p LEFT JOIN UnitsSold u ON p.product_id=u.product_id WHERE u.purchase_date between p.start_date AND  p.end_date OR u.units  IS NULL GROUP BY p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4095883,
                "title": "the-most-basic-but-working-approach-two-selects-union-runtime-1411-ms-beats-86-19",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe most basic approach is to use aggregation functions in order to get the values that you need kinda straitforward\\nBut, considering that there are an edge case where there is a product, but it never been sold, we need to get it using another **select** with **union**. It could be done better, but this is the most basic approach that you will certainly think of if you get this on interview.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere we are using two selects: \\n- first one is responsible for getting all the non-zero values (values that are not in described edge-case) where formula for average price looks like this:\\n```\\nsum(price * units) / sum(units)\\n``` \\n- second one is used for getting all the **product_id**-s that are not in **UnitsSold** table\\nAfter writing two selects we just need to combine them using **union**\\n\\n# Code\\n``` \\nselect \\n    p.product_id, \\n    round(sum(price * units) / sum(units), 2) average_price\\nfrom prices p\\nleft join unitssold us on p.product_id = us.product_id\\nwhere purchase_date between start_date and end_date\\ngroup by p.product_id\\nunion\\nselect p.product_id, 0 average_price from prices p\\nwhere p.product_id not in (select product_id from unitssold)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nsum(price * units) / sum(units)\\n```\n``` \\nselect \\n    p.product_id, \\n    round(sum(price * units) / sum(units), 2) average_price\\nfrom prices p\\nleft join unitssold us on p.product_id = us.product_id\\nwhere purchase_date between start_date and end_date\\ngroup by p.product_id\\nunion\\nselect p.product_id, 0 average_price from prices p\\nwhere p.product_id not in (select product_id from unitssold)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4094862,
                "title": "my-answer-is-working-perfectly-fine-but-hope-someone-can-improve-it-a-little-bit",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIn base scenario, it is straightforward to use below formula to calculate average:\\naverage price = sum(price * unit)/sum(unit)\\nHowever, we need to deal with corner case where no unit is purchased at all for a product, which lead to sum(unit) is null\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStep 1: convert the null value to be 0 when calculating the total price. \\nsum(case when units is null then 0 else price*units end)\\nStep 2:  sum(unit) cannot be null, it can be any value except 0 since price will be 0 anyway, so I use 1 as dummy number here\\ncoalesce(sum(units),1)\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect a.product_id, round(sum(case when b.units is null then 0 else a.price*b.units end)/coalesce(sum(b.units),1),2) as average_price\\nfrom Prices a left join UnitsSold b\\non a.product_id = b.product_id and (b.purchase_date between start_date and end_date)\\ngroup by a.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect a.product_id, round(sum(case when b.units is null then 0 else a.price*b.units end)/coalesce(sum(b.units),1),2) as average_price\\nfrom Prices a left join UnitsSold b\\non a.product_id = b.product_id and (b.purchase_date between start_date and end_date)\\ngroup by a.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4094761,
                "title": "mssql-solution-2023",
                "content": "# Code\\n```\\nSELECT\\n    P.PRODUCT_ID,\\n    ISNULL(ROUND(CAST(SUM(P.PRICE * Q.UNITS) as float)/ NULLIF(SUM(Q.UNITS), 0), 2), 0) AS average_price\\nFROM PRICES P\\nLEFT JOIN UnitsSold Q ON P.PRODUCT_ID = Q.PRODUCT_ID\\n    AND P.START_DATE <= Q.PURCHASE_DATE\\n    AND P.END_DATE >= Q.PURCHASE_DATE\\nGROUP BY P.PRODUCT_ID;\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT\\n    P.PRODUCT_ID,\\n    ISNULL(ROUND(CAST(SUM(P.PRICE * Q.UNITS) as float)/ NULLIF(SUM(Q.UNITS), 0), 2), 0) AS average_price\\nFROM PRICES P\\nLEFT JOIN UnitsSold Q ON P.PRODUCT_ID = Q.PRODUCT_ID\\n    AND P.START_DATE <= Q.PURCHASE_DATE\\n    AND P.END_DATE >= Q.PURCHASE_DATE\\nGROUP BY P.PRODUCT_ID;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093406,
                "title": "pandas-solution-with-apply-and-user-defined-function-to-lookup-price-value",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI used a user defined function with the apply method to find the correct price.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n\\n  def find_price(df):\\n    product_id = df[\\'product_id\\']\\n    purchase_date = df[\\'purchase_date\\']\\n    price = prices[(( product_id == prices[\\'product_id\\']) & (purchase_date>= prices[\\'start_date\\']) & (purchase_date <= prices[\\'end_date\\']))][\\'price\\']\\n    return(price.iloc[0])\\n\\n  calculate_average = units_sold\\n  calculate_average[\\'price\\'] = calculate_average.apply(lambda x: find_price(x),axis=1)\\n  calculate_average[\\'total_purchased\\'] = calculate_average[\\'units\\'] * units_sold[\\'price\\']\\n  calculate_average = calculate_average.groupby(\\'product_id\\')[[\\'units\\',\\'total_purchased\\']].sum().assign(average_price = lambda x : round(x[\\'total_purchased\\']/x[\\'units\\'],2)).reset_index()[[\\'product_id\\',\\'average_price\\']]\\n\\n  output = pd.merge(prices[[\\'product_id\\']].drop_duplicates(),calculate_average,on=\\'product_id\\',how=\\'left\\').fillna(0)\\n  return output\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n\\n  def find_price(df):\\n    product_id = df[\\'product_id\\']\\n    purchase_date = df[\\'purchase_date\\']\\n    price = prices[(( product_id == prices[\\'product_id\\']) & (purchase_date>= prices[\\'start_date\\']) & (purchase_date <= prices[\\'end_date\\']))][\\'price\\']\\n    return(price.iloc[0])\\n\\n  calculate_average = units_sold\\n  calculate_average[\\'price\\'] = calculate_average.apply(lambda x: find_price(x),axis=1)\\n  calculate_average[\\'total_purchased\\'] = calculate_average[\\'units\\'] * units_sold[\\'price\\']\\n  calculate_average = calculate_average.groupby(\\'product_id\\')[[\\'units\\',\\'total_purchased\\']].sum().assign(average_price = lambda x : round(x[\\'total_purchased\\']/x[\\'units\\'],2)).reset_index()[[\\'product_id\\',\\'average_price\\']]\\n\\n  output = pd.merge(prices[[\\'product_id\\']].drop_duplicates(),calculate_average,on=\\'product_id\\',how=\\'left\\').fillna(0)\\n  return output\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4093010,
                "title": "mysql-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT \\n  p.product_id\\n  , IFNULL(ROUND(SUM(p.price * u.units) / SUM(u.units), 2), 0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n  p.product_id\\n  , IFNULL(ROUND(SUM(p.price * u.units) / SUM(u.units), 2), 0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092760,
                "title": "easy-approch-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUsing simple Join statement to join both tables\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing between operator to comparte dates \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect  p.product_id, if(Sum(s.units)!=0,round( (Sum(s.units*p.price)/Sum(s.units)),2),0) as average_price\\nfrom Prices p\\nleft join UnitsSold s\\non s.product_id=p.product_id and s.purchase_date Between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect  p.product_id, if(Sum(s.units)!=0,round( (Sum(s.units*p.price)/Sum(s.units)),2),0) as average_price\\nfrom Prices p\\nleft join UnitsSold s\\non s.product_id=p.product_id and s.purchase_date Between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092141,
                "title": "pandas-shortest-clean-code-explanation-line-by-line",
                "content": "# Intuition\\n1. We have to to calculate for each product transaction, what was its price at the moment of transaction. Calculate total at that moment as multiplication of price and units sold.\\n2. Sum all total prices and total units sold for each product\\n3. Divide total sum by total units to get total average of product.\\n4. At the end, we have to consider if product wasnt sold at all, then its average selling price would be 0 - to do it, join on left id of all products that have price with calculated dataframe of average prices, fill Nulls with 0.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    df = prices.merge(units_sold, on=\"product_id\").query(\"start_date <= purchase_date <= end_date\").eval(\"total = units * price\")\\n    df = df.groupby(\"product_id\",as_index = False).agg(total = (\"total\",\"sum\"), units = (\"units\",\"sum\"))\\n    df = df.assign(average_price = df.total / df.units)[[\"product_id\",\"average_price\"]].round(2)\\n    return prices[[\"product_id\"]].drop_duplicates().merge(df, on =\"product_id\",how = \"left\").fillna(0)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    df = prices.merge(units_sold, on=\"product_id\").query(\"start_date <= purchase_date <= end_date\").eval(\"total = units * price\")\\n    df = df.groupby(\"product_id\",as_index = False).agg(total = (\"total\",\"sum\"), units = (\"units\",\"sum\"))\\n    df = df.assign(average_price = df.total / df.units)[[\"product_id\",\"average_price\"]].round(2)\\n    return prices[[\"product_id\"]].drop_duplicates().merge(df, on =\"product_id\",how = \"left\").fillna(0)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4090034,
                "title": "all-test-case-pass",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT\\n    p.product_id,\\n    COALESCE(ROUND(SUM(u.units * p.price) / NULLIF(SUM(u.units), 0), 2), 0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id AND u.purchase_date >= p.start_date AND u.purchase_date <= p.end_date\\nGROUP BY p.product_id;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT\\n    p.product_id,\\n    COALESCE(ROUND(SUM(u.units * p.price) / NULLIF(SUM(u.units), 0), 2), 0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id AND u.purchase_date >= p.start_date AND u.purchase_date <= p.end_date\\nGROUP BY p.product_id;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088196,
                "title": "easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect product_id,coalesce(round(sum(mul)/sum(units),2),0) as average_price from (select p.product_id,price,units,price*units as mul from prices as p left join unitssold as r on p.product_id=r.product_id where purchase_date between start_date and end_date or purchase_date is null)\\nas rp\\ngroup by product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id,coalesce(round(sum(mul)/sum(units),2),0) as average_price from (select p.product_id,price,units,price*units as mul from prices as p left join unitssold as r on p.product_id=r.product_id where purchase_date between start_date and end_date or purchase_date is null)\\nas rp\\ngroup by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087845,
                "title": "ms-sql-server-solution-that-beats-95-18",
                "content": "# Intuition\\nThe date from the purchase_date column of the second table must fall between the start_date and end_date of the first table.\\n\\nAlso, all the columns that we need to calculate are of type INT.\\n\\nHence, we also need to type cast the resulting column into DOUBLE or FLOAT.\\n\\n# Approach\\nTo achieve the rows with that condition, we simply use a DATEDIFF() function to check whether the purchase_date column falls bewteen these two dates or not.\\n\\nAfter which the task is to calculate the average through the use of aggregate functions. And finally type cast it into a FLOAT data type.\\n\\nThe JOIN operation was based on three conditions,\\n$$1)$$ product_id must match.\\n$$2)$$ purchase_date must be greater than or equal to start_date.\\n$$3)$$ purchase_date must be lesser than or equal to end_date.\\n\\n\\n\\n\\n# Code\\n```\\nSELECT P.product_id, ISNULL(ROUND(SUM(P.price*U.units)/CAST(SUM(units) AS FLOAT),2),0) AS average_price\\nFROM Prices P LEFT JOIN UnitsSold U\\nON P.product_id = U.product_id\\nAND DATEDIFF(DAY, purchase_date, start_date)<=0 \\nAND DATEDIFF(DAY, purchase_date, end_date)>=0\\nGROUP BY P.product_id\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT P.product_id, ISNULL(ROUND(SUM(P.price*U.units)/CAST(SUM(units) AS FLOAT),2),0) AS average_price\\nFROM Prices P LEFT JOIN UnitsSold U\\nON P.product_id = U.product_id\\nAND DATEDIFF(DAY, purchase_date, start_date)<=0 \\nAND DATEDIFF(DAY, purchase_date, end_date)>=0\\nGROUP BY P.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087814,
                "title": "sql-server-new-test-cases-added-solved-with-beats-90-557-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIt is one of the classic aggregate function, group by and join combine problems. Main issue is that null value if the product has a price but not sold. You have to make arrangement in the aggregate function. \\nAggregate Funciton: Inside of this calculation i am using mathematical represent rather than AVG() built-in function. If units in the numerator part is NULL than we change it to 0 AND also units in denominator part we change the 1 Because 1 is the ineffective element in the partition. \\nIn addition to that you have to do LEFT or RIGHT join (depends on your writing) to get the products only in prices table.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT p.product_id,\\n\\t\\tROUND(SUM(price * ISNULL(units,0))*1.00 / ISNULL(SUM(units),1),2) AS average_price FROM prices p\\nLEFT JOIN UnitsSold u ON u.product_id = p.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT p.product_id,\\n\\t\\tROUND(SUM(price * ISNULL(units,0))*1.00 / ISNULL(SUM(units),1),2) AS average_price FROM prices p\\nLEFT JOIN UnitsSold u ON u.product_id = p.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087223,
                "title": "using-merge-and-groupby",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(prices,units_sold, how=\\'left\\',on=\\'product_id\\')\\n    df = df[(df[\\'purchase_date\\']>=df[\\'start_date\\']) & (df[\\'purchase_date\\']<=df[\\'end_date\\'])]\\n    df[\\'Total_price\\']=(df[\\'price\\']*df[\\'units\\'])\\n    df = df.groupby(\\'product_id\\')[[\\'Total_price\\',\\'units\\']].sum().reset_index()\\n    df[\\'average_price\\']= round(df[\\'Total_price\\']/df[\\'units\\'],2)\\n    df=df[[\\'product_id\\',\\'average_price\\']]\\n    return pd.merge(df[[\\'product_id\\',\\'average_price\\']],prices[[\\'product_id\\']].drop_duplicates(),how=\\'right\\',on=\\'product_id\\').fillna(0)\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(prices,units_sold, how=\\'left\\',on=\\'product_id\\')\\n    df = df[(df[\\'purchase_date\\']>=df[\\'start_date\\']) & (df[\\'purchase_date\\']<=df[\\'end_date\\'])]\\n    df[\\'Total_price\\']=(df[\\'price\\']*df[\\'units\\'])\\n    df = df.groupby(\\'product_id\\')[[\\'Total_price\\',\\'units\\']].sum().reset_index()\\n    df[\\'average_price\\']= round(df[\\'Total_price\\']/df[\\'units\\'],2)\\n    df=df[[\\'product_id\\',\\'average_price\\']]\\n    return pd.merge(df[[\\'product_id\\',\\'average_price\\']],prices[[\\'product_id\\']].drop_duplicates(),how=\\'right\\',on=\\'product_id\\').fillna(0)\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4087183,
                "title": "oracle-sql",
                "content": "# Intuition\\n----\\n\\n# Approach\\n Left outer join\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below*/ \\nselect \\n  p.product_id,\\n  case \\n    when round(sum(price*units)/sum(units),2) is not null \\n      then round(sum(price*units)/sum(units),2)\\n    else \\n      0 \\n  end as average_price \\nfrom prices p  left join  unitssold u \\non purchase_date>=start_date and purchase_date<=end_date and u.product_id=p.product_id \\ngroup by p.product_id;\\n\\n\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below*/ \\nselect \\n  p.product_id,\\n  case \\n    when round(sum(price*units)/sum(units),2) is not null \\n      then round(sum(price*units)/sum(units),2)\\n    else \\n      0 \\n  end as average_price \\nfrom prices p  left join  unitssold u \\non purchase_date>=start_date and purchase_date<=end_date and u.product_id=p.product_id \\ngroup by p.product_id;\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087018,
                "title": "please-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT p.product_id, isnull(ROUND(SUM(cast(units as float)*price)/SUM(units),2), 0) AS average_price\\nFROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND\\nu.purchase_date BETWEEN start_date AND end_date\\ngroup by p.product_id\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT p.product_id, isnull(ROUND(SUM(cast(units as float)*price)/SUM(units),2), 0) AS average_price\\nFROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND\\nu.purchase_date BETWEEN start_date AND end_date\\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086482,
                "title": "clean-pandas-solution-100-speed-beaten",
                "content": "# Intuition\\nFirst find avarage price for each valid product. Then attach other products\\' price.\\n\\n# Approach\\nStep 1. Merge price with units\\nStep 2. Filter by Date\\nStep 3. Calcuate Revenue by Date\\nStep 4. Find Average Price with GroupBy\\nStep 5. Add other product\\'s price\\n\\n# Result\\n![image.png](https://assets.leetcode.com/users/images/81a40679-b8cf-4dcf-a173-f64b5d422daf_1695600836.538412.png)\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(prices, units_sold, on=\\'product_id\\', how=\\'inner\\')\\n    df = (df\\n            .query(\\'purchase_date>=start_date and purchase_date<=end_date\\')\\n            .assign(revenue=df.price*df.units)\\n            .groupby(\\'product_id\\', as_index=False)\\n            .apply(lambda x: (x.revenue.sum()/x.units.sum()).round(2))\\n            .rename({None:\\'average_price\\'},axis=1))\\n\\n    for pid in set(prices.product_id.unique()) - set(df.product_id.unique()):\\n        df.loc[len(df.index)] = [pid, 0]\\n        \\n    return(df)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(prices, units_sold, on=\\'product_id\\', how=\\'inner\\')\\n    df = (df\\n            .query(\\'purchase_date>=start_date and purchase_date<=end_date\\')\\n            .assign(revenue=df.price*df.units)\\n            .groupby(\\'product_id\\', as_index=False)\\n            .apply(lambda x: (x.revenue.sum()/x.units.sum()).round(2))\\n            .rename({None:\\'average_price\\'},axis=1))\\n\\n    for pid in set(prices.product_id.unique()) - set(df.product_id.unique()):\\n        df.loc[len(df.index)] = [pid, 0]\\n        \\n    return(df)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4086312,
                "title": "beats-87-easy-mysql-solution-iffnull-round-sum",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id, ifnull(round(sum(u.units*p.price)/sum(u.units),2),0) as average_price \\nfrom prices p\\nleft join unitssold u \\non p.product_id=u.product_id\\nand u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id, ifnull(round(sum(u.units*p.price)/sum(u.units),2),0) as average_price \\nfrom prices p\\nleft join unitssold u \\non p.product_id=u.product_id\\nand u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085704,
                "title": "clean-solution-with-some-weird-error-on-first-try",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT p.product_id, COALESCE(ROUND(SUM(p.price * u.units) / SUM(u.units), 2), 0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id \\n  AND p.start_date <= u.purchase_date \\n  AND u.purchase_date <= p.end_date\\nGROUP BY p.product_id;\\n\\n\\n\\n/* this solution gives an error in a way I can\\'t make sense of.\\n\\n\\nSELECT p.product_id, COALESCE(ROUND(SUM(p.price * u.units) / SUM(u.units), 2), 0) AS average_price\\nFROM Prices p, UnitsSold u\\nWHERE p.product_id = u.product_id(+)\\n  AND p.start_date <= u.purchase_date\\n  AND u.purchase_date <= p.end_date\\nGROUP BY p.product_id;\\n*/\\n```\\n\\n\\nPlease tell me why the commented out query does give an error through it\\'s the same query with the valid one. \\n\\nThanks!",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT p.product_id, COALESCE(ROUND(SUM(p.price * u.units) / SUM(u.units), 2), 0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id \\n  AND p.start_date <= u.purchase_date \\n  AND u.purchase_date <= p.end_date\\nGROUP BY p.product_id;\\n\\n\\n\\n/* this solution gives an error in a way I can\\'t make sense of.\\n\\n\\nSELECT p.product_id, COALESCE(ROUND(SUM(p.price * u.units) / SUM(u.units), 2), 0) AS average_price\\nFROM Prices p, UnitsSold u\\nWHERE p.product_id = u.product_id(+)\\n  AND p.start_date <= u.purchase_date\\n  AND u.purchase_date <= p.end_date\\nGROUP BY p.product_id;\\n*/\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083507,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect Prices.product_id,\\nIFNULL(round((SUM(Prices.price*UnitsSold.units)/SUM(UnitsSold.units)),2),0) as average_price\\nfrom Prices\\nleft join UnitsSold on Prices.product_id= UnitsSold.product_id\\nwhere DATEDIFF(purchase_date,start_date)>=0 and DATEDIFF(end_date,purchase_date)>=0 or UnitsSold.purchase_date is NULL\\ngroup by Prices.product_id\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Prices.product_id,\\nIFNULL(round((SUM(Prices.price*UnitsSold.units)/SUM(UnitsSold.units)),2),0) as average_price\\nfrom Prices\\nleft join UnitsSold on Prices.product_id= UnitsSold.product_id\\nwhere DATEDIFF(purchase_date,start_date)>=0 and DATEDIFF(end_date,purchase_date)>=0 or UnitsSold.purchase_date is NULL\\ngroup by Prices.product_id\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083154,
                "title": "sql-simple-solution",
                "content": "# Code\\n``` mssql []\\nSELECT \\n    p.product_id,\\n    round(sum(1.0 * p.price * isnull(us.units, 0)) / sum(isnull(us.units, 1)), 2) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold us ON p.product_id = us.product_id\\nWHERE \\n    us.purchase_date BETWEEN p.start_date AND p.end_date\\n    OR us.product_id IS NULL\\nGROUP BY p.product_id\\n```\\n``` mysql []\\nSELECT \\n    p.product_id,\\n    round(sum(1.0 * p.price * ifnull(us.units, 0)) / sum(ifnull(us.units, 1)), 2) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold us ON p.product_id = us.product_id\\nWHERE \\n    us.purchase_date BETWEEN p.start_date AND p.end_date \\n    OR us.product_id IS NULL\\nGROUP BY p.product_id\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "``` mssql []\\nSELECT \\n    p.product_id,\\n    round(sum(1.0 * p.price * isnull(us.units, 0)) / sum(isnull(us.units, 1)), 2) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold us ON p.product_id = us.product_id\\nWHERE \\n    us.purchase_date BETWEEN p.start_date AND p.end_date\\n    OR us.product_id IS NULL\\nGROUP BY p.product_id\\n```\n``` mysql []\\nSELECT \\n    p.product_id,\\n    round(sum(1.0 * p.price * ifnull(us.units, 0)) / sum(ifnull(us.units, 1)), 2) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold us ON p.product_id = us.product_id\\nWHERE \\n    us.purchase_date BETWEEN p.start_date AND p.end_date \\n    OR us.product_id IS NULL\\nGROUP BY p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081494,
                "title": "beats-100-00-of-users-with-mysql",
                "content": "# Code\\n```\\nselect  p.product_id,IfNull(round(sum(p.price*us.units)/sum(units),2),0) as average_price from Prices p left join UnitsSold us on p.product_id=us.product_id and purchase_date between p.start_date and p.end_date group by product_id \\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect  p.product_id,IfNull(round(sum(p.price*us.units)/sum(units),2),0) as average_price from Prices p left join UnitsSold us on p.product_id=us.product_id and purchase_date between p.start_date and p.end_date group by product_id \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080577,
                "title": "easy-solution-beats-94-76-last-test-case-passed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires calculating the average price for each product, taking into account the units sold and their respective prices. When there are no matching records in the UnitsSold table for a product, the average price should be 0.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo solve this problem, I used a SQL query with a LEFT JOIN between the Prices and UnitsSold tables. This join allows me to include all products from the Prices table, even if there are no matching records in the UnitsSold table. I calculated the average price for each product using the ROUND and SUM functions, and I used IFNULL to replace null values with 0 in cases where there are no matching records.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this query depends on the number of rows in both the Prices and UnitsSold tables. Let\\'s denote the number of rows in Prices as \"n\" and the number of rows in UnitsSold as \"m.\" The time complexity can be considered as O(n + m) because the query involves aggregating data from both tables.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this query is primarily determined by the memory required to store the result set, which consists of one row per product with the product_id and average_price columns. Therefore, the space complexity is O(n), where \"n\" is the number of products in the Prices table.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect Prices.product_id, ifnull(round(sum(units*price)/sum(units),2),0) as average_price\\nfrom Prices LEFT JOIN UnitsSold\\non Prices.product_id = UnitsSold.product_id and UnitsSold.purchase_date between Prices.start_date and Prices.end_date\\ngroup by Prices.product_id;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Prices.product_id, ifnull(round(sum(units*price)/sum(units),2),0) as average_price\\nfrom Prices LEFT JOIN UnitsSold\\non Prices.product_id = UnitsSold.product_id and UnitsSold.purchase_date between Prices.start_date and Prices.end_date\\ngroup by Prices.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080437,
                "title": "solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT Prices.product_id, \\nIFNULL(ROUND(SUM(UnitsSold.UNITS*Prices.PRICE)/SUM(UnitsSold.UNITS),2),0) \\nAS average_price\\nFROM Prices\\nLEFT JOIN UnitsSold\\nON UnitsSold.product_id=Prices.product_id\\nAND UnitsSold.purchase_date BETWEEN Prices.start_date AND Prices.end_date\\nGROUP BY Prices.product_id;\\n#DONT JOIN AND SELECT PRODUCT ID FROM UNIT SOLDS RATHER FROM PRICES",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT Prices.product_id, \\nIFNULL(ROUND(SUM(UnitsSold.UNITS*Prices.PRICE)/SUM(UnitsSold.UNITS),2),0) \\nAS average_price\\nFROM Prices\\nLEFT JOIN UnitsSold\\nON UnitsSold.product_id=Prices.product_id\\nAND UnitsSold.purchase_date BETWEEN Prices.start_date AND Prices.end_date\\nGROUP BY Prices.product_id;\\n#DONT JOIN AND SELECT PRODUCT ID FROM UNIT SOLDS RATHER FROM PRICES",
                "codeTag": "Unknown"
            },
            {
                "id": 4079917,
                "title": "beats-98-75-1209-ms-sum-avg-ifnull-between-round-easy-left-join-mysql",
                "content": "# Intuition\\nDo left join to get all the products and find avg price based on units sold during a window and it\\'s associated price\\n# Approach\\n\\nFirst do a left join on product_id then provide one more join condition with to identify price of the product and units sold during the price window to find the exact price. \\n\\nTO find the agg function avg cannot used so we do units_sold*price / units sold to get the avg price.\\n\\nIf no product was solf then to replace null with 0 use ifnull\\nand round the average price to 2 place to get the desired result\\n\\n# Complexity\\n- Time complexity - Space complexity:\\n\\n\\n![image.png](https://assets.leetcode.com/users/images/7ae7c75f-40e3-46aa-ba11-3b359574fee5_1695460301.9624932.png)\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id, round(ifnull(sum(units*price)/sum(units),0),2) as average_price \\nfrom prices p \\nleft join unitssold u on p.product_id = u.product_id \\nand  u.purchase_date between  p.start_date and p.end_date \\n#and  u.purchase_date >=  p.start_date and   u.purchase_date  <= p.end_date \\ngroup by p.product_id\\n\\n\\n```\\n\\n\\n![image.png](https://assets.leetcode.com/users/images/9121ffff-0989-4616-8629-1e292c98f358_1695461057.1834633.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id, round(ifnull(sum(units*price)/sum(units),0),2) as average_price \\nfrom prices p \\nleft join unitssold u on p.product_id = u.product_id \\nand  u.purchase_date between  p.start_date and p.end_date \\n#and  u.purchase_date >=  p.start_date and   u.purchase_date  <= p.end_date \\ngroup by p.product_id\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4079756,
                "title": "simple-code",
                "content": "IFNULL is used to return 0 if their is any null value and we have not used where statement as the 15th test case will not pass\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id, IFNULL(Round(sum(p.price*u.units)/sum(u.units),2),0) as average_price\\nfrom Prices as p\\nleft Join UnitsSold as u on p.product_id=u.product_id AND u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id, IFNULL(Round(sum(p.price*u.units)/sum(u.units),2),0) as average_price\\nfrom Prices as p\\nleft Join UnitsSold as u on p.product_id=u.product_id AND u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4078279,
                "title": "beats-98-25-easy-round-coalesce-sum-between",
                "content": "# Approach\\n- ```SELECT p.product_id, ...:``` We want to create a result table that shows the product_id and something called average_price for each product.\\n\\n- ```COALESCE(..., 0):``` This function helps us handle cases where there might be no sales data for a product. If there are no sales data, we assume an average price of 0.\\n- ```ROUND(..., 2):``` We\\'re going to calculate a value (the average price) and round it to two decimal places, making it easier to read.\\n- ```SUM(p.price * u.units):``` This calculates the total revenue generated for each product. It multiplies the price of the product by the number of units sold and adds up all the sales revenue.\\n- ```SUM(u.units):``` This calculates the total number of units sold for each product. It adds up all the units sold for that product.\\n- ```FROM Prices p LEFT JOIN UnitsSold u:``` We are combining two tables, Prices and UnitsSold, using a LEFT JOIN. This means we want to keep all the rows from the Prices table and match them with corresponding rows from the UnitsSold table if there\\'s a match.\\n- ```ON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date:``` We specify how to match the rows from both tables. We match them based on the product_id and also check if the purchase date falls within the price date range.\\n- ```GROUP BY p.product_id:``` After combining the tables and calculating the total revenue and units sold for each product, we group the results by product_id. This means we\\'ll have one row for each unique product.\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.product_id, \\n    COALESCE(\\n        ROUND(\\n            SUM(p.price * u.units)/SUM(u.units), 2)\\n            ,0) \\n    AS average_price\\nFROM Prices p \\nLEFT JOIN UnitsSold u \\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```SELECT p.product_id, ...:```\n```COALESCE(..., 0):```\n```ROUND(..., 2):```\n```SUM(p.price * u.units):```\n```SUM(u.units):```\n```FROM Prices p LEFT JOIN UnitsSold u:```\n```ON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date:```\n```GROUP BY p.product_id:```\n```\\n# Write your MySQL query statement below\\nSELECT p.product_id, \\n    COALESCE(\\n        ROUND(\\n            SUM(p.price * u.units)/SUM(u.units), 2)\\n            ,0) \\n    AS average_price\\nFROM Prices p \\nLEFT JOIN UnitsSold u \\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4075952,
                "title": "working-for-all-test-cases",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis query uses the NULLIF function to handle cases where the denominator (SUM of units) might be zero. This prevents division by zero errors and produces the correct average price even for products that have no sales (where the denominator is zero).\\n\\n COALESCE function is used to replace null values with 0 for the units column in the calculation. This will handle cases where the product_id exists in p but not in q.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# # Write your MySQL query statement below\\n# select p.product_id ,round(SUM(p.price * COALESCE(q.units, 0)) / SUM(COALESCE(q.units, 0)),2) as average_price from\\n#  Prices p left join UnitsSold q on p.product_id= q.product_id where \\n#  q.purchase_date between p.start_date and p.end_date group by product_id ;\\nSELECT p.product_id, \\n       COALESCE(ROUND(SUM(p.price * COALESCE(q.units, 0)) / NULLIF(SUM(COALESCE(q.units, 0)), 0), 2), 0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold q\\nON p.product_id = q.product_id\\nAND q.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# # Write your MySQL query statement below\\n# select p.product_id ,round(SUM(p.price * COALESCE(q.units, 0)) / SUM(COALESCE(q.units, 0)),2) as average_price from\\n#  Prices p left join UnitsSold q on p.product_id= q.product_id where \\n#  q.purchase_date between p.start_date and p.end_date group by product_id ;\\nSELECT p.product_id, \\n       COALESCE(ROUND(SUM(p.price * COALESCE(q.units, 0)) / NULLIF(SUM(COALESCE(q.units, 0)), 0), 2), 0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold q\\nON p.product_id = q.product_id\\nAND q.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4075813,
                "title": "easy-and-clean-solution",
                "content": "Easy Solution,All test cases passes. Handles null values in the input as well\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id,COALESCE(ROUND((SUM(units*price)/SUM(units)),2),0)as average_price\\nfrom Prices p left join UnitsSold u\\non p.product_id=u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id,COALESCE(ROUND((SUM(units*price)/SUM(units)),2),0)as average_price\\nfrom Prices p left join UnitsSold u\\non p.product_id=u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074350,
                "title": "beat-99-85-the-new-answer-for-case-2-answer-about-0-instead-of-null",
                "content": "\\nthere is a new case where the product id is 3 in table Prices but the UnitsSold table does not have any rows with id 3. So you need to update your code with ifnull(). the right answer is as follows.  \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect P.product_id, \\n        ifnull(round(sum(P.price*U.units)/sum(u.units), 2), 0) AS average_price\\nFrom Prices P\\nLeft Join UnitsSold U\\n    ON P.product_id = U.product_id\\n    And U.purchase_date between P.start_date and P.end_date\\nGroup By P.product_id\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect P.product_id, \\n        ifnull(round(sum(P.price*U.units)/sum(u.units), 2), 0) AS average_price\\nFrom Prices P\\nLeft Join UnitsSold U\\n    ON P.product_id = U.product_id\\n    And U.purchase_date between P.start_date and P.end_date\\nGroup By P.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074308,
                "title": "simple-mysql-solution-passes-all-test-cases",
                "content": "\\n```\\n# Write your MySQL query statement below\\n\\nSELECT p.product_id,\\n    COALESCE(ROUND(SUM(NULLIF(p.price * u.units, 0)) / NULLIF(SUM(u.units), 0),2),0) AS average_price\\nFROM prices p \\nLEFT JOIN unitssold u ON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT p.product_id,\\n    COALESCE(ROUND(SUM(NULLIF(p.price * u.units, 0)) / NULLIF(SUM(u.units), 0),2),0) AS average_price\\nFROM prices p \\nLEFT JOIN unitssold u ON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074237,
                "title": "pandas-solution-beats-100",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst of all, we need to merge the two data frames but since pandas cannot group by dates range we need to do this into two separate steps: \\n\\n1) group by on product_id\\n```\\nunits_sold = units_sold.merge(prices, on=\\'product_id\\', how=\\'left\\')\\n```\\n2) define a new column that is True if the purchased date is in the range of the start and finish dates\\n```\\nunits_sold[\\'matching\\'] = (units_sold[\\'purchase_date\\'] >= units_sold[\\'start_date\\']) & (units_sold[\\'purchase_date\\'] <= units_sold[\\'end_date\\'])\\nunits_sold = units_sold[units_sold[\\'matching\\']==True]\\n```\\nThen we initialise the total spent column which holds the total spent on this product on this purchased date\\n```\\nunits_sold[\\'total_spent\\'] = units_sold[\\'units\\']*units_sold[\\'price\\']\\n```\\nThe aforementioned  plus the units columns are used to group by all the product_ids (later on utilised for the average column)\\n```\\nunits_sold = units_sold.groupby(\\'product_id\\').agg(total_spent=(\\'total_spent\\', lambda x: sum(x)), total_units=(\\'units\\', lambda x: sum(x))).reset_index()\\nunits_sold[\\'average_price\\'] = round(units_sold[\\'total_spent\\']/units_sold[\\'total_units\\'],2)\\n```\\n\\nFinally, we create a new dataframe which will be merged with the previous one as there may be some product_ids without placed orders\\n```\\nprices = pd.DataFrame(columns=[\\'product_id\\'], data=prices[\\'product_id\\'].unique())\\nreturn prices.merge(units_sold[[\\'product_id\\', \\'average_price\\']], on=\\'product_id\\', how=\\'left\\').fillna(0)\\n```\\n# Code\\n```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    units_sold = units_sold.merge(prices, on=\\'product_id\\', how=\\'left\\')\\n    units_sold[\\'matching\\'] = (units_sold[\\'purchase_date\\'] >= units_sold[\\'start_date\\']) & (units_sold[\\'purchase_date\\'] <= units_sold[\\'end_date\\'])\\n    units_sold = units_sold[units_sold[\\'matching\\']==True]\\n    units_sold[\\'total_spent\\'] = units_sold[\\'units\\']*units_sold[\\'price\\']\\n    units_sold = units_sold.groupby(\\'product_id\\').agg(total_spent=(\\'total_spent\\', lambda x: sum(x)), total_units=(\\'units\\', lambda x: sum(x))).reset_index()\\n    units_sold[\\'average_price\\'] = round(units_sold[\\'total_spent\\']/units_sold[\\'total_units\\'],2)\\n    prices = pd.DataFrame(columns=[\\'product_id\\'], data=prices[\\'product_id\\'].unique())\\n    return prices.merge(units_sold[[\\'product_id\\', \\'average_price\\']], on=\\'product_id\\', how=\\'left\\').fillna(0)\\n```",
                "solutionTags": [
                    "Python",
                    "Pandas"
                ],
                "code": "```\\nunits_sold = units_sold.merge(prices, on=\\'product_id\\', how=\\'left\\')\\n```\n```\\nunits_sold[\\'matching\\'] = (units_sold[\\'purchase_date\\'] >= units_sold[\\'start_date\\']) & (units_sold[\\'purchase_date\\'] <= units_sold[\\'end_date\\'])\\nunits_sold = units_sold[units_sold[\\'matching\\']==True]\\n```\n```\\nunits_sold[\\'total_spent\\'] = units_sold[\\'units\\']*units_sold[\\'price\\']\\n```\n```\\nunits_sold = units_sold.groupby(\\'product_id\\').agg(total_spent=(\\'total_spent\\', lambda x: sum(x)), total_units=(\\'units\\', lambda x: sum(x))).reset_index()\\nunits_sold[\\'average_price\\'] = round(units_sold[\\'total_spent\\']/units_sold[\\'total_units\\'],2)\\n```\n```\\nprices = pd.DataFrame(columns=[\\'product_id\\'], data=prices[\\'product_id\\'].unique())\\nreturn prices.merge(units_sold[[\\'product_id\\', \\'average_price\\']], on=\\'product_id\\', how=\\'left\\').fillna(0)\\n```\n```\\nimport pandas as pd\\n\\ndef average_selling_price(prices: pd.DataFrame, units_sold: pd.DataFrame) -> pd.DataFrame:\\n    units_sold = units_sold.merge(prices, on=\\'product_id\\', how=\\'left\\')\\n    units_sold[\\'matching\\'] = (units_sold[\\'purchase_date\\'] >= units_sold[\\'start_date\\']) & (units_sold[\\'purchase_date\\'] <= units_sold[\\'end_date\\'])\\n    units_sold = units_sold[units_sold[\\'matching\\']==True]\\n    units_sold[\\'total_spent\\'] = units_sold[\\'units\\']*units_sold[\\'price\\']\\n    units_sold = units_sold.groupby(\\'product_id\\').agg(total_spent=(\\'total_spent\\', lambda x: sum(x)), total_units=(\\'units\\', lambda x: sum(x))).reset_index()\\n    units_sold[\\'average_price\\'] = round(units_sold[\\'total_spent\\']/units_sold[\\'total_units\\'],2)\\n    prices = pd.DataFrame(columns=[\\'product_id\\'], data=prices[\\'product_id\\'].unique())\\n    return prices.merge(units_sold[[\\'product_id\\', \\'average_price\\']], on=\\'product_id\\', how=\\'left\\').fillna(0)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4073486,
                "title": "working-solution-beats-70",
                "content": "# Explanation\\nThis code handles the NULL value problem that the other solutions were not handling. First we select the product id and average price. Keep in mind that we are handling the null values by replacing them with zero in the select clause. Then we select from the prices table joined by the units sold table where the purchase data lies between the start date and end data. We group by product id to get the average of each. **Like if you enjoyed**.\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT  Prices.product_id, ifnull(round(sum(units * price)/sum(units),2),0) AS average_price  \\nFROM Prices LEFT JOIN UnitsSold ON UnitsSold.purchase_date >= Prices.start_date AND UnitsSold.purchase_date <= Prices.end_date \\nAND Prices.product_id = UnitsSold.product_id \\nGROUP BY Prices.product_id;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT  Prices.product_id, ifnull(round(sum(units * price)/sum(units),2),0) AS average_price  \\nFROM Prices LEFT JOIN UnitsSold ON UnitsSold.purchase_date >= Prices.start_date AND UnitsSold.purchase_date <= Prices.end_date \\nAND Prices.product_id = UnitsSold.product_id \\nGROUP BY Prices.product_id;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073007,
                "title": "simple-solution",
                "content": "```\\nselect Prices.product_id , ifnull (\\nround(sum(price * units ) / sum(units),2),0) as average_price \\nfrom Prices\\nleft join UnitsSold on Prices.product_id  = UnitsSold.product_id and\\nUnitsSold.purchase_date between Prices.start_date and   Prices.end_date \\ngroup by product_id \\n```\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect Prices.product_id , ifnull (\\nround(sum(price * units ) / sum(units),2),0) as average_price \\nfrom Prices\\nleft join UnitsSold on Prices.product_id  = UnitsSold.product_id and\\nUnitsSold.purchase_date between Prices.start_date and   Prices.end_date \\ngroup by product_id \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073002,
                "title": "mysql-easy-solution-using-left-join",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT a.product_id, IFNULL(ROUND(SUM(b.units * price) / SUM(b.units), 2), 0) as average_price\\nFROM Prices as a\\nLEFT JOIN UnitsSold as b\\nON a.product_id = b.product_id AND b.purchase_date  BETWEEN a.start_date  AND a.end_date\\nGROUP BY a.product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT a.product_id, IFNULL(ROUND(SUM(b.units * price) / SUM(b.units), 2), 0) as average_price\\nFROM Prices as a\\nLEFT JOIN UnitsSold as b\\nON a.product_id = b.product_id AND b.purchase_date  BETWEEN a.start_date  AND a.end_date\\nGROUP BY a.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072795,
                "title": "handling-null-values-mysql",
                "content": "\\n# Code\\n```\\nSELECT p.product_id, ifnull(round(SUM(p.price*u.units)/sum(u.units), 2),0) AS average_price FROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND u.purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.product_id, ifnull(round(SUM(p.price*u.units)/sum(u.units), 2),0) AS average_price FROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND u.purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072794,
                "title": "handling-null-values-mysql",
                "content": "\\n# Code\\n```\\nSELECT p.product_id, ifnull(round(SUM(p.price*u.units)/sum(u.units), 2),0)\\nAS average_price FROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND u.purchase_date\\nBETWEEN start_date AND end_date\\nGROUP BY product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.product_id, ifnull(round(SUM(p.price*u.units)/sum(u.units), 2),0)\\nAS average_price FROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND u.purchase_date\\nBETWEEN start_date AND end_date\\nGROUP BY product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071891,
                "title": "best-intuitive-solution-beats-98-of-the-users",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id,ifnull(round(sum(price*units)/sum(units),2),0) as average_price \\nfrom Prices p left join UnitsSold u on \\np.product_id=u.product_id\\nand u.purchase_date between start_date AND end_date\\ngroup by product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id,ifnull(round(sum(price*units)/sum(units),2),0) as average_price \\nfrom Prices p left join UnitsSold u on \\np.product_id=u.product_id\\nand u.purchase_date between start_date AND end_date\\ngroup by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069919,
                "title": "average-selling-price-solution-in-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT P.PRODUCT_ID, IFNULL(ROUND(SUM(P.PRICE*U.UNITS)/SUM(U.UNITS), 2), 0) AS AVERAGE_PRICE\\nFROM PRICES P\\nLEFT JOIN UNITSSOLD U\\nON P.PRODUCT_ID = U.PRODUCT_ID\\nAND U.PURCHASE_DATE BETWEEN P.START_DATE AND P.END_DATE\\nGROUP BY P.PRODUCT_ID\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/0987e02a-46df-4109-a41d-a91daab5a30d_1695237631.203748.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT P.PRODUCT_ID, IFNULL(ROUND(SUM(P.PRICE*U.UNITS)/SUM(U.UNITS), 2), 0) AS AVERAGE_PRICE\\nFROM PRICES P\\nLEFT JOIN UNITSSOLD U\\nON P.PRODUCT_ID = U.PRODUCT_ID\\nAND U.PURCHASE_DATE BETWEEN P.START_DATE AND P.END_DATE\\nGROUP BY P.PRODUCT_ID\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069794,
                "title": "easy-query-using-subquery-and-detailed-explanation",
                "content": "# Intuition\\nA beginner friendly answer is written by following basic concepts step by step.\\n\\n# Approach\\nusing SUBQuery we going to solve this problem - create the solution table reguarding ....\\n1)USE left JOIN TO MAKE p.product_id = u.product_id\\n2)ALSO CHECK IF purchase_date is between start_date and end_date or not\\n3)We use INNER JOIN to combine the \"Prices\" and \"UnitsSold\" tables based on the common product_id column.\\nWe provide aliases for the tables to make the query more readable (p for \"Prices\" and u for \"UnitsSold\").\\nThe WHERE clause filters the results to only include rows where the purchase_date from \"UnitsSold\" falls within the date range defined by the start_date and end_date columns in the \"Prices\" table.\\nThe GROUP BY clause groups the results by product_id.\\n4)We use the ROUND function to calculate the average price rounded to two decimal places.\\n\\nfinally  use ifnull to replace the null in the solution table and subquery that table and return the columns\\n# Complexity\\n- Time complexity:\\nRuntime\\n1463 ms\\nBeats\\n84.92%\\n\\n- Space complexity:\\n0%\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect  product_id ,ifnull(average_price,0) as average_price \\nfrom \\n(select p.product_id ,\\nround(sum(u.units*p.price)/sum(u.units),2) as average_price \\nfrom Prices p\\nleft join unitssold u on p.product_id = u.product_id and\\n u.purchase_date between p.start_date and p.end_date \\ngroup by p.product_id) as result\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect  product_id ,ifnull(average_price,0) as average_price \\nfrom \\n(select p.product_id ,\\nround(sum(u.units*p.price)/sum(u.units),2) as average_price \\nfrom Prices p\\nleft join unitssold u on p.product_id = u.product_id and\\n u.purchase_date between p.start_date and p.end_date \\ngroup by p.product_id) as result\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068937,
                "title": "answer-for-16-testcase-where-we-have-product-3-with-0-sold-units-output-with-97-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect  a.product_id,if (sum(b.units) is null ,0,round((sum(a.price*b.units)/sum(b.units)),2)) as average_price\\nfrom prices as a\\nleft join unitssold as b\\non a.product_id =b.product_id and\\nb.purchase_date  between a.start_date and a.end_date\\ngroup by a.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect  a.product_id,if (sum(b.units) is null ,0,round((sum(a.price*b.units)/sum(b.units)),2)) as average_price\\nfrom prices as a\\nleft join unitssold as b\\non a.product_id =b.product_id and\\nb.purchase_date  between a.start_date and a.end_date\\ngroup by a.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068868,
                "title": "easy-to-solution-isnull-and-group-by",
                "content": "\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect p.product_id ,isnull(round(sum(u.units *p.price )*1.0/sum(u.units) ,2),0) as \\'average_price\\'\\nfrom Prices p\\nleft join UnitsSold u\\non  u.product_id=p.product_id and u.purchase_date between   p.start_date and   p.end_date\\n\\ngroup by p.product_id\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect p.product_id ,isnull(round(sum(u.units *p.price )*1.0/sum(u.units) ,2),0) as \\'average_price\\'\\nfrom Prices p\\nleft join UnitsSold u\\non  u.product_id=p.product_id and u.purchase_date between   p.start_date and   p.end_date\\n\\ngroup by p.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068784,
                "title": "simple-oracle-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect \\n    p.product_id, \\n    nvl(round(sum(p.price * u.units) / sum(u.units), 2), 0)  average_price\\n\\nfrom Prices p left join UnitsSold u\\non p.product_id = u.product_id\\nand u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect \\n    p.product_id, \\n    nvl(round(sum(p.price * u.units) / sum(u.units), 2), 0)  average_price\\n\\nfrom Prices p left join UnitsSold u\\non p.product_id = u.product_id\\nand u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068026,
                "title": "beats-98-92-of-users-with-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsed left join to include all products in Prices table with UnitsSold table on product_id. where purchase date is in between start date and end date or purchase date is null to include products with no purchase date. \\nUsed COALESCE function in select to replace null values with 0\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.product_id, COALESCE(ROUND(SUM(p.price*u.units)/SUM(u.units),2),0) average_price\\nfrom Prices p\\nleft join UnitsSold u\\nON p.product_id=u.product_id\\nwhere u.purchase_date between p.start_date and p.end_date \\nor u.purchase_date is NULL\\ngroup by p.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT p.product_id, COALESCE(ROUND(SUM(p.price*u.units)/SUM(u.units),2),0) average_price\\nfrom Prices p\\nleft join UnitsSold u\\nON p.product_id=u.product_id\\nwhere u.purchase_date between p.start_date and p.end_date \\nor u.purchase_date is NULL\\ngroup by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067920,
                "title": "beats-99-82-users-simple-approach-in-single-query-no-subquery-involved",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect a.product_id, coalesce(round(sum(price*units)/ sum(units), 2),0) as average_price\\nfrom Prices a\\nleft join UnitsSold b\\non a.product_id = b.product_id and b.purchase_date between a.start_date and a.end_date\\ngroup by a.product_id\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect a.product_id, coalesce(round(sum(price*units)/ sum(units), 2),0) as average_price\\nfrom Prices a\\nleft join UnitsSold b\\non a.product_id = b.product_id and b.purchase_date between a.start_date and a.end_date\\ngroup by a.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067538,
                "title": "easy-solution-with-all-test-cases-passed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id, ifnull(round(sum(u.units*p.price)/sum(units),2),0) as average_price from Prices p LEFT JOIN UnitsSold u ON p.product_id = u.product_id and u.purchase_date between start_date and end_date group by p.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id, ifnull(round(sum(u.units*p.price)/sum(units),2),0) as average_price from Prices p LEFT JOIN UnitsSold u ON p.product_id = u.product_id and u.purchase_date between start_date and end_date group by p.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067537,
                "title": "correct-solution-including-testcase-16",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\n\\nselect p.product_id,ISNULL(round((sum(p.price*u.units)*1.0/sum(u.units)),2),0) as average_price\\nfrom prices p\\nleft join unitssold u\\non p.product_id = u.product_id\\nwhere (u.purchase_date between p.start_date and p.end_date)\\nOR (u.product_id IS NULL)\\ngroup by p.product_id\\n\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n\\n\\nselect p.product_id,ISNULL(round((sum(p.price*u.units)*1.0/sum(u.units)),2),0) as average_price\\nfrom prices p\\nleft join unitssold u\\non p.product_id = u.product_id\\nwhere (u.purchase_date between p.start_date and p.end_date)\\nOR (u.product_id IS NULL)\\ngroup by p.product_id\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065607,
                "title": "accepts-new-testcases",
                "content": "\\n# Code\\n```\\nselect p.product_id, coalesce(round(sum(u.units*p.price)/sum(u.units),2),0) as average_price \\nfrom prices p left join unitssold u\\non p.product_id = u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id, coalesce(round(sum(u.units*p.price)/sum(u.units),2),0) as average_price \\nfrom prices p left join unitssold u\\non p.product_id = u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by p.product_id;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064458,
                "title": "sql-solution-working-with-new-testcases",
                "content": "\\n\\n# Code\\n```\\nSELECT p.product_id, COALESCE(ROUND(SUM(u.units*p.price)/SUM(u.units),2),0) AS average_price \\nFROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n# COALESCE is use to set null values to 0\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.product_id, COALESCE(ROUND(SUM(u.units*p.price)/SUM(u.units),2),0) AS average_price \\nFROM Prices p LEFT JOIN UnitsSold u\\nON p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n# COALESCE is use to set null values to 0\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063668,
                "title": "mysql-solution-all-test-case-clear",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# # Write your MySQL query statement below\\nselect p.product_id , if(round(sum(units*price)/sum(units),2),round(sum(units*price)/sum(units),2),0) as average_price \\nfrom prices as p left join unitssold as u on p.product_id=u.product_id\\nand u.purchase_date between p.start_date and p.end_date\\ngroup by product_id; \\n\\n\\n# select p.product_id ,\\n# round(sum(case when (u.purchase_date between p.start_date and p.end_date) then (units*price) else 0 end)/(sum(units)),2) as average_price\\n# from prices as p left join unitssold as u on p.product_id=u.product_id\\n# group by product_id\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# # Write your MySQL query statement below\\nselect p.product_id , if(round(sum(units*price)/sum(units),2),round(sum(units*price)/sum(units),2),0) as average_price \\nfrom prices as p left join unitssold as u on p.product_id=u.product_id\\nand u.purchase_date between p.start_date and p.end_date\\ngroup by product_id; \\n\\n\\n# select p.product_id ,\\n# round(sum(case when (u.purchase_date between p.start_date and p.end_date) then (units*price) else 0 end)/(sum(units)),2) as average_price\\n# from prices as p left join unitssold as u on p.product_id=u.product_id\\n# group by product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063055,
                "title": "simple-solution-with-null-handling",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT p.product_id ,\\ncoalesce(ROUND(sum(p.price * u.units)/ sum(u.units),2),0) as average_price\\nFROM Prices AS p LEFT JOIN UnitsSold AS u\\nON p.product_id = u.product_id AND\\nu.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.product_id ,\\ncoalesce(ROUND(sum(p.price * u.units)/ sum(u.units),2),0) as average_price\\nFROM Prices AS p LEFT JOIN UnitsSold AS u\\nON p.product_id = u.product_id AND\\nu.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063013,
                "title": "solution-with-null-processing",
                "content": "# Explanation\\nThis solution allows you to calculate __average_price__ and also process __NULL__ values that may occur during __LEFT JOIN__, so that we can output the value 0 if the field turns out to be empty\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT \\n    Prices.product_id, \\n    IF(SUM(units)>0, ROUND(SUM(units*price)/SUM(units), 2), 0) AS average_price\\nFROM Prices LEFT JOIN UnitsSold \\nON purchase_date BETWEEN start_date AND end_date AND Prices.product_id = UnitsSold.product_id\\nGROUP BY Prices.product_id\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n    Prices.product_id, \\n    IF(SUM(units)>0, ROUND(SUM(units*price)/SUM(units), 2), 0) AS average_price\\nFROM Prices LEFT JOIN UnitsSold \\nON purchase_date BETWEEN start_date AND end_date AND Prices.product_id = UnitsSold.product_id\\nGROUP BY Prices.product_id\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4062298,
                "title": "100-all-test-cases-passed-please-upvote-my-soultion",
                "content": "# Intuition\\n\\n100 % ALL test cases Passed. Please Upvote my soultion.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe use COALESCE to handle cases where there are no matching records in the UnitsSold table, resulting in a NULL average price.\\nWe use the NULLIF function to prevent division by zero. If the sum of units (SUM(u.units)) is 0, we return NULL, and then COALESCE turns it into 0 as desired in the final result\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT p.product_id, \\n       ROUND(COALESCE(SUM(u.units * p.price) / NULLIF(SUM(u.units), 0), 0), 2) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id\\n                      AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.product_id, \\n       ROUND(COALESCE(SUM(u.units * p.price) / NULLIF(SUM(u.units), 0), 0), 2) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u ON p.product_id = u.product_id\\n                      AND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4062093,
                "title": "date-matters",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:1313ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id,\\nifnull(round(sum(u.units * p.price)/sum(u.units),2),0) as average_price\\nfrom prices p\\nleft join unitssold u\\non p.product_id = u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id,\\nifnull(round(sum(u.units * p.price)/sum(u.units),2),0) as average_price\\nfrom prices p\\nleft join unitssold u\\non p.product_id = u.product_id and u.purchase_date between p.start_date and p.end_date\\ngroup by 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061866,
                "title": "my-solution-cte-and-isnull",
                "content": "\\n\\n\\n\\n# Code\\n```\\nwith cte_a as(\\nselect p.product_id,\\nsum(units*price)as avgprice,\\nsum(cast(units as decimal)) as sold\\nfrom prices as p\\nfull join unitssold as u\\non p.product_id = u.product_id and purchase_date between start_Date and end_date\\ngroup by p.product_id)\\n\\nselect product_id, isnull(round(avgprice/sold,2),0) as average_price from cte_a\\n\\n\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nwith cte_a as(\\nselect p.product_id,\\nsum(units*price)as avgprice,\\nsum(cast(units as decimal)) as sold\\nfrom prices as p\\nfull join unitssold as u\\non p.product_id = u.product_id and purchase_date between start_Date and end_date\\ngroup by p.product_id)\\n\\nselect product_id, isnull(round(avgprice/sold,2),0) as average_price from cte_a\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061382,
                "title": "integrated-into-the-solution-for-case-2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith t as (select p.product_id , round(sum(price * units)/SUM( units ) , 2) as average_price \\nfrom prices p \\nleft join UnitsSold u\\non p.product_id = u.product_id\\nand u.purchase_date between p.start_date and p.end_date   \\ngroup by product_id\\norder by product_id)\\n\\nselect product_id, \\nIFNULL(average_price,0) as average_price\\nfrom t\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith t as (select p.product_id , round(sum(price * units)/SUM( units ) , 2) as average_price \\nfrom prices p \\nleft join UnitsSold u\\non p.product_id = u.product_id\\nand u.purchase_date between p.start_date and p.end_date   \\ngroup by product_id\\norder by product_id)\\n\\nselect product_id, \\nIFNULL(average_price,0) as average_price\\nfrom t\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4059847,
                "title": "easy-to-follow-sql-solution",
                "content": "<!-- Describe your first thoughts on how to solve this problem. -->\\nCreating the simplest approach to SQL questions. Easy to understand and follow. Beats 84% of the solutions.\\nFirst, write out what is header needed in the output, then determine which JOIN to use. After that, add in the constraints. After doing these, include the formula that is given in the question. Since the output wants to include even the row that produces null, include COALESCE() function for that.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.product_id, COALESCE(ROUND(SUM(u.units*p.price)/SUM(u.units), 2), 0) as average_price\\nFROM Prices p LEFT JOIN UnitsSold u\\nON\\np.product_id = u.product_id\\nAND\\nu.purchase_date BETWEEN p.start_date AND p.end_date \\nGROUP BY\\np.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT p.product_id, COALESCE(ROUND(SUM(u.units*p.price)/SUM(u.units), 2), 0) as average_price\\nFROM Prices p LEFT JOIN UnitsSold u\\nON\\np.product_id = u.product_id\\nAND\\nu.purchase_date BETWEEN p.start_date AND p.end_date \\nGROUP BY\\np.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4059545,
                "title": "100-error-free-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT p.product_id, if(sum(units) is not null, round(SUM(p.price * u.units) / SUM(u.units),2),0) as average_price\\nFROM Prices p\\nleft JOIN UnitsSold u \\nON p.product_id = u.product_id and u.purchase_date between p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.product_id, if(sum(units) is not null, round(SUM(p.price * u.units) / SUM(u.units),2),0) as average_price\\nFROM Prices p\\nleft JOIN UnitsSold u \\nON p.product_id = u.product_id and u.purchase_date between p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058463,
                "title": "mysql-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.product_id, COALESCE(ROUND(SUM(u.units*p.price) / NULLIF(SUM(u.units),0),2),0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold  u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT p.product_id, COALESCE(ROUND(SUM(u.units*p.price) / NULLIF(SUM(u.units),0),2),0) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold  u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057691,
                "title": "beats-96-37-solving-using-ctes-with-join",
                "content": "\\n# Code\\n```\\nwith join_using_date as (\\nSELECT p.product_id, p.start_date, p.end_date, p.price, u.purchase_date, u.units\\nFROM Prices p\\nJOIN UnitsSold u\\nON p.product_id = u.product_id\\nWHERE u.purchase_date BETWEEN p.start_date AND p.end_date\\n\\n),\\nAverage_selling as(\\n  select product_id ,round(sum(price*units)/sum(units),2) as average_price \\n  from join_using_date\\n  group by product_id\\n)\\nselect * from Average_selling\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith join_using_date as (\\nSELECT p.product_id, p.start_date, p.end_date, p.price, u.purchase_date, u.units\\nFROM Prices p\\nJOIN UnitsSold u\\nON p.product_id = u.product_id\\nWHERE u.purchase_date BETWEEN p.start_date AND p.end_date\\n\\n),\\nAverage_selling as(\\n  select product_id ,round(sum(price*units)/sum(units),2) as average_price \\n  from join_using_date\\n  group by product_id\\n)\\nselect * from Average_selling\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057130,
                "title": "efficient-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSelect s.product_id, ROUND(sum(units*price)/sum(units),2) AS average_price\\nfrom Prices s\\nleft join unitsSold u\\nOn s.product_id=u.product_id AND\\nu.purchase_date BETWEEN start_date AND end_date\\ngroup by product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect s.product_id, ROUND(sum(units*price)/sum(units),2) AS average_price\\nfrom Prices s\\nleft join unitsSold u\\nOn s.product_id=u.product_id AND\\nu.purchase_date BETWEEN start_date AND end_date\\ngroup by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057065,
                "title": "my-sql-simple-solution-100-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) as average_price \\nfrom prices p \\ninner join unitssold u \\non p.product_id=u.product_id \\nwhere u.purchase_date \\nbetween p.start_date \\nand p.end_date \\ngroup by u.product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id,round(sum(p.price*u.units)/sum(u.units),2) as average_price \\nfrom prices p \\ninner join unitssold u \\non p.product_id=u.product_id \\nwhere u.purchase_date \\nbetween p.start_date \\nand p.end_date \\ngroup by u.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056993,
                "title": "average-selling-with-avg",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect\\n    p.product_id,\\n    round(avg(p.price * u.units)/avg(u.units),2) as average_price\\n    from prices p\\n    join unitssold u\\n    on p.product_id = u.product_id\\n    where purchase_date between start_date and end_date\\n    group by p.product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect\\n    p.product_id,\\n    round(avg(p.price * u.units)/avg(u.units),2) as average_price\\n    from prices p\\n    join unitssold u\\n    on p.product_id = u.product_id\\n    where purchase_date between start_date and end_date\\n    group by p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056811,
                "title": "beats-96-simple-solution-using-join",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT p.product_id , ROUND(SUM(price*units)/SUM(units),2) AS average_price\\nFROM prices p\\nJOIN unitssold u\\nON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT p.product_id , ROUND(SUM(price*units)/SUM(units),2) AS average_price\\nFROM prices p\\nJOIN unitssold u\\nON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055798,
                "title": "97-beats-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect prices.product_id,round(sum(price*units)/sum(units),2) as average_price from prices inner join unitssold on prices.product_id=unitssold.product_id and unitssold.purchase_date between start_date and end_date group by product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect prices.product_id,round(sum(price*units)/sum(units),2) as average_price from prices inner join unitssold on prices.product_id=unitssold.product_id and unitssold.purchase_date between start_date and end_date group by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4054526,
                "title": "mysql-beats-98-54-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect a.product_id,round(sum(price*units)/sum(b.units),2) as average_price from prices a join unitssold b on a.product_id = b.product_id and b.purchase_date between a.start_date and a.end_date group by a.product_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect a.product_id,round(sum(price*units)/sum(b.units),2) as average_price from prices a join unitssold b on a.product_id = b.product_id and b.purchase_date between a.start_date and a.end_date group by a.product_id\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1979714,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1925324,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1969770,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1570250,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1968353,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1570726,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1994024,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1575193,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 2074469,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1575072,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1979714,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1925324,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1969770,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1570250,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1968353,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1570726,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1994024,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1575193,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 2074469,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1575072,
                "content": [
                    {
                        "username": "wamidev",
                        "content": "i think it should medium level ?"
                    },
                    {
                        "username": "spookie886",
                        "content": "yes thank you for saying that\\uD83E\\uDD23"
                    },
                    {
                        "username": "solovevalentin",
                        "content": "Leetcode needs to start banning people posting solutions in Discussion section. This is especially bad in SQL section."
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\n- Average Price = `SUM( Price * Units ) / SUM( Units )`\n- Use `Group By product_id`\n\nClick [here](https://leetcode.com/problems/average-selling-price/solutions/3764604/mysql-simple-and-clean-beats-93-34/) for a cookie! 🍪"
                    },
                    {
                        "username": "RCchoudhary",
                        "content": "Helpful \\uD83D\\uDE00 "
                    },
                    {
                        "username": "mahala",
                        "content": "Hi, \\nCan someone please explain the logic of start date and end date - I know there\\'s duplication but why are we doing this like the between thing as mentioned below to get it correct? Please explain\\n\\nu.purchase_date >= p.start_date and u.purchase_date <= p.end_date\\n\\nOR\\n\\npurchase_date BETWEEN start_date AND end_date"
                    },
                    {
                        "username": "SaksAg",
                        "content": "We use start_date and end_date because, we also need to check what the price of the product was at the date of purchase. Through the example we see it is possible for a product to have different prices at different times"
                    },
                    {
                        "username": "AeonixClist",
                        "content": "These are equivalent statements. Some coders might prefer one or the other, but the output is the same. "
                    },
                    {
                        "username": "AyushBhat822",
                        "content": "For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id. This is the HINT "
                    },
                    {
                        "username": "raghuaanu26",
                        "content": "Imagine you have a big basket of fruits and you want to know how many apples you have. But there are also other fruits in the basket like bananas and oranges, and you don\\'t want to count them as apples. So you have to look at each fruit and check if it is an apple before you can count it.\\n\\nSimilarly, in the SQL query we have a table of all the products that were sold, including their IDs, dates, and the number of units sold. We want to find the average price for each product, but we only want to consider the sales that happened during a certain time period, like a week or a month.\\n\\nSo we need to tell the computer which sales to count and which ones to ignore. We do this by using the purchase_date BETWEEN start_date AND end_date part of the query. This tells the computer to only consider the sales where the purchase date is between the start date and the end date that we specify."
                    },
                    {
                        "username": "Sree_Codes",
                        "content": "Even, I need to know the answer for this question"
                    },
                    {
                        "username": "EduardMalinochka",
                        "content": "Is this really an easy level task lol?\nUsed three CTE to solve it"
                    },
                    {
                        "username": "strsryw",
                        "content": "[@jargolastik](/jargolastik) where did u get where u .. between bro.. theres no in question\\n"
                    },
                    {
                        "username": "jargolastik",
                        "content": "You can do it with one inner join like this:\\n\\nSELECT\\n    U.product_id,\\n    ROUND(SUM(U.units * P.price) / SUM(U.units),2) AS average_price\\nFROM UnitsSold U\\nINNER JOIN Prices P\\nON U.product_id = P.product_Id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY 1;"
                    },
                    {
                        "username": "2uringTested",
                        "content": "didnt really need three CTEs... could do in one...all you have to do is \\n\\nwith temp as \\n(select prices.product_id, price, units\\nprices left join unitssold \\non prices.product_id = unitssold.product_id\\nwhere purchase_date between start_date and end_date)\\n\\nnow you can just select product _id and sum(price*units)/sum(units) \\nfrom temp and group by product_id;\\n\\n\\n"
                    },
                    {
                        "username": "deng481",
                        "content": "Runtime: 508 ms, faster than 93.86% of MySQL online submissions for Average Selling Price.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Average Selling Price.\\nNext challenges: \\n\\nselect p.product_id, ROUND(sum(price*units)/sum(units),2) as average_price  from Prices p inner join UnitsSold u\\non p.product_id  = u.product_id \\nwhere u.purchase_date between p.start_date  and p.end_date   \\ngroup by p.product_id"
                    },
                    {
                        "username": "adeelaslam_arbisoft",
                        "content": "In MS SQL Server T-SQL same script that I got working when I selected P-SQL has not worked. In P-SQL it is correctly pulling 6.96 but in MS SQL decimals are gone, it is pulling 6. Can anybody suggest me a solution? "
                    },
                    {
                        "username": "RaviRautela",
                        "content": "select p.product_id, round(SUM(price * units) / SUM(units),2) as average_price \\nfrom prices as p \\nleft join unitssold as us \\non p.product_id = us.product_id and purchase_date between start_date and end_date group by p.product_id;"
                    },
                    {
                        "username": "nickptran",
                        "content": "you have to cast it in sqlserver"
                    },
                    {
                        "username": "sophiayang",
                        "content": "# Write your MySQL query statement below\\n\\nselect p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id"
                    },
                    {
                        "username": "Lysa123",
                        "content": "excellent !\\n"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "If you can\\'t pass the last test case it\\'s because you need to use IFNULL() in your select statement because in the last testcase there is a null value"
                    },
                    {
                        "username": "davidsimonfeldman",
                        "content": "share like and subscribe and smash the like button or u r a fake fan!!!\\n\\'\\'\\'\\n\\nwith x   as\\n(select p.product_id ,start_date,end_date,   purchase_date,price,units\\nfrom Prices p join UnitsSold u on\\n(p.product_id=u.product_id)\\nand     u.purchase_date  between start_date and   end_date \\norder by u.product_id),\\ny as (\\nselect   product_id ,price*units a from x\\n\\n),\\nz as (select product_id, sum(a)  sumprice from y group by 1),\\nw as (select product_id, sum(units) sumunits from UnitsSold group by 1)\\n\\nselect  z.product_id ,round(sumprice/sumunits,2) average_price from z join w on z.product_id=w.product_id\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1576829,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2075350,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2073647,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2073347,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2072876,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2072875,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2069800,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2049420,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2046320,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2036831,
                "content": [
                    {
                        "username": "DesireeLogston",
                        "content": "\\nSELECT p.product_id, \\n    ROUND(SUM(p.price*u.units) / SUM(units),2) average_price\\nFROM Prices p\\nJOIN UnitsSold u ON p.product_id=u.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY 1"
                    },
                    {
                        "username": "kalai77076",
                        "content": "**can anyone tell why the last testcase is not passing**\\nselect a.product_id, round(ifnull(sum(price*units)/sum(units),0),2) as average_price from Prices a join UnitsSold b on a.product_id=b.product_id where b.purchase_date between a.start_date and a.end_date group by a.product_id"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as\\n(\\nselect p.product_id, p.start_date, p.end_date, p.price,u.purchase_date, u.units,\\np.price * u.units as total_price\\nfrom prices p left join unitssold u\\non p.product_id=u.product_id\\nand purchase_date between start_date and end_date\\n) select product_id, nvl(round(sum(total_price)/sum(units),2),0) as average_price\\nfrom cte\\ngroup by product_id;"
                    },
                    {
                        "username": "aabhishek15723",
                        "content": "can any one help me why have we used  purchase_date ?\\n"
                    },
                    {
                        "username": "Niobium62",
                        "content": "can someone please explain why for the final test case, we must use left join and not inner join?"
                    },
                    {
                        "username": "prernaajitgupta",
                        "content": "For the query below: \nselect prices.product_id, \ncase\nwhen units!=0\nthen ROUND(SUM(price*units)/SUM(units),2) \nelse 0\nEND\nas average_price \nfrom prices left join unitssold on prices.product_id = unitssold.product_id where purchase_date between start_date and end_date\ngroup by prices.product_id ;\n\nThis is my solution, why does it fail for this testcase\n\nPrices =\n| product_id | start_date | end_date   | price |\n| ---------- | ---------- | ---------- | ----- |\n| 1          | 2019-02-17 | 2019-02-28 | 5     |\n| 1          | 2019-03-01 | 2019-03-22 | 20    |\n| 2          | 2019-02-01 | 2019-02-20 | 15    |\n| 2          | 2019-02-21 | 2019-03-31 | 30    |\n| 3          | 2019-02-21 | 2019-03-31 | 30    |\nUnitsSold =\n| product_id | purchase_date | units |\n| ---------- | ------------- | ----- |\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n\nUse Testcase\nOutput\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\nExpected\n| product_id | average_price |\n| ---------- | ------------- |\n| 1          | 6.96          |\n| 2          | 16.96         |\n| 3          | 0             |"
                    },
                    {
                        "username": "gamadean",
                        "content": "[@Prerna Gupta](/prernaajitgupta) Is this ORACLE SQL?"
                    },
                    {
                        "username": "artgallery",
                        "content": "select p.product_id, round(sum(units*price)/sum(units),2) average_price\\nfrom prices p\\njoin unitssold us\\non p.product_id = us.product_id\\nand purchase_date between start_date and end_date\\ngroup by p.product_id\\n\\nwhere this command is only passing 15/16 testcases?\\n"
                    },
                    {
                        "username": "SinghManraj",
                        "content": "use this IFNULL condition\nround(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2)\n\nalso left join\n\nselect P.product_id, round(ifnull(sum(P.price * U.units) / sum(U.units), 0), 2) as average_price\nfrom Prices as P\nleft join UnitsSold as U\non P.product_id = U.product_id \nand U.purchase_date between P.start_date and P.end_date\ngroup by P.product_id\n"
                    },
                    {
                        "username": "nickptran",
                        "content": "You need to cast in sql server"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "\\nwith cte as (select us.product_id , us.units , (units * price) as total_price \\nfrom UnitsSold us join\\nprices p on p.product_id = us.product_id and us.purchase_date between p.start_date and p.end_date)\\n\\nselect product_id , round(sum(total_price)/sum(units) , 2) as average_price\\nfrom cte\\ngroup by product_id"
                    },
                    {
                        "username": "tungvt11345",
                        "content": "how to know when to use WHERE and when to use HAVING guys?"
                    },
                    {
                        "username": "SaraTamer",
                        "content": "Having, is to put condition on each group when you use group by"
                    }
                ]
            },
            {
                "id": 2033755,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            },
            {
                "id": 2033753,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            },
            {
                "id": 2025269,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            },
            {
                "id": 2023727,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            },
            {
                "id": 2014128,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            },
            {
                "id": 2011985,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            },
            {
                "id": 2004324,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            },
            {
                "id": 1990193,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            },
            {
                "id": 1988065,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            },
            {
                "id": 1980402,
                "content": [
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "**CAN SOMEONE PLEASE EXPLAIN WHY IT\\'S WRONG? \\n\\n\\nWITH cte AS \\n(SELECT b.product_id, a.price, b.units \\nFROM prices a, unitssold b  \\nWHERE b.purchase_date BETWEEN a.start_date AND a.end_date \\nAND a.product_id = b.product_id)\\nSELECT product_id, ROUND(sum(price*units)/sum(units),2) as average_price  \\nFROM cte  \\n "
                    },
                    {
                        "username": "gamadean",
                        "content": "The query you provided is close, but there\\'s a minor issue in the way you\\'re calculating the average price. You\\'re on the right track by calculating the total price and the total number of units sold for each product, but the issue lies in the calculation of the average.\\n\\nHere\\'s the corrected query:\\n\\nWITH cte AS (\\n    SELECT p.product_id, u.units, p.price\\n    FROM Prices p\\n    JOIN UnitsSold u ON p.product_id = u.product_id\\n    AND u.purchase_date BETWEEN p.start_date AND p.end_date\\n)\\nSELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price\\nFROM cte\\nGROUP BY product_id;\\n"
                    },
                    {
                        "username": "kalai77076",
                        "content": "the null value should be converted to 0 so use ifnull inside the round() "
                    },
                    {
                        "username": "Prashant_Tiwari123",
                        "content": "select product_id,round(sum(price*units)/sum(units),2) as average_price\\nfrom prices \\njoin\\nunitssold\\nusing (product_id)\\ngroup by product_id\\norder by product_id\\nwhat is the mistake in this query\\n"
                    },
                    {
                        "username": "aktgecodes",
                        "content": "Can someone tell me why we should use between startdate and enddate condition?"
                    },
                    {
                        "username": "manueldelara1",
                        "content": "The products have different prices on different dates. The first table gives you the dates that a product was a certain price. You need to know if the purchase date is between the dates to determine which price you should use to calculate the average."
                    },
                    {
                        "username": "dhruv0911",
                        "content": "To check that purchase was made during that window bcoz the prices of same product vary by dates"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "select u.product_id,round(sum(case when u.purchase_date between p.start_date and p.end_date then p.price*u.units end)/sum(u.units),2) as average_price from prices p join unitssold u on p.product_id=u.product_id group by p.product_id \\nThis query is working fine but why is this giving me the 1/2 of expected answer (3.48,8.48) any idea?"
                    },
                    {
                        "username": "xopow",
                        "content": "Each product has its own release and termination date, that\\'s why we use \\'between statement\\' to make correct join to find out average price"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "SELECT P.product_id,ROUND(SUM(P.price*U.units)/SUM(U.units),2)\\nAS average_price  \\nFROM Prices as p INNER JOIN \\nUnitsSold  as u ON U.product_id=P.product_id\\nWHERE U.purchase_date BETWEEN P.start_date AND P.end_date\\nGROUP BY P.product_id\\n\\n# sum(p.price*u.units)/sum(u.units)\\n# 100*5+15*20/100+15\\n# 500+300/115\\n# 800/115\\n# 6.95\\n"
                    },
                    {
                        "username": "SYEDAZMATH",
                        "content": "SELECT a.product_id, round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\\nFROM UnitsSold a\\n\\tJOIN Prices b\\n\\tON (a.product_id = b.product_id\\n\\t\\tAND a.purchase_date >= b.start_date\\n\\t\\tAND a.purchase_date <= b.end_date)\\ngroup by product_id"
                    },
                    {
                        "username": "user0780E",
                        "content": "SELECT A.product_id,ROUND(SUM(price*units)/SUM(units),2) as average_price FROM Prices A JOIN UnitsSold U\\nON U.product_id = A.product_id AND purchase_date BETWEEN start_date AND end_date\\nGROUP BY product_id;"
                    },
                    {
                        "username": "Sudhanshu2020",
                        "content": "`Why this code is giving incorrect result??`\\n\\n\\nSELECT p.product_id, ROUND(AVG(p.price), 2) FROM Prices AS p\\nINNER JOIN UnitsSold AS u\\nON p.product_id = u.product_id \\nWHERE purchase_date BETWEEN start_date AND end_date\\nGROUP BY p.product_id;"
                    },
                    {
                        "username": "Ashvin6400",
                        "content": "SELECT P.product_id, ROUND((SUM((P.price*U.units))/SUM(U.units)),2) AS average_price FROM Prices AS P\\nLEFT JOIN UnitsSold AS U on P.product_id = U.Product_id\\nWHERE U.purchase_date >= P.start_date AND U.purchase_date <= P.end_date\\nGROUP BY P.product_id"
                    }
                ]
            }
        ]
    }
]