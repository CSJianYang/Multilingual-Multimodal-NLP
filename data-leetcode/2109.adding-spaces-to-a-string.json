[
    {
        "title": "Adding Spaces to a String",
        "question_content": "You are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. Each space should be inserted before the character at the given index.\n\n\tFor example, given s = \"EnjoyYourCoffee\" and spaces = [5, 9], we place spaces before 'Y' and 'C', which are at indices 5 and 9 respectively. Thus, we obtain \"Enjoy Your Coffee\".\n\nReturn the modified string after the spaces have been added.\n&nbsp;\nExample 1:\n\nInput: s = \"LeetcodeHelpsMeLearn\", spaces = [8,13,15]\nOutput: \"Leetcode Helps Me Learn\"\nExplanation: \nThe indices 8, 13, and 15 correspond to the underlined characters in \"LeetcodeHelpsMeLearn\".\nWe then place spaces before those characters.\n\nExample 2:\n\nInput: s = \"icodeinpython\", spaces = [1,5,7,9]\nOutput: \"i code in py thon\"\nExplanation:\nThe indices 1, 5, 7, and 9 correspond to the underlined characters in \"icodeinpython\".\nWe then place spaces before those characters.\n\nExample 3:\n\nInput: s = \"spacing\", spaces = [0,1,2,3,4,5,6]\nOutput: \" s p a c i n g\"\nExplanation:\nWe are also able to place spaces before the first character of the string.\n\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 3 * 105\n\ts consists only of lowercase and uppercase English letters.\n\t1 <= spaces.length <= 3 * 105\n\t0 <= spaces[i] <= s.length - 1\n\tAll the values of spaces are strictly increasing.",
        "solutions": [
            {
                "id": 1635054,
                "title": "one-pointer-vs-two-pointers",
                "content": "I think the point of this question is to try and compare multiple approaches to string manipulation.\\n\\n#### Approach 1: One Pointer\\nHere, we iterate through `spaces`, copying string in between. The first version is efficient as it uses `copy`. The second version is simpler as it uses `substr`; it creates a temporary string but the overal complexity is still linear (the complexity of `substr` is linear to the *returned* string).\\n\\n**C++ (copy)**\\n```cpp\\nstring addSpaces(string s, vector<int>& sps) {\\n    string res(s.size() + sps.size(), \\' \\');\\n    for (int i = 0; i <= sps.size(); ++i) {\\n        int prev = i ? sps[i - 1] : 0, cur = i == sps.size() ? s.size() : sps[i];\\n        copy(begin(s) + prev, begin(s) + cur, begin(res) + prev + i);\\n    }\\n    return res;\\n}\\n```\\n**C++ (substr)**\\n```cpp\\nstring addSpaces(string s, vector<int>& spaces) {\\n    string res;\\n    int last = 0;\\n    for (auto i : spaces) {\\n        res += s.substr(last, i - last) + \" \";\\n        last = i;\\n    }\\n    return res + s.substr(last);\\n}\\n```\\n#### Approach 2: Two Pointers\\nWe go through the string, tracking the position in the `spaces` array.\\n\\n**C++ (build string)**\\n```cpp\\nstring addSpaces(string s, vector<int>& spaces) {\\n    string res;\\n    for (int i = 0, j = 0; i < s.size(); ++i) {\\n        if (j < spaces.size() && i == spaces[j]) {\\n            res += \" \";\\n            ++j;\\n        }\\n        res += s[i];\\n    }\\n    return res;\\n}\\n```\\n\\n**C++ (allocate string)**\\n```cpp\\nstring addSpaces(string s, vector<int>& sps) {\\n    string res(s.size() + sps.size(), \\' \\');\\n    for (int i = 0, j = 0; i < s.size(); ++i) {\\n        if (j < sps.size() && i == sps[j])\\n            ++j;\\n        res[i + j] = s[i];\\n    }\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nstring addSpaces(string s, vector<int>& sps) {\\n    string res(s.size() + sps.size(), \\' \\');\\n    for (int i = 0; i <= sps.size(); ++i) {\\n        int prev = i ? sps[i - 1] : 0, cur = i == sps.size() ? s.size() : sps[i];\\n        copy(begin(s) + prev, begin(s) + cur, begin(res) + prev + i);\\n    }\\n    return res;\\n}\\n```\n```cpp\\nstring addSpaces(string s, vector<int>& spaces) {\\n    string res;\\n    int last = 0;\\n    for (auto i : spaces) {\\n        res += s.substr(last, i - last) + \" \";\\n        last = i;\\n    }\\n    return res + s.substr(last);\\n}\\n```\n```cpp\\nstring addSpaces(string s, vector<int>& spaces) {\\n    string res;\\n    for (int i = 0, j = 0; i < s.size(); ++i) {\\n        if (j < spaces.size() && i == spaces[j]) {\\n            res += \" \";\\n            ++j;\\n        }\\n        res += s[i];\\n    }\\n    return res;\\n}\\n```\n```cpp\\nstring addSpaces(string s, vector<int>& sps) {\\n    string res(s.size() + sps.size(), \\' \\');\\n    for (int i = 0, j = 0; i < s.size(); ++i) {\\n        if (j < sps.size() && i == sps[j])\\n            ++j;\\n        res[i + j] = s[i];\\n    }\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1635042,
                "title": "c-two-pointers",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n\\n## Solution 1. Two Pointers\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/adding-spaces-to-a-string/\\n// Author: github.com/lzl124631x\\n// Time: O(N + M) = O(N)\\n// Space: O(1) extra space\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& A) {\\n        string ans;\\n        ans.reserve(s.size() + A.size()); // Optional: pre-allocate enough space for the answer.\\n        int N = s.size(), j = 0, M = A.size(); // `A[j]` is the next index before which a space should be inserted\\n        for (int i = 0; i < N; ++i) {\\n            if (j < M && i == A[j]) { // If `i == A[j]`, we insert a space\\n                ans += \\' \\';\\n                ++j;\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/problems/adding-spaces-to-a-string/\\n// Author: github.com/lzl124631x\\n// Time: O(N + M) = O(N)\\n// Space: O(1) extra space\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& A) {\\n        string ans;\\n        ans.reserve(s.size() + A.size()); // Optional: pre-allocate enough space for the answer.\\n        int N = s.size(), j = 0, M = A.size(); // `A[j]` is the next index before which a space should be inserted\\n        for (int i = 0; i < N; ++i) {\\n            if (j < M && i == A[j]) { // If `i == A[j]`, we insert a space\\n                ans += \\' \\';\\n                ++j;\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635039,
                "title": "java-python-3-traverse-input",
                "content": "Reversely traverse input.\\n\\n```java\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        for (int i = s.length() - 1, j = spaces.length - 1; i >= 0; --i) {\\n            ans.append(s.charAt(i));\\n            if (j >= 0 && spaces[j] == i) {\\n                --j;\\n                ans.append(\\' \\');\\n            }\\n        }\\n        return ans.reverse().toString();\\n    }\\n```\\n```python\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = []\\n        i = len(s) - 1\\n        while i >= 0:\\n            ans.append(s[i])\\n            if spaces and i == spaces[-1]:\\n                ans.append(\\' \\')\\n                spaces.pop()\\n            i -= 1    \\n        return \\'\\'.join(ans[:: -1])\\n```\\n\\n----\\n\\nTraverse input from left to right.\\n```java\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        for (int i = 0, j = 0; i < s.length(); ++i) {\\n            if (j < spaces.length && spaces[j] == i) {\\n                ans.append(\\' \\');\\n                ++j;\\n            }\\n            ans.append(s.charAt(i));\\n        }\\n        return ans.toString();\\n    }\\n```\\n```python\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = []\\n        j = 0\\n        for i, c in enumerate(s):\\n            if j < len(spaces) and i == spaces[j]:\\n                ans.append(\\' \\')\\n                j += 1\\n            ans.append(c)\\n        return \\'\\'.join(ans)\\n```",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        for (int i = s.length() - 1, j = spaces.length - 1; i >= 0; --i) {\\n            ans.append(s.charAt(i));\\n            if (j >= 0 && spaces[j] == i) {\\n                --j;\\n                ans.append(\\' \\');\\n            }\\n        }\\n        return ans.reverse().toString();\\n    }\\n```\n```python\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = []\\n        i = len(s) - 1\\n        while i >= 0:\\n            ans.append(s[i])\\n            if spaces and i == spaces[-1]:\\n                ans.append(\\' \\')\\n                spaces.pop()\\n            i -= 1    \\n        return \\'\\'.join(ans[:: -1])\\n```\n```java\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        for (int i = 0, j = 0; i < s.length(); ++i) {\\n            if (j < spaces.length && spaces[j] == i) {\\n                ans.append(\\' \\');\\n                ++j;\\n            }\\n            ans.append(s.charAt(i));\\n        }\\n        return ans.toString();\\n    }\\n```\n```python\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = []\\n        j = 0\\n        for i, c in enumerate(s):\\n            if j < len(spaces) and i == spaces[j]:\\n                ans.append(\\' \\')\\n                j += 1\\n            ans.append(c)\\n        return \\'\\'.join(ans)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1634984,
                "title": "c-two-pointer-beginner-friendly",
                "content": "Time:   O(N)\\n\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        int i,n=spaces.size(),m=s.size(),j;\\n        string ans=\"\";\\n        i=0;\\n        j=0;\\n        \\n        //jth pointer for current index of spaces vector\\n        //ith pointer for current index of our answer string\\n        while(i<m)\\n        {\\n            //if at our current index i is equals to spaces[j] which means we have space at this index,so we add space right here\\n            if(j<n&&i==spaces[j])\\n            {\\n                ans+=\" \";\\n                j++;\\n                //incrementing j to get next space index location\\n            }\\n            ans+=s[i];\\n            i++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        int i,n=spaces.size(),m=s.size(),j;\\n        string ans=\"\";\\n        i=0;\\n        j=0;\\n        \\n        //jth pointer for current index of spaces vector\\n        //ith pointer for current index of our answer string\\n        while(i<m)\\n        {\\n            //if at our current index i is equals to spaces[j] which means we have space at this index,so we add space right here\\n            if(j<n&&i==spaces[j])\\n            {\\n                ans+=\" \";\\n                j++;\\n                //incrementing j to get next space index location\\n            }\\n            ans+=s[i];\\n            i++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1680695,
                "title": "python-simple-and-clean-solution",
                "content": "**Python :**\\n\\n```\\ndef addSpaces(self, s: str, spaces: List[int]) -> str:\\n\\tres = s[:spaces[0]] + \" \"\\n\\n\\tfor j in range(1, len(spaces)):\\n\\t\\tres +=  s[spaces[j- 1]:spaces[j]] + \" \"\\n\\n\\tres +=  s[spaces[-1]:]       \\n\\treturn res\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef addSpaces(self, s: str, spaces: List[int]) -> str:\\n\\tres = s[:spaces[0]] + \" \"\\n\\n\\tfor j in range(1, len(spaces)):\\n\\t\\tres +=  s[spaces[j- 1]:spaces[j]] + \" \"\\n\\n\\tres +=  s[spaces[-1]:]       \\n\\treturn res\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1635075,
                "title": "python-split-and-join-to-the-rescue-from-tle-to-accepted-straightforward",
                "content": "Just do what the question said i.e \\nAdd spaces at that index \\n\\nIn the first solution i guess due to python\\'s way of working with strings we are getting a TLE error\\n```\\n#TLE SOLUTION\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n\\t\\tspaces_idx = len(spaces)-1\\n\\n\\t\\tdef addString(index,s):\\n\\t\\t\\ts = s[:index]+\" \"+s[index:] \\n\\t\\t\\t#This changes the string at every instance hence taking so much time\\n\\t\\t\\treturn s\\n\\t\\t\\t\\n\\t\\twhile spaces_idx>=0:\\n\\t\\t\\ts = addString(spaces[spaces_idx],s)\\n\\t\\t\\tspaces_idx-=1\\n\\t\\treturn s\\n```\\nTo tackle this I **split** the required words and then used the **join** method to combine it with a whitespaces\\n\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        \\n        arr = []\\n        prev = 0\\n        for space in spaces:\\n            arr.append(s[prev:space])\\n            prev = space\\n        arr.append(s[space:])\\n       \\n        return \" \".join(arr)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n#TLE SOLUTION\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n\\t\\tspaces_idx = len(spaces)-1\\n\\n\\t\\tdef addString(index,s):\\n\\t\\t\\ts = s[:index]+\" \"+s[index:] \\n\\t\\t\\t#This changes the string at every instance hence taking so much time\\n\\t\\t\\treturn s\\n\\t\\t\\t\\n\\t\\twhile spaces_idx>=0:\\n\\t\\t\\ts = addString(spaces[spaces_idx],s)\\n\\t\\t\\tspaces_idx-=1\\n\\t\\treturn s\\n```\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        \\n        arr = []\\n        prev = 0\\n        for space in spaces:\\n            arr.append(s[prev:space])\\n            prev = space\\n        arr.append(s[space:])\\n       \\n        return \" \".join(arr)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635107,
                "title": "c-solution-using-set",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        set<int> st;\\n        for(auto &i : spaces) st.insert(i);\\n        \\n        string ans = \"\";\\n        for(int i =0 ; i < (int)s.size() ; i++) {\\n            if(st.count(i)) {\\n                ans += \" \";\\n            }\\n            ans += s[i];\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        set<int> st;\\n        for(auto &i : spaces) st.insert(i);\\n        \\n        string ans = \"\";\\n        for(int i =0 ; i < (int)s.size() ; i++) {\\n            if(st.count(i)) {\\n                ans += \" \";\\n            }\\n            ans += s[i];\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1695213,
                "title": "python-code-adding-spaces-to-a-string",
                "content": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        arr=[]\\n        prev=0\\n        for i in spaces:\\n            arr.append(s[prev:i])\\n            prev=i\\n        arr.append(s[i:])\\n        return \" \".join(arr)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        arr=[]\\n        prev=0\\n        for i in spaces:\\n            arr.append(s[prev:i])\\n            prev=i\\n        arr.append(s[i:])\\n        return \" \".join(arr)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362808,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& A) \\n    {\\n        string ans;\\n        ans.reserve(s.size() + A.size()); \\n        int N = s.size(), j = 0, M = A.size(); \\n        for (int i = 0; i < N; ++i) \\n        {\\n            if (j < M && i == A[j])\\n             { \\n                ans += \\' \\';\\n                ++j;\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& A) \\n    {\\n        string ans;\\n        ans.reserve(s.size() + A.size()); \\n        int N = s.size(), j = 0, M = A.size(); \\n        for (int i = 0; i < N; ++i) \\n        {\\n            if (j < M && i == A[j])\\n             { \\n                ans += \\' \\';\\n                ++j;\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635095,
                "title": "python3-forward-backward",
                "content": "Please check out this [commit](https://github.com/gaosanyong/leetcode/commit/55c6a88797eef9ac745a3dbbff821a2aac735a70) for solutions of weekly 272. \\n\\n**Approach 1 -- forward**\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = []\\n        j = 0 \\n        for i, ch in enumerate(s): \\n            if j < len(spaces) and i == spaces[j]: \\n                ans.append(\\' \\')\\n                j += 1\\n            ans.append(ch)\\n        return \\'\\'.join(ans)\\n```\\n\\n**Approach 2 -- backward**\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = []\\n        for i in reversed(range(len(s))): \\n            ans.append(s[i])\\n            if spaces and spaces[-1] == i: \\n                ans.append(\\' \\')\\n                spaces.pop()\\n        return \"\".join(reversed(ans))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = []\\n        j = 0 \\n        for i, ch in enumerate(s): \\n            if j < len(spaces) and i == spaces[j]: \\n                ans.append(\\' \\')\\n                j += 1\\n            ans.append(ch)\\n        return \\'\\'.join(ans)\\n```\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = []\\n        for i in reversed(range(len(s))): \\n            ans.append(s[i])\\n            if spaces and spaces[-1] == i: \\n                ans.append(\\' \\')\\n                spaces.pop()\\n        return \"\".join(reversed(ans))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635084,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        \\n        int j = 0,curr = 0;\\n        StringBuilder sb = new StringBuilder();\\n        while(curr<s.length()){\\n           \\n             if(j<spaces.length&&spaces[j]==curr){\\n                 \\n                sb.append(\" \");\\n                j++;\\n    \\n                }\\n                sb.append(s.charAt(curr));\\n                curr++;\\n\\n        }\\n\\n        return sb.toString();\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        \\n        int j = 0,curr = 0;\\n        StringBuilder sb = new StringBuilder();\\n        while(curr<s.length()){\\n           \\n             if(j<spaces.length&&spaces[j]==curr){\\n                 \\n                sb.append(\" \");\\n                j++;\\n    \\n                }\\n                sb.append(s.charAt(curr));\\n                curr++;\\n\\n        }\\n\\n        return sb.toString();\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2763621,
                "title": "very-simple-java-solution",
                "content": "Very Simple Java\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n\\n        for (int i = 0; i < spaces.length; i++) {\\n            sb.insert(spaces[i] + i, \" \");\\n        }\\n\\n\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n\\n        for (int i = 0; i < spaces.length; i++) {\\n            sb.insert(spaces[i] + i, \" \");\\n        }\\n\\n\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798803,
                "title": "c-two-pointer-solution-simple-approach",
                "content": "class Solution {\\npublic:\\n\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string res=\"\";\\n        int i=0,j=0;\\n        while(i<s.size() and j<spaces.size()){\\n            if(i==spaces[j]){\\n                res+=\" \";\\n                j++;\\n            }\\n            res+=s[i];\\n            i++;\\n        }\\n        while(i<s.size()){\\n            res+=s[i];\\n            i++;\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "class Solution {\\npublic:\\n\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string res=\"\";\\n        int i=0,j=0;\\n        while(i<s.size() and j<spaces.size()){\\n            if(i==spaces[j]){\\n                res+=\" \";\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1674541,
                "title": "why-i-am-getting-runtime-error",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) \\n    {\\n       \\n        int j=0,k=0, n=s.size()+spaces.size();\\n         char ans[n];\\n        for(int i=0; i<n; i++)\\n        {\\n            if(j<spaces.size() && i==spaces[j])\\n            {\\n                ans[i]=\\' \\';\\n                j++;\\n            }\\n            else\\n            {\\n                ans[i]=s[k++];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) \\n    {\\n       \\n        int j=0,k=0, n=s.size()+spaces.size();\\n         char ans[n];\\n        for(int i=0; i<n; i++)\\n        {\\n            if(j<spaces.size() && i==spaces[j])\\n            {\\n                ans[i]=\\' \\';\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1635143,
                "title": "easy-c-solution-tc-o-n-readable-code",
                "content": "If you have any doubt please ask in the comments. Thank you.\\nQuestion Link: https://leetcode.com/problems/adding-spaces-to-a-string/\\n```\\nstring addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int j=0;\\n        for(int i=0;i<s.size();i++){\\n            if(j<spaces.size() and spaces[j]==i){\\n                ans+=\\' \\';\\n                j++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n    } \\n\\t",
                "solutionTags": [
                    "C"
                ],
                "code": "If you have any doubt please ask in the comments. Thank you.\\nQuestion Link: https://leetcode.com/problems/adding-spaces-to-a-string/\\n```\\nstring addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int j=0;\\n        for(int i=0;i<s.size();i++){\\n            if(j<spaces.size() and spaces[j]==i){\\n                ans+=\\' \\';\\n                j++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n    } \\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 2756199,
                "title": "two-pointer-with-o-1-beats-98-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n two pointer approach with constant space\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @param {number[]} spaces\\n * @return {string}\\n */\\nvar addSpaces = function(s, spaces) {\\n    let left =0;\\n    let temp =\\'\\';\\n    let count =0\\n    let right = 0;\\n    while(right < s.length){\\n\\n        if(right === spaces[count]){\\n         temp += s.slice(left,right) + \" \"\\n        left = right;\\n        count++;\\n\\n        }\\n    right++;\\n    }\\n\\ntemp+=s.slice(left,right)\\nreturn temp\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number[]} spaces\\n * @return {string}\\n */\\nvar addSpaces = function(s, spaces) {\\n    let left =0;\\n    let temp =\\'\\';\\n    let count =0\\n    let right = 0;\\n    while(right < s.length){\\n\\n        if(right === spaces[count]){\\n         temp += s.slice(left,right) + \" \"\\n        left = right;\\n        count++;\\n\\n        }\\n    right++;\\n    }\\n\\ntemp+=s.slice(left,right)\\nreturn temp\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2086939,
                "title": "c-o-n-solution-with-explanation",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int> &sp) \\n    {\\n        string res = \"\"; // build new string as result\\n        int i=0, j=0;\\n        while(i<s.length()&&j<sp.size()) // && condition to avoid runtime error, remaining char of s will be appended after while loop\\n        {\\n            if(i==sp[j]) // time to add space\\n                res += \" \", j++; // increment to next j\\n            else\\n                res += s[i++]; // add s[i] and move to next i\\n        }\\n        while(i<s.length()) // remaining char of s\\n            res += s[i++];\\n        return res;\\n    } // try to run and debug on Example 2 to see the significance of && in while loop. \\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int> &sp) \\n    {\\n        string res = \"\"; // build new string as result\\n        int i=0, j=0;\\n        while(i<s.length()&&j<sp.size()) // && condition to avoid runtime error, remaining char of s will be appended after while loop\\n        {\\n            if(i==sp[j]) // time to add space\\n                res += \" \", j++; // increment to next j\\n            else\\n                res += s[i++]; // add s[i] and move to next i\\n        }\\n        while(i<s.length()) // remaining char of s\\n            res += s[i++];\\n        return res;\\n    } // try to run and debug on Example 2 to see the significance of && in while loop. \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3914448,
                "title": "c-super-easy-clean-code-two-pointers-beats-100-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        string ans = \"\";\\n        int j=0;\\n        int n = s.size();\\n        int m = spaces.size();\\n        for(int i=0; i<n; i++){\\n            if(j < m && i == spaces[j]){\\n                ans += \\' \\';\\n                j++;\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        string ans = \"\";\\n        int j=0;\\n        int n = s.size();\\n        int m = spaces.size();\\n        for(int i=0; i<n; i++){\\n            if(j < m && i == spaces[j]){\\n                ans += \\' \\';\\n                j++;\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3358456,
                "title": "8-line-python-code-one-pass",
                "content": "# Intuition\\nMaintain a lastAdded upto pointer -> this pointer will store the last index we have added in res of s.\\nIterate in spaces and add chars from last seen index till i and then add space & update last idx added upto.\\nreturn res.\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        res = \"\"\\n        lastIdx = 0\\n        for i in spaces:\\n            res += s[lastIdx:i]\\n            res += \" \"\\n            lastIdx = i\\n        res += s[lastIdx:]\\n        return(res)\\n\\n        #TLE ->\\n        # s = list(s)\\n        # for i in range(len(spaces)):\\n        #     idx = spaces[i] + i\\n        #     s.insert(idx, \" \")\\n        # res = \\'\\'.join(s)\\n        # return(res)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        res = \"\"\\n        lastIdx = 0\\n        for i in spaces:\\n            res += s[lastIdx:i]\\n            res += \" \"\\n            lastIdx = i\\n        res += s[lastIdx:]\\n        return(res)\\n\\n        #TLE ->\\n        # s = list(s)\\n        # for i in range(len(spaces)):\\n        #     idx = spaces[i] + i\\n        #     s.insert(idx, \" \")\\n        # res = \\'\\'.join(s)\\n        # return(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2345163,
                "title": "simplest-java-solution-o-n-complexity-easy-understanding",
                "content": "**Java solution -> do upvote if you like!!**\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        char[] c = s.toCharArray();\\n        String[] st = new String[c.length];\\n\\t\\t// convert character array to string array to modify to add space later on\\n        for (int i = 0; i < c.length; i++) {\\n            st[i] = \"\" + c[i];\\n        }\\n\\t\\t// adding spaces at given index\\n        for (int i = 0; i < spaces.length; i++) {\\n            st[spaces[i]] = \" \" + st[spaces[i]];\\n        }\\n\\t// created string builder to store the string from the string array\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < st.length; i++) {\\n            sb.append(st[i]);\\n        }\\n\\t\\t\\n\\t\\t// returning the stringbuilder as a string\\n        return sb.toString();\\n    }\\n}\\n```\\n**Thank You!!**\\n**please Upvote this solution if you liked!! it motivates me to do great things**",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        char[] c = s.toCharArray();\\n        String[] st = new String[c.length];\\n\\t\\t// convert character array to string array to modify to add space later on\\n        for (int i = 0; i < c.length; i++) {\\n            st[i] = \"\" + c[i];\\n        }\\n\\t\\t// adding spaces at given index\\n        for (int i = 0; i < spaces.length; i++) {\\n            st[spaces[i]] = \" \" + st[spaces[i]];\\n        }\\n\\t// created string builder to store the string from the string array\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < st.length; i++) {\\n            sb.append(st[i]);\\n        }\\n\\t\\t\\n\\t\\t// returning the stringbuilder as a string\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2157509,
                "title": "java-3-approaches-recursion-stringbuilder",
                "content": "USing only Stringbuilder\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb=new StringBuilder();\\n        int k=0;\\n        for(int i=0;i<spaces.length;i++){\\n            sb.append(s.substring(k,spaces[i]));\\n            k=spaces[i];\\n            sb.append(\" \");\\n        }\\n        sb.append(s.substring(k,s.length()));\\n        return sb.toString();\\n    }\\n}\\n```\\n\\nUsing for loop of string:\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb=new StringBuilder();\\n        int k=0;\\n        for(int i=0;i<s.length();i++){\\n            if(k<spaces.length){\\n                if(i==spaces[k]){\\n                    k++;\\n                    sb.append(\" \");\\n                }\\n            }\\n            sb.append(s.charAt(i));\\n        }\\n        return sb.toString();\\n    }\\n}\\n```\\n\\n\\nUsing Recursion:\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb=new StringBuilder();\\n        int k=0;\\n        return helper(s,spaces,sb,k,0);\\n    }\\n    String helper(String s,int[] spaces,StringBuilder sb,int k,int i){\\n        if(i==s.length()){\\n            return sb.toString();\\n        }\\n        if(k<spaces.length){\\n            if(i==spaces[k]){\\n                k++;\\n                sb.append(\" \");\\n            }\\n        }\\n        sb.append(s.charAt(i));\\n        return helper(s,spaces,sb,k,i+1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb=new StringBuilder();\\n        int k=0;\\n        for(int i=0;i<spaces.length;i++){\\n            sb.append(s.substring(k,spaces[i]));\\n            k=spaces[i];\\n            sb.append(\" \");\\n        }\\n        sb.append(s.substring(k,s.length()));\\n        return sb.toString();\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb=new StringBuilder();\\n        int k=0;\\n        for(int i=0;i<s.length();i++){\\n            if(k<spaces.length){\\n                if(i==spaces[k]){\\n                    k++;\\n                    sb.append(\" \");\\n                }\\n            }\\n            sb.append(s.charAt(i));\\n        }\\n        return sb.toString();\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb=new StringBuilder();\\n        int k=0;\\n        return helper(s,spaces,sb,k,0);\\n    }\\n    String helper(String s,int[] spaces,StringBuilder sb,int k,int i){\\n        if(i==s.length()){\\n            return sb.toString();\\n        }\\n        if(k<spaces.length){\\n            if(i==spaces[k]){\\n                k++;\\n                sb.append(\" \");\\n            }\\n        }\\n        sb.append(s.charAt(i));\\n        return helper(s,spaces,sb,k,i+1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1697330,
                "title": "python-3-1080ms-cuting-joining-words-into-sentence",
                "content": "\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        arr = []\\n        prev = 0\\n        for space in spaces:\\n            arr.append(s[prev:space])\\n            prev = space\\n        arr.append(s[space:])\\n        return \" \".join(arr)\\n```",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        arr = []\\n        prev = 0\\n        for space in spaces:\\n            arr.append(s[prev:space])\\n            prev = space\\n        arr.append(s[space:])\\n        return \" \".join(arr)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1645134,
                "title": "a-different-approach",
                "content": "We will create a string whose length will be equal to ```original_length + number_of_spaces```, and initialize it to \\'#\\' for all the characters. \\n\\nNow insert spaces wherever required, look at the code below \\u2193\\n\\nNow simply insert characters at their respective places.\\n\\nPS - any suggestions are welcome \\n\\n**Pictorial representation would be**\\n\\n```\\nI/P = \\'Leetcodeisawesome\\'\\nspaces = [8, 11]\\n\\nFirst we will create a string as = \\'###################\\'\\n\\nPut spaces at places 8 & 11 it will become = \\'######## ## #######\\'\\n\\nNow putting characters one by one = \\'Leetcode is awesome\\'\\n```\\n\\n\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        int len = s.length() + spaces.size();\\n        string ans (len, \\'#\\');\\n        \\n        for (int i=0; i<spaces.size(); i++) {\\n            ans[spaces[i]+i] = \\' \\';\\n        }\\n        \\n        int j = 0;\\n        for (int i=0; i<len; i++) {\\n            if (ans[i]==\\'#\\') {\\n                ans[i] = s[j];\\n                j++;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "```original_length + number_of_spaces```\n```\\nI/P = \\'Leetcodeisawesome\\'\\nspaces = [8, 11]\\n\\nFirst we will create a string as = \\'###################\\'\\n\\nPut spaces at places 8 & 11 it will become = \\'######## ## #######\\'\\n\\nNow putting characters one by one = \\'Leetcode is awesome\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1639581,
                "title": "easy-and-intuitive-solution-c-well-documented",
                "content": "**Here\\'s the solution:**\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n\\t\\t//taking an empty ans string to store the final result\\n        string ans = \"\";\\n\\t\\t//storing the size of given string in a variable \\'n\\'\\n        int n = s.size();\\n\\t\\t\\n\\t\\t//making a map to keep track of the indices where we need to add spaces\\n        map<int, bool> mpp;\\n\\t\\t\\n\\t\\t//iterating through the spaces vector and assigning \\'true\\' value in map \\n\\t\\t//corresponding to the indices present in the spaces vector   \\n        for(int i=0; i<spaces.size();i++){\\n\\t\\t\\t//marking the present indices in map to be true\\n            mpp[spaces[i]] = true;\\n        }\\n\\t\\t\\n\\t\\t//making a variable to keep of the indices corresponding to which\\n\\t\\t//space has already added in the final answer(\"ans\") string\\n        bool alreadyAdded = false;\\n\\t\\t\\n\\t\\t//iterate through the given string\\n        for(int i=0; i<n; i++){\\n\\t\\t\\t//if map contains the present index and that index has not been considered yet\\n\\t\\t\\t//then add space in the final string at that particular index\\n\\t\\t\\t//make alreadyAdded \"true\"\\n\\t\\t\\t//and decrease \\'i\\' so that we don\\'t lose track of actual indices of the given string while adding space at that index\\n            if(mpp[i] and !alreadyAdded){\\n                ans += \" \";\\n                alreadyAdded = true;\\n                i--;\\n            }else{\\n                ans += s[i];\\n                alreadyAdded = false;\\n            }\\n        }\\n\\t\\t\\n\\t\\t//return the final answer(\"ans\") string\\n        return ans;\\n    }\\n};\\n```\\n\\n**Please Upvote**, if this solution helped you.\\n**In case you have any query, feel free to ask below.**\\n**Happy Coding!**",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n\\t\\t//taking an empty ans string to store the final result\\n        string ans = \"\";\\n\\t\\t//storing the size of given string in a variable \\'n\\'\\n        int n = s.size();\\n\\t\\t\\n\\t\\t//making a map to keep track of the indices where we need to add spaces\\n        map<int, bool> mpp;\\n\\t\\t\\n\\t\\t//iterating through the spaces vector and assigning \\'true\\' value in map \\n\\t\\t//corresponding to the indices present in the spaces vector   \\n        for(int i=0; i<spaces.size();i++){\\n\\t\\t\\t//marking the present indices in map to be true\\n            mpp[spaces[i]] = true;\\n        }\\n\\t\\t\\n\\t\\t//making a variable to keep of the indices corresponding to which\\n\\t\\t//space has already added in the final answer(\"ans\") string\\n        bool alreadyAdded = false;\\n\\t\\t\\n\\t\\t//iterate through the given string\\n        for(int i=0; i<n; i++){\\n\\t\\t\\t//if map contains the present index and that index has not been considered yet\\n\\t\\t\\t//then add space in the final string at that particular index\\n\\t\\t\\t//make alreadyAdded \"true\"\\n\\t\\t\\t//and decrease \\'i\\' so that we don\\'t lose track of actual indices of the given string while adding space at that index\\n            if(mpp[i] and !alreadyAdded){\\n                ans += \" \";\\n                alreadyAdded = true;\\n                i--;\\n            }else{\\n                ans += s[i];\\n                alreadyAdded = false;\\n            }\\n        }\\n\\t\\t\\n\\t\\t//return the final answer(\"ans\") string\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1636590,
                "title": "python-c-shift-zip-join-one-liner",
                "content": "### Example\\n\\ns = \"LeetcodeHelpsMeLearn\", spaces = [8,13,15]\\n\\nLet us consider the two sequences of integers built from the original array `spaces` by prepending `0`  / appending `len(s)`\\n\\n- **0** 8 13 15\\n- 8 13 15 **20**\\n\\nZipping these two sequences together gives us pairs (0, 8), (8, 13), (13, 15), (15, 20) which we can use as start/end indices of `s` substrings:\\n- s[**0**:8] s[8:13] s[13:15] s[15:**20**]\\n\\nThe above sequence of substrings is exactly the right answer \"*Leetcode Helps Me Learn*\"!\\n\\n### Python\\n```py\\ndef addSpaces(self, s: str, spaces: List[int]) -> str:\\n\\treturn \\' \\'.join(s[i:j] for i, j in zip([0] + spaces, spaces + [len(s)]))\\n```\\n\\n### C#\\n```c#\\npublic string AddSpaces(string s, int[] spaces) =>\\n\\tstring.Join(\" \", spaces.Prepend(0).Zip(spaces.Append(s.Length), (a, b) => s.Substring(a, b - a)));\\n```\\n",
                "solutionTags": [],
                "code": "```py\\ndef addSpaces(self, s: str, spaces: List[int]) -> str:\\n\\treturn \\' \\'.join(s[i:j] for i, j in zip([0] + spaces, spaces + [len(s)]))\\n```\n```c#\\npublic string AddSpaces(string s, int[] spaces) =>\\n\\tstring.Join(\" \", spaces.Prepend(0).Zip(spaces.Append(s.Length), (a, b) => s.Substring(a, b - a)));\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1636403,
                "title": "python-using-string-comprehension-vs-copying-to-another-string",
                "content": "The basic idea here is to do it inplace using string comprehension (Giving TLE) :\\n\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        j = 0\\n        for i  in spaces:\\n            s = s[:i+j]+\" \"+s[i+j:]\\n            j += 1\\n        return s        \\n```\\n\\nIt says - \\n***66 / 66 test cases passed, but took too long.***\\n***Time Limit Exceeded***\\n\\nNow copying to another string (Pass):\\n\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        res = s[:spaces[0]]+\" \"\\n        for i  in range(1, len(spaces)):\\n            res += s[spaces[i-1]:spaces[i]]+\" \"\\n            prev = spaces[i]\\n        return res+s[spaces[len(spaces)-1]:]     \\n```\\n\\nThanks for reading \\uD83D\\uDE0A",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        j = 0\\n        for i  in spaces:\\n            s = s[:i+j]+\" \"+s[i+j:]\\n            j += 1\\n        return s        \\n```\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        res = s[:spaces[0]]+\" \"\\n        for i  in range(1, len(spaces)):\\n            res += s[spaces[i-1]:spaces[i]]+\" \"\\n            prev = spaces[i]\\n        return res+s[spaces[len(spaces)-1]:]     \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635442,
                "title": "c-easy-solution-o-n-8-lines-code",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int j=0;\\n        for(int i=0;i<s.length();i++){\\n            if(j<spaces.size() && spaces[j]==i ){\\n                ans+=\\' \\';\\n                j++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int j=0;\\n        for(int i=0;i<s.length();i++){\\n            if(j<spaces.size() && spaces[j]==i ){\\n                ans+=\\' \\';\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1635392,
                "title": "fastest-python-solution-with-comments-o-n",
                "content": "## **Approach 1**\\n\\n**Runtime: 640 ms, faster than 100.00% of Python3 online submissions for Adding Spaces to a String.\\nMemory Usage: 49 MB**\\n\\n```\\nclass Solution:\\n    def addSpaces(self, st: str, sp: List[int]) -> str:\\n        ret = [st[:sp[0]]]  # writing the initial part of the string (from index 0 to the 1st space) to the variable\\n            \\n        for i in range(1, len(sp)):\\n\\t\\t    # going throught each space\\n            ret.append(\\' \\')  # adding space at the position\\n            ret.append(st[sp[i-1]:sp[i]])  # writing the next part of the string, which does not have spaces in between\\n            \\n        ret.append(\\' \\')\\n        ret.append(st[sp[-1]:])  # writing the last part of string to the variable\\n        \\n        return \\'\\'.join(ret)  # converting the contents of list to string\\n```\\n\\n\\n---------------------------------\\n## **Approach 2**\\n\\n**Runtime: 656 ms, faster than 100.00% of Python3 online submissions for Adding Spaces to a String.\\nMemory Usage: 51.8 MB**\\n\\n```\\nclass Solution:\\n\\n    def addSpaces(self, st: str, sp: List[int]) -> str:\\n        ret = st[:sp[0]]  # writing the initial part of the string (from index 0 to the 1st space) to the variable\\n\\n        for i in range(1, len(sp)):\\n\\t\\t\\t# going through each space\\n            ret += \\' \\'  # adding space at the position\\n            ret += st[sp[i - 1]:sp[i]]  # writing the next part of the string, which does not have spaces in between\\n\\n        ret += \\' \\'\\n        ret += st[sp[-1]:]  # writing the last part of string to the variable\\n\\n        return ret\\n```\\n\\n\\n---------------------------------\\n\\n## **TLE Solution | Approach 3**\\n```\\nclass Solution:\\n    def addSpaces(self, st: str, sp: List[int]) -> str:\\n        ret = st[:sp[0]]\\n            \\n        for i in range(1, len(sp)):\\n            ret = ret + \\' \\' + st[sp[i-1]:sp[i]]\\n            \\n        ret = ret + \\' \\' + st[sp[-1]:]\\n        \\n        return ret\\n```\\n\\n---------------------------------\\n![image](https://assets.leetcode.com/users/images/ab87218a-e02d-46f8-879f-c3481b62f578_1639895339.992923.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, st: str, sp: List[int]) -> str:\\n        ret = [st[:sp[0]]]  # writing the initial part of the string (from index 0 to the 1st space) to the variable\\n            \\n        for i in range(1, len(sp)):\\n\\t\\t    # going throught each space\\n            ret.append(\\' \\')  # adding space at the position\\n            ret.append(st[sp[i-1]:sp[i]])  # writing the next part of the string, which does not have spaces in between\\n            \\n        ret.append(\\' \\')\\n        ret.append(st[sp[-1]:])  # writing the last part of string to the variable\\n        \\n        return \\'\\'.join(ret)  # converting the contents of list to string\\n```\n```\\nclass Solution:\\n\\n    def addSpaces(self, st: str, sp: List[int]) -> str:\\n        ret = st[:sp[0]]  # writing the initial part of the string (from index 0 to the 1st space) to the variable\\n\\n        for i in range(1, len(sp)):\\n\\t\\t\\t# going through each space\\n            ret += \\' \\'  # adding space at the position\\n            ret += st[sp[i - 1]:sp[i]]  # writing the next part of the string, which does not have spaces in between\\n\\n        ret += \\' \\'\\n        ret += st[sp[-1]:]  # writing the last part of string to the variable\\n\\n        return ret\\n```\n```\\nclass Solution:\\n    def addSpaces(self, st: str, sp: List[int]) -> str:\\n        ret = st[:sp[0]]\\n            \\n        for i in range(1, len(sp)):\\n            ret = ret + \\' \\' + st[sp[i-1]:sp[i]]\\n            \\n        ret = ret + \\' \\' + st[sp[-1]:]\\n        \\n        return ret\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635051,
                "title": "c-easy-o-n-solution-beats-100-of-the-solutions",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string newStr = \"\";\\n        int idx = 0;\\n        int i = 0;\\n        while(i < s.length() && idx < spaces.size()){\\n            if(i == spaces[idx]){\\n                newStr += \\' \\';\\n                idx++;\\n                continue;\\n            }\\n            newStr += s[i];\\n            i++;\\n        }\\n        while(i < s.length()){\\n            newStr += s[i];\\n            i++;\\n        }\\n        return newStr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string newStr = \"\";\\n        int idx = 0;\\n        int i = 0;\\n        while(i < s.length() && idx < spaces.size()){\\n            if(i == spaces[idx]){\\n                newStr += \\' \\';\\n                idx++;\\n                continue;\\n            }\\n            newStr += s[i];\\n            i++;\\n        }\\n        while(i < s.length()){\\n            newStr += s[i];\\n            i++;\\n        }\\n        return newStr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635007,
                "title": "c-easy-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        vector<string> v;\\n        if(spaces[0]==0)\\n            v.push_back(\"\");\\n        else\\n        v.push_back(s.substr(0,spaces[0]));\\n        for(int i=0;i<spaces.size();i++)\\n        {\\n            if(i==spaces.size()-1)\\n                v.push_back(s.substr(spaces[i]));\\n            else\\n            v.push_back(s.substr(spaces[i],spaces[i+1]-spaces[i]));\\n        }\\n        if(v.size()==0)\\n            return \"\";\\n        string result=v[0];\\n        for(int i=1;i<v.size();i++)\\n        {\\n            result+=\" \";\\n            result+=v[i];\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        vector<string> v;\\n        if(spaces[0]==0)\\n            v.push_back(\"\");\\n        else\\n        v.push_back(s.substr(0,spaces[0]));\\n        for(int i=0;i<spaces.size();i++)\\n        {\\n            if(i==spaces.size()-1)\\n                v.push_back(s.substr(spaces[i]));\\n            else\\n            v.push_back(s.substr(spaces[i],spaces[i+1]-spaces[i]));\\n        }\\n        if(v.size()==0)\\n            return \"\";\\n        string result=v[0];\\n        for(int i=1;i<v.size();i++)\\n        {\\n            result+=\" \";\\n            result+=v[i];\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3936282,
                "title": "easy-approach-java-beginner-friendly",
                "content": "# PLEASE UPVOTE\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        String []words=new String[spaces.length+1];\\n        int count=0;\\n        for(int i=0;i<spaces.length;i++){\\n            if(i==0){\\n            words[count]=s.substring(0,spaces[i]);\\n            count++;\\n            }else if(i>0||i<spaces.length-1){\\n                words[count]=s.substring(spaces[i-1],spaces[i]);\\n                count++;\\n            }if(i==spaces.length-1){\\n                words[count]=s.substring(spaces[i]);\\n            }\\n        }\\n        String output=String.join(\" \",words);\\n        return output;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        String []words=new String[spaces.length+1];\\n        int count=0;\\n        for(int i=0;i<spaces.length;i++){\\n            if(i==0){\\n            words[count]=s.substring(0,spaces[i]);\\n            count++;\\n            }else if(i>0||i<spaces.length-1){\\n                words[count]=s.substring(spaces[i-1],spaces[i]);\\n                count++;\\n            }if(i==spaces.length-1){\\n                words[count]=s.substring(spaces[i]);\\n            }\\n        }\\n        String output=String.join(\" \",words);\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851119,
                "title": "beats-98-64-simple-concise",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWhenever we reach an index where a blank space has to be inserted , we will append \" \"(space) befor character.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string sr=\"\"; int ind=0; int n=spaces.size();\\n        for(int i=0;i<s.length();i++){\\n             if(ind <n && i==spaces[ind]){\\n                 sr+=\" \";\\n                 sr+=s[i];ind+=1;\\n             }\\n             else sr+=s[i];\\n        }\\n        return sr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string sr=\"\"; int ind=0; int n=spaces.size();\\n        for(int i=0;i<s.length();i++){\\n             if(ind <n && i==spaces[ind]){\\n                 sr+=\" \";\\n                 sr+=s[i];ind+=1;\\n             }\\n             else sr+=s[i];\\n        }\\n        return sr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3682124,
                "title": "java-solution-beginner-level",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse StringBuilders to manipulate strings and convert it back to string while returning.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nGive a dry run you will get it!\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder bd = new StringBuilder();\\n        int k=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a = \"\";\\n            if(k<spaces.length && i==spaces[k])\\n            {\\n                a = a + s.charAt(i);\\n                bd.append(\" \");\\n                k++;\\n            }\\n            if(k<spaces.length && i==spaces[k])\\n            {\\n                bd.append(a);\\n            }\\n            else bd.append(s.charAt(i));\\n        }\\n        return bd.toString();\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder bd = new StringBuilder();\\n        int k=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a = \"\";\\n            if(k<spaces.length && i==spaces[k])\\n            {\\n                a = a + s.charAt(i);\\n                bd.append(\" \");\\n                k++;\\n            }\\n            if(k<spaces.length && i==spaces[k])\\n            {\\n                bd.append(a);\\n            }\\n            else bd.append(s.charAt(i));\\n        }\\n        return bd.toString();\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3518267,
                "title": "easy-java-solution-o-1-detailed-explanation",
                "content": "# Intuition\\nSimple Linear traversal can led you to the solution.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nLets use two pointer called `s1` and `s2` that is initially at position 0 (`s1` pointing ar starting index of string and `s2` pointing stating index of `spaces` array).\\nAlso take a `StringBuilder` to add string as java strings are immutable.\\nNow use conditions.\\n1) First, check that if `s1 != spaces[s2]` it means there is no need to add spaces, so we will continue to add character in `StringBuilder`.\\n2) Second, means there is needed a space so we will first take that space and then add character. Then increase both s1 and s2.\\n3) After all of this if there is any characters left the  simply run a while loop on rest of the string.\\n```\\nwhile(s1 < n){\\n    sb.append(s.charAt(s1));\\n    s1++;\\n}\\n```\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- $$O(n)$$\\n> Length of String. `Spaces` array length will not exceed the length of String.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- $$O(1)$$\\n> Note that StringBuilder will not be considered as extra space cause I need to return a string. And changes in main string is not a good programming practice.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Try on your own first\\n# Code\\n```Java []\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        int n = s.length();\\n        int m = spaces.length;\\n        StringBuilder sb = new StringBuilder();\\n        int s1 = 0, s2 = 0;\\n        while(s1 < n && s2 < m){\\n            if(s1 != spaces[s2]){\\n                sb.append(s.charAt(s1));\\n                s1++;\\n            }\\n            else{\\n                sb.append(\" \");\\n                sb.append(s.charAt(s1));\\n                s1++;\\n                s2++;\\n            }\\n        }\\n        while(s1 < n){\\n            sb.append(s.charAt(s1));\\n            s1++;\\n        }\\n        return sb.toString();\\n    }\\n}\\n```\\n# upvote if you find this helpful \\u2714",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nwhile(s1 < n){\\n    sb.append(s.charAt(s1));\\n    s1++;\\n}\\n```\n```Java []\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        int n = s.length();\\n        int m = spaces.length;\\n        StringBuilder sb = new StringBuilder();\\n        int s1 = 0, s2 = 0;\\n        while(s1 < n && s2 < m){\\n            if(s1 != spaces[s2]){\\n                sb.append(s.charAt(s1));\\n                s1++;\\n            }\\n            else{\\n                sb.append(\" \");\\n                sb.append(s.charAt(s1));\\n                s1++;\\n                s2++;\\n            }\\n        }\\n        while(s1 < n){\\n            sb.append(s.charAt(s1));\\n            s1++;\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3292623,
                "title": "two-pointer-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n=s.length(),t=spaces.size();\\n        int j=0;\\n        string ans=\"\";\\n        for(int i=0;i<n;i++)\\n        {\\n            if(j<t && i==spaces[j]) {\\n                ans +=\" \";\\n                j++;\\n            }\\n            ans += s[i];\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n=s.length(),t=spaces.size();\\n        int j=0;\\n        string ans=\"\";\\n        for(int i=0;i<n;i++)\\n        {\\n            if(j<t && i==spaces[j]) {\\n                ans +=\" \";\\n                j++;\\n            }\\n            ans += s[i];\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3237141,
                "title": "python3-easy-understanding",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        a = []\\n        string = 0\\n        for i in spaces:\\n            a.append(s[string:i])\\n            a.append(\" \")\\n            string = i\\n        a.append(s[string:])\\n        return \"\".join(a)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        a = []\\n        string = 0\\n        for i in spaces:\\n            a.append(s[string:i])\\n            a.append(\" \")\\n            string = i\\n        a.append(s[string:])\\n        return \"\".join(a)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3218879,
                "title": "simulation-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int cnt = 0, i = 0, n = spaces.size();\\n        if(spaces[0] == 0) ans += \" \", i++;\\n\\n        for(char c : s) {\\n            ans += c;\\n            cnt++;\\n            if(i < n && spaces[i] == cnt) ans += \" \", i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int cnt = 0, i = 0, n = spaces.size();\\n        if(spaces[0] == 0) ans += \" \", i++;\\n\\n        for(char c : s) {\\n            ans += c;\\n            cnt++;\\n            if(i < n && spaces[i] == cnt) ans += \" \", i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3126887,
                "title": "two-pointer-simple-short-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        int i,n=spaces.size(),m=s.size(),j;\\n        string ans=\"\";\\n        i=0;\\n        j=0;\\n        while(i<m)\\n        {\\n            if(j<n&&i==spaces[j])\\n            {\\n                ans+=\" \";\\n                j++;\\n            }\\n            ans+=s[i];\\n            i++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        int i,n=spaces.size(),m=s.size(),j;\\n        string ans=\"\";\\n        i=0;\\n        j=0;\\n        while(i<m)\\n        {\\n            if(j<n&&i==spaces[j])\\n            {\\n                ans+=\" \";\\n                j++;\\n            }\\n            ans+=s[i];\\n            i++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3073863,
                "title": "simple-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) \\n    {\\n        string ans=\"\";\\n        int k=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(k<spaces.size()&&i==spaces[k])\\n            {\\n                ans+=\" \";\\n                ans+=s[i];\\n                k++;\\n            }\\n            else\\n            {\\n                ans+=s[i];\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) \\n    {\\n        string ans=\"\";\\n        int k=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(k<spaces.size()&&i==spaces[k])\\n            {\\n                ans+=\" \";\\n                ans+=s[i];\\n                k++;\\n            }\\n            else\\n            {\\n                ans+=s[i];\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2795970,
                "title": "c-90-percent-sort-nlogn",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n=spaces.size();\\n        sort(spaces.begin(),spaces.end());\\n        string ans=\"\"; int index=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(index<n and i==spaces[index] )\\n            {\\n                ans+=\\' \\';\\n                i--;\\n                index++;\\n            }\\n            else{\\n                ans+=s[i];\\n            }\\n           // cout<<index<<\" \"<<ans<<endl;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n=spaces.size();\\n        sort(spaces.begin(),spaces.end());\\n        string ans=\"\"; int index=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(index<n and i==spaces[index] )\\n            {\\n                ans+=\\' \\';\\n                i--;\\n                index++;\\n            }\\n            else{\\n                ans+=s[i];\\n            }\\n           // cout<<index<<\" \"<<ans<<endl;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2623190,
                "title": "c-easy-2-pointers-solution-with-wa-explained",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n=s.size(),m=spaces.size();\\n        int j=0;\\n        string str=\"\";\\n        for(int i=0;i<n;i++){\\n            if(j<m and i==spaces[j]){  // j should strictly less than m and it should be written first otherwise if u write (i==spaces[j] and j<m) u will got runtime error in 2nd testcase. \\n                str+=\\' \\';\\n                j++;\\n            }\\n            str+=s[i];\\n        }\\n        return str;\\n    }\\n};\\n**If U Like It Plz Upvote.**\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n=s.size(),m=spaces.size();\\n        int j=0;\\n        string str=\"\";\\n        for(int i=0;i<n;i++){\\n            if(j<m and i==spaces[j]){  // j should strictly less than m and it should be written first otherwise if u write (i==spaces[j] and j<m) u will got runtime error in 2nd testcase. \\n                str+=\\' \\';\\n                j++;\\n            }\\n            str+=s[i];\\n        }\\n        return str;\\n    }\\n};\\n**If U Like It Plz Upvote.**\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2543694,
                "title": "python-solution-two-ways",
                "content": "I noticed that using a list to store the portions of the string between spaces and then joining them back using spaces is faster. So the second way is a more efficient way to solve this problem. Maybe because String operations are more expensive.\\n\\n## **1. FIRST WAY**\\n\\n```\\ndef addSpaces(self, s: str, spaces: List[int]) -> str:\\n        res = \"\"\\n        idx = 0\\n        n = len(spaces)\\n        \\n        for i in range(len(s)):\\n            space_idx = spaces[idx]\\n            if(i == space_idx):\\n                res += \" \"\\n                if(idx != n - 1): idx += 1 \\n            res += s[i]\\n                \\n        return res\\n```\\n\\n\\n## **2. SECOND WAY**\\n\\n```\\ndef addSpaces(self, s: str, spaces: List[int]) -> str:\\n        resArr = []\\n        i = 0\\n        \\n\\t\\t# Take portions of the string between spaces and put them in the list\\n        for index in spaces:\\n            portion = s[i:index]\\n            resArr.append(portion)\\n            i = index\\n            \\n        #Put the remaining string in resArr\\n        resArr.append(s[spaces[len(spaces) - 1]:])\\n        return \" \".join(resArr)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef addSpaces(self, s: str, spaces: List[int]) -> str:\\n        res = \"\"\\n        idx = 0\\n        n = len(spaces)\\n        \\n        for i in range(len(s)):\\n            space_idx = spaces[idx]\\n            if(i == space_idx):\\n                res += \" \"\\n                if(idx != n - 1): idx += 1 \\n            res += s[i]\\n                \\n        return res\\n```\n```\\ndef addSpaces(self, s: str, spaces: List[int]) -> str:\\n        resArr = []\\n        i = 0\\n        \\n\\t\\t# Take portions of the string between spaces and put them in the list\\n        for index in spaces:\\n            portion = s[i:index]\\n            resArr.append(portion)\\n            i = index\\n            \\n        #Put the remaining string in resArr\\n        resArr.append(s[spaces[len(spaces) - 1]:])\\n        return \" \".join(resArr)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2509132,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        arr=[]\\n        c=0\\n        for i in range(len(spaces)):\\n            arr.append(s[c:spaces[i]])\\n            c=spaces[i]\\n        arr.append(s[spaces[i]:])\\n        return \\' \\'.join(arr)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        arr=[]\\n        c=0\\n        for i in range(len(spaces)):\\n            arr.append(s[c:spaces[i]])\\n            c=spaces[i]\\n        arr.append(s[spaces[i]:])\\n        return \\' \\'.join(arr)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2420392,
                "title": "python-o-1-simple-solution-faster-than-91",
                "content": "Parse the spaces instead of parsing input string and join them with spaces.\\n\\n```class Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        out = []\\n        if len(spaces) == 1: return s[:spaces[0]]+ \" \" + s[spaces[0]:]\\n        for i,j in zip(spaces, spaces[1:]):\\n            out.append(s[i:j])\\n        return s[:spaces[0]] + \" \"+ \" \".join(out) + \" \" + s[spaces[-1]:]",
                "solutionTags": [],
                "code": "Parse the spaces instead of parsing input string and join them with spaces.\\n\\n```class Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        out = []\\n        if len(spaces) == 1: return s[:spaces[0]]+ \" \" + s[spaces[0]:]\\n        for i,j in zip(spaces, spaces[1:]):\\n            out.append(s[i:j])\\n        return s[:spaces[0]] + \" \"+ \" \".join(out) + \" \" + s[spaces[-1]:]",
                "codeTag": "Java"
            },
            {
                "id": 2401358,
                "title": "2-easy-approaches",
                "content": "*Inplace insert, TLE (passed 59/66)*\\n\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int count = 0;\\n        for(const int &idx : spaces) {\\n            s.insert(idx + count, \" \");\\n            count++;\\n        }\\n        return s;\\n    }\\n};\\n```\\n\\n*Accepted*\\n\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans = \"\";\\n        int j = 0;\\n        for(int i=0; i<s.length(); i++) {\\n            if(j < spaces.size() && i == spaces[j]) {\\n                j++;\\n                ans += \" \";\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int count = 0;\\n        for(const int &idx : spaces) {\\n            s.insert(idx + count, \" \");\\n            count++;\\n        }\\n        return s;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans = \"\";\\n        int j = 0;\\n        for(int i=0; i<s.length(); i++) {\\n            if(j < spaces.size() && i == spaces[j]) {\\n                j++;\\n                ans += \" \";\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2330005,
                "title": "python-felt-question-is-too-easy-for-a-medium-problem-notes",
                "content": "```\\n/*\\napproach: this is a really simple problem\\nwe can iterate over s and if we reach an index which is present in spaces, \\nwe add a space followed the s[index] in the resultant string else we simply add\\ns[index] to the resultant string\\nwe can convert the initial list of spaces into a set for faster lookup\\n*/\\n```\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        result = \"\"\\n        spaces = set(spaces)\\n        for i in range(len(s)):\\n            if i in spaces:\\n                result+= \\' \\' + s[i]\\n            else:\\n                result+=s[i]\\n        return result\\n```",
                "solutionTags": [
                    "Python",
                    "Iterator",
                    "Ordered Set"
                ],
                "code": "```\\n/*\\napproach: this is a really simple problem\\nwe can iterate over s and if we reach an index which is present in spaces, \\nwe add a space followed the s[index] in the resultant string else we simply add\\ns[index] to the resultant string\\nwe can convert the initial list of spaces into a set for faster lookup\\n*/\\n```\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        result = \"\"\\n        spaces = set(spaces)\\n        for i in range(len(s)):\\n            if i in spaces:\\n                result+= \\' \\' + s[i]\\n            else:\\n                result+=s[i]\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2321114,
                "title": "java-solution-easy",
                "content": "**Approach**: Add space when we encounter the index mentioned in spaces[i] and then add the character from string s.\\n\\n**PS:** Do Upvote if you find this useful :)\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] a) {\\n        StringBuilder ans= new StringBuilder(\"\");\\n        int k=0;\\n        for(int i=0;i<s.length();i++){\\n            if(k<a.length && i==a[k]){\\n                ans.append(\" \");\\n                k++;\\n            }\\n            ans.append(s.charAt(i));\\n        }\\n        return ans.toString();\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public String addSpaces(String s, int[] a) {\\n        StringBuilder ans= new StringBuilder(\"\");\\n        int k=0;\\n        for(int i=0;i<s.length();i++){\\n            if(k<a.length && i==a[k]){\\n                ans.append(\" \");\\n                k++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2280517,
                "title": "ez-python-2-ptr-solution",
                "content": "```\\nclass Solution:\\n    def addSpaces(self, s: str, S: List[int]) -> str:\\n        \\n        curr_j = 0\\n        ans = \"\"\\n        \\n        for i in range(len(s)):\\n            if curr_j == len(S):\\n                ans += s[i:]\\n                break\\n            elif i == S[curr_j]:\\n                ans += \" \" + s[i]\\n                curr_j += 1\\n            else:\\n                ans += s[i]\\n            \\n            \\n\\n        return ans\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, S: List[int]) -> str:\\n        \\n        curr_j = 0\\n        ans = \"\"\\n        \\n        for i in range(len(s)):\\n            if curr_j == len(S):\\n                ans += s[i:]\\n                break\\n            elif i == S[curr_j]:\\n                ans += \" \" + s[i]\\n                curr_j += 1\\n            else:\\n                ans += s[i]\\n            \\n            \\n\\n        return ans\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2025557,
                "title": "string-builder-o-n-solution-java-easy",
                "content": "class Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n       int i = 0;\\n        StringBuilder sb = new StringBuilder();\\n        char[] ch = s.toCharArray();\\n        int ps = 0;\\n        while(i<ch.length)\\n        {\\n            if( ps<spaces.length && i==spaces[ps] )\\n            {\\n                sb.append(\" \");\\n                sb.append(ch[i]);\\n                ps++;\\n            }else{\\n                sb.append(ch[i]);\\n            }\\n            i++;\\n        }\\n        String s1 = sb.toString();\\n        return s1;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n       int i = 0;\\n        StringBuilder sb = new StringBuilder();\\n        char[] ch = s.toCharArray();\\n        int ps = 0;\\n        while(i<ch.length)\\n        {\\n            if( ps<spaces.length && i==spaces[ps] )\\n            {\\n                sb.append(\" \");\\n                sb.append(ch[i]);\\n                ps++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1965792,
                "title": "beginner-friendly-solution",
                "content": "****Please upvote if you like this solution****\\n\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        int pos = 0;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (pos < spaces.length && i == spaces[pos]) {\\n                ans.append(\" \");\\n                ans.append(s.charAt(i));\\n                pos++;\\n            }\\n            else {\\n                ans.append(s.charAt(i));\\n            }\\n        }\\n        return ans.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        int pos = 0;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (pos < spaces.length && i == spaces[pos]) {\\n                ans.append(\" \");\\n                ans.append(s.charAt(i));\\n                pos++;\\n            }\\n            else {\\n                ans.append(s.charAt(i));\\n            }\\n        }\\n        return ans.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1961178,
                "title": "unique-approach-c",
                "content": "```\\nclass Solution {\\n    public:\\n        string addSpaces(string s, vector < int > & spaces) {\\n            int len = s.size() + spaces.size();\\n            string ans(len, \\'-\\');\\n\\n            for (int i = 0, j = 0; i < spaces.size(); i++, j++) {\\n                ans[spaces[i] + j] = \\' \\';\\n\\n            }\\n            for (int i = 0, k = 0; ans[i] != \\'\\\\0\\'; i++) {\\n                if (ans[i] == \\' \\') {\\n                    i++;\\n                }\\n\\n                ans[i] = s[k++];\\n            }\\n\\n            return ans;\\n        }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public:\\n        string addSpaces(string s, vector < int > & spaces) {\\n            int len = s.size() + spaces.size();\\n            string ans(len, \\'-\\');\\n\\n            for (int i = 0, j = 0; i < spaces.size(); i++, j++) {\\n                ans[spaces[i] + j] = \\' \\';\\n\\n            }\\n            for (int i = 0, k = 0; ans[i] != \\'\\\\0\\'; i++) {\\n                if (ans[i] == \\' \\') {\\n                    i++;\\n                }\\n\\n                ans[i] = s[k++];\\n            }\\n\\n            return ans;\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1940229,
                "title": "5lines-easy-cpp",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& S) {\\n        string P=\"\";\\n        int z=0;\\n        for(int i=0;i<s.length();i++){\\n            if(z<S.size() && i==S[z]){\\n                P+=\\' \\';z++;\\n            }\\n            P+=s[i];\\n        }\\n        return P;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& S) {\\n        string P=\"\";\\n        int z=0;\\n        for(int i=0;i<s.length();i++){\\n            if(z<S.size() && i==S[z]){\\n                P+=\\' \\';z++;\\n            }\\n            P+=s[i];\\n        }\\n        return P;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1940010,
                "title": "python-simple-and-clean-solution-beats-90",
                "content": "\\'\\'\\'\\n# I think there\\'s no need for explanation :)\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:        \\n        l=0\\n        a=\\'\\'\\n        for i in spaces:            \\n            a += s[l:i]+ \\' \\'\\n            l=i\\n        a+=s[spaces[-1]:]\\n        return a\\n\\n\\'\\'\\'",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "\\'\\'\\'\\n# I think there\\'s no need for explanation :)\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:        \\n        l=0\\n        a=\\'\\'\\n        for i in spaces:            \\n            a += s[l:i]+ \\' \\'\\n            l=i\\n        a+=s[spaces[-1]:]\\n        return a\\n\\n\\'\\'\\'",
                "codeTag": "Python3"
            },
            {
                "id": 1885036,
                "title": "c-short-and-simple-two-pointer-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        string ans;\\n        \\n        int count = 0;\\n        int idx = 0;\\n        \\n        for(char c : s){\\n            \\n            if(idx < spaces.size() and count == spaces[idx]){\\n                idx++;\\n                ans += \\' \\';\\n            }\\n            \\n            ans += c;\\n            count++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        \\n        string ans;\\n        \\n        int count = 0;\\n        int idx = 0;\\n        \\n        for(char c : s){\\n            \\n            if(idx < spaces.size() and count == spaces[idx]){\\n                idx++;\\n                ans += \\' \\';\\n            }\\n            \\n            ans += c;\\n            count++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798757,
                "title": "c-two-pointer-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int i = 0;\\n        int j = 0;\\n        string res = \"\";\\n        while(i < s.size() && j < spaces.size()){\\n            if(i == spaces[j]){\\n                res+=\" \";\\n                j++;\\n            }\\n            res += s[i++];\\n        }\\n        \\n        while(i < s.size()){\\n            res += s[i++];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int i = 0;\\n        int j = 0;\\n        string res = \"\";\\n        while(i < s.size() && j < spaces.size()){\\n            if(i == spaces[j]){\\n                res+=\" \";\\n                j++;\\n            }\\n            res += s[i++];\\n        }\\n        \\n        while(i < s.size()){\\n            res += s[i++];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1746778,
                "title": "python-runtime-843ms-53-97-memory-52-2mb-27-97",
                "content": "I convert the list into sets() for O(1) lookUps\\n\\n```\\nclass Solution:\\n    def addSpaces(self, string: str, spaces: List[int]) -> str:\\n        if not string and not spaces:return string\\n        res = str()\\n        spaces = set(spaces)\\n        for i in range(len(string)):\\n            if i in spaces:\\n                res += \" \"\\n            res += string[i]\\n        return res\\n```",
                "solutionTags": [
                    "Python3",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, string: str, spaces: List[int]) -> str:\\n        if not string and not spaces:return string\\n        res = str()\\n        spaces = set(spaces)\\n        for i in range(len(string)):\\n            if i in spaces:\\n                res += \" \"\\n            res += string[i]\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1732696,
                "title": "why-is-this-medium",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n = s.size();\\n        int m = spaces.size();\\n        string res = \"\";\\n        int j = 0;\\n        for(int i=0; i<n; i++) {\\n            if(j < m && i == spaces[j]) {\\n                res+=\\' \\';\\n                j++;\\n            }\\n            res+=s[i];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n = s.size();\\n        int m = spaces.size();\\n        string res = \"\";\\n        int j = 0;\\n        for(int i=0; i<n; i++) {\\n            if(j < m && i == spaces[j]) {\\n                res+=\\' \\';\\n                j++;\\n            }\\n            res+=s[i];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1724507,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        for(int i=0;i<spaces.length;i++){\\n            sb.insert(spaces[i]+i,\\' \\');\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        for(int i=0;i<spaces.length;i++){\\n            sb.insert(spaces[i]+i,\\' \\');\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1707980,
                "title": "python-o-n-two-pointer",
                "content": "\\'\\'\\'\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        s = list(s)\\n        ct = 0\\n        ln = len(s) + len(spaces)\\n        j = 0\\n        ans = []\\n        \\n        for i in range(len(s)):\\n            if i == spaces[j]:\\n                ans.append(\\' \\')\\n                if j < len(spaces) - 1:\\n                    j += 1\\n            ans.append(s[i])\\n        return (\\'\\'.join(ans))\\n\\t\\t\\'\\'\\'",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "\\'\\'\\'\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        s = list(s)\\n        ct = 0\\n        ln = len(s) + len(spaces)\\n        j = 0\\n        ans = []\\n        \\n        for i in range(len(s)):\\n            if i == spaces[j]:\\n                ans.append(\\' \\')\\n                if j < len(spaces) - 1:\\n                    j += 1\\n            ans.append(s[i])\\n        return (\\'\\'.join(ans))\\n\\t\\t\\'\\'\\'",
                "codeTag": "Python3"
            },
            {
                "id": 1697965,
                "title": "c-solution-with-inline-comments",
                "content": "The idea is store the result in a string. Modifying the string in place could be expensive!\\n\\n````\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string res;\\n        int j = 0;\\n        for(int i=0;i<s.size();i++){ // we go through all the elements of s\\n            if(j<spaces.size() && i==spaces[j]){ // if we are at the position where we have to put a space, we put a space! we check \\'j<spaces.size()\\' because we could go beyond the last index\\n                res.push_back(\\' \\'); \\n                j++; // increase j so next time we will check the next space position\\n            }\\n            res.push_back(s[i]); // in any case we have to append the char\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string res;\\n        int j = 0;\\n        for(int i=0;i<s.size();i++){ // we go through all the elements of s\\n            if(j<spaces.size() && i==spaces[j]){ // if we are at the position where we have to put a space, we put a space! we check \\'j<spaces.size()\\' because we could go beyond the last index\\n                res.push_back(\\' \\'); \\n                j++; // increase j so next time we will check the next space position\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1692442,
                "title": "c-two-pointer-approach",
                "content": "```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n        var str = new StringBuilder();\\n        for(int i = 0, k = 0; i < s.Length; i++) {\\n            if(k < spaces.Length && i == spaces[k]){\\n                str.Append(\\' \\');\\n                str.Append(s[i]);\\n                k++;\\n            }else {\\n                str.Append(s[i]);\\n            }\\n        }\\n\\n        return str.ToString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n        var str = new StringBuilder();\\n        for(int i = 0, k = 0; i < s.Length; i++) {\\n            if(k < spaces.Length && i == spaces[k]){\\n                str.Append(\\' \\');\\n                str.Append(s[i]);\\n                k++;\\n            }else {\\n                str.Append(s[i]);\\n            }\\n        }\\n\\n        return str.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1675745,
                "title": "i-am-getting-memory-limit-exceed-please-help",
                "content": "class Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string s1;\\n        vector<string>v;\\n        long long j=0;\\n        for(long long i =0;i<spaces.size();i++)\\n        {\\n           s1 = s1+ s.substr(j,spaces[i]-j)+\" \";\\n            \\n            j = spaces[i];\\n                \\n        }\\n        s1 = s1+ s.substr(j,s.size()-j);\\n        \\n        \\n        return s1;    \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string s1;\\n        vector<string>v;\\n        long long j=0;\\n        for(long long i =0;i<spaces.size();i++)\\n        {\\n           s1 = s1+ s.substr(j,spaces[i]-j)+\" \";\\n            \\n            j = spaces[i];\\n                \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1661441,
                "title": "java-best-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        int j=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(j<spaces.length && i == spaces[j])\\n            {\\n                ans=ans.append(\\' \\');\\n                j++;\\n            }\\n            ans=ans.append(s.charAt(i));\\n        }\\n        return ans.toString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        int j=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(j<spaces.length && i == spaces[j])\\n            {\\n                ans=ans.append(\\' \\');\\n                j++;\\n            }\\n            ans=ans.append(s.charAt(i));\\n        }\\n        return ans.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1655381,
                "title": "java-two-pointers-clean-code-explained",
                "content": "Iterate over the array of space indexes and also keep 2 pointers in original string. Left pointer keep position of the last portion defined by space index, and right one will point to the next space index.\\n\\nOn each new space index we put the subtring defined by left and right pointers to the resulting string and if it\\'s not the last space - append the space after it. \\n\\nO(n) time - iterate over each char in the string at max\\nO(n) space - need to keep string builder to form final resulting string, plus substring needs at most O(n) space.\\n\\n```\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder();\\n        int l = 0;\\n        for (int spaceIdx : spaces) {\\n            sb.append(s.substring(l, spaceIdx));\\n            sb.append(\\' \\');\\n            l = spaceIdx;\\n        }\\n        //last piece - from last space position to the end of string\\n        sb.append(s.substring(l, s.length()));\\n        return sb.toString();\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder();\\n        int l = 0;\\n        for (int spaceIdx : spaces) {\\n            sb.append(s.substring(l, spaceIdx));\\n            sb.append(\\' \\');\\n            l = spaceIdx;\\n        }\\n        //last piece - from last space position to the end of string\\n        sb.append(s.substring(l, s.length()));\\n        return sb.toString();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1650802,
                "title": "pointer-appraoch",
                "content": "**Java Code**\\n\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        int j = 0;\\n        for(int i =0; i< s.length(); i++){\\n            if(j < spaces.length && i == spaces[j]){\\n                ans.append(\" \");\\n                j++;\\n            }\\n            ans.append(s.charAt(i));\\n        }\\n        return ans.toString();\\n    }\\n}\\n```\\n\\n**C++ Code**\\n\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans = \"\";\\n        int j = 0;\\n        for(int i = 0; i< s.size(); i++){\\n            if(j < spaces.size() && i == spaces[j]){\\n                ans += \\' \\';\\n                j++;\\n            }\\n            ans += s[i];\\n        } \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        int j = 0;\\n        for(int i =0; i< s.length(); i++){\\n            if(j < spaces.length && i == spaces[j]){\\n                ans.append(\" \");\\n                j++;\\n            }\\n            ans.append(s.charAt(i));\\n        }\\n        return ans.toString();\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans = \"\";\\n        int j = 0;\\n        for(int i = 0; i< s.size(); i++){\\n            if(j < spaces.size() && i == spaces[j]){\\n                ans += \\' \\';\\n                j++;\\n            }\\n            ans += s[i];\\n        } \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1646206,
                "title": "c-tc-o-n-simple",
                "content": "``` \\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans =\"\";\\n        int idx=0;\\n        for(int i=0;i<s.length();i++){\\n            if(idx <spaces.size() && i==spaces[idx]){\\n                ans+=\" \";\\n                idx++;\\n            }\\n            ans.push_back(s[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "``` \\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans =\"\";\\n        int idx=0;\\n        for(int i=0;i<s.length();i++){\\n            if(idx <spaces.size() && i==spaces[idx]){\\n                ans+=\" \";\\n                idx++;\\n            }\\n            ans.push_back(s[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1644387,
                "title": "c-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        if((int)spaces.size() == 0) return s;\\n        else{\\n            std::string result = \"\";\\n            int ptr =0;\\n            for(int i=0;i<(int)s.length();i++){\\n                if(ptr<(int)spaces.size() && i == spaces[ptr]){\\n                    result.push_back(\\' \\');\\n                    ptr++;\\n                }\\n                result.push_back(s[i]);\\n            }\\n            return result;\\n        }\\n    }\\n};x\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        if((int)spaces.size() == 0) return s;\\n        else{\\n            std::string result = \"\";\\n            int ptr =0;\\n            for(int i=0;i<(int)s.length();i++){\\n                if(ptr<(int)spaces.size() && i == spaces[ptr]){\\n                    result.push_back(\\' \\');\\n                    ptr++;\\n                }\\n                result.push_back(s[i]);\\n            }\\n            return result;\\n        }\\n    }\\n};x\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1644040,
                "title": "java-solution-without-using-stringbuilder",
                "content": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        char[] arr = new char[s.length() + spaces.length];\\n        int i = 0, j = 0, k = 0;\\n        \\n        while (i < s.length()) {\\n            if (j < spaces.length && i == spaces[j]) {\\n                arr[k++] = \\' \\';\\n                j++;\\n            }\\n            arr[k++] = s.charAt(i++);\\n        }\\n        return new String(arr);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        char[] arr = new char[s.length() + spaces.length];\\n        int i = 0, j = 0, k = 0;\\n        \\n        while (i < s.length()) {\\n            if (j < spaces.length && i == spaces[j]) {\\n                arr[k++] = \\' \\';\\n                j++;\\n            }\\n            arr[k++] = s.charAt(i++);\\n        }\\n        return new String(arr);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1643462,
                "title": "easy-explained-c-solution-o-n-two-pointer",
                "content": "**Approach Intuition**\\nThe solution to this approach is quite simple. \\n1. We create an empty string ans for storing the ans string\\n2. We keep an iterator on the input string and one on the spaces vector for keeping the track of the positions at which spaces have to be inserted.\\n3. We start traversing the input string\\n4. At every value of i we check weather there is scope of any space\\n5. If the i value matches with the spaces[j] then we insert space and increment j\\n6. Also, at each iteration of i we insert the character s[i] in the ans string and increment the value i\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans = \"\";\\n        \\n        int i = 0, j = 0;\\n        while(i<s.size()){\\n            if(j<spaces.size() and i == spaces[j]){\\n                ans.push_back(\\' \\');\\n                j++;\\n            }\\n            ans.push_back(s[i]);\\n            i++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans = \"\";\\n        \\n        int i = 0, j = 0;\\n        while(i<s.size()){\\n            if(j<spaces.size() and i == spaces[j]){\\n                ans.push_back(\\' \\');\\n                j++;\\n            }\\n            ans.push_back(s[i]);\\n            i++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1643419,
                "title": "simple-java-solution",
                "content": "class Solution {\\n\\n    public String addSpaces(String s, int[] s1) {\\n        StringBuilder nm=new StringBuilder();\\n        int k=s.length(),k1=s1.length,j=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(j<k1&&i==s1[j])\\n            {\\n                nm.append(\" \");\\n                j++;\\n            }\\n            nm.append(s.charAt(i));\\n        }\\n        return nm.toString();\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n\\n    public String addSpaces(String s, int[] s1) {\\n        StringBuilder nm=new StringBuilder();\\n        int k=s.length(),k1=s1.length,j=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(j<k1&&i==s1[j])\\n            {\\n                nm.append(\" \");\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1639959,
                "title": "c-simple-solution-o-n-solution",
                "content": "class Solution {\\npublic:\\n*     string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int j=0;\\n        for(int i=0;i<s.size();i++){\\n            if(j<spaces.size() && i==spaces[j]){\\n                ans+=\" \";\\n                j++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n*     string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int j=0;\\n        for(int i=0;i<s.size();i++){\\n            if(j<spaces.size() && i==spaces[j]){\\n                ans+=\" \";\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1636783,
                "title": "java-simplest-using-stringbuilder-insert-position-may-not-be-best-runtime",
                "content": "```\\npublic String addSpaces(String s, int[] spaces) \\n{\\n        int count=0;\\n        StringBuffer sb=new StringBuffer(s);\\n        for(int pos:spaces)\\n        {\\n            sb=sb.insert(pos+count,\" \");\\n            count=count+1;           \\n        }\\n        return sb.toString();\\n}\\n```\\n\\nI value and respect your opinion!",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\npublic String addSpaces(String s, int[] spaces) \\n{\\n        int count=0;\\n        StringBuffer sb=new StringBuffer(s);\\n        for(int pos:spaces)\\n        {\\n            sb=sb.insert(pos+count,\" \");\\n            count=count+1;           \\n        }\\n        return sb.toString();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1636312,
                "title": "swift-simple-solution-with-string-index",
                "content": "```\\nclass Solution {\\n    func addSpaces(_ s: String, _ spaces: [Int]) -> String {\\n        \\n        var answer = s\\n        var i = 0\\n\\n        spaces.forEach{\\n            answer.insert(\" \", at: String.Index(encodedOffset: $0 + i))\\n            i += 1\\n        }\\n        return answer\\n    }\\n}\\n```\\n\\n**NOTE: ** \\nString.Index(encodedOffset: ) works because we use only english letters.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func addSpaces(_ s: String, _ spaces: [Int]) -> String {\\n        \\n        var answer = s\\n        var i = 0\\n\\n        spaces.forEach{\\n            answer.insert(\" \", at: String.Index(encodedOffset: $0 + i))\\n            i += 1\\n        }\\n        return answer\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1636241,
                "title": "simple-java-solution-5-lines",
                "content": "Idea is to add space at the index and increment the \"addIndex\" because StringBuilder sb will already contain previous spaces in the result\\n\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        int addIndex = 0;\\n        for(int i:spaces){\\n            sb.insert(i+addIndex++,\" \");\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        int addIndex = 0;\\n        for(int i:spaces){\\n            sb.insert(i+addIndex++,\" \");\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1636137,
                "title": "clean-short-java-solution",
                "content": "```\\npublic String addSpaces(String s, int[] spaces) {\\n\\tStringBuilder sb = new StringBuilder(s);\\n\\n\\tfor(int i = 0; i < spaces.length; i++) {\\n\\t\\tsb.insert(spaces[i] + i, \" \");\\n\\t}\\n\\n\\treturn sb.toString();\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic String addSpaces(String s, int[] spaces) {\\n\\tStringBuilder sb = new StringBuilder(s);\\n\\n\\tfor(int i = 0; i < spaces.length; i++) {\\n\\t\\tsb.insert(spaces[i] + i, \" \");\\n\\t}\\n\\n\\treturn sb.toString();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1636058,
                "title": "simple-and-intuitive-o-n-time-and-o-1-space-solution-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        //result string\\n        string ans;        \\n        \\n        /*\\n        \\n        - Iterating from end of string s\\n        - Using spaces vector as a stack, by using the property : pop_back() and back()\\n        \\n        */\\n        for(int i = s.size()-1; i>=0; i--)\\n        {\\n            //adding the character to the result string\\n            ans+=s[i];\\n            \\n            //If the vector is not empty and we found the index where the space is inserted before\\n            if(spaces.size() && spaces.back() == i)\\n            {\\n                //add the space\\n                ans+=\" \";\\n                \\n                //remove the last element from the vector\\n                spaces.pop_back();                \\n            }\\n        }\\n        \\n        //reverse the string as it would be inverted\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        //result string\\n        string ans;        \\n        \\n        /*\\n        \\n        - Iterating from end of string s\\n        - Using spaces vector as a stack, by using the property : pop_back() and back()\\n        \\n        */\\n        for(int i = s.size()-1; i>=0; i--)\\n        {\\n            //adding the character to the result string\\n            ans+=s[i];\\n            \\n            //If the vector is not empty and we found the index where the space is inserted before\\n            if(spaces.size() && spaces.back() == i)\\n            {\\n                //add the space\\n                ans+=\" \";\\n                \\n                //remove the last element from the vector\\n                spaces.pop_back();                \\n            }\\n        }\\n        \\n        //reverse the string as it would be inverted\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635451,
                "title": "java-brute-force-easy-solution",
                "content": "```\\nclass Solution {\\n    public static String addSpaces(String s, int[] spaces) {\\n        StringBuilder a = new StringBuilder();\\n        int j = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            if ( j < spaces.length && spaces[j] == i ){\\n                a.append(\" \");\\n                j++;\\n            }\\n            a.append(s.charAt(i));\\n        }\\n        return a.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static String addSpaces(String s, int[] spaces) {\\n        StringBuilder a = new StringBuilder();\\n        int j = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            if ( j < spaces.length && spaces[j] == i ){\\n                a.append(\" \");\\n                j++;\\n            }\\n            a.append(s.charAt(i));\\n        }\\n        return a.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635294,
                "title": "java-easy",
                "content": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n         StringBuilder sb = new StringBuilder();\\n         int i = 0 ;\\n         int n = s.length();\\n         int idx = 0;\\n\\t\\t \\n       while(i < n && idx < spaces.length){\\n        //Add spaces when required\\n         if(spaces[idx] == i){\\n            sb.append(\" \");\\n            idx++;\\n           }\\n           sb.append(s.charAt(i));\\n           i++;\\n        \\n       }\\n      //Work for additional string that we left with\\n       while(i < n){\\n         sb.append(s.charAt(i++));\\n       }\\n      \\n      return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n         StringBuilder sb = new StringBuilder();\\n         int i = 0 ;\\n         int n = s.length();\\n         int idx = 0;\\n\\t\\t \\n       while(i < n && idx < spaces.length){\\n        //Add spaces when required\\n         if(spaces[idx] == i){\\n            sb.append(\" \");\\n            idx++;\\n           }\\n           sb.append(s.charAt(i));\\n           i++;\\n        \\n       }\\n      //Work for additional string that we left with\\n       while(i < n){\\n         sb.append(s.charAt(i++));\\n       }\\n      \\n      return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635266,
                "title": "java-clean-solution-using-stringbuilder",
                "content": "One pass, O(m + n) time complexity.\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder builder = new StringBuilder();\\n        int spaceIndex = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            if (spaceIndex < spaces.length && spaces[spaceIndex] == i) {\\n                builder.append(\\' \\');\\n                spaceIndex++;\\n            }\\n            builder.append(s.charAt(i));\\n        }\\n        return builder.toString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder builder = new StringBuilder();\\n        int spaceIndex = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            if (spaceIndex < spaces.length && spaces[spaceIndex] == i) {\\n                builder.append(\\' \\');\\n                spaceIndex++;\\n            }\\n            builder.append(s.charAt(i));\\n        }\\n        return builder.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635253,
                "title": "java-stringbuilder-hashset",
                "content": "\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n\\t\\n        HashSet<Integer> hs = new HashSet<>();\\n        for(int num : spaces) hs.add(num);\\n        \\n        StringBuilder ans = new StringBuilder();\\n        for(int i = 0; i < s.length(); i++){\\n            if(hs.contains(i)){\\n                ans.append(\" \");\\n            }\\n            ans.append(s.charAt(i));\\n        }\\n        return ans.toString();\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n\\t\\n        HashSet<Integer> hs = new HashSet<>();\\n        for(int num : spaces) hs.add(num);\\n        \\n        StringBuilder ans = new StringBuilder();\\n        for(int i = 0; i < s.length(); i++){\\n            if(hs.contains(i)){\\n                ans.append(\" \");\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1635224,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        a=\"\"\\n        j=0\\n        for i in range(len(s)):\\n            if(j<=len(spaces)-1 and i==spaces[j]):\\n                a+=\" \"\\n                j+=1\\n            a+=s[i]\\n        return a\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        a=\"\"\\n        j=0\\n        for i in range(len(s)):\\n            if(j<=len(spaces)-1 and i==spaces[j]):\\n                a+=\" \"\\n                j+=1\\n            a+=s[i]\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635222,
                "title": "java-stringbuilder",
                "content": "```\\n    public String addSpaces(String s, int[] spaces) {\\n        char[] ca= s.toCharArray();\\n        StringBuilder ans= new StringBuilder();\\n        int n= ca.length, m= spaces.length;\\n        for(int i=0, j=0; i<n; i++){\\n            if(j<m && i==spaces[j]){\\n                ans.append(\\' \\');\\n                j++;\\n            }\\n            ans.append(ca[i]);\\n        }\\n        return ans.toString();\\n    }",
                "solutionTags": [],
                "code": "```\\n    public String addSpaces(String s, int[] spaces) {\\n        char[] ca= s.toCharArray();\\n        StringBuilder ans= new StringBuilder();\\n        int n= ca.length, m= spaces.length;\\n        for(int i=0, j=0; i<n; i++){\\n            if(j<m && i==spaces[j]){\\n                ans.append(\\' \\');\\n                j++;\\n            }\\n            ans.append(ca[i]);\\n        }\\n        return ans.toString();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1635199,
                "title": "go-solution",
                "content": "```\\nfunc addSpaces(s string, spaces []int) string {\\n\\n\\tvar sb strings.Builder\\n\\n\\tj := 0\\n\\tfor i:=0;i<len(s);i++ {\\n\\t\\tif j < len(spaces) && spaces[j] == i {\\n\\t\\t\\tsb.WriteString(\" \")\\n\\t\\t\\tsb.Write([]byte{s[i]})\\n\\t\\t\\tj++\\n\\t\\t} else {\\n\\t\\t\\tsb.Write([]byte{s[i]})\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn sb.String()\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "String"
                ],
                "code": "```\\nfunc addSpaces(s string, spaces []int) string {\\n\\n\\tvar sb strings.Builder\\n\\n\\tj := 0\\n\\tfor i:=0;i<len(s);i++ {\\n\\t\\tif j < len(spaces) && spaces[j] == i {\\n\\t\\t\\tsb.WriteString(\" \")\\n\\t\\t\\tsb.Write([]byte{s[i]})\\n\\t\\t\\tj++\\n\\t\\t} else {\\n\\t\\t\\tsb.Write([]byte{s[i]})\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn sb.String()\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1635181,
                "title": "javascript-direct-way-cut-string-based-on-left-279ms",
                "content": "```\\nconst addSpaces = (s, spaces) => {\\n    let res = \\'\\';\\n    let l = 0;\\n    for (const r of spaces) {\\n        let t = s.slice(l, r);\\n        l = r;\\n        res += t;\\n        res += \\' \\';\\n    }\\n    let last = s.slice(l);\\n    res += last;\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nconst addSpaces = (s, spaces) => {\\n    let res = \\'\\';\\n    let l = 0;\\n    for (const r of spaces) {\\n        let t = s.slice(l, r);\\n        l = r;\\n        res += t;\\n        res += \\' \\';\\n    }\\n    let last = s.slice(l);\\n    res += last;\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1635163,
                "title": "go-easy-solution",
                "content": "To consider the string operation performace, we can use buffer.\\nFor string join, we can directly use array/string index.\\neg. s = \"0123456789\" spaces = [4] tmp = s[0:4]+\" \"\\n\\n```\\nfunc addSpaces(s string, spaces []int) string {\\n    var ans bytes.Buffer\\n    l := 0\\n    \\n    for i:=0;i<len(spaces);i++{\\n        ans.WriteString(s[l:spaces[i]] + \" \")\\n        l = spaces[i]\\n    }\\n    \\n    ans.WriteString(s[l:len(s)])\\n    \\n    return ans.String()\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc addSpaces(s string, spaces []int) string {\\n    var ans bytes.Buffer\\n    l := 0\\n    \\n    for i:=0;i<len(spaces);i++{\\n        ans.WriteString(s[l:spaces[i]] + \" \")\\n        l = spaces[i]\\n    }\\n    \\n    ans.WriteString(s[l:len(s)])\\n    \\n    return ans.String()\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1635136,
                "title": "c-2109-adding-spaces-to-a-string",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans; \\n        for (int i = s.size()-1; i >= 0; --i) {\\n            ans.push_back(s[i]); \\n            if (spaces.size() && i == spaces.back()) {\\n                ans.push_back(\\' \\'); \\n                spaces.pop_back(); \\n            }\\n        }\\n        reverse(ans.begin(), ans.end()); \\n        return ans; \\n    }\\n};\\n```\\n\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans; \\n        for (int i = 0, j = 0; i < s.size(); ++i) {\\n            if (j < spaces.size() && i == spaces[j]) {\\n                ans.push_back(\\' \\'); \\n                ++j; \\n            }\\n            ans.push_back(s[i]); \\n        }\\n        return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans; \\n        for (int i = s.size()-1; i >= 0; --i) {\\n            ans.push_back(s[i]); \\n            if (spaces.size() && i == spaces.back()) {\\n                ans.push_back(\\' \\'); \\n                spaces.pop_back(); \\n            }\\n        }\\n        reverse(ans.begin(), ans.end()); \\n        return ans; \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans; \\n        for (int i = 0, j = 0; i < s.size(); ++i) {\\n            if (j < spaces.size() && i == spaces[j]) {\\n                ans.push_back(\\' \\'); \\n                ++j; \\n            }\\n            ans.push_back(s[i]); \\n        }\\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635085,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int j=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(j<spaces.size()&&i==spaces[j])\\n            {\\n                ans+=\\' \\';\\n                j++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int j=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(j<spaces.size()&&i==spaces[j])\\n            {\\n                ans+=\\' \\';\\n                j++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635049,
                "title": "c-don-t-insert-in-stringbuilder",
                "content": "After looking at question your first thought might be to simply create a stringbuilder and insert spaces where needed. But don\\'t do it. It will timeout, because insert operation shifts string every time.\\n```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n        var sb = new StringBuilder();\\n        var currIdx = 0;\\n        for(var i=0; i<spaces.Length; i++){\\n            sb.Append(s.Substring(currIdx,spaces[i]-currIdx));\\n            sb.Append(\" \");\\n            currIdx = spaces[i];\\n        }\\n        sb.Append(s.Substring(currIdx));\\n        \\n        return sb.ToString();\\n    }\\n}\\n```\\n\\nTLE - when doint Insert in stringbuilder\\n```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n        var sb = new StringBuilder(s);\\n        for(var i=spaces.Length-1; i>=0; i--){\\n            sb.Insert(spaces[i], \" \");\\n        }\\n        \\n        return sb.ToString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n        var sb = new StringBuilder();\\n        var currIdx = 0;\\n        for(var i=0; i<spaces.Length; i++){\\n            sb.Append(s.Substring(currIdx,spaces[i]-currIdx));\\n            sb.Append(\" \");\\n            currIdx = spaces[i];\\n        }\\n        sb.Append(s.Substring(currIdx));\\n        \\n        return sb.ToString();\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n        var sb = new StringBuilder(s);\\n        for(var i=spaces.Length-1; i>=0; i--){\\n            sb.Insert(spaces[i], \" \");\\n        }\\n        \\n        return sb.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635004,
                "title": "java-with-explanation",
                "content": "```\\n//Time Complexity: O(m + n)\\n//Space Complexity: O(m + n)\\n//m is length of s, n is length of spaces\\n\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder retval = new StringBuilder();\\n        HashSet<Integer> set = new HashSet<>();\\n        \\n        //put the spaces array to set, so we can get spaces in O(1) in next step\\n        for(int i : spaces){\\n            set.add(i);\\n        }\\n        \\n        int len = s.length();\\n        int cur = 0;\\n        //go through s\\n        while(cur < len){\\n            //check if set contains cur position, if exist then we append space to retval, then remove it from set\\n            //so we will not keep appending the space for this position\\n            if(set.contains(cur)){\\n                set.remove(cur);\\n                retval.append(\" \");\\n            }\\n            //append original character for this position\\n            retval.append(s.charAt(cur));\\n            cur++;\\n        }\\n        \\n        return retval.toString();\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n//Time Complexity: O(m + n)\\n//Space Complexity: O(m + n)\\n//m is length of s, n is length of spaces\\n\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder retval = new StringBuilder();\\n        HashSet<Integer> set = new HashSet<>();\\n        \\n        //put the spaces array to set, so we can get spaces in O(1) in next step\\n        for(int i : spaces){\\n            set.add(i);\\n        }\\n        \\n        int len = s.length();\\n        int cur = 0;\\n        //go through s\\n        while(cur < len){\\n            //check if set contains cur position, if exist then we append space to retval, then remove it from set\\n            //so we will not keep appending the space for this position\\n            if(set.contains(cur)){\\n                set.remove(cur);\\n                retval.append(\" \");\\n            }\\n            //append original character for this position\\n            retval.append(s.charAt(cur));\\n            cur++;\\n        }\\n        \\n        return retval.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1634981,
                "title": "a-few-solutions",
                "content": "**Functional Solution #1:**\\n\\nUse a set `space` to store each index `i` of the input array `A` which we need to prefix with a whitespace.  Then map the characters `c` of the input string `s` accordingly.\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun addSpaces(s: String, A: IntArray): String {\\n        var space = A.toSet()\\n        return s.mapIndexed{ i, c -> if (space.contains(i)) \" $c\" else \"$c\" }.joinToString(\"\")\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet addSpaces = (s, A, space = new Set(A)) => s.split(\\'\\').map((c, i) => space.has(i) ? ` ${c}` : c).join(\\'\\');\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, A: List[int]) -> str:\\n        space = set(A)\\n        return \\'\\'.join(f\\' {c}\\' if i in space else c for i, c in enumerate(s))\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using Set = unordered_set<int>;\\n    string addSpaces(string s, VI& A, stringstream ss = stringstream()) {\\n        Set space{ A.begin(), A.end() };\\n        transform(s.begin(), s.end(), ostream_iterator<string>(ss), [i = -1, &space](auto c) mutable {\\n            return space.find(++i) != space.end() ? string(1, \\' \\').append(string(1, c)) : string(1, c);\\n        });\\n        return ss.str();\\n    }\\n};\\n```\\n\\n---\\n\\n**Procedural Solution #1:**\\n\\nSame idea as above, but procedurally.\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun addSpaces(s: String, A: IntArray): String {\\n        var ans = mutableListOf<Char>()\\n        var space = A.toSet()\\n        for (i in 0 until s.length) {\\n            if (space.contains(i))\\n                ans.add(\\' \\')\\n            ans.add(s[i])\\n        }\\n        return ans.joinToString(\"\")\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet addSpaces = (s, A, space = new Set(A), ans = []) => {\\n    for (let i = 0; i < s.length; ++i) {\\n        if (space.has(i))\\n            ans.push(\\' \\');\\n        ans.push(s[i]);\\n    }\\n    return ans.join(\\'\\');\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, A: List[int]) -> str:\\n        ans = []\\n        space = set(A)\\n        for i, c in enumerate(s):\\n            if i in space:\\n                ans.append(\\' \\')\\n            ans.append(s[i])\\n        return \\'\\'.join(ans)\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using Set = unordered_set<int>;\\n    string addSpaces(string s, VI& A, stringstream ss = stringstream()) {\\n        Set space{ A.begin(), A.end() };\\n        for (auto i{ 0 }; i < s.size(); ++i)\\n            ss << (space.find(i) != space.end() ? \" \" : \"\") << s[i];\\n        return ss.str();\\n    }\\n};\\n```\\n\\n---\\n\\n**Procedural Solution #2:**\\n\\nPerform a linear scan of each `i`<sup>th</sup> index of the input string `s` and append whitespace whenever `i == A[j]` (also increment `j` when this occurs) to construct the answer `ans` one character `s[i]` at a time.\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun addSpaces(s: String, A: IntArray): String {\\n        var ans = mutableListOf<Char>()\\n        var (N, i, j) = Triple(s.length, 0, 0)\\n        while (i < N) {\\n            if (j < A.size && i == A[j]) {\\n                ans.add(\\' \\'); ++j\\n            }\\n            ans.add(s[i++])\\n        }\\n        return ans.joinToString(\"\")\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet addSpaces = (s, A, ans = []) => {\\n    let N = s.length,\\n        i = 0,\\n        j = 0;\\n    while (i < N) {\\n        if (j < A.length && i == A[j])\\n            ans.push(\\' \\'), ++j;\\n        ans.push(s[i++]);\\n    }\\n    return ans.join(\\'\\');\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, A: List[int]) -> str:\\n        j = 0\\n        ans = []\\n        for i, c in enumerate(list(s)):\\n            if j < len(A) and i == A[j]:\\n                ans.append(\\' \\')\\n                j += 1\\n            ans.append(c)\\n        return \\'\\'.join(ans)\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    string addSpaces(string s, VI& A, string ans = {}) {\\n        int N = s.size(),\\n            i = 0,\\n            j = 0;\\n        while (i < N) {\\n            if (j < A.size() && i == A[j])\\n                ans.push_back(\\' \\'), ++j;\\n            ans.push_back(s[i++]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun addSpaces(s: String, A: IntArray): String {\\n        var space = A.toSet()\\n        return s.mapIndexed{ i, c -> if (space.contains(i)) \" $c\" else \"$c\" }.joinToString(\"\")\\n    }\\n}\\n```\n```\\nlet addSpaces = (s, A, space = new Set(A)) => s.split(\\'\\').map((c, i) => space.has(i) ? ` ${c}` : c).join(\\'\\');\\n```\n```\\nclass Solution:\\n    def addSpaces(self, s: str, A: List[int]) -> str:\\n        space = set(A)\\n        return \\'\\'.join(f\\' {c}\\' if i in space else c for i, c in enumerate(s))\\n```\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using Set = unordered_set<int>;\\n    string addSpaces(string s, VI& A, stringstream ss = stringstream()) {\\n        Set space{ A.begin(), A.end() };\\n        transform(s.begin(), s.end(), ostream_iterator<string>(ss), [i = -1, &space](auto c) mutable {\\n            return space.find(++i) != space.end() ? string(1, \\' \\').append(string(1, c)) : string(1, c);\\n        });\\n        return ss.str();\\n    }\\n};\\n```\n```\\nclass Solution {\\n    fun addSpaces(s: String, A: IntArray): String {\\n        var ans = mutableListOf<Char>()\\n        var space = A.toSet()\\n        for (i in 0 until s.length) {\\n            if (space.contains(i))\\n                ans.add(\\' \\')\\n            ans.add(s[i])\\n        }\\n        return ans.joinToString(\"\")\\n    }\\n}\\n```\n```\\nlet addSpaces = (s, A, space = new Set(A), ans = []) => {\\n    for (let i = 0; i < s.length; ++i) {\\n        if (space.has(i))\\n            ans.push(\\' \\');\\n        ans.push(s[i]);\\n    }\\n    return ans.join(\\'\\');\\n};\\n```\n```\\nclass Solution:\\n    def addSpaces(self, s: str, A: List[int]) -> str:\\n        ans = []\\n        space = set(A)\\n        for i, c in enumerate(s):\\n            if i in space:\\n                ans.append(\\' \\')\\n            ans.append(s[i])\\n        return \\'\\'.join(ans)\\n```\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using Set = unordered_set<int>;\\n    string addSpaces(string s, VI& A, stringstream ss = stringstream()) {\\n        Set space{ A.begin(), A.end() };\\n        for (auto i{ 0 }; i < s.size(); ++i)\\n            ss << (space.find(i) != space.end() ? \" \" : \"\") << s[i];\\n        return ss.str();\\n    }\\n};\\n```\n```\\nclass Solution {\\n    fun addSpaces(s: String, A: IntArray): String {\\n        var ans = mutableListOf<Char>()\\n        var (N, i, j) = Triple(s.length, 0, 0)\\n        while (i < N) {\\n            if (j < A.size && i == A[j]) {\\n                ans.add(\\' \\'); ++j\\n            }\\n            ans.add(s[i++])\\n        }\\n        return ans.joinToString(\"\")\\n    }\\n}\\n```\n```\\nlet addSpaces = (s, A, ans = []) => {\\n    let N = s.length,\\n        i = 0,\\n        j = 0;\\n    while (i < N) {\\n        if (j < A.length && i == A[j])\\n            ans.push(\\' \\'), ++j;\\n        ans.push(s[i++]);\\n    }\\n    return ans.join(\\'\\');\\n};\\n```\n```\\nclass Solution:\\n    def addSpaces(self, s: str, A: List[int]) -> str:\\n        j = 0\\n        ans = []\\n        for i, c in enumerate(list(s)):\\n            if j < len(A) and i == A[j]:\\n                ans.append(\\' \\')\\n                j += 1\\n            ans.append(c)\\n        return \\'\\'.join(ans)\\n```\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    string addSpaces(string s, VI& A, string ans = {}) {\\n        int N = s.size(),\\n            i = 0,\\n            j = 0;\\n        while (i < N) {\\n            if (j < A.size() && i == A[j])\\n                ans.push_back(\\' \\'), ++j;\\n            ans.push_back(s[i++]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075585,
                "title": "easy-solution-using-stringbuilders",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        int lst = 0;\\n        for(int i : spaces)\\n        {\\n            String left = s.substring(lst , i);\\n            String sp = \" \";\\n            ans.append(left);\\n            ans.append(sp);\\n            lst = i;\\n        }\\n        ans.append(s.substring(lst));\\n        return ans.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder ans = new StringBuilder();\\n        int lst = 0;\\n        for(int i : spaces)\\n        {\\n            String left = s.substring(lst , i);\\n            String sp = \" \";\\n            ans.append(left);\\n            ans.append(sp);\\n            lst = i;\\n        }\\n        ans.append(s.substring(lst));\\n        return ans.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068820,
                "title": "c-easy-simulation",
                "content": "# Intuition\\nsimply simulate  the proccess  use push_back(char) instead of concat because concat gives t.l.e.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n o(n)\\n\\n- Space complexity:\\n-  o(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string res=\"\";\\n         int j=0,sz=s.size();\\n          for(int i=0;i<sz;i++)\\n            {\\n              if(j<spaces.size() and  i==spaces[j])\\n                {\\n                  res.push_back(\\' \\');\\n                  j++;\\n                }\\n                  res.push_back(s[i]);\\n            }\\n            return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string res=\"\";\\n         int j=0,sz=s.size();\\n          for(int i=0;i<sz;i++)\\n            {\\n              if(j<spaces.size() and  i==spaces[j])\\n                {\\n                  res.push_back(\\' \\');\\n                  j++;\\n                }\\n                  res.push_back(s[i]);\\n            }\\n            return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056563,
                "title": "adding-spaces-to-a-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        d = {}\\n        for i in range(len(s)):\\n            d[i] = s[i]\\n        for i in spaces:\\n            d[i] = \" \" + d[i]\\n        a = list(d.values())\\n        return \"\".join(a)\\n        \\n\\n        \\n\\n        \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        d = {}\\n        for i in range(len(s)):\\n            d[i] = s[i]\\n        for i in spaces:\\n            d[i] = \" \" + d[i]\\n        a = list(d.values())\\n        return \"\".join(a)\\n        \\n\\n        \\n\\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4027117,
                "title": "very-easy-and-optimized-code-100-beat",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(s.length() + spaces.size())\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(s.length() + spaces.size())\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) { \\n        string ans;\\n        int j = 0;\\n        \\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            if(j < spaces.size() && i == spaces[j])\\n            {\\n                ans +=\\' \\';\\n                j++;\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) { \\n        string ans;\\n        int j = 0;\\n        \\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            if(j < spaces.size() && i == spaces[j])\\n            {\\n                ans +=\\' \\';\\n                j++;\\n            }\\n            ans += s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023057,
                "title": "simplest-and-effective-easy-to-follow",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code is designed to add spaces to a given string s at specific positions specified by a vector spaces. The goal is to insert spaces into the string to format it according to certain requirements or patterns.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize an empty string ans to store the modified string with added spaces.\\n\\n2. Initialize an index ind to 0. This index keeps track of the current position in the spaces vector.\\n\\n3. Get the size n of the spaces vector, which indicates the number of spaces to be added.\\n\\n4. Iterate through the characters of the input string s using a for loop:\\n\\n    1. Check if the current index i is less than n and equal to the value at spaces[ind]. If this condition is met, it means a space should be added before the current character in s.\\n\\n    2. If the condition is true, append a space character and the current character from s to the ans string, and increment the ind index to move to the next position in the spaces vector.\\n\\n    3. If the condition is not true (i.e., no space should be added before the current character), simply append the current character from s to the ans string.\\n\\n5. After the loop completes, return the ans string, which is the modified string with added spaces at the specified positions.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int ind = 0;\\n        int n = spaces.size();\\n\\n        for(int i = 0; i<s.length(); i++){\\n            if(ind < n && i == spaces[ind]){\\n                ans += \" \";\\n                ans += s[i];\\n                ind++;\\n            }\\n            else {\\n                ans += s[i];\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int ind = 0;\\n        int n = spaces.size();\\n\\n        for(int i = 0; i<s.length(); i++){\\n            if(ind < n && i == spaces[ind]){\\n                ans += \" \";\\n                ans += s[i];\\n                ind++;\\n            }\\n            else {\\n                ans += s[i];\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019183,
                "title": "easy-to-understand-solution-simple-implementation",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$ \\n\\n- Space complexity: $$O(1)$$ \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n       string ans = \"\";\\n       int j = 0, space_index = 0;\\n        while(j < s.length())\\n        { //whenever we reach an index that should contain space\\n            if(space_index < spaces.size() && j == spaces[space_index])\\n            {\\n              ans += \\' \\'; //add a space\\n              space_index++; //move to next index of spaces vector\\n            }\\n            ans += s[j]; //add character from the given string\\n            j++;\\n        }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n       string ans = \"\";\\n       int j = 0, space_index = 0;\\n        while(j < s.length())\\n        { //whenever we reach an index that should contain space\\n            if(space_index < spaces.size() && j == spaces[space_index])\\n            {\\n              ans += \\' \\'; //add a space\\n              space_index++; //move to next index of spaces vector\\n            }\\n            ans += s[j]; //add character from the given string\\n            j++;\\n        }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006910,
                "title": "x-tra-simple-python-solution",
                "content": "# Approach\\njust add a space when `spaces[i]` says to\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)???$$\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s, spaces):\\n        newString = \"\"\\n        i = 0\\n        for l in range(len(s)):\\n            if i < len(spaces) and l == spaces[i]:\\n                newString += \" \"\\n                i += 1\\n            newString += s[l]\\n        return newString\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s, spaces):\\n        newString = \"\"\\n        i = 0\\n        for l in range(len(s)):\\n            if i < len(spaces) and l == spaces[i]:\\n                newString += \" \"\\n                i += 1\\n            newString += s[l]\\n        return newString\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005514,
                "title": "java-o-n-stringbuilder",
                "content": "# Complexity\\n- Time complexity: O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0, j = 0; i < s.length(); i++) {\\n            if (j < spaces.length && spaces[j] == i) {\\n                sb.append(\\' \\');\\n                j++;\\n            }\\n            sb.append(s.charAt(i));\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0, j = 0; i < s.length(); i++) {\\n            if (j < spaces.length && spaces[j] == i) {\\n                sb.append(\\' \\');\\n                j++;\\n            }\\n            sb.append(s.charAt(i));\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3997754,
                "title": "addspaces-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nchar * addSpaces(char * s, int* spaces, int spacesSize){\\n    \\nint length=strlen(s)+spacesSize;\\nchar* str=(char*)malloc(sizeof(char)*(length+1));\\nif(str==NULL) {\\n    return NULL;\\n}\\nint start=0;\\n    int end=0;\\nfor(int i=0; i<length; i++) {\\n    if(start<spacesSize  &&  spaces[start]==i) {\\n        str[end++]=\\' \\';\\n        start++;\\n    }\\n    if(i<strlen(s)) {\\n    str[end++]=s[i];\\n    }\\n}\\nstr[end]=\\'\\\\0\\';\\nreturn str;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar * addSpaces(char * s, int* spaces, int spacesSize){\\n    \\nint length=strlen(s)+spacesSize;\\nchar* str=(char*)malloc(sizeof(char)*(length+1));\\nif(str==NULL) {\\n    return NULL;\\n}\\nint start=0;\\n    int end=0;\\nfor(int i=0; i<length; i++) {\\n    if(start<spacesSize  &&  spaces[start]==i) {\\n        str[end++]=\\' \\';\\n        start++;\\n    }\\n    if(i<strlen(s)) {\\n    str[end++]=s[i];\\n    }\\n}\\nstr[end]=\\'\\\\0\\';\\nreturn str;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3968712,
                "title": "adding-spaces-to-a-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n StringBuilder sb = new StringBuilder();\\n    int j = 0; // spaces\\' index\\n\\n    for (int i = 0; i < s.length(); ++i) {\\n      if (j < spaces.length && i == spaces[j]) {\\n        sb.append(\\' \\');\\n        ++j;\\n      }\\n      sb.append(s.charAt(i));\\n    }\\n\\n    return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n StringBuilder sb = new StringBuilder();\\n    int j = 0; // spaces\\' index\\n\\n    for (int i = 0; i < s.length(); ++i) {\\n      if (j < spaces.length && i == spaces[j]) {\\n        sb.append(\\' \\');\\n        ++j;\\n      }\\n      sb.append(s.charAt(i));\\n    }\\n\\n    return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3964621,
                "title": "java-solution-with-o-n-complexity",
                "content": "# Approach\\nIterate over the string  and keep on adding spaces and string characters into char array.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        char[] charArr = new char[s.length() + spaces.length];\\n        int spaceIndex = 0;\\n        int strIndex = 0;\\n\\n        for(int i = 0; i < charArr.length; i++) {    \\n            if(spaceIndex < spaces.length && strIndex == spaces[spaceIndex]) {\\n                charArr[i] = \\' \\';\\n                spaceIndex++;\\n                i++;                    \\n            }\\n            charArr[i] = s.charAt(strIndex);\\n            strIndex++;\\n        }\\n\\n        return new String(charArr);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        char[] charArr = new char[s.length() + spaces.length];\\n        int spaceIndex = 0;\\n        int strIndex = 0;\\n\\n        for(int i = 0; i < charArr.length; i++) {    \\n            if(spaceIndex < spaces.length && strIndex == spaces[spaceIndex]) {\\n                charArr[i] = \\' \\';\\n                spaceIndex++;\\n                i++;                    \\n            }\\n            charArr[i] = s.charAt(strIndex);\\n            strIndex++;\\n        }\\n\\n        return new String(charArr);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3937327,
                "title": "2-liner-brute-force-better-solutions-python-beats-just-5-and-70",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n#O(NlogN)\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        for i in range(len(spaces)): s = s[:i+spaces[i]] + \\' \\' + s[i+spaces[i]:]\\n        return s\\n```\\n\\n\\n# Code\\n```\\nclass Solution:\\n#O(N)\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = \\'\\'\\n        n = len(s)\\n        m = spaces[-1]\\n        spacer = 0\\n        for i in range(n): \\n            if i <= m:\\n                if i == spaces[spacer]:\\n                    ans += \\' \\'\\n                    spacer += 1\\n            ans += s[i]\\n\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n#O(NlogN)\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        for i in range(len(spaces)): s = s[:i+spaces[i]] + \\' \\' + s[i+spaces[i]:]\\n        return s\\n```\n```\\nclass Solution:\\n#O(N)\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = \\'\\'\\n        n = len(s)\\n        m = spaces[-1]\\n        spacer = 0\\n        for i in range(n): \\n            if i <= m:\\n                if i == spaces[spacer]:\\n                    ans += \\' \\'\\n                    spacer += 1\\n            ans += s[i]\\n\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923018,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces)\\n\\t\\t {\\n\\t\\t\\t StringBuffer b=new StringBuffer();\\n\\t\\t\\t\\n\\t\\t\\tfor (int i = 0; i < spaces.length+1; i++) \\n\\t\\t\\t{\\n\\t\\t\\t\\t\\n\\t\\t\\tif(i==0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tb.append(s.substring(0,spaces[i]));\\n\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==spaces.length)\\n\\t\\t\\t{\\n\\t\\t\\t\\tb.append(\" \"+s.substring(spaces[i-1]));\\n\\t\\t\\t;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tb.append(\" \"+s.substring(spaces[i-1],spaces[i]));\\n\\t\\t\\t   \\n\\t\\t\\t    \\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\treturn b.toString();\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces)\\n\\t\\t {\\n\\t\\t\\t StringBuffer b=new StringBuffer();\\n\\t\\t\\t\\n\\t\\t\\tfor (int i = 0; i < spaces.length+1; i++) \\n\\t\\t\\t{\\n\\t\\t\\t\\t\\n\\t\\t\\tif(i==0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tb.append(s.substring(0,spaces[i]));\\n\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==spaces.length)\\n\\t\\t\\t{\\n\\t\\t\\t\\tb.append(\" \"+s.substring(spaces[i-1]));\\n\\t\\t\\t;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tb.append(\" \"+s.substring(spaces[i-1],spaces[i]));\\n\\t\\t\\t   \\n\\t\\t\\t    \\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\treturn b.toString();\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904032,
                "title": "kotlin",
                "content": "```\\nfun addSpaces(s: String, a: IntArray) = buildString {\\n    var c = 0\\n    s.forEachIndexed { i, ch ->\\n        append(if (i == a.getOrNull(c)) \" $ch\".also { ++c } else ch)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nfun addSpaces(s: String, a: IntArray) = buildString {\\n    var c = 0\\n    s.forEachIndexed { i, ch ->\\n        append(if (i == a.getOrNull(c)) \" $ch\".also { ++c } else ch)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3897913,
                "title": "simple-java-solution-using-stringbuilder",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n\\n- Space complexity:O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        \\n        for(int i = 0; i < spaces.length; i++) {\\n            sb.insert(spaces[i] + i, \\' \\');\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        \\n        for(int i = 0; i < spaces.length; i++) {\\n            sb.insert(spaces[i] + i, \\' \\');\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851411,
                "title": "simple-approach-with-one-iteration",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nWe need some mutable string or char array\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nwith the help of mutable string we can append the characters of the string in the end,\\n\\nif we encounter the index we just append the space and do the process until loop runs\\n\\nfinally we have our string, return it.\\n\\n\\n2. Another Approach:    \\n    if you want to use char array: make sure the array length is equal to \" length of string and length of space array\"\\n\\n\\nif you like this solution, please upvote me\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(m+n);\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n\\n        //i need mutable string\\n        StringBuilder b = new StringBuilder();\\n\\n        for(int i = 0,j=0;i<s.length();i++){\\n            \\n            if(j<spaces.length && i==spaces[j]){\\n                j++;\\n                b.append(\\' \\');\\n            }\\n            b.append(s.charAt(i));\\n        }\\n        return b.toString();   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n\\n        //i need mutable string\\n        StringBuilder b = new StringBuilder();\\n\\n        for(int i = 0,j=0;i<s.length();i++){\\n            \\n            if(j<spaces.length && i==spaces[j]){\\n                j++;\\n                b.append(\\' \\');\\n            }\\n            b.append(s.charAt(i));\\n        }\\n        return b.toString();   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3829409,
                "title": "easy-and-fast-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder();\\n        int i = 0, j = 0, l = s.length();\\n\\n        while (i < l) {\\n            if (j < spaces.length) {\\n                if (i == spaces[j]) {\\n                    sb.append(\" \");\\n                    ++j;\\n                }\\n            }\\n\\n            sb.append(s.charAt(i));\\n            ++i;\\n        }\\n        \\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder();\\n        int i = 0, j = 0, l = s.length();\\n\\n        while (i < l) {\\n            if (j < spaces.length) {\\n                if (i == spaces[j]) {\\n                    sb.append(\" \");\\n                    ++j;\\n                }\\n            }\\n\\n            sb.append(s.charAt(i));\\n            ++i;\\n        }\\n        \\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3827832,
                "title": "python-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        j = 0\\n        lol = []\\n\\n        for i in range(len(s)):\\n            if j < len(spaces) and i == spaces[j]:\\n                lol.append(\\' \\')\\n                j += 1\\n            lol.append(s[i])\\n\\n        return \\'\\'.join(lol)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        j = 0\\n        lol = []\\n\\n        for i in range(len(s)):\\n            if j < len(spaces) and i == spaces[j]:\\n                lol.append(\\' \\')\\n                j += 1\\n            lol.append(s[i])\\n\\n        return \\'\\'.join(lol)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3816482,
                "title": "easy-c-solution-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    string addSpaces(string s, vector<int> &spaces)\\n    {\\n        string ans = \"\";\\n        int n = s.size(), m = spaces.size();\\n        int i = 0, j = 0;\\n\\n        while (i < n)\\n        {\\n            if (j < m && i == spaces[j])\\n            {\\n                ans += \" \";\\n                j++;\\n            }\\n            ans += s[i];\\n            i++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    string addSpaces(string s, vector<int> &spaces)\\n    {\\n        string ans = \"\";\\n        int n = s.size(), m = spaces.size();\\n        int i = 0, j = 0;\\n\\n        while (i < n)\\n        {\\n            if (j < m && i == spaces[j])\\n            {\\n                ans += \" \";\\n                j++;\\n            }\\n            ans += s[i];\\n            i++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3812598,
                "title": "python-merge-two-sorted-lists",
                "content": "# Intuition\\n\\nAnnotate each character with its index, both in `s` and `spaces`. Merge these sorted annotations.\\n\\n# Approach\\n\\nSequences `((i, s[i]) for i in range(len(s)))` (a.k.a. `enumerate(s)`) and `((i, \\' \\') for i in spaces)` are both sorted by index. Luckily for us, `ord(\\' \\') < ord(c)` for any lowercase english letter `c`, so a space with index `i` will preceed a letter `c` with index `i`.\\n\\n# Complexity\\n\\n- Time complexity: $$O(n)$$ because merging $$k$$ lists takes $$O(n \\\\log k)$$, but here $$k = O(1)$$.\\n\\n- Space complexity: $$O(1)$$ extra (not including the result), since everything is done with generators.\\n\\n# Code\\n\\n```python\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: list[int]) -> str:\\n        items = ((i, \\' \\') for i in spaces)\\n        merged = heapq.merge(enumerate(s), items)\\n        return \\'\\'.join(c for _, c in merged)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: list[int]) -> str:\\n        items = ((i, \\' \\') for i in spaces)\\n        merged = heapq.merge(enumerate(s), items)\\n        return \\'\\'.join(c for _, c in merged)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3799688,
                "title": "python-easy-5-lines-code-o-n-beats-100",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = \"\"\\n        start = 0\\n        for space in spaces:\\n            ans += s[start:space] + \" \"\\n            start = space\\n        return ans + s[start:]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        ans = \"\"\\n        start = 0\\n        for space in spaces:\\n            ans += s[start:space] + \" \"\\n            start = space\\n        return ans + s[start:]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3799625,
                "title": "c-easy-solution-two-approaches",
                "content": "\\n# Approach\\nApprorach 1: Traverse on string and compare the current index with ith index of spaces. If equal add space in result otherwise the current chanrater from string.\\n\\nApproach 2: Traverse on sppaces array and get substring of string from current index till current space.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N) \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n\\n        //Approach 1\\n        var sb = new StringBuilder();\\n        int sLen = spaces.Length;\\n\\n        for(int idx = 0, space = 0; space < sLen; space++)\\n        {\\n            int currSpace = spaces[space];\\n            string sub = s.Substring(idx, currSpace-idx) + \" \";\\n            sb.Append(sub);\\n            idx = currSpace;\\n        }\\n        sb.Append(s.Substring(spaces[sLen-1], (s.Length-spaces[sLen-1])));\\n        return sb.ToString();\\n\\n        //Approach 2\\n        var sb = new StringBuilder();\\n        int space = 0;\\n        for(int i = 0; i < s.Length; i++) {\\n            if(space < spaces.Length && i == spaces[space]) {\\n                sb.Append(\" \");\\n                space++;\\n                i--;\\n            } else {\\n                sb.Append(s[i].ToString());\\n            } \\n        }  \\n        return sb.ToString();]()\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C#",
                    "Array",
                    "String",
                    "Simulation"
                ],
                "code": "```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n\\n        //Approach 1\\n        var sb = new StringBuilder();\\n        int sLen = spaces.Length;\\n\\n        for(int idx = 0, space = 0; space < sLen; space++)\\n        {\\n            int currSpace = spaces[space];\\n            string sub = s.Substring(idx, currSpace-idx) + \" \";\\n            sb.Append(sub);\\n            idx = currSpace;\\n        }\\n        sb.Append(s.Substring(spaces[sLen-1], (s.Length-spaces[sLen-1])));\\n        return sb.ToString();\\n\\n        //Approach 2\\n        var sb = new StringBuilder();\\n        int space = 0;\\n        for(int i = 0; i < s.Length; i++) {\\n            if(space < spaces.Length && i == spaces[space]) {\\n                sb.Append(\" \");\\n                space++;\\n                i--;\\n            } else {\\n                sb.Append(s[i].ToString());\\n            } \\n        }  \\n        return sb.ToString();]()\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3798924,
                "title": "python3-good-enough",
                "content": "``` Python3 []\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        s = list(s)\\n\\n        for i in spaces:\\n            s[i] = \\' \\'+s[i]\\n        \\n        return \\'\\'.join(s)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "``` Python3 []\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        s = list(s)\\n\\n        for i in spaces:\\n            s[i] = \\' \\'+s[i]\\n        \\n        return \\'\\'.join(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3784136,
                "title": "easy-js-solution",
                "content": "Could use some refactoring im sure but my quick approach\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @param {number[]} spaces\\n * @return {string}\\n */\\nvar addSpaces = function(s, spaces) {\\n   \\nlet res = [];\\n\\nfor(let i = 0; i < spaces.length; i++) {\\nlet word = \"\"\\nif(spaces[i - 1]) {\\n word = s.slice(spaces[i - 1], spaces[i])\\n}else {\\n word = s.slice(0, spaces[i])\\n}\\n\\nres.push(word)\\nword=\"\"\\n}\\n\\nword = s.slice(spaces[spaces.length - 1], s.length)\\nres.push(word)\\n\\nreturn res.join(\\' \\').toString();\\n\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number[]} spaces\\n * @return {string}\\n */\\nvar addSpaces = function(s, spaces) {\\n   \\nlet res = [];\\n\\nfor(let i = 0; i < spaces.length; i++) {\\nlet word = \"\"\\nif(spaces[i - 1]) {\\n word = s.slice(spaces[i - 1], spaces[i])\\n}else {\\n word = s.slice(0, spaces[i])\\n}\\n\\nres.push(word)\\nword=\"\"\\n}\\n\\nword = s.slice(spaces[spaces.length - 1], s.length)\\nres.push(word)\\n\\nreturn res.join(\\' \\').toString();\\n\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3778957,
                "title": "adding-spaces-js-create-new-string-simple",
                "content": "```\\n/**\\n * @param {string} s\\n * @param {number[]} spaces\\n * @return {string}\\n */\\nvar addSpaces = function(s, spaces) {\\n    ans = \\'\\'\\n    index = 0\\n    count = spaces[index]\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (i >= count) {\\n            ans += \\' \\' \\n            count = spaces[++index]\\n        }\\n        ans += s[i]\\n    }\\n\\n    return ans\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number[]} spaces\\n * @return {string}\\n */\\nvar addSpaces = function(s, spaces) {\\n    ans = \\'\\'\\n    index = 0\\n    count = spaces[index]\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (i >= count) {\\n            ans += \\' \\' \\n            count = spaces[++index]\\n        }\\n        ans += s[i]\\n    }\\n\\n    return ans\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3765955,
                "title": "space-memory-beats-94-78-of-users-with-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuffer obj=new StringBuffer(s);\\n        for(int i=0;i<spaces.length;i++){\\n            obj.insert(spaces[i]+i,\" \");\\n        }\\n        String x=String.valueOf(obj);\\n        return x;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuffer obj=new StringBuffer(s);\\n        for(int i=0;i<spaces.length;i++){\\n            obj.insert(spaces[i]+i,\" \");\\n        }\\n        String x=String.valueOf(obj);\\n        return x;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3748554,
                "title": "python-very-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        start=0\\n        new=\"\"\\n        for i in spaces:\\n            new+=s[start:i]+\" \"\\n            start=i\\n        new+=s[start:]\\n        return new\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        start=0\\n        new=\"\"\\n        for i in spaces:\\n            new+=s[start:i]+\" \"\\n            start=i\\n        new+=s[start:]\\n        return new\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3742706,
                "title": "o-n-tc-solution-easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\ntake a pointer in spaces.\\nthe spaces vector is already sorted so we can just increment the ptr once visited\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\none pointer\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int ptr=0;\\n        int size=spaces.size();\\n       for(int i=0;i<s.length();i++){\\n           if(ptr!=size&&i==spaces[ptr]){\\n               ans.append(\" \");\\n               ptr++;\\n           }\\n           ans.push_back(s[i]);\\n       }\\n       return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int ptr=0;\\n        int size=spaces.size();\\n       for(int i=0;i<s.length();i++){\\n           if(ptr!=size&&i==spaces[ptr]){\\n               ans.append(\" \");\\n               ptr++;\\n           }\\n           ans.push_back(s[i]);\\n       }\\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3734807,
                "title": "easy-c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int j=0,i=0;\\n        for(i=0;i<s.size();i++){\\n            if(j<spaces.size() && i==spaces[j]){\\n                ans+=\\' \\';\\n                j++;\\n                i--;\\n            }\\n            else{\\n                ans+=s[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int j=0,i=0;\\n        for(i=0;i<s.size();i++){\\n            if(j<spaces.size() && i==spaces[j]){\\n                ans+=\\' \\';\\n                j++;\\n                i--;\\n            }\\n            else{\\n                ans+=s[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3728822,
                "title": "easy-to-understand-simple-c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int ind = 0;\\n        for(int i = 0;i<s.size();i++)\\n        {\\n            if(ind<spaces.size() and i == spaces[ind]){\\n                ans += \\' \\';\\n                ind++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int ind = 0;\\n        for(int i = 0;i<s.size();i++)\\n        {\\n            if(ind<spaces.size() and i == spaces[ind]){\\n                ans += \\' \\';\\n                ind++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3715428,
                "title": "simple-solution-using-stringbuilder",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder();\\n        int cur = 0;\\n        for(int i=0;i<s.length();i++){\\n            if(i == spaces[cur]){\\n                sb.append(\" \");\\n                sb.append(s.charAt(i));\\n                if(cur<spaces.length-1){\\n                    cur++;\\n                }\\n            }\\n            else{\\n                sb.append(s.charAt(i));\\n            }\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder();\\n        int cur = 0;\\n        for(int i=0;i<s.length();i++){\\n            if(i == spaces[cur]){\\n                sb.append(\" \");\\n                sb.append(s.charAt(i));\\n                if(cur<spaces.length-1){\\n                    cur++;\\n                }\\n            }\\n            else{\\n                sb.append(s.charAt(i));\\n            }\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3712870,
                "title": "c-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n        var sb = new StringBuilder();\\n        for(int i = 0, j = 0; i < s.Length; i++) {\\n            if(j == spaces.Length || i != spaces[j])\\n                sb.Append(s[i]);\\n            else {\\n                sb.Append(\" \" + s[i]);\\n                j++;\\n            }\\n        }\\n\\n        return sb.ToString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "String"
                ],
                "code": "```\\npublic class Solution {\\n    public string AddSpaces(string s, int[] spaces) {\\n        var sb = new StringBuilder();\\n        for(int i = 0, j = 0; i < s.Length; i++) {\\n            if(j == spaces.Length || i != spaces[j])\\n                sb.Append(s[i]);\\n            else {\\n                sb.Append(\" \" + s[i]);\\n                j++;\\n            }\\n        }\\n\\n        return sb.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3708449,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        for(int i=0; i<spaces.length; i++) {\\n            sb.insert(spaces[i]+i, \" \");\\n        }\\n        return sb.toString();\\n    }\\n}\\n```\\nIf you made it this far please upvote",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        for(int i=0; i<spaces.length; i++) {\\n            sb.insert(spaces[i]+i, \" \");\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3698845,
                "title": "easy-solution-of-time-complexity-o-n-and-space-complexity-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n=s.size();\\n        string str=\"\";int j=0;int m=spaces.size();\\n        sort(spaces.begin(),spaces.end());\\n        for(int i=0;i<n;i++){\\n            if(j<spaces.size() && i==spaces[j] ){\\n                str+=\\' \\';\\n                str+=s[i];\\n                j++;\\n            }\\n            else{\\n            str+=s[i];}\\n        }\\n        return str;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int n=s.size();\\n        string str=\"\";int j=0;int m=spaces.size();\\n        sort(spaces.begin(),spaces.end());\\n        for(int i=0;i<n;i++){\\n            if(j<spaces.size() && i==spaces[j] ){\\n                str+=\\' \\';\\n                str+=s[i];\\n                j++;\\n            }\\n            else{\\n            str+=s[i];}\\n        }\\n        return str;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3694331,
                "title": "beginner-friendly-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) \\n    {\\n        int n=s.size();\\n        int m=spaces.size();\\n        string ans;\\n        int i=0;\\n        int j=0;\\n        while(i<n)\\n        {\\n            if(j<m && i==spaces[j])\\n            {\\n               ans.push_back(32);\\n                j++;\\n            }\\n                ans.push_back(s[i]);\\n                i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) \\n    {\\n        int n=s.size();\\n        int m=spaces.size();\\n        string ans;\\n        int i=0;\\n        int j=0;\\n        while(i<n)\\n        {\\n            if(j<m && i==spaces[j])\\n            {\\n               ans.push_back(32);\\n                j++;\\n            }\\n                ans.push_back(s[i]);\\n                i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3693511,
                "title": "easy-to-understand-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ss;\\n        int j=0;\\n        int n=spaces.size();\\n        if(spaces.size()==0) return s;\\n        for(int i=0;i<s.size();i++){\\n            if(j<n&&i==spaces[j]){\\n                ss.push_back(\\' \\');\\n                j++;\\n            }\\n            ss.push_back(s[i]);\\n        }\\n        return ss;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ss;\\n        int j=0;\\n        int n=spaces.size();\\n        if(spaces.size()==0) return s;\\n        for(int i=0;i<s.size();i++){\\n            if(j<n&&i==spaces[j]){\\n                ss.push_back(\\' \\');\\n                j++;\\n            }\\n            ss.push_back(s[i]);\\n        }\\n        return ss;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3692922,
                "title": "python-short-beats-90",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        parts = []\\n        prev = 0\\n        for i in spaces:\\n            parts.append(s[prev:i])\\n            prev = i\\n        parts.append(s[prev:])\\n        return \\' \\'.join(parts)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        parts = []\\n        prev = 0\\n        for i in spaces:\\n            parts.append(s[prev:i])\\n            prev = i\\n        parts.append(s[prev:])\\n        return \\' \\'.join(parts)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3691809,
                "title": "c-by-using-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) \\n    {\\n       set<int>st;\\n       string ans=\"\";\\n       for(int i=0;i<spaces.size();i++)\\n       {\\n           st.insert(spaces[i]);\\n       }\\n       for(int i=0;i<s.length();i++)\\n       {\\n           if(st.find(i)!=st.end())\\n           {\\n               ans +=\" \";\\n               ans +=s[i];\\n           }\\n           else{\\n               ans +=s[i];\\n           }\\n       }\\n       return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) \\n    {\\n       set<int>st;\\n       string ans=\"\";\\n       for(int i=0;i<spaces.size();i++)\\n       {\\n           st.insert(spaces[i]);\\n       }\\n       for(int i=0;i<s.length();i++)\\n       {\\n           if(st.find(i)!=st.end())\\n           {\\n               ans +=\" \";\\n               ans +=s[i];\\n           }\\n           else{\\n               ans +=s[i];\\n           }\\n       }\\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3680457,
                "title": "easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n      StringBuilder sb=new StringBuilder();\\n       int i=0,j=0;\\n       int len=s.length();\\n       int n=spaces.length;\\n\\n       while(i<len){\\n           if(j<n && i==spaces[j]){\\n              sb.append(\" \");\\n               j++;\\n           }\\n           sb.append(s.charAt(i));\\n           i++;\\n       }\\n       return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n      StringBuilder sb=new StringBuilder();\\n       int i=0,j=0;\\n       int len=s.length();\\n       int n=spaces.length;\\n\\n       while(i<len){\\n           if(j<n && i==spaces[j]){\\n              sb.append(\" \");\\n               j++;\\n           }\\n           sb.append(s.charAt(i));\\n           i++;\\n       }\\n       return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3661496,
                "title": "beginner-friendly-substring-tc-o-n-sc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int pre=0;\\n        int n = spaces.size();\\n        for(int i=0; i<n; ++i){\\n            ans += s.substr(pre, spaces[i]-pre) + \\' \\';\\n            pre = spaces[i];\\n        }\\n        ans += s.substr(pre);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int pre=0;\\n        int n = spaces.size();\\n        for(int i=0; i<n; ++i){\\n            ans += s.substr(pre, spaces[i]-pre) + \\' \\';\\n            pre = spaces[i];\\n        }\\n        ans += s.substr(pre);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3648788,
                "title": "simple-solution-in-python",
                "content": "\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        l=[]\\n        c=0\\n        for i in spaces:\\n            l.append(s[c:i])\\n            l.append(\" \")\\n            c=i\\n        l.append(s[c:])\\n        return \"\".join(l)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        l=[]\\n        c=0\\n        for i in spaces:\\n            l.append(s[c:i])\\n            l.append(\" \")\\n            c=i\\n        l.append(s[c:])\\n        return \"\".join(l)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3647490,
                "title": "c-useful-for-beginer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int k=0,i=0,j=0;\\n        int n=s.length();\\n        string ans=\"\";\\n        int v=0;\\n        while(j<n && i<spaces.size()){\\n            \\n            int z=spaces[i];\\n            int count=v;\\n            \\n            while(count<z && j<s.length()){\\n                ans+=s[j];\\n                j++;\\n                count++;\\n            }\\n            v=spaces[i];\\n            ans+=\\' \\';\\n            i++;\\n        }\\n        while(j<n)ans+=s[j++];\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int k=0,i=0,j=0;\\n        int n=s.length();\\n        string ans=\"\";\\n        int v=0;\\n        while(j<n && i<spaces.size()){\\n            \\n            int z=spaces[i];\\n            int count=v;\\n            \\n            while(count<z && j<s.length()){\\n                ans+=s[j];\\n                j++;\\n                count++;\\n            }\\n            v=spaces[i];\\n            ans+=\\' \\';\\n            i++;\\n        }\\n        while(j<n)ans+=s[j++];\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3628109,
                "title": "simple-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->First make  ans string , then iterating over S , wherever particular index of S  matches with spaces[ i ] just add an space character there and also continue to add the individual characters of the S at every iteration  .\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n\\n        int length = s.length() ;\\n        int size  = spaces.size() ;\\n        int j = 0 ; \\n\\n        string ans = \"\" ;\\n\\n        for( int i = 0 ; i < length ; i++ ){\\n\\n            if( j < size  &&  i == spaces[ j ] ){\\n\\n                ans.push_back(\\' \\') ;\\n                j++ ;\\n            }\\n\\n            ans.push_back(s[ i ]) ;        \\n\\n        }\\n\\n        return ans  ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n\\n        int length = s.length() ;\\n        int size  = spaces.size() ;\\n        int j = 0 ; \\n\\n        string ans = \"\" ;\\n\\n        for( int i = 0 ; i < length ; i++ ){\\n\\n            if( j < size  &&  i == spaces[ j ] ){\\n\\n                ans.push_back(\\' \\') ;\\n                j++ ;\\n            }\\n\\n            ans.push_back(s[ i ]) ;        \\n\\n        }\\n\\n        return ans  ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3627186,
                "title": "few-simple-steps",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n\\n        ind =  0\\n        \\n        ans = \"\"\\n        for i in range(len(s)):        \\n            if ind < len(spaces) and i == spaces[ind]:\\n                ans += \" \"\\n                ind += 1\\n                ans += s[i]\\n            else:\\n                ans += s[i]\\n        return ans        \\n            \\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n\\n        ind =  0\\n        \\n        ans = \"\"\\n        for i in range(len(s)):        \\n            if ind < len(spaces) and i == spaces[ind]:\\n                ans += \" \"\\n                ind += 1\\n                ans += s[i]\\n            else:\\n                ans += s[i]\\n        return ans        \\n            \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3601470,
                "title": "super-easy-java-solution-easiest-soluton-available-one-pass-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder str = new StringBuilder();\\n        int x = 0;\\n        for(int i=0;i<spaces.length;i++){\\n            str.append(s.substring(x,spaces[i]));\\n            str.append(\" \");\\n            x = spaces[i];\\n        }\\n        str.append(s.substring(x,s.length()));\\n        return str.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder str = new StringBuilder();\\n        int x = 0;\\n        for(int i=0;i<spaces.length;i++){\\n            str.append(s.substring(x,spaces[i]));\\n            str.append(\" \");\\n            x = spaces[i];\\n        }\\n        str.append(s.substring(x,s.length()));\\n        return str.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3593255,
                "title": "python-just-5-lines-easy-to-understand-with-clear-explanation",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Consider this textcase : `s = \"LeetcodeHelpsMeLearn\",spaces = [8,13,15]`\\n- first i am creating a list with characters upto spaces[0] (here 8) ie., `[\\'Leetcode\\']`.\\n- Now i am iterating from spaces[1:].\\n- For every iteration i am appending the characters from spaces[i-1] to spaces[i] ie., Here `8 to 13` lst becomes `[Leetcode, Helps]`.\\n- And then 13 to 15 `lst=[Leetcode, Helps, Me]`\\n- Now there\\'s no more iterations left and the list is incomplete (\\'Learn\\' is missing).So I\\'m gonna append the charecters from spaces[-1] ie., 15 which is \\'Learn\\'.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s, spaces):\\n        lst=[s[:spaces[0]]]\\n        for i in range(1,len(spaces)):\\n            lst.append(s[spaces[i-1]:spaces[i]])\\n        lst.append(s[spaces[-1]:])\\n        return \\' \\'.join(lst)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s, spaces):\\n        lst=[s[:spaces[0]]]\\n        for i in range(1,len(spaces)):\\n            lst.append(s[spaces[i-1]:spaces[i]])\\n        lst.append(s[spaces[-1]:])\\n        return \\' \\'.join(lst)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3593195,
                "title": "c-stringbuilder",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public string AddSpaces(string s, int[] spaces)\\n    {\\n        StringBuilder a = new StringBuilder(s);\\n        int i = 0;\\n        foreach(var space in spaces)\\n        {\\n            a = a.Insert(space + i, \" \");\\n            i++;\\n        }\\n        return a.ToString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public string AddSpaces(string s, int[] spaces)\\n    {\\n        StringBuilder a = new StringBuilder(s);\\n        int i = 0;\\n        foreach(var space in spaces)\\n        {\\n            a = a.Insert(space + i, \" \");\\n            i++;\\n        }\\n        return a.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3591667,
                "title": "typescript-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction addSpaces(s: string, spaces: number[]): string {\\n    let start = 0;\\n    let result = \\'\\';\\n\\n    for (let space of spaces) {\\n        while (start <= space) {\\n            if (start === space) {\\n                result += \\' \\';\\n                break;\\n            } else {\\n                result += s[start];\\n                start++;\\n            }\\n        }\\n    }\\n\\n    while (start < s.length) {\\n        result += s[start];\\n        start++;\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction addSpaces(s: string, spaces: number[]): string {\\n    let start = 0;\\n    let result = \\'\\';\\n\\n    for (let space of spaces) {\\n        while (start <= space) {\\n            if (start === space) {\\n                result += \\' \\';\\n                break;\\n            } else {\\n                result += s[start];\\n                start++;\\n            }\\n        }\\n    }\\n\\n    while (start < s.length) {\\n        result += s[start];\\n        start++;\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589210,
                "title": "java-break-string-based-on-spaces-given-to-optimize-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBreak string based on spaces[], as the the values given are strinctly increasing & none of the value is more than or equal to s.length()\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        int n = s.length();\\n        int spaceIndex = 0;\\n        int start = 0;\\n        StringBuilder sb = new StringBuilder();\\n        for(int space : spaces){\\n            String substr = s.substring(start, start + (space - start));\\n            sb.append(substr).append(\" \");\\n            start = space;\\n        }\\n        sb.append(s.substring(start));\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        int n = s.length();\\n        int spaceIndex = 0;\\n        int start = 0;\\n        StringBuilder sb = new StringBuilder();\\n        for(int space : spaces){\\n            String substr = s.substring(start, start + (space - start));\\n            sb.append(substr).append(\" \");\\n            start = space;\\n        }\\n        sb.append(s.substring(start));\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3586150,
                "title": "cpp-simple-and-begginers-friendly-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int idx=0;\\n        for(int i=0;i<s.size();i++){\\n            if(idx<spaces.size() and spaces[idx]==i){\\n                ans.push_back(\\' \\');\\n                idx++;\\n            }\\n            \\n            ans.push_back(s[i]);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans;\\n        int idx=0;\\n        for(int i=0;i<s.size();i++){\\n            if(idx<spaces.size() and spaces[idx]==i){\\n                ans.push_back(\\' \\');\\n                idx++;\\n            }\\n            \\n            ans.push_back(s[i]);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3580262,
                "title": "string-spacing-insert-spaces-at-given-indices-using-python",
                "content": "# Intuition\\nTo solve this problem, we can iterate over the given indices and divide the string into substrings based on these indices. We insert a space before each index and then concatenate the resulting substrings to form the modified string.\\n\\n# Approach\\n1. Initialize an empty string `res` to store the modified string.\\n2. Set `prev` to 0 to keep track of the previous index.\\n3. Iterate over each index `sp` in the `spaces` list.\\n    - Append the substring from `prev` to `sp` in the original string `s`, followed by a space, to the `res` string.\\n    - Update `prev` to the current index `sp`.\\n4. Append the remaining substring from `prev` to the end of the original string `s` to the `res` string.\\n5. Return the modified string `res`.\\n\\n# Complexity\\n- Time complexity: O(n), where n is the length of the input string `s`.\\n- Space complexity: O(n), where n is the length of the input string `s`.\\n\\n# Code\\n```python\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        res = \"\"\\n        prev = 0\\n\\n        for sp in spaces:\\n            res += (s[prev:sp] + \\' \\')\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "# Intuition\\nTo solve this problem, we can iterate over the given indices and divide the string into substrings based on these indices. We insert a space before each index and then concatenate the resulting substrings to form the modified string.\\n\\n# Approach\\n1. Initialize an empty string `res` to store the modified string.\\n2. Set `prev` to 0 to keep track of the previous index.\\n3. Iterate over each index `sp` in the `spaces` list.\\n    - Append the substring from `prev` to `sp` in the original string `s`, followed by a space, to the `res` string.\\n    - Update `prev` to the current index `sp`.\\n4. Append the remaining substring from `prev` to the end of the original string `s` to the `res` string.\\n5. Return the modified string `res`.\\n\\n# Complexity\\n- Time complexity: O(n), where n is the length of the input string `s`.\\n- Space complexity: O(n), where n is the length of the input string `s`.\\n\\n# Code\\n```python\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        res = \"\"\\n        prev = 0\\n\\n        for sp in spaces:\\n            res += (s[prev:sp] + \\' \\')\\n",
                "codeTag": "Java"
            },
            {
                "id": 3578993,
                "title": "java-easy-solution-using-stringbuilder",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder stringBuilder = new StringBuilder(s);\\n        int counter = 0;\\n        for (int i = 0; i < spaces.length; i++) {\\n            stringBuilder.insert(spaces[i] + counter, \" \");\\n            counter++;\\n        }\\n        return stringBuilder.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder stringBuilder = new StringBuilder(s);\\n        int counter = 0;\\n        for (int i = 0; i < spaces.length; i++) {\\n            stringBuilder.insert(spaces[i] + counter, \" \");\\n            counter++;\\n        }\\n        return stringBuilder.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576168,
                "title": "cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int j=0;\\n        for(int i=0;i<s.size();i++){\\n            if(j<spaces.size() and i==spaces[j]){\\n                ans+=\\' \\';\\n                j++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string ans=\"\";\\n        int j=0;\\n        for(int i=0;i<s.size();i++){\\n            if(j<spaces.size() and i==spaces[j]){\\n                ans+=\\' \\';\\n                j++;\\n            }\\n            ans+=s[i];\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3555127,
                "title": "brute-force-solution-python-easy",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        li=[]\\n        j=0\\n        for i in spaces:\\n            res=\"\"\\n            res+=s[j:i]+\" \"\\n            j=i\\n            li.append(res)\\n        li.append(s[spaces[-1]:])\\n        s=\\'\\'.join(li)\\n        return s\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        li=[]\\n        j=0\\n        for i in spaces:\\n            res=\"\"\\n            res+=s[j:i]+\" \"\\n            j=i\\n            li.append(res)\\n        li.append(s[spaces[-1]:])\\n        s=\\'\\'.join(li)\\n        return s\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3546227,
                "title": "java-solution-using-two-pointers-and-stringbuilder",
                "content": "\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        int indx = 0, n = s.length(), m = spaces.length;\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < n ; i++) {\\n            if (indx < m && i == spaces[indx]) {\\n                sb.append(\\' \\');\\n                indx+=1;\\n            } \\n            sb.append(s.charAt(i)); \\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        int indx = 0, n = s.length(), m = spaces.length;\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < n ; i++) {\\n            if (indx < m && i == spaces[indx]) {\\n                sb.append(\\' \\');\\n                indx+=1;\\n            } \\n            sb.append(s.charAt(i)); \\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3521524,
                "title": "easy-simple-approach-0-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int c=0;\\n        string p=\"\";\\n        int j=0; \\n        if(spaces[0]==0){\\n                 p+=\\' \\';\\n                 j++;\\n            }\\n        for(int i=0; i<s.length(); i++){\\n           p+=s[i];\\n           c++;\\n           if( j<spaces.size() && c==spaces[j]){\\n               p+=\\' \\';\\n               j++;\\n           }\\n        }\\n        return p;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        int c=0;\\n        string p=\"\";\\n        int j=0; \\n        if(spaces[0]==0){\\n                 p+=\\' \\';\\n                 j++;\\n            }\\n        for(int i=0; i<s.length(); i++){\\n           p+=s[i];\\n           c++;\\n           if( j<spaces.size() && c==spaces[j]){\\n               p+=\\' \\';\\n               j++;\\n           }\\n        }\\n        return p;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3498953,
                "title": "fully-detailed-explanation-and-short-code",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach to the problem is simple. Look at this example:-\\nIf I say, for this given example I have to add spaces at [1, 4], the very first thing I\\'ll do is, see the index of the words in string where the spaces will be inserted. Look below,\\n\\nIUsePython\\n0**1**23**4**5678\\n\\nHere, there is going to be a space before \\'U\\' and before \\'P\\'. So, the trick is simple, when the traversing of the string is done, keep track of the current index and check if that current index is same with the 1st element of the list **spaces** or not. In easy terms, in this example, when we are at index 1, we will check with spaces[0] which is also 1, and as they are same, we will add a space to the result string and then add the current item, which is **s[1] = P** in this case. And here, don\\'t forget to increment the poitner index for the \\'spaces\\' list. Again, go on with the traversing. This same condition will appear at index 4, **spaces[1] == 4**, so we will add a space, then add **s[4]** = P. \\nAnd for any other cases, we will simply add the characters in the result string, no need to add spaces.\\n\\nSo, We will get the output:\\n**I Use Python**\\n\\nSee the code, it will be more clear.\\n# Complexity\\n- Time complexity: O(n) \\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> Because we are traversing the string once\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nFor the result string\\n\\n# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        i = 0\\n        res = \"\"\\n        for r in range(len(s)):\\n            if i < len(spaces) and spaces[i] == r:\\n                \\n                res += \" \"\\n                res += s[r]\\n                i += 1\\n            else:\\n                res += s[r]\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\\n        i = 0\\n        res = \"\"\\n        for r in range(len(s)):\\n            if i < len(spaces) and spaces[i] == r:\\n                \\n                res += \" \"\\n                res += s[r]\\n                i += 1\\n            else:\\n                res += s[r]\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3494536,
                "title": "using-string-builder",
                "content": "# Intuition\\nBecause the problem is about modifying a String, String Builder can be helpful, and it does have a method to insert a string at a specify index.\\n\\n# Approach\\n1. Convert String to StringBuilder\\n2. Iterate over $$spaces$$ and use it insert a white space\\n3. We have $$step$$ because after every insertion operation the index of characters greater than that index will change *(We are simply incrementing $$step$$ and it will work in this case because the $$spaces$$ array is in increasing order)*\\n4. convert it back to String and return the result\\n\\n# Complexity\\n- Time complexity:\\nString -> String Builder: $$O(n)$$\\nInsertion in $$SB$$: $$O(n)$$\\nSB -> String: $$O(n)$$\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        int step =0;\\n        for(int i: spaces){\\n            sb.insert( i+step, \" \");\\n            step++;\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb = new StringBuilder(s);\\n        int step =0;\\n        for(int i: spaces){\\n            sb.insert( i+step, \" \");\\n            step++;\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3491946,
                "title": "easy",
                "content": "# Code\\n```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str: \\n        spaces, x = set(spaces),[]\\n        for i, n  in enumerate(s):\\n            if i in spaces:\\n                x.append(\\' \\')\\n                x.append(n)\\n            else:\\n                x.append(n)\\n\\n        return \\'\\'.join(x) \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addSpaces(self, s: str, spaces: List[int]) -> str: \\n        spaces, x = set(spaces),[]\\n        for i, n  in enumerate(s):\\n            if i in spaces:\\n                x.append(\\' \\')\\n                x.append(n)\\n            else:\\n                x.append(n)\\n\\n        return \\'\\'.join(x) \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489121,
                "title": "adding-spaces-to-a-string",
                "content": "----------------- Easy C++ Solution ------------------------\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string str = \"\";\\n        int pos = 0;\\n        for(int i = 0; i < s.length(); ++i){\\n            if(pos < spaces.size() && i == spaces[pos]){\\n                str += \\' \\';\\n                pos++;\\n            }\\n            str += s[i];\\n        }\\n        return str;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addSpaces(string s, vector<int>& spaces) {\\n        string str = \"\";\\n        int pos = 0;\\n        for(int i = 0; i < s.length(); ++i){\\n            if(pos < spaces.size() && i == spaces[pos]){\\n                str += \\' \\';\\n                pos++;\\n            }\\n            str += s[i];\\n        }\\n        return str;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1729651,
                "content": [
                    {
                        "username": "cjtsui",
                        "content": "This feels like an easy question, not a medium one?"
                    },
                    {
                        "username": "sarvar_ai",
                        "content": "It seems That in Python3 or Python  to solve this task  is impossible, due to the \\'Time Limit Exceeded\\'"
                    },
                    {
                        "username": "acme",
                        "content": "With the same code, I got TLE in python 2 but 100% pass in python 3."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "TLE in Python... is it possible to write a solution faster than O(n)?"
                    },
                    {
                        "username": "Saik77",
                        "content": "can you explain why my code doesn\\'t work when I was using the string class later solved using stringbuilder?"
                    },
                    {
                        "username": "NaralaMahesh",
                        "content": "@Saik77 it is because string is immutable in java that is each time you change the existing string it will create a new string which is a waste of space and time complexity "
                    },
                    {
                        "username": "Yash_Gupta89",
                        "content": "it is nice question for a beginner, but challenge is that how we replace the index with spaces .."
                    },
                    {
                        "username": "hypernaag",
                        "content": "What is the difference between s = s + \\' \\' and s +=\\' \\' operators?"
                    },
                    {
                        "username": "arijitdas447284",
                        "content": "[@lokendrasingh071201](/lokendrasingh071201) there is adding time diff\\n"
                    },
                    {
                        "username": "lokendrasingh071201",
                        "content": "they both do the same work there is no diff"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "ok nice question but how am i supposed to know where my string should be split in test case 2?! I don\\'t have a dictionary or something that i could let my code read from or something"
                    }
                ]
            },
            {
                "id": 1746016,
                "content": [
                    {
                        "username": "cjtsui",
                        "content": "This feels like an easy question, not a medium one?"
                    },
                    {
                        "username": "sarvar_ai",
                        "content": "It seems That in Python3 or Python  to solve this task  is impossible, due to the \\'Time Limit Exceeded\\'"
                    },
                    {
                        "username": "acme",
                        "content": "With the same code, I got TLE in python 2 but 100% pass in python 3."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "TLE in Python... is it possible to write a solution faster than O(n)?"
                    },
                    {
                        "username": "Saik77",
                        "content": "can you explain why my code doesn\\'t work when I was using the string class later solved using stringbuilder?"
                    },
                    {
                        "username": "NaralaMahesh",
                        "content": "@Saik77 it is because string is immutable in java that is each time you change the existing string it will create a new string which is a waste of space and time complexity "
                    },
                    {
                        "username": "Yash_Gupta89",
                        "content": "it is nice question for a beginner, but challenge is that how we replace the index with spaces .."
                    },
                    {
                        "username": "hypernaag",
                        "content": "What is the difference between s = s + \\' \\' and s +=\\' \\' operators?"
                    },
                    {
                        "username": "arijitdas447284",
                        "content": "[@lokendrasingh071201](/lokendrasingh071201) there is adding time diff\\n"
                    },
                    {
                        "username": "lokendrasingh071201",
                        "content": "they both do the same work there is no diff"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "ok nice question but how am i supposed to know where my string should be split in test case 2?! I don\\'t have a dictionary or something that i could let my code read from or something"
                    }
                ]
            },
            {
                "id": 1576101,
                "content": [
                    {
                        "username": "cjtsui",
                        "content": "This feels like an easy question, not a medium one?"
                    },
                    {
                        "username": "sarvar_ai",
                        "content": "It seems That in Python3 or Python  to solve this task  is impossible, due to the \\'Time Limit Exceeded\\'"
                    },
                    {
                        "username": "acme",
                        "content": "With the same code, I got TLE in python 2 but 100% pass in python 3."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "TLE in Python... is it possible to write a solution faster than O(n)?"
                    },
                    {
                        "username": "Saik77",
                        "content": "can you explain why my code doesn\\'t work when I was using the string class later solved using stringbuilder?"
                    },
                    {
                        "username": "NaralaMahesh",
                        "content": "@Saik77 it is because string is immutable in java that is each time you change the existing string it will create a new string which is a waste of space and time complexity "
                    },
                    {
                        "username": "Yash_Gupta89",
                        "content": "it is nice question for a beginner, but challenge is that how we replace the index with spaces .."
                    },
                    {
                        "username": "hypernaag",
                        "content": "What is the difference between s = s + \\' \\' and s +=\\' \\' operators?"
                    },
                    {
                        "username": "arijitdas447284",
                        "content": "[@lokendrasingh071201](/lokendrasingh071201) there is adding time diff\\n"
                    },
                    {
                        "username": "lokendrasingh071201",
                        "content": "they both do the same work there is no diff"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "ok nice question but how am i supposed to know where my string should be split in test case 2?! I don\\'t have a dictionary or something that i could let my code read from or something"
                    }
                ]
            },
            {
                "id": 1933818,
                "content": [
                    {
                        "username": "cjtsui",
                        "content": "This feels like an easy question, not a medium one?"
                    },
                    {
                        "username": "sarvar_ai",
                        "content": "It seems That in Python3 or Python  to solve this task  is impossible, due to the \\'Time Limit Exceeded\\'"
                    },
                    {
                        "username": "acme",
                        "content": "With the same code, I got TLE in python 2 but 100% pass in python 3."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "TLE in Python... is it possible to write a solution faster than O(n)?"
                    },
                    {
                        "username": "Saik77",
                        "content": "can you explain why my code doesn\\'t work when I was using the string class later solved using stringbuilder?"
                    },
                    {
                        "username": "NaralaMahesh",
                        "content": "@Saik77 it is because string is immutable in java that is each time you change the existing string it will create a new string which is a waste of space and time complexity "
                    },
                    {
                        "username": "Yash_Gupta89",
                        "content": "it is nice question for a beginner, but challenge is that how we replace the index with spaces .."
                    },
                    {
                        "username": "hypernaag",
                        "content": "What is the difference between s = s + \\' \\' and s +=\\' \\' operators?"
                    },
                    {
                        "username": "arijitdas447284",
                        "content": "[@lokendrasingh071201](/lokendrasingh071201) there is adding time diff\\n"
                    },
                    {
                        "username": "lokendrasingh071201",
                        "content": "they both do the same work there is no diff"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "ok nice question but how am i supposed to know where my string should be split in test case 2?! I don\\'t have a dictionary or something that i could let my code read from or something"
                    }
                ]
            },
            {
                "id": 1844317,
                "content": [
                    {
                        "username": "cjtsui",
                        "content": "This feels like an easy question, not a medium one?"
                    },
                    {
                        "username": "sarvar_ai",
                        "content": "It seems That in Python3 or Python  to solve this task  is impossible, due to the \\'Time Limit Exceeded\\'"
                    },
                    {
                        "username": "acme",
                        "content": "With the same code, I got TLE in python 2 but 100% pass in python 3."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "TLE in Python... is it possible to write a solution faster than O(n)?"
                    },
                    {
                        "username": "Saik77",
                        "content": "can you explain why my code doesn\\'t work when I was using the string class later solved using stringbuilder?"
                    },
                    {
                        "username": "NaralaMahesh",
                        "content": "@Saik77 it is because string is immutable in java that is each time you change the existing string it will create a new string which is a waste of space and time complexity "
                    },
                    {
                        "username": "Yash_Gupta89",
                        "content": "it is nice question for a beginner, but challenge is that how we replace the index with spaces .."
                    },
                    {
                        "username": "hypernaag",
                        "content": "What is the difference between s = s + \\' \\' and s +=\\' \\' operators?"
                    },
                    {
                        "username": "arijitdas447284",
                        "content": "[@lokendrasingh071201](/lokendrasingh071201) there is adding time diff\\n"
                    },
                    {
                        "username": "lokendrasingh071201",
                        "content": "they both do the same work there is no diff"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "ok nice question but how am i supposed to know where my string should be split in test case 2?! I don\\'t have a dictionary or something that i could let my code read from or something"
                    }
                ]
            },
            {
                "id": 1667277,
                "content": [
                    {
                        "username": "cjtsui",
                        "content": "This feels like an easy question, not a medium one?"
                    },
                    {
                        "username": "sarvar_ai",
                        "content": "It seems That in Python3 or Python  to solve this task  is impossible, due to the \\'Time Limit Exceeded\\'"
                    },
                    {
                        "username": "acme",
                        "content": "With the same code, I got TLE in python 2 but 100% pass in python 3."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "TLE in Python... is it possible to write a solution faster than O(n)?"
                    },
                    {
                        "username": "Saik77",
                        "content": "can you explain why my code doesn\\'t work when I was using the string class later solved using stringbuilder?"
                    },
                    {
                        "username": "NaralaMahesh",
                        "content": "@Saik77 it is because string is immutable in java that is each time you change the existing string it will create a new string which is a waste of space and time complexity "
                    },
                    {
                        "username": "Yash_Gupta89",
                        "content": "it is nice question for a beginner, but challenge is that how we replace the index with spaces .."
                    },
                    {
                        "username": "hypernaag",
                        "content": "What is the difference between s = s + \\' \\' and s +=\\' \\' operators?"
                    },
                    {
                        "username": "arijitdas447284",
                        "content": "[@lokendrasingh071201](/lokendrasingh071201) there is adding time diff\\n"
                    },
                    {
                        "username": "lokendrasingh071201",
                        "content": "they both do the same work there is no diff"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "ok nice question but how am i supposed to know where my string should be split in test case 2?! I don\\'t have a dictionary or something that i could let my code read from or something"
                    }
                ]
            },
            {
                "id": 1733306,
                "content": [
                    {
                        "username": "cjtsui",
                        "content": "This feels like an easy question, not a medium one?"
                    },
                    {
                        "username": "sarvar_ai",
                        "content": "It seems That in Python3 or Python  to solve this task  is impossible, due to the \\'Time Limit Exceeded\\'"
                    },
                    {
                        "username": "acme",
                        "content": "With the same code, I got TLE in python 2 but 100% pass in python 3."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "TLE in Python... is it possible to write a solution faster than O(n)?"
                    },
                    {
                        "username": "Saik77",
                        "content": "can you explain why my code doesn\\'t work when I was using the string class later solved using stringbuilder?"
                    },
                    {
                        "username": "NaralaMahesh",
                        "content": "@Saik77 it is because string is immutable in java that is each time you change the existing string it will create a new string which is a waste of space and time complexity "
                    },
                    {
                        "username": "Yash_Gupta89",
                        "content": "it is nice question for a beginner, but challenge is that how we replace the index with spaces .."
                    },
                    {
                        "username": "hypernaag",
                        "content": "What is the difference between s = s + \\' \\' and s +=\\' \\' operators?"
                    },
                    {
                        "username": "arijitdas447284",
                        "content": "[@lokendrasingh071201](/lokendrasingh071201) there is adding time diff\\n"
                    },
                    {
                        "username": "lokendrasingh071201",
                        "content": "they both do the same work there is no diff"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "ok nice question but how am i supposed to know where my string should be split in test case 2?! I don\\'t have a dictionary or something that i could let my code read from or something"
                    }
                ]
            },
            {
                "id": 1660880,
                "content": [
                    {
                        "username": "cjtsui",
                        "content": "This feels like an easy question, not a medium one?"
                    },
                    {
                        "username": "sarvar_ai",
                        "content": "It seems That in Python3 or Python  to solve this task  is impossible, due to the \\'Time Limit Exceeded\\'"
                    },
                    {
                        "username": "acme",
                        "content": "With the same code, I got TLE in python 2 but 100% pass in python 3."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "TLE in Python... is it possible to write a solution faster than O(n)?"
                    },
                    {
                        "username": "Saik77",
                        "content": "can you explain why my code doesn\\'t work when I was using the string class later solved using stringbuilder?"
                    },
                    {
                        "username": "NaralaMahesh",
                        "content": "@Saik77 it is because string is immutable in java that is each time you change the existing string it will create a new string which is a waste of space and time complexity "
                    },
                    {
                        "username": "Yash_Gupta89",
                        "content": "it is nice question for a beginner, but challenge is that how we replace the index with spaces .."
                    },
                    {
                        "username": "hypernaag",
                        "content": "What is the difference between s = s + \\' \\' and s +=\\' \\' operators?"
                    },
                    {
                        "username": "arijitdas447284",
                        "content": "[@lokendrasingh071201](/lokendrasingh071201) there is adding time diff\\n"
                    },
                    {
                        "username": "lokendrasingh071201",
                        "content": "they both do the same work there is no diff"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "ok nice question but how am i supposed to know where my string should be split in test case 2?! I don\\'t have a dictionary or something that i could let my code read from or something"
                    }
                ]
            }
        ]
    }
]