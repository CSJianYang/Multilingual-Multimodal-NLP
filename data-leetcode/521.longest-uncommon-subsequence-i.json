[
    {
        "title": "Longest Uncommon Subsequence I",
        "question_content": "Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.\nAn uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\n\n\tFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).\n\n&nbsp;\nExample 1:\n\nInput: a = \"aba\", b = \"cdc\"\nOutput: 3\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\nNote that \"cdc\" is also a longest uncommon subsequence.\n\nExample 2:\n\nInput: a = \"aaa\", b = \"bbb\"\nOutput: 3\nExplanation:&nbsp;The longest uncommon subsequences are \"aaa\" and \"bbb\".\n\nExample 3:\n\nInput: a = \"aaa\", b = \"aaa\"\nOutput: -1\nExplanation:&nbsp;Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\n\n&nbsp;\nConstraints:\n\n\t1 <= a.length, b.length <= 100\n\ta and b consist of lower-case English letters.",
        "solutions": [
            {
                "id": 99409,
                "title": "java-1-liner",
                "content": "```\\npublic int findLUSlength(String a, String b) {\\n    return a.equals(b) ? -1 : Math.max(a.length(), b.length());\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int findLUSlength(String a, String b) {\\n    return a.equals(b) ? -1 : Math.max(a.length(), b.length());\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 99403,
                "title": "python-simple-explanation",
                "content": "For strings **A**, **B**, when len(**A**) > len(**B**), the longest possible subsequence of either **A** or **B** is **A**, and no subsequence of **B** can be equal to **A**.  Answer: len(**A**).\\n\\nWhen len(**A**) == len(**B**), the only subsequence of **B** equal to **A** is **B**; so as long as **A** != **B**, the answer remains len(**A**).\\n\\nWhen **A** == **B**, any subsequence of **A** can be found in **B** and vice versa, so the answer is -1.\\n\\n```\\ndef findLUSlength(self, A, B):\\n    if A == B:\\n        return -1\\n    return max(len(A), len(B))\\n```",
                "solutionTags": [],
                "code": "```\\ndef findLUSlength(self, A, B):\\n    if A == B:\\n        return -1\\n    return max(len(A), len(B))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1428714,
                "title": "why-does-this-easy-problem-feel-like-hard",
                "content": "Its actually simple. Its the ***Longest Uncommon Subsequence***. \\n\\n***Longest*** - The longest is when you consider the entire string\\'s length. \\n***Uncommon*** - Even if one char is out of place its uncommon.\\n***Subsequence*** - the entire string is also a sub-sequence right?\\n\\nSo if its same string then return -1, else return length of the longest string.\\n\\n``` \\nint findLUSlength(string a, string b) {\\n        if(a==b)\\n            return -1;\\n        return max(a.size(),b.size()); \\n    }\\n```\\n\\nThe description of the question might make you feel like its crazy stuff.\\n\\n",
                "solutionTags": [],
                "code": "``` \\nint findLUSlength(string a, string b) {\\n        if(a==b)\\n            return -1;\\n        return max(a.size(),b.size()); \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 577957,
                "title": "c-1-liner-solution-beats-100-simplified",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99426,
                "title": "intuitive-javascript-solution",
                "content": "```\\nvar findLUSlength = function(a, b) {\\n    // identical strings don't have uncommon subsequence\\n    if (a === b) return -1;\\n    // the longer string itself is the longest uncommon subsequence\\n    else return Math.max(a.length, b.length);\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\nvar findLUSlength = function(a, b) {\\n    // identical strings don't have uncommon subsequence\\n    if (a === b) return -1;\\n    // the longer string itself is the longest uncommon subsequence\\n    else return Math.max(a.length, b.length);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 99434,
                "title": "read-and-think-before-coding-clean-and-clear-java-solution",
                "content": "It's always about the interpretation of the problem.\\n\\nAs long as you realize you can always choose the longer string as the \"Subsequence\", and surely it cannot be the subsequence of the shorter one, the problem becomes a piece of cake.\\n\\nPS: I'm not a big fan of minimizing the lines of code. I think readability is more important :)\\n```\\npublic class Solution {\\n    public int findLUSlength(String a, String b) {\\n        int lenA=a.length(), lenB=b.length();\\n        \\n        if(a.equals(b))  return -1;\\n        else    return Math.max(lenA, lenB);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int findLUSlength(String a, String b) {\\n        int lenA=a.length(), lenB=b.length();\\n        \\n        if(a.equals(b))  return -1;\\n        else    return Math.max(lenA, lenB);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1428989,
                "title": "c-simple-one-liner-solution-0ms-faster-than-100",
                "content": "**Idea:**\\n1. If a == b, there is no subsequence in a that is not in b. return -1.\\n2. If a.size() == b.size() but a != b, return the length of a and b.\\n3. If a.size() != b.size(), we can return the maximum length.\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a == b ? -1 : max(a.size(), b.size());\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a == b ? -1 : max(a.size(), b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1277607,
                "title": "python-two-lines-easy",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:return -1\\n        else:return max(len(a),len(b))\\n```\\n**if you like do upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:return -1\\n        else:return max(len(a),len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3289203,
                "title": "521-time-91-38-and-space-94-99-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Check if both strings a and b are equal. If they are, then there is no uncommon subsequence between them, so return -1.\\n2. If both strings a and b are not equal, then the longest uncommon subsequence would be the longest string among a and b. Because any subsequence of the longer string that is also a subsequence of the shorter string cannot be uncommon. Hence, return the length of the longest string between a and b.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        # Check if both strings are equal\\n        if a == b:\\n            return -1\\n        else:\\n            # Return the length of the longest string between a and b\\n            return max(len(a), len(b))\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        # Check if both strings are equal\\n        if a == b:\\n            return -1\\n        else:\\n            # Return the length of the longest string between a and b\\n            return max(len(a), len(b))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 455516,
                "title": "java-a-stupid-1-line-solution-to-a-stupid-question",
                "content": "```\\npublic int findLUSlength(String a, String b) {\\n\\treturn a.equals(b) ? -1 : Math.max(a.length(), b.length());\\n}\\n```\\n**I know right? I over-thought just like you too!**",
                "solutionTags": [],
                "code": "```\\npublic int findLUSlength(String a, String b) {\\n\\treturn a.equals(b) ? -1 : Math.max(a.length(), b.length());\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3811056,
                "title": "python-3-one-liner-greedy-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a == b else max(len(a), len(b))\\n```",
                "solutionTags": [
                    "Python3",
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a == b else max(len(a), len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1107814,
                "title": "python3-simple-one-liner-solution",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a == b else max(len(a), len(b)) \\n```\\n**If you like the solution, please upvote for this**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a == b else max(len(a), len(b)) \\n```",
                "codeTag": "Java"
            },
            {
                "id": 825771,
                "title": "java-1-line-beats-100-return-longer-string-length-if-they-are-not-equal",
                "content": "```\\n    public int findLUSlength(String a, String b) {\\n        return a.equals(b) ? -1:(Math.max(a.length(), b.length()));\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int findLUSlength(String a, String b) {\\n        return a.equals(b) ? -1:(Math.max(a.length(), b.length()));\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 380325,
                "title": "solution-in-python-3-beats-90-one-line",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n    \\treturn -1 if a == b else max(len(a),len(b))\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n(LeetCode ID)@hotmail.com",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n    \\treturn -1 if a == b else max(len(a),len(b))\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n(LeetCode ID)@hotmail.com",
                "codeTag": "Java"
            },
            {
                "id": 3003988,
                "title": "java-solution-in-o-n",
                "content": "\\n\\n# Approach\\n1. If the strings are the same, return -1, because there is no uncommon subsequence.\\n2. If the strings are different, return the length of the string that is longer, because that string will always be an uncommon subsequence of the other string.\\n\\n# Complexity\\n- Time complexity:\\n1. O(n)\\n\\n- Space complexity:\\n1. O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)){\\n           return -1;\\n       } \\n       return Math.max(a.length,b.length);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)){\\n           return -1;\\n       } \\n       return Math.max(a.length,b.length);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2536402,
                "title": "c-0ms-solution-o-1-self-explanatory-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        \\n        if(a == b) return -1;\\n        \\n        int x = a.length();\\n        int y = b.length();\\n        return (x>y ) ? x : y ; \\n    }\\n\\t//  Pls Upvote and Thanks\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/de354d5b-7072-41b5-ac25-ae799e224b6f_1662404489.8901253.png)\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        \\n        if(a == b) return -1;\\n        \\n        int x = a.length();\\n        int y = b.length();\\n        return (x>y ) ? x : y ; \\n    }\\n\\t//  Pls Upvote and Thanks\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2469965,
                "title": "1-line-100-t-c",
                "content": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```\\n```\\nreturn a.equals(b) ? -1 : Math.max(a.length(), b.length());",
                "solutionTags": [],
                "code": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1177390,
                "title": "rust-accepted",
                "content": "```\\nuse std::cmp;\\n\\nimpl Solution {\\n    pub fn find_lu_slength(a: String, b: String) -> i32 {\\n        if a == b {\\n            return -1\\n        } else {\\n            return cmp::max(a.len() as i32, b.len() as i32)\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::cmp;\\n\\nimpl Solution {\\n    pub fn find_lu_slength(a: String, b: String) -> i32 {\\n        if a == b {\\n            return -1\\n        } else {\\n            return cmp::max(a.len() as i32, b.len() as i32)\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1014958,
                "title": "simple-and-easy-faster-than-98-9",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        l=[a[i:] for i in range(len(a))] #We make a list containing all the substrings of given string a and then compare\\n        for i in l:\\n            if i!=b:\\n                return len(i) if len(i)>len(b) else len(b)\\n        \\n```\\nIf you like, please **UPVOTE**\\nHappy Coding :)",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        l=[a[i:] for i in range(len(a))] #We make a list containing all the substrings of given string a and then compare\\n        for i in l:\\n            if i!=b:\\n                return len(i) if len(i)>len(b) else len(b)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 499219,
                "title": "python-1-line-solution-to-stupid-question",
                "content": "Don\\'t confuse it with the Longest Common Subsequence which needs DP.\\n```Python\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return max(len(a), len(b)) if a != b else -1\\n```",
                "solutionTags": [],
                "code": "```Python\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return max(len(a), len(b)) if a != b else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3289227,
                "title": "c-easy-simple",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b)\\n        {\\n            return -1;\\n        }\\n       return(a.size()>b.size())?a.size():b.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b)\\n        {\\n            return -1;\\n        }\\n       return(a.size()>b.size())?a.size():b.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2985253,
                "title": "2-liner-c-code-easy-understanding",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b)return -1;\\n       return(a.size()>b.size())?a.size():b.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b)return -1;\\n       return(a.size()>b.size())?a.size():b.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2779821,
                "title": "c-easy-100-faster-than-all",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n     int findLUSlength(string a, string b) {\\n        \\n        if(a == b) return -1;\\n        \\n        int x = a.length();\\n        int y = b.length();\\n        return (x>y ) ? x : y ; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     int findLUSlength(string a, string b) {\\n        \\n        if(a == b) return -1;\\n        \\n        int x = a.length();\\n        int y = b.length();\\n        return (x>y ) ? x : y ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2769117,
                "title": "python3-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, A: str, B: str) -> int:\\n        if A == B:\\n            return -1\\n        return max(len(A), len(B))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, A: str, B: str) -> int:\\n        if A == B:\\n            return -1\\n        return max(len(A), len(B))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696277,
                "title": "java",
                "content": "```\\n    public int findLUSlength(String a, String b) {\\n               if (a.equals(b))\\n            return -1;\\n        return Math.max(a.length(),b.length()); \\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public int findLUSlength(String a, String b) {\\n               if (a.equals(b))\\n            return -1;\\n        return Math.max(a.length(),b.length()); \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2471067,
                "title": "javascript-one-line-solution-100",
                "content": "```\\nvar findLUSlength = function(a, b) {\\n    return a === b ? -1 : Math.max(a.length, b.length);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findLUSlength = function(a, b) {\\n    return a === b ? -1 : Math.max(a.length, b.length);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1490997,
                "title": "1-line-c-solution-faster-than-100-c-solutions",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    int findLUSlength(string a, string b)\\n    {\\n        return a==b?-1:max(a.length(),b.length());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int findLUSlength(string a, string b)\\n    {\\n        return a==b?-1:max(a.length(),b.length());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1318309,
                "title": "python-3-3-lines-of-code-1st-try-solution-accepted",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if(a==b):\\n            return -1\\n        return max(len(a),len(b))\\n```\\n\\nWe just have to compare if the two strings are the same or not. If they are, return -1, else return the maximum of the length of the two strings. \\n\\nNote: \"aba\" is different from \"aab\". And \"aab\" and \"aa\" are not uncommon subsequences. So Return max of length if not equal strings.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if(a==b):\\n            return -1\\n        return max(len(a),len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1091410,
                "title": "easy-java-code-easily-understandable",
                "content": "class Solution {\\n    public int findLUSlength(String a, String b) {\\n        int c=a.length();\\n        int d=b.length();\\n        if(a.equals(b))\\n            return -1;\\n        else\\n            return Math.max(c,d);\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int findLUSlength(String a, String b) {\\n        int c=a.length();\\n        int d=b.length();\\n        if(a.equals(b))\\n            return -1;\\n        else\\n            return Math.max(c,d);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 948701,
                "title": "javascript",
                "content": "```\\nvar findLUSlength = function(a, b) {\\n    return a === b ? -1 : Math.max(a.length, b.length);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findLUSlength = function(a, b) {\\n    return a === b ? -1 : Math.max(a.length, b.length);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 513636,
                "title": "concise-c-solution-with-explanation",
                "content": "The key to solving this problem lies in the provided definition of \"Uncommon Subsequence\" which brings us to two possiblities, either the length of the provided strings are equal or they differ in size.\\n\\n* If `len(X) > len(Y)` then `X` can\\'t be a subsequence of `Y`. In this case the longer string is by definition the longest uncommon subsequence.\\n* If `len(X) == len(Y)` but `X != Y` then then `X` can\\'t be a subsequence of `Y`. In this case both strings are \"uncommon subsequences\" in respect to each other.\\n* If `X == Y` then the longest uncommon subsequence doesn\\'t exist.\\n\\n```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        if (a.Equals(b)) return -1;\\n        if (a.Length < b.Length) return b.Length;\\n        return a.Length;\\n    }    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        if (a.Equals(b)) return -1;\\n        if (a.Length < b.Length) return b.Length;\\n        return a.Length;\\n    }    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 391222,
                "title": "it-s-a-perfectly-wrong-discrption",
                "content": "The question asks as simple as the following:\\n```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        if a == b: return -1\\n        return max(len(a), len(b))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        if a == b: return -1\\n        return max(len(a), len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 187431,
                "title": "c-solution-is-as-simple-as-it-gets",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a != b ? std::max(a.size(), b.size()) : -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a != b ? std::max(a.size(), b.size()) : -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99433,
                "title": "c-solution",
                "content": "```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        if(a.Length!=b.Length) {\\n            return a.Length>b.Length?a.Length:b.Length;\\n        }\\n        else if(a.Equals(b)){\\n            return -1;\\n        }\\n        else{\\n            return a.Length;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        if(a.Length!=b.Length) {\\n            return a.Length>b.Length?a.Length:b.Length;\\n        }\\n        else if(a.Equals(b)){\\n            return -1;\\n        }\\n        else{\\n            return a.Length;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3752860,
                "title": "beating-94-52-python-smallest-easiest-understandable-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/4afeb15a-4058-4d43-92fa-8b74adf14fa2_1689136782.9776347.png)\\n\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        if a==b:return -1\\n        else:return max(len(a),len(b))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        if a==b:return -1\\n        else:return max(len(a),len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3715474,
                "title": "java-easy-just-2-lines-approach",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }else{\\n            return Math.max(a.length(),b.length());\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }else{\\n            return Math.max(a.length(),b.length());\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3491742,
                "title": "easy-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3389471,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if (a == b) {\\n            return -1;\\n        }\\n        return max(a.length(), b.length());\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n  def findLUSlength(self, a: str, b: str) -> int:\\n    return -1 if a == b else max(len(a), len(b))\\n```\\n\\n```Java []\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length());\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if (a == b) {\\n            return -1;\\n        }\\n        return max(a.length(), b.length());\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n  def findLUSlength(self, a: str, b: str) -> int:\\n    return -1 if a == b else max(len(a), len(b))\\n```\n```Java []\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3129629,
                "title": "runtime-beats-100-and-memory-beats-87-6-of-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if (a != b){\\n            return max(a.size(), b.size());\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if (a != b){\\n            return max(a.size(), b.size());\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3030999,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        else{\\n            return Math.max(a.length(),b.length());\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        else{\\n            return Math.max(a.length(),b.length());\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2985568,
                "title": "521-longest-uncommon-subsequence-i-java",
                "content": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2821519,
                "title": "longest-uncommon-subsequence-i-java-solution",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int findLUSlength(String a, String b) {\\n        if (a.equals(b))\\n            return -1;\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\npublic class Solution {\\n    public int findLUSlength(String a, String b) {\\n        if (a.equals(b))\\n            return -1;\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2460546,
                "title": "c-beats-100-one-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return (a!=b ? max(a.length(),b.length()) : -1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return (a!=b ? max(a.length(),b.length()) : -1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2359643,
                "title": "99-tc-and-76-sc-easy-python-solution",
                "content": "```\\ndef findLUSlength(self, a: str, b: str) -> int:\\n\\tdef isSub(x, y):\\n\\t\\ti = j = 0\\n\\t\\twhile(i<len(x) and j<len(y)):\\n\\t\\t\\tif(x[i] == y[j]):\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tj += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tj += 1\\n\\t\\treturn i != len(x)\\n\\tt1, t2 = isSub(a, b), isSub(b, a)\\n\\tif(t1 and t2):\\n\\t\\treturn max(len(a), len(b))\\n\\tif(t1):\\n\\t\\treturn len(a)\\n\\tif(t2):\\n\\t\\treturn len(b)\\n\\treturn -1\\n```",
                "solutionTags": [
                    "Python",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\ndef findLUSlength(self, a: str, b: str) -> int:\\n\\tdef isSub(x, y):\\n\\t\\ti = j = 0\\n\\t\\twhile(i<len(x) and j<len(y)):\\n\\t\\t\\tif(x[i] == y[j]):\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tj += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tj += 1\\n\\t\\treturn i != len(x)\\n\\tt1, t2 = isSub(a, b), isSub(b, a)\\n\\tif(t1 and t2):\\n\\t\\treturn max(len(a), len(b))\\n\\tif(t1):\\n\\t\\treturn len(a)\\n\\tif(t2):\\n\\t\\treturn len(b)\\n\\treturn -1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2316053,
                "title": "stupid-question-stupid-answer",
                "content": "\\tint findLUSlength(string a, string b) {\\n\\t\\t\\tif(a==b) return -1;\\n\\t\\t\\treturn max(a.length(),b.length());\\n\\t\\t}",
                "solutionTags": [],
                "code": "\\tint findLUSlength(string a, string b) {\\n\\t\\t\\tif(a==b) return -1;\\n\\t\\t\\treturn max(a.length(),b.length());\\n\\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 2271036,
                "title": "one-linear-code-c-vvvv-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n         if(a==b) return -1;\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n         if(a==b) return -1;\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2205478,
                "title": "cpp-one-liner",
                "content": "```\\nreturn a==b?-1:max(a.length(),b.length());\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nreturn a==b?-1:max(a.length(),b.length());\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1984005,
                "title": "c-simple-1-line-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a==b? -1 : max(a.size(),b.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a==b? -1 : max(a.size(),b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1918796,
                "title": "python-solution-faster-than-84",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a == b:\\n            return -1\\n        if len(a) > len(b):\\n            return len(a)\\n        return len(b)",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a == b:\\n            return -1\\n        if len(a) > len(b):\\n            return len(a)\\n        return len(b)",
                "codeTag": "Java"
            },
            {
                "id": 1913017,
                "title": "c-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if( a == b) {\\n            return -1;\\n        }\\n        if(a.size() == b.size() && a!=b) return a.size();\\n        if(a.size() != b.size() && a!=b) return max(a.size() , b.size());\\n        \\n        return -1;\\n    }\\n   \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if( a == b) {\\n            return -1;\\n        }\\n        if(a.size() == b.size() && a!=b) return a.size();\\n        if(a.size() != b.size() && a!=b) return max(a.size() , b.size());\\n        \\n        return -1;\\n    }\\n   \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1841898,
                "title": "python-simple-solution-with-explanation-28ms",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        #use leetcode provided solution\\n        \\n        #check to see if the strings are identical character for character\\n        bothAreEqual = ( a == b );\\n        \\n        #If they are equal, none can have a substring of the other\\n        if bothAreEqual:\\n            return -1;\\n        \\n        LENGTH_A = len ( a );\\n        LENGTH_B = len ( b );\\n        \\n        #Check to see if the lengths are equal\\n        lengthsAreEqual = ( LENGTH_A == LENGTH_B );\\n        \\n        #If the lengths are equal, and the strings are different\\n        if lengthsAreEqual and not bothAreEqual:\\n            \\n            #Return the length; either one will do\\n            return LENGTH_A;\\n        \\n        #If the lengths are different, use the larger of the two\\n        #As the smaller can not become larger\\n        if not lengthsAreEqual:\\n            return max( LENGTH_A, LENGTH_B );\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        #use leetcode provided solution\\n        \\n        #check to see if the strings are identical character for character\\n        bothAreEqual = ( a == b );\\n        \\n        #If they are equal, none can have a substring of the other\\n        if bothAreEqual:\\n            return -1;\\n        \\n        LENGTH_A = len ( a );\\n        LENGTH_B = len ( b );\\n        \\n        #Check to see if the lengths are equal\\n        lengthsAreEqual = ( LENGTH_A == LENGTH_B );\\n        \\n        #If the lengths are equal, and the strings are different\\n        if lengthsAreEqual and not bothAreEqual:\\n            \\n            #Return the length; either one will do\\n            return LENGTH_A;\\n        \\n        #If the lengths are different, use the larger of the two\\n        #As the smaller can not become larger\\n        if not lengthsAreEqual:\\n            return max( LENGTH_A, LENGTH_B );\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1804591,
                "title": "c-one-line-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n          return (a == b) ? -1 : max(a.size(), b.size());\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n          return (a == b) ? -1 : max(a.size(), b.size());\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1776783,
                "title": "python-simple-and-easy-one-line-solution",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a==b else max(len(a), len(b))\\n```\\n**I hope that you\\'ve found this useful.**\\n**In that case, please upvote. It only motivates me to write more such posts\\uD83D\\uDE03**\\nComment below if you have any queries.",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a==b else max(len(a), len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1741855,
                "title": "overthinking-reached-its-limit",
                "content": "One time I felt so ashamed of myself that I couldn\\'t do an easy-tagged problem.\\nI was thinking if \\na= \"abc\"\\nb= \"aefbcacdef\"\\nshould it be 3 (def) or 5 (acdef). Struggled for an hour and then started reading the comments.\\nMy final sol:\\n\\n```\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        if len(a) != len(b):\\n            return max(len(a), len(b))\\n        if a == b:\\n            return -1\\n        else:\\n            return len(a)\\n```",
                "solutionTags": [],
                "code": "```\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        if len(a) != len(b):\\n            return max(len(a), len(b))\\n        if a == b:\\n            return -1\\n        else:\\n            return len(a)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1712496,
                "title": "c-1-liner-100-faster-0ms-solution",
                "content": "```\\n\\n// check if a == b then return -1\\n// else  return the max length of a & b\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a == b ? -1 : max(a.length(), b.length());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\n// check if a == b then return -1\\n// else  return the max length of a & b\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a == b ? -1 : max(a.length(), b.length());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1589878,
                "title": "easy-c-solution-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a == b)\\n            return -1;\\n        return max(a.length(),b.length());\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a == b)\\n            return -1;\\n        return max(a.length(),b.length());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1470774,
                "title": "one-line-python-solution",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return max(len(a), len(b)) if a!=b else -1",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return max(len(a), len(b)) if a!=b else -1",
                "codeTag": "Java"
            },
            {
                "id": 1467596,
                "title": "java-simple-solution",
                "content": "class Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)){\\n           return -1;\\n       }else{\\n           return Math.max(a.length(),b.length());\\n       }\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)){\\n           return -1;\\n       }",
                "codeTag": "Java"
            },
            {
                "id": 1428682,
                "title": "java-clean-concise-optimal-code-simple-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        \\n        return a.equals (b) ? -1 : Math.max (a.length (), b.length ());\\n    }\\n}\\n```\\n\\nPlease help to **UPVOTE** if this post is useful for you.\\nIf you have any questions, feel free to comment below.\\n\\n**LOVE CODING :)\\nHAPPY CODING :)\\nHAPPY LEARNING :)**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        \\n        return a.equals (b) ? -1 : Math.max (a.length (), b.length ());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1349126,
                "title": "dp-solution-100-fast",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxi(int a,int b){\\n        return (a>b)? a:b;\\n    }\\n    int mini(int a,int b){\\n        return (a<b)? a:b;\\n    }\\n    int checksubseq(string a,string b){\\n        int l1= a.length();\\n        int l2= b.length();\\n        int arr[l1+1][l2+1];\\n        for(int i=0;i<=l1;i++){\\n            for(int j=0;j<=l2;j++){\\n                if(i==0 || j==0)\\n                    arr[i][j]=0;\\n                else if(a[i-1]==b[j-1])\\n                    arr[i][j]= 1 + arr[i-1][j-1];\\n                else\\n                    arr[i][j]= maxi(arr[i-1][j],arr[i][j-1]);\\n            }\\n        }\\n        return arr[l1][l2];\\n    }\\n    int findLUSlength(string a, string b) {\\n        if(a==b)\\n            return -1;\\n        int l= checksubseq(a,b);\\n        int k= mini(a.length(),b.length());\\n        if(l==1)\\n          return maxi(a.length(),b.length());  \\n        if(l==k)\\n            return (maxi(a.length(),b.length())-l);\\n        return maxi(a.length(),b.length());\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxi(int a,int b){\\n        return (a>b)? a:b;\\n    }\\n    int mini(int a,int b){\\n        return (a<b)? a:b;\\n    }\\n    int checksubseq(string a,string b){\\n        int l1= a.length();\\n        int l2= b.length();\\n        int arr[l1+1][l2+1];\\n        for(int i=0;i<=l1;i++){\\n            for(int j=0;j<=l2;j++){\\n                if(i==0 || j==0)\\n                    arr[i][j]=0;\\n                else if(a[i-1]==b[j-1])\\n                    arr[i][j]= 1 + arr[i-1][j-1];\\n                else\\n                    arr[i][j]= maxi(arr[i-1][j],arr[i][j-1]);\\n            }\\n        }\\n        return arr[l1][l2];\\n    }\\n    int findLUSlength(string a, string b) {\\n        if(a==b)\\n            return -1;\\n        int l= checksubseq(a,b);\\n        int k= mini(a.length(),b.length());\\n        if(l==1)\\n          return maxi(a.length(),b.length());  \\n        if(l==k)\\n            return (maxi(a.length(),b.length())-l);\\n        return maxi(a.length(),b.length());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1330042,
                "title": "c-solution",
                "content": "```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        \\n        if(a == b)\\n            return -1;\\n        \\n        return Math.Max(a.Length, b.Length);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        \\n        if(a == b)\\n            return -1;\\n        \\n        return Math.Max(a.Length, b.Length);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1290391,
                "title": "ideas-and-oneliner",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a == b else max(len(a),len(b))\\n\\n# \"aebdc\" cant be formed by another string with len()<=5 except \"aebdc\"\\n\\n  \\n# abbcabb\\n# abbcabbc  \\n\\n# aba   abaaba\\n# abaaba    result => longer string as long as shorter != longer\\n\\n\\n\"\"\"\\nsubsequence of one but not the other.\\n        \\nif string is equal then there is impossible to find uncommon...\\n\\nif unequal then longest subsequence (greedy =  just entire string)\\n\\nlongest subsequnce of any str is entire str\\n\"\"\"\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a == b else max(len(a),len(b))\\n\\n# \"aebdc\" cant be formed by another string with len()<=5 except \"aebdc\"\\n\\n  \\n# abbcabb\\n# abbcabbc  \\n\\n# aba   abaaba\\n# abaaba    result => longer string as long as shorter != longer\\n\\n\\n\"\"\"\\nsubsequence of one but not the other.\\n        \\nif string is equal then there is impossible to find uncommon...\\n\\nif unequal then longest subsequence (greedy =  just entire string)\\n\\nlongest subsequnce of any str is entire str\\n\"\"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1177751,
                "title": "99-02-faster-python-3line-submission",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a!=b:\\n            return max(len(a),len(b))\\n        return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a!=b:\\n            return max(len(a),len(b))\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1132147,
                "title": "c-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) \\n    {\\n        if(a==b) return -1;\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) \\n    {\\n        if(a==b) return -1;\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1072833,
                "title": "very-easy-c-solution-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b){\\n            return -1;\\n        }\\n        else{\\n            return max(a.length(),b.length());\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b){\\n            return -1;\\n        }\\n        else{\\n            return max(a.length(),b.length());\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1022862,
                "title": "python-simple-approach-not-brute-force",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a == b: \\n            return -1\\n        else:\\n            if len(a) == len(b): \\n                return len(a)\\n            else: \\n                return max(len(a), len(b))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a == b: \\n            return -1\\n        else:\\n            if len(a) == len(b): \\n                return len(a)\\n            else: \\n                return max(len(a), len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 851187,
                "title": "c-o-1-space-complexity-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        // the idea is to check for the cases as\\n        if(a.compare(b) == 0) // when both are equal retur -1\\n            return -1;\\n        return max(a.size(), b.size()); // if there are same characters then, return the string which has the largest length\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        // the idea is to check for the cases as\\n        if(a.compare(b) == 0) // when both are equal retur -1\\n            return -1;\\n        return max(a.size(), b.size()); // if there are same characters then, return the string which has the largest length\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 816851,
                "title": "rust-cheapest-best",
                "content": "```\\nimpl Solution {\\n    pub fn find_lu_slength(a: String, b: String) -> i32 {\\n        if a == b {\\n            -1\\n        } else {\\n            a.len().max(b.len()) as i32\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn find_lu_slength(a: String, b: String) -> i32 {\\n        if a == b {\\n            -1\\n        } else {\\n            a.len().max(b.len()) as i32\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 780853,
                "title": "simplest-python-solution",
                "content": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        if a!=b:\\n            return max(len(a),len(b))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        if a!=b:\\n            return max(len(a),len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 765314,
                "title": "c-one-liner-o-1-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        int sa = a.size(), sb = b.size(), mx = max(sa,sb);\\n        return sa!=sb?mx:(a==b?-1:sa);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        int sa = a.size(), sb = b.size(), mx = max(sa,sb);\\n        return sa!=sb?mx:(a==b?-1:sa);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 605952,
                "title": "cpp-simple-1-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a==b?-1:a.length()>b.length()?a.length():b.length();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a==b?-1:a.length()>b.length()?a.length():b.length();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 553990,
                "title": "java-1-line-solution-beats-100",
                "content": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n     return a.equals(b) ? -1 : Math.max(a.length(), b.length());   \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n     return a.equals(b) ? -1 : Math.max(a.length(), b.length());   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 532010,
                "title": "explanation-with-drawings-ruby-100",
                "content": "#### Leetcode: 521.\\n\\nThe key to understanding this task is that `AA` should not be any subsequence of the `A`.\\n\\n\\n![explanation of lc521 with equal stiring and one string will be bigger than other](https://assets.leetcode.com/users/user9697n/image_1583604091.png)\\n\\n\\n```Ruby\\n# 521. Longest Uncommon Subsequence I\\n# https://leetcode.com/problems/longest-uncommon-subsequence-i/\\n# Runtime: 28 ms, faster than 100.00% of Ruby online submissions for Longest Uncommon Subsequence I .\\n# Memory Usage: 9.2 MB, less than 100.00% of Ruby online submissions for Longest Uncommon Subsequence I .\\n# @param {String} a\\n# @param {String} b\\n# @return {Integer}\\ndef find_lu_slength(a, b)\\n    return a.size if a.size > b.size\\n    return -1 if a == b\\n    b.size\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```Ruby\\n# 521. Longest Uncommon Subsequence I\\n# https://leetcode.com/problems/longest-uncommon-subsequence-i/\\n# Runtime: 28 ms, faster than 100.00% of Ruby online submissions for Longest Uncommon Subsequence I .\\n# Memory Usage: 9.2 MB, less than 100.00% of Ruby online submissions for Longest Uncommon Subsequence I .\\n# @param {String} a\\n# @param {String} b\\n# @return {Integer}\\ndef find_lu_slength(a, b)\\n    return a.size if a.size > b.size\\n    return -1 if a == b\\n    b.size\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 500008,
                "title": "python",
                "content": "```python\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if len(b)>len(a):\\n            a,b = b,a\\n        if a in b:\\n            return -1\\n        elif a not in b:\\n            return len(a)\\n        else:\\n            return self.findLUSlength(a[:-1],b)",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if len(b)>len(a):\\n            a,b = b,a\\n        if a in b:\\n            return -1\\n        elif a not in b:\\n            return len(a)\\n        else:\\n            return self.findLUSlength(a[:-1],b)",
                "codeTag": "Java"
            },
            {
                "id": 499955,
                "title": "go-0ms-o-1-solution",
                "content": "```go\\nfunc findLUSlength(a string, b string) int {\\n    if a == b {\\n        return -1\\n    }\\n    if len(a) > len(b) {\\n        return len(a)\\n    }\\n    return len(b)\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc findLUSlength(a string, b string) int {\\n    if a == b {\\n        return -1\\n    }\\n    if len(a) > len(b) {\\n        return len(a)\\n    }\\n    return len(b)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 439980,
                "title": "c-3-liner-100",
                "content": "```\\nif(a.compare(b)==0)\\n            return -1;\\n        return max(a.length(),b.length());",
                "solutionTags": [],
                "code": "```\\nif(a.compare(b)==0)\\n            return -1;\\n        return max(a.length(),b.length());",
                "codeTag": "Unknown"
            },
            {
                "id": 379251,
                "title": "easy-c-solution-0ms-1-line",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Longest Uncommon Subsequence I .\\nMemory Usage: 8.5 MB, less than 20.00% of C++ online submissions for Longest Uncommon Subsequence I .\\n\\n```\\nint findLUSlength(string a, string b) {\\n        return (a != b ? max(a.size(), b.size()) : -1);\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Longest Uncommon Subsequence I .\\nMemory Usage: 8.5 MB, less than 20.00% of C++ online submissions for Longest Uncommon Subsequence I .\\n\\n```\\nint findLUSlength(string a, string b) {\\n        return (a != b ? max(a.size(), b.size()) : -1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 289727,
                "title": "easy-c-100-faster-100-less-memory",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        if((a.size()==b.size())&&(a!=b)) return a.size();\\n        return (a.size()>b.size())? a.size():b.size();\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        if((a.size()==b.size())&&(a!=b)) return a.size();\\n        return (a.size()>b.size())? a.size():b.size();\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 270931,
                "title": "simple-rust",
                "content": "```rust\\npub fn find_lu_slength(a: String, b: String) -> i32 {\\n    if a == b {\\n        -1\\n    } else {\\n        std::cmp::max(a.len(), b.len()) as i32\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\npub fn find_lu_slength(a: String, b: String) -> i32 {\\n    if a == b {\\n        -1\\n    } else {\\n        std::cmp::max(a.len(), b.len()) as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 262074,
                "title": "java-beats-100",
                "content": "if (a.equals(b)) {\\n          return -1;\\n  }else{\\n     return a.length()>=b.length()?a.length():b.length();\\n  }",
                "solutionTags": [],
                "code": "if (a.equals(b)) {\\n          return -1;\\n  }else{\\n     return a.length()>=b.length()?a.length():b.length();\\n  }",
                "codeTag": "Unknown"
            },
            {
                "id": 216730,
                "title": "wtf-just-equality-comparison-the-problem-has-nothing-to-do-with-subsequence",
                "content": "```\\nobject Solution {\\n  def findLUSlength(a: String, b: String): Int = {\\n    if(a.length != b.length) {\\n      return Math.max(a.length, b.length)\\n    }\\n    if(a != b) return a.length\\n    return -1\\n  }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nobject Solution {\\n  def findLUSlength(a: String, b: String): Int = {\\n    if(a.length != b.length) {\\n      return Math.max(a.length, b.length)\\n    }\\n    if(a != b) return a.length\\n    return -1\\n  }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 192686,
                "title": "java-2ms-beats-100",
                "content": "I felt that I had been fooled by solving this question for hours and finally understood the meaning of the topic.   \\nangry!\\n\\n\\t public int findLUSlength(String a, String b) {\\n        if(a.equals(b)) return -1;\\n        else return a.length()>b.length()?a.length():b.length();\\n    }",
                "solutionTags": [],
                "code": "I felt that I had been fooled by solving this question for hours and finally understood the meaning of the topic.   \\nangry!\\n\\n\\t public int findLUSlength(String a, String b) {\\n        if(a.equals(b)) return -1;\\n        else return a.length()>b.length()?a.length():b.length();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 184718,
                "title": "ended-up-wasting-1-hour",
                "content": "I could not clearly understand what was the objective of this question. I ran bunch of test cases and realized we just have to return length of longer string if given strings are not equal. \nI wasted 1 hour of my study time on such problem. \nAnyway, below is my Java solution \n```\npublic int findLUSlength(String a, String b) {\n        if(!a.equals(b)){\n            if(a.length() >= b.length() ){\n                return a.length();\n            }\n            return b.length();\n        }\n        return -1;\n    }\n```",
                "solutionTags": [],
                "code": "```\npublic int findLUSlength(String a, String b) {\n        if(!a.equals(b)){\n            if(a.length() >= b.length() ){\n                return a.length();\n            }\n            return b.length();\n        }\n        return -1;\n    }\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 180405,
                "title": "python-solution",
                "content": "```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        if len(a) != len(b):\\n            return max(len(a), len(b))\\n        if a == b:\\n            return -1\\n        else:\\n            return len(a)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        if len(a) != len(b):\\n            return max(len(a), len(b))\\n        if a == b:\\n            return -1\\n        else:\\n            return len(a)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 139191,
                "title": "so-easy-that-mom-will-never-worries-about-my-study",
                "content": "```python\\nclass Solution:\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        if a == b:\\n            return -1\\n        else:\\n            return max(len(a), len(b))\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        if a == b:\\n            return -1\\n        else:\\n            return max(len(a), len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99429,
                "title": "c-one-line-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a == b?-1:max(a.size(), b.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a == b?-1:max(a.size(), b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99436,
                "title": "o-n-time-o-1-space-c-solution-interesting",
                "content": "```\\nint findLUSlength(string a, string b) {\\n        if(a.size()!=b.size()) return max(a.size(), b.size());\\n        else {\\n            if(a!=b) return b.size();\\n        }\\n        return -1;\\n    }",
                "solutionTags": [],
                "code": "```\\nint findLUSlength(string a, string b) {\\n        if(a.size()!=b.size()) return max(a.size(), b.size());\\n        else {\\n            if(a!=b) return b.size();\\n        }\\n        return -1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 99440,
                "title": "java-solution-1-line",
                "content": "```\\npublic class Solution {\\n    public int findLUSlength(String a, String b) {\\n        return a.equals(b) ? -1 : Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int findLUSlength(String a, String b) {\\n        return a.equals(b) ? -1 : Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4104846,
                "title": "1-line-code-in-python3",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int: \\n        return -1 if a==b else max(len(a),len(b))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int: \\n        return -1 if a==b else max(len(a),len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4085308,
                "title": "java-solution-o-1",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n      if(a.length()>b.length()) return a.length();\\n      if(a.length()<b.length() || !a.equals(b)) return b.length();\\n      return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n      if(a.length()>b.length()) return a.length();\\n      if(a.length()<b.length() || !a.equals(b)) return b.length();\\n      return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4080955,
                "title": "one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        return [-1, max(len(a), len(b))][a != b]\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        \"\"\"\\n        :type a: str\\n        :type b: str\\n        :rtype: int\\n        \"\"\"\\n        return [-1, max(len(a), len(b))][a != b]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063935,
                "title": "java-python3-c-solution-simple",
                "content": "# Intuition\\nIf the strings are equal, return -1.\\nIf the strings are not equal, the Longest Uncommon Subsequence is the longer string.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```Java []\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if (a.equals(b)) {\\n            return -1;\\n        }\\n\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```\\n```Python3 []\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a == b else max(len(a), len(b))\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if (a == b) {\\n            return -1;\\n        }\\n\\n        return max(a.size(), b.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```Java []\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if (a.equals(b)) {\\n            return -1;\\n        }\\n\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```\n```Python3 []\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        return -1 if a == b else max(len(a), len(b))\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if (a == b) {\\n            return -1;\\n        }\\n\\n        return max(a.size(), b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4047222,
                "title": "c-solution-o-1-tc-and-o-1-sc",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n       if(a==b)\\n       {\\n           return -1;\\n       }\\n       if(a.length()>b.length())\\n       {\\n           return a.length();\\n       }\\n       return b.length();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n       if(a==b)\\n       {\\n           return -1;\\n       }\\n       if(a.length()>b.length())\\n       {\\n           return a.length();\\n       }\\n       return b.length();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4041827,
                "title": "java-runtime-0ms",
                "content": "# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.length() != b.length()) {\\n            return (a.length() > b.length()) ? a.length() : b.length();\\n        }\\n\\n        for(int i=0; i<a.length(); i++) {\\n            if(a.charAt(i) != b.charAt(i)) {\\n                return a.length();\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.length() != b.length()) {\\n            return (a.length() > b.length()) ? a.length() : b.length();\\n        }\\n\\n        for(int i=0; i<a.length(); i++) {\\n            if(a.charAt(i) != b.charAt(i)) {\\n                return a.length();\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4039328,
                "title": "simple-solution-swift-0-1-0-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n0(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n0(1)\\n# Code\\n```\\nclass Solution {\\n    func findLUSlength(_ a: String, _ b: String) -> Int {\\n        if a == b {\\n            return -1\\n        }\\n        return a.count > b.count ?  a.count :  b.count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func findLUSlength(_ a: String, _ b: String) -> Int {\\n        if a == b {\\n            return -1\\n        }\\n        return a.count > b.count ?  a.count :  b.count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4016354,
                "title": "best-sollution-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(min(N, M))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n-  O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b))\\n           return -1;\\n        if(a.length()>b.length())\\n           return a.length();\\n        else\\n           return b.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b))\\n           return -1;\\n        if(a.length()>b.length())\\n           return a.length();\\n        else\\n           return b.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011315,
                "title": "beats-100-easy-java-solution-2-lines",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4008482,
                "title": "dart-oneline-solution-beats-100",
                "content": "# Intuition\\nWhen a and b are not equal the whole of a or b can be considered as unique substring, because othe other string does not contan it.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n) for the comparison of strings if those are of the same length.\\n\\n\\n# Code\\n```\\nclass Solution {\\n  int findLUSlength(String a, String b) => a == b? -1: a.length>b.length? a.length: b.length;\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int findLUSlength(String a, String b) => a == b? -1: a.length>b.length? a.length: b.length;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002242,
                "title": "easy-and-simple-with-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        else:\\n           return max(len(a),len(b))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        else:\\n           return max(len(a),len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4001225,
                "title": "100-memory-100-runtime-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param String $a\\n     * @param String $b\\n     * @return Integer\\n     */\\n    function findLUSlength($a, $b) {\\n       if($a == $b){\\n           return -1;\\n       }else{\\n           $max = max(strlen($a),strlen($b));\\n           return $max;\\n       }\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param String $a\\n     * @param String $b\\n     * @return Integer\\n     */\\n    function findLUSlength($a, $b) {\\n       if($a == $b){\\n           return -1;\\n       }else{\\n           $max = max(strlen($a),strlen($b));\\n           return $max;\\n       }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3988727,
                "title": "solved-with-2-lines-of-code-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nfunc findLUSlength(_ a: String, _ b: String) -> Int {\\n    \\n    guard a != b else {return -1}\\n    \\n    return max(a.count, b.count)\\n}\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\nfunc findLUSlength(_ a: String, _ b: String) -> Int {\\n    \\n    guard a != b else {return -1}\\n    \\n    return max(a.count, b.count)\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3985306,
                "title": "beats-100-both-in-time-and-space-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        int n1=a.length();\\n        int n2=b.length();\\n        int mx=-1;\\n        for(int i=0;i<n1;i++){\\n            int j=i,k=0;\\n            while(k<n2){\\n                if(a.charAt(j)==b.charAt(k)) j++;\\n                if(j==n1) break;\\n                k++;\\n            }\\n            if(j!=n1) mx=Math.max(mx,n1-i);\\n        }\\n        for(int i=0;i<n2;i++){\\n            int j=i,k=0;\\n            while(k<n1){\\n                if(b.charAt(j)==a.charAt(k)) j++; \\n                if(j==n2) break;\\n                k++;\\n            }\\n            if(j!=n2) mx=Math.max(mx,n2-i);\\n        }\\n        return mx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        int n1=a.length();\\n        int n2=b.length();\\n        int mx=-1;\\n        for(int i=0;i<n1;i++){\\n            int j=i,k=0;\\n            while(k<n2){\\n                if(a.charAt(j)==b.charAt(k)) j++;\\n                if(j==n1) break;\\n                k++;\\n            }\\n            if(j!=n1) mx=Math.max(mx,n1-i);\\n        }\\n        for(int i=0;i<n2;i++){\\n            int j=i,k=0;\\n            while(k<n1){\\n                if(b.charAt(j)==a.charAt(k)) j++; \\n                if(j==n2) break;\\n                k++;\\n            }\\n            if(j!=n2) mx=Math.max(mx,n2-i);\\n        }\\n        return mx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3982958,
                "title": "simple-c-solution",
                "content": "# Code\\n```\\npublic class Solution\\n{\\n    public int FindLUSlength(string a, string b)\\n    {\\n        if (a == b)\\n        {\\n            return -1;\\n        }\\n\\n        return Math.Max(a.Length, b.Length);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int FindLUSlength(string a, string b)\\n    {\\n        if (a == b)\\n        {\\n            return -1;\\n        }\\n\\n        return Math.Max(a.Length, b.Length);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981243,
                "title": "easy-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)) return -1;\\n       return Math.max(a.length(),b.length()); \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)) return -1;\\n       return Math.max(a.length(),b.length()); \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3943655,
                "title": "java-besto-solution",
                "content": "\\n# Complexity\\n- Time complexity:  $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.contains(b) && b.contains(a)) return -1;\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.contains(b) && b.contains(a)) return -1;\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941188,
                "title": "simple-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b){\\n            return -1;\\n        }\\n        if(a.length()>b.length()){\\n            return a.length();\\n        }\\n        else\\n        return b.length();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b){\\n            return -1;\\n        }\\n        if(a.length()>b.length()){\\n            return a.length();\\n        }\\n        else\\n        return b.length();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941167,
                "title": "simple-solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        int n1 = a.length();\\n        int n2 = b.length();\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        if(n1<n2){\\n            return n2;\\n        }\\n        return n1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        int n1 = a.length();\\n        int n2 = b.length();\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        if(n1<n2){\\n            return n2;\\n        }\\n        return n1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3880309,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return (a == b ? -1 : max(a.length(), b.length()));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return (a == b ? -1 : max(a.length(), b.length()));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3870433,
                "title": "very-easy-jebas-raja",
                "content": "# Intuition:KARUNYA UNIVERSITY::Accenture\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int findLUSlength(String a, String b) \\n    {\\n\\n\\n   if (a.equals(b)) \\n   {\\n      //System.out.println(-1);\\n      return -1; \\n   }\\n   else\\n   {\\n     // System.out.println(Math.max(a.length(), b.length()));\\n     return Math.max(a.length(), b.length());\\n    }\\n\\n  \\n\\n    }\\n}   \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int findLUSlength(String a, String b) \\n    {\\n\\n\\n   if (a.equals(b)) \\n   {\\n      //System.out.println(-1);\\n      return -1; \\n   }\\n   else\\n   {\\n     // System.out.println(Math.max(a.length(), b.length()));\\n     return Math.max(a.length(), b.length());\\n    }\\n\\n  \\n\\n    }\\n}   \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3852895,
                "title": "beats-100-00-easy-javascript-solution-detailled-explication",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwhen there is a different letter, the uncommun subsequence will be immediatelly the longuest string . \\nfor example if you have \\'abcdefg\\' and \\'bbcdefg\\' , then the \\'bbcdefg\\' entire is not the subsequence of \\'abcdefg\\' because the first letter is different.\\nif any different letter, then retur -1.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 0(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {number}\\n */\\nvar findLUSlength = function(a, b) {\\n    let uncommun = 0;\\n    if(a.length !== b.length) return Math.max(a.length, b.length);\\n    for(let i=0; i< a.length; i++) {\\n        if(a[i] !== b[i]) {\\n            uncommun = Math.max(a.length, b.length);\\n            break;\\n        } \\n    }\\n    if(uncommun === 0) return -1\\n    return uncommun;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {number}\\n */\\nvar findLUSlength = function(a, b) {\\n    let uncommun = 0;\\n    if(a.length !== b.length) return Math.max(a.length, b.length);\\n    for(let i=0; i< a.length; i++) {\\n        if(a[i] !== b[i]) {\\n            uncommun = Math.max(a.length, b.length);\\n            break;\\n        } \\n    }\\n    if(uncommun === 0) return -1\\n    return uncommun;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3847188,
                "title": "using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)){\\n           return -1;\\n       } \\n       return Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)){\\n           return -1;\\n       } \\n       return Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3845732,
                "title": "easy-0ms-beats-100-in-runtime-fully-explained",
                "content": "![image.png](https://assets.leetcode.com/users/images/7c4bd7f0-fcef-4645-8852-22fc0cb5ef76_1690864413.8921313.png)\\n\\n\\n# Approach\\nTo find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\\n\\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\\n\\n# Complexity\\n- **Time Complexity:**\\nThe time complexity of the code is $$O(1)$$. This is because the code consists of a single line that performs a few simple operations, and the number of operations does not depend on the length of the input strings a and b. The code only checks if ```a``` and ```b``` are equal and calculates the maximum length between the two strings. These operations can be performed in constant time, regardless of the length of the strings.\\n\\n- **Space Complexity:**\\nThe space complexity of the code is $$O(1)$$ as well. The code only uses a few variables to store the lengths of ```a``` and ```b``` and the result. Since the number of variables used in the code remains constant, the space complexity is constant, irrespective of the length of the input strings.\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        return -1 if a==b else max(len(a), len(b))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```a```\n```b```\n```a```\n```b```\n```a```\n```b```\n```a```\n```b```\n```a```\n```b```\n```a```\n```b```\n```a```\n```b```\n```a```\n```b```\n```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        return -1 if a==b else max(len(a), len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3829223,
                "title": "very-easy-fast-short-java-solution-100-m-s",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if (a.equals(b)) return -1;\\n        else {\\n            return Math.max(a.length(), b.length());\\n        }    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if (a.equals(b)) return -1;\\n        else {\\n            return Math.max(a.length(), b.length());\\n        }    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3829138,
                "title": "c-easy-to-understand-solution-beats-runtime-100-memory-51",
                "content": "![image.png](https://assets.leetcode.com/users/images/cf34678e-3698-4a47-af5b-0472625eeb9e_1690552440.7460065.png)\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        if (a == b)\\n        {\\n            return -1;\\n        }\\n\\n        if (a.Length > b.Length)\\n        {\\n            return a.Length;\\n        }\\n        else\\n        {\\n            return b.Length;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "String"
                ],
                "code": "```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        if (a == b)\\n        {\\n            return -1;\\n        }\\n\\n        if (a.Length > b.Length)\\n        {\\n            return a.Length;\\n        }\\n        else\\n        {\\n            return b.Length;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3826933,
                "title": "simple-solution-by-python-usng-only-if-loops",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nfind length of each string\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nif 2 strings are same return -1\\nelse find the longest string return it . \\nif both strings are same length and not having same values return length of anyone string\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        if len(a)<len(b):\\n            return len(b)\\n        if len(b)< len(a):\\n            return len(a)\\n        if len(b)== len(a):\\n            return len(b)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        if len(a)<len(b):\\n            return len(b)\\n        if len(b)< len(a):\\n            return len(a)\\n        if len(b)== len(a):\\n            return len(b)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3782991,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if (a != b){\\n            int len = max(a.length() , b.length());\\n            return len;\\n        }\\n        \\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if (a != b){\\n            int len = max(a.length() , b.length());\\n            return len;\\n        }\\n        \\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3776914,
                "title": "only-1-liner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a==b?-1:max(a.size(),b.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a==b?-1:max(a.size(),b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3774579,
                "title": "longest-uncommon-subsequence-i",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- check both string , if match no uncommon else return max length string.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- BRUTE & OPTIMAL- check if both string match then no uncommon  string. else return the largest string length.  T-1 S-1\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n - 1\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n- 1\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n       \\n       if(a==b)//find longest UN COMMON subsequence , so if both elements are same then , no uncommon subsequence ,so return -1\\n       {\\n           return -1;\\n       }\\n       return max(a.size(),b.size());//if both are diffferent then return the lentgh of the biggest length string.\\n       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n       \\n       if(a==b)//find longest UN COMMON subsequence , so if both elements are same then , no uncommon subsequence ,so return -1\\n       {\\n           return -1;\\n       }\\n       return max(a.size(),b.size());//if both are diffferent then return the lentgh of the biggest length string.\\n       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3746970,
                "title": "easy-solution-only-string-comparison",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        return max(len(a),len(b))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b:\\n            return -1\\n        return max(len(a),len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3742473,
                "title": "silly-riddle",
                "content": "# Intuition\\nThis seems more like a silly riddle than a coding exercise.\\n\\n# Approach\\nIf A is longer than B, then A itself is a sequence which does not exist in B.\\n\\nIf B is longer than A, ditto.\\n\\nIf the two strings are equal to each other, then they are subsequences of each other.\\n\\nIf not, then each of them is a sequence which does not exist in the other.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        if (a.Length > b.Length) return a.Length;\\n        if (b.Length > a.Length) return b.Length;\\n        if (a.Equals(b)) return -1;\\n        return a.Length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n        if (a.Length > b.Length) return a.Length;\\n        if (b.Length > a.Length) return b.Length;\\n        if (a.Equals(b)) return -1;\\n        return a.Length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3740559,
                "title": "easy-c-solution-easy-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf both the string is equal then there is no longest subsequences.\\nelse return the string length which is longer than other.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a.size()!= b.size()){\\n            return max(a.size(),b.size());\\n        }\\n        if(a != b){\\n            return a.size();\\n        }\\n\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a.size()!= b.size()){\\n            return max(a.size(),b.size());\\n        }\\n        if(a != b){\\n            return a.size();\\n        }\\n\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3730669,
                "title": "java-simple-solution-o-1-100-faster",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    public int findLUSlength(String a, String b) {\\n        if (a.equals(b)) {\\n            return -1;\\n        }\\n\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n\\n    public int findLUSlength(String a, String b) {\\n        if (a.equals(b)) {\\n            return -1;\\n        }\\n\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3702924,
                "title": "c",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b){\\n            return -1;\\n        }\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b){\\n            return -1;\\n        }\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3694904,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3693216,
                "title": "solution-in-java-100ms",
                "content": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.length()>b.length()){\\n            if(a.contains(b+\" \")){\\n                return a.length()-b.length();\\n            }else{\\n                return a.length();\\n            }\\n        }\\n        else if(b.length()>a.length()){\\n            if(b.contains(a+\" \")){\\n                return b.length()-a.length();\\n            }else{\\n                return b.length();\\n            }\\n        }\\n        else if(a.length()==b.length()){\\n            if(a.contains(b)){\\n                return -1;\\n            }\\n        }\\n        return a.length();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.length()>b.length()){\\n            if(a.contains(b+\" \")){\\n                return a.length()-b.length();\\n            }else{\\n                return a.length();\\n            }\\n        }\\n        else if(b.length()>a.length()){\\n            if(b.contains(a+\" \")){\\n                return b.length()-a.length();\\n            }else{\\n                return b.length();\\n            }\\n        }\\n        else if(a.length()==b.length()){\\n            if(a.contains(b)){\\n                return -1;\\n            }\\n        }\\n        return a.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3692369,
                "title": "beats-100-java-o-1-time-complexity-no-dp",
                "content": "# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }else{\\n            return Math.max(a.length(),b.length());\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        if(a.equals(b)){\\n            return -1;\\n        }else{\\n            return Math.max(a.length(),b.length());\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3690040,
                "title": "very-optimise-solution-100-beats-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b){\\n            return -1;\\n        }\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b){\\n            return -1;\\n        }\\n        return max(a.size(),b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3672378,
                "title": "beats-100-python-code-for-longest-uncommon-substring-i",
                "content": "# Upvote if you like it\\n![image.png](https://assets.leetcode.com/users/images/d854a5b9-753f-4fff-93b4-3dcedb58ab7b_1687502091.7174985.png)\\n\\n\\n# Intution:\\nIf both the strings are equal then there are no uncommon substrings hence we return -1\\n\\nIf both the string a and b are not equal then we will return the max length of a and b\\n\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b: return -1\\n        else:return max(len(a),len(b)) if len(a)!=len(b) else len(a)\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a==b: return -1\\n        else:return max(len(a),len(b)) if len(a)!=len(b) else len(a)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3668517,
                "title": "scala-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nobject Solution {\\n    def findLUSlength(a: String, b: String): Int = {\\n      if (a == b) -1\\n      else a.length.max(b.length)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n    def findLUSlength(a: String, b: String): Int = {\\n      if (a == b) -1\\n      else a.length.max(b.length)\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3661123,
                "title": "easy-kotlin-100-100",
                "content": "# Intuition\\nJust try to figure out cases where we can get -1. After a few examples we will notice, that common sequence is possible only in cases when a is subsequence of b or b is subsequence of a. But if we have \"aaa\" & \"a\" for example - the answer will be 3, so the only case we get a -1 is an equivalence of strings.\\n\\n# Complexity\\n- Time complexity: **O(1)**\\n- Space complexity: **O(1)**\\n\\n# Code\\n```\\nimport kotlin.math.max\\n\\nclass Solution {\\n    fun findLUSlength(a: String, b: String): Int {\\n        if (a == b) return -1\\n        return max(a.length, b.length)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nimport kotlin.math.max\\n\\nclass Solution {\\n    fun findLUSlength(a: String, b: String): Int {\\n        if (a == b) return -1\\n        return max(a.length, b.length)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3651464,
                "title": "c-100-faster-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n\\tint findLUSlength(string a, string b) {\\n\\t\\t// Length un equal\\n\\t\\tif(a.size() != b.size()){\\n\\t\\t\\treturn max(a.size(),b.size());\\n\\t\\t}\\n\\n\\t\\t// Length  equal \\n\\t\\tif(a == b){\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t// Length equal\\n\\t\\telse if(a != b){\\n\\t\\t\\treturn a.size();\\n\\t\\t}\\n\\t\\treturn -1;\\n\\t}\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n\\tint findLUSlength(string a, string b) {\\n\\t\\t// Length un equal\\n\\t\\tif(a.size() != b.size()){\\n\\t\\t\\treturn max(a.size(),b.size());\\n\\t\\t}\\n\\n\\t\\t// Length  equal \\n\\t\\tif(a == b){\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t// Length equal\\n\\t\\telse if(a != b){\\n\\t\\t\\treturn a.size();\\n\\t\\t}\\n\\t\\treturn -1;\\n\\t}\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3650911,
                "title": "o-1-solution-to-longest-uncommon-subsequence-i-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b)\\n            return -1;\\n        else\\n            return max(a.length(), b.length());\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/62b3f73b-abe5-4f5b-8cd4-4ca2c4b019e6_1687064734.6890814.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a==b)\\n            return -1;\\n        else\\n            return max(a.length(), b.length());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3606510,
                "title": "best-solution-java-one-line-solve",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        return a.equals(b) ? -1 : Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        return a.equals(b) ? -1 : Math.max(a.length(), b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3597977,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length()); \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n       if(a.equals(b)){\\n            return -1;\\n        }\\n        return Math.max(a.length(),b.length()); \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3592658,
                "title": "super-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        int n = a.length();\\n        int m = b.length();\\n        if(n == m and a != b){\\n            return n;\\n        }\\n        if(n!=m){\\n            return max(n,m);\\n        }\\n\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        int n = a.length();\\n        int m = b.length();\\n        if(n == m and a != b){\\n            return n;\\n        }\\n        if(n!=m){\\n            return max(n,m);\\n        }\\n\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3590500,
                "title": "python-solution",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        if a==b: return -1\\n        return max(len(a), len(b))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findLUSlength(self, a, b):\\n        if a==b: return -1\\n        return max(len(a), len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3590491,
                "title": "javascript-solution",
                "content": "\\n# Code\\n```\\nvar findLUSlength = function(a, b) {\\n    if (a === b) return -1;\\n    return Math.max(a.length, b.length);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findLUSlength = function(a, b) {\\n    if (a === b) return -1;\\n    return Math.max(a.length, b.length);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3579666,
                "title": "javascript-one-line-solution-no-extra-space-used",
                "content": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {number}\\n */\\nvar findLUSlength = function(a, b) {\\n\\n    return a == b ? -1 : a.length > b.length ? a.length : b.length\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {number}\\n */\\nvar findLUSlength = function(a, b) {\\n\\n    return a == b ? -1 : a.length > b.length ? a.length : b.length\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3536038,
                "title": "one-line-solution",
                "content": "# algorithm\\n- if both the strings are equal return -1\\n- otherwise, return the max length\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a==b? -1 : max(a.size(), b.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        return a==b? -1 : max(a.size(), b.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534492,
                "title": "easy-cpp-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a == b)\\n            return -1;\\n        int ans = a.size() > b.size() ? a.size() : b.size();\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        if(a == b)\\n            return -1;\\n        int ans = a.size() > b.size() ? a.size() : b.size();\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3512295,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        \\n        if(a == b)\\n        {\\n            return -1;\\n        }\\n        if(a.size() > b.size())\\n        {\\n            return a.size();\\n        }\\n        else\\n        {\\n            return b.size();\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n        \\n        if(a == b)\\n        {\\n            return -1;\\n        }\\n        if(a.size() > b.size())\\n        {\\n            return a.size();\\n        }\\n        else\\n        {\\n            return b.size();\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3505839,
                "title": "swift-way-of-coding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func findLUSlength(_ a: String, _ b: String) -> Int {\\n        return a == b ? -1 : max(a.count, b.count)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func findLUSlength(_ a: String, _ b: String) -> Int {\\n        return a == b ? -1 : max(a.count, b.count)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3498628,
                "title": "java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        return (a.equals(b))?-1:Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n        return (a.equals(b))?-1:Math.max(a.length(),b.length());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3463105,
                "title": "most-easy-solution-of-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n          if(a.contains(b) && b.contains(a)){\\n              return -1;\\n          }\\n           if(a.length()>b.length()){\\n               return a.length();\\n           }\\n           return b.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLUSlength(String a, String b) {\\n          if(a.contains(b) && b.contains(a)){\\n              return -1;\\n          }\\n           if(a.length()>b.length()){\\n               return a.length();\\n           }\\n           return b.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3462818,
                "title": "easy-and-fast-solution",
                "content": "# Code\\n```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {number}\\n */\\nvar findLUSlength = function(a, b) {\\n    if(a.length === b.length) {\\n      return a === b ? -1 : a.length;\\n    }\\n  \\n    return Math.max(a.length,b.length)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {number}\\n */\\nvar findLUSlength = function(a, b) {\\n    if(a.length === b.length) {\\n      return a === b ? -1 : a.length;\\n    }\\n  \\n    return Math.max(a.length,b.length)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3434309,
                "title": "racist-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a == b:\\n            return -1\\n        return max(len(b),len(a))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n        if a == b:\\n            return -1\\n        return max(len(b),len(a))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3433216,
                "title": "most-easiest-python-solution-using-if-statement",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n\\n        if a ==b:\\n            return (-1)\\n        elif len(a)>len(b):\\n            return (len(a))\\n        else:\\n            return len(b)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findLUSlength(self, a: str, b: str) -> int:\\n\\n        if a ==b:\\n            return (-1)\\n        elif len(a)>len(b):\\n            return (len(a))\\n        else:\\n            return len(b)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3418199,
                "title": "python-3-4-longest-uncommon-subsequence-i",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n  def findLUSlength(self, a: str, b: str) -> int:\\n    return -1 if a == b else max(len(a), len(b))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n  def findLUSlength(self, a: str, b: str) -> int:\\n    return -1 if a == b else max(len(a), len(b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3414886,
                "title": "easy-solution-in-constant-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n       if(a==b)return -1;\\n       else\\n       return max(a.length(),b.length()); \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findLUSlength(string a, string b) {\\n       if(a==b)return -1;\\n       else\\n       return max(a.length(),b.length()); \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406335,
                "title": "a-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n       return a.Length == b.Length ? (a == b ? -1 : a.Length) : Math.Max(a.Length, b.Length);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int FindLUSlength(string a, string b) {\\n       return a.Length == b.Length ? (a == b ? -1 : a.Length) : Math.Max(a.Length, b.Length);\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564563,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1564802,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1565124,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1565347,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1574781,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1565753,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1569345,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1566796,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1565872,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1896968,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1564563,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1564802,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1565124,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1565347,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1574781,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1565753,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1569345,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1566796,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1565872,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1896968,
                "content": [
                    {
                        "username": "zhengkai2001",
                        "content": "I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it's only a 3-point problem.\\n\\nTo the problem contributor: you really got me this time! (if the baffling problem description is intentional)\\n\\nAnyone has the same feeling?"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "Same here brother"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "g0mini",
                        "content": "Please listen to the users. A question like this has, at the time of this message, 188 upvotes and 2997 downvotes.\\n\\nIt would be amazing if some review process could happen to check why certain questions are so much downvoted by the users. They can be fixed either by rephrasing the problem statement, providing better test examples or by removing the questions completely.\\n\\nI\\'m sure we all enjoy learning and practising on this amazing platform so let\\'s try to make it better.\\n\\nWe all want good, challenging and well phrased problems."
                    },
                    {
                        "username": "normalpersontryingtopayrent",
                        "content": "I think it\\'s downvoted so much because it\\'s not so much a problem solving type question but more a \"sit and think of cases\" problem which isn\\'t always trivial and has gotchas"
                    },
                    {
                        "username": "aeolaus",
                        "content": "If this question was phrased properly it would take less than a minute to solve. The purpose of this platform is not to decipher the terrible English of the person who contrived the question. Don\\'t waste your time."
                    },
                    {
                        "username": "bahbahojo",
                        "content": "Seriously? Wtf."
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "\\treturn -1 if a == b else max(len(a), len(b))"
                    },
                    {
                        "username": "Peanut_in_Motion",
                        "content": "[@anjith](/anjith) Python"
                    },
                    {
                        "username": "anjith",
                        "content": "Which language is this? I have never seen a similar syntax before."
                    },
                    {
                        "username": "laprade",
                        "content": "Terrible question. It's not clear from the example what is being asked, and if any more examples were given it would be obvious that it's a trivial question. Please remove from this website."
                    },
                    {
                        "username": "Xcode_Hw",
                        "content": "it waste my time ,i think this problem is stupid "
                    },
                    {
                        "username": "qwl",
                        "content": "This is a boring word game"
                    },
                    {
                        "username": "jiechencn007",
                        "content": "Agree with me."
                    },
                    {
                        "username": "nandopedrosa",
                        "content": "Wow, what a stupid way to ask if both strings are equal. If not, return the longer length."
                    }
                ]
            },
            {
                "id": 1739280,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 1737656,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 1730773,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 1572118,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 1572060,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 1573691,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 1574999,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 1571888,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 1571841,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 2054762,
                "content": [
                    {
                        "username": "ajinkode",
                        "content": "This question is both easy and tricky at the same time!"
                    },
                    {
                        "username": "Keyuan_Huang",
                        "content": "When I see a question with more dislikes than likes, I go straight to the solution lol. It\\'s not worth it"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "A pure brain teaser. DO NOT WASTE any extra time on this fu*king stupid problem"
                    },
                    {
                        "username": "GuangSenNi",
                        "content": "i think the question is ambiguous....why not choose the short one?"
                    },
                    {
                        "username": "therealfakebatman",
                        "content": "I didn\\'t really understand the question. Maybe if you can add few more examples would help."
                    },
                    {
                        "username": "sanyam188",
                        "content": "int findLUSlength(string a, string b) {\\n        if(a==b) return -1;\\n        else return max(a.size(),b.size());\\n    }"
                    },
                    {
                        "username": "190030627_Mothilal",
                        "content": "first check weather the strings are equal or not if equal then return -1\\nif not equal then return length of larger string \\nthat bigger string can not be a subsequence of smaller string so we can return size of large string..\\n"
                    },
                    {
                        "username": "littlex",
                        "content": "a stupid question"
                    },
                    {
                        "username": "felix1024",
                        "content": "This problem is nonsense!"
                    },
                    {
                        "username": "XIZI_leetcode",
                        "content": "I thought the question was clear, but it should be medium instead of easy. And my solution was(in oder to make my thought clear, didn\\'t do optimization):\\n    public int findLUSlength(String a, String b) {\\n        int ans = helper(a, 0, b, 0);\\n        if (ans == 0) return -1;\\n        return ans;\\n    }\\n    private int helper(String a, int i, String b, int j) {\\n        if (a.isEmpty() || b.isEmpty()) return Math.max(i + a.length(), j + b.length());\\n        if (a.charAt(0) == b.charAt(0)) return helper(a.substring(1), i, b.substring(1), j);\\n        return Math.min(helper(a, i, b.substring(1), j + 1), helper(a.substring(1), i + 1, b, j));\\n    }\\nSo if change the test results, this still could become a good question....\\n\\nInput\\na =\\n\"aefawfawfawfaw\"\\nb =\\n\"aefawfeawfwafwaef\"\\nOutput\\n5 (instead of 17)\\n"
                    }
                ]
            },
            {
                "id": 2054478,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            },
            {
                "id": 2052319,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            },
            {
                "id": 2003210,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            },
            {
                "id": 1999396,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            },
            {
                "id": 1995242,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            },
            {
                "id": 1985963,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            },
            {
                "id": 1922533,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            },
            {
                "id": 1919320,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            },
            {
                "id": 1903266,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            },
            {
                "id": 1876133,
                "content": [
                    {
                        "username": "karakiyunlatif",
                        "content": "The question should rather be how many letters are not the same?\n\nPs: don't forget that if all letters are equal it should be -1"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "6.3k Downvotes \\uD83D\\uDC80"
                    },
                    {
                        "username": "greenvolt",
                        "content": "The description of problem is terrible"
                    },
                    {
                        "username": "HasanBasheerStudent",
                        "content": "Actually what is the task... I read it again, again and again. Could not get anything"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Easy 0ms Python logic, To find the length of the longest uncommon subsequence between two strings ```a``` and ```b```, we need to consider the following cases:\n1. If ```a``` and ```b``` are equal, then there is no uncommon subsequence. In this case, we return -1.\n2. If the lengths of ```a``` and ```b``` are different, then the longer string is the longest uncommon subsequence, as it cannot be a subsequence of the shorter string. In this case, we return the length of the longer string.\n3. If the lengths of ```a``` and ```b``` are the same, but the strings themselves are not equal, then either ```a``` or ```b``` is the longest uncommon subsequence. In this case, we return the length of ```a``` (or ```b```) as they are both of equal length and uncommon.\n\n**Here is the Code implementation:**\nhttps://leetcode.com/problems/longest-uncommon-subsequence-i/solutions/3845732/easy-0ms-beats-100-in-runtime-fully-explained/"
                    },
                    {
                        "username": "Singh_harshvardhan",
                        "content": "this problem do not require dp to solve it can be solved by easy way\\nif(a!=b)return max(a.size(),b.size());\\nreturn -1;"
                    },
                    {
                        "username": "Aman__Bhardwaj",
                        "content": "This is for real dude, Leetcode?"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "So who did solved this problem with dp along with me just to see if lcs works here?😅"
                    },
                    {
                        "username": "Cybelitani",
                        "content": "It is important to use the right words in a question. Subsequence means a smaller group of strings in a string (not the whole string). Hence, the word sequence should have been used instead in this question. I think this clarifies what a lot of people have found confusing about this question (and test cases should have been more diverse cases). \n"
                    },
                    {
                        "username": "lagan_sardana",
                        "content": "Wait a second, I have a question. On what basis a question is disliked or liked? Like on this question, there is currently, 6.2k dislikes and only 720 likes, Why?"
                    }
                ]
            }
        ]
    }
]