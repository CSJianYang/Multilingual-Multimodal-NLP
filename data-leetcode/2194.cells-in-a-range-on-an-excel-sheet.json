[
    {
        "title": "Cells in a Range on an Excel Sheet",
        "question_content": "A cell (r, c) of an excel sheet is represented as a string \"<col><row>\" where:\n\n\t<col> denotes the column number c of the cell. It is represented by alphabetical letters.\n\t\n\t\tFor example, the 1st column is denoted by 'A', the 2nd by 'B', the 3rd by 'C', and so on.\n\t\n\t\n\t<row> is the row number r of the cell. The rth row is represented by the integer r.\n\nYou are given a string s&nbsp;in&nbsp;the format \"<col1><row1>:<col2><row2>\", where <col1> represents the column c1, <row1> represents the row r1, <col2> represents the column c2, and <row2> represents the row r2, such that r1 <= r2 and c1 <= c2.\nReturn the list of cells (x, y) such that r1 <= x <= r2 and c1 <= y <= c2. The cells should be represented as&nbsp;strings in the format mentioned above and be sorted in non-decreasing order first by columns and then by rows.\n&nbsp;\nExample 1:\n\nInput: s = \"K1:L2\"\nOutput: [\"K1\",\"K2\",\"L1\",\"L2\"]\nExplanation:\nThe above diagram shows the cells which should be present in the list.\nThe red arrows denote the order in which the cells should be presented.\n\nExample 2:\n\nInput: s = \"A1:F1\"\nOutput: [\"A1\",\"B1\",\"C1\",\"D1\",\"E1\",\"F1\"]\nExplanation:\nThe above diagram shows the cells which should be present in the list.\nThe red arrow denotes the order in which the cells should be presented.\n\n&nbsp;\nConstraints:\n\n\ts.length == 5\n\t'A' <= s[0] <= s[3] <= 'Z'\n\t'1' <= s[1] <= s[4] <= '9'\n\ts consists of uppercase English letters, digits and ':'.",
        "solutions": [
            {
                "id": 1823744,
                "title": "two-loops",
                "content": "**Python**\\n```python\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(c) + chr(r) for c in range(ord(s[0]), ord(s[3]) + 1) for r in range(ord(s[1]), ord(s[4]) + 1)]\\n```\\n**C++**\\n```cpp\\nvector<string> cellsInRange(string s) {\\n    vector<string> res;\\n    for (char c = s[0]; c <= s[3]; ++c)\\n        for (char r = s[1]; r <= s[4]; ++r)\\n            res.push_back({c, r});\\n    return res;\\n}\\n```",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```python\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(c) + chr(r) for c in range(ord(s[0]), ord(s[3]) + 1) for r in range(ord(s[1]), ord(s[4]) + 1)]\\n```\n```cpp\\nvector<string> cellsInRange(string s) {\\n    vector<string> res;\\n    for (char c = s[0]; c <= s[3]; ++c)\\n        for (char r = s[1]; r <= s[4]; ++r)\\n            res.push_back({c, r});\\n    return res;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1823819,
                "title": "java-python-3-simple-code-w-analysis",
                "content": "\\n\\n```java\\n    public List<String> cellsInRange(String s) {\\n        char c1 = s.charAt(0), c2 = s.charAt(3);\\n        char r1 = s.charAt(1), r2 = s.charAt(4);\\n        List<String> cells = new ArrayList<>();\\n        for (char c = c1; c <= c2; ++c) {\\n            for (char r = r1; r <= r2; ++r) {\\n                cells.add(\"\" + c + r);\\n            }\\n        }\\n        return cells;\\n    }\\n```\\n```python\\n    def cellsInRange(self, s: str) -> List[str]:\\n        c1, c2 = ord(s[0]), ord(s[3])\\n        r1, r2 = int(s[1]), int(s[4])\\n        return [chr(c) + str(r) for c in range(c1, c2 + 1) for r in range(r1, r2 + 1)]\\n```\\nPython 3 Two liner: credit to **@stefan4trivia**:\\n```python\\ndef cellsInRange(self, s: str) -> List[str]:\\n    c1, r1, _, c2, r2 = map(ord, s)\\n    return [chr(c) + chr(r) for c in range(c1, c2 + 1) for r in range(r1, r2 + 1)]\\n```\\n**Analysis:**\\n\\nTime: `O((c2 - c1 + 1) * (r2 - r1 + 1))`, space: `O(1)` - excluding return space.",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public List<String> cellsInRange(String s) {\\n        char c1 = s.charAt(0), c2 = s.charAt(3);\\n        char r1 = s.charAt(1), r2 = s.charAt(4);\\n        List<String> cells = new ArrayList<>();\\n        for (char c = c1; c <= c2; ++c) {\\n            for (char r = r1; r <= r2; ++r) {\\n                cells.add(\"\" + c + r);\\n            }\\n        }\\n        return cells;\\n    }\\n```\n```python\\n    def cellsInRange(self, s: str) -> List[str]:\\n        c1, c2 = ord(s[0]), ord(s[3])\\n        r1, r2 = int(s[1]), int(s[4])\\n        return [chr(c) + str(r) for c in range(c1, c2 + 1) for r in range(r1, r2 + 1)]\\n```\n```python\\ndef cellsInRange(self, s: str) -> List[str]:\\n    c1, r1, _, c2, r2 = map(ord, s)\\n    return [chr(c) + chr(r) for c in range(c1, c2 + 1) for r in range(r1, r2 + 1)]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1824082,
                "title": "c-brute-force-clean-and-concise",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        \\n        vector<string>ans;\\n        \\n        for(char ch=s[0];ch<=s[3];ch++)\\n        {\\n            for(int i=s[1]-\\'0\\';i<=s[4]-\\'0\\';i++)\\n            {\\n                string res=\"\";\\n                res+=ch;\\n                res+=to_string(i);\\n                ans.push_back(res);\\n               \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n**Pls upvote the solution if you found helpful, it means a lot.\\nAlso comment down your doubts.\\nHappy Coding : )**\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        \\n        vector<string>ans;\\n        \\n        for(char ch=s[0];ch<=s[3];ch++)\\n        {\\n            for(int i=s[1]-\\'0\\';i<=s[4]-\\'0\\';i++)\\n            {\\n                string res=\"\";\\n                res+=ch;\\n                res+=to_string(i);\\n                ans.push_back(res);\\n               \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1833319,
                "title": "javascript-easy-to-understand-double-loop",
                "content": "The strategy for this problem is straightforward:\\n- we traverse from start letter to end letter\\n- for each letter, we traverse from start number to end number\\n\\nI can\\'t find tricks for this problem, if you find some please comment, thanks.\\n\\nHere\\'s the code I submitted during the contest:\\n\\n```js\\nconst cellsInRange = (s) => {\\n  const [fromLetter, fromNum, , toLetter, toNum] = s;\\n  const ret = [];\\n  for (let l1 = fromLetter.charCodeAt(0), l2 = toLetter.charCodeAt(0); l1 <= l2; ++l1) {\\n    for (let n1 = +fromNum, n2 = +toNum; n1 <= n2; ++n1) {\\n      ret.push(String.fromCharCode(l1) + n1);\\n    }\\n  }\\n  return ret;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst cellsInRange = (s) => {\\n  const [fromLetter, fromNum, , toLetter, toNum] = s;\\n  const ret = [];\\n  for (let l1 = fromLetter.charCodeAt(0), l2 = toLetter.charCodeAt(0); l1 <= l2; ++l1) {\\n    for (let n1 = +fromNum, n2 = +toNum; n1 <= n2; ++n1) {\\n      ret.push(String.fromCharCode(l1) + n1);\\n    }\\n  }\\n  return ret;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3165250,
                "title": "java-simple-solution-runtime-beat-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n**cs= column Start**\\n**ce= column End**\\n**rs= row Start**\\n**re= row End**\\n\\n**c= Column**\\n**r= Row**\\n\\n# Code\\n```\\n\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n\\n    // runtime 1 ms\\n\\n    //cs= Column Start //ce= Column End\\n    //rs= Row Start   //re= Row End\\n    char cs=s.charAt(0),ce=s.charAt(3);\\n    char rs=s.charAt(1),re=s.charAt(4);\\n\\n    List<String> ls=new ArrayList<>();\\n    //c - cell\\n    for(char c=cs;c<=ce;c++){\\n        // r - row\\n        for(char r=rs;r<=re;r++){\\n            ls.add(new String(new char[]{c,r} ));\\n        }\\n    }\\n\\n    return ls;\\n\\n\\n  \\n    }\\n}\\n```\\n![478xve.jpg](https://assets.leetcode.com/users/images/49543455-2edd-4e6e-9e2b-5a6749aae7fd_1676026442.6162713.jpeg)\\n\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\n\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n\\n    // runtime 1 ms\\n\\n    //cs= Column Start //ce= Column End\\n    //rs= Row Start   //re= Row End\\n    char cs=s.charAt(0),ce=s.charAt(3);\\n    char rs=s.charAt(1),re=s.charAt(4);\\n\\n    List<String> ls=new ArrayList<>();\\n    //c - cell\\n    for(char c=cs;c<=ce;c++){\\n        // r - row\\n        for(char r=rs;r<=re;r++){\\n            ls.add(new String(new char[]{c,r} ));\\n        }\\n    }\\n\\n    return ls;\\n\\n\\n  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1823695,
                "title": "easy-solution-in-java-6-lines-of-code",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String str) {\\n        char[] s = str.toCharArray();\\n        List<String> result = new ArrayList<>();\\n        for (char c1 = s[0]; c1 <= s[3]; c1++) {\\n            for (char c2 = s[1]; c2 <= s[4]; c2++) {\\n                result.add(\"\" + c1 + c2);\\n            }\\n        }\\n        return result;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String str) {\\n        char[] s = str.toCharArray();\\n        List<String> result = new ArrayList<>();\\n        for (char c1 = s[0]; c1 <= s[3]; c1++) {\\n            for (char c2 = s[1]; c2 <= s[4]; c2++) {\\n                result.add(\"\" + c1 + c2);\\n            }\\n        }\\n        return result;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1824001,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        result=[]\\n        for i in range(ord(s[0]),ord(s[3])+1):\\n            rs=\"\"\\n            for j in range(int(s[1]),int(s[4])+1):\\n                rs=chr(i)+str(j)\\n                result.append(rs)\\n        return result\\n\\t",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        result=[]\\n        for i in range(ord(s[0]),ord(s[3])+1):\\n            rs=\"\"\\n            for j in range(int(s[1]),int(s[4])+1):\\n                rs=chr(i)+str(j)\\n                result.append(rs)\\n        return result\\n\\t",
                "codeTag": "Java"
            },
            {
                "id": 1823607,
                "title": "python3-1-line",
                "content": "Please pull this [commit](https://github.com/gaosanyong/leetcode/commit/bb5647e856ff11b072f9c51a140e0f243c100171) for solutions of weekly 283.\\n\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(c)+str(r) for c in range(ord(s[0]), ord(s[3])+1) for r in range(int(s[1]), int(s[4])+1)]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(c)+str(r) for c in range(ord(s[0]), ord(s[3])+1) for r in range(int(s[1]), int(s[4])+1)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1823901,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) \\n    {\\n        char ch1 = s[0], ch2 = s[3];              // stroing 0th and 3rd char [A1:B2] , 0th=A , 3rd=B\\n        int in1= s[1]-\\'0\\', in2=s[4]-\\'0\\';          // stroing 1st and 4th int [A1:B2] ,  1st=1 , 4th=2\\n        vector<string> ans;\\n        \\n        for(int i=ch1-\\'A\\'; i<=ch2-\\'A\\'; i++)\\n        {\\n            for(int j=in1; j<=in2; j++)\\n            {\\n                string s= ch1+to_string(j);\\n                ans.push_back(s);\\n            }\\n            ch1 = ch1+1;\\n        }\\n        return ans;  \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) \\n    {\\n        char ch1 = s[0], ch2 = s[3];              // stroing 0th and 3rd char [A1:B2] , 0th=A , 3rd=B\\n        int in1= s[1]-\\'0\\', in2=s[4]-\\'0\\';          // stroing 1st and 4th int [A1:B2] ,  1st=1 , 4th=2\\n        vector<string> ans;\\n        \\n        for(int i=ch1-\\'A\\'; i<=ch2-\\'A\\'; i++)\\n        {\\n            for(int j=in1; j<=in2; j++)\\n            {\\n                string s= ch1+to_string(j);\\n                ans.push_back(s);\\n            }\\n            ch1 = ch1+1;\\n        }\\n        return ans;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3515289,
                "title": "my-cellsinrange",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nfunction parser(s) {\\n\\tlet result = [];\\n\\tlet index = s.indexOf(\\':\\');\\n\\tresult.push(s[0]);\\n\\tresult.push(+s.slice(1, index));\\n\\tresult.push(s[index + 1]);\\n\\tresult.push(+s.slice(index + 2));\\n\\treturn result;\\n}\\n\\nvar cellsInRange = function (s) {\\n\\tlet parserResult = parser(s);\\n\\tlet firstLetter = parserResult[0];\\n\\tlet firstNum = parserResult[1];\\n\\tlet secondLetter = parserResult[2];\\n\\tlet secondNum = parserResult[3];\\n\\tlet alphabet = \\'abcdefghijklmnopqrstuvwxyz\\'.toUpperCase();\\n\\tlet letters = alphabet.slice(alphabet.indexOf(firstLetter), alphabet.indexOf(secondLetter) + 1).split(\\'\\');\\n\\tlet result = [];\\n\\tletters.forEach(letter => {\\n\\t\\tfor (let num = firstNum; num < secondNum + 1; num++) {\\n\\t\\t\\tresult.push(letter + num);\\n\\t\\t}\\n\\t});\\n\\treturn result;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nfunction parser(s) {\\n\\tlet result = [];\\n\\tlet index = s.indexOf(\\':\\');\\n\\tresult.push(s[0]);\\n\\tresult.push(+s.slice(1, index));\\n\\tresult.push(s[index + 1]);\\n\\tresult.push(+s.slice(index + 2));\\n\\treturn result;\\n}\\n\\nvar cellsInRange = function (s) {\\n\\tlet parserResult = parser(s);\\n\\tlet firstLetter = parserResult[0];\\n\\tlet firstNum = parserResult[1];\\n\\tlet secondLetter = parserResult[2];\\n\\tlet secondNum = parserResult[3];\\n\\tlet alphabet = \\'abcdefghijklmnopqrstuvwxyz\\'.toUpperCase();\\n\\tlet letters = alphabet.slice(alphabet.indexOf(firstLetter), alphabet.indexOf(secondLetter) + 1).split(\\'\\');\\n\\tlet result = [];\\n\\tletters.forEach(letter => {\\n\\t\\tfor (let num = firstNum; num < secondNum + 1; num++) {\\n\\t\\t\\tresult.push(letter + num);\\n\\t\\t}\\n\\t});\\n\\treturn result;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1953186,
                "title": "python-solution-with-explanation-of-ascii-ord-chr",
                "content": "**`ord(character)`** gives ascii value of that character\\n**`chr(ascii)`** converts ascii value back to character\\n\\nexample: \\nord(\"a\")=97\\nchr(97)= a\\n\\nord(\"A\")=65\\nchr(65)=A\\n\\n**`fun fact:`** ```Difference between ascii values of lowercase character and its uppercase is 32```\\n\\n```\\n    def cellsInRange(self, s: str) -> List[str]:\\n        \\n        fr=int(s[1])\\n        sr=int(s[4])+1\\n        l=[]\\n        \\n       \\n        for ch in range(ord(s[0]), ord(s[3])+1):\\n            for i in range(fr, sr):\\n                l.append(chr(ch)+str(i))\\n        return l\\n```\\n\\nThis question is quite simple so i am not explaining much. Let me know if you have any doubt.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```Difference between ascii values of lowercase character and its uppercase is 32```\n```\\n    def cellsInRange(self, s: str) -> List[str]:\\n        \\n        fr=int(s[1])\\n        sr=int(s[4])+1\\n        l=[]\\n        \\n       \\n        for ch in range(ord(s[0]), ord(s[3])+1):\\n            for i in range(fr, sr):\\n                l.append(chr(ch)+str(i))\\n        return l\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1888602,
                "title": "1ms-java-solution-no-concatenation",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char sc = s.charAt(0), ec = s.charAt(3);\\n        char sr = s.charAt(1), er = s.charAt(4);\\n        List<String> res = new ArrayList<>();\\n        \\n        for (char i = sc; i <= ec; ++i){\\n            for (char j = sr; j <= er; ++j){\\n                res.add(new String(new char[]{i, j}));\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char sc = s.charAt(0), ec = s.charAt(3);\\n        char sr = s.charAt(1), er = s.charAt(4);\\n        List<String> res = new ArrayList<>();\\n        \\n        for (char i = sc; i <= ec; ++i){\\n            for (char j = sr; j <= er; ++j){\\n                res.add(new String(new char[]{i, j}));\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1824129,
                "title": "javascript-pretty",
                "content": "```\\nconst toCharCode = (char) => char.charCodeAt()\\n\\nvar cellsInRange = function(s) {\\n    const result = []\\n    for(let i = toCharCode(s[0]) ; i <= toCharCode(s[3]) ; i++){\\n        for(let j = s[1] ; j <= s[4] ; j++){\\n            result.push(String.fromCharCode(i) +j)\\n        }\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst toCharCode = (char) => char.charCodeAt()\\n\\nvar cellsInRange = function(s) {\\n    const result = []\\n    for(let i = toCharCode(s[0]) ; i <= toCharCode(s[3]) ; i++){\\n        for(let j = s[1] ; j <= s[4] ; j++){\\n            result.push(String.fromCharCode(i) +j)\\n        }\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2704256,
                "title": "python-simple-solution-faster-than-97-44",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        c1,r1,c2,r2 = s[:1], s[1:2], s[3:4], s[4:]\\n        a=[]\\n        for i in range(ord(c1),ord(c2)+1):\\n            x=chr(i)\\n            for j in range(int(r1),int(r2)+1):\\n                y=x+str(j)\\n                a.append(y)\\n        return a\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        c1,r1,c2,r2 = s[:1], s[1:2], s[3:4], s[4:]\\n        a=[]\\n        for i in range(ord(c1),ord(c2)+1):\\n            x=chr(i)\\n            for j in range(int(r1),int(r2)+1):\\n                y=x+str(j)\\n                a.append(y)\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2591833,
                "title": "c-100-easy-understanding-0m",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string>ans;\\n        char leftChar = s[0];\\n        char rightChar = s[3];\\n        \\n        while (leftChar <= rightChar){\\n            int low = s[1] - \\'0\\', high = s[4] - \\'0\\';\\n            while (low <= high){\\n                ans.push_back(leftChar + to_string(low));\\n                low++;\\n            }\\n            leftChar++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string>ans;\\n        char leftChar = s[0];\\n        char rightChar = s[3];\\n        \\n        while (leftChar <= rightChar){\\n            int low = s[1] - \\'0\\', high = s[4] - \\'0\\';\\n            while (low <= high){\\n                ans.push_back(leftChar + to_string(low));\\n                low++;\\n            }\\n            leftChar++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1826374,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn cells_in_range(s: String) -> Vec<String> {\\n        let sb = s.as_bytes();\\n        (sb[0]..=sb[3])\\n            .flat_map(|col| (sb[1]..=sb[4]).map(move |row| format!(\"{}{}\", col as char, row as char)))\\n            .collect()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn cells_in_range(s: String) -> Vec<String> {\\n        let sb = s.as_bytes();\\n        (sb[0]..=sb[3])\\n            .flat_map(|col| (sb[1]..=sb[4]).map(move |row| format!(\"{}{}\", col as char, row as char)))\\n            .collect()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1823693,
                "title": "easy-simulation-with-comments",
                "content": "**Alogorithm**:\\nWe have to iterate from `col1 to col2` **letters** and for every letter we just have to traverse from `row1 to row2` **number.**\\nIn this way we will get our answer in **sorted order** automatically.\\n\\n**C++**\\n    \\n\\tvector<string> cellsInRange(string s){\\n        //result answer\\n        vector<string> res;\\n        \\n        //extract columns and rows\\n        int col1= s[0]-\\'A\\' , col2= s[3]-\\'A\\';\\n        int row1= s[1]-\\'0\\' , row2= s[4]-\\'0\\';\\n        \\n        //keep incrementing the character from c1->c2\\n        for(;col1<=col2;col1++){\\n           char letter= col1+\\'A\\'; \\n           //for every charcter traverse from r1->r2 \\n           for(int i=row1;i<=row2;i++){\\n               string p=\"\";\\n               char r= i+\\'0\\';     //get corresponding column in terms of character\\n               p+=letter;         //append current column-> letter\\n               p+=r;              //append current row\\n               res.push_back(p);  //put string in res vector\\n           } \\n        }\\n        return res;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "**Alogorithm**:\\nWe have to iterate from `col1 to col2` **letters** and for every letter we just have to traverse from `row1 to row2` **number.**\\nIn this way we will get our answer in **sorted order** automatically.\\n\\n**C++**\\n    \\n\\tvector<string> cellsInRange(string s){\\n        //result answer\\n        vector<string> res;\\n        \\n        //extract columns and rows\\n        int col1= s[0]-\\'A\\' , col2= s[3]-\\'A\\';\\n        int row1= s[1]-\\'0\\' , row2= s[4]-\\'0\\';\\n        \\n        //keep incrementing the character from c1->c2\\n        for(;col1<=col2;col1++){\\n           char letter= col1+\\'A\\'; \\n           //for every charcter traverse from r1->r2 \\n           for(int i=row1;i<=row2;i++){\\n               string p=\"\";\\n               char r= i+\\'0\\';     //get corresponding column in terms of character\\n               p+=letter;         //append current column-> letter\\n               p+=r;              //append current row\\n               res.push_back(p);  //put string in res vector\\n           } \\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1823666,
                "title": "java-straightforward",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans = new ArrayList<String>();\\n        for(char i = \\'A\\' ; i <= \\'Z\\'; ++i) {\\n            for(char j = \\'1\\'; j <= \\'9\\'; ++j) {\\n                if(i >= s.charAt(0) && i <= s.charAt(3) && j >= s.charAt(1) && j <= s.charAt(4)){\\n                    ans.add(Character.toString(i) + Character.toString(j));\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans = new ArrayList<String>();\\n        for(char i = \\'A\\' ; i <= \\'Z\\'; ++i) {\\n            for(char j = \\'1\\'; j <= \\'9\\'; ++j) {\\n                if(i >= s.charAt(0) && i <= s.charAt(3) && j >= s.charAt(1) && j <= s.charAt(4)){\\n                    ans.add(Character.toString(i) + Character.toString(j));\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3779607,
                "title": "python-3-two-loops-1-line-bonus-beats-97",
                "content": "```python3 []\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        res = []\\n        for ch in range(ord(s[0]), ord(s[3])+1):\\n            for i in range(int(s[1]), int(s[4])+1):\\n                res.append(f\\'{chr(ch)}{i}\\')\\n        return res\\n```\\n```python3 []\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [f\\'{chr(ch)}{i}\\' for ch in range(ord(s[0]), ord(s[3])+1) for i in range(int(s[1]), int(s[4])+1)]\\n```\\n![Screenshot 2023-07-17 at 22.02.52.png](https://assets.leetcode.com/users/images/417eaef4-6451-4ffa-9cbe-d39867ab6f5c_1689620605.0786376.png)\\n\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python3 []\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        res = []\\n        for ch in range(ord(s[0]), ord(s[3])+1):\\n            for i in range(int(s[1]), int(s[4])+1):\\n                res.append(f\\'{chr(ch)}{i}\\')\\n        return res\\n```\n```python3 []\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [f\\'{chr(ch)}{i}\\' for ch in range(ord(s[0]), ord(s[3])+1) for i in range(int(s[1]), int(s[4])+1)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3394861,
                "title": "c-and-c-very-easy-solution",
                "content": "\\n```C# []\\npublic class Solution {\\n    public IList<string> CellsInRange(string s) {\\n        List<string> res=new List<string>();\\n    for (char c = s[0]; c <= s[3]; ++c)\\n        for (char r = s[1]; r <= s[4]; ++r)\\n            res.Add($\"{c}{r}\");\\n    return res;\\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n    vector<string> res;\\n    for (char c = s[0]; c <= s[3]; ++c)\\n        for (char r = s[1]; r <= s[4]; ++r)\\n            res.push_back({c, r});\\n    return res;\\n    }     \\n};\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "C#",
                    "String"
                ],
                "code": "```C# []\\npublic class Solution {\\n    public IList<string> CellsInRange(string s) {\\n        List<string> res=new List<string>();\\n    for (char c = s[0]; c <= s[3]; ++c)\\n        for (char r = s[1]; r <= s[4]; ++r)\\n            res.Add($\"{c}{r}\");\\n    return res;\\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n    vector<string> res;\\n    for (char c = s[0]; c <= s[3]; ++c)\\n        for (char r = s[1]; r <= s[4]; ++r)\\n            res.push_back({c, r});\\n    return res;\\n    }     \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1946295,
                "title": "easy-python-for-loop",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        a,b=map(str,s.split(\":\"))\\n        m=[]\\n        r=range(ord(a[0]),ord(b[0])+1)\\n        for i in r:\\n            for j in range(int(a[-1]),int(b[-1])+1):\\n                m.append(chr(i)+str(j))\\n        return m\\n            \\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        a,b=map(str,s.split(\":\"))\\n        m=[]\\n        r=range(ord(a[0]),ord(b[0])+1)\\n        for i in r:\\n            for j in range(int(a[-1]),int(b[-1])+1):\\n                m.append(chr(i)+str(j))\\n        return m\\n            \\n",
                "codeTag": "Java"
            },
            {
                "id": 3764784,
                "title": "easiest-c-solution-o-n-2-time-complexity-beats-90",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string>ans; \\n        for(char ch = s[0]; ch <= s[3]; ch++){\\n            for(int i = s[1]-\\'0\\'; i <= s[4]-\\'0\\'; i++){\\n                ans.push_back(ch + to_string(i));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string>ans; \\n        for(char ch = s[0]; ch <= s[3]; ch++){\\n            for(int i = s[1]-\\'0\\'; i <= s[4]-\\'0\\'; i++){\\n                ans.push_back(ch + to_string(i));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3758952,
                "title": "beats-100-simple-easy-to-understand-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        ArrayList<String> ans = new ArrayList<>();\\n        \\n        char c1 = s.charAt(0);\\n        char r1 = s.charAt(1);\\n        char c2 = s.charAt(3);\\n        char r2 = s.charAt(4);\\n\\n        for(char i = c1; i<=c2; i++){\\n            for(char j = r1; j<= r2; j++){\\n                StringBuilder str = new StringBuilder();\\n                str.append(i).append(j);\\n                ans.add(str.toString());\\n            }\\n\\n        }\\n\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        ArrayList<String> ans = new ArrayList<>();\\n        \\n        char c1 = s.charAt(0);\\n        char r1 = s.charAt(1);\\n        char c2 = s.charAt(3);\\n        char r2 = s.charAt(4);\\n\\n        for(char i = c1; i<=c2; i++){\\n            for(char j = r1; j<= r2; j++){\\n                StringBuilder str = new StringBuilder();\\n                str.append(i).append(j);\\n                ans.add(str.toString());\\n            }\\n\\n        }\\n\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3442027,
                "title": "cells-in-a-range-on-an-excel-sheet-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        int i, j;\\n        vector<string> ans;\\n        string temp = \"\";\\n        string temp2 = \"\";\\n        \\n        for(i=s[0] ; i<=s[3] ; i++)\\n        {\\n            temp += (char)(i);\\n            for(j=s[1] ; j<=s[4] ; j++)\\n            {\\n                temp2 += temp;\\n                temp2 += (char)(j);\\n                ans.push_back(temp2);\\n                temp2.clear();\\n            }\\n            temp.clear();\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/5d773661-3c5c-46c6-9c6a-9b1c9f42b2d0_1682613052.7181225.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        int i, j;\\n        vector<string> ans;\\n        string temp = \"\";\\n        string temp2 = \"\";\\n        \\n        for(i=s[0] ; i<=s[3] ; i++)\\n        {\\n            temp += (char)(i);\\n            for(j=s[1] ; j<=s[4] ; j++)\\n            {\\n                temp2 += temp;\\n                temp2 += (char)(j);\\n                ans.push_back(temp2);\\n                temp2.clear();\\n            }\\n            temp.clear();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2863323,
                "title": "java-char-array-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> answerList = new ArrayList<>();\\n        int startLetter, startNumber, endLetter, endNumber;\\n        char[] charArray = s.toCharArray();\\n        startLetter = charArray[0];\\n        startNumber = Character.getNumericValue(charArray[1]);\\n        endLetter = charArray[3];\\n        endNumber = Character.getNumericValue(charArray[4]);\\n        for(int i = startLetter; i <= endLetter; i++) {\\n            String letter = String.valueOf((char) i);\\n            for (int j = startNumber; j <= endNumber; j++) {\\n                answerList.add(letter + j);\\n            }\\n        }\\n        return answerList;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> answerList = new ArrayList<>();\\n        int startLetter, startNumber, endLetter, endNumber;\\n        char[] charArray = s.toCharArray();\\n        startLetter = charArray[0];\\n        startNumber = Character.getNumericValue(charArray[1]);\\n        endLetter = charArray[3];\\n        endNumber = Character.getNumericValue(charArray[4]);\\n        for(int i = startLetter; i <= endLetter; i++) {\\n            String letter = String.valueOf((char) i);\\n            for (int j = startNumber; j <= endNumber; j++) {\\n                answerList.add(letter + j);\\n            }\\n        }\\n        return answerList;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2823458,
                "title": "simplest-detailed-approach-in-python3",
                "content": "# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        alpha = \\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\'\\n\\n        # Rows\\n        r1 = int(s[1])\\n        r2 = int(s[-1])\\n\\n        # Columns\\n        c1 = s[0]\\n        c2 = s[-2]\\n\\n        op = []\\n        for col in range(alpha.index(c1), alpha.index(c2)+1):\\n            for row in range(r1, r2+1):\\n                op.append(alpha[col] + str(row))\\n        return op\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        alpha = \\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\'\\n\\n        # Rows\\n        r1 = int(s[1])\\n        r2 = int(s[-1])\\n\\n        # Columns\\n        c1 = s[0]\\n        c2 = s[-2]\\n\\n        op = []\\n        for col in range(alpha.index(c1), alpha.index(c2)+1):\\n            for row in range(r1, r2+1):\\n                op.append(alpha[col] + str(row))\\n        return op\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2368874,
                "title": "95-ms-faster-than-65-68-of-javascript",
                "content": "```\\nvar cellsInRange = function (s) {\\n    let arr = s.split(\":\");\\n    let textStart = arr[0];\\n    let charstart = textStart.charCodeAt(0);\\n    let textEnd = arr[arr.length - 1];\\n    let charend = textEnd.charCodeAt(0);\\n    let RowLen = arr[arr.length - 1][1];\\n    let res = [];\\n    for (let i = charstart; i <= charend; i++) {\\n        let letter = String.fromCharCode(i);\\n        for (let j = arr[0][1]; j <= RowLen; j++) {\\n            res.push(letter + j);\\n        }\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar cellsInRange = function (s) {\\n    let arr = s.split(\":\");\\n    let textStart = arr[0];\\n    let charstart = textStart.charCodeAt(0);\\n    let textEnd = arr[arr.length - 1];\\n    let charend = textEnd.charCodeAt(0);\\n    let RowLen = arr[arr.length - 1][1];\\n    let res = [];\\n    for (let i = charstart; i <= charend; i++) {\\n        let letter = String.fromCharCode(i);\\n        for (let j = arr[0][1]; j <= RowLen; j++) {\\n            res.push(letter + j);\\n        }\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1823707,
                "title": "easy-c-o-n-2-solution",
                "content": "\\n        char a=s[0];\\n        char b=s[3];\\n        char c=s[1];\\n        char d=s[4];\\n        vector<string>res;\\n        for(char i=a; i<=b; i++){\\n            for(char x=c; x<=d; x++){\\n                string temp;\\n                temp+=i;\\n                temp+=x;\\n                res.push_back(temp);\\n            }\\n        }\\n        return res;",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n        char a=s[0];\\n        char b=s[3];\\n        char c=s[1];\\n        char d=s[4];\\n        vector<string>res;\\n        for(char i=a; i<=b; i++){\\n            for(char x=c; x<=d; x++){\\n                string temp;\\n                temp+=i;\\n                temp+=x;\\n                res.push_back(temp);\\n            }\\n        }\\n        return res;",
                "codeTag": "Unknown"
            },
            {
                "id": 3653355,
                "title": "100-beats-simple-solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n          int initialCol = s.charAt(0);\\n        int finalCol = s.charAt(3);\\n        \\n        int initialRow = s.charAt(1);\\n        int finalRow = s.charAt(4);\\n\\n        List<String> cells = new ArrayList<>();\\n        char[] ch = new char[2];\\n\\n        for(int c = initialCol; c <= finalCol; c++){            \\n            for(int r = initialRow; r <= finalRow; r++){\\n                 ch[0] = (char)c;\\n                 ch[1] = (char)r;\\n                 cells.add(String.valueOf(ch));\\n            }\\n        }\\n\\n        return cells;\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n          int initialCol = s.charAt(0);\\n        int finalCol = s.charAt(3);\\n        \\n        int initialRow = s.charAt(1);\\n        int finalRow = s.charAt(4);\\n\\n        List<String> cells = new ArrayList<>();\\n        char[] ch = new char[2];\\n\\n        for(int c = initialCol; c <= finalCol; c++){            \\n            for(int r = initialRow; r <= finalRow; r++){\\n                 ch[0] = (char)c;\\n                 ch[1] = (char)r;\\n                 cells.add(String.valueOf(ch));\\n            }\\n        }\\n\\n        return cells;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422487,
                "title": "c-code",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe need to move from the number in first part of the colon to the number in the second part of the colon, meanwhile covering all the alphabets between that in first colon to the one in second colon. For an example :\\nK1 : M4\\nIndicates, in each column from K to M ie K,L,M,\\nWe need to go down the column by 4 spaces hence the answer will be,\\nK1,K2,K3,K4,L1,L2,L3,L4,M1,M2,M3,M4\\nBelow code is the Implementation of the same.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) \\n    {   \\n        int startch = s[0];\\n        int endch = s[3];\\n        int startIn = int(s[1])-48;\\n        int endIn = int(s[4])-48;\\n        vector<string>result;\\n       for(char c = startch; c<= endch; c++)\\n       {\\n           for(int i = startIn; i<= endIn; i++)\\n           { \\n               string str = \"\";\\n               str+=c;\\n               str+=to_string(i);\\n               result.push_back(str);\\n           }\\n       } \\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) \\n    {   \\n        int startch = s[0];\\n        int endch = s[3];\\n        int startIn = int(s[1])-48;\\n        int endIn = int(s[4])-48;\\n        vector<string>result;\\n       for(char c = startch; c<= endch; c++)\\n       {\\n           for(int i = startIn; i<= endIn; i++)\\n           { \\n               string str = \"\";\\n               str+=c;\\n               str+=to_string(i);\\n               result.push_back(str);\\n           }\\n       } \\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3334434,
                "title": "most-easy-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n*m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char startCol=s.charAt(0);\\n        int startRow=s.charAt(1)-\\'0\\';\\n        char endCol=s.charAt(3);\\n        int endRow=s.charAt(4)-\\'0\\';\\n        List<String> ans=new ArrayList<>();\\n        for(char c=startCol;c<=endCol;){\\n            for(int i=startRow;i<=endRow;i++){\\n                ans.add(c+\"\"+i);\\n        }\\n        c=(char)(c+1);\\n    }\\n    return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char startCol=s.charAt(0);\\n        int startRow=s.charAt(1)-\\'0\\';\\n        char endCol=s.charAt(3);\\n        int endRow=s.charAt(4)-\\'0\\';\\n        List<String> ans=new ArrayList<>();\\n        for(char c=startCol;c<=endCol;){\\n            for(int i=startRow;i<=endRow;i++){\\n                ans.add(c+\"\"+i);\\n        }\\n        c=(char)(c+1);\\n    }\\n    return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3221188,
                "title": "simple-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char[] sc = s.toCharArray();\\n        List<String> ar = new ArrayList<>();\\n        for(char c1=sc[0];c1<=sc[3];c1++){\\n            for(char n1=sc[1];n1<=sc[4];n1++){\\n                ar.add(\"\"+c1+n1);\\n            }\\n        }\\n        return ar;\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char[] sc = s.toCharArray();\\n        List<String> ar = new ArrayList<>();\\n        for(char c1=sc[0];c1<=sc[3];c1++){\\n            for(char n1=sc[1];n1<=sc[4];n1++){\\n                ar.add(\"\"+c1+n1);\\n            }\\n        }\\n        return ar;\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3210384,
                "title": "c-solution-simple-approach-using-2-loops",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        \\n    char start_col = s[0];\\n    char start_row = s[1];\\n    char end_col = s[3];\\n    char end_row = s[4];\\n\\n    vector<string> ans;\\n    for (char i = start_col; i <= end_col; i++)\\n    {\\n        for (char j = start_row; j <= end_row; j++)\\n        {\\n            string cell = \"\";\\n            cell = cell + i + j;\\n            ans.push_back(cell);\\n        }\\n    }\\n    return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        \\n    char start_col = s[0];\\n    char start_row = s[1];\\n    char end_col = s[3];\\n    char end_row = s[4];\\n\\n    vector<string> ans;\\n    for (char i = start_col; i <= end_col; i++)\\n    {\\n        for (char j = start_row; j <= end_row; j++)\\n        {\\n            string cell = \"\";\\n            cell = cell + i + j;\\n            ans.push_back(cell);\\n        }\\n    }\\n    return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3206879,
                "title": "java-1ms-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> l = new ArrayList<>();\\n        for(char i = s.charAt(0); i <= s.charAt(3); i++){\\n            for(char j = s.charAt(1); j <= s.charAt(4); j++){\\n                l.add(new String(new char[]{i,j}));\\n            }\\n        }\\n        return l;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> l = new ArrayList<>();\\n        for(char i = s.charAt(0); i <= s.charAt(3); i++){\\n            for(char j = s.charAt(1); j <= s.charAt(4); j++){\\n                l.add(new String(new char[]{i,j}));\\n            }\\n        }\\n        return l;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2798345,
                "title": "simple-c-solution-100beats-at-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> result;\\n        char startCol = s[0];\\n        char endCol = s[3];\\n        int startIndex = s[1];\\n        int endIndex = s[4];\\n\\n        for(char i = startCol; i<= endCol; i++)\\n            for(char j = startIndex ; j <= endIndex; j++)\\n                result.push_back(string(1,i)+j);\\n            \\n\\n       return result; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> result;\\n        char startCol = s[0];\\n        char endCol = s[3];\\n        int startIndex = s[1];\\n        int endIndex = s[4];\\n\\n        for(char i = startCol; i<= endCol; i++)\\n            for(char j = startIndex ; j <= endIndex; j++)\\n                result.push_back(string(1,i)+j);\\n            \\n\\n       return result; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2752059,
                "title": "java-94-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> selectedCells=new ArrayList<>();\\n        StringBuilder builder = new StringBuilder();\\n        char s1 = s.charAt(0);\\n        char s2 = s.charAt(3);\\n        int s3 = s.charAt(1)-48;\\n        int s4 = s.charAt(4)-48;\\n        for(char i=s1; i<=s2;i++){\\n            builder.append(i);\\n            for(int j=s3; j<=s4;j++){\\n                builder.append(j);\\n                selectedCells.add(builder.toString());\\n                builder.deleteCharAt(1);\\n            }\\n            builder.deleteCharAt(0);\\n        }\\n        return selectedCells;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> selectedCells=new ArrayList<>();\\n        StringBuilder builder = new StringBuilder();\\n        char s1 = s.charAt(0);\\n        char s2 = s.charAt(3);\\n        int s3 = s.charAt(1)-48;\\n        int s4 = s.charAt(4)-48;\\n        for(char i=s1; i<=s2;i++){\\n            builder.append(i);\\n            for(int j=s3; j<=s4;j++){\\n                builder.append(j);\\n                selectedCells.add(builder.toString());\\n                builder.deleteCharAt(1);\\n            }\\n            builder.deleteCharAt(0);\\n        }\\n        return selectedCells;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2663177,
                "title": "python-chr-ord-simple",
                "content": "```\\nclass Solution(object):\\n    def cellsInRange(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: List[str]\\n        \"\"\"\\n        rList = []\\n      \\n        for i in range(ord(s[0]), ord(s[3])+1):\\n            for j in range(int(s[1]), int(s[4])+1):\\n                rList.append(chr(i) + str(j))\\n        return rList\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def cellsInRange(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: List[str]\\n        \"\"\"\\n        rList = []\\n      \\n        for i in range(ord(s[0]), ord(s[3])+1):\\n            for j in range(int(s[1]), int(s[4])+1):\\n                rList.append(chr(i) + str(j))\\n        return rList\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2646149,
                "title": "simple-java-solution-using-for-loop",
                "content": "class Solution {\\n    public List<String> cellsInRange(String s) {\\n        String a=s.substring(1,2);\\n        String b=s.substring(s.length()-1,s.length());\\n        \\n        List<String> list=new ArrayList<>();\\n        char c=s.charAt(0);\\n        char d=s.charAt(3);\\n        \\n        if(a.equals(b)){\\n           for(char m=c;m<=d;m++){\\n            // System.out.println(m);\\n            list.add(m+a);\\n        }\\n        }\\n        else{\\n        int x=Integer.parseInt(a);\\n        int y=Integer.parseInt(b);\\n        for(int z=x;z<=y;z++){\\n        for(char m=c;m<=d;m++){\\n            String last=Integer.toString(z);\\n            list.add(m+last);\\n        }\\n        }\\n        }\\n        Collections.sort(list);\\n        return list;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public List<String> cellsInRange(String s) {\\n        String a=s.substring(1,2);\\n        String b=s.substring(s.length()-1,s.length());\\n        \\n        List<String> list=new ArrayList<>();\\n        char c=s.charAt(0);\\n        char d=s.charAt(3);\\n        \\n        if(a.equals(b)){\\n           for(char m=c;m<=d;m++){\\n            // System.out.println(m);\\n            list.add(m+a);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2491489,
                "title": "0-n-2-java-simple-code",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> list=new ArrayList<>();\\n        int startc=s.charAt(0)-\\'A\\';\\n        int endc=s.charAt(3)-\\'A\\';\\n        int starti=s.charAt(1)-\\'0\\';\\n        int endi=s.charAt(4)-\\'0\\';\\n        String temp=\"\";\\n        while(startc<=endc){\\n            char c=(char)(65+startc);\\n            for(int i=starti;i<=endi;i++){\\n                temp=c+\"\";\\n                char n=(char)(48+i);\\n                temp+=n+\"\";\\n                list.add(temp);\\n            }\\n            startc++;\\n        }\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> list=new ArrayList<>();\\n        int startc=s.charAt(0)-\\'A\\';\\n        int endc=s.charAt(3)-\\'A\\';\\n        int starti=s.charAt(1)-\\'0\\';\\n        int endi=s.charAt(4)-\\'0\\';\\n        String temp=\"\";\\n        while(startc<=endc){\\n            char c=(char)(65+startc);\\n            for(int i=starti;i<=endi;i++){\\n                temp=c+\"\";\\n                char n=(char)(48+i);\\n                temp+=n+\"\";\\n                list.add(temp);\\n            }\\n            startc++;\\n        }\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2445324,
                "title": "100-fast-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char col1 = s[0];   char row1 = s[1];\\n        char col2 = s[3];   char row2 = s[4];\\n        \\n        vector<string> cells;\\n        \\n        for(int i=col1; i<=col2; i++){\\n            for(int j=row1; j<=row2; j++){\\n                string currentCell = \"  \";\\n                currentCell[0] = i;\\n                currentCell[1] = j;\\n                cells.push_back(currentCell);\\n            }\\n        }\\n        return cells;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char col1 = s[0];   char row1 = s[1];\\n        char col2 = s[3];   char row2 = s[4];\\n        \\n        vector<string> cells;\\n        \\n        for(int i=col1; i<=col2; i++){\\n            for(int j=row1; j<=row2; j++){\\n                string currentCell = \"  \";\\n                currentCell[0] = i;\\n                currentCell[1] = j;\\n                cells.push_back(currentCell);\\n            }\\n        }\\n        return cells;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2396515,
                "title": "go-simple-solutions-0ms-3mb",
                "content": "```go\\nfunc cellsInRange(s string) []string {\\n    // pre allocate result\\n    res := make([]string, (s[3]-s[0]+1)*(s[4]-s[1]+1))\\n    var i int\\n    for c := s[0]; c <= s[3]; c++ {\\n        for r := s[1]; r <= s[4]; r++ {\\n            res[i] = string([]byte{c, r})\\n            i++\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc cellsInRange(s string) []string {\\n    // pre allocate result\\n    res := make([]string, (s[3]-s[0]+1)*(s[4]-s[1]+1))\\n    var i int\\n    for c := s[0]; c <= s[3]; c++ {\\n        for r := s[1]; r <= s[4]; r++ {\\n            res[i] = string([]byte{c, r})\\n            i++\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2369701,
                "title": "simple-python3-no-ord-no-chr",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        start, end = s.split(\\':\\')\\n        start_letter, start_num = start[0], int(start[-1])\\n        end_letter, end_num = end[0], int(end[1])\\n        alphabet = list(\\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\')\\n        alphabet_slice = \\\\\\n            alphabet[alphabet.index(start_letter):alphabet.index(end_letter) + 1]\\n        res = list()\\n        for el in alphabet_slice:\\n            res += [el + str(num) for num in range(start_num, end_num + 1)]\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        start, end = s.split(\\':\\')\\n        start_letter, start_num = start[0], int(start[-1])\\n        end_letter, end_num = end[0], int(end[1])\\n        alphabet = list(\\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\')\\n        alphabet_slice = \\\\\\n            alphabet[alphabet.index(start_letter):alphabet.index(end_letter) + 1]\\n        res = list()\\n        for el in alphabet_slice:\\n            res += [el + str(num) for num in range(start_num, end_num + 1)]\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2245978,
                "title": "java-solution",
                "content": "```class Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> s1= new ArrayList<>();\\n        for(char i=s.charAt(0);i<=s.charAt(3);i++)\\n        {\\n            for(int j=s.charAt(1);j<=s.charAt(4);j++)\\n            {\\n                String ans=i+\"\"+(j-\\'0\\');\\n                s1.add(ans);\\n            }\\n        }\\n        return s1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```class Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> s1= new ArrayList<>();\\n        for(char i=s.charAt(0);i<=s.charAt(3);i++)\\n        {\\n            for(int j=s.charAt(1);j<=s.charAt(4);j++)\\n            {\\n                String ans=i+\"\"+(j-\\'0\\');\\n                s1.add(ans);\\n            }\\n        }\\n        return s1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2227093,
                "title": "c-100-faster",
                "content": "```\\n\\t    vector<string> v;\\n        string str = \"\";\\n        int a = (s[3]-s[0])+1;\\n        int b = (s[4]-s[1])+1;\\n        for (int i = 0; i < a; i++)\\n        {\\n            for (int j = 0; j < b; j++)\\n            {\\n                str=\"\";\\n                str.push_back(char(s[0] + i));\\n                str.push_back(char(s[1] + j));\\n                v.push_back(str);\\n            }    \\n        }\\n        return v;\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\t    vector<string> v;\\n        string str = \"\";\\n        int a = (s[3]-s[0])+1;\\n        int b = (s[4]-s[1])+1;\\n        for (int i = 0; i < a; i++)\\n        {\\n            for (int j = 0; j < b; j++)\\n            {\\n                str=\"\";\\n                str.push_back(char(s[0] + i));\\n                str.push_back(char(s[1] + j));\\n                v.push_back(str);\\n            }    \\n        }\\n        return v;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1966259,
                "title": "javascript-begineer-solution-for-loop-faster-than-79-29",
                "content": "```\\nlet s = \"K1:L2\";\\nlet result = []\\n\\nconst [word1, word1Len, , word2, word2Len] = s;\\n\\nfor(let i= word1.charCodeAt(0) ; i<=  word2.charCodeAt(0) ;i++){\\n    let aa = (String.fromCharCode(i))\\n    for(j = word1Len ; j <=word2Len ; j++){\\n        result.push(aa+j)\\n    }\\n}\\nconsole.log(result)\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet s = \"K1:L2\";\\nlet result = []\\n\\nconst [word1, word1Len, , word2, word2Len] = s;\\n\\nfor(let i= word1.charCodeAt(0) ; i<=  word2.charCodeAt(0) ;i++){\\n    let aa = (String.fromCharCode(i))\\n    for(j = word1Len ; j <=word2Len ; j++){\\n        result.push(aa+j)\\n    }\\n}\\nconsole.log(result)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1947562,
                "title": "javascript-solution-using-nested-loops",
                "content": "Found this solution helpful? Consider showing support by upvoting this post.\\nHave a question? Kindly leave a comment below.\\nThank you and happy hacking!\\n```\\nconst cellsInRange = s => {\\n    let startLetter = s.charCodeAt(0) - 64;\\n    let endLetter = s.charCodeAt(3) - 64;\\n    let startNumber = parseInt(s[1])\\n    let endNumber = parseInt(s[4])\\n    let result = [];\\n\\n    for (let i = startLetter; i <= endLetter; i++) {\\n        let char = String.fromCharCode(i + 64);\\n        for (let j = startNumber; j <= endNumber; j++) {\\n            result.push(char + `${j}`);\\n        }\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst cellsInRange = s => {\\n    let startLetter = s.charCodeAt(0) - 64;\\n    let endLetter = s.charCodeAt(3) - 64;\\n    let startNumber = parseInt(s[1])\\n    let endNumber = parseInt(s[4])\\n    let result = [];\\n\\n    for (let i = startLetter; i <= endLetter; i++) {\\n        let char = String.fromCharCode(i + 64);\\n        for (let j = startNumber; j <= endNumber; j++) {\\n            result.push(char + `${j}`);\\n        }\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1826356,
                "title": "c-solution",
                "content": "**Note**\\nIn C#, ```char``` is value type and has a numerical value, but it doesn\\'t have a custom ```+``` operator. When we do ```+``` operation on chars, they will be implicitly converted to integers, so the result will be integer. \\n\\n**Complexity**\\n- Time: O((s[3] - s[0]) + 1 * (s[4] - s[2] + 1))\\n- Space: O((s[3] - s[0]) + 1 * (s[4] - s[2] + 1)) due to the output\\n\\n**Implementation**\\n```\\npublic class Solution {\\n    public IList<string> CellsInRange(string s) {\\n        \\n        if(string.IsNullOrEmpty(s))\\n            throw new ArgumentException(\"Invalid Input.\");\\n        \\n        char col1 = s[0], col2 = s[3];\\n        char row1 = s[1], row2 = s[4];\\n    \\n        List<string> res = new List<string>();\\n        for(char c = col1; c <= col2; c++)\\n        {\\n            for(char r = row1; r <= row2; r++)\\n            {\\n                res.Add(c.ToString() + r.ToString());\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```char```\n```+```\n```+```\n```\\npublic class Solution {\\n    public IList<string> CellsInRange(string s) {\\n        \\n        if(string.IsNullOrEmpty(s))\\n            throw new ArgumentException(\"Invalid Input.\");\\n        \\n        char col1 = s[0], col2 = s[3];\\n        char row1 = s[1], row2 = s[4];\\n    \\n        List<string> res = new List<string>();\\n        for(char c = col1; c <= col2; c++)\\n        {\\n            for(char r = row1; r <= row2; r++)\\n            {\\n                res.Add(c.ToString() + r.ToString());\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1825249,
                "title": "c-4-variables-and-2-loops-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char startCol = s[0];\\n        char endCol = s[3];\\n        char startRow = s[1];\\n        char endRow = s[4];\\n        vector<string>ans;\\n        \\n        for(char a = startCol; a<=endCol; a++){\\n            for(char b = startRow; b<=endRow; b++){\\n                string sans = \"\";\\n                sans.push_back(a);\\n                sans.push_back(b);\\n                ans.push_back(sans);\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char startCol = s[0];\\n        char endCol = s[3];\\n        char startRow = s[1];\\n        char endRow = s[4];\\n        vector<string>ans;\\n        \\n        for(char a = startCol; a<=endCol; a++){\\n            for(char b = startRow; b<=endRow; b++){\\n                string sans = \"\";\\n                sans.push_back(a);\\n                sans.push_back(b);\\n                ans.push_back(sans);\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1824868,
                "title": "c-code-single-loop",
                "content": "```\\n\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** cellsInRange(char * s, int* returnSize){\\n    //Get the values needed from the input\\n    int row_start = (s[1]-\\'0\\');\\n    int row_end = (s[4]-\\'0\\');\\n    int rows = (row_end - row_start) + 1;\\n    int cols = ((s[3] % 65) - (s[0] % 65)) + 1;\\n    int size = (rows * cols);\\n    //printf(\"row_start = %d | row_end = %d | rows = %d | cols = %d | size = %d\\\\n\", row_start, row_end, rows, cols, size);\\n    \\n    //Declare the resultant array and allocate memory\\n    char **result = (char**)malloc(sizeof(char*) * size);\\n    for(int i = 0; i < size; i++){\\n        result[i] = (char*)malloc(sizeof(char) * 3);\\n    }\\n    \\n    \\n    //Add elements to the resultant array\\n    char ch = s[0];\\n    int i = 0;\\n    while(i < size){\\n        for(int j = row_start; j <= row_end; j++){\\n            result[i][0] = ch;\\n            result[i][1] = \\'0\\' + j;\\n            result[i][2] = \\'\\\\0\\';\\n            //printf(\"result[%d][0] = %c | result[%d][1] = %c\\\\n\", i, result[i][0], i, result[i][1]);\\n            \\n            i++;\\n        }\\n        ch = ((ch % 65) + 1) + 65;\\n    }\\n    \\n    *returnSize = size;\\n    return result;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** cellsInRange(char * s, int* returnSize){\\n    //Get the values needed from the input\\n    int row_start = (s[1]-\\'0\\');\\n    int row_end = (s[4]-\\'0\\');\\n    int rows = (row_end - row_start) + 1;\\n    int cols = ((s[3] % 65) - (s[0] % 65)) + 1;\\n    int size = (rows * cols);\\n    //printf(\"row_start = %d | row_end = %d | rows = %d | cols = %d | size = %d\\\\n\", row_start, row_end, rows, cols, size);\\n    \\n    //Declare the resultant array and allocate memory\\n    char **result = (char**)malloc(sizeof(char*) * size);\\n    for(int i = 0; i < size; i++){\\n        result[i] = (char*)malloc(sizeof(char) * 3);\\n    }\\n    \\n    \\n    //Add elements to the resultant array\\n    char ch = s[0];\\n    int i = 0;\\n    while(i < size){\\n        for(int j = row_start; j <= row_end; j++){\\n            result[i][0] = ch;\\n            result[i][1] = \\'0\\' + j;\\n            result[i][2] = \\'\\\\0\\';\\n            //printf(\"result[%d][0] = %c | result[%d][1] = %c\\\\n\", i, result[i][0], i, result[i][1]);\\n            \\n            i++;\\n        }\\n        ch = ((ch % 65) + 1) + 65;\\n    }\\n    \\n    *returnSize = size;\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1823952,
                "title": "simple-easy-solution-c",
                "content": "\\tonly problem i am able to solve :(\\n\\t\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tvector<string> cellsInRange(string s) {\\n\\t\\t\\tint r1 = s[1] -\\'0\\';\\n\\t\\t\\tint r2 = s[4] - \\'0\\';\\n\\n\\t\\t\\tint c1 = (s[0] - \\'A\\');\\n\\t\\t\\tint c2 = (s[3] - \\'A\\');\\n\\t\\t\\tvector<string> ans;\\n\\t\\t\\tfor(int j = c1;j<=c2;j++){\\n\\t\\t\\tfor(int i = r1;i<=r2;i++){\\n\\n\\t\\t\\t\\t\\tchar ch =  j + \\'A\\';\\n\\n\\t\\t\\t\\t\\tans.push_back(ch + to_string(i));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tvector<string> cellsInRange(string s) {\\n\\t\\t\\tint r1 = s[1] -\\'0\\';\\n\\t\\t\\tint r2 = s[4] - \\'0\\';\\n\\n\\t\\t\\tint c1 = (s[0] - \\'A\\');\\n\\t\\t\\tint c2 = (s[3] - \\'A\\');\\n\\t\\t\\tvector<string> ans;\\n\\t\\t\\tfor(int j = c1;j<=c2;j++){\\n\\t\\t\\tfor(int i = r1;i<=r2;i++){\\n\\n\\t\\t\\t\\t\\tchar ch =  j + \\'A\\';\\n\\n\\t\\t\\t\\t\\tans.push_back(ch + to_string(i));\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1823940,
                "title": "java-stringbuilder-100-optimal-faster-solution",
                "content": "```\\nclass Solution {\\n    public List < String > cellsInRange(String s) {\\n\\n        String[] str = s.split(\":\");\\n\\n        List < String > res = new ArrayList < > ();\\n        int a = Character.getNumericValue(str[0].charAt(1));\\n        int b = Character.getNumericValue(str[1].charAt(1));\\n        int c1 = str[0].charAt(0) - \\'A\\';\\n        int c2 = str[1].charAt(0) - \\'A\\';\\n\\n        for (int i = c1; i <= c2; i++) {\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(Character.toString(i + 65));\\n            for (int j = a; j <= b; j++) {\\n                sb.append(j);\\n\\n                res.add(sb.toString());\\n\\n                sb = sb.deleteCharAt(sb.length() - 1);\\n            }\\n        }\\n\\n        return res;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public List < String > cellsInRange(String s) {\\n\\n        String[] str = s.split(\":\");\\n\\n        List < String > res = new ArrayList < > ();\\n        int a = Character.getNumericValue(str[0].charAt(1));\\n        int b = Character.getNumericValue(str[1].charAt(1));\\n        int c1 = str[0].charAt(0) - \\'A\\';\\n        int c2 = str[1].charAt(0) - \\'A\\';\\n\\n        for (int i = c1; i <= c2; i++) {\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(Character.toString(i + 65));\\n            for (int j = a; j <= b; j++) {\\n                sb.append(j);\\n\\n                res.add(sb.toString());\\n\\n                sb = sb.deleteCharAt(sb.length() - 1);\\n            }\\n        }\\n\\n        return res;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1823641,
                "title": "c-clean-excel-cell-name-and-cell-number-easy",
                "content": "\\nSimilar question: [Excel sheet column title](https://leetcode.com/problems/excel-sheet-column-title/), [Excel Sheet Column Number](https://leetcode.com/problems/excel-sheet-column-number/)\\n\\nThis question was basically the combination of above two questions with some string processing\\n**Code**\\n\\n```\\nclass Solution {\\npublic:\\n    // calculate excel sheet column num from name\\n    int calNum(string s, int &p){\\n        int n = 1;\\n        while(p<s.size() && (s[p] >= \\'A\\') && (s[p] <=\\'Z\\')){\\n            n = (n-1)*26 + s[p] - \\'A\\' + 1;\\n            p++;\\n        }\\n        return n;\\n    }\\n    \\n    // calculate excel sheet row num from name\\n    int calNum2(string s, int &p){\\n        int n = 0;\\n        while(p<s.size() && (s[p] >= \\'0\\') && (s[p] <=\\'9\\')){\\n            n = n*10 + int(s[p] - \\'0\\');\\n            p++;\\n        }\\n        return n;\\n    }\\n    \\n    // calculate excel sheet cellName from column num and row num\\n    string calName(int i, int j){\\n        string s;\\n        while(i){\\n            s.push_back( (i-1)%26 + \\'A\\' );\\n            i = (i-1) / 26;\\n        }\\n        reverse(s.begin(), s.end());\\n        s += (to_string(j));\\n        return s;\\n    }\\n    \\n    vector<string> cellsInRange(string s) {\\n        \\n        int p = 0;                  // current position till where string is iterated\\n        int sx = calNum(s, p);      // starting cell column num\\n        int sy = calNum2(s, p);     // starting cell row num\\n         \\n        p++;                        // skipping \":\"\\n            \\n        int ex = calNum(s, p);      // ending cell column num\\n        int ey = calNum2(s, p);     // ending cell row num\\n        \\n        vector<string> ans;\\n        \\n        // iterate all cell and calculate it\\'s name\\n        for(int i=sx; i<=ex; i++)\\n            for(int j=sy; j<=ey; j++)\\n                ans.push_back(calName(i, j));\\n\\n        return ans;  \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    // calculate excel sheet column num from name\\n    int calNum(string s, int &p){\\n        int n = 1;\\n        while(p<s.size() && (s[p] >= \\'A\\') && (s[p] <=\\'Z\\')){\\n            n = (n-1)*26 + s[p] - \\'A\\' + 1;\\n            p++;\\n        }\\n        return n;\\n    }\\n    \\n    // calculate excel sheet row num from name\\n    int calNum2(string s, int &p){\\n        int n = 0;\\n        while(p<s.size() && (s[p] >= \\'0\\') && (s[p] <=\\'9\\')){\\n            n = n*10 + int(s[p] - \\'0\\');\\n            p++;\\n        }\\n        return n;\\n    }\\n    \\n    // calculate excel sheet cellName from column num and row num\\n    string calName(int i, int j){\\n        string s;\\n        while(i){\\n            s.push_back( (i-1)%26 + \\'A\\' );\\n            i = (i-1) / 26;\\n        }\\n        reverse(s.begin(), s.end());\\n        s += (to_string(j));\\n        return s;\\n    }\\n    \\n    vector<string> cellsInRange(string s) {\\n        \\n        int p = 0;                  // current position till where string is iterated\\n        int sx = calNum(s, p);      // starting cell column num\\n        int sy = calNum2(s, p);     // starting cell row num\\n         \\n        p++;                        // skipping \":\"\\n            \\n        int ex = calNum(s, p);      // ending cell column num\\n        int ey = calNum2(s, p);     // ending cell row num\\n        \\n        vector<string> ans;\\n        \\n        // iterate all cell and calculate it\\'s name\\n        for(int i=sx; i<=ex; i++)\\n            for(int j=sy; j<=ey; j++)\\n                ans.push_back(calName(i, j));\\n\\n        return ans;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1823610,
                "title": "beginner-friendly-python-solution",
                "content": "**Code:**\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        row1 = int(s[1])\\n        row2 = int(s[4])\\n        col1 = ord(s[0]) # To get their Unicode values\\n        col2 = ord(s[3]) # To get their Unicode values\\n        res = []\\n        # Since we are asked to sort the answer list first column and then row wise.\\n        for i in range(col1, col2+1):  \\n            for j in range(row1, row2+1):\\n                res.append(f\"{chr(i)}{j}\") # First column then row\\n        return res\\n```\\n**Code cramped into one line:**\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [f\"{chr(i)}{j}\" for i in range(ord(s[0]), ord(s[3])+1) for j in range(int(s[1]), int(s[4])+1)]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        row1 = int(s[1])\\n        row2 = int(s[4])\\n        col1 = ord(s[0]) # To get their Unicode values\\n        col2 = ord(s[3]) # To get their Unicode values\\n        res = []\\n        # Since we are asked to sort the answer list first column and then row wise.\\n        for i in range(col1, col2+1):  \\n            for j in range(row1, row2+1):\\n                res.append(f\"{chr(i)}{j}\") # First column then row\\n        return res\\n```\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [f\"{chr(i)}{j}\" for i in range(ord(s[0]), ord(s[3])+1) for j in range(int(s[1]), int(s[4])+1)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3870861,
                "title": "the-finest-and-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        k,k1,l=int(s[1]),int(s[4]),[]\\n        for i in range(ord(s[0]),ord(s[3])+1):\\n            for j in range(int(s[1]),int(s[4])+1):\\n                l1=\\'\\'\\n                l1+=chr(i)\\n                l1+=str(j)\\n                l.append(l1)\\n        return l\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        k,k1,l=int(s[1]),int(s[4]),[]\\n        for i in range(ord(s[0]),ord(s[3])+1):\\n            for j in range(int(s[1]),int(s[4])+1):\\n                l1=\\'\\'\\n                l1+=chr(i)\\n                l1+=str(j)\\n                l.append(l1)\\n        return l\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3866788,
                "title": "java-solution-o-row-x-col-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimple loop traversal\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStore the initial and final row and column values in char variables.\\nLoop through each row using the ASCII value.\\nFor each row, loop through the columns and add as string to the list.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(row x col)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(row x col)\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans = new ArrayList<>();\\n        \\n        char startRow = s.charAt(0);\\n        char startCol = s.charAt(1);\\n        char endRow = s.charAt(3);\\n        char endCol = s.charAt(4); \\n\\n        while(startRow <= endRow) {\\n            while(startCol <= endCol) {\\n                ans.add(startRow + \"\" + startCol);\\n                startCol++;\\n            }\\n            startCol = s.charAt(1);\\n            startRow++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans = new ArrayList<>();\\n        \\n        char startRow = s.charAt(0);\\n        char startCol = s.charAt(1);\\n        char endRow = s.charAt(3);\\n        char endCol = s.charAt(4); \\n\\n        while(startRow <= endRow) {\\n            while(startCol <= endCol) {\\n                ans.add(startRow + \"\" + startCol);\\n                startCol++;\\n            }\\n            startCol = s.charAt(1);\\n            startRow++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3518660,
                "title": "simple-java-solution-for-beginners-1ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> AL = new ArrayList();\\n        StringBuilder SB = new StringBuilder();\\n        char arr[] = s.toCharArray();\\n        for(char ch = arr[0]; ch <= arr[3]; ch = (char)(ch + 1)) {\\n            SB.append(ch);\\n            for(char num = arr[1]; num <= arr[4]; num++) {\\n                SB.append(num);\\n                AL.add(SB.toString());\\n                SB.deleteCharAt(1);\\n            }\\n            SB.deleteCharAt(0);\\n        }\\n        return AL;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> AL = new ArrayList();\\n        StringBuilder SB = new StringBuilder();\\n        char arr[] = s.toCharArray();\\n        for(char ch = arr[0]; ch <= arr[3]; ch = (char)(ch + 1)) {\\n            SB.append(ch);\\n            for(char num = arr[1]; num <= arr[4]; num++) {\\n                SB.append(num);\\n                AL.add(SB.toString());\\n                SB.deleteCharAt(1);\\n            }\\n            SB.deleteCharAt(0);\\n        }\\n        return AL;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3518625,
                "title": "simple-java-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char first = s.charAt(0);\\n        int begin = s.charAt(1) - \\'0\\';\\n        char last = s.charAt(3);\\n        int end = s.charAt(4) - \\'0\\';\\n        List<String> AL = new ArrayList();\\n        for(char c = first; c <= last;) {\\n            for(int i = begin; i <= end; i++) {\\n                AL.add(c+\"\"+i);\\n            }\\n            c = (char)(c + 1);\\n        }\\n        return AL;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char first = s.charAt(0);\\n        int begin = s.charAt(1) - \\'0\\';\\n        char last = s.charAt(3);\\n        int end = s.charAt(4) - \\'0\\';\\n        List<String> AL = new ArrayList();\\n        for(char c = first; c <= last;) {\\n            for(int i = begin; i <= end; i++) {\\n                AL.add(c+\"\"+i);\\n            }\\n            c = (char)(c + 1);\\n        }\\n        return AL;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3404209,
                "title": "simple-kotlin-solution-for-beginners",
                "content": "```\\nclass Solution {\\n    fun cellsInRange(s: String): List<String> {\\n        val arr = ArrayList<String>()\\n        for (row in s[0]..s[3]) {\\n            for (col in s[1]..s[4]) arr.add(\"$row$col\")\\n        }\\n        return arr\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun cellsInRange(s: String): List<String> {\\n        val arr = ArrayList<String>()\\n        for (row in s[0]..s[3]) {\\n            for (col in s[1]..s[4]) arr.add(\"$row$col\")\\n        }\\n        return arr\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3130153,
                "title": "simple-and-easy-to-understand-solution-in-c",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1) Created a result vector to store and return the result.\\n2) Since numbers are present at the 1st and 4th index of the string, stored the numbers into another variables known as no1 and no2.\\n3) Stored the both characters into variables called a and b.\\n4) Created two variables max_n and min_n to store maximum and minimum of both the numbers in respective variables.\\n5) Iterated from a to b in external loop and iterated from min_n to max_n in the internal loop.\\n6) Kept concatenating and adding the string into result vector.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> result;\\n        int no1 = s[1]-\\'0\\', no2 = s[4]-\\'0\\', max_n, min_n;\\n        char a = s[0], b = s[3];\\n\\n        max_n = max(no1,no2);\\n        min_n = min(no1,no2);\\n\\n        char j = a;\\n        while(j <= b){\\n            int i = min_n;\\n            while(i <= max_n){\\n                result.push_back(j+to_string(i));\\n                i++;\\n            }\\n            j++;\\n        }\\n        \\n\\n\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> result;\\n        int no1 = s[1]-\\'0\\', no2 = s[4]-\\'0\\', max_n, min_n;\\n        char a = s[0], b = s[3];\\n\\n        max_n = max(no1,no2);\\n        min_n = min(no1,no2);\\n\\n        char j = a;\\n        while(j <= b){\\n            int i = min_n;\\n            while(i <= max_n){\\n                result.push_back(j+to_string(i));\\n                i++;\\n            }\\n            j++;\\n        }\\n        \\n\\n\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2953730,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** cellsInRange(char * s, int* returnSize){\\n    *returnSize = ((s[3]-s[0])+1) * ((s[4]-s[1])+1);\\n    char** ret = (char*)calloc(*returnSize , sizeof(char*)); // create array of strings\\n    int i , index = 0 , j ;\\n    for(i = s[0] ; i <= s[3] ; i++)\\n    {\\n        for(j = s[1] ; j <= s[4] ; j++)\\n        {\\n            ret[index] =(char*)calloc(3 , sizeof(char));\\n            ret[index][0] = i;\\n            ret[index][1] = j;\\n            ret[index][2] = \\'\\\\0\\';\\n            index++;\\n        }\\n    }\\n    return ret;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** cellsInRange(char * s, int* returnSize){\\n    *returnSize = ((s[3]-s[0])+1) * ((s[4]-s[1])+1);\\n    char** ret = (char*)calloc(*returnSize , sizeof(char*)); // create array of strings\\n    int i , index = 0 , j ;\\n    for(i = s[0] ; i <= s[3] ; i++)\\n    {\\n        for(j = s[1] ; j <= s[4] ; j++)\\n        {\\n            ret[index] =(char*)calloc(3 , sizeof(char));\\n            ret[index][0] = i;\\n            ret[index][1] = j;\\n            ret[index][2] = \\'\\\\0\\';\\n            index++;\\n        }\\n    }\\n    return ret;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2922922,
                "title": "java-time-o-col1-col2-row1-row2-space-o-col1-col2-row1-row2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIt\\'s an easy problem just need patience.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nExtract the range of column and row, then start adding it to list storing the cells.\\n\\n# Complexity\\n- Time complexity: O( |col1-col2| * |row1-row2| )\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O( |col1-col2| * |row1-row2| )\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> cells = new ArrayList<>();\\n        char col1 = s.charAt(0);\\n        char col2 = s.charAt(3);\\n        int row1 = Integer.valueOf(String.valueOf(s.charAt(1)));\\n        int row2 = Integer.valueOf(String.valueOf(s.charAt(4)));\\n        for(int i=(int)col1;i<=(int)col2;i++){\\n            for(int j=row1;j<=row2;j++){\\n                cells.add(String.valueOf((char)i) + String.valueOf(j));\\n            }\\n        }\\n        return cells;\\n    }\\n    // Time Complexity : O(|col1-col2| * |row1-row2|)\\n    // Space Complexity : O(|col1-col2| * |row1-row2|)\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> cells = new ArrayList<>();\\n        char col1 = s.charAt(0);\\n        char col2 = s.charAt(3);\\n        int row1 = Integer.valueOf(String.valueOf(s.charAt(1)));\\n        int row2 = Integer.valueOf(String.valueOf(s.charAt(4)));\\n        for(int i=(int)col1;i<=(int)col2;i++){\\n            for(int j=row1;j<=row2;j++){\\n                cells.add(String.valueOf((char)i) + String.valueOf(j));\\n            }\\n        }\\n        return cells;\\n    }\\n    // Time Complexity : O(|col1-col2| * |row1-row2|)\\n    // Space Complexity : O(|col1-col2| * |row1-row2|)\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2859321,
                "title": "2-line-code-simple-and-naive-approach",
                "content": "# Intuition\\n2 line Code\\n# Approach\\nSimple and Naive Approach\\n\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nwe used list as its already said to use\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n   List<String> list=new ArrayList<String>();  \\n   for(char i=s.charAt(0);i<=s.charAt(3);i++) \\n   {  \\n       for(char j=s.charAt(1);j<=s.charAt(4);j++)\\n      {   \\n          list.add(\"\"+i+j);\\n }}\\n   return list;  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n   List<String> list=new ArrayList<String>();  \\n   for(char i=s.charAt(0);i<=s.charAt(3);i++) \\n   {  \\n       for(char j=s.charAt(1);j<=s.charAt(4);j++)\\n      {   \\n          list.add(\"\"+i+j);\\n }}\\n   return list;  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2851693,
                "title": "javascript-easy-to-understand-solution-beats-97",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nconst cellsInRange = function(s) {\\n   let parts = s.split(\":\");///get the rows and columns\\n   let cols = [];\\n   let rows = [];\\n   let answer = [];\\n\\n    for (let i = 0; i < parts.length; i++) {//turn strings to ascii numbers\\n        cols.push(parts[i][0].charCodeAt(0));\\n        rows.push(parts[i][1].charCodeAt(0));\\n    }\\n\\n    ///set two loops for the range of rows and columns according to ascii codes\\n    for (let i = Math.min(...cols); i <= Math.max(...cols) ; i++) {\\n        for (let j = Math.min(...rows); j <= Math.max(...rows); j++) {\\n            let element = \"\";\\n            element += (String.fromCharCode(i));///add column\\n            element += (String.fromCharCode(j));///add row\\n            answer.push(element);\\n        }\\n    }\\n\\n    return answer;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nconst cellsInRange = function(s) {\\n   let parts = s.split(\":\");///get the rows and columns\\n   let cols = [];\\n   let rows = [];\\n   let answer = [];\\n\\n    for (let i = 0; i < parts.length; i++) {//turn strings to ascii numbers\\n        cols.push(parts[i][0].charCodeAt(0));\\n        rows.push(parts[i][1].charCodeAt(0));\\n    }\\n\\n    ///set two loops for the range of rows and columns according to ascii codes\\n    for (let i = Math.min(...cols); i <= Math.max(...cols) ; i++) {\\n        for (let j = Math.min(...rows); j <= Math.max(...rows); j++) {\\n            let element = \"\";\\n            element += (String.fromCharCode(i));///add column\\n            element += (String.fromCharCode(j));///add row\\n            answer.push(element);\\n        }\\n    }\\n\\n    return answer;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2762746,
                "title": "typescript-clean-solution",
                "content": "```\\nfunction cellsInRange(s: string): string[] {\\n  const colStart = s[0].charCodeAt(0);\\n  const rowStart = +s[1];\\n  const colEnd = s[3].charCodeAt(0);\\n  const rowEnd = +s[4];\\n\\n  const cells: string[] = [];\\n  for (let col = colStart; col <= colEnd; col++) {\\n    for (let row = rowStart; row <= rowEnd; row++) {\\n      cells.push(String.fromCharCode(col) + row);\\n    }\\n  }\\n  return cells;\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction cellsInRange(s: string): string[] {\\n  const colStart = s[0].charCodeAt(0);\\n  const rowStart = +s[1];\\n  const colEnd = s[3].charCodeAt(0);\\n  const rowEnd = +s[4];\\n\\n  const cells: string[] = [];\\n  for (let col = colStart; col <= colEnd; col++) {\\n    for (let row = rowStart; row <= rowEnd; row++) {\\n      cells.push(String.fromCharCode(col) + row);\\n    }\\n  }\\n  return cells;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2737276,
                "title": "simple-c-solution-using-nested-for-loops",
                "content": "# Intuition\\nThe idea here is that C# allows you to manipulate char like a numeric value so you can use a `for` loop to allow you to iterate between a known start and end.\\n\\nThe problem space defines itself that the range will always be `lower:higher`. As a result we can make several assumptions\\n\\n# Approach\\nBasically we are always given a string that is `start:stop`. Splitting on the semi-colon will give us an array where we have start and finish.\\n\\n\\nThis code example starts with the columns and walks the columns first, then determines the appropriate rows afterwards. Remember, we are guaranteed that the row counts will not decrease.\\n\\nSo we can walk the columns like so:\\n\\n```\\nfor (var cStart = start[0]; cStart <= end[0]; cStart++)\\n```\\n\\nLet\\'s define an arbitrary example where the input string is `A1:B2`.\\nIn that case `cStart` will begin with `A` and the `for` loop will walk it to `B` inclusive.\\n\\nThen we can walk the rows fairly easily using a virtually identical setup:\\n```\\nfor (var rStart = start[1]; rStart <= end[1]; rStart++)\\n```\\n`rStart` will be `1` and the for loop will increment us to `2` before halting. Again, this is due to how chars are treated in C#. We can manipulate them as if they were numbers without any problems.\\n\\n\\n# Code\\n```\\npublic class Solution\\n{\\n\\tpublic IList<string> CellsInRange(string s)\\n\\t{\\n\\t\\tvar list = new List<string>();\\n\\t\\tvar range = s.Split(\\':\\');\\n\\t\\tvar start = range[0];\\n\\t\\tvar end = range[1];\\n\\t\\tfor (var cStart = start[0]; cStart <= end[0]; cStart++)\\n\\t\\t{\\n\\t\\t\\tfor (var rStart = start[1]; rStart <= end[1]; rStart++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tlist.Add($\"{cStart}{rStart}\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn list;\\n\\t}\\n}\\n```\\n\\nThere\\'s probably more efficient solutions for this one but this one felt the most straight-forward and simple to implement.",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\nfor (var cStart = start[0]; cStart <= end[0]; cStart++)\\n```\n```\\nfor (var rStart = start[1]; rStart <= end[1]; rStart++)\\n```\n```\\npublic class Solution\\n{\\n\\tpublic IList<string> CellsInRange(string s)\\n\\t{\\n\\t\\tvar list = new List<string>();\\n\\t\\tvar range = s.Split(\\':\\');\\n\\t\\tvar start = range[0];\\n\\t\\tvar end = range[1];\\n\\t\\tfor (var cStart = start[0]; cStart <= end[0]; cStart++)\\n\\t\\t{\\n\\t\\t\\tfor (var rStart = start[1]; rStart <= end[1]; rStart++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tlist.Add($\"{cStart}{rStart}\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn list;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2563404,
                "title": "javascript-solution",
                "content": "function cellsInRange(s: string): string[] {\\n\\n  //s //K1:L2\\n\\n  const result = [];\\n  const d = []\\n  const alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\\n  let idx = 0;\\n\\n\\n  //[a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t]\\n\\n  // check if they are adjacent \\n  // check if the frequency is more then one\\n  // then run the loop of the largest char frequency\\n\\n  let charOneIndex = alphabets.indexOf(s.charAt(0))\\n  let charTwoIndex = alphabets.indexOf(s.charAt(3))\\n  let largest = Number(s.charAt(4))\\n\\n  if (Number(s.charAt(1)) > 1) {\\n    idx = Number(s.charAt(4)) - Number(s.charAt(1));\\n  }\\n\\n  while (charOneIndex <= charTwoIndex) {\\n    result.push(`${alphabets[charOneIndex]}`)\\n    charOneIndex++\\n  }\\n\\n\\n\\n  if (Number(s.charAt(4)) === 1 && Number(s.charAt(1)) === 1) {\\n    for (let i = idx; i < result.length; i++) {\\n      result[i] = result[i] + \"1\"\\n    }\\n  } else {\\n     for (let i = 0; i < result.length; i++) {\\n       for (let y = Number(s.charAt(1)); y <= largest; y++) {\\n         d.push(`${result[i]}${y}`)\\n       }\\n     \\n     } \\n\\n  }\\n\\n  if (Number(s.charAt(4)) === 1) {\\n    return result\\n  } else {\\n    return d\\n  }\\n\\n\\n\\n};",
                "solutionTags": [],
                "code": "function cellsInRange(s: string): string[] {\\n\\n  //s //K1:L2\\n\\n  const result = [];\\n  const d = []\\n  const alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\\n  let idx = 0;\\n\\n\\n  //[a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t]\\n\\n  // check if they are adjacent \\n  // check if the frequency is more then one\\n  // then run the loop of the largest char frequency\\n\\n  let charOneIndex = alphabets.indexOf(s.charAt(0))\\n  let charTwoIndex = alphabets.indexOf(s.charAt(3))\\n  let largest = Number(s.charAt(4))\\n\\n  if (Number(s.charAt(1)) > 1) {\\n    idx = Number(s.charAt(4)) - Number(s.charAt(1));\\n  }\\n\\n  while (charOneIndex <= charTwoIndex) {\\n    result.push(`${alphabets[charOneIndex]}`)\\n    charOneIndex++\\n  }\\n\\n\\n\\n  if (Number(s.charAt(4)) === 1 && Number(s.charAt(1)) === 1) {\\n    for (let i = idx; i < result.length; i++) {\\n      result[i] = result[i] + \"1\"\\n    }\\n  } else {\\n     for (let i = 0; i < result.length; i++) {\\n       for (let y = Number(s.charAt(1)); y <= largest; y++) {\\n         d.push(`${result[i]}${y}`)\\n       }\\n     \\n     } \\n\\n  }\\n\\n  if (Number(s.charAt(4)) === 1) {\\n    return result\\n  } else {\\n    return d\\n  }\\n\\n\\n\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2492026,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> res = new ArrayList<>();\\n        char[] cs = s.toCharArray();\\n        for (char i = cs[0]; i <= cs[3]; i++) {\\n            for (char j = cs[1]; j <= cs[4]; j++) {\\n                res.add(new String(new char[]{i, j}));\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> res = new ArrayList<>();\\n        char[] cs = s.toCharArray();\\n        for (char i = cs[0]; i <= cs[3]; i++) {\\n            for (char j = cs[1]; j <= cs[4]; j++) {\\n                res.add(new String(new char[]{i, j}));\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2490314,
                "title": "samir-easy-two-loops-with-explanation",
                "content": "# Please Upvote\\n<hr>\\n\\n* The startIndex is for the row of the cell as K1 (1 -> startIndex)\\n* similarly endIndex is for the last row till which we will iterate L2 (2 -> endIndex)\\n* startChar is for the column of the cell like K1 (K -> startChar)\\n* endChar is for the column till which we\\'ll be iterating like L2 (L -> endChar)\\n\\n<hr> \\n\\n## Code :- \\n\\n```\\n\\t\\tint startIndex = Integer.parseInt(Character.toString(s.charAt(1)));\\n        int endIndex = Integer.parseInt(Character.toString(s.charAt(4)));\\n        int startChar = (int)s.charAt(0);\\n        int endChar = (int)s.charAt(3);\\n        List<String> ans = new ArrayList<>();\\n        for(int i = startChar; i <= endChar; i++){\\n            for(int j = startIndex; j <= endIndex; j++){\\n                String ss = Character.toString((char)i);\\n                ss += Integer.toString(j);\\n                ans.add(ss);\\n            }\\n        }\\n        return ans;\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\t\\tint startIndex = Integer.parseInt(Character.toString(s.charAt(1)));\\n        int endIndex = Integer.parseInt(Character.toString(s.charAt(4)));\\n        int startChar = (int)s.charAt(0);\\n        int endChar = (int)s.charAt(3);\\n        List<String> ans = new ArrayList<>();\\n        for(int i = startChar; i <= endChar; i++){\\n            for(int j = startIndex; j <= endIndex; j++){\\n                String ss = Character.toString((char)i);\\n                ss += Integer.toString(j);\\n                ans.add(ss);\\n            }\\n        }\\n        return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2469317,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:                \\n        ans = []\\n        for i in range(ord(s[0]), ord(s[3])+1):\\n                \\n                for j in range(int(s[1]),int(s[4])+1):\\n                    ans.append(\"{}{}\".format(chr(i),j))\\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:                \\n        ans = []\\n        for i in range(ord(s[0]), ord(s[3])+1):\\n                \\n                for j in range(int(s[1]),int(s[4])+1):\\n                    ans.append(\"{}{}\".format(chr(i),j))\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2461740,
                "title": "java-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> list = new ArrayList<>();\\n\\n        int f = Character.getNumericValue(s.charAt(1)),\\n                l = Character.getNumericValue(s.charAt(s.length() - 1));\\n        char c_f = s.charAt(0), c_s = s.charAt(s.length() - 2);\\n        for (char c = c_f; c <= c_s; c++) {\\n            for (int i = f; i <= l; i++) {\\n                list.add(String.valueOf(c) + i);\\n            }\\n        }\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> list = new ArrayList<>();\\n\\n        int f = Character.getNumericValue(s.charAt(1)),\\n                l = Character.getNumericValue(s.charAt(s.length() - 1));\\n        char c_f = s.charAt(0), c_s = s.charAt(s.length() - 2);\\n        for (char c = c_f; c <= c_s; c++) {\\n            for (int i = f; i <= l; i++) {\\n                list.add(String.valueOf(c) + i);\\n            }\\n        }\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2451019,
                "title": "0ms-straightforward",
                "content": "```\\nimpl Solution {\\n    pub fn cells_in_range(s: String) -> Vec<String> {\\n        let c = s.as_bytes();\\n        let mut ans: Vec<String> = Vec::with_capacity(10);\\n        for col in c[0]..=c[3] {\\n            for row in c[1]..=c[4] {\\n                ans.push(format!(\"{}{}\",col as char, row as char));\\n            }\\n        }\\n        ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn cells_in_range(s: String) -> Vec<String> {\\n        let c = s.as_bytes();\\n        let mut ans: Vec<String> = Vec::with_capacity(10);\\n        for col in c[0]..=c[3] {\\n            for row in c[1]..=c[4] {\\n                ans.push(format!(\"{}{}\",col as char, row as char));\\n            }\\n        }\\n        ans\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2348383,
                "title": "python-easy-and-clean",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(i)+str(j) for i in range(ord(s[0]), ord(s[3])+1) for j in range(int(s[1]), int(s[4])+1)]\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(i)+str(j) for i in range(ord(s[0]), ord(s[3])+1) for j in range(int(s[1]), int(s[4])+1)]\\n",
                "codeTag": "Java"
            },
            {
                "id": 2334942,
                "title": "simple-python-solution-in-one-line-with-explanation",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        res=\\'\\'\\n        li=[]\\n        str1=\"\"\\n\\t\\t#initialization of variables\\n        s1=\\'\\'\\n        s2=\\'\\'\\n        a=0\\n        b=0\\n        s1=ord(s[0]) #1st char ascii value\\n        a=int(s[1]) #2nd char int value\\n        s2=ord(s[3])\\n        b=int(s[4])\\n        #print(s1,a,s2,b)\\n        return [chr(i)+ str(j) for i in range(s1,s2+1) for j in range(a,b+1)]\\n\\t\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        res=\\'\\'\\n        li=[]\\n        str1=\"\"\\n\\t\\t#initialization of variables\\n        s1=\\'\\'\\n        s2=\\'\\'\\n        a=0\\n        b=0\\n        s1=ord(s[0]) #1st char ascii value\\n        a=int(s[1]) #2nd char int value\\n        s2=ord(s[3])\\n        b=int(s[4])\\n        #print(s1,a,s2,b)\\n        return [chr(i)+ str(j) for i in range(s1,s2+1) for j in range(a,b+1)]\\n\\t\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2331632,
                "title": "java-easy-4-line-code",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> result = new ArrayList<>();\\n        for (char letter=s.charAt(0);letter<=s.charAt(3);letter++){\\n            for (char digit=s.charAt(1);digit<=s.charAt(4);digit++){\\n                result.add(letter+\"\"+digit);\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```\\n\\nfor any queries comment down and if you like this solution then upvote",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> result = new ArrayList<>();\\n        for (char letter=s.charAt(0);letter<=s.charAt(3);letter++){\\n            for (char digit=s.charAt(1);digit<=s.charAt(4);digit++){\\n                result.add(letter+\"\"+digit);\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2329490,
                "title": "using-flatmap-in-kotlin",
                "content": "```kotlin\\nclass Solution {\\n    fun cellsInRange(s: String): List<String> =\\n        s.split(\":\").flatMap { it.toList() }\\n            .let { (startCol, startRow, endCol, endRow) ->\\n                (startCol..endCol).flatMap { col ->\\n                    (startRow..endRow).map { row -> \"$col$row\" }\\n                }\\n            }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```kotlin\\nclass Solution {\\n    fun cellsInRange(s: String): List<String> =\\n        s.split(\":\").flatMap { it.toList() }\\n            .let { (startCol, startRow, endCol, endRow) ->\\n                (startCol..endCol).flatMap { col ->\\n                    (startRow..endRow).map { row -> \"$col$row\" }\\n                }\\n            }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2295630,
                "title": "python3-one-liner-solution",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(j)+str(i) for j in range(ord(s[0]), ord(s[3])+1) for i in range(int(s[1]), int(s[4])+1) ]\\n```",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(j)+str(i) for j in range(ord(s[0]), ord(s[3])+1) for i in range(int(s[1]), int(s[4])+1) ]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2291419,
                "title": "java-solution-faster-than-100-00-and-runtime-1-ms",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {        \\n        List<String> list = new ArrayList<>();\\n        \\n        int col1 = s.charAt(0); // A\\n        int row1 = s.charAt(1); // 1\\n        \\n        int col2 = s.charAt(3); // F\\n        int row2 = s.charAt(4); // 1\\n        \\n        for(int j = col1; j <= col2; j++) {\\n            for(int i = row1; i <= row2; i++) {\\n                StringBuffer sb = new StringBuffer();\\n                \\n                sb.append((char)j); // A\\n                sb.append((char)i); // 1\\n                \\n                list.add(sb.toString()); // A1\\n            }\\n        }\\n        \\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {        \\n        List<String> list = new ArrayList<>();\\n        \\n        int col1 = s.charAt(0); // A\\n        int row1 = s.charAt(1); // 1\\n        \\n        int col2 = s.charAt(3); // F\\n        int row2 = s.charAt(4); // 1\\n        \\n        for(int j = col1; j <= col2; j++) {\\n            for(int i = row1; i <= row2; i++) {\\n                StringBuffer sb = new StringBuffer();\\n                \\n                sb.append((char)j); // A\\n                sb.append((char)i); // 1\\n                \\n                list.add(sb.toString()); // A1\\n            }\\n        }\\n        \\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2286524,
                "title": "ruby-ascii-loop-solution",
                "content": "\\n```ruby\\ndef cells_in_range(s)\\n    chars = s.split(\"\")\\n\\n    result = []\\n    (chars[0].sum..chars[3].sum).each do |item|\\n        (chars[1].to_i..chars.last.to_i).each do |i|\\n            result << \"#{item.chr}#{i}\"\\n        end\\n    end\\n\\n    result\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby\\ndef cells_in_range(s)\\n    chars = s.split(\"\")\\n\\n    result = []\\n    (chars[0].sum..chars[3].sum).each do |item|\\n        (chars[1].to_i..chars.last.to_i).each do |i|\\n            result << \"#{item.chr}#{i}\"\\n        end\\n    end\\n\\n    result\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2225711,
                "title": "easy-to-understand-solution",
                "content": "**Problem**: \\nWe have to return a vector containing cells from range x to y. For this, we would need to iterate from column col1 to col2 and for each iteration, iterate over rows from row1 to row2 (all inclusive).\\n\\n**Approach**:\\nWe know that the string given to us in the format: [col1][row1]:[col2][row2]\\nso, s[0] will contain the value col1, s[1] will contain row1, s[2] would be a colon(:), s[3] will contain col2, and s[4] will contain row2.\\nSo, we need to run an iteration from s[0] till s[3]. And for each iteration, iterate from s[1] to s[4], and hence, add values in the format: [column][row] to a string and insert the string to the vector.\\n\\n**Solution**:\\n\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> ans; //vector in which we would store our result\\n        for(char column=s[0];column<=s[3];column++) //iterating over columns from col1 to col2\\n        {\\n            for(int row=s[1]-\\'0\\';row<=s[4]-\\'0\\';row++) //iterating over rows from row1 to row2\\n            {\\n                string current=\"\"; // we take an empty string for the cell\\n                current+=column; // add the column to the string\\n                current+=to_string(row); // add the row number in form of string to the string\\n                ans.push_back(current); // push the string to the vector\\n            }\\n        }\\n        return ans; // return the vector\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> ans; //vector in which we would store our result\\n        for(char column=s[0];column<=s[3];column++) //iterating over columns from col1 to col2\\n        {\\n            for(int row=s[1]-\\'0\\';row<=s[4]-\\'0\\';row++) //iterating over rows from row1 to row2\\n            {\\n                string current=\"\"; // we take an empty string for the cell\\n                current+=column; // add the column to the string\\n                current+=to_string(row); // add the row number in form of string to the string\\n                ans.push_back(current); // push the string to the vector\\n            }\\n        }\\n        return ans; // return the vector\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2160205,
                "title": "java-simple",
                "content": ">**T/S:** O(mn)/O(1), where m = number of rows, n = number of columns. Actually it\\'ll be O(1)\\n```\\npublic List<String> cellsInRange(String s) {\\n\\tvar cells = new ArrayList<String>();\\n\\t\\n\\tfor (var i = s.charAt(0); i <= s.charAt(3); i++)\\n\\t\\tfor (var j = s.charAt(1); j <= s.charAt(4); j++)\\n\\t\\t\\tcells.add(i + \"\" + j);\\n\\treturn cells;\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic List<String> cellsInRange(String s) {\\n\\tvar cells = new ArrayList<String>();\\n\\t\\n\\tfor (var i = s.charAt(0); i <= s.charAt(3); i++)\\n\\t\\tfor (var j = s.charAt(1); j <= s.charAt(4); j++)\\n\\t\\t\\tcells.add(i + \"\" + j);\\n\\treturn cells;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2090950,
                "title": "swift-ascii-play",
                "content": "```\\nimport Foundation\\nclass Solution {\\n    func cellsInRange(_ s: String) -> [String] {\\n\\n        let arr = Array(s)\\n        let s0 = arr[0].unicodeScalars.first!.value\\n        let s3 = arr[3].unicodeScalars.first!.value\\n        \\n        let s1 = Int(\"\\\\(arr[1])\")!\\n        let s4 = Int(\"\\\\(arr[4])\")!\\n        \\n        var op: [String] = []\\n        for i in s0...s3 {\\n            for j in s1...s4 {\\n                op.append(\"\\\\(Character(UnicodeScalar(i)!))\\\\(j)\")\\n            }\\n        }\\n        \\n        return op\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nimport Foundation\\nclass Solution {\\n    func cellsInRange(_ s: String) -> [String] {\\n\\n        let arr = Array(s)\\n        let s0 = arr[0].unicodeScalars.first!.value\\n        let s3 = arr[3].unicodeScalars.first!.value\\n        \\n        let s1 = Int(\"\\\\(arr[1])\")!\\n        let s4 = Int(\"\\\\(arr[4])\")!\\n        \\n        var op: [String] = []\\n        for i in s0...s3 {\\n            for j in s1...s4 {\\n                op.append(\"\\\\(Character(UnicodeScalar(i)!))\\\\(j)\")\\n            }\\n        }\\n        \\n        return op\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2073029,
                "title": "88-or-100-solution-in-java-easy-understand",
                "content": "class Solution {\\n    public List<String> cellsInRange(String s) {\\n     //     88 % m/s solution\\n        char [] c=s.toCharArray();\\n       List<String> str= new ArrayList<>();\\n        \\n        \\n        for(char i=c[0];i<=c[3];i++){\\n             for(char j=c[1];j<=c[4];j++){\\n             str.add(new String(new char[]{i, j}));\\n            \\n        }\\n            \\n        }\\n         return str;  \\n        \\n        // second solution 100%\\n        \\n//            char sc = s.charAt(0), ec = s.charAt(3);\\n//         char sr = s.charAt(1), er = s.charAt(4);\\n//         List<String> res = new ArrayList<>();\\n        \\n//         for (char i = sc; i <= ec; ++i){\\n//             for (char j = sr; j <= er; ++j){\\n//                 res.add(new String(new char[]{i, j}));\\n//             }\\n//         }\\n        \\n//         return res;\\n    }\\n}\\n\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public List<String> cellsInRange(String s) {\\n     //     88 % m/s solution\\n        char [] c=s.toCharArray();\\n       List<String> str= new ArrayList<>();\\n        \\n        \\n        for(char i=c[0];i<=c[3];i++){\\n             for(char j=c[1];j<=c[4];j++){\\n             str.add(new String(new char[]{i, j}",
                "codeTag": "Java"
            },
            {
                "id": 2010653,
                "title": "cells-in-a-range-on-an-excel-sheet-python3-easy",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        excel_row_start , excel_row_end = int(s[1]) , int(s[4])\\n        excel_column_start , excel_column_end = s[0], s[3]\\n        result = list()\\n        for col in range(ord(excel_column_start), ord(excel_column_end)+1):\\n            for row in range(excel_row_start , excel_row_end+1):\\n                result.append(chr(col)+str(row))\\n        return result\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        excel_row_start , excel_row_end = int(s[1]) , int(s[4])\\n        excel_column_start , excel_column_end = s[0], s[3]\\n        result = list()\\n        for col in range(ord(excel_column_start), ord(excel_column_end)+1):\\n            for row in range(excel_row_start , excel_row_end+1):\\n                result.append(chr(col)+str(row))\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1972939,
                "title": "c-solution-0ms-faster-than-100",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Cells in a Range on an Excel Sheet.\\nMemory Usage: 7.9 MB, less than 19.65% of C++ online submissions for Cells in a Range on an Excel Sheet.\\n\\n```\\nclass Solution \\n{\\npublic:\\n    vector<string> cellsInRange(const string& s) \\n    {\\n        std::vector<std::string> res;\\n        for (char col = s[0]; col <= s[3]; col++)\\n        {\\n            for (char row = s[1]; row <= s[4]; row++)\\n            {\\n                std::string temp;\\n                temp += col;\\n                temp += row;\\n                res.push_back(temp);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    vector<string> cellsInRange(const string& s) \\n    {\\n        std::vector<std::string> res;\\n        for (char col = s[0]; col <= s[3]; col++)\\n        {\\n            for (char row = s[1]; row <= s[4]; row++)\\n            {\\n                std::string temp;\\n                temp += col;\\n                temp += row;\\n                res.push_back(temp);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1967286,
                "title": "kotlin",
                "content": "```\\nfun cellsInRange(s: String) = mutableListOf<String>().apply {\\n    (s.first()..s[3]).forEach {\\n        for (i in Character.getNumericValue(s[1])..Character.getNumericValue(s.last())) {\\n            add(\"$it$i\")\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nfun cellsInRange(s: String) = mutableListOf<String>().apply {\\n    (s.first()..s[3]).forEach {\\n        for (i in Character.getNumericValue(s[1])..Character.getNumericValue(s.last())) {\\n            add(\"$it$i\")\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1965664,
                "title": "c-straightforward-solution",
                "content": "```\\npublic class Solution {\\n    public IList<string> CellsInRange(string s) {\\n        List<string> res = new();\\n        char c1 = s.Split(\\':\\')[0][0];\\n        char c2 = s.Split(\\':\\')[1][0];\\n        int n1 = Convert.ToInt32(s.Split(\\':\\')[0][1])-\\'0\\';\\n        int n2 = Convert.ToInt32(s.Split(\\':\\')[1][1])-\\'0\\';\\n        for(int i=c1-\\'A\\'; i<=c2-\\'A\\'; i++)\\n        {\\n            for(int j=n1; j<=n2; j++)\\n            {\\n                res.Add(Convert.ToChar(\\'A\\'+i)+j.ToString());\\n            }\\n        }        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public IList<string> CellsInRange(string s) {\\n        List<string> res = new();\\n        char c1 = s.Split(\\':\\')[0][0];\\n        char c2 = s.Split(\\':\\')[1][0];\\n        int n1 = Convert.ToInt32(s.Split(\\':\\')[0][1])-\\'0\\';\\n        int n2 = Convert.ToInt32(s.Split(\\':\\')[1][1])-\\'0\\';\\n        for(int i=c1-\\'A\\'; i<=c2-\\'A\\'; i++)\\n        {\\n            for(int j=n1; j<=n2; j++)\\n            {\\n                res.Add(Convert.ToChar(\\'A\\'+i)+j.ToString());\\n            }\\n        }        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1944120,
                "title": "python-olution",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        v = []\\n        for i in range(ord(s[0]),ord(s[3])+1):\\n            for j in range(int(s[1]),int(s[4])+1):\\n                v.append(chr(i)+str(j))\\n        return v\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        v = []\\n        for i in range(ord(s[0]),ord(s[3])+1):\\n            for j in range(int(s[1]),int(s[4])+1):\\n                v.append(chr(i)+str(j))\\n        return v\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1938601,
                "title": "ruby-one-liner",
                "content": "```\\n# @param {String} s\\n# @return {String[]}\\ndef cells_in_range(s)\\n  (s[0]..s[3]).to_a.product((s[1]..s[4]).to_a).map(&:join)  \\nend\\n```",
                "solutionTags": [],
                "code": "```\\n# @param {String} s\\n# @return {String[]}\\ndef cells_in_range(s)\\n  (s[0]..s[3]).to_a.product((s[1]..s[4]).to_a).map(&:join)  \\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1937740,
                "title": "python-using-for-loops-faster-than-94",
                "content": "![image](https://assets.leetcode.com/users/images/fbf77fdd-8049-4de9-84dc-9ec5962516d9_1649721022.8458278.png)\\n\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        \\n        res = []\\n        for letter in range(ord(s[0]), ord(s[3]) + 1, 1):\\n            for i in range(int(s[1]), int(s[-1]) + 1):\\n                res.append(chr(letter) + str(i))\\n        \\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        \\n        res = []\\n        for letter in range(ord(s[0]), ord(s[3]) + 1, 1):\\n            for i in range(int(s[1]), int(s[-1]) + 1):\\n                res.append(chr(letter) + str(i))\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1935658,
                "title": "easy-and-simple-solution-using-for-statement",
                "content": "```\\npublic class Solution {\\n    public IList<string> CellsInRange(string s) {\\n            IList<string> cells = new List<string>();\\n            int cs = Convert.ToInt32(s[1].ToString());\\n            int ce = Convert.ToInt32(s[4].ToString());\\n            char rs = s[0];\\n            char re = s[3];\\n               \\n            for(char j = rs; j <= re; j++) for(int i = cs; i <= ce; i++) cells.Add(j.ToString()+i.ToString());\\n            return cells;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public IList<string> CellsInRange(string s) {\\n            IList<string> cells = new List<string>();\\n            int cs = Convert.ToInt32(s[1].ToString());\\n            int ce = Convert.ToInt32(s[4].ToString());\\n            char rs = s[0];\\n            char re = s[3];\\n               \\n            for(char j = rs; j <= re; j++) for(int i = cs; i <= ce; i++) cells.Add(j.ToString()+i.ToString());\\n            return cells;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1918719,
                "title": "simple-python3-solution",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        c1, r1, c2, r2 = s[0], s[1], s[3], s[4]\\n        result = []\\n        for col in range(ord(c1), ord(c2) + 1):\\n            for row in range(ord(r1), ord(r2) + 1):\\n                result.append(f\"{chr(col)}{chr(row)}\")\\n        return result\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        c1, r1, c2, r2 = s[0], s[1], s[3], s[4]\\n        result = []\\n        for col in range(ord(c1), ord(c2) + 1):\\n            for row in range(ord(r1), ord(r2) + 1):\\n                result.append(f\"{chr(col)}{chr(row)}\")\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1905642,
                "title": "easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> res;\\n        for (char i = s[0]; i <= s[3]; i++)\\n        {\\n            for (char j = s[1]; j <= s[4]; j++)\\n            {\\n                res.push_back({i,j});\\n            }\\n            \\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> res;\\n        for (char i = s[0]; i <= s[3]; i++)\\n        {\\n            for (char j = s[1]; j <= s[4]; j++)\\n            {\\n                res.push_back({i,j});\\n            }\\n            \\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1885193,
                "title": "rust-simple-two-loops",
                "content": "```\\nimpl Solution {\\n    pub fn cells_in_range(s: String) -> Vec<String> {\\n        let mut ans = Vec::new();\\n        let s: Vec<char> = s.chars().collect();\\n        for i in s[0]..=s[3] {\\n            for j in s[1]..=s[4] {\\n                ans.push(format!(\"{}{}\", i, j));\\n            }\\n        }\\n        ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn cells_in_range(s: String) -> Vec<String> {\\n        let mut ans = Vec::new();\\n        let s: Vec<char> = s.chars().collect();\\n        for i in s[0]..=s[3] {\\n            for j in s[1]..=s[4] {\\n                ans.push(format!(\"{}{}\", i, j));\\n            }\\n        }\\n        ans\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1868457,
                "title": "javascript-solution",
                "content": "```\\nconst cellsInRange = (s) => {\\n  let letters = [s.charCodeAt(0), s.charCodeAt(3)]; // To get letter ASCII codes as columns\\n  let numbers = [Number(s[1]), Number(s[4])]; // For rows\\n  let res = [];\\n\\n  for (let i = letters[0]; i <= letters[1]; i++) {\\n    for (let j = numbers[0]; j <= numbers[1]; j++) {\\n      let cell = String.fromCharCode(i) + j;\\n      res.push(cell);\\n    }\\n  }\\n\\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst cellsInRange = (s) => {\\n  let letters = [s.charCodeAt(0), s.charCodeAt(3)]; // To get letter ASCII codes as columns\\n  let numbers = [Number(s[1]), Number(s[4])]; // For rows\\n  let res = [];\\n\\n  for (let i = letters[0]; i <= letters[1]; i++) {\\n    for (let j = numbers[0]; j <= numbers[1]; j++) {\\n      let cell = String.fromCharCode(i) + j;\\n      res.push(cell);\\n    }\\n  }\\n\\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1868179,
                "title": "python3-simple-two-loops-o-n-time-o-1-space",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        alphabet = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \\n                    \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \\n                    \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\\n        \\n        res = []\\n        start = alphabet.index(s[0])\\n        \\n        for i in range(start, len(alphabet)):\\n            j1 = int(s[1])\\n            j2 = int(s[4])\\n            for j in range(j1, j2+1):\\n                res.append(\"\" + alphabet[i] + str(j))\\n            if alphabet[i] == s[3]:\\n                break\\n                \\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        alphabet = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \\n                    \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \\n                    \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\\n        \\n        res = []\\n        start = alphabet.index(s[0])\\n        \\n        for i in range(start, len(alphabet)):\\n            j1 = int(s[1])\\n            j2 = int(s[4])\\n            for j in range(j1, j2+1):\\n                res.append(\"\" + alphabet[i] + str(j))\\n            if alphabet[i] == s[3]:\\n                break\\n                \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1856136,
                "title": "1-line-python-solution-80-faster-memory-less-than-25",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(i)+str(j) for i in range(ord(s[0]),ord(s[3])+1) for j in range(int(s[1]),int(s[4])+1)]\\n```\\n-------------------\\n***----- Taha Choura -----***\\n*taha.choura@outlook.com*",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(i)+str(j) for i in range(ord(s[0]),ord(s[3])+1) for j in range(int(s[1]),int(s[4])+1)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1854887,
                "title": "java-straight-forward-11ms-for",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        String alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\\n        String number = \"0123456789\";\\n        ArrayList<String> list = new ArrayList<>();\\n        String str = new String();\\n        int colIndexStart = alpha.indexOf(Character.toString(s.charAt(0)));\\n        int colIndexEnd = alpha.indexOf(Character.toString(s.charAt(3)));\\n        int rowIndexStart = Integer.valueOf(s.charAt(1)-48);\\n        int rowIndexEnd = Integer.valueOf(s.charAt(4)-48);\\n        for(int i=colIndexStart; i<=colIndexEnd; i++){\\n            for(int j=rowIndexStart; j<=rowIndexEnd; j++){\\n                str += alpha.charAt(i);\\n                str += number.charAt(j);\\n                list.add(str);\\n                str = \"\";\\n            }\\n        }\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        String alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\\n        String number = \"0123456789\";\\n        ArrayList<String> list = new ArrayList<>();\\n        String str = new String();\\n        int colIndexStart = alpha.indexOf(Character.toString(s.charAt(0)));\\n        int colIndexEnd = alpha.indexOf(Character.toString(s.charAt(3)));\\n        int rowIndexStart = Integer.valueOf(s.charAt(1)-48);\\n        int rowIndexEnd = Integer.valueOf(s.charAt(4)-48);\\n        for(int i=colIndexStart; i<=colIndexEnd; i++){\\n            for(int j=rowIndexStart; j<=rowIndexEnd; j++){\\n                str += alpha.charAt(i);\\n                str += number.charAt(j);\\n                list.add(str);\\n                str = \"\";\\n            }\\n        }\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1848280,
                "title": "c-cpp-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        int sc = s[0] - \\'A\\',ec = s[3] - \\'A\\', sr = s[1] - \\'1\\',er = s[4] - \\'1\\';\\n        vector<string> ans;\\n        for(int i = sc; i <= ec;i++){\\n            for(int j = sr ; j <= er;j++){\\n                ans.emplace_back(char(i + \\'A\\') + to_string(j + 1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/a0b2b76f-d776-425e-8fa5-7bf4e6a5497d_1647246926.234795.png)",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        int sc = s[0] - \\'A\\',ec = s[3] - \\'A\\', sr = s[1] - \\'1\\',er = s[4] - \\'1\\';\\n        vector<string> ans;\\n        for(int i = sc; i <= ec;i++){\\n            for(int j = sr ; j <= er;j++){\\n                ans.emplace_back(char(i + \\'A\\') + to_string(j + 1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1841324,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> ans;\\n        for(char c = s[0]; c <= s[3]; c++) {\\n            for(int i = s[1]-\\'0\\'; i <= s[4]-\\'0\\'; i++) {\\n                ans.push_back(string{c}+to_string(i));\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> ans;\\n        for(char c = s[0]; c <= s[3]; c++) {\\n            for(int i = s[1]-\\'0\\'; i <= s[4]-\\'0\\'; i++) {\\n                ans.push_back(string{c}+to_string(i));\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1839756,
                "title": "very-easy-c-solution-with-detailed-explanation",
                "content": "Explanation\\n-\\n\\n- The cells in given range X1N1 : X2N2 will range from X1 to X1 and N1 to N2\\n- For example if we have A3:C5, the first value will range from A to C and second one from 3 to 5.\\n- So we use a nested loop to enter the cells inside the vector.\\n\\n**Please UPVOTE if you understood!!**\\n```\\n    vector<string> cellsInRange(string s) {\\n        vector<string> res;\\n        for(char a=s[0]; a<=s[3]; a++)\\n            for(char b=s[1]; b<=s[4]; b++)\\n                res.push_back({a, b});\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n    vector<string> cellsInRange(string s) {\\n        vector<string> res;\\n        for(char a=s[0]; a<=s[3]; a++)\\n            for(char b=s[1]; b<=s[4]; b++)\\n                res.push_back({a, b});\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1833559,
                "title": "java-solution-time-space-o-n",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> result = new ArrayList<>();\\n        String[] split = s.split(\":\");\\n        char fs = split[0].charAt(0);\\n        char ss = split[1].charAt(0);\\n        int li = split[0].charAt(0);\\n        int fi = (int) Character.getNumericValue(split[0].charAt(1));\\n        int si = (int)Character.getNumericValue(split[1].charAt(1));\\n        int temp = fi;\\n\\n        while(li <= split[1].charAt(0)) {\\n            result.add((char)li+String.valueOf(temp));\\n            if(temp == si) {\\n                li++;\\n                temp = fi;\\n            } else \\n                temp++;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> result = new ArrayList<>();\\n        String[] split = s.split(\":\");\\n        char fs = split[0].charAt(0);\\n        char ss = split[1].charAt(0);\\n        int li = split[0].charAt(0);\\n        int fi = (int) Character.getNumericValue(split[0].charAt(1));\\n        int si = (int)Character.getNumericValue(split[1].charAt(1));\\n        int temp = fi;\\n\\n        while(li <= split[1].charAt(0)) {\\n            result.add((char)li+String.valueOf(temp));\\n            if(temp == si) {\\n                li++;\\n                temp = fi;\\n            } else \\n                temp++;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1829597,
                "title": "beginner-friendly-javascript-solution",
                "content": "**Time Complexity : O(n*m)**\\nwhere n = number of rows; m = number of columns\\n```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nvar cellsInRange = function(s) {\\n    var list = [];\\n    let c1 = s.charCodeAt(0), c2 = s.charCodeAt(3), r1 = s[1], r2 = s[4];\\n    for(let c=c1; c<=c2; c++){\\n      for(let r=r1; r<=r2; r++){\\n          list.push(String.fromCharCode(c) + r);\\n      }\\n    }\\n    return list;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nvar cellsInRange = function(s) {\\n    var list = [];\\n    let c1 = s.charCodeAt(0), c2 = s.charCodeAt(3), r1 = s[1], r2 = s[4];\\n    for(let c=c1; c<=c2; c++){\\n      for(let r=r1; r<=r2; r++){\\n          list.push(String.fromCharCode(c) + r);\\n      }\\n    }\\n    return list;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1829577,
                "title": "beginner-friendly-java-solution",
                "content": "**Time Complexity : O(n*m)**\\nwhere n = number of rows; m = number of columns\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> list = new ArrayList<>();\\n        char c1 = s.charAt(0), c2 = s.charAt(3);\\n        char r1 = s.charAt(1), r2 = s.charAt(4);\\n        for(char c=c1; c<=c2; c++){\\n            for(char r=r1; r<=r2; r++){\\n                list.add(\"\" + c + r);\\n            }\\n        }\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> list = new ArrayList<>();\\n        char c1 = s.charAt(0), c2 = s.charAt(3);\\n        char r1 = s.charAt(1), r2 = s.charAt(4);\\n        for(char c=c1; c<=c2; c++){\\n            for(char r=r1; r<=r2; r++){\\n                list.add(\"\" + c + r);\\n            }\\n        }\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1829425,
                "title": "java-2ms-98-explanations",
                "content": "```\\nclass Solution {\\n    /** Algorithm\\n        1. Loop from the starting letter to ending letter\\n        2. Inside this loop, loop again from starting number to ending number\\n        3. Use a char[2] to store the chars and add it to the list of cells.\\n        4. Return the answer/cells.\\n    */\\n    public List<String> cellsInRange(String s) {\\n        List<String> cells = new ArrayList<>();\\n        char[] cell = new char[2];\\n        for (char l = s.charAt(0); l <= s.charAt(3); l++) {\\n            cell[0] = l;\\n            for (char n = s.charAt(1); n <= s.charAt(4); n++) {\\n                cell[1] = n;\\n                cells.add(new String(cell));\\n            }\\n        }\\n        return cells;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    /** Algorithm\\n        1. Loop from the starting letter to ending letter\\n        2. Inside this loop, loop again from starting number to ending number\\n        3. Use a char[2] to store the chars and add it to the list of cells.\\n        4. Return the answer/cells.\\n    */\\n    public List<String> cellsInRange(String s) {\\n        List<String> cells = new ArrayList<>();\\n        char[] cell = new char[2];\\n        for (char l = s.charAt(0); l <= s.charAt(3); l++) {\\n            cell[0] = l;\\n            for (char n = s.charAt(1); n <= s.charAt(4); n++) {\\n                cell[1] = n;\\n                cells.add(new String(cell));\\n            }\\n        }\\n        return cells;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1828768,
                "title": "c-reserve-capacity-reuse-string-and-emplace-rather-than-push",
                "content": "The problem is trivial but we do a few things right beyond the bare minimum to solve it:\\n\\n1. We reserve the exact required capacity in our output vector.\\n2. We keep one string around and reuse it in our inner loop.\\n3. We transfer the string contents into our output vector with `emplace_back()` rather than `push_back()`\\n\\nWe also take a `string_view` rather than letting a string be passed in by value. \\n\\n## C++ Code\\n\\n```c++\\n    static vector<string> cellsInRange(const string_view s)\\n    {\\n        // The ends of the column and row ranges:\\n        const auto cend = s[3];\\n        const auto rend = s[4];\\n        \\n        // Let\\'s preallocate the exact heap space we need for our result vector:\\n        // If we didn\\'t do this we\\'d grow it exponentially and end up with unused\\n        // slop at the end of the final allocation most of the time.\\n        vector<string> res;\\n        res.reserve((cend - s[0]) * (rend-s[1]));\\n        \\n        // Let\\'s have a single string that we reuse in the inner loop:\\n        string str;\\n        str.resize(2);\\n        \\n        for(auto col = s[0]; col <= cend; ++col)\\n        {\\n            for(auto row = s[1]; row <= rend; ++row)\\n            {\\n                str[0] = col;\\n                str[1] = row;\\n                // Let\\'s emplace_back rather than push back:\\n                // I.e., we run the string copy constructor on\\n                // the raw memory at the back of the vector. \\n                res.emplace_back(str);\\n            }\\n        }\\n        return res;\\n    }\\n```\\n\\n# Emplace Empty String Variant\\n\\nInstead of copy constructing at the end of the result vector, we can default construct there and then resize and write the two desired characters into the correct locations within the result vector\\'s single heap allocation, relying on the small string optimisation to make the resize a trivial, non-allocating operation.\\n\\n## C++ Code\\n\\n```c++\\n    static vector<string> cellsInRange(const string_view s)\\n    {\\n        // The ends of the column and row ranges:\\n        const auto cend = s[3];\\n        const auto rend = s[4];\\n        \\n        // Let\\'s preallocate the exact heap space we need for our result vector:\\n        // If we didn\\'t do this we\\'d grow it exponentially and end up with unused\\n        // slop at the end of the final allocation most of the time.\\n        vector<string> res;\\n        res.reserve((cend - s[0]) * (rend-s[1]));\\n                \\n        for(auto col = s[0]; col <= cend; ++col)\\n        {\\n            for(auto row = s[1]; row <= rend; ++row)\\n            {\\n                // Let\\'s emplace_back rather than push back:\\n                // I.e., we run the string default constructor on\\n                // the raw memory at the back of the vector.\\n                // We then write row and colum directly into the string\\n                // at the back of the result vector:\\n                res.emplace_back();\\n                string& str = res.back();\\n                str.resize(2);\\n                str[0] = col;\\n                str[1] = row;\\n            }\\n        }\\n        return res;\\n    }\\n```\\n\\n# Notes\\n\\n* Although we make an effort to avoid allocating too much memory in these implementations, having power of two allocations might have upsides in some uses. For instance, if the results are only kept around temporarily as a step in some larger algorithm and then freed, the standard allocation sizes of the usual growth pattern might be quicker to allocate and free to memory pools. Customised allocations of minimal length, however, might fall back to a slower, general purpose allocation strategy, with the freeing step walking a list of free blocks looking for neighbours to coalesce with rather than simply adding the block to a fixed-size pool.",
                "solutionTags": [
                    "C"
                ],
                "code": "```c++\\n    static vector<string> cellsInRange(const string_view s)\\n    {\\n        // The ends of the column and row ranges:\\n        const auto cend = s[3];\\n        const auto rend = s[4];\\n        \\n        // Let\\'s preallocate the exact heap space we need for our result vector:\\n        // If we didn\\'t do this we\\'d grow it exponentially and end up with unused\\n        // slop at the end of the final allocation most of the time.\\n        vector<string> res;\\n        res.reserve((cend - s[0]) * (rend-s[1]));\\n        \\n        // Let\\'s have a single string that we reuse in the inner loop:\\n        string str;\\n        str.resize(2);\\n        \\n        for(auto col = s[0]; col <= cend; ++col)\\n        {\\n            for(auto row = s[1]; row <= rend; ++row)\\n            {\\n                str[0] = col;\\n                str[1] = row;\\n                // Let\\'s emplace_back rather than push back:\\n                // I.e., we run the string copy constructor on\\n                // the raw memory at the back of the vector. \\n                res.emplace_back(str);\\n            }\\n        }\\n        return res;\\n    }\\n```\n```c++\\n    static vector<string> cellsInRange(const string_view s)\\n    {\\n        // The ends of the column and row ranges:\\n        const auto cend = s[3];\\n        const auto rend = s[4];\\n        \\n        // Let\\'s preallocate the exact heap space we need for our result vector:\\n        // If we didn\\'t do this we\\'d grow it exponentially and end up with unused\\n        // slop at the end of the final allocation most of the time.\\n        vector<string> res;\\n        res.reserve((cend - s[0]) * (rend-s[1]));\\n                \\n        for(auto col = s[0]; col <= cend; ++col)\\n        {\\n            for(auto row = s[1]; row <= rend; ++row)\\n            {\\n                // Let\\'s emplace_back rather than push back:\\n                // I.e., we run the string default constructor on\\n                // the raw memory at the back of the vector.\\n                // We then write row and colum directly into the string\\n                // at the back of the result vector:\\n                res.emplace_back();\\n                string& str = res.back();\\n                str.resize(2);\\n                str[0] = col;\\n                str[1] = row;\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1827593,
                "title": "c-simple-and-straightforward",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> result;\\n        \\n        for(int i = s[0] - \\'A\\'; i <= s[3] - \\'A\\'; i++){\\n            for(int j = s[1] - \\'0\\'; j <= s[4] - \\'0\\'; j++){\\n                result.push_back(string(1, char(i + 65)) + string(1, char(j + 48)));\\n            }\\n        }\\n        \\n        return result;\\n    }\\n};\\n```\\n\\n**Please upvote if you love the solution**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> result;\\n        \\n        for(int i = s[0] - \\'A\\'; i <= s[3] - \\'A\\'; i++){\\n            for(int j = s[1] - \\'0\\'; j <= s[4] - \\'0\\'; j++){\\n                result.push_back(string(1, char(i + 65)) + string(1, char(j + 48)));\\n            }\\n        }\\n        \\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1825571,
                "title": "c-simple-implementation",
                "content": "```\\nclass Solution\\n{\\n  public:\\n    vector<string> cellsInRange(string s)\\n    {\\n        vector<string> result;\\n        string temp = \"\";\\n        for (char i = s[0]; i <= s[3]; i++)\\n        {\\n            temp = \"\";\\n            temp += i;\\n            for (char j = s[1]; j <= s[4]; j++)\\n            {\\n                temp += j;\\n                result.push_back(temp);\\n                temp.pop_back();\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\n  public:\\n    vector<string> cellsInRange(string s)\\n    {\\n        vector<string> result;\\n        string temp = \"\";\\n        for (char i = s[0]; i <= s[3]; i++)\\n        {\\n            temp = \"\";\\n            temp += i;\\n            for (char j = s[1]; j <= s[4]; j++)\\n            {\\n                temp += j;\\n                result.push_back(temp);\\n                temp.pop_back();\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1825539,
                "title": "easy-understanding",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans=new ArrayList<>();\\n        \\n        String[]arr=s.split(\":\");\\n        char sc=arr[0].charAt(0);\\n        int sr=Integer.parseInt(arr[0].substring(1));\\n        \\n        char ec=arr[1].charAt(0);\\n        int er=Integer.parseInt(arr[1].substring(1));\\n        \\n        for(int i=sc;i<=ec;i++){\\n            getAll(sr,i,er,ec,ans);\\n        }\\n        return ans;\\n    }\\n    \\n    public void getAll(int sr, int sc, int er, int ec,List<String> ans){\\n        while(sr<=er){\\n            ans.add((char)sc+\"\"+sr);\\n            sr++;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans=new ArrayList<>();\\n        \\n        String[]arr=s.split(\":\");\\n        char sc=arr[0].charAt(0);\\n        int sr=Integer.parseInt(arr[0].substring(1));\\n        \\n        char ec=arr[1].charAt(0);\\n        int er=Integer.parseInt(arr[1].substring(1));\\n        \\n        for(int i=sc;i<=ec;i++){\\n            getAll(sr,i,er,ec,ans);\\n        }\\n        return ans;\\n    }\\n    \\n    public void getAll(int sr, int sc, int er, int ec,List<String> ans){\\n        while(sr<=er){\\n            ans.add((char)sc+\"\"+sr);\\n            sr++;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1825495,
                "title": "python-one-line-use-ord-and-chr",
                "content": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(c)+str(r) for c in range(ord(s[0]),ord(s[3])+1) for r in range(int(s[1]),int(s[4])+1)]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(c)+str(r) for c in range(ord(s[0]),ord(s[3])+1) for r in range(int(s[1]),int(s[4])+1)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1825244,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char c1 = s[0];\\n        char r1 = s[1];\\n        char c2 = s[3];\\n        char r2 = s[4];\\n        vector<string> ans;\\n        for(int i=0;i+c1<=c2;i++)\\n        {\\n            for(int j=0;j+r1<=r2;j++)\\n            {\\n                string res;\\n                // s = \"K1:L2\"\\n                // here c1 = k,c2 = L,r1 = 1,r2 = 2 ,i=j=0.;\\n                // after 1st execution of for loop for j res = k+0+1+0 = k1\\n                // after 2nd execution of for loop for j res = k+0+1+1 = k2\\n                // after execution of for loop for i res = k+1+1+0 = L1\\n                res+=(c1+i);\\n                res+=(r1+j);\\n                ans.push_back(res);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char c1 = s[0];\\n        char r1 = s[1];\\n        char c2 = s[3];\\n        char r2 = s[4];\\n        vector<string> ans;\\n        for(int i=0;i+c1<=c2;i++)\\n        {\\n            for(int j=0;j+r1<=r2;j++)\\n            {\\n                string res;\\n                // s = \"K1:L2\"\\n                // here c1 = k,c2 = L,r1 = 1,r2 = 2 ,i=j=0.;\\n                // after 1st execution of for loop for j res = k+0+1+0 = k1\\n                // after 2nd execution of for loop for j res = k+0+1+1 = k2\\n                // after execution of for loop for i res = k+1+1+0 = L1\\n                res+=(c1+i);\\n                res+=(r1+j);\\n                ans.push_back(res);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1825193,
                "title": "simple-c-100-0ms-solution",
                "content": "\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvector<string> cellsInRange(string s) {\\n\\t\\t\\tstring ans=\"\";\\n\\t\\t\\tvector<string> v1;\\n\\t\\t\\tint a=int(s[0]),b=s[1]-\\'0\\',c=int(s[3]),d=s[4]-\\'0\\';\\n\\t\\t\\tint n=abs(a-c);\\n\\t\\t\\t\\n\\t\\t\\tfor(int i=0;i<=n;i++)\\n\\t\\t\\t  {\\n\\t\\t\\t\\t  for(int j=b;j<=d;j++)\\n              {\\n\\t\\t\\t\\tans+=char(a+i);    \\n\\t\\t\\t\\tans+=to_string(j);\\n\\t\\t\\t\\tv1.push_back(ans);\\n\\t\\t\\t\\tans=\"\";\\n          }\\n        }\\n\\t\\t\\treturn v1;\\n\\t\\t\\t}\\n\\t  };",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvector<string> cellsInRange(string s) {\\n\\t\\t\\tstring ans=\"\";\\n\\t\\t\\tvector<string> v1;\\n\\t\\t\\tint a=int(s[0]),b=s[1]-\\'0\\',c=int(s[3]),d=s[4]-\\'0\\';\\n\\t\\t\\tint n=abs(a-c);\\n\\t\\t\\t\\n\\t\\t\\tfor(int i=0;i<=n;i++)\\n\\t\\t\\t  {\\n\\t\\t\\t\\t  for(int j=b;j<=d;j++)\\n              {\\n\\t\\t\\t\\tans+=char(a+i);    \\n\\t\\t\\t\\tans+=to_string(j);\\n\\t\\t\\t\\tv1.push_back(ans);\\n\\t\\t\\t\\tans=\"\";\\n          }",
                "codeTag": "Java"
            },
            {
                "id": 1824768,
                "title": "faster-c-solution",
                "content": "vector<string> ans;\\n        for(char col = \\'A\\'; col <= \\'Z\\'; col++) {\\n            for(char row = \\'1\\'; row <= \\'9\\'; row++) {\\n                if(row >= s[1] && row <= s[4] && col >= s[0] && col <= s[3])\\n                    ans.push_back(string(1, col) + string(1, row));\\n            }\\n        }\\n        return ans;\\n\\t\\t\\n\\t\\t\\n\\tif(helps){\\n\\tupvotes++;\\n\\t}\\n\\telse ignore;",
                "solutionTags": [
                    "C"
                ],
                "code": "vector<string> ans;\\n        for(char col = \\'A\\'; col <= \\'Z\\'; col++) {\\n            for(char row = \\'1\\'; row <= \\'9\\'; row++) {\\n                if(row >= s[1] && row <= s[4] && col >= s[0] && col <= s[3])\\n                    ans.push_back(string(1, col) + string(1, row));\\n            }\\n        }\\n        return ans;\\n\\t\\t\\n\\t\\t\\n\\tif(helps){\\n\\tupvotes++;\\n\\t}\\n\\telse ignore;",
                "codeTag": "Unknown"
            },
            {
                "id": 1824368,
                "title": "c-nested-loop-easiest-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char col1 = s[0];\\n        char col2 = s[3];\\n        char row1 = s[1];\\n        char row2 = s[4];\\n        \\n        vector<string> res;\\n        \\n        for(char ch=col1;ch<=col2;ch++){\\n            for(char rw=row1;rw<=row2;rw++){\\n                string temp = \"\";\\n                temp += ch;\\n                temp += rw;\\n                res.push_back(temp);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char col1 = s[0];\\n        char col2 = s[3];\\n        char row1 = s[1];\\n        char row2 = s[4];\\n        \\n        vector<string> res;\\n        \\n        for(char ch=col1;ch<=col2;ch++){\\n            for(char rw=row1;rw<=row2;rw++){\\n                string temp = \"\";\\n                temp += ch;\\n                temp += rw;\\n                res.push_back(temp);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1824255,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        string start=s.substr(0,2);\\n        string end=s.substr(3,2);\\n        vector<string> res;\\n        for(char i=start[0];i<=end[0];i++)\\n            for(char j=start[1];j<=end[1];j++){\\n                    stringstream ss;\\n                    ss<<i<<j;\\n                    res.push_back(ss.str());\\n                }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        string start=s.substr(0,2);\\n        string end=s.substr(3,2);\\n        vector<string> res;\\n        for(char i=start[0];i<=end[0];i++)\\n            for(char j=start[1];j<=end[1];j++){\\n                    stringstream ss;\\n                    ss<<i<<j;\\n                    res.push_back(ss.str());\\n                }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1823890,
                "title": "easy-java-solution",
                "content": "List<String> res = new ArrayList<>();\\n        \\n        for (char c = s.charAt(0); c <= s.charAt(3); c++) {\\n            for (int i = s.charAt(1)-\\'0\\'; i <= s.charAt(4)-\\'0\\'; i++) {\\n                res.add(c + \"\" + i);                \\n            }\\n        }\\n        return res;",
                "solutionTags": [],
                "code": "List<String> res = new ArrayList<>();\\n        \\n        for (char c = s.charAt(0); c <= s.charAt(3); c++) {\\n            for (int i = s.charAt(1)-\\'0\\'; i <= s.charAt(4)-\\'0\\'; i++) {\\n                res.add(c + \"\" + i);                \\n            }\\n        }\\n        return res;",
                "codeTag": "Unknown"
            },
            {
                "id": 1823807,
                "title": "java-easy-solution-approach-explained",
                "content": "As result has to be first column sorted, then row sorted.\\nSo, loop through `c1 to c2` & add cells from `r1 to r2 for each column.`\\n\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char c1 = s.charAt(0);\\n        char r1 = s.charAt(1);\\n        \\n        char c2 = s.charAt(3);\\n        char r2 = s.charAt(4);\\n        \\n        List<String> res = new ArrayList<>();\\n        while (c1 <= c2) {\\n            char temp = r1;\\n            while (temp <= r2) {\\n                res.add(c1 + \"\" + temp);\\n                ++temp;\\n            }\\n            ++c1;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        char c1 = s.charAt(0);\\n        char r1 = s.charAt(1);\\n        \\n        char c2 = s.charAt(3);\\n        char r2 = s.charAt(4);\\n        \\n        List<String> res = new ArrayList<>();\\n        while (c1 <= c2) {\\n            char temp = r1;\\n            while (temp <= r2) {\\n                res.add(c1 + \"\" + temp);\\n                ++temp;\\n            }\\n            ++c1;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1823718,
                "title": "easy-c-bruteforce",
                "content": "\\t char a=s[0];\\n        char b=s[3];\\n        char c=s[1];\\n        char d=s[4];\\n        vector<string>res;\\n        for(char i=a;i<=b;i++){\\n           \\n            for(char x=c;x<=d;x++ ){\\n                string temp;\\n                temp+=i;\\n                temp+=x;\\n                res.push_back(temp);\\n            }\\n        }\\n        return res;",
                "solutionTags": [],
                "code": "\\t char a=s[0];\\n        char b=s[3];\\n        char c=s[1];\\n        char d=s[4];\\n        vector<string>res;\\n        for(char i=a;i<=b;i++){\\n           \\n            for(char x=c;x<=d;x++ ){\\n                string temp;\\n                temp+=i;\\n                temp+=x;\\n                res.push_back(temp);\\n            }\\n        }\\n        return res;",
                "codeTag": "Unknown"
            },
            {
                "id": 1823685,
                "title": "c-brute-force",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> ans;\\n        char c1 = s[0];\\n        char r1 = s[1];\\n        char c2 = s[3];\\n        char r2 = s[4];\\n        \\n        char rmin = min(r1,r2);\\n        char rmax = max(r1,r2);\\n        char cmin = min(c1,c2);\\n        char cmax = max(c1,c2);\\n        \\n        while(cmin <= cmax){\\n            char l = rmin; \\n            char r = rmax;\\n            while(l <= r){\\n                string str;\\n                str.push_back(cmin);\\n                str.push_back(l);\\n                ans.push_back(str);\\n                l++;\\n            }\\n            cmin++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> ans;\\n        char c1 = s[0];\\n        char r1 = s[1];\\n        char c2 = s[3];\\n        char r2 = s[4];\\n        \\n        char rmin = min(r1,r2);\\n        char rmax = max(r1,r2);\\n        char cmin = min(c1,c2);\\n        char cmax = max(c1,c2);\\n        \\n        while(cmin <= cmax){\\n            char l = rmin; \\n            char r = rmax;\\n            while(l <= r){\\n                string str;\\n                str.push_back(cmin);\\n                str.push_back(l);\\n                ans.push_back(str);\\n                l++;\\n            }\\n            cmin++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1823667,
                "title": "java-simple-loop-explanation",
                "content": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        String [] sp = s.split(\":\");\\n        int l = sp[0].charAt(1) -\\'0\\'; //col left\\n        int r = sp[1].charAt(1) -\\'0\\'; //col right\\n        int lc = sp[0].charAt(0); // row left\\n        int rc = sp[1].charAt(0); // row right\\n        List<String> out = new ArrayList<>();\\n        for(int i=lc;i<=rc;i++){\\n            for(int j=l;j<=r;j++){\\n                out.add(((char) i) + String.valueOf(j));\\n            }\\n        }\\n        return out;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public List<String> cellsInRange(String s) {\\n        String [] sp = s.split(\":\");\\n        int l = sp[0].charAt(1) -\\'0\\'; //col left\\n        int r = sp[1].charAt(1) -\\'0\\'; //col right\\n        int lc = sp[0].charAt(0); // row left\\n        int rc = sp[1].charAt(0); // row right\\n        List<String> out = new ArrayList<>();\\n        for(int i=lc;i<=rc;i++){\\n            for(int j=l;j<=r;j++){\\n                out.add(((char) i) + String.valueOf(j));\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1823631,
                "title": "c-straightforward",
                "content": "\\n\\nSee my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n\\n## Solution 1.\\n\\n```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-283/problems/cells-in-a-range-on-an-excel-sheet/\\n// Author: github.com/lzl124631x\\n// Time: O(1) since there are at most 26 * 9 cells.\\n// Space: O(1) extra space\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> ans;\\n        char a = s[0], b = s[3], x = s[1], y = s[4];\\n        for (; a <= b; ++a) {\\n            for (char i = x; i <= y; ++i) {\\n                ans.push_back(string(1, a) + string(1, i));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-283/problems/cells-in-a-range-on-an-excel-sheet/\\n// Author: github.com/lzl124631x\\n// Time: O(1) since there are at most 26 * 9 cells.\\n// Space: O(1) extra space\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> ans;\\n        char a = s[0], b = s[3], x = s[1], y = s[4];\\n        for (; a <= b; ++a) {\\n            for (char i = x; i <= y; ++i) {\\n                ans.push_back(string(1, a) + string(1, i));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4092928,
                "title": "python3-solution",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n      s=s.split(\\':\\')\\n      l1,l2=s[0][0],s[1][0]\\n      n1,n2=int(s[0][1]),int(s[1][1])\\n      L=[]\\n      ans=\\'\\'\\n      for i in range(ord(l1),ord(l2)+1):\\n          for j in range(n1,n2+1):\\n                ans=chr(i)+str(j)\\n                L.append(ans)\\n      return L\\n\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n      s=s.split(\\':\\')\\n      l1,l2=s[0][0],s[1][0]\\n      n1,n2=int(s[0][1]),int(s[1][1])\\n      L=[]\\n      ans=\\'\\'\\n      for i in range(ord(l1),ord(l2)+1):\\n          for j in range(n1,n2+1):\\n                ans=chr(i)+str(j)\\n                L.append(ans)\\n      return L\\n\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4091141,
                "title": "simples-c-solution-no-overengineering-keep-it-simple",
                "content": "Simple and intutive solution!\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n      vector<string> ans;\\n      int fromCIndex = s[0]-0, toCIndex = s[3]-0, fromIndex = s[1]-48, toIndex = s[4]-48;\\n      for(int i=fromCIndex;i<=toCIndex;i++) {\\n        for(int j=fromIndex; j<=toIndex;j++) {\\n          string x=(char)i + to_string(j);\\n          ans.push_back(x);\\n        }\\n      }\\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n      vector<string> ans;\\n      int fromCIndex = s[0]-0, toCIndex = s[3]-0, fromIndex = s[1]-48, toIndex = s[4]-48;\\n      for(int i=fromCIndex;i<=toCIndex;i++) {\\n        for(int j=fromIndex; j<=toIndex;j++) {\\n          string x=(char)i + to_string(j);\\n          ans.push_back(x);\\n        }\\n      }\\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4087499,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        int startCol = s[0] - \\'A\\';\\n        int endCol = s[3] - \\'A\\';\\n        int startRow = s[1] - \\'0\\';\\n        int endRow = s[4] - \\'0\\';\\n        vector<string> res;\\n        for (int col = startCol; col <= endCol; col++)\\n        {\\n            for (int row = startRow; row <= endRow; row++)\\n            {\\n                char tmp[3];\\n                tmp[0] = \\'A\\' + col;\\n                tmp[1] = \\'0\\' + row;\\n                tmp[2] = 0;\\n                res.push_back(string(tmp));\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        int startCol = s[0] - \\'A\\';\\n        int endCol = s[3] - \\'A\\';\\n        int startRow = s[1] - \\'0\\';\\n        int endRow = s[4] - \\'0\\';\\n        vector<string> res;\\n        for (int col = startCol; col <= endCol; col++)\\n        {\\n            for (int row = startRow; row <= endRow; row++)\\n            {\\n                char tmp[3];\\n                tmp[0] = \\'A\\' + col;\\n                tmp[1] = \\'0\\' + row;\\n                tmp[2] = 0;\\n                res.push_back(string(tmp));\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081414,
                "title": "cells-in-a-range-on-an-excel-sheet",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans = new ArrayList<>();\\n\\n        char startRow = s.charAt(0);\\n        char startCol = s.charAt(1);\\n        char endRow = s.charAt(3);\\n        char endCol = s.charAt(4);\\n\\n        while(startRow<=endRow)\\n        {\\n            while(startCol <= endCol)\\n            {\\n                ans.add(startRow+\"\"+startCol);\\n                startCol++;\\n            }\\n            startCol = s.charAt(1);\\n            startRow++;\\n        }\\n\\n        return ans;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans = new ArrayList<>();\\n\\n        char startRow = s.charAt(0);\\n        char startCol = s.charAt(1);\\n        char endRow = s.charAt(3);\\n        char endCol = s.charAt(4);\\n\\n        while(startRow<=endRow)\\n        {\\n            while(startCol <= endCol)\\n            {\\n                ans.add(startRow+\"\"+startCol);\\n                startCol++;\\n            }\\n            startCol = s.charAt(1);\\n            startRow++;\\n        }\\n\\n        return ans;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079983,
                "title": "simple-and-easy-java-solution-100-beats-full-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    Please Upvote.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        // List to store the ans.\\n        List<String> list = new ArrayList<>();\\n        // StringBuilder to make the each String.\\n        StringBuilder sb = new StringBuilder();\\n        // Variables to store values \\n        char c = s.charAt(0);\\n        int n = s.charAt(3) - c;\\n        int c1 = s.charAt(1)-\\'0\\';\\n        int m = (s.charAt(4)-\\'0\\')-c1;\\n        // It will iterate through all the columns.\\n        for(int i =0;i<=n;i++){\\n            // It will iterate through all the rows.\\n            for(int j=0;j<=m;j++){\\n                //First add column to the string then add row.\\n                sb.append((char)(c+i));\\n                sb.append(c1+j);\\n                // add the answer to the list.\\n                list.add(sb.toString());\\n                // It will make the StringBuilder empty.\\n                sb.setLength(0);\\n            }\\n        }\\n        // Finaly Return the answer.\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        // List to store the ans.\\n        List<String> list = new ArrayList<>();\\n        // StringBuilder to make the each String.\\n        StringBuilder sb = new StringBuilder();\\n        // Variables to store values \\n        char c = s.charAt(0);\\n        int n = s.charAt(3) - c;\\n        int c1 = s.charAt(1)-\\'0\\';\\n        int m = (s.charAt(4)-\\'0\\')-c1;\\n        // It will iterate through all the columns.\\n        for(int i =0;i<=n;i++){\\n            // It will iterate through all the rows.\\n            for(int j=0;j<=m;j++){\\n                //First add column to the string then add row.\\n                sb.append((char)(c+i));\\n                sb.append(c1+j);\\n                // add the answer to the list.\\n                list.add(sb.toString());\\n                // It will make the StringBuilder empty.\\n                sb.setLength(0);\\n            }\\n        }\\n        // Finaly Return the answer.\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076733,
                "title": "this-method-uses-chr-and-ord",
                "content": "# Intuition\\nUse indexing to get what we need, throw them into variables then somehow turn that integers using ord() and make a loop.\\n\\n# Approach\\njust a normal pattern loop idk how to verbalize it.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nno idea lol but consumes 15.89 mb\\n\\n# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        res = []\\n        rfinal = int(s[4])\\n        rstart = int(s[1])\\n        cfinal = ord(s[3])\\n        cstart = ord(s[0])\\n\\n        while cstart <= cfinal:\\n            x = chr(cstart)\\n            rstart = int(s[1])\\n\\n            while rstart <= rfinal:\\n                y = rstart\\n                res.append(x + str(y))\\n                rstart += 1\\n            cstart += 1\\n\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        res = []\\n        rfinal = int(s[4])\\n        rstart = int(s[1])\\n        cfinal = ord(s[3])\\n        cstart = ord(s[0])\\n\\n        while cstart <= cfinal:\\n            x = chr(cstart)\\n            rstart = int(s[1])\\n\\n            while rstart <= rfinal:\\n                y = rstart\\n                res.append(x + str(y))\\n                rstart += 1\\n            cstart += 1\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4074601,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(row * col)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n      vector<string> cells;\\n      for(int i=int(s[0]);i<=int(s[3]);i++ ){\\n        for(int j=int(s[1]);j<=int(s[4]);j++){\\n          cells.push_back(string(1, char(i))+string(1,char(j)));\\n        }\\n      }\\n      return cells;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n      vector<string> cells;\\n      for(int i=int(s[0]);i<=int(s[3]);i++ ){\\n        for(int j=int(s[1]);j<=int(s[4]);j++){\\n          cells.push_back(string(1, char(i))+string(1,char(j)));\\n        }\\n      }\\n      return cells;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4074026,
                "title": "java-solution-5ms-easy-implementation",
                "content": "# Approach\\n\\n1. **Initialization:**\\n\\n    - Create an ArrayList<String> named `ans` to store the generated cells.\\nHandle edge cases: If the input string `s` is null or empty, return an empty list.\\n\\n2. **Extract Column and Row Ranges:**\\n\\n    - Extract the column ranges `c1` and `c2` from the first and fourth characters of the input string s, respectively. These represent the starting and ending columns.\\n\\n    - Extract the row ranges `r1` and `r2` from the second and fifth characters of the input string s, respectively. These represent the starting and ending rows.\\n\\n3. **Generate Cells:**\\n\\n    - Use nested loops to iterate through the range of columns and rows.\\nIn the outer loop, iterate through columns from `c1` to `c2`.\\nIn the inner loop, iterate through rows from `r1` to `r2`.\\n\\n    - For each combination of column and row, generate a cell representation using `(char)(cell + \\'A\\' - 1)` to convert the column number back to the corresponding letter, and concatenate it with the row number.\\n\\n4. **Adding to List:**\\n\\n    - Add each generated cell to the list `ans`.\\n\\n5. **Return the List:**\\n\\n    - After generating all cells, return the list `ans`.\\n\\n\\n# Complexity\\n- Time complexity: O(col * row)\\n\\n- Space complexity: O(col + row)\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans = new ArrayList<>();\\n        // Edge cases\\n        if (s == null || s.length() == 0) {\\n            return ans;\\n        }\\n        // Getting values \\n        final int c1 = s.charAt(0) - \\'A\\' + 1;\\n        final int c2 = s.charAt(3) - \\'A\\' + 1;\\n        final int r1 = Character.getNumericValue(s.charAt(1));\\n        final int r2 = Character.getNumericValue(s.charAt(4));\\n        // Fill the list\\n        for (int cell = c1; cell <= c2; cell++) {\\n            for (int row = r1; row <= r2; row++) {\\n                ans.add((char)(cell + \\'A\\' - 1) + \"\" + row);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        List<String> ans = new ArrayList<>();\\n        // Edge cases\\n        if (s == null || s.length() == 0) {\\n            return ans;\\n        }\\n        // Getting values \\n        final int c1 = s.charAt(0) - \\'A\\' + 1;\\n        final int c2 = s.charAt(3) - \\'A\\' + 1;\\n        final int r1 = Character.getNumericValue(s.charAt(1));\\n        final int r2 = Character.getNumericValue(s.charAt(4));\\n        // Fill the list\\n        for (int cell = c1; cell <= c2; cell++) {\\n            for (int row = r1; row <= r2; row++) {\\n                ans.add((char)(cell + \\'A\\' - 1) + \"\" + row);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073143,
                "title": "kotlin-solution-beats-50-o-n-2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    //Using LinkedList\\nfun cellsInRange(s: String): List<String> {\\n    val linkedList = LinkedList<String>()\\n    for (row in s[0]..s[3]){\\n        for (col in s[1]..s[4]) linkedList.add(\"$row$col\")\\n    }\\n    return linkedList\\n}\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    //Using LinkedList\\nfun cellsInRange(s: String): List<String> {\\n    val linkedList = LinkedList<String>()\\n    for (row in s[0]..s[3]){\\n        for (col in s[1]..s[4]) linkedList.add(\"$row$col\")\\n    }\\n    return linkedList\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073105,
                "title": "recursion-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nfun cellsInRange(s: String): List<String> {\\n    val (firstChar, lastChar) = s.split(\\':\\')\\n\\n\\n    return recursiveCells(\\n        firstChar.first(),\\n        lastChar.first(), s[1].digitToInt(), s.last().digitToInt(), mutableListOf<String>()\\n    )\\n}\\n\\nfun recursiveCells(\\n    firstChar: Char,\\n    lastChar: Char,\\n    smallNumber: Int,\\n    largeNumber: Int,\\n    result: MutableList<String>\\n): MutableList<String> {\\n    if (firstChar > lastChar) return result\\n    for (number in smallNumber..largeNumber)\\n        result.add(\"${firstChar}${number}\")\\n\\n\\n    return recursiveCells(firstChar + 1, lastChar, smallNumber, largeNumber, result)\\n}\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\nfun cellsInRange(s: String): List<String> {\\n    val (firstChar, lastChar) = s.split(\\':\\')\\n\\n\\n    return recursiveCells(\\n        firstChar.first(),\\n        lastChar.first(), s[1].digitToInt(), s.last().digitToInt(), mutableListOf<String>()\\n    )\\n}\\n\\nfun recursiveCells(\\n    firstChar: Char,\\n    lastChar: Char,\\n    smallNumber: Int,\\n    largeNumber: Int,\\n    result: MutableList<String>\\n): MutableList<String> {\\n    if (firstChar > lastChar) return result\\n    for (number in smallNumber..largeNumber)\\n        result.add(\"${firstChar}${number}\")\\n\\n\\n    return recursiveCells(firstChar + 1, lastChar, smallNumber, largeNumber, result)\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072070,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        ans = []\\n        z = []\\n        z.append(s[0])\\n        z.append(s[3])\\n        input_str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n        a1 = z[0]\\n        a2 = z[1]\\n\\n        start_index = input_str.index(a1)\\n        end_index = input_str.index(a2)\\n        result = input_str[start_index:end_index + 1]\\n\\n        x = s[len(s)-1 : len(s)]\\n        for i in result:\\n            for j in range(int(s[1]),int(x)+1):\\n                ans.append(i+str(j))\\n        return ans\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        ans = []\\n        z = []\\n        z.append(s[0])\\n        z.append(s[3])\\n        input_str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n        a1 = z[0]\\n        a2 = z[1]\\n\\n        start_index = input_str.index(a1)\\n        end_index = input_str.index(a2)\\n        result = input_str[start_index:end_index + 1]\\n\\n        x = s[len(s)-1 : len(s)]\\n        for i in result:\\n            for j in range(int(s[1]),int(x)+1):\\n                ans.append(i+str(j))\\n        return ans\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071766,
                "title": "python-approach-beats-70-21ms-13-3-mb-ascii-approach",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def cellsInRange(self, s):\\n        outcome = []\\n        for col in range(ord(s[0]),ord(s[3]) + 1): # Ascii value (x, y + 1)\\n            for row in range (int(s[1]), int(s[4]) + 1):\\n                outcome.append(str(chr(col)) + str(row))\\n        return outcome\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def cellsInRange(self, s):\\n        outcome = []\\n        for col in range(ord(s[0]),ord(s[3]) + 1): # Ascii value (x, y + 1)\\n            for row in range (int(s[1]), int(s[4]) + 1):\\n                outcome.append(str(chr(col)) + str(row))\\n        return outcome\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069811,
                "title": "simplest-python-solution-ever",
                "content": "# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        startChar = s[0]\\n        endChar = s[3]\\n        startNum = int(s[1])\\n        endNum = int(s[4])\\n        ans = []\\n        temp = \\'\\'\\n        for i in range(ord(startChar), ord(endChar)+1):\\n            for j in range(startNum,endNum+1):\\n                temp = chr(i)+str(j)\\n                ans.append(temp)\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        startChar = s[0]\\n        endChar = s[3]\\n        startNum = int(s[1])\\n        endNum = int(s[4])\\n        ans = []\\n        temp = \\'\\'\\n        for i in range(ord(startChar), ord(endChar)+1):\\n            for j in range(startNum,endNum+1):\\n                temp = chr(i)+str(j)\\n                ans.append(temp)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065703,
                "title": "js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 61ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nvar cellsInRange = function(s) {\\n    \\n    const parts = s.split(\":\");\\n\\n    let startLetter = parts[0].charAt(0);\\n    let endLetter = parts[1].charAt(0);\\n    let startCell = parseInt(parts[0].charAt(1));\\n    let endCell = parseInt(parts[1].charAt(1));\\n    let result = [];\\n\\n    for (let i = startLetter.charCodeAt(0); i<= endLetter.charCodeAt(0); i++) {\\n        for (let j = startCell; j <= endCell; j++) {\\n            result.push(String.fromCharCode(i) + j);\\n        }\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nvar cellsInRange = function(s) {\\n    \\n    const parts = s.split(\":\");\\n\\n    let startLetter = parts[0].charAt(0);\\n    let endLetter = parts[1].charAt(0);\\n    let startCell = parseInt(parts[0].charAt(1));\\n    let endCell = parseInt(parts[1].charAt(1));\\n    let result = [];\\n\\n    for (let i = startLetter.charCodeAt(0); i<= endLetter.charCodeAt(0); i++) {\\n        for (let j = startCell; j <= endCell; j++) {\\n            result.push(String.fromCharCode(i) + j);\\n        }\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4053096,
                "title": "runtime-18-ms-90-memory-13-40-mb-90",
                "content": "\\n \\n# Code\\n```\\nclass Solution(object):\\n    def cellsInRange(self, s):\\n        output, l = [], string.ascii_uppercase  # l = letters \\n        for letter in l[l.index(s[0]):l.index(s[3]) + 1]: \\n            for number in range(int(s[1]), int(s[4]) + 1):\\n                output.append(letter + str(number))\\n        return output\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def cellsInRange(self, s):\\n        output, l = [], string.ascii_uppercase  # l = letters \\n        for letter in l[l.index(s[0]):l.index(s[3]) + 1]: \\n            for number in range(int(s[1]), int(s[4]) + 1):\\n                output.append(letter + str(number))\\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4044621,
                "title": "elixir-solution",
                "content": "\\n```\\n\\ndefmodule Solution do\\n  @moduledoc \"\"\"\\n  Suggested strategy:\\n  Engineer a loop within a loop.\\n  The outer loop needs to iterate from the start letter to the\\n  end letter .\\n  Within the inner loop iterate from the start number to the end\\n  number.\\n  Once the loop is underway. Manipulate the data into the\\n  requred form. ie: [ \"K1\", \"K2\", \"L1\", \"L2\"]\\n  Some flattening may be required too.\\n\\n  \"\"\"\\n  @spec cells_in_range(s :: String.t()) :: [String.t()]\\n  def cells_in_range(s) do\\n    start_ascii_value =   String.at(s, 0) |> :binary.first\\n    end_ascii_value = String.at(s,3) |> :binary.first\\n\\n    start_number = String.at(s, 1) |> String.to_integer\\n    end_number = String.at(s, 4) |> String.to_integer\\n\\n    # loop from start_ascii_value to end_ascii_value\\n    result =\\n      for o_val <- start_ascii_value..end_ascii_value do\\n        o_letter = <<o_val::utf8>>\\n        for in_num <- start_number..end_number do\\n          exp = o_letter <> Integer.to_string(in_num)\\n        end\\n      end\\n\\n    result |> List.flatten\\n  end\\nend\\n```",
                "solutionTags": [],
                "code": "```\\n\\ndefmodule Solution do\\n  @moduledoc \"\"\"\\n  Suggested strategy:\\n  Engineer a loop within a loop.\\n  The outer loop needs to iterate from the start letter to the\\n  end letter .\\n  Within the inner loop iterate from the start number to the end\\n  number.\\n  Once the loop is underway. Manipulate the data into the\\n  requred form. ie: [ \"K1\", \"K2\", \"L1\", \"L2\"]\\n  Some flattening may be required too.\\n\\n  \"\"\"\\n  @spec cells_in_range(s :: String.t()) :: [String.t()]\\n  def cells_in_range(s) do\\n    start_ascii_value =   String.at(s, 0) |> :binary.first\\n    end_ascii_value = String.at(s,3) |> :binary.first\\n\\n    start_number = String.at(s, 1) |> String.to_integer\\n    end_number = String.at(s, 4) |> String.to_integer\\n\\n    # loop from start_ascii_value to end_ascii_value\\n    result =\\n      for o_val <- start_ascii_value..end_ascii_value do\\n        o_letter = <<o_val::utf8>>\\n        for in_num <- start_number..end_number do\\n          exp = o_letter <> Integer.to_string(in_num)\\n        end\\n      end\\n\\n    result |> List.flatten\\n  end\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4042906,
                "title": "solution-using-product-and-ord",
                "content": "\\n\\n# Code\\n```\\nfrom itertools import product\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        cols=[]\\n        nums=[]\\n        for i in range(ord(s[0]),ord(s[3])+1):\\n            cols.append(chr(i))\\n        for j in range(int(s[1]),int(s[4])+1):\\n            nums.append(j)\\n        return [a+str(b) for a,b in list(product(cols,nums))]\\n\\n        \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom itertools import product\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        cols=[]\\n        nums=[]\\n        for i in range(ord(s[0]),ord(s[3])+1):\\n            cols.append(chr(i))\\n        for j in range(int(s[1]),int(s[4])+1):\\n            nums.append(j)\\n        return [a+str(b) for a,b in list(product(cols,nums))]\\n\\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4039418,
                "title": "check-this-easy-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> s1; \\n            \\n            int row1 =  s[1] - \\'0\\';\\n            int row2 = s[4]- \\'0\\';\\n            char strtCol = s[0]  ;\\n            char endCol = s[3] ;\\n            char k = \\'k\\';\\n            char l = \\'1\\';\\n            cout << k <<  l ;\\n            \\n            for(char j = strtCol ; j <= endCol ; j++){\\n                for( int i = row1 ; i <= row2 ; i++ ){\\n                    \\n                    string temp = \"\";\\n                    string ch = to_string(i);\\n                    temp += j;\\n                    temp += ch;\\n                    s1.push_back(temp);\\n                }\\n\\n            }\\n        return s1 ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        vector<string> s1; \\n            \\n            int row1 =  s[1] - \\'0\\';\\n            int row2 = s[4]- \\'0\\';\\n            char strtCol = s[0]  ;\\n            char endCol = s[3] ;\\n            char k = \\'k\\';\\n            char l = \\'1\\';\\n            cout << k <<  l ;\\n            \\n            for(char j = strtCol ; j <= endCol ; j++){\\n                for( int i = row1 ; i <= row2 ; i++ ){\\n                    \\n                    string temp = \"\";\\n                    string ch = to_string(i);\\n                    temp += j;\\n                    temp += ch;\\n                    s1.push_back(temp);\\n                }\\n\\n            }\\n        return s1 ;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4037232,
                "title": "very-easy-to-understand-please-upvote-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char c1= s[0];\\n        char c2= s[3];\\n        int r1= s[1]-\\'0\\';\\n        int r2= s[4]-\\'0\\';\\n\\n        vector<string>ans;\\n        for(char i=c1;i<=c2;i++)\\n        {\\n            for(int j=r1;j<=r2;j++)\\n            {\\n                string res=\"\";\\n                res=res+i;\\n                res=res+ to_string(j);\\n                ans.push_back(res);\\n            }\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        char c1= s[0];\\n        char c2= s[3];\\n        int r1= s[1]-\\'0\\';\\n        int r2= s[4]-\\'0\\';\\n\\n        vector<string>ans;\\n        for(char i=c1;i<=c2;i++)\\n        {\\n            for(int j=r1;j<=r2;j++)\\n            {\\n                string res=\"\";\\n                res=res+i;\\n                res=res+ to_string(j);\\n                ans.push_back(res);\\n            }\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4036357,
                "title": "easy-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) \\n    {\\n        int start=stoi(s.substr(1,2));\\n        int end=stoi(s.substr(4,5));\\n        char st=s[0];\\n        char en=s[3];\\n        vector<string> ans;\\n        for(char f=st;f<=en;f++)\\n        {\\n            for(int i=start;i<=end;i++)\\n            {\\n                string y=f+to_string(i);\\n                ans.push_back(y);\\n            }\\n        }\\n        return ans;    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) \\n    {\\n        int start=stoi(s.substr(1,2));\\n        int end=stoi(s.substr(4,5));\\n        char st=s[0];\\n        char en=s[3];\\n        vector<string> ans;\\n        for(char f=st;f<=en;f++)\\n        {\\n            for(int i=start;i<=end;i++)\\n            {\\n                string y=f+to_string(i);\\n                ans.push_back(y);\\n            }\\n        }\\n        return ans;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031451,
                "title": "simple-python-solution",
                "content": "# Intuition and Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nInitially I\\'d thought to convert the cell column titles from letters to their `int` counterparts, but after remembering that would merely be\\n```py\\n# Assuming `c` as the column title being converted.\\nord(\\'A\\') - ord(c) + 1\\n```\\nI then opted to instead used a ranged for loop over the ASCII values of each letter. This solution works since we are guaranteed that the column titles $$C$$ will follow the bounds $$\\\\forall c; c\\\\in C.\\\\ \\\\text{\\'A\\'}\\\\leq c\\\\leq\\\\text{\\'Z\\'}$$. Had this restriction not been applied, then conversion would have been neccessary.\\n\\nThis then meant that solving this problem would be as simple as using two ranged loops nested within each other.\\n\\n# Complexity\\n- Time complexity: Technically $$O(n^2)$$ or $$O(c\\\\cdot r)$$ where $$c$$ is the range of columns and $$r$$ is the range of rows. Could also be seen as $$O(n)$$ where $$n$$ is the number of rows since the columns are limited to 26--a constant value which may then be omitted.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        cells = []\\n        c1, r1, _, c2, r2 = list(s)\\n        for c in range(ord(c1), ord(c2) + 1):\\n            for r in range(int(r1), int(r2) + 1):\\n                cells.append(f\"{chr(c)}{str(r)}\")\\n        return cells\\n\\n```\\n\\n**Note: Looking back, I could have omitted** `str(r)` **for just** `r`.",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```py\\n# Assuming `c` as the column title being converted.\\nord(\\'A\\') - ord(c) + 1\\n```\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        cells = []\\n        c1, r1, _, c2, r2 = list(s)\\n        for c in range(ord(c1), ord(c2) + 1):\\n            for r in range(int(r1), int(r2) + 1):\\n                cells.append(f\"{chr(c)}{str(r)}\")\\n        return cells\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4030625,
                "title": "c-solution",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public IList<string> CellsInRange(string s)\\n    {\\n      IList<string> myList = new List<string> { };\\n      for (char c = s[0]; c <= s[3]; ++c)\\n        for (char r = s[1]; r <= s[4]; ++r)\\n          myList.Add($\"{c}{r}\");\\n\\n      foreach (var i in myList) Console.WriteLine(i);\\n      return myList;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public IList<string> CellsInRange(string s)\\n    {\\n      IList<string> myList = new List<string> { };\\n      for (char c = s[0]; c <= s[3]; ++c)\\n        for (char r = s[1]; r <= s[4]; ++r)\\n          myList.Add($\"{c}{r}\");\\n\\n      foreach (var i in myList) Console.WriteLine(i);\\n      return myList;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028714,
                "title": "o-n-o-n",
                "content": "# Code\\n```\\nclass Solution {\\n\\n    // TC: O(n)\\n    // SC: O(n)\\n    public List<String> cellsInRange(String s) {\\n        List<String> li = new ArrayList<>();\\n        char leftCol = s.charAt(0);\\n        char rightCol = s.charAt(3);\\n        char leftRow = s.charAt(1);\\n        char rightRow = s.charAt(4);\\n        \\n        for(char c=leftCol;c<=rightCol;c++){\\n            for(char r=leftRow;r<=rightRow;r++){\\n                li.add(c+\"\"+r);\\n            }\\n        }\\n        return li;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    // TC: O(n)\\n    // SC: O(n)\\n    public List<String> cellsInRange(String s) {\\n        List<String> li = new ArrayList<>();\\n        char leftCol = s.charAt(0);\\n        char rightCol = s.charAt(3);\\n        char leftRow = s.charAt(1);\\n        char rightRow = s.charAt(4);\\n        \\n        for(char c=leftCol;c<=rightCol;c++){\\n            for(char r=leftRow;r<=rightRow;r++){\\n                li.add(c+\"\"+r);\\n            }\\n        }\\n        return li;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023330,
                "title": "just-1-line-easy",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(c)+str(r) for c in range(ord(s[0]),ord(s[3])+1) for r in range(int(s[1]), int(s[4])+1)]\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        return [chr(c)+str(r) for c in range(ord(s[0]),ord(s[3])+1) for r in range(int(s[1]), int(s[4])+1)]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019477,
                "title": "max-min-row-easy-approach-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n\\n        int rmax=Math.max(s.charAt(1)-\\'0\\',s.charAt(4)-\\'0\\');\\n        int rmin=Math.min(s.charAt(1)-\\'0\\',s.charAt(4)-\\'0\\');\\n\\n        List<String> list=new ArrayList<>();\\n\\n        for(char col=s.charAt(0);col<=s.charAt(3);col++){\\n            for(int row=rmin;row<=rmax;row++){\\n                list.add(col+\"\"+row);\\n            }\\n        }\\n\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n\\n        int rmax=Math.max(s.charAt(1)-\\'0\\',s.charAt(4)-\\'0\\');\\n        int rmin=Math.min(s.charAt(1)-\\'0\\',s.charAt(4)-\\'0\\');\\n\\n        List<String> list=new ArrayList<>();\\n\\n        for(char col=s.charAt(0);col<=s.charAt(3);col++){\\n            for(int row=rmin;row<=rmax;row++){\\n                list.add(col+\"\"+row);\\n            }\\n        }\\n\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017355,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        ArrayList<String> arr=new ArrayList<String>();\\n        char c1=s.charAt(0);\\n        char c2=s.charAt(3);\\n        int n1=s.charAt(1)-\\'0\\';\\n        int n2=s.charAt(4)-\\'0\\';\\n        for(char i=c1;i<=c2;i++){\\n            for(int j=n1;j<=n2;j++){\\n            arr.add(i+\"\"+(char)(j+\\'0\\'));\\n        }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<String> cellsInRange(String s) {\\n        ArrayList<String> arr=new ArrayList<String>();\\n        char c1=s.charAt(0);\\n        char c2=s.charAt(3);\\n        int n1=s.charAt(1)-\\'0\\';\\n        int n2=s.charAt(4)-\\'0\\';\\n        for(char i=c1;i<=c2;i++){\\n            for(int j=n1;j<=n2;j++){\\n            arr.add(i+\"\"+(char)(j+\\'0\\'));\\n        }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017140,
                "title": "faster-99-02-by-using-javascript-accessible",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nvar cellsInRange = function(s) {\\n    var res = new Array();\\n    for(let i = s[0].charCodeAt(0); i <= s[3].charCodeAt(0); i++){\\n        for(let j = s[1].charCodeAt(0); j <= s[4].charCodeAt(0); j++){\\n            res.push(String.fromCharCode(i) + String.fromCharCode(j));\\n        }\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nvar cellsInRange = function(s) {\\n    var res = new Array();\\n    for(let i = s[0].charCodeAt(0); i <= s[3].charCodeAt(0); i++){\\n        for(let j = s[1].charCodeAt(0); j <= s[4].charCodeAt(0); j++){\\n            res.push(String.fromCharCode(i) + String.fromCharCode(j));\\n        }\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4015474,
                "title": "harshi-s-simple-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        int l=s[1],h=s[4];\\n        int a=s[0],b=s[3];\\n        vector<string> v;\\n        for(int i=a;i<=b;i++){\\n            for(int j=l;j<=h;j++){\\n                string k=\"\";\\n                k=k+char(i);\\n                k+=j;\\n                v.push_back(k);\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> cellsInRange(string s) {\\n        int l=s[1],h=s[4];\\n        int a=s[0],b=s[3];\\n        vector<string> v;\\n        for(int i=a;i<=b;i++){\\n            for(int j=l;j<=h;j++){\\n                string k=\"\";\\n                k=k+char(i);\\n                k+=j;\\n                v.push_back(k);\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014766,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        chars = [s[0],s[-2]]\\n        nums = [s[1], s[-1]]\\n\\n        res = []\\n\\n        currchar = chars[0]\\n        endchar = chars[1] \\n        \\n        while ord(currchar) != ord(endchar) + 1:\\n            for i in range(int(nums[0]), int(nums[1])+ 1):\\n                res.append(currchar + str(i))\\n            i = ord(currchar)\\n            i = i + 1\\n            currchar = chr(i)\\n\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        chars = [s[0],s[-2]]\\n        nums = [s[1], s[-1]]\\n\\n        res = []\\n\\n        currchar = chars[0]\\n        endchar = chars[1] \\n        \\n        while ord(currchar) != ord(endchar) + 1:\\n            for i in range(int(nums[0]), int(nums[1])+ 1):\\n                res.append(currchar + str(i))\\n            i = ord(currchar)\\n            i = i + 1\\n            currchar = chr(i)\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007521,
                "title": "straight-forward-o-n-m-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        rows = ord(s[3]) - ord(s[0]) + 1 \\n        cols = int(s[4]) - int(s[1]) + 1\\n        \\n        res = []\\n        for i in range(rows):\\n            for j in range(cols):\\n                char = chr(ord(s[0]) + i)\\n                num = str(int(s[1]) + j)\\n                res.append(char + num)\\n        \\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def cellsInRange(self, s: str) -> List[str]:\\n        rows = ord(s[3]) - ord(s[0]) + 1 \\n        cols = int(s[4]) - int(s[1]) + 1\\n        \\n        res = []\\n        for i in range(rows):\\n            for j in range(cols):\\n                char = chr(ord(s[0]) + i)\\n                num = str(int(s[1]) + j)\\n                res.append(char + num)\\n        \\n        return res\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1679654,
                "content": [
                    {
                        "username": "Bobzero",
                        "content": "honestly, it felt like you know how to solve but you don\\'t know how to write the code.. sometimes it is what it is. let\\'s keep learning"
                    },
                    {
                        "username": "JoeRogan",
                        "content": "The steps i took to solve this problem:\\n\\n-Create a list of letters starting at s[0] and ending at s[-2]\\n\\n-Loop through list\\n-Inner loop for numerical value, starting at s[1] and ending at s[-1]+1\\n-Append both letter and number to answer list \\n-return list \\n\\n:)"
                    },
                    {
                        "username": "jordwang",
                        "content": "Don\\'t you know how to read? it says no ANSWER in this discussion and yet you wrote it, does it make you feel better?... pathetic"
                    }
                ]
            },
            {
                "id": 1713985,
                "content": [
                    {
                        "username": "Bobzero",
                        "content": "honestly, it felt like you know how to solve but you don\\'t know how to write the code.. sometimes it is what it is. let\\'s keep learning"
                    },
                    {
                        "username": "JoeRogan",
                        "content": "The steps i took to solve this problem:\\n\\n-Create a list of letters starting at s[0] and ending at s[-2]\\n\\n-Loop through list\\n-Inner loop for numerical value, starting at s[1] and ending at s[-1]+1\\n-Append both letter and number to answer list \\n-return list \\n\\n:)"
                    },
                    {
                        "username": "jordwang",
                        "content": "Don\\'t you know how to read? it says no ANSWER in this discussion and yet you wrote it, does it make you feel better?... pathetic"
                    }
                ]
            }
        ]
    }
]