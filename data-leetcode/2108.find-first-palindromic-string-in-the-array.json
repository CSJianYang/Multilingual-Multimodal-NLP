[
    {
        "title": "Find First Palindromic String in the Array",
        "question_content": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\nA string is palindromic if it reads the same forward and backward.\n&nbsp;\nExample 1:\n\nInput: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\nOutput: \"ada\"\nExplanation: The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first.\n\nExample 2:\n\nInput: words = [\"notapalindrome\",\"racecar\"]\nOutput: \"racecar\"\nExplanation: The first and only string that is palindromic is \"racecar\".\n\nExample 3:\n\nInput: words = [\"def\",\"ghi\"]\nOutput: \"\"\nExplanation: There are no palindromic strings, so the empty string is returned.\n\n&nbsp;\nConstraints:\n\n\t1 <= words.length <= 100\n\t1 <= words[i].length <= 100\n\twords[i] consists only of lowercase English letters.",
        "solutions": [
            {
                "id": 1635101,
                "title": "reverse-string",
                "content": "A \"textbook\" way to do it is to compare the original and reverse strings.\\n\\n**C++**\\n```cpp\\nstring firstPalindrome(vector<string>& words) {\\n    for (auto &w : words)\\n        if (w == string(rbegin(w), rend(w)))\\n            return w;\\n    return \"\";\\n}\\n```\\nAnd here is more efficient way to check the string (no need to create temporary strings), courtesy of [nmashtalirov](https://leetcode.com/nmashtalirov/).\\n\\n**C++**\\n```cpp\\nstring firstPalindrome(vector<string>& words) {\\n    for (auto &w : words)\\n        if (equal(begin(w), end(w), rbegin(w)))\\n            return w;\\n    return  {};\\n} \\n```",
                "solutionTags": [],
                "code": "```cpp\\nstring firstPalindrome(vector<string>& words) {\\n    for (auto &w : words)\\n        if (w == string(rbegin(w), rend(w)))\\n            return w;\\n    return \"\";\\n}\\n```\n```cpp\\nstring firstPalindrome(vector<string>& words) {\\n    for (auto &w : words)\\n        if (equal(begin(w), end(w), rbegin(w)))\\n            return w;\\n    return  {};\\n} \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1705401,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\n    bool isPalindrome(string str){\\n        int i=0 ;\\n        int j=str.length()-1;\\n        while( i<= j ){\\n            if( str[i] != str[j] )\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        for(int i=0 ; i<words.size() ; i++){\\n            if(isPalindrome(words[i]))\\n                return words[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```\\nLiked it? please upvote :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    bool isPalindrome(string str){\\n        int i=0 ;\\n        int j=str.length()-1;\\n        while( i<= j ){\\n            if( str[i] != str[j] )\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        for(int i=0 ; i<words.size() ; i++){\\n            if(isPalindrome(words[i]))\\n                return words[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1676121,
                "title": "python-simple-solution-one-line",
                "content": "**Python :**\\n\\n```\\ndef firstPalindrome(self, words: List[str]) -> str:\\n        for word in words:\\n            if word == word[::-1]\\n                return word\\n            \\n        return \"\"\\n```\\n\\nand an one line version :\\n\\n```\\ndef firstPalindrome(self, words: List[str]) -> str:\\n\\treturn next((word for word in words if word == word[::-1]), \"\")\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef firstPalindrome(self, words: List[str]) -> str:\\n        for word in words:\\n            if word == word[::-1]\\n                return word\\n            \\n        return \"\"\\n```\n```\\ndef firstPalindrome(self, words: List[str]) -> str:\\n\\treturn next((word for word in words if word == word[::-1]), \"\")\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1635293,
                "title": "javascript-js-easy",
                "content": "```\\nvar firstPalindrome = function(words) {\\n    for (const word of words) {\\n        if (word === word.split(\\'\\').reverse().join(\\'\\')) return word;\\n    }\\n    \\n    return \\'\\';\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstPalindrome = function(words) {\\n    for (const word of words) {\\n        if (word === word.split(\\'\\').reverse().join(\\'\\')) return word;\\n    }\\n    \\n    return \\'\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3263727,
                "title": "easiest-java-solution-ever-exsisted-is-here",
                "content": "# Intuition\\n\\n\\nMORE EASY SOLUTION CANNOT EXISTS\\nHERE I am presenting only java code c++ will be similar to it\\n\\n**Approach\\nJust smile and solve and have fun**\\n\\nComplexity\\nNOTHING COMPLEX HERE\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(int i=0;i<words.length;i++){\\n        if(isp(words[i]))\\n        return words[i];\\n        }\\n        return \"\";\\n        \\n    }\\n    public boolean isp(String s)\\n    {\\n        StringBuffer sb=new StringBuffer(s);\\n        sb=sb.reverse();\\n        return s.equals(\"\"+sb);\\n    }\\n}// THANKS FOR CHECKING MY SOLUTION PLEASE UPVOTE.\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(int i=0;i<words.length;i++){\\n        if(isp(words[i]))\\n        return words[i];\\n        }\\n        return \"\";\\n        \\n    }\\n    public boolean isp(String s)\\n    {\\n        StringBuffer sb=new StringBuffer(s);\\n        sb=sb.reverse();\\n        return s.equals(\"\"+sb);\\n    }\\n}// THANKS FOR CHECKING MY SOLUTION PLEASE UPVOTE.\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1685285,
                "title": "java-easy-concise-code",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        StringBuffer sb = null;\\n        for(String s:words){\\n            sb = new StringBuffer(s);\\n            if(sb.reverse().toString().equals(s))\\n                return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```\\n\\nIf you like the solution, please upvote.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        StringBuffer sb = null;\\n        for(String s:words){\\n            sb = new StringBuffer(s);\\n            if(sb.reverse().toString().equals(s))\\n                return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1684633,
                "title": "python3-two-pointers-easy-understanding",
                "content": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for word in words:\\n            i, j = 0, len(word) - 1\\n            while i < j:\\n                if word[i] != word[j]: break\\n                i += 1\\n                j -= 1\\n            if i >= j: return word\\n        \\n        return \"\"\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for word in words:\\n            i, j = 0, len(word) - 1\\n            while i < j:\\n                if word[i] != word[j]: break\\n                i += 1\\n                j -= 1\\n            if i >= j: return word\\n        \\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1758906,
                "title": "java-easy-simple-efficient-solution",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String s : words){\\n            if(isIt(s))return s;\\n        }\\n        return \"\";\\n    }\\n    public boolean isIt(String word){\\n        for(int i = 0; i < word.length()/2; i++){\\n            if(word.charAt(i) != word.charAt(word.length()-1-i))return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\nPlease **UPVOTE** if you find this solution helpful.\\nThanks : )",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String s : words){\\n            if(isIt(s))return s;\\n        }\\n        return \"\";\\n    }\\n    public boolean isIt(String word){\\n        for(int i = 0; i < word.length()/2; i++){\\n            if(word.charAt(i) != word.charAt(word.length()-1-i))return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635144,
                "title": "best-java-solution",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n\\n        for(int i=0; i<words.length;i++){\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(words[i]);\\n            sb.reverse();\\n            // System.out.println(words[i]+\" \"+sb);\\n            if(words[i].equals(sb. toString())){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n\\n        for(int i=0; i<words.length;i++){\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(words[i]);\\n            sb.reverse();\\n            // System.out.println(words[i]+\" \"+sb);\\n            if(words[i].equals(sb. toString())){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635081,
                "title": "java-python-3-check-each-word",
                "content": "```java\\n    public String firstPalindrome(String[] words) {\\n        outer:\\n        for (String w : words) {\\n            for (int i = 0, j = w.length() - 1; i < j; ++i, --j) {\\n                if (w.charAt(i) != w.charAt(j)) {\\n                    continue outer;\\n                }\\n            }\\n            return w;\\n        }\\n        return \"\";\\n    }\\n```\\n```python\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for w in words:\\n            if w == w[:: -1]:\\n                return w\\n        return \\'\\'\\n```\\n\\nThe following code contributed by **@WilmerKrisp**\\n```python\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        return next((w for w in words if w == w[:: -1]), \\'\\')\\n```",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public String firstPalindrome(String[] words) {\\n        outer:\\n        for (String w : words) {\\n            for (int i = 0, j = w.length() - 1; i < j; ++i, --j) {\\n                if (w.charAt(i) != w.charAt(j)) {\\n                    continue outer;\\n                }\\n            }\\n            return w;\\n        }\\n        return \"\";\\n    }\\n```\n```python\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for w in words:\\n            if w == w[:: -1]:\\n                return w\\n        return \\'\\'\\n```\n```python\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        return next((w for w in words if w == w[:: -1]), \\'\\')\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2717681,
                "title": "two-pointers-solution-95-97",
                "content": "```\\n/**\\n * @param {string[]} words\\n * @return {string}\\n */\\nvar firstPalindrome = function(words) {\\n    for(let i = 0; i < words.length; i++){\\n        let left = 0;\\n        let right = words[i].length-1;\\n        \\n        while(left <= right+1){\\n            if(words[i][left] !== words[i][right]){\\n                break\\n            }else if(left >= right){\\n                return words[i]\\n            }else{\\n                left++\\n                right--\\n            }\\n        }\\n    }\\n    return \"\"\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @return {string}\\n */\\nvar firstPalindrome = function(words) {\\n    for(let i = 0; i < words.length; i++){\\n        let left = 0;\\n        let right = words[i].length-1;\\n        \\n        while(left <= right+1){\\n            if(words[i][left] !== words[i][right]){\\n                break\\n            }else if(left >= right){\\n                return words[i]\\n            }else{\\n                left++\\n                right--\\n            }\\n        }\\n    }\\n    return \"\"\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2847353,
                "title": "java-2-solutions-easy",
                "content": "### **Please Upvote** :D\\n##### 1. By checking if its a palindrome using two pointers:\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String s : words) {\\n            if (isPalindrome(s)) return s;\\n        }\\n\\n        return \"\";\\n    }\\n\\n    public boolean isPalindrome(String s) {\\n        int i = 0, j = s.length() - 1;\\n\\n        while (i < j) {\\n            if (s.charAt(i++) != s.charAt(j--)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n// TC: O(n * k), SC: O(1)\\n// n -> length of words\\n// k -> length of longest string in words\\n```\\n##### 2. Using strinbuilder to reverse the strings and compare:\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String s : words){\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(s).reverse();\\n\\n            if (s.equals(sb.toString())){\\n                return s;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n}\\n\\n// TC: O(n * k), SC: O(1)\\n// n -> length of words\\n// k -> length of longest string in words\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String s : words) {\\n            if (isPalindrome(s)) return s;\\n        }\\n\\n        return \"\";\\n    }\\n\\n    public boolean isPalindrome(String s) {\\n        int i = 0, j = s.length() - 1;\\n\\n        while (i < j) {\\n            if (s.charAt(i++) != s.charAt(j--)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n// TC: O(n * k), SC: O(1)\\n// n -> length of words\\n// k -> length of longest string in words\\n```\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String s : words){\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(s).reverse();\\n\\n            if (s.equals(sb.toString())){\\n                return s;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n}\\n\\n// TC: O(n * k), SC: O(1)\\n// n -> length of words\\n// k -> length of longest string in words\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1639469,
                "title": "easy-python-solution",
                "content": "```\\ndef firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if i==i[::-1]:\\n                return i\\n        return \"\"\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if i==i[::-1]:\\n                return i\\n        return \"\"\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2581499,
                "title": "java-solution-two-pointers-easy",
                "content": "```\\n\\tclass Solution {\\n\\t\\tpublic String firstPalindrome(String[] words) {\\n        \\n\\t\\t\\tfor(String s: words) if(check(s)) return s;\\n        \\n\\t\\t\\treturn \"\";\\n        \\n\\t\\t}\\n    \\n\\t\\tpublic boolean check(String s){\\n        \\n\\t\\t\\tboolean flag =  true;\\n        \\n\\t\\t\\tint  start = 0, end = s.length() - 1;\\n        \\n\\t\\t\\twhile(start <= end){\\n\\n\\t\\t\\t\\tif(s.charAt(start++) != s.charAt(end--)){\\n\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n        \\n\\t\\t\\treturn flag;\\n\\t\\t}\\n\\t}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\n\\tclass Solution {\\n\\t\\tpublic String firstPalindrome(String[] words) {\\n        \\n\\t\\t\\tfor(String s: words) if(check(s)) return s;\\n        \\n\\t\\t\\treturn \"\";\\n        \\n\\t\\t}\\n    \\n\\t\\tpublic boolean check(String s){\\n        \\n\\t\\t\\tboolean flag =  true;\\n        \\n\\t\\t\\tint  start = 0, end = s.length() - 1;\\n        \\n\\t\\t\\twhile(start <= end){\\n\\n\\t\\t\\t\\tif(s.charAt(start++) != s.charAt(end--)){\\n\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n        \\n\\t\\t\\treturn flag;\\n\\t\\t}\\n\\t}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2058377,
                "title": "c-easy-sol",
                "content": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i = 0;i<words.size();i++)\\n        {\\n            string res = words[i];\\n            string temp = res;\\n            \\n            reverse(temp.begin(),temp.end());\\n            if(res == temp)\\n                return res;\\n        }\\n        return \"\";\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i = 0;i<words.size();i++)\\n        {\\n            string res = words[i];\\n            string temp = res;\\n            \\n            reverse(temp.begin(),temp.end());\\n            if(res == temp)\\n                return res;\\n        }\\n        return \"\";\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1732544,
                "title": "simple-javascript-solution",
                "content": "```\\nvar firstPalindrome = function(words) {\\n    const isPalindrome = (w) => {\\n        if(w === w.split(\\'\\').reverse().join(\\'\\')) return true\\n        return false;\\n    }\\n    \\n    let result = words.find(word => isPalindrome(word));\\n    if(result) return result;\\n    return \\'\\';\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nvar firstPalindrome = function(words) {\\n    const isPalindrome = (w) => {\\n        if(w === w.split(\\'\\').reverse().join(\\'\\')) return true\\n        return false;\\n    }\\n    \\n    let result = words.find(word => isPalindrome(word));\\n    if(result) return result;\\n    return \\'\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1693979,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String s: words) {\\n            if(isPalindrome(s, 0, s.length() -1))\\n                return s;\\n        }\\n        return \"\";\\n    }\\n    private boolean isPalindrome(String s, int start, int end) {\\n        if(start >= end)\\n            return true;\\n        if(s.charAt(start) == s.charAt(end))\\n            return isPalindrome(s, ++start, --end);\\n        else\\n            return false;\\n    }\\n}\\n```\\nGuy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE.\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String s: words) {\\n            if(isPalindrome(s, 0, s.length() -1))\\n                return s;\\n        }\\n        return \"\";\\n    }\\n    private boolean isPalindrome(String s, int start, int end) {\\n        if(start >= end)\\n            return true;\\n        if(s.charAt(start) == s.charAt(end))\\n            return isPalindrome(s, ++start, --end);\\n        else\\n            return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635005,
                "title": "straightforward-approach-to-check-if-string-is-palindrome",
                "content": "```\\nclass Solution {\\npublic:\\n    bool check(string s)\\n    {\\n        int l=0,h=s.size()-1;\\n        while(l<h)\\n        {\\n            if(s[l++]!=s[h--])\\n                return false;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        int i;\\n        for(i=0;i<words.size();i++)\\n        {\\n            if(check(words[i]))\\n                return words[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check(string s)\\n    {\\n        int l=0,h=s.size()-1;\\n        while(l<h)\\n        {\\n            if(s[l++]!=s[h--])\\n                return false;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        int i;\\n        for(i=0;i<words.size();i++)\\n        {\\n            if(check(words[i]))\\n                return words[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2575648,
                "title": "100-faster-java-c-easy",
                "content": "```\\n// Java Solution:\\nclass Solution {\\n    boolean isPalindrome(String s)\\n    {\\n        int i=0,j=s.length()-1;\\n        while(i<j)\\n        {\\n            if(s.charAt(i) != s.charAt(j))\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String word:words)\\n        {\\n            if(isPalindrome(word))\\n                return word;\\n        }\\n        return \"\";\\n    }\\n}\\n\\n\\n\\n// C++ Solution:\\nclass Solution {\\npublic:\\n    bool isPalindrome(string s)\\n    {\\n        int i=0,j=s.size()-1;\\n        while(i<j)\\n        {\\n            if(s[i]!=s[j])\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(string word:words)\\n        {\\n            if(isPalindrome(word))\\n                return word;\\n        }\\n        return \"\";\\n    }\\n};\\n\\n\\n\\n/*\\n\\tif(you like)\\n\\t\\tplease upvote;\\n*/\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\n// Java Solution:\\nclass Solution {\\n    boolean isPalindrome(String s)\\n    {\\n        int i=0,j=s.length()-1;\\n        while(i<j)\\n        {\\n            if(s.charAt(i) != s.charAt(j))\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String word:words)\\n        {\\n            if(isPalindrome(word))\\n                return word;\\n        }\\n        return \"\";\\n    }\\n}\\n\\n\\n\\n// C++ Solution:\\nclass Solution {\\npublic:\\n    bool isPalindrome(string s)\\n    {\\n        int i=0,j=s.size()-1;\\n        while(i<j)\\n        {\\n            if(s[i]!=s[j])\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(string word:words)\\n        {\\n            if(isPalindrome(word))\\n                return word;\\n        }\\n        return \"\";\\n    }\\n};\\n\\n\\n\\n/*\\n\\tif(you like)\\n\\t\\tplease upvote;\\n*/\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2185762,
                "title": "find-first-palindromic-string-in-the-array",
                "content": "class Solution {\\n\\n    public String firstPalindrome(String []words){\\n        for (int i = 0; i < words.length; i++) {\\n            if (checkPalindrome(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n\\t\\n    public boolean checkPalindrome(String string){\\n        int start = 0;\\n        int end = string.length() - 1;\\n        while(start < end){\\n            if (string.charAt(start++) != string.charAt(end--)){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "class Solution {\\n\\n    public String firstPalindrome(String []words){\\n        for (int i = 0; i < words.length; i++) {\\n            if (checkPalindrome(words[i])){\\n                return words[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1689645,
                "title": "python-code",
                "content": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            # j=i[::-1]\\n            if i==i[::-1]:\\n                return i\\n        return \"\"\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            # j=i[::-1]\\n            if i==i[::-1]:\\n                return i\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1639472,
                "title": "c-simple-and-clean-efficient-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isPal(string word) {\\n        int l = 0, r = word.size()-1;\\n        while (l < r && word[l] == word[r]) l++, r--;\\n        return r == l || r+1 == l;\\n    }\\n    \\n    string firstPalindrome(vector<string>& words) {\\n        int i = 0;\\n        while (i < words.size() && !isPal(words[i])) i++;\\n        return i < words.size() ? words[i] : \"\";\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isPal(string word) {\\n        int l = 0, r = word.size()-1;\\n        while (l < r && word[l] == word[r]) l++, r--;\\n        return r == l || r+1 == l;\\n    }\\n    \\n    string firstPalindrome(vector<string>& words) {\\n        int i = 0;\\n        while (i < words.size() && !isPal(words[i])) i++;\\n        return i < words.size() ? words[i] : \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635153,
                "title": "python3-1-line",
                "content": "Please check out this [commit](https://github.com/gaosanyong/leetcode/commit/55c6a88797eef9ac745a3dbbff821a2aac735a70) for solutions of weekly 272. \\n\\n```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        return next((word for word in words if word == word[::-1]), \"\")\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        return next((word for word in words if word == word[::-1]), \"\")\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3396965,
                "title": "easy-to-understand-c-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo check palindrome or not we need to use the two pointer approach.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAccess all the strings of the vector \\'words\\' , then keep \\'i\\' at the first of the accessed string and keep \\'j\\' at the end of the accessed string, then check are they equal or not , then increase \\'i\\' and decrease \\'j\\' and continue the process (Same as palindrome checking).\\n\\n```\\nif (isPalindrome){\\n    ans=words[p];\\n    break;\\n``` \\nAfter getting the first palindrome word insert it into ans and break out of the loop then return ans.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n^2)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        string ans;\\n        for(int p=0;p<words.size();p++){\\n            int i=0;\\n            int j=words[p].size()-1;\\n            bool isPalindrome=true;\\n            while(i<=j){\\n                if(words[p][i]==words[p][j]){\\n                    i++;\\n                    j--;\\n                }else{\\n                    isPalindrome=false;\\n                    i++;\\n                    j--;\\n                }\\n            }\\n            if (isPalindrome){\\n                ans=words[p];\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n# Please Upvote if you find it helpful \\u2B06\\uFE0F",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nif (isPalindrome){\\n    ans=words[p];\\n    break;\\n```\n```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        string ans;\\n        for(int p=0;p<words.size();p++){\\n            int i=0;\\n            int j=words[p].size()-1;\\n            bool isPalindrome=true;\\n            while(i<=j){\\n                if(words[p][i]==words[p][j]){\\n                    i++;\\n                    j--;\\n                }else{\\n                    isPalindrome=false;\\n                    i++;\\n                    j--;\\n                }\\n            }\\n            if (isPalindrome){\\n                ans=words[p];\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2764081,
                "title": "java-4ms-stringbuilder-concept",
                "content": "class Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(int i=0;i<words.length;i++){\\n            StringBuilder sb = new StringBuilder(words[i]);\\n            if(words[i].equals(sb.reverse().toString()))\\n                return words[i];\\n        }\\n        return \"\";\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(int i=0;i<words.length;i++){\\n            StringBuilder sb = new StringBuilder(words[i]);\\n            if(words[i].equals(sb.reverse().toString()))\\n                return words[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2753431,
                "title": "c-simple-traversal-and-reverse-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isPallindrome(string s)\\n    {\\n        string p = s;\\n        reverse(p.begin(),p.end());\\n        if(p == s){\\n            return true;\\n        }\\n        return false;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++){\\n            if(isPallindrome(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```\\n**Please upvote if it was helpful for you, thank you!**",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isPallindrome(string s)\\n    {\\n        string p = s;\\n        reverse(p.begin(),p.end());\\n        if(p == s){\\n            return true;\\n        }\\n        return false;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++){\\n            if(isPallindrome(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2463467,
                "title": "funny-with-go",
                "content": "```\\nfunc firstPalindrome(words []string) string {\\n    isPalindromic := func(s string) bool {\\n        if len(s) < 2 {\\n            return true\\n        }\\n        \\n        l, r := 0, len(s)-1\\n        \\n        for l < r {\\n            if s[l] != s[r] {\\n                return false\\n            }\\n            \\n            l, r = l+1, r-1\\n        }\\n        \\n        return true\\n    }  \\n    \\n    for _, word := range words {\\n        if isPalindromic(word) {\\n            return word\\n        }\\n    }\\n    \\n    return \"\"\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc firstPalindrome(words []string) string {\\n    isPalindromic := func(s string) bool {\\n        if len(s) < 2 {\\n            return true\\n        }\\n        \\n        l, r := 0, len(s)-1\\n        \\n        for l < r {\\n            if s[l] != s[r] {\\n                return false\\n            }\\n            \\n            l, r = l+1, r-1\\n        }\\n        \\n        return true\\n    }  \\n    \\n    for _, word := range words {\\n        if isPalindromic(word) {\\n            return word\\n        }\\n    }\\n    \\n    return \"\"\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2398309,
                "title": "simple-c-solution-commented-readable",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s){\\n        int l = 0;\\n        int r = s.size() - 1;\\n        \\n        while(l <= r){\\n            if(s[l++] != s[r--]){ // we start with two pointer approach and see if both first and last letters match, we carry so until we see if the word is a palindrome or not and return the answer likewise\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    \\n    string firstPalindrome(vector<string>& words) {\\n        for(int i = 0; i < words.size(); i++){\\n            if(isValid(words[i])) // for every string we check a palindrome\\n                return words[i];\\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s){\\n        int l = 0;\\n        int r = s.size() - 1;\\n        \\n        while(l <= r){\\n            if(s[l++] != s[r--]){ // we start with two pointer approach and see if both first and last letters match, we carry so until we see if the word is a palindrome or not and return the answer likewise\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    \\n    string firstPalindrome(vector<string>& words) {\\n        for(int i = 0; i < words.size(); i++){\\n            if(isValid(words[i])) // for every string we check a palindrome\\n                return words[i];\\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2165242,
                "title": "c-easy-ans",
                "content": "```\\nclass Solution {\\n    bool isPalindrome(string s){\\n        int i=0;\\n        int j=s.length()-1;\\n        while(i<=j){\\n            if(s[i]!=s[j])\\n                return false;\\n                i++;\\n                j--;\\n        }\\n          return true;\\n    }\\n    public:\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++){\\n            if(isPalindrome(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n    bool isPalindrome(string s){\\n        int i=0;\\n        int j=s.length()-1;\\n        while(i<=j){\\n            if(s[i]!=s[j])\\n                return false;\\n                i++;\\n                j--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2022159,
                "title": "python-clean-and-simple-one-liner",
                "content": "**Solution**:\\n```\\nclass Solution:\\n    def firstPalindrome(self, words):\\n        for word in words:\\n            if word == word[::-1]: return word\\n        return \"\"\\n```\\n\\n**Solution with custom palindrome checker (Two-Pointer approach)**:\\n```\\nclass Solution:\\n    def firstPalindrome(self, words):\\n        for word in words:\\n            if self.isPalindrome(word): return word\\n        return \"\"\\n    \\n    def isPalindrome(self, word):\\n        l, r = 0, len(word)-1\\n        while l < r:\\n            if word[l] != word[r]: return False\\n            l += 1\\n            r -= 1\\n        return True\\n```\\n\\n**One-Liner**:\\n```\\nclass Solution:\\n    def firstPalindrome(self, words):\\n        return next((word for word in words if word==word[::-1]), \"\")\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words):\\n        for word in words:\\n            if word == word[::-1]: return word\\n        return \"\"\\n```\n```\\nclass Solution:\\n    def firstPalindrome(self, words):\\n        for word in words:\\n            if self.isPalindrome(word): return word\\n        return \"\"\\n    \\n    def isPalindrome(self, word):\\n        l, r = 0, len(word)-1\\n        while l < r:\\n            if word[l] != word[r]: return False\\n            l += 1\\n            r -= 1\\n        return True\\n```\n```\\nclass Solution:\\n    def firstPalindrome(self, words):\\n        return next((word for word in words if word==word[::-1]), \"\")\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1889678,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n\\t\\tstatic boolean isPal(String s){\\n        int i=0,j=s.length()-1;\\n        while(i<j){\\n            if(s.charAt(i)!=s.charAt(j)) return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String s: words){\\n            if(isPal(s)){\\n                return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\t\\tstatic boolean isPal(String s){\\n        int i=0,j=s.length()-1;\\n        while(i<j){\\n            if(s.charAt(i)!=s.charAt(j)) return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String s: words){\\n            if(isPal(s)){\\n                return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1673394,
                "title": "javascript-two-pointers",
                "content": "Complexity: O(N + M)\\n```\\nfunction firstPalindrome(words: string[]): string {\\n  for (let i = 0; i < words.length; i++) {\\n    if (isPalindrome(words[i])) {\\n      return words[i];\\n    }\\n  }\\n  \\n  return \\'\\';\\n};\\n\\nfunction isPalindrome(word: string): boolean {\\n  for (let i = 0, j = word.length - 1; i < j; i++, j--) {\\n    if (word[i] !== word[j]) {\\n      return false;\\n    }\\n  }\\n  return true;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\nfunction firstPalindrome(words: string[]): string {\\n  for (let i = 0; i < words.length; i++) {\\n    if (isPalindrome(words[i])) {\\n      return words[i];\\n    }\\n  }\\n  \\n  return \\'\\';\\n};\\n\\nfunction isPalindrome(word: string): boolean {\\n  for (let i = 0, j = word.length - 1; i < j; i++, j--) {\\n    if (word[i] !== word[j]) {\\n      return false;\\n    }\\n  }\\n  return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1636562,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn first_palindrome(words: Vec<String>) -> String {\\n        for word in &words {\\n            let half = word.len() / 2;\\n            if word.chars().take(half).eq(word.chars().rev().take(half)) {\\n                return word.to_string();\\n            }\\n        }\\n        \"\".to_string()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn first_palindrome(words: Vec<String>) -> String {\\n        for word in &words {\\n            let half = word.len() / 2;\\n            if word.chars().take(half).eq(word.chars().rev().take(half)) {\\n                return word.to_string();\\n            }\\n        }\\n        \"\".to_string()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1636285,
                "title": "swift-solution",
                "content": "Never in the spirit of things using reversed, but in a push...:\\n\\n```\\nclass Solution {\\n    func firstPalindrome(_ words: [String]) -> String {\\n        for word in words {\\n            if word == String(word.reversed()) {\\n                return word\\n            }\\n        }\\n        return \"\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func firstPalindrome(_ words: [String]) -> String {\\n        for word in words {\\n            if word == String(word.reversed()) {\\n                return word\\n            }\\n        }\\n        return \"\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3773031,
                "title": "python-easy-solution-word-word-1",
                "content": "# Code\\n```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if i==i[::-1]:\\n                return i\\n        return \"\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if i==i[::-1]:\\n                return i\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3628076,
                "title": "100-easy-to-understand-java",
                "content": "# Code\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n     for(String x: words){\\n        StringBuffer y = new StringBuffer(x);\\n        y.reverse();\\n        String z = y.toString();\\n        if(x.equals(z)){\\n            return x;\\n        }\\n     }  \\n     return \"\";   \\n      }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n     for(String x: words){\\n        StringBuffer y = new StringBuffer(x);\\n        y.reverse();\\n        String z = y.toString();\\n        if(x.equals(z)){\\n            return x;\\n        }\\n     }  \\n     return \"\";   \\n      }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3589248,
                "title": "easy-to-understand-c-sol",
                "content": "# PLEASE UPVOTE IF YO LIKE IT\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    bool isPalindrome(string str)\\n    {\\n        int n=str.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(str[i]!=str[n-1-i]) return false;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(isPalindrome(words[i])==true) return words[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    bool isPalindrome(string str)\\n    {\\n        int n=str.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(str[i]!=str[n-1-i]) return false;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(isPalindrome(words[i])==true) return words[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3502953,
                "title": "simple-java-solution-for-beginners-1ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String x : words) {\\n            if(palindrome(x)) {\\n                return x;\\n            }\\n        }\\n        return \"\";\\n    }\\n\\n    boolean palindrome(String string) {\\n        int i = (string.length()) / 2;\\n        int j = (string.length() - 1) / 2;\\n        while(i >= 0) {\\n            if(string.charAt(i--) != string.charAt(j++))\\n                return false;\\n            }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String x : words) {\\n            if(palindrome(x)) {\\n                return x;\\n            }\\n        }\\n        return \"\";\\n    }\\n\\n    boolean palindrome(String string) {\\n        int i = (string.length()) / 2;\\n        int j = (string.length() - 1) / 2;\\n        while(i >= 0) {\\n            if(string.charAt(i--) != string.charAt(j++))\\n                return false;\\n            }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3337592,
                "title": "100-easy-to-understand-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String s:words){\\n            StringBuilder sb=new StringBuilder(s);\\n            sb.reverse();\\n            if(s.equals(sb.toString()))\\n            return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String s:words){\\n            StringBuilder sb=new StringBuilder(s);\\n            sb.reverse();\\n            if(s.equals(sb.toString()))\\n            return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3252833,
                "title": "2108-java",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 3 ms\\n- Beats : 72.59%\\n- Memory : 42.5 MB\\n- Beats : 57.87%\\n\\n# Code\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        out : for(String str : words){\\n            int first = 0 , last = str.length()-1;\\n            while(first < last) {\\n                if(str.charAt(first++) (last--)) continue out;\\n            }\\n            return str;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        out : for(String str : words){\\n            int first = 0 , last = str.length()-1;\\n            while(first < last) {\\n                if(str.charAt(first++) (last--)) continue out;\\n            }\\n            return str;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249324,
                "title": "easiest-two-pointer-approach-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        def isitpalind(y):\\n            left=0\\n            right=len(y)-1\\n            while left<right:\\n                if y[left]!=y[right]:\\n                    return False\\n                left+=1\\n                right-=1\\n            return True\\n        for x in words:\\n            if isitpalind(x):\\n                return x\\n        return \"\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        def isitpalind(y):\\n            left=0\\n            right=len(y)-1\\n            while left<right:\\n                if y[left]!=y[right]:\\n                    return False\\n                left+=1\\n                right-=1\\n            return True\\n        for x in words:\\n            if isitpalind(x):\\n                return x\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3234388,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        string word = words[i];\\n        bool check_palindrom = true;\\n        for (int j = 0; j < word.size(); j++)\\n        {\\n            if (word[j] != word[word.size() - 1 - j])\\n            {\\n                check_palindrom = false;\\n                break;\\n            }\\n        }\\n        if (check_palindrom)\\n        {\\n            return words[i];\\n        }\\n    }\\n    return \"\";\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        string word = words[i];\\n        bool check_palindrom = true;\\n        for (int j = 0; j < word.size(); j++)\\n        {\\n            if (word[j] != word[word.size() - 1 - j])\\n            {\\n                check_palindrom = false;\\n                break;\\n            }\\n        }\\n        if (check_palindrom)\\n        {\\n            return words[i];\\n        }\\n    }\\n    return \"\";\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3073686,
                "title": "simple-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) \\n    {\\n        string x;\\n        int flag=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            x=words[i];\\n            reverse(words[i].begin(),words[i].end());\\n            if(x==words[i])\\n            {\\n                flag=1;\\n                break;\\n            }\\n        }\\n        return flag==0?\"\":x;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) \\n    {\\n        string x;\\n        int flag=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            x=words[i];\\n            reverse(words[i].begin(),words[i].end());\\n            if(x==words[i])\\n            {\\n                flag=1;\\n                break;\\n            }\\n        }\\n        return flag==0?\"\":x;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3060233,
                "title": "java-simple-and-easy-to-understand-solution",
                "content": "\\n# Approach\\nwe simply used for loop to oterate through each element and then simply checked if the String is palindrome or not\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(int i = 0 ; i < words.length ; i++){\\n            String str = words[i];\\n            boolean x = palindrome(str);\\n            if(x){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n    public boolean palindrome(String a){\\n        String b = \"\";\\n        for(int i = a.length()-1 ;i>=0 ;i--){\\n            b = b + a.charAt(i);\\n        }\\n        return b.equals(a);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(int i = 0 ; i < words.length ; i++){\\n            String str = words[i];\\n            boolean x = palindrome(str);\\n            if(x){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n    public boolean palindrome(String a){\\n        String b = \"\";\\n        for(int i = a.length()-1 ;i>=0 ;i--){\\n            b = b + a.charAt(i);\\n        }\\n        return b.equals(a);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3013370,
                "title": "c-solution-easytounderstand",
                "content": "Runtime: 63 ms, faster than 79.27% of C++ online submissions for Find First Palindromic String in the Array.\\nMemory Usage: 22.9 MB, less than 75.52% of C++ online submissions for Find First Palindromic String in the Array.\\n\\n```\\nbool isPalindrome(string str){\\n        int left=0 ;\\n        int right=str.size()-1;\\n        while( left<= right ){\\n            if( str[left] != str[right] )\\n                return false;\\n            left++;\\n            right--;\\n        }\\n        return true;\\n    }\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        for(int i=0 ; i<words.size() ; i++){\\n            if(isPalindrome(words[i]))\\n                return words[i];\\n        }\\n        return \"\";\\n    }\\n};\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        for(int i=0 ; i<words.size() ; i++){\\n            if(isPalindrome(words[i]))\\n                return words[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2917364,
                "title": "js-easy-solution-52ms-faster-than-100",
                "content": "![image.png](https://assets.leetcode.com/users/images/e441d5f9-d597-4260-bdbc-963ae2584c1e_1671180899.6902645.png)\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @return {string}\\n */\\nvar firstPalindrome = function(words) {\\n    for (let i = 0; i < words.length; i++) {\\n        const word = words[i];\\n        let isPalindromic = true;\\n        for (let j = 0; j < word.length/2; j++) {\\n            if (word[j] !== word[word.length - j - 1]) {\\n                isPalindromic = false;\\n                break;\\n            }\\n        }\\n        if (isPalindromic) return word;\\n    }\\n    return \\'\\';\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @return {string}\\n */\\nvar firstPalindrome = function(words) {\\n    for (let i = 0; i < words.length; i++) {\\n        const word = words[i];\\n        let isPalindromic = true;\\n        for (let j = 0; j < word.length/2; j++) {\\n            if (word[j] !== word[word.length - j - 1]) {\\n                isPalindromic = false;\\n                break;\\n            }\\n        }\\n        if (isPalindromic) return word;\\n    }\\n    return \\'\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2908205,
                "title": "easy-java-solution-2ms",
                "content": "class Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(String s1:words)\\n        {\\n            if(palindron(s1)) return s1;\\n        }\\n        return \"\";\\n    }\\n    public boolean palindron(String s)\\n    {\\n         for(int j=0;j<s.length()/2;j++){\\n    if(s.charAt(j)!=s.charAt(s.length()-j-1)) return false;\\n         }\\n        return true;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(String s1:words)\\n        {\\n            if(palindron(s1)) return s1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2887791,
                "title": "easy-java-solution",
                "content": "# Code\\n```\\nclass Solution \\n{\\n    public String firstPalindrome(String[] words) \\n    {\\n        for(String currWord : words)   \\n        {\\n            if(isPalindrome(currWord.toCharArray())) \\n                return currWord;\\n        }\\n        return new String();\\n    }\\n\\n    public boolean isPalindrome(char[] word)\\n    {\\n        for(int left=0, right=word.length-1; left<right; left++, right--)\\n        {\\n            if(word[left]!=word[right])\\n                return false;\\n        }\\n        return true;\\n    }   \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public String firstPalindrome(String[] words) \\n    {\\n        for(String currWord : words)   \\n        {\\n            if(isPalindrome(currWord.toCharArray())) \\n                return currWord;\\n        }\\n        return new String();\\n    }\\n\\n    public boolean isPalindrome(char[] word)\\n    {\\n        for(int left=0, right=word.length-1; left<right; left++, right--)\\n        {\\n            if(word[left]!=word[right])\\n                return false;\\n        }\\n        return true;\\n    }   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2651222,
                "title": "python-simple-solution-in-6-lines",
                "content": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        s=\\'\\'\\n        for i in words:\\n            if i == i[-1::-1]:\\n                s=i\\n                break\\n        return s\\n ```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        s=\\'\\'\\n        for i in words:\\n            if i == i[-1::-1]:\\n                s=i\\n                break\\n        return s\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 2596863,
                "title": "java-beginners-only",
                "content": "**Runtime: 3 ms, faster than 93.33% of Java online submissions for Find First Palindromic String in the Array.\\nMemory Usage: 42.6 MB, less than 89.76% of Java online submissions for Find First Palindromic String in the Array.**\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        String ans = \"\";\\n        for(int i = 0 ; i < words.length ; i++)\\n        {\\n            if(isPalindrome(words[i]))\\n            {\\n                return words[i];\\n            }\\n        }\\n        return ans;\\n    }\\n    public boolean isPalindrome(String s)\\n    {\\n        int n = s.length();\\n        for(int i = 0 ; i < s.length()/2 ; i++)\\n        {\\n            if(s.charAt(i) != s.charAt(n-i-1))\\n                return false;\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String firstPalindrome(String[] words) {\\n        String ans = \"\";\\n        for(int i = 0 ; i < words.length ; i++)\\n        {\\n            if(isPalindrome(words[i]))\\n            {\\n                return words[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2553117,
                "title": "c-beats-98-using-two-pointer-method",
                "content": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto x:words){\\n            if(x.size()==1) return x;\\n            int i=0,j=x.size()-1;\\n            bool flag=false;\\n            while(i<j){\\n                if(x[i++]!=x[j--]){\\n                    flag=false;\\n                    break;\\n                }\\n                else\\n                    flag=true;\\n            }\\n            if(flag)\\n                return x;\\n        }\\n        return \"\";\\n    }\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/4ddb6695-eae0-472e-9377-162211b0bd76_1662716697.330538.png)\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto x:words){\\n            if(x.size()==1) return x;\\n            int i=0,j=x.size()-1;\\n            bool flag=false;\\n            while(i<j){\\n                if(x[i++]!=x[j--]){\\n                    flag=false;\\n                    break;\\n                }\\n                else\\n                    flag=true;\\n            }\\n            if(flag)\\n                return x;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2448597,
                "title": "c-brute-force-easily-understandable-first-palindromic-string-in-the-array",
                "content": "```\\nbool isPalindrome(string s)\\n    {\\n        for(int i=0;i<s.length()/2;i++) if(s[i]!=s[s.length()-i-1]) return false;\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++) if(isPalindrome(words[i])) return words[i];\\n        return \"\";\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nbool isPalindrome(string s)\\n    {\\n        for(int i=0;i<s.length()/2;i++) if(s[i]!=s[s.length()-i-1]) return false;\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++) if(isPalindrome(words[i])) return words[i];\\n        return \"\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2346854,
                "title": "java-and-kotlin-solution",
                "content": "**Java :**\\n\\n```\\n public String firstPalindrome(String[] words) {\\n      \\n      for(String word :words){\\n        \\n        if(isWordPalindrome(word)){\\n          return word ;\\n        }\\n        \\n      }\\n      \\n      return \"\" ;\\n      \\n    }\\n  \\n    private boolean isWordPalindrome(String s){\\n      \\n      for(int i = 0 ; i< s.length() ; i++){\\n        \\n        if(s.charAt(i) != s.charAt(s.length()-1-i)){\\n          return false ;\\n         }\\n      }\\n      return true ;\\n    }\\n```\\n\\n\\n**Kotlin :**\\n\\n```\\n fun firstPalindrome(words: Array<String>): String {\\n      \\n      words.forEach{ word ->\\n        \\n        if( isWordPalindrome(word) ){\\n          return word ;\\n        }\\n        \\n      }\\n      \\n      return \"\";\\n      \\n    }\\n    \\n    private fun isWordPalindrome(s:String):Boolean{\\n      \\n      s.forEachIndexed{ index: Int, c: Char -> \\n        \\n        if(c != s[s.length-1-index]){\\n          return false ;\\n        }\\n        \\n      }\\n      \\n      return true ;\\n      \\n    }\\n    \\n```\\n\\n",
                "solutionTags": [
                    "Java",
                    "Kotlin"
                ],
                "code": "```\\n public String firstPalindrome(String[] words) {\\n      \\n      for(String word :words){\\n        \\n        if(isWordPalindrome(word)){\\n          return word ;\\n        }\\n        \\n      }\\n      \\n      return \"\" ;\\n      \\n    }\\n  \\n    private boolean isWordPalindrome(String s){\\n      \\n      for(int i = 0 ; i< s.length() ; i++){\\n        \\n        if(s.charAt(i) != s.charAt(s.length()-1-i)){\\n          return false ;\\n         }\\n      }\\n      return true ;\\n    }\\n```\n```\\n fun firstPalindrome(words: Array<String>): String {\\n      \\n      words.forEach{ word ->\\n        \\n        if( isWordPalindrome(word) ){\\n          return word ;\\n        }\\n        \\n      }\\n      \\n      return \"\";\\n      \\n    }\\n    \\n    private fun isWordPalindrome(s:String):Boolean{\\n      \\n      s.forEachIndexed{ index: Int, c: Char -> \\n        \\n        if(c != s[s.length-1-index]){\\n          return false ;\\n        }\\n        \\n      }\\n      \\n      return true ;\\n      \\n    }\\n    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1835822,
                "title": "java-solution-with-basic-approach",
                "content": "```\\npublic String firstPalindrome(String[] words) {\\n    for (String word : words) {\\n      int l = 0;\\n      int r = word.length() - 1;\\n      while (l < r) {\\n        if (word.charAt(l) != word.charAt(r)) {\\n          break;\\n        } else {\\n          l++;\\n          r--;\\n        }\\n      }\\n      if (l >= r) {\\n        return word;\\n      }\\n    }\\n\\n    return \"\";\\n  }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic String firstPalindrome(String[] words) {\\n    for (String word : words) {\\n      int l = 0;\\n      int r = word.length() - 1;\\n      while (l < r) {\\n        if (word.charAt(l) != word.charAt(r)) {\\n          break;\\n        } else {\\n          l++;\\n          r--;\\n        }\\n      }\\n      if (l >= r) {\\n        return word;\\n      }\\n    }\\n\\n    return \"\";\\n  }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1661465,
                "title": "c-naive-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++){\\n            if(isPalindrome(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n        \\n    }\\n    bool isPalindrome(string str)\\n    {\\n      int j = str.length() - 1;\\n\\n      for (int i = 0; i < j; i++, j--)\\n      {\\n        if (str[i] != str[j])\\n        {\\n          return false;\\n        }\\n      }\\n\\n      return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++){\\n            if(isPalindrome(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n        \\n    }\\n    bool isPalindrome(string str)\\n    {\\n      int j = str.length() - 1;\\n\\n      for (int i = 0; i < j; i++, j--)\\n      {\\n        if (str[i] != str[j])\\n        {\\n          return false;\\n        }\\n      }\\n\\n      return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1650585,
                "title": "java-c-solution",
                "content": "**Java Code**\\n\\n```\\nclass Solution {\\n    \\n    private boolean checkPalindrome(char[] s){\\n        int l = 0, r = s.length - 1;\\n        while(l <= r){\\n            if(s[l] != s[r]) return false;\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String it: words){\\n            if(checkPalindrome(it.toCharArray())) return it;\\n        }\\n        return \"\";\\n    }\\n};\\n```\\n\\n**C++ Code**\\n\\n```\\nclass Solution {\\n    private:\\n    bool checkPalindrome(string s){\\n        int l = 0, r = s.size() - 1; \\n        while(l <= r){\\n            if(s[l] != s[r]) return false;\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    }\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        // Time Comp: O(len * size)\\n        for(auto &it: words){\\n            if(checkPalindrome(it)) return it;\\n        }\\n        return \"\";  \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    \\n    private boolean checkPalindrome(char[] s){\\n        int l = 0, r = s.length - 1;\\n        while(l <= r){\\n            if(s[l] != s[r]) return false;\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String it: words){\\n            if(checkPalindrome(it.toCharArray())) return it;\\n        }\\n        return \"\";\\n    }\\n};\\n```\n```\\nclass Solution {\\n    private:\\n    bool checkPalindrome(string s){\\n        int l = 0, r = s.size() - 1; \\n        while(l <= r){\\n            if(s[l] != s[r]) return false;\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    }\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        // Time Comp: O(len * size)\\n        for(auto &it: words){\\n            if(checkPalindrome(it)) return it;\\n        }\\n        return \"\";  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1647011,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        return next(s for s in words + [\\'\\'] if s == s[::-1])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        return next(s for s in words + [\\'\\'] if s == s[::-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1640095,
                "title": "c-solution-easy-understanding-time-and-space-complexity",
                "content": "**C++ Solution**\\n* Time Complexity : O(NW) ---- where N is the number of string in words vector and W is the maximum size of any string in word vector\\n* Space Complexity : O(1)\\n```\\nclass Solution {\\npublic:\\n    bool palindrome(string s){\\n        int e = s.size()-1;\\n        for(int i = 0; i < s.size() ; i++){\\n            if(s[i]!= s[e--]) \\n                return false;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto s : words){\\n            if(palindrome(s)) return s;\\n        }\\n        return \"\";\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool palindrome(string s){\\n        int e = s.size()-1;\\n        for(int i = 0; i < s.size() ; i++){\\n            if(s[i]!= s[e--]) \\n                return false;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto s : words){\\n            if(palindrome(s)) return s;\\n        }\\n        return \"\";\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1636154,
                "title": "simple-java-solution",
                "content": "class Solution {\\n    public String firstPalindrome(String[] w) {\\n        for(String k:w)\\n        {\\n            StringBuilder nm=new StringBuilder();\\n            nm.append(k);\\n            nm.reverse();\\n            if(nm.toString().equals(k))\\n                return k;\\n        }\\n        return \"\";\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public String firstPalindrome(String[] w) {\\n        for(String k:w)\\n        {\\n            StringBuilder nm=new StringBuilder();\\n            nm.append(k);\\n            nm.reverse();\\n            if(nm.toString().equals(k))\\n                return k;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1635031,
                "title": "c-check-palindrome-straightforward",
                "content": "```\\nclass Solution {\\npublic:\\n    bool check(string s)\\n    {\\n        int n=s.size();\\n        for(int i=0,j=n-1;i<n && j>=0 && i<=j;i++,j--)\\n        {\\n            if(s[i]!=s[j])\\n                return false;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(string word:words)\\n        {\\n            if(check(word))\\n                return word;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check(string s)\\n    {\\n        int n=s.size();\\n        for(int i=0,j=n-1;i<n && j>=0 && i<=j;i++,j--)\\n        {\\n            if(s[i]!=s[j])\\n                return false;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(string word:words)\\n        {\\n            if(check(word))\\n                return word;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635020,
                "title": "easy-and-explained-python-solution",
                "content": "Just iterate through every word and check whether its a palindrome or not.\\nFor checking if its a palindrome i have used a simple function which works on:-\\n**FRONT** and **BACK** **pointer technique**.\\n\\n```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        def checkPalindrome(word):\\n            N = len(word)\\n            front = 0\\n            back = N-1\\n            while front<back:\\n                if word[front] == word[back]:\\n                    front+=1\\n                    back-=1\\n                else:\\n                    return False\\n                \\n            return True\\n        \\n        for word in words:\\n            flag = checkPalindrome(word)\\n            if flag:\\n                return word\\n        return \"\"\\n```\\nThank You !",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        def checkPalindrome(word):\\n            N = len(word)\\n            front = 0\\n            back = N-1\\n            while front<back:\\n                if word[front] == word[back]:\\n                    front+=1\\n                    back-=1\\n                else:\\n                    return False\\n                \\n            return True\\n        \\n        for word in words:\\n            flag = checkPalindrome(word)\\n            if flag:\\n                return word\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837048,
                "title": "best-java-solution-beats-100-java-submissions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] arr) \\n    {\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(isPalindrome(arr[i]))\\n            {\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n    boolean isPalindrome(String s)\\n    {\\n        int l=0;\\n        int r=s.length()-1;\\n        while(l<=r)\\n        {\\n            if(s.charAt(l)!=s.charAt(r))\\n            {\\n                return false;\\n            }\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] arr) \\n    {\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(isPalindrome(arr[i]))\\n            {\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n    boolean isPalindrome(String s)\\n    {\\n        int l=0;\\n        int r=s.length()-1;\\n        while(l<=r)\\n        {\\n            if(s.charAt(l)!=s.charAt(r))\\n            {\\n                return false;\\n            }\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3648797,
                "title": "simple-sol-in-python",
                "content": "\\n```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if(i[::-1]==i):\\n                return i\\n                break\\n        else:\\n            return \"\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if(i[::-1]==i):\\n                return i\\n                break\\n        else:\\n            return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3618386,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor each word in words check if it\\'s reverse equal to it. return the word if true. if no such word is there return empty string. \\n\\n# Complexity\\n- Time complexity:O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\nPlease upvote if you  find it helpful  \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0; i<words.size(); i++){\\n            string temp = words[i]; \\n            reverse(temp.begin(), temp.end()); \\n            if(words[i] == temp) return words[i];\\n        } \\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0; i<words.size(); i++){\\n            string temp = words[i]; \\n            reverse(temp.begin(), temp.end()); \\n            if(words[i] == temp) return words[i];\\n        } \\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3502933,
                "title": "simple-java-solution-for-beginners-4ms-beats-57-16",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String x : words) {\\n            StringBuilder SB = new StringBuilder(x);\\n            if(x.equals(SB.reverse().toString())) {\\n                return x;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String x : words) {\\n            StringBuilder SB = new StringBuilder(x);\\n            if(x.equals(SB.reverse().toString())) {\\n                return x;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3479850,
                "title": "swift-two-pointers-simple-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    func firstPalindrome(_ words: [String]) -> String {\\n        for word in words {\\n            if isPalindromic(word) {\\n                return word\\n            }\\n        }\\n\\n        return \"\"\\n    }\\n\\n    func isPalindromic(_ word: String) -> Bool {\\n        let arr = Array(word)\\n        var l = 0\\n        var r = arr.count - 1\\n\\n        while l < r {\\n            if arr[l] != arr[r] {\\n                return false\\n            }\\n\\n            l += 1\\n            r -= 1\\n        }\\n\\n        return true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    func firstPalindrome(_ words: [String]) -> String {\\n        for word in words {\\n            if isPalindromic(word) {\\n                return word\\n            }\\n        }\\n\\n        return \"\"\\n    }\\n\\n    func isPalindromic(_ word: String) -> Bool {\\n        let arr = Array(word)\\n        var l = 0\\n        var r = arr.count - 1\\n\\n        while l < r {\\n            if arr[l] != arr[r] {\\n                return false\\n            }\\n\\n            l += 1\\n            r -= 1\\n        }\\n\\n        return true\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3411634,
                "title": "fastest-way-with-java-2ms",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean isPalindromic(String a){\\n        if(a.charAt(0)!= a.charAt(a.length()-1)){\\n            return false;\\n        }\\n        int right = a.length()-2;\\n        int left  = 1;\\n        while(right>=left){\\n            char let1 = a.charAt(right);\\n            char let2 = a.charAt(left);\\n            if(let1!=let2){\\n                return false;\\n            }\\n            right--;\\n            left++;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String a: words){\\n            if(isPalindromic(a)){\\n                return a;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isPalindromic(String a){\\n        if(a.charAt(0)!= a.charAt(a.length()-1)){\\n            return false;\\n        }\\n        int right = a.length()-2;\\n        int left  = 1;\\n        while(right>=left){\\n            char let1 = a.charAt(right);\\n            char let2 = a.charAt(left);\\n            if(let1!=let2){\\n                return false;\\n            }\\n            right--;\\n            left++;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String a: words){\\n            if(isPalindromic(a)){\\n                return a;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3378172,
                "title": "easy-solution-for-beginner-swift",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func firstPalindrome(_ words: [String]) -> String {\\n        var result = String()\\n\\n        for word in words {\\n            if word == String(word.reversed()) {\\n                result = word\\n                break\\n            }\\n        }   \\n        return result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func firstPalindrome(_ words: [String]) -> String {\\n        var result = String()\\n\\n        for word in words {\\n            if word == String(word.reversed()) {\\n                result = word\\n                break\\n            }\\n        }   \\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3293265,
                "title": "c-simple-and-clean-code-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    //check for palindrome, return true if it.\\n    bool check(string &word)\\n    {\\n        int l = 0;\\n        int r = word.size()-1;\\n\\n        while(l<r)\\n        {\\n            if(word[l] != word[r])\\n            {\\n                return false;\\n            }\\n            l++;\\n             r--;\\n        }\\n        return true;\\n\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(check(words[i]))\\n            return words[i];\\n        }\\n\\n        return \"\";\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    //check for palindrome, return true if it.\\n    bool check(string &word)\\n    {\\n        int l = 0;\\n        int r = word.size()-1;\\n\\n        while(l<r)\\n        {\\n            if(word[l] != word[r])\\n            {\\n                return false;\\n            }\\n            l++;\\n             r--;\\n        }\\n        return true;\\n\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(check(words[i]))\\n            return words[i];\\n        }\\n\\n        return \"\";\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3254468,
                "title": "find-first-palindromic-string-in-the-array-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(word.length())\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        int i;\\n        string s=\"\";\\n        for(i=0 ; i<words.size() ; i++)\\n        {\\n            s = words[i];\\n            reverse(words[i].begin(), words[i].end());\\n            if(s==words[i])\\n            {\\n                return words[i];\\n            }\\n        }\\n        s = \"\";\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        int i;\\n        string s=\"\";\\n        for(i=0 ; i<words.size() ; i++)\\n        {\\n            s = words[i];\\n            reverse(words[i].begin(), words[i].end());\\n            if(s==words[i])\\n            {\\n                return words[i];\\n            }\\n        }\\n        s = \"\";\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2848336,
                "title": "java-code-using-stringbuilder",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String s : words){\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(s).reverse();\\n\\n            if (s.equals(sb.toString())){\\n                return s;\\n            }\\n        }\\n        \\n        return \"\";\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String s : words){\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(s).reverse();\\n\\n            if (s.equals(sb.toString())){\\n                return s;\\n            }\\n        }\\n        \\n        return \"\";\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2722316,
                "title": "c-solution-java-solution-beginners-friendly",
                "content": "**Upvote this post if you like it \\u2714**\\n\\n### C++ Solution\\n\\nclass Solution {\\npublic:\\n    \\n    bool checkPalindrome(string str){\\n    int s = 0;\\n    int e = str.size()-1;\\n    while(s<=e){\\n        if(str[s] != str[e]){\\n            return 0;\\n        }\\n        else{\\n            s++;\\n            e--;\\n        }\\n    }\\n    return 1;\\n}\\n    \\n    string firstPalindrome(vector<string>& words) {\\n        \\n        for(int i = 0; i<words.size(); i++){\\n            if(checkPalindrome(words[i]))\\n                return words[i];\\n        }\\n        return \"\";\\n    }\\n};\\n\\n### **Java Solution**\\n\\nclass Solution {\\n    \\n     \\n    public boolean checkPalindrome(String str){\\n    int s = 0;\\n    int e = str.length()-1;\\n    while(s<=e){\\n        if(str.charAt(s) != str.charAt(e)){\\n            return false;\\n        }\\n        else{\\n            s++;\\n            e--;\\n        }\\n    }\\n    return true;\\n}\\n    \\n     public String firstPalindrome(String[] words) {\\n        \\n        for(String s:words){\\n            if(checkPalindrome(s))\\n                return s;\\n        }\\n        return \"\";\\n    }\\n}",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    \\n    bool checkPalindrome(string str){\\n    int s = 0;\\n    int e = str.size()-1;\\n    while(s<=e){\\n        if(str[s] != str[e]){\\n            return 0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2684269,
                "title": "4-ms-faster-than-80-63-memory-42-2-mb-less-than-95-22-java",
                "content": "```\\n    public String firstPalindrome(String[] words) {\\n        for (String word : words)\\n            if (new StringBuilder().append(word).reverse().toString()//we put it in StringBuilder to roll the word\\n                    .equals(word)) //compare with an unrolled word\\n                return word;\\n     return \"\";\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public String firstPalindrome(String[] words) {\\n        for (String word : words)\\n            if (new StringBuilder().append(word).reverse().toString()//we put it in StringBuilder to roll the word\\n                    .equals(word)) //compare with an unrolled word\\n                return word;\\n     return \"\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2565236,
                "title": "c-solution-best-approach-best-for-beginner-simple-solution",
                "content": "class Solution {\\nprivate:\\n    bool isplindrome(string word){\\n        int i=0;\\n        int j=word.length()-1;\\n        while(i<=j)\\n        {\\n            if (word[i]!=word[j])\\n            {\\n                return false;\\n            }\\n            i++;\\n            j--;\\n        }\\n        return true;\\n        \\n    }\\n    \\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        for (int i=0;i<words.size();i++)\\n        {\\n            if (isplindrome(words[i]))\\n                return words[i];\\n        }\\n        \\n        return \"\";\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\nprivate:\\n    bool isplindrome(string word){\\n        int i=0;\\n        int j=word.length()-1;\\n        while(i<=j)\\n        {\\n            if (word[i]!=word[j])\\n            {\\n                return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2565199,
                "title": "python-solution-o-n",
                "content": "Time Complexcity O(N)\\nSpace Complexcity O(1)\\n```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for word in words:\\n            print(word)\\n            if word==word[::-1]:\\n                return word\\n        return \"\"\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for word in words:\\n            print(word)\\n            if word==word[::-1]:\\n                return word\\n        return \"\"\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2559085,
                "title": "python3-find-first-palindromic-string-in-the-array-palindrome-strings-easy-clean-code",
                "content": "```class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        \\n        def is_palindrome(s):\\n            return s==s[::-1]\\n        \\n        for word in words:\\n            if is_palindrome(word):\\n                return word\\n        return \"\"",
                "solutionTags": [
                    "Python",
                    "Two Pointers",
                    "String"
                ],
                "code": "```class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        \\n        def is_palindrome(s):\\n            return s==s[::-1]\\n        \\n        for word in words:\\n            if is_palindrome(word):\\n                return word\\n        return \"\"",
                "codeTag": "Java"
            },
            {
                "id": 2498266,
                "title": "c-simple-solution-using-reverse-function",
                "content": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        int n=words.size();\\n        string s=\"\";\\n        for (int i=0;i<n;i++)\\n        {\\n            s=words[i];\\n            reverse(s.begin(),s.end());\\n            if(s==words[i])\\n            {\\n                return words[i];\\n            }\\n            s=\"\";\\n        }\\n        return s;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        int n=words.size();\\n        string s=\"\";\\n        for (int i=0;i<n;i++)\\n        {\\n            s=words[i];\\n            reverse(s.begin(),s.end());\\n            if(s==words[i])\\n            {\\n                return words[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2491161,
                "title": "ruby-1-line-simple-solution",
                "content": "```\\ndef first_palindrome(words)\\n    words.find{|word| word.reverse == word} || \\'\\'\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\ndef first_palindrome(words)\\n    words.find{|word| word.reverse == word} || \\'\\'\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2473784,
                "title": "python-reverse-string",
                "content": "\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for w in words:\\n            if w == w[::-1]:\\n                return w\\n        return \"\"",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for w in words:\\n            if w == w[::-1]:\\n                return w\\n        return \"\"",
                "codeTag": "Python3"
            },
            {
                "id": 2460100,
                "title": "easy-c-solution-by-spid0r",
                "content": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        string s;\\n        for (int i=0; i<words.size(); i++) {\\n            s=words[i];\\n            reverse(s.begin(), s.end());\\n            if (s==words[i]) {\\n                return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        string s;\\n        for (int i=0; i<words.size(); i++) {\\n            s=words[i];\\n            reverse(s.begin(), s.end());\\n            if (s==words[i]) {\\n                return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2447643,
                "title": "95-beats-c-easy-o-n-word-length-space-o-1",
                "content": "class Solution {\\npublic:\\n    int i;\\n    bool isplin(string &str){\\n        for(i = 0; i < str.length()/2; i++){\\n            if(str[i] != str[str.length()-1-i])return false;\\n        }return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto &i: words){\\n            if(isplin(i))return i;\\n        }\\n        return \"\";\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int i;\\n    bool isplin(string &str){\\n        for(i = 0; i < str.length()/2; i++){\\n            if(str[i] != str[str.length()-1-i])return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2401450,
                "title": "crisp-quick-solution",
                "content": "```\\npublic class Solution {\\n    public string FirstPalindrome(string[] words) {\\n        foreach(string word in words){\\n            if(IsPalindrome(word))\\n                return word;            \\n        }\\n        return \"\";\\n    }\\n    \\n    private bool IsPalindrome(string s){\\n        int start = 0, end = s.Length-1;\\n        while(start < end){\\n            if(s[start] != s[end]){\\n                return false;\\n            }\\n            ++start;  --end;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Two Pointers"
                ],
                "code": "```\\npublic class Solution {\\n    public string FirstPalindrome(string[] words) {\\n        foreach(string word in words){\\n            if(IsPalindrome(word))\\n                return word;            \\n        }\\n        return \"\";\\n    }\\n    \\n    private bool IsPalindrome(string s){\\n        int start = 0, end = s.Length-1;\\n        while(start < end){\\n            if(s[start] != s[end]){\\n                return false;\\n            }\\n            ++start;  --end;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2391995,
                "title": "simple-easy-c-solution",
                "content": "```\\nclass Solution {\\nbool isPalindrome(string &word){\\n    int left = 0;\\n    int right = word.size() - 1;\\n    while(left < right){\\n        if(word[left] != word[right]){\\n            return false;\\n        }\\n        left++;\\n        right--;\\n    }\\n    return true;\\n}\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto str: words){\\n            if(isPalindrome(str)) return str;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\nbool isPalindrome(string &word){\\n    int left = 0;\\n    int right = word.size() - 1;\\n    while(left < right){\\n        if(word[left] != word[right]){\\n            return false;\\n        }\\n        left++;\\n        right--;\\n    }\\n    return true;\\n}\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto str: words){\\n            if(isPalindrome(str)) return str;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2357081,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String word : words) {\\n            for (int i = 0, j = word.length() - 1; i <= j;) {\\n                if (word.charAt(i++) != word.charAt(j--)) break;\\n                if (i >= j) return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for (String word : words) {\\n            for (int i = 0, j = word.length() - 1; i <= j;) {\\n                if (word.charAt(i++) != word.charAt(j--)) break;\\n                if (i >= j) return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2354121,
                "title": "c-reverse-string",
                "content": "```\\n\\tstring firstPalindrome(vector<string>& words) {\\n        for(string s : words){\\n            string t = s;\\n            reverse(begin(t), end(t));\\n            if(t==s) return s;\\n        }\\n        return \"\";\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\tstring firstPalindrome(vector<string>& words) {\\n        for(string s : words){\\n            string t = s;\\n            reverse(begin(t), end(t));\\n            if(t==s) return s;\\n        }\\n        return \"\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2349824,
                "title": "easy-c-o-n-97-74-faster-clean-code",
                "content": "![image](https://assets.leetcode.com/users/images/462670a3-a161-4fe3-8ac9-2c4e602d5ad0_1659086021.6513038.png)\\n\\n\\nclass Solution {\\n    \\n    bool isPallindrome(string &str)\\n    {\\n        int s  = 0 ; \\n        int e = str.length()-1;\\n        \\n        while(s<e)\\n        {\\n            if(str[s++]!= str[e--])\\n                return false;\\n        }\\n        \\n        return true;\\n    }\\n    \\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        string ans  = \"\";\\n        \\n        \\n        for(int i = 0 ; i < words.size() ; i++)\\n        {\\n            if(isPallindrome(words[i]))\\n                return words[i];\\n        }\\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "Two Pointers",
                    "String"
                ],
                "code": "class Solution {\\n    \\n    bool isPallindrome(string &str)\\n    {\\n        int s  = 0 ; \\n        int e = str.length()-1;\\n        \\n        while(s<e)\\n        {\\n            if(str[s++]!= str[e--])\\n                return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2330429,
                "title": "find-first-palindromic-string-in-the-array",
                "content": "var firstPalindrome = function(words) {\\n    let cnt=0;\\n    for(let i=0;i<words.length;i++)\\n        {\\n            if(words[i]===reversefun(words[i]))\\n                {\\n                    return words[i];\\n                    cnt++;\\n            break;\\n                }\\n            }\\n    if(cnt==0)\\n        return \"\";\\n    \\n    function reversefun(str)\\n    {\\n       let temp=\"\"\\n        for(let j=str.length-1;j>=0;j--)\\n            {\\n               temp=temp+str[j]; \\n            }\\n        return temp;\\n    }\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var firstPalindrome = function(words) {\\n    let cnt=0;\\n    for(let i=0;i<words.length;i++)\\n        {\\n            if(words[i]===reversefun(words[i]))\\n                {\\n                    return words[i];\\n                    cnt++;\\n            break;\\n                }\\n            }\\n    if(cnt==0)\\n        return \"\";\\n    \\n    function reversefun(str)\\n    {\\n       let temp=\"\"\\n        for(let j=str.length-1;j>=0;j--)\\n            {\\n               temp=temp+str[j]; \\n            }\\n        return temp;\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2312807,
                "title": "find-first-palindromic-string-in-the-array-in-c-easy-understanding",
                "content": "class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        // we are create string \\n        string ans, tmp;\\n        \\n        // iterate the given string \\n        for(int i=0; i<words.size();i++){\\n            // copy the string into ans and tmp strings\\n            ans=words[i];\\n            tmp=ans;\\n            \\n            // reverse the tmp string using STL functions in c++ \\n            reverse(tmp.begin(), tmp.end());\\n            \\n            // after that compair the string and return the ans\\n            if(tmp==ans){\\n                return ans;\\n            }\\n        }\\n        return \"\";\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        // we are create string \\n        string ans, tmp;\\n        \\n        // iterate the given string \\n        for(int i=0; i<words.size();i++){\\n            // copy the string into ans and tmp strings\\n            ans=words[i];\\n            tmp=ans;\\n            \\n            // reverse the tmp string using STL functions in c++ \\n            reverse(tmp.begin(), tmp.end());\\n            \\n            // after that compair the string and return the ans\\n            if(tmp==ans){\\n                return ans;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2304201,
                "title": "c-simple-two-approaches",
                "content": "1. Using 2 Pointers to check if ith string is a palindrome\\n\\t```\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool isPalin(string s) {\\n\\t\\t\\tint l = 0, r = s.size() - 1;\\n\\t\\t\\twhile (l <= r) if(s[l++] != s[r--]) return false;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tstring firstPalindrome(vector<string>& w) {\\n\\t\\t\\tfor (int s = 0 ; s < w.size() ; s++) if (isPalin(w[s])) return w[s];\\n\\n\\t\\t\\treturn \"\";\\n\\t\\t}\\n\\t};\\n\\t```\\n\\n2. Comparing ith string with its reverse\\n\\t```\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tstring firstPalindrome(vector<string>& w) {\\n\\t\\t\\tfor (int s = 0 ; s < w.size() ; s++) {\\n\\t\\t\\t\\tstring rev = w[s];\\n\\t\\t\\t\\treverse(rev.begin(), rev.end());\\n\\t\\t\\t\\tif (w[s] == rev) return w[s];\\n\\t\\t\\t}\\n\\t\\t\\treturn \"\";\\n\\t\\t}\\n\\t};\\n\\t```",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool isPalin(string s) {\\n\\t\\t\\tint l = 0, r = s.size() - 1;\\n\\t\\t\\twhile (l <= r) if(s[l++] != s[r--]) return false;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tstring firstPalindrome(vector<string>& w) {\\n\\t\\t\\tfor (int s = 0 ; s < w.size() ; s++) if (isPalin(w[s])) return w[s];\\n\\n\\t\\t\\treturn \"\";\\n\\t\\t}\\n\\t};\\n\\t```\n```\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tstring firstPalindrome(vector<string>& w) {\\n\\t\\t\\tfor (int s = 0 ; s < w.size() ; s++) {\\n\\t\\t\\t\\tstring rev = w[s];\\n\\t\\t\\t\\treverse(rev.begin(), rev.end());\\n\\t\\t\\t\\tif (w[s] == rev) return w[s];\\n\\t\\t\\t}\\n\\t\\t\\treturn \"\";\\n\\t\\t}\\n\\t};\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 2301333,
                "title": "bruteforce-optimized-approach-c-30-faster-vs-75-faster",
                "content": "Bruteforce Approach ////////////\\n```\\nclass Solution {\\npublic:\\n\\n     bool isPalindrome(string s) {\\n        int l=0;\\n        int r=s.length()-1;\\n        \\n        while(l<r){\\n            \\n            while(l<r && !isalnum(s[l]))l++;\\n            while(l<r && !isalnum(s[r]))r--;\\n\\n            if(l<r && tolower(s[l])!=tolower(s[r]))\\n                return false;\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    \\n        \\n    }\\n    string firstPalindrome(vector<string>& words) {\\n     string s;\\n        for(int i=0;i<words.size();i++){\\n           s=words[i];\\n            if(isPalindrome(s)==true)\\n                    return s;\\n                \\n           \\n        }\\n        return \"\";\\n    }\\n};\\n```\\n\\noptimized Approach//////////\\n```\\nclass Solution {\\npublic:\\n\\n    string firstPalindrome(vector<string>& words) {\\n        int n, flag;\\n        string s;\\n        for(int i=0;i<words.size();i++){\\n            n=words[i].size();\\n            s=words[i];\\n            flag=1;\\n            for(int j=0;j<n/2; j++){\\n                if(s[j]!=s[n-j-1])\\n                    flag=0;\\n            }\\n            if(flag==1)\\n                return s;\\n        }\\n        return \"\";\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n\\n     bool isPalindrome(string s) {\\n        int l=0;\\n        int r=s.length()-1;\\n        \\n        while(l<r){\\n            \\n            while(l<r && !isalnum(s[l]))l++;\\n            while(l<r && !isalnum(s[r]))r--;\\n\\n            if(l<r && tolower(s[l])!=tolower(s[r]))\\n                return false;\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    \\n        \\n    }\\n    string firstPalindrome(vector<string>& words) {\\n     string s;\\n        for(int i=0;i<words.size();i++){\\n           s=words[i];\\n            if(isPalindrome(s)==true)\\n                    return s;\\n                \\n           \\n        }\\n        return \"\";\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n\\n    string firstPalindrome(vector<string>& words) {\\n        int n, flag;\\n        string s;\\n        for(int i=0;i<words.size();i++){\\n            n=words[i].size();\\n            s=words[i];\\n            flag=1;\\n            for(int j=0;j<n/2; j++){\\n                if(s[j]!=s[n-j-1])\\n                    flag=0;\\n            }\\n            if(flag==1)\\n                return s;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2275618,
                "title": "easy-python3-simple",
                "content": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        st=\"\"\\n        for i in words:\\n            if (i ==i[::-1]):\\n                st+=i\\n                break\\n        return st\\n```\\n***if useful then vote up***",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        st=\"\"\\n        for i in words:\\n            if (i ==i[::-1]):\\n                st+=i\\n                break\\n        return st\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2259808,
                "title": "java-solution-easy-to-understand-beginner-friendly",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(int i=0;i<words.length;i++){\\n            if(checkPali(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n    private boolean checkPali(String st){\\n        int i=0;\\n        int j=st.length()-1;\\n        while(i<=j){\\n            if(st.charAt(i)!=st.charAt(j)){\\n                return false;\\n            }\\n            i++;\\n            j--;\\n        }\\n      return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(int i=0;i<words.length;i++){\\n            if(checkPali(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n    private boolean checkPali(String st){\\n        int i=0;\\n        int j=st.length()-1;\\n        while(i<=j){\\n            if(st.charAt(i)!=st.charAt(j)){\\n                return false;\\n            }\\n            i++;\\n            j--;\\n        }\\n      return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2221629,
                "title": "python-solution-for-beginners-by-beginner",
                "content": "**Runtime: 100 ms, faster than 67.63% of Python3 online submissions for Find First Palindromic String in the Array.\\nMemory Usage: 14.1 MB, less than 26.48% of Python3 online submissions for Find First Palindromic String in the Array.**\\n\\n```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if i == i[::-1]:\\n                return i\\n        return \\'\\'\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if i == i[::-1]:\\n                return i\\n        return \\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2196096,
                "title": "two-pointer-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++)\\n        {\\n            int flag=0;\\n            int j=0;\\n            int k=words[i].size()-1;\\n            while(j<k)\\n            {\\n                if(words[i][j]!=words[i][k])\\n                {\\n                    flag=1;\\n                    break;\\n                }\\n                j++;\\n                k--;\\n            }\\n            if(flag==0)\\n            {\\n                return words[i]; \\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++)\\n        {\\n            int flag=0;\\n            int j=0;\\n            int k=words[i].size()-1;\\n            while(j<k)\\n            {\\n                if(words[i][j]!=words[i][k])\\n                {\\n                    flag=1;\\n                    break;\\n                }\\n                j++;\\n                k--;\\n            }\\n            if(flag==0)\\n            {\\n                return words[i]; \\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2161104,
                "title": "simple-logic-in-python",
                "content": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        \\n        return next((word for word in words if word == word[::-1]), \\'\\')\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        \\n        return next((word for word in words if word == word[::-1]), \\'\\')\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139611,
                "title": "java-easy-solution-with-explanation",
                "content": "EASY UNDERSTANDING JAVA SOLUTION\\n```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        int count=0;\\n        String str2=\"\";\\n        \\n        for(int i=0;i<words.length&&count==0;i++)\\n        {\\n            StringBuilder str= new StringBuilder(\"\"); // Instead of strings I had used stringbuilder concept to reduce time because StringBuilder contains reverse() method which makes our problem easy\\n            \\n            for(int j=0;j<words[i].length();j++)\\n            {\\n                str.append(words[i].charAt(j));\\n            }\\n            \\n               str=str.reverse();\\n               str2=str.toString();\\n               if(words[i].equals(str2)) // by using count method I am checking whether the string is palindrome or not .\\n\\t\\t\\t   // If it is a palindrome the count gets increased ,the for loop will break there itself and return the string.\\n               {\\n                  count++;   \\n                   \\n               }\\n          \\n        }\\n        if(count==0)\\n        {\\n            return \"\";\\n        }\\n        return str2;\\n        \\n    }\\n}\\n```****",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        int count=0;\\n        String str2=\"\";\\n        \\n        for(int i=0;i<words.length&&count==0;i++)\\n        {\\n            StringBuilder str= new StringBuilder(\"\"); // Instead of strings I had used stringbuilder concept to reduce time because StringBuilder contains reverse() method which makes our problem easy\\n            \\n            for(int j=0;j<words[i].length();j++)\\n            {\\n                str.append(words[i].charAt(j));\\n            }\\n            \\n               str=str.reverse();\\n               str2=str.toString();\\n               if(words[i].equals(str2)) // by using count method I am checking whether the string is palindrome or not .\\n\\t\\t\\t   // If it is a palindrome the count gets increased ,the for loop will break there itself and return the string.\\n               {\\n                  count++;   \\n                   \\n               }\\n          \\n        }\\n        if(count==0)\\n        {\\n            return \"\";\\n        }\\n        return str2;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2131440,
                "title": "javascript-one-line-easy",
                "content": "```\\nconst firstPalindrome = (words) => words.find((x) => x === [...x].reverse().join(\"\")) ?? \"\";\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst firstPalindrome = (words) => words.find((x) => x === [...x].reverse().join(\"\")) ?? \"\";\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2114707,
                "title": "java-solution-using-two-pointer-with-explanation-faster-easy-to-understand",
                "content": "```\\n\\n```class Solution {\\n    public String firstPalindrome(String[] words) {\\n        int len = words.length;\\n\\n        \\n        for(int i=0; i < len;i++)\\n        {\\n            String c = words[i];\\n            int l=0;\\n            int r=words[i].length()-1;\\n            \\n            while(l<=r)\\n            {\\n                if(c.charAt(l) ==c.charAt(r))\\n                {\\n                    \\n                    if(l==r || r-l==1)  // l==r is for odd length string  on the other hand r-l = 1 is for even\\n                    {\\n                        return c;\\n                    }\\n                    l++;\\n                    r--; \\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995387,
                "title": "simple-recursive-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    // create a helper function for comfort\\n    string helper(vector<string>& words,int s,int e)\\n    {\\n        if(s>e)\\n        {\\n            return \"\";\\n        }\\n        int i=0,j=words[s].size()-1;\\n        int  is=1;\\n        while(j>i)\\n        {\\n            if( words[s][i]!=words[s][j])\\n            {\\n                is=0;\\n                break;\\n            }\\n            j--;\\n            i++;\\n           \\n        }\\n        if(is==1)\\n        {\\n            return words[s];\\n        }\\n        else\\n            return helper(words,s+1,e);\\n            \\n        \\n    }\\n    \\n // call helper function in  given function   \\n    string firstPalindrome(vector<string>& words) \\n    {\\n        return helper(words,0,words.size()-1);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    // create a helper function for comfort\\n    string helper(vector<string>& words,int s,int e)\\n    {\\n        if(s>e)\\n        {\\n            return \"\";\\n        }\\n        int i=0,j=words[s].size()-1;\\n        int  is=1;\\n        while(j>i)\\n        {\\n            if( words[s][i]!=words[s][j])\\n            {\\n                is=0;\\n                break;\\n            }\\n            j--;\\n            i++;\\n           \\n        }\\n        if(is==1)\\n        {\\n            return words[s];\\n        }\\n        else\\n            return helper(words,s+1,e);\\n            \\n        \\n    }\\n    \\n // call helper function in  given function   \\n    string firstPalindrome(vector<string>& words) \\n    {\\n        return helper(words,0,words.size()-1);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1963882,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\n    bool check(string s){\\n        int i=0, j=s.size()-1;\\n        while(i<=j)\\n            if(s[i++]!=s[j--]) return false;\\n        return true;\\n    }\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto a:words)\\n            if(check(a)) return a;\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    bool check(string s){\\n        int i=0, j=s.size()-1;\\n        while(i<=j)\\n            if(s[i++]!=s[j--]) return false;\\n        return true;\\n    }\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto a:words)\\n            if(check(a)) return a;\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1906019,
                "title": "java-easy-solution-using-stringbuilder",
                "content": "class Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(int i=0;i<words.length;i++){\\n            StringBuilder input1 = new StringBuilder(words[i]);\\n            String s = input1.reverse().toString();\\n            if(words[i].equals(s)){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(int i=0;i<words.length;i++){\\n            StringBuilder input1 = new StringBuilder(words[i]);\\n            String s = input1.reverse().toString();\\n            if(words[i].equals(s)){\\n                return words[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1894993,
                "title": "c",
                "content": "public string FirstPalindrome(string[] words) {\\n        \\n        for (int i = 0; i < words.Length; i++)\\n        {\\n            if (new string(string.Join(\",\", words[i]).Reverse().ToArray()) == words[i])\\n            {\\n                return words[i];\\n            }\\n        }\\n\\n        return \"\";\\n    }",
                "solutionTags": [],
                "code": "public string FirstPalindrome(string[] words) {\\n        \\n        for (int i = 0; i < words.Length; i++)\\n        {\\n            if (new string(string.Join(\",\", words[i]).Reverse().ToArray()) == words[i])\\n            {\\n                return words[i];\\n            }\\n        }\\n\\n        return \"\";\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1874458,
                "title": "c-fast-memory-efficient-simple",
                "content": "**C++ solution with Time Complexity = O(nW) and Space Complexity = O(nW),** where total words in string are n and length of largest word is W.\\n```cpp\\nclass Solution\\n{\\n    public:\\n        string firstPalindrome(vector<string> &words)\\n        {\\n            for (auto &i: words)\\n            {\\n                int hi = i.size() - 1, lo = 0;\\n                bool isPalindrome = true;\\n                while (lo < hi)\\n                    if (i[lo++] != i[hi--])\\n                        isPalindrome = false;\\n                if (isPalindrome) return i;\\n            }\\n            return \"\";\\n        }\\n};\\n```\\n*If you find this helpful, please consider giving an upvote!!*",
                "solutionTags": [
                    "C++"
                ],
                "code": "```cpp\\nclass Solution\\n{\\n    public:\\n        string firstPalindrome(vector<string> &words)\\n        {\\n            for (auto &i: words)\\n            {\\n                int hi = i.size() - 1, lo = 0;\\n                bool isPalindrome = true;\\n                while (lo < hi)\\n                    if (i[lo++] != i[hi--])\\n                        isPalindrome = false;\\n                if (isPalindrome) return i;\\n            }\\n            return \"\";\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1866285,
                "title": "cpp-solution-simple-and-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        int i = 0 ; \\n        bool check = 0;\\n        for(i = 0 ; i < words.size() ; i++){\\n            if(words[i]==string(words[i].rbegin() , words[i].rend())){\\n                check = 1;\\n                break;\\n            }\\n        }\\n        if(check==0)\\n            return \"\";\\n        return words[i];\\n    }\\n};\\n```\\n**Please upvote if you find this helpful**",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        int i = 0 ; \\n        bool check = 0;\\n        for(i = 0 ; i < words.size() ; i++){\\n            if(words[i]==string(words[i].rbegin() , words[i].rend())){\\n                check = 1;\\n                break;\\n            }\\n        }\\n        if(check==0)\\n            return \"\";\\n        return words[i];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1856795,
                "title": "python-lightweight-solution",
                "content": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if i == i[::-1]:\\n                return i\\n        return \"\"",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            if i == i[::-1]:\\n                return i\\n        return \"\"",
                "codeTag": "Java"
            },
            {
                "id": 1850051,
                "title": "python-easy-to-understand-two-pointers-faster-than-90",
                "content": "```\\n# Time complexity: O(n*m) where n is the length of the array and m ,\\n# is the average length of a string in the array.\\n# Space complexity: O(1)\\n\\ndef firstPalindrome(words):\\n    # Function to check if a given string is a palindrome or not\\n    def isPalindrome(s):\\n        i = 0\\n        j = len(s) - 1\\n\\n        while i < j:\\n            if s[i] == s[j]:\\n                i += 1\\n                j -= 1\\n            else:\\n                return False\\n        return True\\n\\n    for word in words:\\n        if isPalindrome(word):\\n            return word\\n    return \"\"\\n\\n```",
                "solutionTags": [
                    "Two Pointers"
                ],
                "code": "```\\n# Time complexity: O(n*m) where n is the length of the array and m ,\\n# is the average length of a string in the array.\\n# Space complexity: O(1)\\n\\ndef firstPalindrome(words):\\n    # Function to check if a given string is a palindrome or not\\n    def isPalindrome(s):\\n        i = 0\\n        j = len(s) - 1\\n\\n        while i < j:\\n            if s[i] == s[j]:\\n                i += 1\\n                j -= 1\\n            else:\\n                return False\\n        return True\\n\\n    for word in words:\\n        if isPalindrome(word):\\n            return word\\n    return \"\"\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1846552,
                "title": "less-memory-usage-than-97",
                "content": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for word in words:\\n            if word == word[::-1]:\\n                return word\\n        return \"\"",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for word in words:\\n            if word == word[::-1]:\\n                return word\\n        return \"\"",
                "codeTag": "Java"
            },
            {
                "id": 1839076,
                "title": "please-check-my-code",
                "content": "\\'\\'\\'class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n       string words2 = words;\\n        reverse(words.begin(),words.end());\\n        if(words2==words){\\n            cout<<words;\\n        }\\n        else {\\n            cout<<\"\";\\n        }\\n        \\n    }\\n};\\n\\n\\n\\'\\'\\'",
                "solutionTags": [
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n       string words2 = words;\\n        reverse(words.begin(),words.end());\\n        if(words2==words){\\n            cout<<words;\\n        }",
                "codeTag": "C++"
            },
            {
                "id": 1832856,
                "title": "eazy-to-understand-c-stl",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n       int n=words.size();\\n        int i=0;\\n        string x;\\n        while(i<n)\\n        {\\n            x=words[i];\\n            string y;\\n            y=x;\\n            reverse(y.begin(),y.end());\\n            if(x==y)\\n                return x;\\n            i++;\\n        }\\n        return \"\";  \\n    }\\n};\\n\\'\\'\\'",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n       int n=words.size();\\n        int i=0;\\n        string x;\\n        while(i<n)\\n        {\\n            x=words[i];\\n            string y;\\n            y=x;\\n            reverse(y.begin(),y.end());\\n            if(x==y)\\n                return x;\\n            i++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1798394,
                "title": "java-most-easy-solution",
                "content": "\\n\\t\\n\\tclass Solution {\\n    public String firstPalindrome(String[] words) {\\n       for(String k : words){\\n           if(isPalindrome(k))\\n               return k;\\n       }\\n        return \"\";\\n    }\\n    private boolean isPalindrome(String word){\\n        int i = 0;\\n        int j = word.length()-1;\\n        while(i<=j){\\n            if(word.charAt(i)!=word.charAt(j))\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n}\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public String firstPalindrome(String[] words) {\\n       for(String k : words){\\n           if(isPalindrome(k))\\n               return k;\\n       }",
                "codeTag": "Java"
            },
            {
                "id": 1795593,
                "title": "java-easy",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n    String ans=\"\";\\n        for(int i=0;i<words.length;i++){\\n        if(palindrome(words[i])){\\n            ans=words[i];\\n            break;\\n        }\\n    \\n        }\\n        return ans;\\n    }\\n    boolean palindrome(String str){\\n        int i = 0, j = str.length() - 1;\\n        while (i < j) {\\n \\n            if (str.charAt(i) != str.charAt(j))\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n    String ans=\"\";\\n        for(int i=0;i<words.length;i++){\\n        if(palindrome(words[i])){\\n            ans=words[i];\\n            break;\\n        }\\n    \\n        }\\n        return ans;\\n    }\\n    boolean palindrome(String str){\\n        int i = 0, j = str.length() - 1;\\n        while (i < j) {\\n \\n            if (str.charAt(i) != str.charAt(j))\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1792255,
                "title": "easy-c-solution",
                "content": "```\\n    Solution()\\n    {\\n        ios::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n    }\\n   bool palindrome(string s)\\n{\\n    string str=s;\\n    reverse(str.begin(),str.end());\\n    return str==s;\\n}\\nstring firstPalindrome(vector<string>& words)\\n{\\n    vector<string>ans;\\n for(int i=0; i<words.size(); i++)\\n {\\n     if(palindrome(words[i]))\\n     {\\n        ans.push_back(words[i]);\\n     }\\n   \\n }\\n    if(ans.size()==0)\\n    {\\n        return \"\";\\n    }\\n return ans[0];\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    Solution()\\n    {\\n        ios::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n    }\\n   bool palindrome(string s)\\n{\\n    string str=s;\\n    reverse(str.begin(),str.end());\\n    return str==s;\\n}\\nstring firstPalindrome(vector<string>& words)\\n{\\n    vector<string>ans;\\n for(int i=0; i<words.size(); i++)\\n {\\n     if(palindrome(words[i]))\\n     {\\n        ans.push_back(words[i]);\\n     }\\n   \\n }\\n    if(ans.size()==0)\\n    {\\n        return \"\";\\n    }\\n return ans[0];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1791524,
                "title": "rust-one-liner",
                "content": "```rust\\nimpl Solution {\\n    pub fn first_palindrome(words: Vec<String>) -> String {\\n        words.into_iter()\\n            .find(|s| s.chars().take(s.len()/2).eq(s.chars().rev().take(s.len()/2)))\\n            .unwrap_or(\"\".into())\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn first_palindrome(words: Vec<String>) -> String {\\n        words.into_iter()\\n            .find(|s| s.chars().take(s.len()/2).eq(s.chars().rev().take(s.len()/2)))\\n            .unwrap_or(\"\".into())\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1779424,
                "title": "very-easy-java-solution",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for (int i = 0 ; i < words.length ; i++){\\n            if (isPalindrome(words[i])) return words[i];\\n        }\\n        return \"\";\\n    }\\n    \\n    public boolean isPalindrome(String word){\\n\\t\\tStringBuilder input = new StringBuilder();\\n        \\n        input.append(word);\\n        input.reverse();\\n        \\n\\t\\tif (word.equals(input.toString())) return true;\\n\\t\\t return false ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for (int i = 0 ; i < words.length ; i++){\\n            if (isPalindrome(words[i])) return words[i];\\n        }\\n        return \"\";\\n    }\\n    \\n    public boolean isPalindrome(String word){\\n\\t\\tStringBuilder input = new StringBuilder();\\n        \\n        input.append(word);\\n        input.reverse();\\n        \\n\\t\\tif (word.equals(input.toString())) return true;\\n\\t\\t return false ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1764341,
                "title": "easy",
                "content": "class Solution \\n{\\n    bool ispalindrome(string str)\\n    {\\n        int i=0;\\n        int j=str.length()-1;\\n        while(i<=j)\\n        {\\n         if(str[i] != str[j])\\n         {\\n             return false;\\n         }\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\npublic:\\n    string firstPalindrome(vector<string>& words) \\n    {\\n      for(int i=0;i<words.size();i++)\\n      {\\n          if(ispalindrome(words[i]))\\n          {\\n              return(words[i]);\\n          }\\n      }\\n        return \"\";\\n    }\\n};\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution \\n{\\n    bool ispalindrome(string str)\\n    {\\n        int i=0;\\n        int j=str.length()-1;\\n        while(i<=j)\\n        {\\n         if(str[i] != str[j])\\n         {\\n             return false;\\n         }",
                "codeTag": "Java"
            },
            {
                "id": 1744780,
                "title": "c-simple-solution-easy-to-understand",
                "content": "`n` : # of word, `m` : average length of a word.\\ntime: `O(nm)`\\nspace: `O(1)`\\n\\n```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for (auto &word: words) {\\n            int left = 0, right = word.size()-1, valid = 1;\\n            while (left < right) {\\n                if (word[left++] != word[right--]) {\\n                    valid = 0;\\n                    break;\\n                }\\n            }\\n            if (valid) {\\n                return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for (auto &word: words) {\\n            int left = 0, right = word.size()-1, valid = 1;\\n            while (left < right) {\\n                if (word[left++] != word[right--]) {\\n                    valid = 0;\\n                    break;\\n                }\\n            }\\n            if (valid) {\\n                return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1734650,
                "title": "java-two-methods-easy-to-understand",
                "content": "```\\nclass Solution {\\n    \\n    public boolean isPalindrome(String word){\\n        \\n        int right =0;\\n        int left=word.length()-1;\\n        \\n        while(right<=left){\\n            \\n            if(word.charAt(right) != word.charAt(left)){\\n                return false;\\n            }\\n            \\n            right++;\\n            left--;\\n            \\n        }\\n        \\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(int i=0; i<words.length; i++){\\n            \\n            if(isPalindrome(words[i])){\\n                \\n                return words[i];\\n            }\\n            \\n        }\\n        \\n        return \"\";\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\n    public boolean isPalindrome(String word){\\n        \\n        int right =0;\\n        int left=word.length()-1;\\n        \\n        while(right<=left){\\n            \\n            if(word.charAt(right) != word.charAt(left)){\\n                return false;\\n            }\\n            \\n            right++;\\n            left--;\\n            \\n        }\\n        \\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(int i=0; i<words.length; i++){\\n            \\n            if(isPalindrome(words[i])){\\n                \\n                return words[i];\\n            }\\n            \\n        }\\n        \\n        return \"\";\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1732119,
                "title": "javascript-solution-two-pointer-logic-to-check-palindrome-string",
                "content": "```\\nvar firstPalindrome = function(words) {\\n    const len = words.length;\\n    for(let i = 0; i < len; i++){\\n        if(isPalindrome(words[i])){\\n            return words[i];\\n        }\\n    }\\n    return \\'\\';\\n};\\n\\nfunction isPalindrome(word){\\n    const len = word.length;\\n    let left = 0;\\n    let right = len - 1;\\n    while(left <= right){\\n        if(word[left] === word[right]){\\n            left++;\\n            right--;\\n        } else {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvar firstPalindrome = function(words) {\\n    const len = words.length;\\n    for(let i = 0; i < len; i++){\\n        if(isPalindrome(words[i])){\\n            return words[i];\\n        }\\n    }\\n    return \\'\\';\\n};\\n\\nfunction isPalindrome(word){\\n    const len = word.length;\\n    let left = 0;\\n    let right = len - 1;\\n    while(left <= right){\\n        if(word[left] === word[right]){\\n            left++;\\n            right--;\\n        } else {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1729654,
                "title": "easy-c-solution-easy-understanding",
                "content": "Please **Upvote** if it helps, thanks \\uD83D\\uDE0A\\n```\\nclass Solution {\\npublic:\\n    bool isPalidrome(string word){\\n        int l=0;int r=word.size()-1;\\n        while(l<r)\\n            if(word[l++]!=word[r--])return false;\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto word:words)\\n            if(isPalidrome(word))return word;\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isPalidrome(string word){\\n        int l=0;int r=word.size()-1;\\n        while(l<r)\\n            if(word[l++]!=word[r--])return false;\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto word:words)\\n            if(isPalidrome(word))return word;\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1726446,
                "title": "python-solution",
                "content": "def firstPalindrome(self, words: List[str]) -> str:\\n        c=0\\n        for i in words:\\n            if(i==i[::-1]):\\n                return i\\n            c+=1\\n        if(c==len(words)):\\n            return \"\"",
                "solutionTags": [],
                "code": "def firstPalindrome(self, words: List[str]) -> str:\\n        c=0\\n        for i in words:\\n            if(i==i[::-1]):\\n                return i\\n            c+=1\\n        if(c==len(words)):\\n            return \"\"",
                "codeTag": "Python3"
            },
            {
                "id": 1721226,
                "title": "java-simple",
                "content": "**T/S:** O(n)/O(1), where n = sum(size(words[i]))\\n```\\npublic String firstPalindrome(String[] words) {\\n\\treturn Arrays.stream(words)\\n\\t\\t\\t\\t .filter(this::isPalindrome)\\n\\t\\t\\t\\t .findFirst()\\n\\t\\t\\t\\t .orElse(\"\");\\n}\\n\\nprivate boolean isPalindrome(String word) {\\n\\tvar left = 0;\\n\\tvar right = word.length() - 1;\\n\\t\\n\\twhile (left < right)\\n\\t\\tif (word.charAt(left++) != word.charAt(right--))\\n\\t\\t\\treturn false;\\n\\treturn true;\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic String firstPalindrome(String[] words) {\\n\\treturn Arrays.stream(words)\\n\\t\\t\\t\\t .filter(this::isPalindrome)\\n\\t\\t\\t\\t .findFirst()\\n\\t\\t\\t\\t .orElse(\"\");\\n}\\n\\nprivate boolean isPalindrome(String word) {\\n\\tvar left = 0;\\n\\tvar right = word.length() - 1;\\n\\t\\n\\twhile (left < right)\\n\\t\\tif (word.charAt(left++) != word.charAt(right--))\\n\\t\\t\\treturn false;\\n\\treturn true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1707752,
                "title": "swift-reversed-and-iteration-w-o-extra-space",
                "content": "**Revesed**\\n```\\nfunc firstPalindrome(_ words: [String]) -> String {\\n    for word in words {\\n        if word == String(word.reversed()) {\\n            return word\\n        }\\n    }\\n    return \"\"\\n}\\n```\\n\\n**Iteration**\\n```\\nclass Solution {\\n    func firstPalindrome(_ words: [String]) -> String {\\n        for word in words {\\n            if isPalindrome(word) {\\n                return word\\n            }\\n        }\\n        return \"\"\\n    }\\n    \\n    func isPalindrome(_ word: String) -> Bool {\\n        var start: Int = 0\\n        var end: Int = word.count - 1\\n        while (start < end) {\\n            if word[start] != word[end] {\\n                return false\\n            }\\n            start += 1\\n            end -= 1\\n        }\\n        return true\\n    }\\n}\\n\\n// to get the char by index\\nextension String {\\n    subscript(index: Int) -> Character {\\n        return self[self.index(self.startIndex, offsetBy: index)]\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc firstPalindrome(_ words: [String]) -> String {\\n    for word in words {\\n        if word == String(word.reversed()) {\\n            return word\\n        }\\n    }\\n    return \"\"\\n}\\n```\n```\\nclass Solution {\\n    func firstPalindrome(_ words: [String]) -> String {\\n        for word in words {\\n            if isPalindrome(word) {\\n                return word\\n            }\\n        }\\n        return \"\"\\n    }\\n    \\n    func isPalindrome(_ word: String) -> Bool {\\n        var start: Int = 0\\n        var end: Int = word.count - 1\\n        while (start < end) {\\n            if word[start] != word[end] {\\n                return false\\n            }\\n            start += 1\\n            end -= 1\\n        }\\n        return true\\n    }\\n}\\n\\n// to get the char by index\\nextension String {\\n    subscript(index: Int) -> Character {\\n        return self[self.index(self.startIndex, offsetBy: index)]\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1706870,
                "title": "easiest-solution-ever",
                "content": "**Easy solution with 80 ms runtime****\\n\\n**IF you like the solution plz upvote**\\n\\nclass Solution {\\npublic:\\n    string rev(string n){\\n        // for(int i=0;i<n.length()/2;i++){\\n        //     swap(n[i],n[n.length()-i-1]);\\n        // }\\n        reverse(n.begin(),n.end());\\n            return n;\\n    }\\n    \\n    string firstPalindrome(vector<string>& words) {\\n       for(int i=0;i<words.size();i++){\\n           string temp=words[i]; \\n           if(words[i]==rev(temp)){\\n               return words[i];\\n           }\\n       }\\n        return \"\";\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    string rev(string n){\\n        // for(int i=0;i<n.length()/2;i++){\\n        //     swap(n[i],n[n.length()-i-1]);\\n        // }",
                "codeTag": "Java"
            },
            {
                "id": 1705129,
                "title": "easy-two-pointer-approach-faster-that-65",
                "content": "```\\nclass Solution {\\npublic:\\n    bool ispalindrome(string s)\\n    {\\n        int start=0;\\n        int end=s.length()-1;\\n        while(start<=end)\\n        {\\n            if(s[start]!=s[end])\\n            {\\n                return false;\\n            }\\n            start++;\\n            end--;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        for(auto x:words)\\n        {\\n            if(ispalindrome(x))\\n            {\\n                return x;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool ispalindrome(string s)\\n    {\\n        int start=0;\\n        int end=s.length()-1;\\n        while(start<=end)\\n        {\\n            if(s[start]!=s[end])\\n            {\\n                return false;\\n            }\\n            start++;\\n            end--;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        \\n        for(auto x:words)\\n        {\\n            if(ispalindrome(x))\\n            {\\n                return x;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1701616,
                "title": "c-simple-and-clean-solution-for-beginners",
                "content": "**Please Upvote if it helped You !!!\\nHappy Coding :)**\\n```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) \\n    {\\n        string answer;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            string s=words[i];\\n            int x=0;\\n            int y=s.size()-1;\\n            while(x<y)\\n            {\\n                if(s[x]==s[y])\\n                {\\n                    x++;\\n                    y--;\\n                }\\n                else \\n                {\\n                    break;\\n                }\\n            }\\n            if(x==y || x>y)\\n            {\\n                answer=words[i];\\n                break;\\n            }\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) \\n    {\\n        string answer;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            string s=words[i];\\n            int x=0;\\n            int y=s.size()-1;\\n            while(x<y)\\n            {\\n                if(s[x]==s[y])\\n                {\\n                    x++;\\n                    y--;\\n                }\\n                else \\n                {\\n                    break;\\n                }\\n            }\\n            if(x==y || x>y)\\n            {\\n                answer=words[i];\\n                break;\\n            }\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1688098,
                "title": "c-solution-faster-than-79-16-users-very-easy-solution-beginner-friendly",
                "content": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& a) {\\n        string s;\\n        for(int i=0;i<a.size();i++)\\n        {\\n            s=a[i];\\n            reverse(s.begin(),s.end());       // Function to reverse a string\\n            if(s==a[i])                     // if the reverse is equal to the original string then it is a palindromic string.\\n                return s;\\n        }\\n        return \"\";\\n    }\\n};\\n```\\n``` If you like my approach then hit the like button.```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string firstPalindrome(vector<string>& a) {\\n        string s;\\n        for(int i=0;i<a.size();i++)\\n        {\\n            s=a[i];\\n            reverse(s.begin(),s.end());       // Function to reverse a string\\n            if(s==a[i])                     // if the reverse is equal to the original string then it is a palindromic string.\\n                return s;\\n        }\\n        return \"\";\\n    }\\n};\\n```\n``` If you like my approach then hit the like button.```",
                "codeTag": "Java"
            },
            {
                "id": 1680353,
                "title": "java-beats-99-92",
                "content": "```\\nclass Solution {\\n    public static boolean isPalindrome(String word){\\n        int i=0;\\n        int j=word.length()-1;\\n        while(i<j){\\n            if(word.charAt(i)!=word.charAt(j)){\\n                return false;\\n            }\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String word:words){\\n            if(isPalindrome(word)){\\n                return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public static boolean isPalindrome(String word){\\n        int i=0;\\n        int j=word.length()-1;\\n        while(i<j){\\n            if(word.charAt(i)!=word.charAt(j)){\\n                return false;\\n            }\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }\\n    public String firstPalindrome(String[] words) {\\n        for(String word:words){\\n            if(isPalindrome(word)){\\n                return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1676462,
                "title": "python-solution",
                "content": "```\\nclass Solution(object):\\n    def firstPalindrome(self, words):\\n        for word in words:\\n           if word == word[::-1]:\\n            return word\\n        return \"\"\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def firstPalindrome(self, words):\\n        for word in words:\\n           if word == word[::-1]:\\n            return word\\n        return \"\"\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1670345,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(int i = 0 ; i < words.length ; i++)\\n        {\\n            if(isPalindrome(words[i] , 0 , words[i].length()-1))\\n            {\\n                return words[i];\\n            }\\n            \\n        }\\n        return \"\";\\n        \\n    }\\n    boolean isPalindrome(String s , int start , int end)\\n    {\\n        while(start < end)\\n        {\\n             if(s.charAt(start++) != s.charAt(end--))\\n                 return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\n**P.S : I saw some people are using stringbuilder and buffer ,  but dont you think that each time converting String to StringBuilder and again StringBuilder to String is more expensive.**\\n\\n\\n**DONT FORGET TO UPVOTE IF IT HELPS**\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for(int i = 0 ; i < words.length ; i++)\\n        {\\n            if(isPalindrome(words[i] , 0 , words[i].length()-1))\\n            {\\n                return words[i];\\n            }\\n            \\n        }\\n        return \"\";\\n        \\n    }\\n    boolean isPalindrome(String s , int start , int end)\\n    {\\n        while(start < end)\\n        {\\n             if(s.charAt(start++) != s.charAt(end--))\\n                 return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1668586,
                "title": "python3-73ms-faster-than-80-96",
                "content": "```\\ndef palindrome(string):\\n\\treturn string == string[::-1]\\n\\t\\ndef firstPalindrome(wordList):\\n\\tfor word in wordList:\\n\\t\\tresult = palindrome(word)\\n\\t\\tif result:\\n\\t\\t\\treturn word\\n\\treturn \"\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef palindrome(string):\\n\\treturn string == string[::-1]\\n\\t\\ndef firstPalindrome(wordList):\\n\\tfor word in wordList:\\n\\t\\tresult = palindrome(word)\\n\\t\\tif result:\\n\\t\\t\\treturn word\\n\\treturn \"\"\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1667673,
                "title": "easy-c-by-subham-pandey",
                "content": "class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        int n=words.size();\\n        for(string s:words){\\n            string p=palindrome(s);\\n            if(p==\"yes\"){\\n                return s;\\n            }\\n            \\n        }\\n        return \"\";\\n    }\\n    \\n    string palindrome(string s){\\n        string ans=\"\";\\n        int n=s.length();\\n        for(int i=n-1;i>=0;i--){\\n            ans+=s[i];\\n        }\\n        \\n        if(ans==s){\\n            return \"yes\";\\n        }\\n        else{\\n            return \"no\";\\n        }\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        int n=words.size();\\n        for(string s:words){\\n            string p=palindrome(s);\\n            if(p==\"yes\"){\\n                return s;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1666340,
                "title": "very-easy-java-solution-for-beginner-s",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        String ans=\"\";\\n        boolean result=false;\\n        for(int i=0;i<words.length;i++)\\n        {\\n            result=IsPalindrome( words[i],0,words[i].length()-1);\\n            if(result== true)\\n            {\\n                ans=words[i];\\n                break;\\n            }\\n            else\\n                ans=\"\";\\n                \\n        }\\n        \\n        return ans;\\n        \\n    }\\n    \\n      public boolean IsPalindrome(String str,int i,int j)\\n    {\\n          \\n          \\n           while(i <= j)\\n        {\\n            if(i <= j && str.charAt(i)!= str.charAt(j))\\n            {\\n                return false;\\n            }\\n            else\\n            {\\n                i++;\\n                j--;\\n            }\\n                \\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        String ans=\"\";\\n        boolean result=false;\\n        for(int i=0;i<words.length;i++)\\n        {\\n            result=IsPalindrome( words[i],0,words[i].length()-1);\\n            if(result== true)\\n            {\\n                ans=words[i];\\n                break;\\n            }\\n            else\\n                ans=\"\";\\n                \\n        }\\n        \\n        return ans;\\n        \\n    }\\n    \\n      public boolean IsPalindrome(String str,int i,int j)\\n    {\\n          \\n          \\n           while(i <= j)\\n        {\\n            if(i <= j && str.charAt(i)!= str.charAt(j))\\n            {\\n                return false;\\n            }\\n            else\\n            {\\n                i++;\\n                j--;\\n            }\\n                \\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1664416,
                "title": "java-solution-using-stringbuilder",
                "content": "```\\npublic String firstPalindrome(String[] words)\\n    {\\n\\n        for (String word : words)\\n        {\\n            StringBuilder stringBuilder = new StringBuilder(word);\\n            if (word.equals(stringBuilder.reverse().toString()))\\n            {\\n                return word;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\npublic String firstPalindrome(String[] words)\\n    {\\n\\n        for (String word : words)\\n        {\\n            StringBuilder stringBuilder = new StringBuilder(word);\\n            if (word.equals(stringBuilder.reverse().toString()))\\n            {\\n                return word;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1655725,
                "title": "java-easy-to-understand",
                "content": "To check if a String is palindrome, we start by comparing the first and last char and work inwards towards the middle of the String.\\n\\n```\\npublic String firstPalindrome(String[] words) {\\n        for(String word: words) {\\n            boolean isPalindrome = true; // assume the word is a palindrome\\n            for(int i=0; i<word.length()/2; i++) {\\n                if(word.charAt(i) != word.charAt(word.length()-i-1)) {\\n                    isPalindrome = false; // it is not a palindrome, so break out of for loop\\n                    break;\\n                }\\n            }\\n            if(isPalindrome) {\\n                return word; // found palindrome\\n            }\\n        }\\n        return \"\"; // none found\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic String firstPalindrome(String[] words) {\\n        for(String word: words) {\\n            boolean isPalindrome = true; // assume the word is a palindrome\\n            for(int i=0; i<word.length()/2; i++) {\\n                if(word.charAt(i) != word.charAt(word.length()-i-1)) {\\n                    isPalindrome = false; // it is not a palindrome, so break out of for loop\\n                    break;\\n                }\\n            }\\n            if(isPalindrome) {\\n                return word; // found palindrome\\n            }\\n        }\\n        return \"\"; // none found\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1654138,
                "title": "faster-than-99-50-of-c-online-submissions-c-easy-to-understand",
                "content": "```\\nstring firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++)\\n        {\\n            int n=words[i].size();\\n            int m=n-1,j=0;\\n            while (j<=m)\\n            {\\n                if(words[i][j] ==words[i][m])\\n                {\\n                    j++;m--;\\n                }\\n                 else\\n                 {\\n                     break;\\n                 }\\n            }\\n            if(j>m)\\n            {\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstring firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++)\\n        {\\n            int n=words[i].size();\\n            int m=n-1,j=0;\\n            while (j<=m)\\n            {\\n                if(words[i][j] ==words[i][m])\\n                {\\n                    j++;m--;\\n                }\\n                 else\\n                 {\\n                     break;\\n                 }\\n            }\\n            if(j>m)\\n            {\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1645600,
                "title": "simple-java-solution-with-comments",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n\\t// iterate through the array, grab a word\\n        for(String word : words) {\\n\\t\\t   // if word is palindrome, return it. else return empty string\\n            if (isPalindrome(word)) {\\n                return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n    \\n\\t// helper to check if string is palindrome\\n    public boolean isPalindrome(String str) {\\n\\t  // go only halfway, compare first with last character & increase it with i\\n        for (int i = 0; i < str.length()/2; i++) {\\n            if (!(str.charAt(i) == str.charAt(str.length() - 1 - i))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n\\t// iterate through the array, grab a word\\n        for(String word : words) {\\n\\t\\t   // if word is palindrome, return it. else return empty string\\n            if (isPalindrome(word)) {\\n                return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n    \\n\\t// helper to check if string is palindrome\\n    public boolean isPalindrome(String str) {\\n\\t  // go only halfway, compare first with last character & increase it with i\\n        for (int i = 0; i < str.length()/2; i++) {\\n            if (!(str.charAt(i) == str.charAt(str.length() - 1 - i))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1642194,
                "title": "learn-you-some-scala",
                "content": "```\\nimport scala.util.Try\\n\\nobject Solution {\\n    def firstPalindrome(words: Array[String]): String = {\\n        Try(words.filter(x => isPalindrome(x, 0, x.length-1)).head).getOrElse(\"\")\\n    }\\n    \\n    private def isPalindrome(str: String, first: Int, last: Int): Boolean = {\\n        if(first >= last) return true\\n        if(str.charAt(first) != str.charAt(last)) return false\\n        isPalindrome(str, first+1, last-1)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Scala",
                    "Recursion"
                ],
                "code": "```\\nimport scala.util.Try\\n\\nobject Solution {\\n    def firstPalindrome(words: Array[String]): String = {\\n        Try(words.filter(x => isPalindrome(x, 0, x.length-1)).head).getOrElse(\"\")\\n    }\\n    \\n    private def isPalindrome(str: String, first: Int, last: Int): Boolean = {\\n        if(first >= last) return true\\n        if(str.charAt(first) != str.charAt(last)) return false\\n        isPalindrome(str, first+1, last-1)\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1640404,
                "title": "javascript-two-pointers-no-split-reverse-join",
                "content": "```\\nvar firstPalindrome = function(words) {\\n  for (const currentWord of words){\\n    if (isPalindrome(currentWord)){\\n      return currentWord;\\n    }\\n  }\\n  return \\'\\';\\n};\\n\\nfunction isPalindrome(string){\\n    let left = 0;\\n    let right = string.length - 1;\\n\\n    while(left < right){\\n      if (string[left] !== string[right]){\\n        return false;\\n      }\\n      left++;\\n      right--;\\n    }\\n    return true;\\n  }\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\nvar firstPalindrome = function(words) {\\n  for (const currentWord of words){\\n    if (isPalindrome(currentWord)){\\n      return currentWord;\\n    }\\n  }\\n  return \\'\\';\\n};\\n\\nfunction isPalindrome(string){\\n    let left = 0;\\n    let right = string.length - 1;\\n\\n    while(left < right){\\n      if (string[left] !== string[right]){\\n        return false;\\n      }\\n      left++;\\n      right--;\\n    }\\n    return true;\\n  }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1639947,
                "title": "c-one-line",
                "content": "```\\npublic string FirstPalindrome(string[] words) =>\\n    words.Where(x => string.Concat(x.Reverse()) == x).FirstOrDefault() ?? string.Empty;\\n```",
                "solutionTags": [],
                "code": "```\\npublic string FirstPalindrome(string[] words) =>\\n    words.Where(x => string.Concat(x.Reverse()) == x).FirstOrDefault() ?? string.Empty;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1639729,
                "title": "java-no-stringbuilder",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for (String s: words) if (checker(s)) return s;\\n        \\n        return \"\";\\n    }\\n    \\n    public static boolean checker(String s){\\n        \\n        for (int i=0; i<s.length()/2; i++){\\n            if (s.charAt(i)!=s.charAt(s.length()-1-i)) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        \\n        for (String s: words) if (checker(s)) return s;\\n        \\n        return \"\";\\n    }\\n    \\n    public static boolean checker(String s){\\n        \\n        for (int i=0; i<s.length()/2; i++){\\n            if (s.charAt(i)!=s.charAt(s.length()-1-i)) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1637674,
                "title": "java-1ms-easy-solution",
                "content": "\\n    public String firstPalindrome(String[] words) {\\n        for(int i = 0; i < words.length; i++)\\n        {\\n           if(isPalindrome(words[i])) return words[i];\\n        }\\n        return \"\";\\n    }\\n    \\n    boolean isPalindrome(String str)\\n    {\\n        int i = 0, j = str.length() - 1;\\n        while (i < j) {\\n            if (str.charAt(i) != str.charAt(j))\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }",
                "solutionTags": [],
                "code": "\\n    public String firstPalindrome(String[] words) {\\n        for(int i = 0; i < words.length; i++)\\n        {\\n           if(isPalindrome(words[i])) return words[i];\\n        }\\n        return \"\";\\n    }\\n    \\n    boolean isPalindrome(String str)\\n    {\\n        int i = 0, j = str.length() - 1;\\n        while (i < j) {\\n            if (str.charAt(i) != str.charAt(j))\\n                return false;\\n            i++;\\n            j--;\\n        }\\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1637656,
                "title": "easy-code-c",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool checkPalindrome(string &s)\\n\\t\\t{\\n\\t\\t\\tint n=s.size();\\n\\t\\t\\tint i=0;\\n\\t\\t\\tint j=n-1;\\n\\t\\t\\twhile(i<j)\\n\\t\\t\\t{\\n\\t\\t\\t   if(s[i++] != s[j--])\\n\\t\\t\\t\\t   return 0;\\n\\t\\t\\t}\\n\\t\\t\\treturn 1;\\n\\n\\t\\t}\\n\\t\\tstring firstPalindrome(vector<string>& words) {\\n\\t\\t\\tfor(auto word:words)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(checkPalindrome(word))\\n\\t\\t\\t\\t\\treturn word;\\n\\t\\t\\t}\\n\\t\\t\\treturn \"\";\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tbool checkPalindrome(string &s)\\n\\t\\t{\\n\\t\\t\\tint n=s.size();\\n\\t\\t\\tint i=0;\\n\\t\\t\\tint j=n-1;\\n\\t\\t\\twhile(i<j)\\n\\t\\t\\t{\\n\\t\\t\\t   if(s[i++] != s[j--])\\n\\t\\t\\t\\t   return 0;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1637580,
                "title": "simple-javascript-100-speed-100-memory",
                "content": "```\\nvar firstPalindrome = function(words) {\\n    const palindrome = (words.filter(item => item == item.split(\"\").reverse().join(\"\")));\\n    if (palindrome.length > 0){\\n      return palindrome[0];\\n    }else{\\n      return \"\"\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstPalindrome = function(words) {\\n    const palindrome = (words.filter(item => item == item.split(\"\").reverse().join(\"\")));\\n    if (palindrome.length > 0){\\n      return palindrome[0];\\n    }else{\\n      return \"\"\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1636094,
                "title": "c-simple-easy-solution-simple-approach",
                "content": "class Solution {\\npublic:\\n*     bool ispalidrome(string it){\\n        for(int i=0,j=it.size()-1;i<j;++i,--j){\\n            if(it[i]!=it[j]){\\n                return false;\\n            }\\n         }\\n        return true;\\n    }\\n*     string firstPalindrome(vector<string>& words) {\\n        for(auto it:words){\\n        if(ispalidrome(it)){\\n            return it;\\n        }\\n        }\\n        return \"\";\\n    }\\n};\\n\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n*     bool ispalidrome(string it){\\n        for(int i=0,j=it.size()-1;i<j;++i,--j){\\n            if(it[i]!=it[j]){\\n                return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1635482,
                "title": "java-simple-solution-two-pointer",
                "content": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String s : words){\\n            int n = s.length(),i = 0,j = n-1;\\n            while(i <= j){\\n                char one = s.charAt(i);\\n                char two = s.charAt(j);\\n                if(one != two)break;\\n                i++;j--;\\n            }\\n            if(i >= j)return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public String firstPalindrome(String[] words) {\\n        for(String s : words){\\n            int n = s.length(),i = 0,j = n-1;\\n            while(i <= j){\\n                char one = s.charAt(i);\\n                char two = s.charAt(j);\\n                if(one != two)break;\\n                i++;j--;\\n            }\\n            if(i >= j)return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635449,
                "title": "100-javascript-solution-find-first-palindromic-string-in-the-array",
                "content": "![image](https://assets.leetcode.com/users/images/8c993ebf-1b44-463f-b209-1d20a57cdba8_1639895562.1323788.png)\\n```\\nvar firstPalindrome = function(words) {\\n\\n    let i=0;\\n    while(i<words.length){\\n    let word = words[i]\\n       let start = 0;\\n       let end = word.length-1;\\n        while(start<=end){\\n            if(end-start <=2 && word[start]===word[end]){return word}\\n            if(word[start]===word[end]){start++;end--;}\\n            else{break;}\\n        }\\n        i++\\n    }\\n\\n    return \\'\\';\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstPalindrome = function(words) {\\n\\n    let i=0;\\n    while(i<words.length){\\n    let word = words[i]\\n       let start = 0;\\n       let end = word.length-1;\\n        while(start<=end){\\n            if(end-start <=2 && word[start]===word[end]){return word}\\n            if(word[start]===word[end]){start++;end--;}\\n            else{break;}\\n        }\\n        i++\\n    }\\n\\n    return \\'\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1635416,
                "title": "c-solution",
                "content": "**Complexity**\\n- Time: O(n * m) where n = words.Length, m = average length of the words\\n- Space: O(1)\\n\\n**Implementation**\\n```\\npublic class Solution {\\n    public string FirstPalindrome(string[] words) {\\n        \\n        if(words == null || words.Length == 0)\\n            return \"\";\\n        \\n        foreach(var word in words)\\n        {\\n            if(isPalindrome(word))\\n                return word;\\n        }\\n        \\n        return \"\";\\n    }\\n        \\n    private bool isPalindrome(string word)\\n    {\\n        int i = 0, j = word.Length - 1;\\n        while(i < j)\\n        {\\n            if(word[i] != word[j])\\n                return false;\\n            \\n            i++;\\n            j--;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string FirstPalindrome(string[] words) {\\n        \\n        if(words == null || words.Length == 0)\\n            return \"\";\\n        \\n        foreach(var word in words)\\n        {\\n            if(isPalindrome(word))\\n                return word;\\n        }\\n        \\n        return \"\";\\n    }\\n        \\n    private bool isPalindrome(string word)\\n    {\\n        int i = 0, j = word.Length - 1;\\n        while(i < j)\\n        {\\n            if(word[i] != word[j])\\n                return false;\\n            \\n            i++;\\n            j--;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635398,
                "title": "easy-simple-bruteforce",
                "content": "````\\nclass Solution {\\n    \\n    bool ispallindrome(string cha)\\n    {\\n        int i=0;\\n        int j=cha.size()-1;\\n        \\n    \\n        while(i<j&& cha[i]==cha[j])\\n        {\\n           \\n            i++;\\n            j--;\\n            \\n        }\\n       return i>=j;\\n        \\n            \\n    }\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n      for(auto val:words)\\n      {\\n          if(ispallindrome(val))\\n          {\\n              return val;\\n          }\\n      }\\n        return \"\";\\n    }\\n};\\nMethod 2:Using STL\\nclass Solution {\\n    \\n   \\n        \\n        \\n    \\n       \\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n      for(auto val:words)\\n      {\\n         string a=val;\\n          reverse(a.begin(),a.end());\\n\\t\\t if(val==a)\\n\\t\\t return val;\\n      }\\n        return \"\";\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "````\\nclass Solution {\\n    \\n    bool ispallindrome(string cha)\\n    {\\n        int i=0;\\n        int j=cha.size()-1;\\n        \\n    \\n        while(i<j&& cha[i]==cha[j])\\n        {\\n           \\n            i++;\\n            j--;\\n            \\n        }\\n       return i>=j;\\n        \\n            \\n    }\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n      for(auto val:words)\\n      {\\n          if(ispallindrome(val))\\n          {\\n              return val;\\n          }\\n      }\\n        return \"\";\\n    }\\n};\\nMethod 2:Using STL\\nclass Solution {\\n    \\n   \\n        \\n        \\n    \\n       \\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n      for(auto val:words)\\n      {\\n         string a=val;\\n          reverse(a.begin(),a.end());\\n\\t\\t if(val==a)\\n\\t\\t return val;\\n      }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635312,
                "title": "how-can-i-make-these-more-efficient",
                "content": "1st Approach\\n```\\nclass Solution {\\npublic:\\n    bool palendrom(string s){\\n        for(int i = 0;i<s.length()/2;i++){\\n            if(s[i] != s[s.length() - 1 - i]){\\n                return 0;\\n            }\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i = 0;i<words.size();i++){\\n            if(palendrom(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```\\n\\n2nd Approach\\n\\n```\\nclass Solution {\\npublic:\\n    bool palendrom(string s){\\n        int flag = 0;\\n        for(int i = 0;i<s.length()/2;i++){\\n            if(s[i] != s[s.length() - 1 - i]){\\n                flag = 1;\\n            }\\n        }\\n        if(flag == 0){\\n            return 1;\\n        }\\n        else{\\n            return 0;\\n        }\\n    }\\n    string divideString(vector<string> a, int start, int end){\\n        if(start == end){\\n            if(palendrom(a[start])){\\n                return a[start];\\n            }\\n            else{\\n                return \"\";\\n            }\\n        }\\n        else{\\n            int mid = start + (end - start)/2;\\n            string s1 = divideString(a, start, mid);\\n            string s2 = divideString(a, mid + 1, end);\\n            \\n            if(s1.empty() != 1){\\n                return s1;\\n            }\\n            else if(s2.empty() != 1){\\n                return s2;\\n            }\\n            else{\\n                return \"\";\\n            }\\n        }\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        int start = 0;\\n        int end = words.size();\\n        string s = divideString(words,start,end - 1);\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Divide and Conquer"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool palendrom(string s){\\n        for(int i = 0;i<s.length()/2;i++){\\n            if(s[i] != s[s.length() - 1 - i]){\\n                return 0;\\n            }\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i = 0;i<words.size();i++){\\n            if(palendrom(words[i])){\\n                return words[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool palendrom(string s){\\n        int flag = 0;\\n        for(int i = 0;i<s.length()/2;i++){\\n            if(s[i] != s[s.length() - 1 - i]){\\n                flag = 1;\\n            }\\n        }\\n        if(flag == 0){\\n            return 1;\\n        }\\n        else{\\n            return 0;\\n        }\\n    }\\n    string divideString(vector<string> a, int start, int end){\\n        if(start == end){\\n            if(palendrom(a[start])){\\n                return a[start];\\n            }\\n            else{\\n                return \"\";\\n            }\\n        }\\n        else{\\n            int mid = start + (end - start)/2;\\n            string s1 = divideString(a, start, mid);\\n            string s2 = divideString(a, mid + 1, end);\\n            \\n            if(s1.empty() != 1){\\n                return s1;\\n            }\\n            else if(s2.empty() != 1){\\n                return s2;\\n            }\\n            else{\\n                return \"\";\\n            }\\n        }\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        int start = 0;\\n        int end = words.size();\\n        string s = divideString(words,start,end - 1);\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635176,
                "title": "c-solution-easy",
                "content": "class Solution {\\npublic:\\n    bool pal(string p)\\n    {\\n        int u=0,v=p.size()-1;\\n        while(u<=v)\\n        {\\n            if(p[u]!=p[v])\\n            {\\n                return false;\\n            }\\n            u++;\\n            v--;\\n        }\\n        return true;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto p: words)\\n        {\\n            if(pal(p))\\n                return p;\\n        }\\n        \\n    return \"\";\\n    }\\n        \\n        \\n    \\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool pal(string p)\\n    {\\n        int u=0,v=p.size()-1;\\n        while(u<=v)\\n        {\\n            if(p[u]!=p[v])\\n            {\\n                return false;\\n            }",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1806555,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1570825,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1708771,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 2060918,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1845281,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1843318,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1834172,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1748705,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1746059,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1734655,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1806555,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1570825,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1708771,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 2060918,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1845281,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1843318,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1834172,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1748705,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1746059,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            },
            {
                "id": 1734655,
                "content": [
                    {
                        "username": "jwalkertrained",
                        "content": "Easiest problem in the world "
                    },
                    {
                        "username": "XJMX4605",
                        "content": "![image](https://assets.leetcode.com/users/images/407915e7-36ef-40ae-83bc-ab6ac9be2545_1647852037.4084709.png)\\n"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`Approach 1: Comparing the \"original string\" with the \"reversed string\".\\nThe time complexity is O(n).`\\n\\n`Approach 2: Using the two-pointer approach with the \"original string\".\\nThe time complexity is O(n/2).Eventually O(n).`\\n\\nApproach 2 is better than Approach 1 in terms of actual submission time. On the other hand, Approach 1 is much simpler to understand."
                    },
                    {
                        "username": "futography",
                        "content": "if i get this problem in a google interview I will shave my head and go vegan for a year"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        l = []\n        l1 = [i for i in words if i == i[::-1]]\n        for i in l1:\n            return i\n            break\n        else:\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one line \\npublic static String firstPalindrome(String[] words) { for (int i = 0; i < words.length; i++) if (new StringBuilder(words[i]).reverse().toString().equals(words[i])) return words[i]; return \"\"; }\\n"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    bool ispal(string s){\\n        int n=s.size();\\n        int i=0;\\n        int j=n-1;\\n        while(i<=j){\\n            if(s[i]!=s[j]) return 0;\\n            i++;\\n            j--;\\n        }\\n        return 1;\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        string s=\"\";\\n        for(int i=0;i<words.size();i++){\\n            if(ispal(words[i])){ s+=words[i]; return s;}\\n        }\\n        return s;\\n    }\\n};"
                    },
                    {
                        "username": "deleted_user",
                        "content": "class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        for i in words:\\n            a = i\\n            if i == a[::-1]:\\n                return i\\n        return \\'\\'"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": " for i in words:\\n            if i == i[-1::-1]:\\n                return i\\n        return\"\""
                    },
                    {
                        "username": "nitin2002",
                        "content": "i have written this solution for the problem but it giving error: no matching conversion for functional-style cast from \\'void\\' to \\'std::string\\' (aka \\'basic_string<char>\\')\\n            s = string(reverse(it.begin(),it.end()));  ERROR what i am doing wrong here? \\n\\n\\n class Solution {\\npublic:\\n    string firstPalindrome(vector<string>& words) {\\n        for(auto it : words){ \\n            string s;\\n            s = reverse(it.begin(),it.end());\\n            if(s==it){\\n                return it;\\n            }\\n\\n        }\\n\\n\\n    }\\n}; @"
                    }
                ]
            }
        ]
    }
]