[
    {
        "title": "Sqrt(x)",
        "question_content": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\nYou must not use any built-in exponent function or operator.\n\n\tFor example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n\n&nbsp;\nExample 1:\n\nInput: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.\n\nExample 2:\n\nInput: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n\n&nbsp;\nConstraints:\n\n\t0 <= x <= 231 - 1",
        "solutions": [
            {
                "id": 25047,
                "title": "a-binary-search-solution",
                "content": "Instead of using fancy Newton's method, this plain binary search approach also works.\\n\\n    public int sqrt(int x) {\\n        if (x == 0)\\n            return 0;\\n        int left = 1, right = Integer.MAX_VALUE;\\n        while (true) {\\n            int mid = left + (right - left)/2;\\n            if (mid > x/mid) {\\n                right = mid - 1;\\n            } else {\\n                if (mid + 1 > x/(mid + 1))\\n                    return mid;\\n                left = mid + 1;\\n            }\\n        }\\n    }",
                "solutionTags": [],
                "code": "Instead of using fancy Newton's method, this plain binary search approach also works.\\n\\n    public int sqrt(int x) {\\n        if (x == 0)\\n            return 0;\\n        int left = 1, right = Integer.MAX_VALUE;\\n        while (true) {\\n            int mid = left + (right - left)/2;\\n            if (mid > x/mid) {\\n                right = mid - 1;\\n            } else {\\n                if (mid + 1 > x/(mid + 1))\\n                    return mid;\\n                left = mid + 1;\\n            }\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 25057,
                "title": "3-4-short-lines-integer-newton-every-language",
                "content": "Quite a few people used Newton already, but I didn't see someone make it this short. Same solution in every language. Explanation under the solutions.\\n\\n**C++ and C**\\n\\n        long r = x;\\n        while (r*r > x)\\n            r = (r + x/r) / 2;\\n        return r;\\n\\n**Python**\\n\\n        r = x\\n        while r*r > x:\\n            r = (r + x/r) / 2\\n        return r\\n\\n**Ruby**\\n\\n        r = x\\n        r = (r + x/r) / 2 while r*r > x\\n        r\\n\\n**Java and C#**\\n\\n        long r = x;\\n        while (r*r > x)\\n            r = (r + x/r) / 2;\\n        return (int) r;\\n\\n**JavaScript**\\n\\n        r = x;\\n        while (r*r > x)\\n            r = ((r + x/r) / 2) | 0;\\n        return r;\\n\\n---\\n\\n**Explanation**\\n\\nApparently, [using only integer division for the Newton method works](https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division). And I guessed that if I start at x, the root candidate will decrease monotonically and never get too small.\\n\\nThe above solutions all got accepted, and in C++ I also verified it locally on my PC for all possible inputs (0 to 2147483647):\\n\\n    #include <iostream>\\n    #include <climits>\\n    using namespace std;\\n    \\n    int mySqrt(int x) {\\n        long long r = x;\\n        while (r*r > x)\\n            r = (r + x/r) / 2;\\n        return r;\\n    }\\n    \\n    int main() {\\n        for (long long x=0; x<=INT_MAX; ++x) {\\n            long long r = mySqrt(x);\\n            if (r<0 || r*r > x || (r+1)*(r+1) <= x)\\n                cout << \"false: \" << x << \" \" << r << endl;\\n            if (x % 10000000 == 0)\\n                cout << x << endl;\\n        }\\n        cout << \"all checked\" << endl;\\n    }",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "Quite a few people used Newton already, but I didn't see someone make it this short. Same solution in every language. Explanation under the solutions.\\n\\n**C++ and C**\\n\\n        long r = x;\\n        while (r*r > x)\\n            r = (r + x/r) / 2;\\n        return r;\\n\\n**Python**\\n\\n        r = x\\n        while r*r > x:\\n            r = (r + x/r) / 2\\n        return r\\n\\n**Ruby**\\n\\n        r = x\\n        r = (r + x/r) / 2 while r*r > x\\n        r\\n\\n**Java and C#**\\n\\n        long r = x;\\n        while (r*r > x)\\n            r = (r + x/r) / 2;\\n        return (int) r;\\n\\n**JavaScript**\\n\\n        r = x;\\n        while (r*r > x)\\n            r = ((r + x/r) / 2) | 0;\\n        return r;\\n\\n---\\n\\n**Explanation**\\n\\nApparently, [using only integer division for the Newton method works](https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division). And I guessed that if I start at x, the root candidate will decrease monotonically and never get too small.\\n\\nThe above solutions all got accepted, and in C++ I also verified it locally on my PC for all possible inputs (0 to 2147483647):\\n\\n    #include <iostream>\\n    #include <climits>\\n    using namespace std;\\n    \\n    int mySqrt(int x) {\\n        long long r = x;\\n        while (r*r > x)\\n            r = (r + x/r) / 2;\\n        return r;\\n    }\\n    \\n    int main() {\\n        for (long long x=0; x<=INT_MAX; ++x) {\\n            long long r = mySqrt(x);\\n            if (r<0 || r*r > x || (r+1)*(r+1) <= x)\\n                cout << \"false: \" << x << \" \" << r << endl;\\n            if (x % 10000000 == 0)\\n                cout << x << endl;\\n        }\\n        cout << \"all checked\" << endl;\\n    }",
                "codeTag": "C++"
            },
            {
                "id": 25198,
                "title": "3-java-solutions-with-explanation",
                "content": "The three solutions are as the follows, solution1 and solution3 are pretty straight forward. \\n\\n     Look for the critical point: i * i <= x && (i+1)(i+1) > x\\n\\n A little trick is using i <=  x / i for comparison, instead of i * i <= x, to avoid exceeding integer upper limit.\\n\\n**Solution1 - Binary Search Solution: Time complexity = O(lg(x)) = O(32)=O(1)**\\n\\n\\n    public int mySqrt(int x) {\\n    \\tif (x == 0) return 0;\\n    \\tint start = 1, end = x;\\n    \\twhile (start < end) { \\n    \\t\\tint mid = start + (end - start) / 2;\\n    \\t\\tif (mid <= x / mid && (mid + 1) > x / (mid + 1))// Found the result\\n    \\t\\t\\treturn mid; \\n    \\t\\telse if (mid > x / mid)// Keep checking the left part\\n    \\t\\t\\tend = mid;\\n    \\t\\telse\\n    \\t\\t\\tstart = mid + 1;// Keep checking the right part\\n    \\t}\\n    \\treturn start;\\n    }\\n\\n**Solution2 - Newton Solution: Time complexity = O(lg(x))**\\n\\nI think Newton solution will not be faster than Solution1(Binary Search), because i = (i + x / i) / 2, the two factors i and x / i are with opposite trends. So time complexity in the best case is O(lgx). \\n\\n**Anyone can give the accurate time complexity? Appreciate it!**\\n\\n    public int mySqrt(int x) {\\n        if (x == 0) return 0;\\n    \\tlong i = x;\\n    \\twhile(i > x / i)  \\n    \\t\\ti = (i + x / i) / 2;\\t    \\t\\n    \\treturn (int)i;\\n    }\\n\\n**Solution3 - Brute Force: Time complexity = O(sqrt(x))**\\n\\n    public int mySqrt(int x) { \\n    \\tif (x == 0) return 0;\\n    \\tfor (int i = 1; i <= x / i; i++) \\t\\t\\n    \\t\\tif (i <= x / i && (i + 1) > x / (i + 1))// Look for the critical point: i*i <= x && (i+1)(i+1) > x\\n    \\t\\t\\treturn i;\\t\\t\\n    \\treturn -1;\\n    }",
                "solutionTags": [],
                "code": "The three solutions are as the follows, solution1 and solution3 are pretty straight forward. \\n\\n     Look for the critical point: i * i <= x && (i+1)(i+1) > x\\n\\n A little trick is using i <=  x / i for comparison, instead of i * i <= x, to avoid exceeding integer upper limit.\\n\\n**Solution1 - Binary Search Solution: Time complexity = O(lg(x)) = O(32)=O(1)**\\n\\n\\n    public int mySqrt(int x) {\\n    \\tif (x == 0) return 0;\\n    \\tint start = 1, end = x;\\n    \\twhile (start < end) { \\n    \\t\\tint mid = start + (end - start) / 2;\\n    \\t\\tif (mid <= x / mid && (mid + 1) > x / (mid + 1))// Found the result\\n    \\t\\t\\treturn mid; \\n    \\t\\telse if (mid > x / mid)// Keep checking the left part\\n    \\t\\t\\tend = mid;\\n    \\t\\telse\\n    \\t\\t\\tstart = mid + 1;// Keep checking the right part\\n    \\t}\\n    \\treturn start;\\n    }\\n\\n**Solution2 - Newton Solution: Time complexity = O(lg(x))**\\n\\nI think Newton solution will not be faster than Solution1(Binary Search), because i = (i + x / i) / 2, the two factors i and x / i are with opposite trends. So time complexity in the best case is O(lgx). \\n\\n**Anyone can give the accurate time complexity? Appreciate it!**\\n\\n    public int mySqrt(int x) {\\n        if (x == 0) return 0;\\n    \\tlong i = x;\\n    \\twhile(i > x / i)  \\n    \\t\\ti = (i + x / i) / 2;\\t    \\t\\n    \\treturn (int)i;\\n    }\\n\\n**Solution3 - Brute Force: Time complexity = O(sqrt(x))**\\n\\n    public int mySqrt(int x) { \\n    \\tif (x == 0) return 0;\\n    \\tfor (int i = 1; i <= x / i; i++) \\t\\t\\n    \\t\\tif (i <= x / i && (i + 1) > x / (i + 1))// Look for the critical point: i*i <= x && (i+1)(i+1) > x\\n    \\t\\t\\treturn i;\\t\\t\\n    \\treturn -1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3212506,
                "title": "c-binary-search-easiest-beginner-friendly-sol",
                "content": "# Intuition of this Problem:\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**NOTE - PLEASE READ APPROACH FIRST THEN SEE THE CODE. YOU WILL DEFINITELY UNDERSTAND THE CODE LINE BY LINE AFTER SEEING THE APPROACH.**\\n\\n# Approach for this Problem:\\n1. If x is 0, return 0.\\n2. Initialize first to 1 and last to x.\\n3. While first is less than or equal to last, do the following:\\n    a. Compute mid as first + (last - first) / 2.\\n    b. If mid * mid equals x, return mid.\\n    c. If mid * mid is greater than x, update last to mid - 1.\\n    d. If mid * mid is less than x, update first to mid + 1.\\n4. Return last.\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n\\n# Code:\\n```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if (x == 0)\\n            return x;\\n        int first = 1, last = x;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            // mid * mid == x gives runtime error\\n            if (mid  == x / mid)\\n                return mid;\\n            else if (mid > x / mid) {\\n                last = mid - 1;\\n            }\\n            else {\\n                first = mid + 1;\\n            }\\n        }\\n        return last;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        int first = 1, last = x;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            if (mid == x / mid) {\\n                return mid;\\n            } else if (mid > x / mid) {\\n                last = mid - 1;\\n            } else {\\n                first = mid + 1;\\n            }\\n        }\\n        return last;\\n    }\\n}\\n\\n```\\n```Python []\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 0:\\n            return 0\\n        first, last = 1, x\\n        while first <= last:\\n            mid = first + (last - first) // 2\\n            if mid == x // mid:\\n                return mid\\n            elif mid > x // mid:\\n                last = mid - 1\\n            else:\\n                first = mid + 1\\n        return last\\n\\n```\\n\\n# Time Complexity and Space Complexity:\\n- Time complexity: **O(logn)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(1)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Binary Search"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if (x == 0)\\n            return x;\\n        int first = 1, last = x;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            // mid * mid == x gives runtime error\\n            if (mid  == x / mid)\\n                return mid;\\n            else if (mid > x / mid) {\\n                last = mid - 1;\\n            }\\n            else {\\n                first = mid + 1;\\n            }\\n        }\\n        return last;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        int first = 1, last = x;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            if (mid == x / mid) {\\n                return mid;\\n            } else if (mid > x / mid) {\\n                last = mid - 1;\\n            } else {\\n                first = mid + 1;\\n            }\\n        }\\n        return last;\\n    }\\n}\\n\\n```\n```Python []\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 0:\\n            return 0\\n        first, last = 1, x\\n        while first <= last:\\n            mid = first + (last - first) // 2\\n            if mid == x // mid:\\n                return mid\\n            elif mid > x // mid:\\n                last = mid - 1\\n            else:\\n                first = mid + 1\\n        return last\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3706594,
                "title": "easy-explained-solution-beats-100",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nWe want to find the square root of a given non-negative integer x. Instead of using a traditional approach like repeatedly subtracting numbers until we reach 0 or using a library function, we\\'ll use a smarter method called \"Binary Search.\" Binary Search helps us quickly find the square root by repeatedly narrowing down the search range.\\n\\n# Approach\\n1. We first check if x is 0 or 1. If it is, we know that the square root of 0 and 1 is 0 and 1 respectively, so we directly return x.\\n\\n1. For any other value of x, we set up a search range between 1 and x. We initialize two variables start and end to represent the range.\\n\\n1. Now comes the clever part: We use a while loop to repeatedly divide the search range in half (Binary Search) to find the square root.\\n\\n1. In each iteration of the loop, we calculate the middle value mid using the formula **start + (end - start) / 2**. This formula ensures that we don\\'t encounter any integer overflow when dealing with large values of x.\\n\\n1. Next, we calculate the square of mid and compare it with x.\\n\\n1. If the square of mid is greater than x, we know the square root lies in the lower half of the search range. So, we move the end pointer to the left to narrow down the search range.\\n\\n1. If the square of mid is equal to x, we have found the square root! So, we return mid as the answer.\\n\\n1. If the square of mid is less than x, we know the square root lies in the upper half of the search range. So, we move the start pointer to the right to continue the search.\\n\\n1. We repeat steps 4 to 8 until the start pointer becomes greater than the end pointer. At this point, we have found the floor value of the square root, and end holds that value.\\n\\n1. To ensure that we return the correct floor value of the square root, we round down the value of end to the nearest integer using the Math.round() method.\\n\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this approach is $$O(logN)$$. It\\'s very efficient because Binary Search reduces the search range by half in each iteration, making the search faster.\\n\\n- Space complexity:\\nThe space complexity is $$O(1)$$, which means the amount of extra memory used is constant, regardless of the input. We only use a few variables to store the search range and the middle value during the computation.\\n\\n# Code\\n```java []\\nclass Solution {\\n    public int mySqrt(int x) {\\n        // For special cases when x is 0 or 1, return x.\\n        if (x == 0 || x == 1)\\n            return x;\\n\\n        // Initialize the search range for the square root.\\n        int start = 1;\\n        int end = x;\\n        int mid = -1;\\n\\n        // Perform binary search to find the square root of x.\\n        while (start <= end) {\\n            // Calculate the middle point using \"start + (end - start) / 2\" to avoid integer overflow.\\n            mid = start + (end - start) / 2;\\n\\n            // If the square of the middle value is greater than x, move the \"end\" to the left (mid - 1).\\n            if ((long) mid * mid > (long) x)\\n                end = mid - 1;\\n            else if (mid * mid == x)\\n                // If the square of the middle value is equal to x, we found the square root.\\n                return mid;\\n            else\\n                // If the square of the middle value is less than x, move the \"start\" to the right (mid + 1).\\n                start = mid + 1;\\n        }\\n\\n        // The loop ends when \"start\" becomes greater than \"end\", and \"end\" is the integer value of the square root.\\n        // However, since we might have been using integer division in the calculations,\\n        // we round down the value of \"end\" to the nearest integer to get the correct square root.\\n        return Math.round(end);\\n    }\\n}\\n\\n```\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        // For special cases when x is 0 or 1, return x.\\n        if (x == 0 || x == 1)\\n            return x;\\n        \\n        // Initialize the search range for the square root.\\n        int start = 1;\\n        int end = x;\\n        int mid = -1;\\n        \\n        // Perform binary search to find the square root of x.\\n        while (start <= end) {\\n            // Calculate the middle point using \"start + (end - start) / 2\" to avoid integer overflow.\\n            mid = start + (end - start) / 2;\\n            \\n            // Convert mid to long to handle large values without overflow.\\n            long long square = static_cast<long long>(mid) * mid;\\n            \\n            // If the square of the middle value is greater than x, move the \"end\" to the left (mid - 1).\\n            if (square > x)\\n                end = mid - 1;\\n            else if (square == x)\\n                // If the square of the middle value is equal to x, we found the square root.\\n                return mid;\\n            else\\n                // If the square of the middle value is less than x, move the \"start\" to the right (mid + 1).\\n                start = mid + 1;\\n        }\\n        \\n        // The loop ends when \"start\" becomes greater than \"end\", and \"end\" is the integer value of the square root.\\n        // However, since we might have been using integer division in the calculations,\\n        // we round down the value of \"end\" to the nearest integer to get the correct square root.\\n        return static_cast<int>(std::round(end));\\n    }\\n};\\n```\\n## ***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/3fc6215b-c7f4-4c0a-a984-cf5e7cadbaa9_1688235529.8419888.jpeg)\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Math",
                    "Binary Search"
                ],
                "code": "```java []\\nclass Solution {\\n    public int mySqrt(int x) {\\n        // For special cases when x is 0 or 1, return x.\\n        if (x == 0 || x == 1)\\n            return x;\\n\\n        // Initialize the search range for the square root.\\n        int start = 1;\\n        int end = x;\\n        int mid = -1;\\n\\n        // Perform binary search to find the square root of x.\\n        while (start <= end) {\\n            // Calculate the middle point using \"start + (end - start) / 2\" to avoid integer overflow.\\n            mid = start + (end - start) / 2;\\n\\n            // If the square of the middle value is greater than x, move the \"end\" to the left (mid - 1).\\n            if ((long) mid * mid > (long) x)\\n                end = mid - 1;\\n            else if (mid * mid == x)\\n                // If the square of the middle value is equal to x, we found the square root.\\n                return mid;\\n            else\\n                // If the square of the middle value is less than x, move the \"start\" to the right (mid + 1).\\n                start = mid + 1;\\n        }\\n\\n        // The loop ends when \"start\" becomes greater than \"end\", and \"end\" is the integer value of the square root.\\n        // However, since we might have been using integer division in the calculations,\\n        // we round down the value of \"end\" to the nearest integer to get the correct square root.\\n        return Math.round(end);\\n    }\\n}\\n\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        // For special cases when x is 0 or 1, return x.\\n        if (x == 0 || x == 1)\\n            return x;\\n        \\n        // Initialize the search range for the square root.\\n        int start = 1;\\n        int end = x;\\n        int mid = -1;\\n        \\n        // Perform binary search to find the square root of x.\\n        while (start <= end) {\\n            // Calculate the middle point using \"start + (end - start) / 2\" to avoid integer overflow.\\n            mid = start + (end - start) / 2;\\n            \\n            // Convert mid to long to handle large values without overflow.\\n            long long square = static_cast<long long>(mid) * mid;\\n            \\n            // If the square of the middle value is greater than x, move the \"end\" to the left (mid - 1).\\n            if (square > x)\\n                end = mid - 1;\\n            else if (square == x)\\n                // If the square of the middle value is equal to x, we found the square root.\\n                return mid;\\n            else\\n                // If the square of the middle value is less than x, move the \"start\" to the right (mid + 1).\\n                start = mid + 1;\\n        }\\n        \\n        // The loop ends when \"start\" becomes greater than \"end\", and \"end\" is the integer value of the square root.\\n        // However, since we might have been using integer division in the calculations,\\n        // we round down the value of \"end\" to the nearest integer to get the correct square root.\\n        return static_cast<int>(std::round(end));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25061,
                "title": "python-binary-search-solution-o-lgn",
                "content": "```\\nclass Solution(object):\\n    def mySqrt(self, x):\\n        l, r = 0, x\\n        while l <= r:\\n            mid = l + (r-l)//2\\n            if mid * mid <= x < (mid+1)*(mid+1):\\n                return mid\\n            elif x < mid * mid:\\n                r = mid - 1\\n            else:\\n                l = mid + 1\\n```",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution(object):\\n    def mySqrt(self, x):\\n        l, r = 0, x\\n        while l <= r:\\n            mid = l + (r-l)//2\\n            if mid * mid <= x < (mid+1)*(mid+1):\\n                return mid\\n            elif x < mid * mid:\\n                r = mid - 1\\n            else:\\n                l = mid + 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25048,
                "title": "share-my-o-log-n-solution-using-bit-manipulation",
                "content": "## Basic Idea: ##\\n\\n----------\\nSince sqrt(x) is composed of binary bits, I calculate sqrt(x) by deciding every bit from the most significant to least significant. **Since an integer n can have O(log n) bits with each bit decided within constant time, this algorithm has time limit O(log n), actually, because an Integer can have at most 32 bits, I can also say this algorithm takes O(32)=O(1) time.**\\n\\n----------\\n  \\n\\n     public int sqrt(int x) {\\n        if(x==0)\\n            return 0;\\n        int h=0;\\n        while((long)(1<<h)*(long)(1<<h)<=x) // firstly, find the most significant bit\\n            h++;\\n        h--;\\n        int b=h-1;\\n        int res=(1<<h);\\n        while(b>=0){  // find the remaining bits\\n            if((long)(res | (1<<b))*(long)(res |(1<<b))<=x)\\n                res|=(1<<b);\\n            b--;\\n        }\\n        return res;\\n    }",
                "solutionTags": [],
                "code": "## Basic Idea: ##\\n\\n----------\\nSince sqrt(x) is composed of binary bits, I calculate sqrt(x) by deciding every bit from the most significant to least significant. **Since an integer n can have O(log n) bits with each bit decided within constant time, this algorithm has time limit O(log n), actually, because an Integer can have at most 32 bits, I can also say this algorithm takes O(32)=O(1) time.**\\n\\n----------\\n  \\n\\n     public int sqrt(int x) {\\n        if(x==0)\\n            return 0;\\n        int h=0;\\n        while((long)(1<<h)*(long)(1<<h)<=x) // firstly, find the most significant bit\\n            h++;\\n        h--;\\n        int b=h-1;\\n        int res=(1<<h);\\n        while(b>=0){  // find the remaining bits\\n            if((long)(res | (1<<b))*(long)(res |(1<<b))<=x)\\n                res|=(1<<b);\\n            b--;\\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 25066,
                "title": "solve-this-problem-with-binary-search",
                "content": "    class Solution {\\n    public:\\n        int sqrt(int x) {\\n            if (0 == x) return 0;\\n            int left = 1, right = x, ans;\\n            while (left <= right) {\\n                int mid = left + (right - left) / 2;\\n                if (mid <= x / mid) {\\n                    left = mid + 1;\\n                    ans = mid;\\n                } else {\\n                    right = mid - 1;\\n                }\\n            }\\n            return ans;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int sqrt(int x) {\\n            if (0 == x) return 0;\\n            int left = 1, right = x, ans;\\n            while (left <= right) {\\n                int mid = left + (right - left) / 2;\\n                if (mid <= x / mid) {\\n                    left = mid + 1;\\n                    ans = mid;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 553452,
                "title": "c-binary-search-approach-runtime-0ms-faster-than-100",
                "content": "As stated this approach gives:\\nRuntime: 0ms.\\nFaster than 100% of C++ online submission (*as of date posted*).\\n\\n**Time Complexity:** O(logn) | due to binary search using while loop.\\n**Space Complexity:** O(1) | as only 4 variables are initialized at the beginning. Which is constant irrespective of given input.\\n\\n```\\nlong long s=0, e=x, ans, mid;   //long long due to some of test cases overflows integer limit.\\n        while(s<=e){             \\n            mid=(s+e)/2;\\n            if(mid*mid==x) return mid;     //if the \\'mid\\' value ever gives the result, we simply return it.\\n            else if(mid*mid<x){             \\n                s=mid+1;        //if \\'mid\\' value encounterted gives lower result, we simply discard all the values lower than mid.\\n                ans=mid;        //an extra pointer \\'ans\\' is maintained to keep track of only lowest \\'mid\\' value. \\n            }\\n            else e=mid-1;       //if \\'mid\\' value encountered gives greater result, we simply discard all the values greater than mid. \\n        }\\n        return ans;   \\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nlong long s=0, e=x, ans, mid;   //long long due to some of test cases overflows integer limit.\\n        while(s<=e){             \\n            mid=(s+e)/2;\\n            if(mid*mid==x) return mid;     //if the \\'mid\\' value ever gives the result, we simply return it.\\n            else if(mid*mid<x){             \\n                s=mid+1;        //if \\'mid\\' value encounterted gives lower result, we simply discard all the values lower than mid.\\n                ans=mid;        //an extra pointer \\'ans\\' is maintained to keep track of only lowest \\'mid\\' value. \\n            }\\n            else e=mid-1;       //if \\'mid\\' value encountered gives greater result, we simply discard all the values greater than mid. \\n        }\\n        return ans;   \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3093338,
                "title": "2-approaches-using-linear-search-and-binary-search",
                "content": "\\n# Approach 1(Using Linear Search)\\n<!-- Describe your approach to solving the problem. -->\\nIt uses a for loop to iterate through the numbers from 1 to x/i. If the number is found, then it returns that number. Otherwise, it returns i-1.\\n### Note 1:\\nHere we are returning (i-1) because at some point (i*i) became greater than x and loop stopped!!!\\n### Note 2:\\nHere we are using division instead of multiplication to avoid integer overflow.\\n\\n\\n# Complexity\\n- Time complexity: $$O(sqrt(n))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x==0) return 0;\\n        int i=1;\\n        for(;i<=x/i;i++) //using division instead of multiplication to avoid integer overflow\\n            if(x/i==i)  return i;\\n        return i-1; //returning (i-1) because at some point (i*i) became greater than x and loop stopped!!!\\n    }\\n}\\n```\\n\\n# Approach 2(Using Binary Search)\\n<!-- Describe your approach to solving the problem. -->\\nIt uses a binary search algorithm to find the square root of a number.\\n\\n# Complexity\\n- Time complexity: $$O(logn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x==0) return 0;\\n        int low = 1,high = x,ans =0;\\n        while(low<=high){\\n            int mid =low + (high-low)/2;\\n            if(x/mid==mid)  return mid;\\n            else if(x/mid<mid)   high=mid-1;\\n            else {low = mid+1; ans = mid;}\\n        }\\n        return ans;\\n    }\\n}\\n```\\n### Upvote me if you find the solution helpful",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x==0) return 0;\\n        int i=1;\\n        for(;i<=x/i;i++) //using division instead of multiplication to avoid integer overflow\\n            if(x/i==i)  return i;\\n        return i-1; //returning (i-1) because at some point (i*i) became greater than x and loop stopped!!!\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x==0) return 0;\\n        int low = 1,high = x,ans =0;\\n        while(low<=high){\\n            int mid =low + (high-low)/2;\\n            if(x/mid==mid)  return mid;\\n            else if(x/mid<mid)   high=mid-1;\\n            else {low = mid+1; ans = mid;}\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 860465,
                "title": "simple-java-solution-with-comments-1ms-o-log-n",
                "content": "**Approach:**\\n- Intuitive Brute force solution would be `O(n)` as we check every element from `0` to `x/2`\\n- The next better time complexity we can target it `O(logN)` which suggests at using binary search.\\n\\n**Algorithm:**\\n- start with a range between `1 to x/2` (square root of any number can not be greater than half of the number)\\n- find the mid point and calculate the `x/mid` as `quotient`\\n\\t- we go for division instead of multiplication to avoid unwanted overflow\\n- If `quotient == mid`; we have our answer\\n- If `quotient > mid`;  move start to `mid`; not to `mid + 1` as `mid` might be a valid answer\\n- if `quotient < mid`; move end to `mid-1`\\n\\n```\\n// using binary search\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x <= 1) return x;\\n        int start = 1;\\n        int end = x/2;\\n        \\n        while(start < end) {\\n            // start is not always moving and hence we can get stuck in infinite loop with mid calculation\\n            // Adding 1 to mid everytime to ensure we always move the mid\\n            int mid = (start + (end-start)/2) + 1;\\n            \\n            // use division instead of multiplication to avoid overflow\\n            int div = x/mid;\\n            if(div == mid) return mid;\\n            if(div > mid) start = mid;\\n            else end = mid-1;\\n        }\\n        \\n        return start;\\n    }\\n}\\n```\\n\\n**Please Vote up, if this helped you!!**\\n\\nHappy Coding!! :)",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\n// using binary search\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x <= 1) return x;\\n        int start = 1;\\n        int end = x/2;\\n        \\n        while(start < end) {\\n            // start is not always moving and hence we can get stuck in infinite loop with mid calculation\\n            // Adding 1 to mid everytime to ensure we always move the mid\\n            int mid = (start + (end-start)/2) + 1;\\n            \\n            // use division instead of multiplication to avoid overflow\\n            int div = x/mid;\\n            if(div == mid) return mid;\\n            if(div > mid) start = mid;\\n            else end = mid-1;\\n        }\\n        \\n        return start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 344755,
                "title": "python-solution-with-binary-search",
                "content": "```python\\n    def mySqrt(self, x):\\n        lo, hi = 0, x\\n        \\n        while lo <= hi:\\n            mid = (lo + hi) // 2\\n            \\n            if mid * mid > x:\\n                hi = mid - 1\\n            elif mid * mid < x:\\n                lo = mid + 1\\n            else:\\n                return mid\\n        \\n        # When there is no perfect square, hi is the the value on the left\\n        # of where it would have been (rounding down). If we were rounding up, \\n        # we would return lo\\n        return hi\\n```",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "```python\\n    def mySqrt(self, x):\\n        lo, hi = 0, x\\n        \\n        while lo <= hi:\\n            mid = (lo + hi) // 2\\n            \\n            if mid * mid > x:\\n                hi = mid - 1\\n            elif mid * mid < x:\\n                lo = mid + 1\\n            else:\\n                return mid\\n        \\n        # When there is no perfect square, hi is the the value on the left\\n        # of where it would have been (rounding down). If we were rounding up, \\n        # we would return lo\\n        return hi\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 25255,
                "title": "newton-s-iterative-method-in-c",
                "content": "    int sqrt(int x) {\\n        double ans    = x;\\n        double delta  = 0.0001;\\n        while (fabs(pow(ans, 2) - x) > delta) {\\n            ans = (ans + x / ans) / 2;\\n        }\\n        return ans;\\n    }\\n\\nThe key point is the average result is calculate by \"ans = (ans + x / ans) / 2\";\\n\\nFor instance, when calculate sqrt(2) :\\n\\n       Guess Result        Quotient                             Average Result\\n              1          2 / 1 = 2                            (2 + 1) / 2 = 1.5\\n             1.5      2 / 1.5 = 1.3333                (1.3333 + 1.5) / 2 = 1.4167\\n           1.4167    2 / 1.4167 = 1.4118          (1.4167 + 1.4118) / 2 = 1.4142\\n            ... ...",
                "solutionTags": [],
                "code": "    int sqrt(int x) {\\n        double ans    = x;\\n        double delta  = 0.0001;\\n        while (fabs(pow(ans, 2) - x) > delta) {\\n            ans = (ans + x / ans) / 2;\\n        }\\n        return ans;\\n    }\\n\\nThe key point is the average result is calculate by \"ans = (ans + x / ans) / 2\";\\n\\nFor instance, when calculate sqrt(2) :\\n\\n       Guess Result        Quotient                             Average Result\\n              1          2 / 1 = 2                            (2 + 1) / 2 = 1.5\\n             1.5      2 / 1.5 = 1.3333                (1.3333 + 1.5) / 2 = 1.4167\\n           1.4167    2 / 1.4167 = 1.4118          (1.4167 + 1.4118) / 2 = 1.4142\\n            ... ...",
                "codeTag": "Unknown"
            },
            {
                "id": 25167,
                "title": "easy-to-understand-javascript-solution",
                "content": "Just simple binary search.\\n\\nRemember that the square root of each X must happen within [1, x/2 + 1]\\n\\nSo we can cut half at the first place.\\n\\n      var mySqrt = function(x) {\\n      var left = 1;\\n      var right = Math.floor(x / 2) + 1;\\n      var mid;\\n    \\n      while (left <= right) {\\n        mid = Math.floor((left + right) / 2);\\n    \\n        if (mid * mid > x) {\\n          right = mid - 1;\\n        } else if (mid * mid < x) {\\n          left = mid + 1;\\n        } else {\\n          return mid;\\n        }\\n      }\\n    \\n      return right;\\n    };\\n\\nThe tricky point is that we will return `right` if there is no square root found.\\n\\nThe reason is the square root is between [n-1, n] and we can know that when `while` is broken `right` must be n-1",
                "solutionTags": [
                    "JavaScript",
                    "Binary Tree"
                ],
                "code": "Just simple binary search.\\n\\nRemember that the square root of each X must happen within [1, x/2 + 1]\\n\\nSo we can cut half at the first place.\\n\\n      var mySqrt = function(x) {\\n      var left = 1;\\n      var right = Math.floor(x / 2) + 1;\\n      var mid;\\n    \\n      while (left <= right) {\\n        mid = Math.floor((left + right) / 2);\\n    \\n        if (mid * mid > x) {\\n          right = mid - 1;\\n        } else if (mid * mid < x) {\\n          left = mid + 1;\\n        } else {\\n          return mid;\\n        }\\n      }\\n    \\n      return right;\\n    };\\n\\nThe tricky point is that we will return `right` if there is no square root found.\\n\\nThe reason is the square root is between [n-1, n] and we can know that when `while` is broken `right` must be n-1",
                "codeTag": "Unknown"
            },
            {
                "id": 3317131,
                "title": "4-lines-of-code-binary-search-approach-and-normal-approach",
                "content": "\\n\\n# 1. Normal Math Approach\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        number=1\\n        while number*number<=x:\\n            number+=1\\n        return number\\n\\n```\\n# Binary Search Approach\\n```\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left,right=1,x\\n        while left<=right:\\n            mid=(left+right)//2\\n            if mid*mid==x:\\n                return mid\\n            if mid*mid>x:\\n                right=mid-1\\n            else:\\n                left=mid+1\\n        return right\\n    \\n\\n```\\n# please upvote me it would encourage me alot\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        number=1\\n        while number*number<=x:\\n            number+=1\\n        return number\\n\\n```\n```\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left,right=1,x\\n        while left<=right:\\n            mid=(left+right)//2\\n            if mid*mid==x:\\n                return mid\\n            if mid*mid>x:\\n                right=mid-1\\n            else:\\n                left=mid+1\\n        return right\\n    \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2438966,
                "title": "java-1ms-100-faster-than-all-submission-using-binary-search-beginner-friendly-code",
                "content": "**Please UPVOTE if you like it\\nHappy coding**\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x == 0){\\n            return 0;\\n        }\\n        int start = 1;\\n        int end = x;\\n        int ans = 0;\\n        while(start <= end){\\n            int mid = start + (end-start)/2;\\n\\t\\t\\t//instead of mid*mid we are giving x/mid to tackle overflow of integer range when multiplying with bigger numbers\\n            if(mid <= x/mid){\\n                ans = mid;\\n                start = mid + 1;\\n            }else{\\n                end = mid -1;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x == 0){\\n            return 0;\\n        }\\n        int start = 1;\\n        int end = x;\\n        int ans = 0;\\n        while(start <= end){\\n            int mid = start + (end-start)/2;\\n\\t\\t\\t//instead of mid*mid we are giving x/mid to tackle overflow of integer range when multiplying with bigger numbers\\n            if(mid <= x/mid){\\n                ans = mid;\\n                start = mid + 1;\\n            }else{\\n                end = mid -1;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 352725,
                "title": "solutions-without-math-sqrt-o-log10-n-included",
                "content": "I see that alot of solutions here using Math.pow() or Math.sqrt(), which you are not supposed to do in real interview, because it\\'s the whole point - think of algorithm yourself.\\nSo I\\'ll provide three solutions - from slowest and easiest to fastest and most complex.\\n___\\n**Solution 1.**\\nFirst solution is pretty simple. Because we can truncate decimal digits, we can be sure that answer will always be integer number, so we can just try every number until we hit our target:\\n```\\nconst mySqrt = function(x) {\\n    let result = 1;\\n    while (result*result <= x) result++;\\n    return result - 1;\\n};\\n```\\nHere we start from `1` and increase it until we will encounter a point where `target*target > x`. Then, because we overshot our target by 1, we return `result - 1`.\\nTime complexity is **O(sqrt(n))**.\\n___\\n**Solution 2.**\\nThis solution essentially does the same as a first algorithm, but it uses binary search instead.\\n```\\nconst mySqrt = function(x) {\\n    let start = 0;\\n    let end = x;\\n    let res = 0;\\n    while (start < end) {\\n        res = Math.ceil((start + end)/2); // 1.\\n        if (res*res <= x && (res + 1)*(res + 1) > x) return res; // 2.\\n        if (res*res < x) start = res; // 3.\\n        else end = res; // 4.\\n    }\\n    return res;\\n};\\n```\\nIt starts search in `[0, x]`, then takes following steps:\\n1) It takes number in the middle: `res = Math.ceil((start + end)/2)`.\\n2) Checks if `res` is the number we need - it will happen only if `res^2 <= x` AND `(res + 1)^2 > x`. Return if correct.\\n3) Otherwise check if it overshot target or not. If not, reduce search segment to `[res, end]` (i.e. it now knows that every number before `res` will be less than number we search, so it now searches only for numbers of `res` or higher).\\n4) Else if it overshot, search in segment `[start, res]`.\\n5) Repeat until required number found.\\n\\nTime complexity is **O(log2(n))**.\\n___\\n**Solution 3.**\\nIt\\'s the fastest solution for long numbers. For short numbers it will work slower, but eventually it will become faster and also works for *very* big numbers.\\n*Another benefit of this algorithm is that with couple changed lines it can find decimal part of the answer with any precision.*\\nI will not explain this algorithm, but will provide link for explanation and example, as well as comments for my code where it will walk through algorithm on example from link.\\nHere\\'s explanation: https://www.homeschoolmath.net/teaching/square-root-algorithm.php.\\nNote that 3 first panels in example from link is enough for us because we don\\'t need decimal numbers.\\nNow here\\'s whole code:\\n```\\n/** https://www.homeschoolmath.net/teaching/square-root-algorithm.php\\n * @param {number} x Number to find square root from\\n * @return {number} Truncated square root result\\n */\\nconst mySqrt = function(x) {\\n    // quotient is a result which we assemble during for loop\\n    // divisor is number in brackets from example (e.g. (45))\\n    // dividend is number we get after subtraction (e.g. 2 after 6 - 4 in example)\\n    \\n    // Prepare first iteration (calculate values for the first pair)\\n    const source = cutString(String(x)); // Convert to array of pairs\\n    let quotient = String(findSqrt(source[0])); // Get square root of first pair. It\\'s the first number of the answer\\n    let dividend = (source[0] - quotient*quotient); // 2 in example (result of 6 - 4)\\n    \\n    // This for loop works for all pairs except of first (which was processed above)\\n    for (let i = 1; i < source.length; i++) {\\n        dividend = dividend + source[i]; // add next pair\\n        let tempD = String(findClosest(quotient*2, dividend)); // _ in example (in 4_)\\n        const divisor = String(quotient*2) + tempD; // actual divisor (where 4_ became 45)\\n        dividend = dividend - (divisor * tempD); // perform subtraction\\n        quotient += tempD; // finally get new quotient (result) for current iteration\\n    }    \\n    return quotient;\\n};\\n\\n/** Used to cut string in pairs\\n * @param {string} str String to cut in pairs\\n * @return {string[]} Array with pairs in it (first element can be single digit)\\n */\\nfunction cutString(str) {\\n    const chunks = [str.substr(0, 2 - str.length%2)];\\n\\tstr = str.substr(2 - str.length%2);\\n    const length = Math.ceil(str.length / 2);\\n    for (let i = 0; i < length; i++) {\\n        chunks.push(str.substr(i*2, 2));\\n    }\\n    return chunks;\\n}\\n\\n/** Used to find first square root (binary search will be slower here)\\n * @param {number} num Number to find square root from\\n * @return {string[]} Square root result\\n */\\nfunction findSqrt(num) {\\n    let result = 1;\\n    while (result*result <= num) result++;\\n    return result - 1;\\n};\\n\\n/** Used to find _ (*something* from example) (binary search will be slower here as well)\\n * @param {number} num Number to find last digit (123_)\\n * @param {number} target Number to use as target\\n * @return {number} Result in _, that justifies expression\\n */\\nfunction findClosest(num, target) {\\n    let result = 0;\\n    while ((num*10 + result) * result <= target) result++;\\n    return result - 1;\\n}\\n```\\nTime complexity is **O(log10(n))** (O(log10(n)/2) to be precise, but constants usually dropped for time complexity).",
                "solutionTags": [
                    "JavaScript",
                    "Binary Tree"
                ],
                "code": "```\\nconst mySqrt = function(x) {\\n    let result = 1;\\n    while (result*result <= x) result++;\\n    return result - 1;\\n};\\n```\n```\\nconst mySqrt = function(x) {\\n    let start = 0;\\n    let end = x;\\n    let res = 0;\\n    while (start < end) {\\n        res = Math.ceil((start + end)/2); // 1.\\n        if (res*res <= x && (res + 1)*(res + 1) > x) return res; // 2.\\n        if (res*res < x) start = res; // 3.\\n        else end = res; // 4.\\n    }\\n    return res;\\n};\\n```\n```\\n/** https://www.homeschoolmath.net/teaching/square-root-algorithm.php\\n * @param {number} x Number to find square root from\\n * @return {number} Truncated square root result\\n */\\nconst mySqrt = function(x) {\\n    // quotient is a result which we assemble during for loop\\n    // divisor is number in brackets from example (e.g. (45))\\n    // dividend is number we get after subtraction (e.g. 2 after 6 - 4 in example)\\n    \\n    // Prepare first iteration (calculate values for the first pair)\\n    const source = cutString(String(x)); // Convert to array of pairs\\n    let quotient = String(findSqrt(source[0])); // Get square root of first pair. It\\'s the first number of the answer\\n    let dividend = (source[0] - quotient*quotient); // 2 in example (result of 6 - 4)\\n    \\n    // This for loop works for all pairs except of first (which was processed above)\\n    for (let i = 1; i < source.length; i++) {\\n        dividend = dividend + source[i]; // add next pair\\n        let tempD = String(findClosest(quotient*2, dividend)); // _ in example (in 4_)\\n        const divisor = String(quotient*2) + tempD; // actual divisor (where 4_ became 45)\\n        dividend = dividend - (divisor * tempD); // perform subtraction\\n        quotient += tempD; // finally get new quotient (result) for current iteration\\n    }    \\n    return quotient;\\n};\\n\\n/** Used to cut string in pairs\\n * @param {string} str String to cut in pairs\\n * @return {string[]} Array with pairs in it (first element can be single digit)\\n */\\nfunction cutString(str) {\\n    const chunks = [str.substr(0, 2 - str.length%2)];\\n\\tstr = str.substr(2 - str.length%2);\\n    const length = Math.ceil(str.length / 2);\\n    for (let i = 0; i < length; i++) {\\n        chunks.push(str.substr(i*2, 2));\\n    }\\n    return chunks;\\n}\\n\\n/** Used to find first square root (binary search will be slower here)\\n * @param {number} num Number to find square root from\\n * @return {string[]} Square root result\\n */\\nfunction findSqrt(num) {\\n    let result = 1;\\n    while (result*result <= num) result++;\\n    return result - 1;\\n};\\n\\n/** Used to find _ (*something* from example) (binary search will be slower here as well)\\n * @param {number} num Number to find last digit (123_)\\n * @param {number} target Number to use as target\\n * @return {number} Result in _, that justifies expression\\n */\\nfunction findClosest(num, target) {\\n    let result = 0;\\n    while ((num*10 + result) * result <= target) result++;\\n    return result - 1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 25130,
                "title": "my-clean-c-code-8ms",
                "content": "Binary search and high is always converged to the one that 1 larger than the result.\\n\\n    class Solution {\\n    public:\\n        int mySqrt(int x) {\\n            int low = 0,  high = x, mid;\\n            if(x<2) return x; // to avoid mid = 0\\n            while(low<high)\\n            {\\n                mid = (low + high)/2;\\n                if(x/mid >= mid) low = mid+1;\\n                else high = mid;\\n            }\\n            return high-1;\\n            \\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int mySqrt(int x) {\\n            int low = 0,  high = x, mid;\\n            if(x<2) return x; // to avoid mid = 0\\n            while(low<high)\\n            {\\n                mid = (low + high)/2;\\n                if(x/mid >= mid) low = mid+1;\\n                else high = mid;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 359172,
                "title": "python-newton-solution",
                "content": "# Idea\\n\\nThe idea is that Newton is a root finding algorithm. By root finding we mean find a value `x` such that a given function `f(x) = 0`. \\n\\nTo use this technique we need to first define a function for which the root is the square root of our integer. \\n\\n```python\\nf(x) = x**2 - n \\n```\\n\\nYou can easily convince yourself that `sqrt(n)` is a root.\\n\\n```python\\nf(sqrt(n)) = sqrt(n)**2 - n  = n - n = 0\\n```\\n\\n# How does the Newton method work?\\nWe need to start with an approximation of the root say `x1 = x/2` and refine our estimate of the root iteratively. To do so we take the intersection of the tangent at our current root estimate and the x-axis see below.\\n\\n<img src=\"https://assets.leetcode.com/users/amchoukir/image_1565868791.png\" alt=\"drawing\" width=\"400\"/>\\n\\n<img src=\"https://assets.leetcode.com/users/amchoukir/image_1565868822.png\" alt=\"drawing\" width=\"400\"/>\\n\\n<img src=\"https://assets.leetcode.com/users/amchoukir/image_1565868861.png\" alt=\"drawing\" width=\"400\"/>\\n\\n<img src=\"https://assets.leetcode.com/users/amchoukir/image_1565868896.png\" alt=\"drawing\" width=\"400\"/>\\n\\n\\nTaken from wikipedia: https://en.wikipedia.org/wiki/Newton%27s_method\\n\\n# How can we derive the update equation?\\nThe tangent at our initial estimate is of the form `y = a * x + b`, basically the equation of line. The slope of the line is given by the derivative at our initial estimate.\\n\\n```python\\nf(x) = x**2 - n\\ndf(x) = 2 * x\\na = df(x1) = 2 * x1\\n```\\n\\nTo find `b` we can use the fact we already a point on the line `f(x1)` at `x1`\\n\\n```python\\nf(x1) = df(x1) * x1 + b\\nb = f(x1) - df(x1) * x1\\n```\\n\\nPutting it all together\\n\\n```python\\ny = df(x1) * x + (f(x1) - df(x1) * x1)\\n```\\n\\nNow we are looking for the intersection with the x-axis\\n\\n```python\\n0 = df(x1) * x2 + (f(x1) - df(x1) * x1)\\nx2 = (df(x1) * x1 - f(x1))/df(x1)\\nx2 = x1  -  f(x1)/df(x1)\\nx2 = x1 - (x1**2 - n)/(2 * x1)\\nx2 = (2 * x1**2 - x1**2 + n)/(2 * x1)\\nx2 = (x1**2 + n)/(2 * x1)\\nx2 = (1/2) * (x1 + n/x1)\\n```\\n\\nGeneralyzing to any update\\n\\n```python\\nx_new = (1/2) * ( x_current + n/x_current)\\n```\\n\\n## In case you are wondering why the derivative is the slope of the tangent at our estimate\\n\\nThe derivative is defined as\\n\\n```python\\ndf(x) = lim(\\u2206x->0) (f(x + \\u2206x) - f(x))/\\u2206x\\n```\\n\\n\\n![image](https://assets.leetcode.com/users/amchoukir/image_1565870151.png)\\n\\n# Code\\n```python\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        x_previous = x\\n        x_current = x / 2\\n        precision = 0.1\\n        while abs(x_previous - x_current) > precision:\\n            x_previous = x_current\\n            x_current = (1/2) * (x_current + x/x_current)\\n            \\n        return int(x_current)\\n```",
                "solutionTags": [],
                "code": "```python\\nf(x) = x**2 - n \\n```\n```python\\nf(sqrt(n)) = sqrt(n)**2 - n  = n - n = 0\\n```\n```python\\nf(x) = x**2 - n\\ndf(x) = 2 * x\\na = df(x1) = 2 * x1\\n```\n```python\\nf(x1) = df(x1) * x1 + b\\nb = f(x1) - df(x1) * x1\\n```\n```python\\ny = df(x1) * x + (f(x1) - df(x1) * x1)\\n```\n```python\\n0 = df(x1) * x2 + (f(x1) - df(x1) * x1)\\nx2 = (df(x1) * x1 - f(x1))/df(x1)\\nx2 = x1  -  f(x1)/df(x1)\\nx2 = x1 - (x1**2 - n)/(2 * x1)\\nx2 = (2 * x1**2 - x1**2 + n)/(2 * x1)\\nx2 = (x1**2 + n)/(2 * x1)\\nx2 = (1/2) * (x1 + n/x1)\\n```\n```python\\nx_new = (1/2) * ( x_current + n/x_current)\\n```\n```python\\ndf(x) = lim(\\u2206x->0) (f(x + \\u2206x) - f(x))/\\u2206x\\n```\n```python\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        x_previous = x\\n        x_current = x / 2\\n        precision = 0.1\\n        while abs(x_previous - x_current) > precision:\\n            x_previous = x_current\\n            x_current = (1/2) * (x_current + x/x_current)\\n            \\n        return int(x_current)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2994246,
                "title": "effective-binary-search-algorithm-java",
                "content": "# Approach\\nSearch needed number using binary search algorithm\\n\\n# Complexity\\n- Time complexity:\\nO(logn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int l = 1;\\n        int r = x;\\n\\n        while(l <= r){\\n            int mid = (l + r) / 2;\\n\\n            if(x / mid == mid){\\n                return mid;\\n            } else if(mid > x / mid){\\n                r = mid - 1;\\n            } else {\\n                l = mid + 1;\\n            }\\n        }\\n\\n        return r;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int l = 1;\\n        int r = x;\\n\\n        while(l <= r){\\n            int mid = (l + r) / 2;\\n\\n            if(x / mid == mid){\\n                return mid;\\n            } else if(mid > x / mid){\\n                r = mid - 1;\\n            } else {\\n                l = mid + 1;\\n            }\\n        }\\n\\n        return r;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25068,
                "title": "share-my-2ms-and-4lines-java-code",
                "content": "My idea is, for any non-negative number N, sqrt(N) = 2/2*sqrt(N) =2*sqrt(1/4)*sqrt(N) = 2*sqrt(N/4). And for the Ns that are not multiple of 4, for example, 9, 25 or 49, the actual result should be 1+2*sqrt(N/4), because we need to take remainders into account.\\n\\n    public int mySqrt(int x) {\\n        if(x < 4) return x == 0 ? 0 : 1;\\n        int res = 2 * mySqrt(x/4);\\n        if((res+1) * (res+1) <= x && (res+1) * (res+1) >= 0) return res+1;\\n        return res;\\n    }\\n\\nHope it helps.",
                "solutionTags": [],
                "code": "My idea is, for any non-negative number N, sqrt(N) = 2/2*sqrt(N) =2*sqrt(1/4)*sqrt(N) = 2*sqrt(N/4). And for the Ns that are not multiple of 4, for example, 9, 25 or 49, the actual result should be 1+2*sqrt(N/4), because we need to take remainders into account.\\n\\n    public int mySqrt(int x) {\\n        if(x < 4) return x == 0 ? 0 : 1;\\n        int res = 2 * mySqrt(x/4);\\n        if((res+1) * (res+1) <= x && (res+1) * (res+1) >= 0) return res+1;\\n        return res;\\n    }\\n\\nHope it helps.",
                "codeTag": "Unknown"
            },
            {
                "id": 25065,
                "title": "share-java-log-n-solution-no-need-to-change-type",
                "content": "    public class Solution {\\n        public int mySqrt(int x) {\\n            if(x <= 0) return 0;\\n            int l = 1, r = x, res = 1;\\n            while(l < r) {\\n                int mid = (l + r) / 2;\\n                if(mid > x/mid) {\\n                    r = mid;\\n                } else {\\n                    res = mid;\\n                    l = mid + 1;\\n                }\\n            }\\n            return res;\\n        }\\n    }\\n\\nUsing  x / mid to avoid overflow of Integer. l means left, r means right. Always have a variable res to maintain the result.",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int mySqrt(int x) {\\n            if(x <= 0) return 0;\\n            int l = 1, r = x, res = 1;\\n            while(l < r) {\\n                int mid = (l + r) / 2;\\n                if(mid > x/mid) {\\n                    r = mid;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3067835,
                "title": "c-solution-based-on-visual-representation-for-perfect-square-roots",
                "content": "# Intuition\\n\\nThe idea behind this approach is to use the mathematical property that the sum of the first n odd numbers is n^2, and use this to find the square root of a given integer x.\\n\\n![1_AF3IpOFN-hyhc08bnQHMSw.webp](https://assets.leetcode.com/users/images/9cd517e2-8ad9-4d1c-a91f-5a527ab0358f_1674036268.1887174.webp)\\n\\n\\n\\n# Approach\\n1. Initialize a variable n to 1, and a variable y to 0.\\n1. Use a while loop to iterate until y is greater than or equal to x.\\n1. In each iteration, add 2n-1 to y, and increment n.\\n1. Once the while loop exits, return n-1 as the square root of x.\\n\\n# Complexity\\n- Time complexity:  O(sqrt(n))\\n\\n- Space complexity: O(1) as the code only uses a few variables and not creating any data structure.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        // Initializing variables \\n        long long y=0,i=3,cnt=0;\\n    \\n        //loop until y is greater than x\\n        while(x>y){\\n            y+=i;\\n            i+=2;\\n            cnt++;\\n        }\\n\\n    // return cnt as the square root of x\\n    return cnt;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        // Initializing variables \\n        long long y=0,i=3,cnt=0;\\n    \\n        //loop until y is greater than x\\n        while(x>y){\\n            y+=i;\\n            i+=2;\\n            cnt++;\\n        }\\n\\n    // return cnt as the square root of x\\n    return cnt;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 372638,
                "title": "java-1ms-100-binary-search-with-explanation",
                "content": "```java\\nclass Solution {\\n    public int mySqrt(int x) {        \\n        \\n        if (x == 0 || x == 1) return x;\\n        \\n        // Binary Search\\n        int left = 0, right = x;\\n        while (left < right) {\\n            // mid = (left + right) / 2 can overflow if right > Integer.MAX_VALUE - left\\n            int mid = left + (right - left) / 2;\\n            \\n            // same thing here , mid * mid > x can overflow. replace by mid > x / mid\\n            if (mid > x / mid) {\\n                right = mid - 1; \\n            } else {\\n                left = mid + 1;\\n                // if mid * mid < x but (mid + 1) * (mid + 1) > x then mid was the right answer\\n                if (left > x / left) {\\n                    return mid;\\n                }                \\n            }\\n        }\\n        \\n        return left;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```java\\nclass Solution {\\n    public int mySqrt(int x) {        \\n        \\n        if (x == 0 || x == 1) return x;\\n        \\n        // Binary Search\\n        int left = 0, right = x;\\n        while (left < right) {\\n            // mid = (left + right) / 2 can overflow if right > Integer.MAX_VALUE - left\\n            int mid = left + (right - left) / 2;\\n            \\n            // same thing here , mid * mid > x can overflow. replace by mid > x / mid\\n            if (mid > x / mid) {\\n                right = mid - 1; \\n            } else {\\n                left = mid + 1;\\n                // if mid * mid < x but (mid + 1) * (mid + 1) > x then mid was the right answer\\n                if (left > x / left) {\\n                    return mid;\\n                }                \\n            }\\n        }\\n        \\n        return left;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1625550,
                "title": "2-sol-sqrt-x-beats-100-c-binary-search",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long long s=0,e=INT_MAX,ans=0;\\n        while(s<=e){\\n            long long m=s+(e-s)/2;\\n            \\n            if(m*m<=x){\\n                ans=m;\\n                s=m+1;\\n            }\\n            else e=m-1;\\n        }\\n      \\n        return ans;\\n    }\\n};\\n```\\ntime complexity for this will be log x\\n\\n```\\nint mySqrt(int x) {\\n      long long i=0;\\n      while(i*i<=x)\\n         i++;\\n         return i-1;\\n     }\\n```\\ntime complexity for this is root x\\n\\nupvote to motivate :)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long long s=0,e=INT_MAX,ans=0;\\n        while(s<=e){\\n            long long m=s+(e-s)/2;\\n            \\n            if(m*m<=x){\\n                ans=m;\\n                s=m+1;\\n            }\\n            else e=m-1;\\n        }\\n      \\n        return ans;\\n    }\\n};\\n```\n```\\nint mySqrt(int x) {\\n      long long i=0;\\n      while(i*i<=x)\\n         i++;\\n         return i-1;\\n     }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1333624,
                "title": "python-solution",
                "content": "Hope it helps\\n\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low = 0\\n        high = x\\n        while low <= high:\\n            mid = low + (high - low) // 2\\n            if mid * mid == x:\\n                return mid\\n            elif mid * mid < x:\\n                ans = mid\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n        return ans\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low = 0\\n        high = x\\n        while low <= high:\\n            mid = low + (high - low) // 2\\n            if mid * mid == x:\\n                return mid\\n            elif mid * mid < x:\\n                ans = mid\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25052,
                "title": "python-one-line",
                "content": "\\n     return int(x**0.5)",
                "solutionTags": [],
                "code": "\\n     return int(x**0.5)",
                "codeTag": "Unknown"
            },
            {
                "id": 25258,
                "title": "using-binary-search-accepted-but-one-question",
                "content": "    int sqrt(int x) {\\n            if(x == 0 || x == 1){\\n                return x;\\n            }\\n            int l = 1, r = x, res;\\n            while(l <= r){\\n                int m = (l + r)/2;\\n                if(m == x / m){ \\n                    return m;\\n                }else if(m > x / m){\\n                    r = m - 1;\\n                }else{\\n                    l = m + 1;\\n                    res = m;\\n                }\\n            }\\n            return res;\\n        }\\n\\nMy question is:\\nIf using `if(m * m == x)` instead of `if(m == x / m)` (and `if(m * m > x)` instead of `if(m > x / m)` ), I will get \"Time Limit Exceeded\" on case 2147395599. Why that happens?\\n\\nThank you in advance!",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "    int sqrt(int x) {\\n            if(x == 0 || x == 1){\\n                return x;\\n            }\\n            int l = 1, r = x, res;\\n            while(l <= r){\\n                int m = (l + r)/2;\\n                if(m == x / m){ \\n                    return m;\\n                }else if(m > x / m){\\n                    r = m - 1;\\n                }else{\\n                    l = m + 1;\\n                    res = m;\\n                }\\n            }\\n            return res;\\n        }\\n\\nMy question is:\\nIf using `if(m * m == x)` instead of `if(m == x / m)` (and `if(m * m > x)` instead of `if(m > x / m)` ), I will get \"Time Limit Exceeded\" on case 2147395599. Why that happens?\\n\\nThank you in advance!",
                "codeTag": "Unknown"
            },
            {
                "id": 2129929,
                "title": "0ms-1liner-100-fastest-solution-explained-o-n-time-complexity-o-n-space-complexity",
                "content": "**As a professional with a passion for problem-solving and collaboration, I am always looking to expand my network of like-minded individuals on LinkedIn. By connecting with me, we can work together to tackle complex challenges, share ideas, and grow both professionally and personally.**\\n\\n**Whether you\\'re an expert in your field or just starting out, I welcome connections from all backgrounds and experiences. By building a diverse and collaborative network, we can leverage our unique perspectives and skill sets to push the boundaries of what\\'s possible.**\\n\\n**So, if you\\'re interested in connecting and exploring the potential for future collaborations, please don\\'t hesitate to reach out. Let\\'s start a conversation and see where it takes us!**\\n\\n---\\n\\nhttps://www.linkedin.com/in/cucerdariancatalin/\\nhttps://www.linkedin.com/in/cucerdariancatalin/\\nhttps://www.linkedin.com/in/cucerdariancatalin/\\n\\n---\\n(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful, ***please upvote*** this post.)\\n***Take care brother, peace, love!***\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 38.2MB*** (beats 92.04% / 24.00%).\\n* *** Java ***\\n\\n```\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x == 0) // To avoid division by 0\\n            return 0;\\n        int start = 1, end = x / 2 + 1; // The squareroot can only lie in this range\\n        while(start <= end) {\\n            int mid = start + (end - start) / 2;\\n            if(mid == x / mid) // Not multiplying as the product for a large number may be greater than the max value of int\\n                return mid;\\n            else if(mid < x / mid) \\n                start = mid + 1;\\n            else\\n                end = mid - 1;\\n        }\\n        return end; // end will be the largest integer such that end^2 < x\\n    }\\n}\\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\n***\"Open your eyes. Expect us.\" - \\uD835\\uDCD0\\uD835\\uDCF7\\uD835\\uDCF8\\uD835\\uDCF7\\uD835\\uDD02\\uD835\\uDCF6\\uD835\\uDCF8\\uD835\\uDCFE\\uD835\\uDCFC***\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "Kotlin",
                    "PHP"
                ],
                "code": "```\\n```\n```\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x == 0) // To avoid division by 0\\n            return 0;\\n        int start = 1, end = x / 2 + 1; // The squareroot can only lie in this range\\n        while(start <= end) {\\n            int mid = start + (end - start) / 2;\\n            if(mid == x / mid) // Not multiplying as the product for a large number may be greater than the max value of int\\n                return mid;\\n            else if(mid < x / mid) \\n                start = mid + 1;\\n            else\\n                end = mid - 1;\\n        }\\n        return end; // end will be the largest integer such that end^2 < x\\n    }\\n}\\n\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2785872,
                "title": "java-simple-java-solution-easy-to-understand",
                "content": "Upvote if you liked the solution\\n```\\nclass Solution {\\n    public int mySqrt(int n) {\\n        long lo=0,hi=n;\\n        long ans=0;\\n        while(lo<=hi)\\n        {\\n            long mid=(lo+hi)/2;\\n            if(mid*mid<n)\\n            {\\n                lo=mid+1;\\n                //mid*mid chota hai to usko equal laane ke lie lo ko badhao\\n                ans=mid;\\n            }\\n            else if(mid*mid>n) hi=mid-1;\\n            else return (int)mid;\\n        }\\n        return (int)ans;\\n    }\\n}",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n    public int mySqrt(int n) {\\n        long lo=0,hi=n;\\n        long ans=0;\\n        while(lo<=hi)\\n        {\\n            long mid=(lo+hi)/2;\\n            if(mid*mid<n)\\n            {\\n                lo=mid+1;\\n                //mid*mid chota hai to usko equal laane ke lie lo ko badhao\\n                ans=mid;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 25240,
                "title": "newton-method-accepted-solution",
                "content": "    class Solution:\\n\\t# @param x, an integer\\n\\t# @return an integer\\n\\tdef sqrt(self, x):\\n\\t\\ti=1.0;\\n\\t\\twhile(True):\\n\\t\\t\\tj=(i+x/i)/2.0;\\n\\t\\t\\tif(abs(i-j)< 0.000000000005):\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\ti=j;\\n\\t\\treturn int(j);",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n\\t# @param x, an integer\\n\\t# @return an integer\\n\\tdef sqrt(self, x):\\n\\t\\ti=1.0;\\n\\t\\twhile(True):\\n\\t\\t\\tj=(i+x/i)/2.0;\\n\\t\\t\\tif(abs(i-j)< 0.000000000005):\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\ti=j;\\n\\t\\treturn int(j);",
                "codeTag": "Java"
            },
            {
                "id": 2732386,
                "title": "o-1-solution-in-python-newton-raphson-method",
                "content": "# Intuition\\n1. I aleady knew this numerical trick that finding sqaure root of **a** is identical to finding roots of quadtratic polynomial **x^2 - a = 0**.\\n\\n# Approach\\n![7KrMvNiT7l-newtons-method.png](https://assets.leetcode.com/users/images/9c7842bf-e45f-46a9-b399-621188ecfd5f_1666444203.7846649.png)\\n\\nrandomly choose a point, find the slope there and see where its intersect the x axis, then repat again.\\n\\n![images (1).jpg](https://assets.leetcode.com/users/images/70c0a897-5e6e-479b-b29f-4b11de002265_1666444286.9747567.jpeg)\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n# the time complexity of calculating a root of a function **f(x)** with n-digit precision, provided that a good initial approximation is known, is **O((log n)F(n))** where **F(n)** is the cost of calculating f(x)/f\\'(x) with n-digit precision.\\n\\n**here in my code I only used 20 loops to converge to a solution no matter the inputs, assuming F(n) also constant the time complexity her is O(1).**\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        res = 1\\n        for i in range(20):\\n            temp = res\\n            res = temp - (temp**2 - x)/(2 * temp)\\n        return math.floor(res)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        res = 1\\n        for i in range(20):\\n            temp = res\\n            res = temp - (temp**2 - x)/(2 * temp)\\n        return math.floor(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 480399,
                "title": "binary-search-summary",
                "content": "leetcode 69 sqrt, leetcode 278 first bad version, 875 monkey eat banana\\nI\\'m inspired by the HuaHua [youtube channel. ](https://youtu.be/J-IQxfYRTto)\\n\\n## Template \\n\\twhile i < j:     -> [left close, right open)\\n\\t\\tmid = (i + j) // 2\\n\\t\\tif g(m):    -> here g(m) can be a statement or a function\\n\\t\\t\\tj = mid\\n\\t\\telse:\\n\\t\\t\\ti = mid + 1\\n\\treturn i              -> return the first element that satisfy the g(m)\\n\\t\\nFor example:\\n[leetcode 69 sqrt](https://leetcode.com/problems/sqrtx/):\\n\\n\\n\\n\\tdef mySqrt(self, x: int) -> int:\\n\\t\\tif x == 0 or x == 1:\\n\\t\\t\\treturn x\\n\\t\\ti = 1  -> set up the left bound 1\\n        j = x   -> set up the upper open bound x, because we have taken the corner case x == 0 or 1 into consider\\n        while i < j:   -> node that the searching space is [1, x)\\n            mid = (i + j) // 2\\n            if mid * mid > x:    -> This is our g(m), our goal is to find a point, mid,  where mid is the first element that satisfy mid**mid > x. \\n                j = mid\\n            else:\\n                i = mid + 1\\n        return i - 1   -> note that g(m) statement is the first element that is larger than x, so we just need to subtract by 1 to get the result we want (the square root of the i is equal or smaller than x)\\n\\n\\n[leetcode 278 bad version](https://leetcode.com/problems/first-bad-version/)\\n\\n    def firstBadVersion(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        i, j = 0, n + 1  -> here n + 1 because we want to include the last version into our searching space\\n        \\n        while i < j:\\n            mid = (i + j) // 2\\n            if isBadVersion(mid):  -> this is our g(m), our goal is to find the first element that g(m) is False\\n                j = mid        -> searching space [i, mid)\\n            else:\\n                i = mid + 1    -> searching space [mid + 1, j)\\n        return i   \\n\\n\\n[leetcode 875 eating banana](https://leetcode.com/problems/koko-eating-bananas/)\\n\\ndef minEatingSpeed(self, piles: List[int], H: int) -> int:\\n        \\n        def time_spend(k):   -> this is our g(m), which returns the time\\n            h = 0\\n            for banana in piles:\\n                if banana <= k:\\n                    h += 1\\n                else:\\n                    times, res = divmod(banana, k)\\n                    h = h + times + 1          \\n            return h\\n       \\n        i, j = 1, max(piles) + 1   -> binary search h, ranging from [1, n), where n is the max(piles) note, that the right is open, so, [1, max(piles) + 1)\\n        while i < j:\\n            mid = (i + j) // 2\\n            time = time_spend(mid)   -> the g(m)\\n        \\n            if time <= H:  # eat slow  \\n                j = mid\\n            else:   # eat fast\\n                i = mid + 1\\n        return i\\n",
                "solutionTags": [
                    "Python3",
                    "Binary Search"
                ],
                "code": "leetcode 69 sqrt, leetcode 278 first bad version, 875 monkey eat banana\\nI\\'m inspired by the HuaHua [youtube channel. ](https://youtu.be/J-IQxfYRTto)\\n\\n## Template \\n\\twhile i < j:     -> [left close, right open)\\n\\t\\tmid = (i + j) // 2\\n\\t\\tif g(m):    -> here g(m) can be a statement or a function\\n\\t\\t\\tj = mid\\n\\t\\telse:\\n\\t\\t\\ti = mid + 1\\n\\treturn i              -> return the first element that satisfy the g(m)\\n\\t\\nFor example:\\n[leetcode 69 sqrt](https://leetcode.com/problems/sqrtx/):\\n\\n\\n\\n\\tdef mySqrt(self, x: int) -> int:\\n\\t\\tif x == 0 or x == 1:\\n\\t\\t\\treturn x\\n\\t\\ti = 1  -> set up the left bound 1\\n        j = x   -> set up the upper open bound x, because we have taken the corner case x == 0 or 1 into consider\\n        while i < j:   -> node that the searching space is [1, x)\\n            mid = (i + j) // 2\\n            if mid * mid > x:    -> This is our g(m), our goal is to find a point, mid,  where mid is the first element that satisfy mid**mid > x. \\n                j = mid\\n            else:\\n                i = mid + 1\\n        return i - 1   -> note that g(m) statement is the first element that is larger than x, so we just need to subtract by 1 to get the result we want (the square root of the i is equal or smaller than x)\\n\\n\\n[leetcode 278 bad version](https://leetcode.com/problems/first-bad-version/)\\n\\n    def firstBadVersion(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        i, j = 0, n + 1  -> here n + 1 because we want to include the last version into our searching space\\n        \\n        while i < j:\\n            mid = (i + j) // 2\\n            if isBadVersion(mid):  -> this is our g(m), our goal is to find the first element that g(m) is False\\n                j = mid        -> searching space [i, mid)\\n            else:\\n                i = mid + 1    -> searching space [mid + 1, j)\\n        return i   \\n\\n\\n[leetcode 875 eating banana](https://leetcode.com/problems/koko-eating-bananas/)\\n\\ndef minEatingSpeed(self, piles: List[int], H: int) -> int:\\n        \\n        def time_spend(k):   -> this is our g(m), which returns the time\\n            h = 0\\n            for banana in piles:\\n                if banana <= k:\\n                    h += 1\\n                else:\\n                    times, res = divmod(banana, k)\\n                    h = h + times + 1          \\n            return h\\n       \\n        i, j = 1, max(piles) + 1   -> binary search h, ranging from [1, n), where n is the max(piles) note, that the right is open, so, [1, max(piles) + 1)\\n        while i < j:\\n            mid = (i + j) // 2\\n            time = time_spend(mid)   -> the g(m)\\n        \\n            if time <= H:  # eat slow  \\n                j = mid\\n            else:   # eat fast\\n                i = mid + 1\\n        return i\\n",
                "codeTag": "Python3"
            },
            {
                "id": 2350089,
                "title": "very-easy-100-fully-explained-java-c-python-js-c-python3",
                "content": "# **Java Solution (Binary Search Approach):**\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        // Initialise beg and end values as 1 and x / 2 respectively...\\n        int beg = 1 , end = x / 2 , mid;\\n        // Initialize variable res to store the result\\n        int res = 0;\\n        long tmp;\\n        // If the number is less than 2, return itself...\\n        if(x <= 1)\\n            return x;\\n        while(beg <= end) {\\n            // Find middle of this range...\\n            mid = (beg + (end - beg) / 2);\\n            tmp = (long)mid * (long)mid;      // mid * mid can be large, so use long...\\n            // If square of mid is equal to x...\\n            // return it as it is the square root...\\n            if(tmp == x)\\n                return mid;\\n            // If square of mid is less than x...\\n            // jump to the end half by setting beg = mid + 1...\\n            if(tmp < x) {\\n                res = mid;\\n                beg = mid + 1;\\n            }\\n            // Otherwise, jump to the beg half by setting end = mid \\u2013 1...\\n            // And save this value in res...\\n            else\\n                end = mid - 1;\\n        }\\n        return res;     // Print the result...\\n    }\\n}\\n```\\n\\n# **C++ Solution (Pre-built Functions Approach):**\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        //If the number is less than or equal to 1, return itself...\\n        if(x <= 1)\\n            return x;\\n        // Call the sqrt() function & Floor the value obtained...\\n        return floor(sqrt(x));      // Apply floor() to avoid any decimal value.\\n    }\\n};\\n```\\n\\n# **Python Solution (Newton\\'s Approach):**\\n```\\nclass Solution(object):\\n    def mySqrt(self, x):\\n        res = x\\n        while not res * res - x < 1:\\n            res = (res + x / res) / 2\\n        return int(res)\\n```\\n                 \\n# **JavaScript Solution (Binary Search Approach):**\\n```\\nvar mySqrt = function(x) {\\n    // Initialise beg and end values as 0 and x respectively...\\n    let beg = 0, end = x, mid = 0;\\n    while (beg < end) {\\n        // Find middle of this range...\\n        mid = parseInt((beg + end)/2);\\n        // If square of mid is equal to x...\\n        // return it as it is the square root...\\n        if (mid * mid === x) {\\n            return mid;\\n        }\\n        // If square of mid is greater than x...\\n        // jump to the beg half by setting end = mid \\u2013 1...\\n        if (x < mid * mid) {\\n            end = mid - 1;\\n        }\\n        // Otherwise, jump to the end half by setting beg = mid + 1...\\n        else {\\n            beg = mid + 1;\\n        }\\n    }\\n    // Save this value in result and return...\\n    return x < end * end ? end - 1 : end;\\n};\\n```\\n\\n# **C Language:**\\n```\\nint mySqrt(int x){\\n    long int i = 1, res;\\n    if(x == 0)\\n        return 0;\\n    for(i; i*i <= x; i++) {\\n        res = i;\\n    }\\n    return res;\\n}\\n```\\n                 \\n# **Python3 Solution (Pre-built Functions Approach):**\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(floor(sqrt(x)))\\n```\\n**Binary search, Pre-built function, Newton\\'s method & Brute force approaches are here in the solution...\\nPlease upvote if you find any help with this code...\\nI am working hard for you guys...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        // Initialise beg and end values as 1 and x / 2 respectively...\\n        int beg = 1 , end = x / 2 , mid;\\n        // Initialize variable res to store the result\\n        int res = 0;\\n        long tmp;\\n        // If the number is less than 2, return itself...\\n        if(x <= 1)\\n            return x;\\n        while(beg <= end) {\\n            // Find middle of this range...\\n            mid = (beg + (end - beg) / 2);\\n            tmp = (long)mid * (long)mid;      // mid * mid can be large, so use long...\\n            // If square of mid is equal to x...\\n            // return it as it is the square root...\\n            if(tmp == x)\\n                return mid;\\n            // If square of mid is less than x...\\n            // jump to the end half by setting beg = mid + 1...\\n            if(tmp < x) {\\n                res = mid;\\n                beg = mid + 1;\\n            }\\n            // Otherwise, jump to the beg half by setting end = mid \\u2013 1...\\n            // And save this value in res...\\n            else\\n                end = mid - 1;\\n        }\\n        return res;     // Print the result...\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        //If the number is less than or equal to 1, return itself...\\n        if(x <= 1)\\n            return x;\\n        // Call the sqrt() function & Floor the value obtained...\\n        return floor(sqrt(x));      // Apply floor() to avoid any decimal value.\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def mySqrt(self, x):\\n        res = x\\n        while not res * res - x < 1:\\n            res = (res + x / res) / 2\\n        return int(res)\\n```\n```\\nvar mySqrt = function(x) {\\n    // Initialise beg and end values as 0 and x respectively...\\n    let beg = 0, end = x, mid = 0;\\n    while (beg < end) {\\n        // Find middle of this range...\\n        mid = parseInt((beg + end)/2);\\n        // If square of mid is equal to x...\\n        // return it as it is the square root...\\n        if (mid * mid === x) {\\n            return mid;\\n        }\\n        // If square of mid is greater than x...\\n        // jump to the beg half by setting end = mid \\u2013 1...\\n        if (x < mid * mid) {\\n            end = mid - 1;\\n        }\\n        // Otherwise, jump to the end half by setting beg = mid + 1...\\n        else {\\n            beg = mid + 1;\\n        }\\n    }\\n    // Save this value in result and return...\\n    return x < end * end ? end - 1 : end;\\n};\\n```\n```\\nint mySqrt(int x){\\n    long int i = 1, res;\\n    if(x == 0)\\n        return 0;\\n    for(i; i*i <= x; i++) {\\n        res = i;\\n    }\\n    return res;\\n}\\n```\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(floor(sqrt(x)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3496645,
                "title": "best-solution-in-java-runtime-1ms-and-beats-100-by-binarysearch",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1 , high = x  , ans = 0;\\n\\n            while (low <= high){\\n              int mid = low + (high - low) /2;\\n\\n                if (x/mid == mid) return mid;\\n                else if (x/mid < mid)  high = mid-1;\\n                else {\\n                    low= mid + 1; ans=mid;\\n                }\\n            }\\n        return ans;\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1 , high = x  , ans = 0;\\n\\n            while (low <= high){\\n              int mid = low + (high - low) /2;\\n\\n                if (x/mid == mid) return mid;\\n                else if (x/mid < mid)  high = mid-1;\\n                else {\\n                    low= mid + 1; ans=mid;\\n                }\\n            }\\n        return ans;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2059043,
                "title": "c-java-c-c-simple-logic-binary-search-newton-s-method",
                "content": "# Frequently encountered in technical interviews\\n```\\nstd::vector<std::pair<std::string, int>> interview_frequency= {\\n    {\"LinkedIn\", 9},\\n    {\"Amazon\", 9},\\n    {\"Apple\", 5},\\n    {\"Google\", 4},\\n    {\"Adobe\", 4},\\n    {\"Microsoft\", 3},\\n    {\"Bloomberg\", 2}\\n};\\n```\\n\\n# Solution\\n\\nA simple [Binary Search](https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search) Solution would also help to solve this problem.\\n\\nThe [time complexity](https://www.scaler.com/topics/time-complexity-of-binary-search/) of this implementation is O(log n). This is because it uses binary search to find the square root, and binary search has a time complexity of O(log n).\\n\\nThe space complexity of this implementation is O(1), because it only uses a constant amount of extra space to store the integer variables. It does not use any extra data structures that grow with the input size.\\n```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int first=0,last=x;\\n        while (first<=last) {\\n\\t\\t\\tlong mid=(first+last)/2,temp=mid*mid;\\n            if (x==temp) \\n                return (int)mid;\\n            else if (temp>x) \\n                last=(int)(mid-1);\\n            else \\n                first=(int)(mid+1);\\n        }\\n        return last;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int first=0,last=x;\\n        while (first<=last) {\\n\\t\\t\\tlong mid=(first+last)/2,temp=mid*mid;\\n            if (x==temp) \\n                return (int)mid;\\n            else if (temp>x) \\n                last=(int)(mid-1);\\n            else \\n                first=(int)(mid+1);\\n        }\\n        return last;\\n    }\\n}\\n```\\n```csharp []\\n// Time complexity: O(log n)\\n// space complexity: O(1)\\npublic class Solution {\\n    public int MySqrt(int x) {\\n        int first=0,last=x;\\n        while (first<=last) {\\n\\t\\t\\tlong mid=(first+last)/2,temp=mid*mid;\\n            if (x==temp) \\n                return (int)mid;\\n            else if (temp>x) \\n                last=(int)(mid-1);\\n            else \\n                first=(int)(mid+1);\\n        }\\n        return last;\\n    }\\n}\\n```\\n```C []\\nint mySqrt(int x){\\n    int first=0,last=x;\\n    while (first<=last) {\\n        long mid=(first+last)/2,temp=mid*mid;\\n        if (x==temp) \\n            return (int)mid;\\n        else if (temp>x) \\n            last=(int)(mid-1);\\n        else \\n            first=(int)(mid+1);\\n    }\\n    return last;\\n}\\n```\\n\\n**Newton Solution:** \\nThis implementation of MySqrt uses the Newton\\'s method to find the square root of x. It has a time complexity of O(log n). This is because it converges quadratically to the solution, meaning that each iteration roughly doubles the number of correct digits in the result.\\n\\nThe space complexity of this implementation is O(1), because it only uses a constant amount of extra space to store the long integer variable res. It does not use any extra data structures that grow with the input size.\\n```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long res = x;\\n        while (res*res > x)\\n            res = (res + x/res) / 2;\\n        return (int) res;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public int mySqrt(int x) {\\n        long res = x;\\n        while (res*res > x)\\n            res = (res + x/res) / 2;\\n        return (int) res;\\n    }\\n}\\n```\\n```csharp []\\n// Time complexity: O(log n)\\n// space complexity: O(1)\\npublic class Solution {\\n     public int MySqrt(int x) {         \\n        long res = x;\\n        while (res*res > x)\\n            res = (res + x/res) / 2;\\n        return (int) res;\\n    }\\n}\\n```\\n```C []\\nint mySqrt(int x){\\n    long res = x;\\n    while (res*res > x)\\n        res = (res + x/res) / 2;\\n    return (int) res;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C#",
                    "Binary Search"
                ],
                "code": "```\\nstd::vector<std::pair<std::string, int>> interview_frequency= {\\n    {\"LinkedIn\", 9},\\n    {\"Amazon\", 9},\\n    {\"Apple\", 5},\\n    {\"Google\", 4},\\n    {\"Adobe\", 4},\\n    {\"Microsoft\", 3},\\n    {\"Bloomberg\", 2}\\n};\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int first=0,last=x;\\n        while (first<=last) {\\n\\t\\t\\tlong mid=(first+last)/2,temp=mid*mid;\\n            if (x==temp) \\n                return (int)mid;\\n            else if (temp>x) \\n                last=(int)(mid-1);\\n            else \\n                first=(int)(mid+1);\\n        }\\n        return last;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int first=0,last=x;\\n        while (first<=last) {\\n\\t\\t\\tlong mid=(first+last)/2,temp=mid*mid;\\n            if (x==temp) \\n                return (int)mid;\\n            else if (temp>x) \\n                last=(int)(mid-1);\\n            else \\n                first=(int)(mid+1);\\n        }\\n        return last;\\n    }\\n}\\n```\n```csharp []\\n// Time complexity: O(log n)\\n// space complexity: O(1)\\npublic class Solution {\\n    public int MySqrt(int x) {\\n        int first=0,last=x;\\n        while (first<=last) {\\n\\t\\t\\tlong mid=(first+last)/2,temp=mid*mid;\\n            if (x==temp) \\n                return (int)mid;\\n            else if (temp>x) \\n                last=(int)(mid-1);\\n            else \\n                first=(int)(mid+1);\\n        }\\n        return last;\\n    }\\n}\\n```\n```C []\\nint mySqrt(int x){\\n    int first=0,last=x;\\n    while (first<=last) {\\n        long mid=(first+last)/2,temp=mid*mid;\\n        if (x==temp) \\n            return (int)mid;\\n        else if (temp>x) \\n            last=(int)(mid-1);\\n        else \\n            first=(int)(mid+1);\\n    }\\n    return last;\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long res = x;\\n        while (res*res > x)\\n            res = (res + x/res) / 2;\\n        return (int) res;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public int mySqrt(int x) {\\n        long res = x;\\n        while (res*res > x)\\n            res = (res + x/res) / 2;\\n        return (int) res;\\n    }\\n}\\n```\n```csharp []\\n// Time complexity: O(log n)\\n// space complexity: O(1)\\npublic class Solution {\\n     public int MySqrt(int x) {         \\n        long res = x;\\n        while (res*res > x)\\n            res = (res + x/res) / 2;\\n        return (int) res;\\n    }\\n}\\n```\n```C []\\nint mySqrt(int x){\\n    long res = x;\\n    while (res*res > x)\\n        res = (res + x/res) / 2;\\n    return (int) res;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1915715,
                "title": "100-fastest-swift-solution",
                "content": "```\\nclass Solution {\\n    func mySqrt(_ x: Int) -> Int {\\n        if x == 0 { return 0 }\\n        if x < 4 { return 1 }\\n        \\n        var left = 0\\n        var right = (x + 1) / 2\\n        var mid = (left + right) / 2\\n        \\n        while left < right {\\n            if mid * mid > x {\\n                right = mid - 1\\n            } else {\\n                left = mid + 1\\n            }\\n            \\n            mid = (left + right) / 2\\n        }\\n        \\n        return left * left > x ? left - 1 : left\\n    }\\n    \\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func mySqrt(_ x: Int) -> Int {\\n        if x == 0 { return 0 }\\n        if x < 4 { return 1 }\\n        \\n        var left = 0\\n        var right = (x + 1) / 2\\n        var mid = (left + right) / 2\\n        \\n        while left < right {\\n            if mid * mid > x {\\n                right = mid - 1\\n            } else {\\n                left = mid + 1\\n            }\\n            \\n            mid = (left + right) / 2\\n        }\\n        \\n        return left * left > x ? left - 1 : left\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3272353,
                "title": "o-log-n-binary-search-solution",
                "content": "# Complexity\\n- Time complexity: $$O(log n)$$\\n\\n- Space complexity: $$O(1)$$\\n```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n    let left = 0;\\n    let right = x;\\n    while(left <= right) {\\n        const mid = Math.floor((left+right)/2);\\n        if(mid*mid <= x && (mid+1) * (mid+1) > x) {\\n            return mid;\\n        }\\n        else if(mid*mid < x) {\\n            left = mid + 1;\\n        }\\n        else {\\n            right = mid - 1;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n    let left = 0;\\n    let right = x;\\n    while(left <= right) {\\n        const mid = Math.floor((left+right)/2);\\n        if(mid*mid <= x && (mid+1) * (mid+1) > x) {\\n            return mid;\\n        }\\n        else if(mid*mid < x) {\\n            left = mid + 1;\\n        }\\n        else {\\n            right = mid - 1;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2138467,
                "title": "simple-efficient-easy-binary-search-faster-solution",
                "content": "**<<<<<<< Press the Upvote Button please !!!!!!!!** it really Helps\\n\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        \\n        int low=1,high=x;\\n        \\n        while(low<=high)\\n        {\\n            long long mid= low + (high-low)/2;\\n            long long sqr=mid*mid;\\n            \\n            if(sqr <= x)\\n            {\\n                sqr=(mid+1)*(mid+1);\\n                \\n                if(sqr<=x)\\n                {\\n                    low=mid+1;\\n                }\\n                else\\n                    return mid;\\n                \\n            }   \\n            else if(sqr>x)\\n                high=mid-1;        \\n        }\\n        \\n        return 0;\\n    }\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/88deab96-b0cb-4ed9-9be3-8e6d630dec50_1654954670.2653778.jpeg)\\n\\n\\n**<+++++++ Press the Upvote Button please !!!!!!!!**\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        \\n        int low=1,high=x;\\n        \\n        while(low<=high)\\n        {\\n            long long mid= low + (high-low)/2;\\n            long long sqr=mid*mid;\\n            \\n            if(sqr <= x)\\n            {\\n                sqr=(mid+1)*(mid+1);\\n                \\n                if(sqr<=x)\\n                {\\n                    low=mid+1;\\n                }\\n                else\\n                    return mid;\\n                \\n            }   \\n            else if(sqr>x)\\n                high=mid-1;        \\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 534320,
                "title": "javascript-binary-search",
                "content": "- Time Complexity: O(log x)\\n- Space Complexity: O(1)\\n\\nThere are 3 possible way to escape the loop.\\n1. when `mid * mid` is equal to `x` immediately return `mid`\\n2. when `hi` is smaller than `lo`\\n3. when `hi` is equal to `lo`\\n\\n- At outside of loop, `hi` is smaller or equal to `lo`\\n- Need to consider return value when `hi === lo`\\n\\ne.g. `x = 5`\\nlo | mid | hi\\n:--:|:--:|:--:\\n0|2|5\\n3|4|5\\n3|-|3\\n\\nat the out of the loop `lo = hi = 3`, however it should return `2`\\n```JavaScript\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n    let lo = 0, hi = x;\\n    while (lo < hi) {\\n        const mid = parseInt((lo + hi)/2);\\n        if (mid * mid === x) {\\n            return mid;\\n        }\\n        if (x < mid * mid) {\\n            hi = mid - 1;\\n        } else {\\n            lo = mid + 1;\\n        }\\n    }\\n    return x < hi * hi ? hi - 1 : hi; \\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "Binary Tree"
                ],
                "code": "```JavaScript\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n    let lo = 0, hi = x;\\n    while (lo < hi) {\\n        const mid = parseInt((lo + hi)/2);\\n        if (mid * mid === x) {\\n            return mid;\\n        }\\n        if (x < mid * mid) {\\n            hi = mid - 1;\\n        } else {\\n            lo = mid + 1;\\n        }\\n    }\\n    return x < hi * hi ? hi - 1 : hi; \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2797953,
                "title": "best-python-code-time",
                "content": "This is the fastest and bestest way to code this problem. So efficient!!!!\\n\\n```class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 0:\\n            return 0\\n        for i in range(1,x+1):\\n            if i * i == x:\\n                return i\\n            elif i * i > x:\\n                return (i-1)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 0:\\n            return 0\\n        for i in range(1,x+1):\\n            if i * i == x:\\n                return i\\n            elif i * i > x:\\n                return (i-1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2737958,
                "title": "java-simple-solution-binary-search-without-using-sqrt-method",
                "content": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        long low =  0;\\n        long high = x;\\n        long ans = 0;\\n        while(low <= high){\\n            long mid = (low+high)/2;\\n            if(mid*mid < x){\\n                low = mid + 1;\\n                ans = mid;\\n            }\\n            else if(mid*mid > x){\\n                high = mid - 1;\\n            }\\n            else{\\n                return (int)mid;\\n            }\\n        }\\n        return (int)ans;\\n    }\\n}\\n```\\n\\n***UP-VOTE IF HELPFUL***",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        long low =  0;\\n        long high = x;\\n        long ans = 0;\\n        while(low <= high){\\n            long mid = (low+high)/2;\\n            if(mid*mid < x){\\n                low = mid + 1;\\n                ans = mid;\\n            }\\n            else if(mid*mid > x){\\n                high = mid - 1;\\n            }\\n            else{\\n                return (int)mid;\\n            }\\n        }\\n        return (int)ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1501651,
                "title": "python-binary-search-simple-solution",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        start = 0\\n        end = x // 2\\n        while start <= end:\\n            mid = start + ((end - start) // 2)\\n            if mid * mid <= x and (mid+1) * (mid+1) > x:\\n                return mid\\n            elif mid * mid < x:\\n                start = mid + 1\\n            else:\\n                end = mid - 1\\n        return start\\n```\\n\\n***If you liked the above solution then please upvote!***",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        start = 0\\n        end = x // 2\\n        while start <= end:\\n            mid = start + ((end - start) // 2)\\n            if mid * mid <= x and (mid+1) * (mid+1) > x:\\n                return mid\\n            elif mid * mid < x:\\n                start = mid + 1\\n            else:\\n                end = mid - 1\\n        return start\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2702332,
                "title": "python-solution",
                "content": "```\\ndef mySqrt(self, x: int) -> int:\\n        i=0\\n        while(i*i<=x):\\n            i+=1\\n        return i-1",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef mySqrt(self, x: int) -> int:\\n        i=0\\n        while(i*i<=x):\\n            i+=1\\n        return i-1",
                "codeTag": "Python3"
            },
            {
                "id": 480993,
                "title": "a-chinese-traditional-solution-yanghui-suancao",
                "content": "# Handy Calculation\\n![image](https://assets.leetcode.com/users/pianoguy/image_1579076714.png)\\n\\nThank [SNaveenMathew](https://leetcode.com/SNaveenMathew) for the [explanation](https://leetcode.com/problems/sqrtx/discuss/480993/A-Chinese-Traditional-Solution:-Yanghui-Suancao-()/1077352) below:\\n> Here\\'s a mathematical explanation for a 4 digit number abcd\\nThe result starts with y = floor(sqrt(ab)). Therefore, the result is of the form 10*y + z, where z is a number in range [0, 9]\\n(10y+z)^2 = 100*y^2 + 2*10*yz + z^2\\nWe already identified y, so subtract 100*y^2 from abcd to obtain remainder (say, rem). Now 2*10*yz + z^2 can be written as (2*10y + z) * z. Iterate from z = 0 to 9 (inclusive) to find the value z such that the resulting product is less than or equal to rem. There\\'s our answer! This approach can be extended to any number of digits (odd or even).\\n\\n# Coding (C#)\\n\\n```csharp\\npublic class Solution\\n{\\n    public int MySqrt(int x)\\n    {\\n        var result = 0;\\n        var (shang, yu, lian, fa) = (0, 0, 0, 1);\\n        while (x / fa >= 100)\\n        {\\n            fa *= 100;\\n        }\\n        while (fa > 0)\\n        {\\n            result *= 10;\\n            lian += shang;\\n            lian *= 10;\\n            yu = x % fa;\\n            x /= fa;\\n            shang = GuessShang(x, lian);\\n            lian += shang;\\n            result += shang;\\n            x = (x - shang * lian) * fa + yu;\\n            fa /= 100;\\n        }\\n        return result;\\n    }\\n\\n    private static int GuessShang(int x, int lian)\\n    {\\n        var shang = 0;\\n        while ((lian + shang) * shang < x)\\n        {\\n            shang++;\\n        }\\n        if ((lian + shang) * shang > x)\\n        {\\n            shang--;\\n        }\\n        return shang;\\n    }\\n}\\n```\\n\\n# Reference\\n[1]. [\\u589E\\u4E58\\u958B\\u5E73\\u65B9\\u6CD5\\u2014\\u2014\\u7DAD\\u57FA\\u767E\\u79D1](https://zh.wikipedia.org/w/index.php?title=%E5%A2%9E%E4%B9%98%E5%BC%80%E5%B9%B3%E6%96%B9%E6%B3%95&oldid=51962280)",
                "solutionTags": [],
                "code": "```csharp\\npublic class Solution\\n{\\n    public int MySqrt(int x)\\n    {\\n        var result = 0;\\n        var (shang, yu, lian, fa) = (0, 0, 0, 1);\\n        while (x / fa >= 100)\\n        {\\n            fa *= 100;\\n        }\\n        while (fa > 0)\\n        {\\n            result *= 10;\\n            lian += shang;\\n            lian *= 10;\\n            yu = x % fa;\\n            x /= fa;\\n            shang = GuessShang(x, lian);\\n            lian += shang;\\n            result += shang;\\n            x = (x - shang * lian) * fa + yu;\\n            fa /= 100;\\n        }\\n        return result;\\n    }\\n\\n    private static int GuessShang(int x, int lian)\\n    {\\n        var shang = 0;\\n        while ((lian + shang) * shang < x)\\n        {\\n            shang++;\\n        }\\n        if ((lian + shang) * shang > x)\\n        {\\n            shang--;\\n        }\\n        return shang;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25044,
                "title": "c-binary-search",
                "content": "```\\n    int mySqrt(int x) {\\n        if(x == 1) return 1;\\n        int l = 0;\\n        int r = x;\\n        while(l < r - 1){  // ** not l < r => think about the case r = l + 2\\n            int mid = l + (r - l) / 2;\\n            if(mid == x / mid) return mid; // prevent from mid * mid overflow\\n            else if(mid > x / mid) r = mid;  // prevent from mid * mid overflow\\n            else l = mid; // *** not l = mid + 1\\n        }\\n        return l;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    int mySqrt(int x) {\\n        if(x == 1) return 1;\\n        int l = 0;\\n        int r = x;\\n        while(l < r - 1){  // ** not l < r => think about the case r = l + 2\\n            int mid = l + (r - l) / 2;\\n            if(mid == x / mid) return mid; // prevent from mid * mid overflow\\n            else if(mid > x / mid) r = mid;  // prevent from mid * mid overflow\\n            else l = mid; // *** not l = mid + 1\\n        }\\n        return l;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3069606,
                "title": "c-and-python3-solution-with-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBinary Search\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$log(n)$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Python\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left=0\\n        right=10000000\\n        mid=(left+right)//2\\n        while(True):\\n            temp=mid\\n            if mid*mid>x:\\n                right=mid+1\\n            else:\\n                left=mid\\n            mid=(left+right)//2\\n            if temp==mid:\\n                break\\n        return left\\n\\n```\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long long int left=0,right=100000;\\n        long long int mid=(left+right)/2;\\n        while(true)\\n        {\\n            long long int temp=mid;\\n            if (mid*mid>x) right=mid+1;else left=mid;\\n            mid=(left+right)/2;\\n            if (temp==mid) break;\\n        }\\n            \\n        return left;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left=0\\n        right=10000000\\n        mid=(left+right)//2\\n        while(True):\\n            temp=mid\\n            if mid*mid>x:\\n                right=mid+1\\n            else:\\n                left=mid\\n            mid=(left+right)//2\\n            if temp==mid:\\n                break\\n        return left\\n\\n```\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long long int left=0,right=100000;\\n        long long int mid=(left+right)/2;\\n        while(true)\\n        {\\n            long long int temp=mid;\\n            if (mid*mid>x) right=mid+1;else left=mid;\\n            mid=(left+right)/2;\\n            if (temp==mid) break;\\n        }\\n            \\n        return left;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2200492,
                "title": "javascript-simple-solution",
                "content": "```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n    let val = 0;\\n    while((val * val) <= x) val++;\\n    return val - 1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n    let val = 0;\\n    while((val * val) <= x) val++;\\n    return val - 1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 25190,
                "title": "newton-s-method-in-python",
                "content": "For reference of [Newton's method](https://en.wikipedia.org/wiki/Newton%27s_method). For the sake of description, I will call the input `k` instead of `x`.\\n\\n`Newton's method` finds the root of a function `f(x) = 0`. In this case `f(x) = k - x^2, x > 0`, where `k` is the given input and `x` is the variable we are trying to solve for. Take an initial guess of `x`, call it `x_0`. We can draw a tangent to the curve of the function `y = f(x)` at the point `(x_0, f(x_0))`. We can then find the intersection of this tangent with the `x-axis`. The intersection point can be solved as:\\n    \\n`(x_0 + (k - x_0^2)/(2 * x_0), 0)`\\n\\nIn general the intersection point is `(x_0 - f(x_0) / f'(x_0), 0)`, where `f'(x)` is the derivative of `f(x)`.\\n\\nWe can then update our guess to `x_1 = x_0 + (k - x_0^2)/(2 * x_0)` and iterate the process until a tolerance is reached:\\n\\n    class Solution(object):\\n        def mySqrt(self, k):\\n            \"\"\"\\n            :type x: int\\n            :rtype: int\\n            \"\"\"\\n            \\n            #the sqrt of x should be less than (x+1)/2.0\\n            x = (k + 1)/4.0\\n            x2 = x * x\\n            \\n            diff = x2 - k\\n            e = 0.5\\n            \\n            while diff < -e or diff > e:\\n                x = x + (k - x2) / (2 * x)\\n                x2 = x * x\\n                diff = x2 - k\\n            \\n            return int(x)",
                "solutionTags": [
                    "Python"
                ],
                "code": "For reference of [Newton's method](https://en.wikipedia.org/wiki/Newton%27s_method). For the sake of description, I will call the input `k` instead of `x`.\\n\\n`Newton's method` finds the root of a function `f(x) = 0`. In this case `f(x) = k - x^2, x > 0`, where `k` is the given input and `x` is the variable we are trying to solve for. Take an initial guess of `x`, call it `x_0`. We can draw a tangent to the curve of the function `y = f(x)` at the point `(x_0, f(x_0))`. We can then find the intersection of this tangent with the `x-axis`. The intersection point can be solved as:\\n    \\n`(x_0 + (k - x_0^2)/(2 * x_0), 0)`\\n\\nIn general the intersection point is `(x_0 - f(x_0) / f'(x_0), 0)`, where `f'(x)` is the derivative of `f(x)`.\\n\\nWe can then update our guess to `x_1 = x_0 + (k - x_0^2)/(2 * x_0)` and iterate the process until a tolerance is reached:\\n\\n    class Solution(object):\\n        def mySqrt(self, k):\\n            \"\"\"\\n            :type x: int\\n            :rtype: int\\n            \"\"\"\\n            \\n            #the sqrt of x should be less than (x+1)/2.0\\n            x = (k + 1)/4.0\\n            x2 = x * x\\n            \\n            diff = x2 - k\\n            e = 0.5\\n            \\n            while diff < -e or diff > e:\\n                x = x + (k - x2) / (2 * x)\\n                x2 = x * x\\n                diff = x2 - k\\n            \\n            return int(x)",
                "codeTag": "Java"
            },
            {
                "id": 2670638,
                "title": "easy-binary-search-solution-java",
                "content": "nice pls upvote i want leet coins\\n\\'\\'\\'\\n\\n\\tclass Solution {\\n\\t\\tpublic int mySqrt(int x) {\\n\\t\\t\\tint start = 0;\\n\\t\\t\\tint end = x; \\n\\t\\t\\tint mid = 0;\\n\\n\\t\\t\\tif(x==0) return 0;\\n\\t\\t\\tif(x==1) return 1;\\n\\n\\t\\t\\twhile(start<=end){\\n\\t\\t\\t\\tmid = start+(end-start)/2;\\n\\n\\t\\t\\t\\tif(mid==(x/mid)){\\n\\t\\t\\t\\t\\treturn mid;\\n\\n\\t\\t\\t\\t}else if(mid>x/mid){\\n\\n\\t\\t\\t\\t\\tend = mid-1;\\n\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tif((mid+1) > x/(mid+1)){\\n\\t\\t\\t\\t\\t\\treturn mid;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tstart = mid+1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\n\\n\\t\\t\\treturn mid;\\n\\t\\t}\\n\\t}\\n\\'\\'\\'",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n\\t\\tpublic int mySqrt(int x) {\\n\\t\\t\\tint start = 0;\\n\\t\\t\\tint end = x; \\n\\t\\t\\tint mid = 0;\\n\\n\\t\\t\\tif(x==0) return 0;\\n\\t\\t\\tif(x==1) return 1;\\n\\n\\t\\t\\twhile(start<=end){\\n\\t\\t\\t\\tmid = start+(end-start)/2;\\n\\n\\t\\t\\t\\tif(mid==(x/mid)){\\n\\t\\t\\t\\t\\treturn mid;\\n\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2419984,
                "title": "100-c-easy-to-understand-binary-search",
                "content": "**Code**\\n\\n**C++ :**\\n\\n**General Idea:**\\n- Draw a number line from 0 to x.\\n- Now we know that square root lies between 0 to x.\\n- Now apply binary search and find the solution in O(log N).\\n\\n\\t\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\tint mySqrt(int x) {\\n\\t\\tlong i = 0;\\n\\t\\tint start, end;\\n\\t\\tlong mid;\\n\\t\\tstart = 0;\\n\\t\\tend = x;\\n\\t\\tif(x==1) return 1;\\n\\t\\tif(x==0) return 0;\\n\\t\\n\\t\\twhile (start<=end) // x=8\\n\\t\\t{\\n\\t\\t\\tmid = (start + end) / 2; // 4\\n        \\n\\t\\t\\tif (x >= (mid-1)*(mid-1) && x <= mid*mid )\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(mid*mid==x) return mid;\\n\\t\\t\\t\\telse return mid-1;\\n\\t\\t\\t}\\n\\n\\t\\t\\telse if (mid * mid > x)\\n\\t\\t\\t{\\n\\t\\t\\t\\tend = mid-1;\\n\\t\\t\\t}\\n\\n\\t\\t\\telse\\n\\t\\t\\t{start = mid+1;}\\n            \\n\\t\\t}\\n\\n\\t\\ti++;\\n\\n\\t\\treturn mid;\\n        \\n\\t\\t}\\n\\t\\t};\\n\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community).**\\n\\n**HAPPY CODING:)**\\n\\n*Any suggestions and improvements are always welcome*",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\tint mySqrt(int x) {\\n\\t\\tlong i = 0;\\n\\t\\tint start, end;\\n\\t\\tlong mid;\\n\\t\\tstart = 0;\\n\\t\\tend = x;\\n\\t\\tif(x==1) return 1;\\n\\t\\tif(x==0) return 0;\\n\\t\\n\\t\\twhile (start<=end) // x=8\\n\\t\\t{\\n\\t\\t\\tmid = (start + end) / 2; // 4\\n        \\n\\t\\t\\tif (x >= (mid-1)*(mid-1) && x <= mid*mid )\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(mid*mid==x) return mid;\\n\\t\\t\\t\\telse return mid-1;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1913570,
                "title": "problem-due-to-mid-mid-x-and-working-fine-with-mid-x-mid",
                "content": "**Any difference between `mid * mid > x`  and `mid > x / mid` ?**\\n\\nInitially I thought why the above same mathematical operation is not working, the operation with **mid * mid > x** is not working and the operation with **mid > x / mid** is working. Later I got to know its due to integer overflow because **mid * mid** may give a large number which may not be supported by simple int type. **mid** is integer, **mid * mid** might overflow?\\n\\n\\nWrong One:\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x<=1)\\n            return x;\\n        \\n        int low = 1;\\n        int high = x;\\n        while(high >= low) {\\n            int mid = (low + high) / 2;\\n            if (mid * mid == x ) {\\n                return mid;\\n            }\\n            else if(mid*mid > x ) {\\n                high = mid - 1;\\n            }\\n            else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n}\\n```\\n\\n\\nAccepted One:\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x<=1)\\n            return x;\\n        \\n        int low = 1;\\n        int high = x;\\n        while(high >= low) {\\n            int mid = (low + high) / 2;\\n            if (mid == x / mid) {\\n                return mid;\\n            }\\n            else if(mid > x / mid) {\\n                high = mid - 1;\\n            }\\n            else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x<=1)\\n            return x;\\n        \\n        int low = 1;\\n        int high = x;\\n        while(high >= low) {\\n            int mid = (low + high) / 2;\\n            if (mid * mid == x ) {\\n                return mid;\\n            }\\n            else if(mid*mid > x ) {\\n                high = mid - 1;\\n            }\\n            else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x<=1)\\n            return x;\\n        \\n        int low = 1;\\n        int high = x;\\n        while(high >= low) {\\n            int mid = (low + high) / 2;\\n            if (mid == x / mid) {\\n                return mid;\\n            }\\n            else if(mid > x / mid) {\\n                high = mid - 1;\\n            }\\n            else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2693011,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n     public int mySqrt(int x) {\\n        if(x <= 1) return x;\\n        int start = 1;\\n        int end = x/2;\\n        \\n        while(start < end) {\\n            int mid = (start + (end-start)/2) + 1;\\n            \\n            int div = x/mid;\\n            if(div == mid) return mid;\\n            if(div > mid) start = mid;\\n            else end = mid-1;\\n        }\\n        \\n        return start;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n     public int mySqrt(int x) {\\n        if(x <= 1) return x;\\n        int start = 1;\\n        int end = x/2;\\n        \\n        while(start < end) {\\n            int mid = (start + (end-start)/2) + 1;\\n            \\n            int div = x/mid;\\n            if(div == mid) return mid;\\n            if(div > mid) start = mid;\\n            else end = mid-1;\\n        }\\n        \\n        return start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2635982,
                "title": "python-faster-than-97-binary-search",
                "content": "![image](https://assets.leetcode.com/users/images/3fa1c0ca-f02a-4f9a-9739-4ca7bfd4b53c_1664393023.4905994.png)\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low = 0\\n        high = x\\n        \\n        while low <= high:\\n            mid = (low + high) // 2\\n            sqr = mid * mid\\n            if sqr == x or (sqr < x and (mid + 1) * (mid + 1) > x):\\n                return mid\\n            \\n            elif sqr > x:\\n                high = mid - 1\\n                \\n            else:\\n                low = mid + 1\\n```\\n**Please upvote if you find this helpful**",
                "solutionTags": [
                    "Python",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low = 0\\n        high = x\\n        \\n        while low <= high:\\n            mid = (low + high) // 2\\n            sqr = mid * mid\\n            if sqr == x or (sqr < x and (mid + 1) * (mid + 1) > x):\\n                return mid\\n            \\n            elif sqr > x:\\n                high = mid - 1\\n                \\n            else:\\n                low = mid + 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2587756,
                "title": "c-easy-and-fast-two-line-solution",
                "content": "**please upvote if helpful**\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n          long r = x;\\n    while (r*r > x)\\n        r = (r + x/r) / 2;\\n    return r;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n          long r = x;\\n    while (r*r > x)\\n        r = (r + x/r) / 2;\\n    return r;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2110372,
                "title": "javascript-simple-solution",
                "content": "**Runtime: 152 ms, faster than 14.67% of JavaScript online submissions for Sqrt(x).\\nMemory Usage: 43.7 MB, less than 53.52% of JavaScript online submissions for Sqrt(x).**\\n```\\nvar mySqrt = function(x) {\\n    let sqrt = 1;\\n    if(x===0){\\n        return 0;\\n    }\\n    for(let i=1; i*i<=x; i++){\\n      sqrt = i;\\n    }\\n    return sqrt;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar mySqrt = function(x) {\\n    let sqrt = 1;\\n    if(x===0){\\n        return 0;\\n    }\\n    for(let i=1; i*i<=x; i++){\\n      sqrt = i;\\n    }\\n    return sqrt;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1584603,
                "title": "java-binary-search-100-fast-explained-with-comments",
                "content": "\\'\\'\\'\\nclass Solution {\\n    public int mySqrt(int x) {\\n        \\n       /* Brute force approach : Let us consider x as 16, now to find the square root we will take 16 nos. in the array [1,2,3,4,5,6,7,8,9, ... 16] and will check \\n            if  1*1 == 16\\n                2*2 == 16\\n                3*3 == 16\\n                4*4 == 16 -> found our answer  */\\n        \\n        int len = x;\\n        \\n        //Applying binary search in the array we formed\\n        \\n        int start = 0;\\n        int end = len;\\n        \\n        while(start <= end)\\n        {\\n            long mid = start + (end-start)/2;   //long datatype, as the range of x is very high\\n            \\n            if(x < mid * mid)\\n            {\\n                end = (int)mid - 1;\\n            }\\n            else if(x > mid * mid)\\n            {\\n                start = (int)mid + 1;\\n            }\\n            else \\n            {\\n                return (int)mid;\\n            }\\n        }\\n        \\n        //Now in the array we have to find the square root of the non-perfect squares\\n        /* Consider an example, \\n            x = 7 so, len = 7 \\n           \\n           start = 0, end = 7\\n           mid = 3 --->  7 < 9 -----> end = mid - 1 ----> end = 3 - 1 = 2\\n           \\n           start = 0, end = 2 \\n           mid = 1 ----> 7 > 1 -----> start = mid + 1 -----> start = 1 + 1 = 2\\n           \\n           start = 2, end = 2\\n           mid = 2 -----> 7 > 4 -------> start = mid + 1 -----> start = 2 + 1 = 3\\n           \\n           start > end terminated \\n           END ----> answer, if the number is non-perfect square */\\n        \\n        return end;\\n    }\\n}\\n\\'\\'\\'",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n    public int mySqrt(int x) {\\n        \\n       /* Brute force approach : Let us consider x as 16, now to find the square root we will take 16 nos. in the array [1,2,3,4,5,6,7,8,9, ... 16] and will check \\n            if  1*1 == 16\\n                2*2 == 16\\n                3*3 == 16\\n                4*4 == 16 -> found our answer  */\\n        \\n        int len = x;\\n        \\n        //Applying binary search in the array we formed\\n        \\n        int start = 0;\\n        int end = len;\\n        \\n        while(start <= end)\\n        {\\n            long mid = start + (end-start)/2;   //long datatype, as the range of x is very high\\n            \\n            if(x < mid * mid)\\n            {\\n                end = (int)mid - 1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 25208,
                "title": "c-binary-search-solution-easy-understand",
                "content": "    class Solution {\\n    public:\\n    int mySqrt(int x)\\n    {\\n    \\tlong long low = 0;\\n    \\tlong long high = x;\\n\\n    \\twhile (low < high)\\n    \\t{\\n    \\t\\tlong long mid = (high - low) / 2 + low;\\n\\n    \\t\\tif (mid * mid == x)\\n    \\t\\t\\treturn mid;\\n    \\t\\telse if (mid * mid > x)\\n    \\t\\t\\thigh = mid - 1;\\n    \\t\\telse\\n    \\t\\t\\tlow = mid + 1;\\n    \\t}\\n\\n    \\treturn low * low > x ? low - 1 : low;\\n    }\\n    };",
                "solutionTags": [
                    "C++",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n    public:\\n    int mySqrt(int x)\\n    {\\n    \\tlong long low = 0;\\n    \\tlong long high = x;\\n\\n    \\twhile (low < high)\\n    \\t{\\n    \\t\\tlong long mid = (high - low) / 2 + low;\\n\\n    \\t\\tif (mid * mid == x)\\n    \\t\\t\\treturn mid;\\n    \\t\\telse if (mid * mid > x)\\n    \\t\\t\\thigh = mid - 1;\\n    \\t\\telse\\n    \\t\\t\\tlow = mid + 1;\\n    \\t}",
                "codeTag": "Java"
            },
            {
                "id": 3346718,
                "title": "easy-c-solution-binary-search",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe function first initializes two variables, `l` and `h` to **0** and `x` respectively. These variables are used to represent the lower and upper limits of the search range. \\n\\nWe also initializes an integer variable `\"ans\"` to store the final result.\\n\\nWe star a while loop where it continues to perform the Binary Search until the search range is exhausted (i.e., `l>h`). In each iteration of the loop, the function calculates the midpoint of the search range, `\"mid\"`, using the formula `\"mid=l+(h-l)/2\"`. It also calculates the square of `\"mid\"`, `\"sq=mid*mid\"`.\\n\\nIf `sq == x`, then `\"mid\"` is the square root of `\"x\"`, and the function sets \"ans\" to `\"mid\"` and breaks out of the loop.\\n\\nIf `sq < x`, then the square root of `\"x\"` must be in the right half of the search range, and the function sets \"l\" to \"mid+1\" to search in the right half.\\n\\nIf `sq > x`, then the square root of `\"x\"` must be in the left half of the search range, and the function sets `\"h\" to \"mid-1\"` to search in the left half.\\n\\nFinally, the function returns the value of \"ans\", which represents the floor value of the square root of `\"x\"`.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(log(n))$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int mySqrt(int x) {\\n         int l=0,h=x;\\n         int ans;\\n        while(l<=h){\\n\\n           long long int mid=l+(h-l)/2;\\n           long long int sq=mid*mid;\\n\\n           if(sq==x){\\n               ans=mid;\\n               break;\\n            }\\n            else if(sq<x){\\n                //mid=ans;\\n                l=mid+1;\\n            }\\n            else{\\n                h=mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int mySqrt(int x) {\\n         int l=0,h=x;\\n         int ans;\\n        while(l<=h){\\n\\n           long long int mid=l+(h-l)/2;\\n           long long int sq=mid*mid;\\n\\n           if(sq==x){\\n               ans=mid;\\n               break;\\n            }\\n            else if(sq<x){\\n                //mid=ans;\\n                l=mid+1;\\n            }\\n            else{\\n                h=mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3101509,
                "title": "3-different-solutions-using-js-o-1-o-n-o-logn",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJavaScript Solution\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSolution I:\\n\\n- This is the simplest solution which uses the built-in function Math.sqrt() which takes a number as input and returns the square root of that number.\\n\\n- The function Math.floor() is used to round down the decimal number to the nearest integer.\\n\\nSolution II:\\n\\n- This solution uses a for loop to iterate through all the numbers from 0 to x+1.\\n\\n- It checks if i*i is greater than x, if it is then it returns i-1.\\n\\nSolution III:\\n\\n- This solution uses a binary search algorithm to find the square root.\\n- It checks if x is less than 2, if it is then it returns x.\\n- It initializes a variable result to 0, start to 1, and end to x/2.\\n- It uses while loop to iterate until start is less than or equal to end.\\n- It finds the middle element between start and end and checks if mid*mid is equal to x, if it is then return mid.\\n- If mid*mid is less than x then start is set to mid+1 and result is set to mid.\\n- Else end is set to mid-1.\\n- Finally, it returns the result.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nSolution I:\\n\\n- Time Complexity: O(1) as it uses a built-in function to calculate the square root.\\n\\nSolution II:\\n\\n- Time Complexity: O(x) as it iterates through all the numbers from 0 to x+1.\\n\\nSolution III:\\n\\n- Time Complexity: O(log n) as the binary search algorithm reduces the number of iterations by half on each iteration.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\nSolution I: \\n- Space Complexity: O(1) as it only uses a single variable to store the result.\\n\\nSolution II:\\n- Space Complexity: O(1) as it only uses a single variable to store the result.\\n\\n\\nSolution III:\\n- Space Complexity: O(1) as it only uses a few variables to store the result, start, and end.\\n# Code\\n```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n\\n    // Solution I\\n\\n    // return Math.floor(Math.sqrt(x));\\n\\n    // Solution II\\n\\n    // for(let i = 0; i<=x + 1; i++){\\n    //     if(i*i>x){\\n    //         return i-1;\\n    //     }\\n    // }\\n\\n     // Solution III\\n\\n    //  Binary Search Solution\\n\\n    if(x < 2) return x;\\n    let result = 0;\\n    let start = 1;\\n    let end = x/2;\\n\\n    while(start<=end){\\n        let mid = Math.floor(start + (end-start)/2);\\n        let sqr = mid*mid;\\n        if(sqr == x) return mid;\\n        else if(sqr<x){ start = mid + 1; result = mid;}\\n        else end = mid - 1;\\n\\n    }\\n\\n    return result;\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Binary Search"
                ],
                "code": "```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n\\n    // Solution I\\n\\n    // return Math.floor(Math.sqrt(x));\\n\\n    // Solution II\\n\\n    // for(let i = 0; i<=x + 1; i++){\\n    //     if(i*i>x){\\n    //         return i-1;\\n    //     }\\n    // }\\n\\n     // Solution III\\n\\n    //  Binary Search Solution\\n\\n    if(x < 2) return x;\\n    let result = 0;\\n    let start = 1;\\n    let end = x/2;\\n\\n    while(start<=end){\\n        let mid = Math.floor(start + (end-start)/2);\\n        let sqr = mid*mid;\\n        if(sqr == x) return mid;\\n        else if(sqr<x){ start = mid + 1; result = mid;}\\n        else end = mid - 1;\\n\\n    }\\n\\n    return result;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 992001,
                "title": "easy-without-inbuilt-function-binary-search-96-faster",
                "content": "```\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x < 2: return x\\n        result = 0 \\n        left = 1\\n        right = x/2\\n        while left <= right:\\n            mid = math.floor((left+right)/2)\\n            if mid * mid > x:\\n                right = mid - 1\\n            else:\\n                result = mid\\n                left = mid + 1\\n        return result\\n```\\n\\nPlease Upvote once you get it.",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x < 2: return x\\n        result = 0 \\n        left = 1\\n        right = x/2\\n        while left <= right:\\n            mid = math.floor((left+right)/2)\\n            if mid * mid > x:\\n                right = mid - 1\\n            else:\\n                result = mid\\n                left = mid + 1\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 715772,
                "title": "rust-solutions",
                "content": "### 1. Brute Force\\n```Rust\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        let mut n = 1;\\n        while n <= x / n {\\n            n += 1;\\n        }\\n        n - 1\\n    }\\n}\\n```\\n\\n### 2. Binary Search\\n```Rust\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        if x == 0 || x == 1 {\\n            return x;\\n        }\\n        let mut left = 0;\\n        let mut right = x;\\n        let mut mid = (left + right) / 2;\\n        loop {\\n            if mid <= x / mid && (mid + 1) > x / (mid + 1) {\\n                return mid;\\n            } else if mid > x / mid {\\n                right = mid;\\n            } else if mid < x / mid {\\n                left = mid;\\n            }\\n            mid = (left + right) / 2;\\n        }\\n    }\\n}\\n```\\n\\n### 3. (n + 1)<sup>2</sup> = n<sup>2</sup> + 2n + 1\\n```Rust\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        let mut n = 0;\\n        let mut x = x - 1;\\n        while x >= 0 {\\n            n += 1;\\n            x -= 2 * n + 1;\\n        }\\n        n\\n    }\\n}\\n```\\n\\n### 4. Newton\\'s Method\\n```Rust\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        if x == 0 {\\n            return 0;\\n        }\\n        let x = x as usize;\\n        let mut n = x;\\n        while n > x / n {\\n            n = (n + x / n) / 2;\\n        }\\n        n as i32\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```Rust\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        let mut n = 1;\\n        while n <= x / n {\\n            n += 1;\\n        }\\n        n - 1\\n    }\\n}\\n```\n```Rust\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        if x == 0 || x == 1 {\\n            return x;\\n        }\\n        let mut left = 0;\\n        let mut right = x;\\n        let mut mid = (left + right) / 2;\\n        loop {\\n            if mid <= x / mid && (mid + 1) > x / (mid + 1) {\\n                return mid;\\n            } else if mid > x / mid {\\n                right = mid;\\n            } else if mid < x / mid {\\n                left = mid;\\n            }\\n            mid = (left + right) / 2;\\n        }\\n    }\\n}\\n```\n```Rust\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        let mut n = 0;\\n        let mut x = x - 1;\\n        while x >= 0 {\\n            n += 1;\\n            x -= 2 * n + 1;\\n        }\\n        n\\n    }\\n}\\n```\n```Rust\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        if x == 0 {\\n            return 0;\\n        }\\n        let x = x as usize;\\n        let mut n = x;\\n        while n > x / n {\\n            n = (n + x / n) / 2;\\n        }\\n        n as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 220383,
                "title": "binary-search-solution-with-pictured-explanation-o-log-x",
                "content": "Explanaiton for this step is:\\nif mid == low or mid ** 2 == x: return mid\\nWhen its a perfect square then it will follow the mid ** 2 ==x, \\nbut for not perfect squares we have to give lower bound, thus it boils down to mid == low. I have tried to explain in picture Below.\\n\\n```\\nclass Solution:\\n    def mySqrt(self, x):\\n        if x==1 or x==0:\\n            return x\\n        low,high = 1,x\\n        while low<high:\\n            mid = (low+high)//2\\n            if mid == low or mid**2 == x: \\n                return mid\\n            if mid**2 > x:\\n                high = mid\\n            else:\\n                low = mid\\n```\\n![image](https://assets.leetcode.com/users/ramanahuja/image_1547702774.png)\\n![image](https://assets.leetcode.com/users/ramanahuja/image_1547702778.png)\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x):\\n        if x==1 or x==0:\\n            return x\\n        low,high = 1,x\\n        while low<high:\\n            mid = (low+high)//2\\n            if mid == low or mid**2 == x: \\n                return mid\\n            if mid**2 > x:\\n                high = mid\\n            else:\\n                low = mid\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25200,
                "title": "very-easy-java-o-log-n-method-using-binary-search-with-explanation",
                "content": "I used the idea of https://leetcode.com/discuss/24942/a-binary-search-solution for this. I have made modifications to make it more readable and easy to understand.\\n\\n    // Log n - Binary Search\\n\\tpublic int mySqrt(int x) \\n\\t{\\n\\t\\tif (x == 0)\\n\\t\\t\\treturn 0;\\n\\t\\t\\n\\t\\tlong left = 1;\\n\\t\\tlong right = x;\\n\\t\\t\\n\\t\\twhile (true) \\n\\t\\t{\\n\\t\\t    // It has to be long because we are calculating its product while checking\\n\\t\\t\\tlong mid = (left + right)/2;\\n\\t\\t\\t\\n\\t\\t\\tif (mid * mid > x) \\n\\t\\t\\t{\\n\\t\\t\\t\\tright = mid - 1;\\n\\t\\t\\t} \\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t    // mid^2 was less than x. Check about (mid+1) is greater than x? If yes, he's our guy.\\n\\t\\t\\t\\tif ((mid + 1) * (mid + 1) > x)\\n\\t\\t\\t\\t\\treturn (int) mid;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tleft = mid + 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "I used the idea of https://leetcode.com/discuss/24942/a-binary-search-solution for this. I have made modifications to make it more readable and easy to understand.\\n\\n    // Log n - Binary Search\\n\\tpublic int mySqrt(int x) \\n\\t{\\n\\t\\tif (x == 0)\\n\\t\\t\\treturn 0;\\n\\t\\t\\n\\t\\tlong left = 1;\\n\\t\\tlong right = x;\\n\\t\\t\\n\\t\\twhile (true) \\n\\t\\t{\\n\\t\\t    // It has to be long because we are calculating its product while checking\\n\\t\\t\\tlong mid = (left + right)/2;\\n\\t\\t\\t\\n\\t\\t\\tif (mid * mid > x) \\n\\t\\t\\t{\\n\\t\\t\\t\\tright = mid - 1;\\n\\t\\t\\t} \\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t    // mid^2 was less than x. Check about (mid+1) is greater than x? If yes, he's our guy.\\n\\t\\t\\t\\tif ((mid + 1) * (mid + 1) > x)\\n\\t\\t\\t\\t\\treturn (int) mid;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tleft = mid + 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 2789266,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\'\\'\\'\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint mySqrt(int x) {\\n\\t\\t\\tint i=0, j=x, ans;\\n\\t\\t\\twhile(i<=j){\\n\\t\\t\\t\\tlong long int mid=i+(j-i)/2;\\n\\t\\t\\t\\tif(mid*mid==x){ans = mid; break;}\\n\\t\\t\\t\\telse if(mid*mid<x){i=mid+1;}\\n\\t\\t\\t\\telse{j=mid-1;}\\n\\t\\t\\t}\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};\\n\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint mySqrt(int x) {\\n\\t\\t\\tint i=0, j=x, ans;\\n\\t\\t\\twhile(i<=j){\\n\\t\\t\\t\\tlong long int mid=i+(j-i)/2;\\n\\t\\t\\t\\tif(mid*mid==x){ans = mid; break;}",
                "codeTag": "Java"
            },
            {
                "id": 2711670,
                "title": "fastest-and-easiest-faster-than-99-submissions-binary-search",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0 or x==1: return x\\n        max = x;\\n        min = 0;\\n        q = (min+max)//2;\\n        while(min < max):\\n            c = q * q;\\n            if c == x: \\n                return q;\\n            elif c < x: \\n                min = q+1;\\n            else: \\n                max=q;\\n            q=(min+max)//2;\\n        return q - 1;\\n```\\nDo upvote if its helpful,Thanks,",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0 or x==1: return x\\n        max = x;\\n        min = 0;\\n        q = (min+max)//2;\\n        while(min < max):\\n            c = q * q;\\n            if c == x: \\n                return q;\\n            elif c < x: \\n                min = q+1;\\n            else: \\n                max=q;\\n            q=(min+max)//2;\\n        return q - 1;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1995489,
                "title": "python-98-easy-binary-search",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 1:\\n            return 1\\n        left = 0\\n        right = x//2\\n        while left <= right:\\n            mid = (left + right)//2\\n            if mid * mid == x:\\n                return mid\\n            elif mid * mid < x:\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        \\n        return trunc(right)\\n\\n```\\n\\n",
                "solutionTags": [
                    "Python",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 1:\\n            return 1\\n        left = 0\\n        right = x//2\\n        while left <= right:\\n            mid = (left + right)//2\\n            if mid * mid == x:\\n                return mid\\n            elif mid * mid < x:\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        \\n        return trunc(right)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1947340,
                "title": "python-newton-s-method",
                "content": "![image](https://assets.leetcode.com/users/images/6d9788fa-f156-4ec8-8d20-1ea3568f4af7_1649959471.8358445.png)\\n\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n\\n        k = x/2 # initial value\\n        \\n        while abs(k*k - x)>=0.1:    \\n            k = k  - (k*k - x)/(2 * k) #update\\n        return int(k)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n\\n        k = x/2 # initial value\\n        \\n        while abs(k*k - x)>=0.1:    \\n            k = k  - (k*k - x)/(2 * k) #update\\n        return int(k)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1441125,
                "title": "java-o-logn-time-o-1-space-binary-search-faster-than-100",
                "content": "Runtime: 1 ms, faster than 100.00% of Java online submissions for Sqrt(x).\\nMemory Usage: 36.1 MB, less than 66.60% of Java online submissions for Sqrt(x).\\n\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x == 0) // To avoid division by 0\\n            return 0;\\n        int start = 1, end = x / 2 + 1; // The squareroot can only lie in this range\\n        while(start <= end) {\\n            int mid = start + (end - start) / 2;\\n            if(mid == x / mid) // Not multiplying as the product for a large number may be greater than the max value of int\\n                return mid;\\n            else if(mid < x / mid) \\n                start = mid + 1;\\n            else\\n                end = mid - 1;\\n        }\\n        return end; // end will be the largest integer such that end^2 < x\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x == 0) // To avoid division by 0\\n            return 0;\\n        int start = 1, end = x / 2 + 1; // The squareroot can only lie in this range\\n        while(start <= end) {\\n            int mid = start + (end - start) / 2;\\n            if(mid == x / mid) // Not multiplying as the product for a large number may be greater than the max value of int\\n                return mid;\\n            else if(mid < x / mid) \\n                start = mid + 1;\\n            else\\n                end = mid - 1;\\n        }\\n        return end; // end will be the largest integer such that end^2 < x\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1250217,
                "title": "java-visual-explaination-binary-search-clean-and-short-solution-2ms",
                "content": "I\\'m a visual learner so i have to map it out on piece of paper, to help me see it clearly, hope this can help you too.\\nAlso I saw few people asking why `x / mid` instead of `mid * mid`, i was struggling to see it at first, but finally understood it. \\nit\\'s just a math trick.\\n```java\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int left = 1;\\n        int right = x;\\n        while (left <= right){\\n            // pervent overflow\\n            int mid = left + (right - left) / 2;\\n            // math concept of move multiplication to other side becomes division\\n            // (this)                       (here)      \\n            //  |                            |\\n            //  V                            V\\n            // mid * mid = x equals to  x / mid = mid\\n            // this also pervents overflow of mid * mid being too large\\n            if (mid > x / mid) right = mid - 1;\\n            else left = mid + 1;\\n        }\\n        \\n        return right;\\n    }\\n}\\n// Time O(logn)\\n\\n// Visual Run x = 8\\n// X   Left  Right  Mid  compare  X/Mid\\n// 8     1    8      4       >       2\\n// 8     1    3      2       <       4\\n// 8     3    3      3       >       2\\n// 8     3    2      Stopped here because right < left\\n\\n// x = 9\\n// X   Left  Right  Mid  compare  X/Mid\\n// 9     1    9      5       >       1\\n// 9     1    4      2       <       4\\n// 9     3    4      3       >       2\\n// 9     3    2     Stopped here because right < left\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```java\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int left = 1;\\n        int right = x;\\n        while (left <= right){\\n            // pervent overflow\\n            int mid = left + (right - left) / 2;\\n            // math concept of move multiplication to other side becomes division\\n            // (this)                       (here)      \\n            //  |                            |\\n            //  V                            V\\n            // mid * mid = x equals to  x / mid = mid\\n            // this also pervents overflow of mid * mid being too large\\n            if (mid > x / mid) right = mid - 1;\\n            else left = mid + 1;\\n        }\\n        \\n        return right;\\n    }\\n}\\n// Time O(logn)\\n\\n// Visual Run x = 8\\n// X   Left  Right  Mid  compare  X/Mid\\n// 8     1    8      4       >       2\\n// 8     1    3      2       <       4\\n// 8     3    3      3       >       2\\n// 8     3    2      Stopped here because right < left\\n\\n// x = 9\\n// X   Left  Right  Mid  compare  X/Mid\\n// 9     1    9      5       >       1\\n// 9     1    4      2       <       4\\n// 9     3    4      3       >       2\\n// 9     3    2     Stopped here because right < left\\n```",
                "codeTag": "Java"
            },
            {
                "id": 311341,
                "title": "java-binary-search-solution-with-no-overflow-errors",
                "content": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x == 0 || x== 1){\\n            return x;\\n        }\\n        int left = 0;\\n        int right = x/2 + 1;\\n        while (left <= right){\\n            int mid = left + (right-left)/2;\\n            if (mid < x/mid) { left = mid+1;}\\n            else if (mid > x/mid) { right = mid-1;}\\n            else { return mid;}\\n        }\\n        return right;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x == 0 || x== 1){\\n            return x;\\n        }\\n        int left = 0;\\n        int right = x/2 + 1;\\n        while (left <= right){\\n            int mid = left + (right-left)/2;\\n            if (mid < x/mid) { left = mid+1;}\\n            else if (mid > x/mid) { right = mid-1;}\\n            else { return mid;}\\n        }\\n        return right;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 166438,
                "title": "binary-search-java-with-explanations",
                "content": "**Logical Thought**\\nThe problem is to find a value `v` such that `v * v <= x && (v + 1) * (v + 1) > x` in `[1, x / 2]`. That\\'s natural to **Binary Search**.\\nThe **loop invariant** contributes to the implementation.\\nIf we assert `v` must exist in `[lo, hi]`,\\n* Initially, `1 <= v <= x / 2`, to satisfy the assertion, `lo = 0, hi = x / 2`.\\n* For `mi = lo + ((hi - lo) >> 1)`,\\nif ``mi * mi <= x && (mi + 1) * (mi+ 1) > x``, mi is target, return `mi`; [there]\\nif ``mi * mi <= x && (mi + 1) * (mi + 1) <= x``, to satisfy the assertion, `lo = mi + 1`.\\nif ``mi * mi > x && (mi + 1) * (mi + 1) > x``, hi = mi, `v` must exist in `[lo, mi - 1]`, to satisfy the assertion, `hi = mi - 1`.\\n* Since there must be a valid answer, the loop will terminates [there].\\n\\n**Trick**\\n`x = 0 or 1` can be processed specially. In addition, to avoid Integer Overflow,` lo, hi, and mi `are `long` rather than `int`.\\n\\n**Clear Code**\\n```\\n    public int mySqrt(int x) {\\n        \\n        if (x <= 1) {\\n            return x;\\n        }\\n        \\n        long lo = 1, hi = x / 2;\\n        \\n        while (lo <= hi) {\\n            long mi = lo + ((hi - lo) >> 1);\\n            if (mi * mi <= x && (mi + 1) * (mi + 1) > x) {\\n                return (int)mi;\\n            }\\n            if ((mi + 1) * (mi + 1) <= x) {\\n                lo = mi + 1;\\n            }\\n            if (mi * mi > x) {\\n                hi = mi - 1;\\n            }\\n        }\\n        \\n        throw null;\\n    }\\n```\\nI appreciate your **VOTE UP** (\\u02CAo\\u0334\\u0336\\u0337\\u0324\\u2304o\\u0334\\u0336\\u0337\\u0324\\u02CB) ",
                "solutionTags": [],
                "code": "```\\n    public int mySqrt(int x) {\\n        \\n        if (x <= 1) {\\n            return x;\\n        }\\n        \\n        long lo = 1, hi = x / 2;\\n        \\n        while (lo <= hi) {\\n            long mi = lo + ((hi - lo) >> 1);\\n            if (mi * mi <= x && (mi + 1) * (mi + 1) > x) {\\n                return (int)mi;\\n            }\\n            if ((mi + 1) * (mi + 1) <= x) {\\n                lo = mi + 1;\\n            }\\n            if (mi * mi > x) {\\n                hi = mi - 1;\\n            }\\n        }\\n        \\n        throw null;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 25224,
                "title": "newton-s-method-with-only-one-variable",
                "content": "    public class Solution {\\n        public int mySqrt(int x) {\\n            double x0 = 1;\\n            do{\\n                x0 = (x0+ x/x0)/2;\\n            }while(Math.abs(Math.pow(x0, 2) - x) >= 1);\\n            return (int)x0;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int mySqrt(int x) {\\n            double x0 = 1;\\n            do{\\n                x0 = (x0+ x/x0)/2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 25217,
                "title": "4ms-c-solution-using-carmack-s-method",
                "content": "Carmack's method is a fast way to find the inverse square root of a float number:\\n\\n[http://en.wikipedia.org/wiki/Fast_inverse_square_root][1]\\n\\nCarmack's method is fast because:\\n\\n 1. The initial guess is super accurate.\\n 2. Does not use division.\\n 3. Does not use loops.\\n\\nNote that Carmack's method is no longer useful nowadays and this is just for fun.\\n\\n\\n    class Solution {\\n        public:\\n        int mySqrt(int x) {\\n            uint64_t i;\\n            double x2, y;\\n            x2 = x * 0.5;\\n            y = x;\\n            i = *(uint64_t *) &y;\\n            i = 0x5fe6eb50c7b537a9 - (i >> 1); // This magic number is taken from wikipedia.\\n            y = *(double *) &i; // initial guess of the inverse square root\\n            y = y * (1.5 - (x2 * y * y)); // Newton for inverse square root.\\n            y = y * (1.5 - (x2 * y * y));\\n            y = y * (1.5 - (x2 * y * y));\\n            y = y * (1.5 - (x2 * y * y)); // repeate 4 times to get enough precision.\\n            return x * y;\\n        }\\n    };\\n\\n\\n  [1]: http://en.wikipedia.org/wiki/Fast_inverse_square_root",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n        public:\\n        int mySqrt(int x) {\\n            uint64_t i;\\n            double x2, y;\\n            x2 = x * 0.5;\\n            y = x;\\n            i = *(uint64_t *) &y;\\n            i = 0x5fe6eb50c7b537a9 - (i >> 1); // This magic number is taken from wikipedia.\\n            y = *(double *) &i; // initial guess of the inverse square root\\n            y = y * (1.5 - (x2 * y * y)); // Newton for inverse square root.\\n            y = y * (1.5 - (x2 * y * y));\\n            y = y * (1.5 - (x2 * y * y));\\n            y = y * (1.5 - (x2 * y * y)); // repeate 4 times to get enough precision.\\n            return x * y;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3648823,
                "title": "beats-100-c-solutions-using-newton-s-method-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nNewton\\'s method is taught in Calculus. Just use it to solve the problem\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe fomula for Newton\\'s method for finding $\\\\sqrt{a}$ is:\\n$$\\nx_{n+1}=x_n-\\\\frac{f(x_n)}{f\\'(x_n)}\\n$$\\nwhere $f(x)=x^2-a$, $f\\'(x)=2x$ is the first derivative. The sequence $\\\\{ x_n\\\\}$ converges to $\\\\sqrt{a}$.\\n```\\na=2147483647, the values for x_n for n=0,1,2,....\\n2147483647\\n1073741824\\n536870913\\n268435458.5\\n134217733.2\\n67108874.62\\n33554453.31\\n16777258.66\\n8388693.328\\n4194474.663\\n2097493.321\\n1049258.577\\n525652.6224\\n264868.9945\\n136488.3573\\n76111.0901\\n52163.10575\\n46665.86832\\n46342.08115\\n46340.95001\\n46340.95\\n```\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n[Please turn the English subtitles if necessary]\\n[https://www.youtube.com/watch?v=7MmCTAbviyY](https://www.youtube.com/watch?v=7MmCTAbviyY)\\n# Code using Newton\\'s method\\n```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int n) {\\n        if (n==0) return 0;\\n        double x=n ,x0=1;\\n        while (abs(x-x0)>=1){\\n            x0=x;\\n            x=x0-(x0*x0-n)/(2*x0);\\n        }\\n        if (x<=x0) return int(x);\\n        else return int(x0);\\n    }\\n};\\n```\\n```python []\\nclass Solution:\\n    def mySqrt(self, n: int) -> int:\\n        if n==0 : return 0\\n        x, x0=n, 1\\n        while abs(x-x0)>=1:\\n            x0=x \\n            x=x0-(x0*x0-n)/(2*x0)\\n        if x<=x0: return int(x)\\n        else: return int(x0)\\n```\\n# Code using binary search\\n```\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if (x==0) return 0;\\n        int low=1, high=x, mid;\\n        while(high-low>1){\\n            mid=low+(high-low)/2;\\n            if ((long long)mid*mid<=(long long)x)\\n                low=mid;\\n            else\\n                high=mid;\\n        }\\n        return low;       \\n    }\\n};\\n```\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\na=2147483647, the values for x_n for n=0,1,2,....\\n2147483647\\n1073741824\\n536870913\\n268435458.5\\n134217733.2\\n67108874.62\\n33554453.31\\n16777258.66\\n8388693.328\\n4194474.663\\n2097493.321\\n1049258.577\\n525652.6224\\n264868.9945\\n136488.3573\\n76111.0901\\n52163.10575\\n46665.86832\\n46342.08115\\n46340.95001\\n46340.95\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int mySqrt(int n) {\\n        if (n==0) return 0;\\n        double x=n ,x0=1;\\n        while (abs(x-x0)>=1){\\n            x0=x;\\n            x=x0-(x0*x0-n)/(2*x0);\\n        }\\n        if (x<=x0) return int(x);\\n        else return int(x0);\\n    }\\n};\\n```\n```python []\\nclass Solution:\\n    def mySqrt(self, n: int) -> int:\\n        if n==0 : return 0\\n        x, x0=n, 1\\n        while abs(x-x0)>=1:\\n            x0=x \\n            x=x0-(x0*x0-n)/(2*x0)\\n        if x<=x0: return int(x)\\n        else: return int(x0)\\n```\n```\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if (x==0) return 0;\\n        int low=1, high=x, mid;\\n        while(high-low>1){\\n            mid=low+(high-low)/2;\\n            if ((long long)mid*mid<=(long long)x)\\n                low=mid;\\n            else\\n                high=mid;\\n        }\\n        return low;       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3412512,
                "title": "easiest-c-binary-search-100-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- There is a trick in this question that we have to spot first.\\n- We know that the square root of a number cannot be bigger than the number itself so we got out end point.\\n- now we can check if any number which has square `more` or `less` or `equal` to the number itself.\\n- Right ! binary search would be a great approach to proceed.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- So first lets take care of the edge cases, for `0 and 1` we will simply return x itself.\\n- for everything else we can proceed with normal binary search algorithm.\\n- one more thing to remember that `mid*mid` will give you a very large number so instead of proceeding with that use `mid = x/mid` which is nothing but same thing and also dos\\'nt cost you that issue.\\n\\n# Complexity\\n- Time complexity: O(nlog(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n## Upvote! It only takes 1 click :)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if(x==0 || x==1){\\n            return x;\\n        }\\n        int start = 0;\\n        int end = x;\\n        int  mid = start + (end-start)/2;\\n        while(start<=end){\\n            if(mid == x / mid){\\n                return mid;\\n            }\\n            else if(mid > x/mid){\\n                end = mid-1;\\n            }\\n            else{\\n                start = mid+1;\\n            }\\n            mid = start +(end-start)/2;\\n        }\\n        return end;\\n\\n    }\\n};\\n```\\n![Upvote.jpeg](https://assets.leetcode.com/users/images/0094b8d5-a402-48bc-96ee-02c9e86fb6f0_1681384103.2052226.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if(x==0 || x==1){\\n            return x;\\n        }\\n        int start = 0;\\n        int end = x;\\n        int  mid = start + (end-start)/2;\\n        while(start<=end){\\n            if(mid == x / mid){\\n                return mid;\\n            }\\n            else if(mid > x/mid){\\n                end = mid-1;\\n            }\\n            else{\\n                start = mid+1;\\n            }\\n            mid = start +(end-start)/2;\\n        }\\n        return end;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2946417,
                "title": "simple-java-solution-100-faster",
                "content": "\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n       int start=1, end=x,floorRes=0;\\n       while(start<=end){\\n           int mid=start+(end-start)/2;\\n\\n           if(mid<=x/mid){\\n               floorRes=mid;\\n               start=mid+1;\\n           }\\n           else{\\n               end=mid-1;\\n           }\\n       } \\n       return floorRes;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n       int start=1, end=x,floorRes=0;\\n       while(start<=end){\\n           int mid=start+(end-start)/2;\\n\\n           if(mid<=x/mid){\\n               floorRes=mid;\\n               start=mid+1;\\n           }\\n           else{\\n               end=mid-1;\\n           }\\n       } \\n       return floorRes;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2872277,
                "title": "commented-go-solution-w-binary-search-100-runtime",
                "content": "```\\nfunc mySqrt(x int) int {\\n    /*\\n    Define the search space:\\n        Min answer we can get is 0.\\n        Max answer is x + 1 in case x = 0 or x = 1.\\n    */\\n    left, right := 0, x + 1\\n\\n    for left < right {\\n        mid := left + (right - left) / 2\\n\\n        /*\\n        If we overshoot, move the right pointer to the left.\\n        Otherwise, move the left pointer to the right.\\n        */\\n        if mid * mid > x {\\n            right = mid\\n        } else {\\n            left = mid + 1\\n        }\\n    }\\n\\n    /*\\n    At the end of the loop, the left pointer will be placed at ceil(n) such that n^2 = x.\\n\\n    For example, x = 8 (sqrt is 2.82842...) and the left pointer will be at 3. \\n    Return left - 1 = 3 - 1 = 2\\n\\n    So we need to return (left - 1) as we are asked to round the answer down to the neares integer.\\n    */\\n    return left - 1\\n}\\n\\n```",
                "solutionTags": [
                    "Go",
                    "Math",
                    "Binary Search"
                ],
                "code": "```\\nfunc mySqrt(x int) int {\\n    /*\\n    Define the search space:\\n        Min answer we can get is 0.\\n        Max answer is x + 1 in case x = 0 or x = 1.\\n    */\\n    left, right := 0, x + 1\\n\\n    for left < right {\\n        mid := left + (right - left) / 2\\n\\n        /*\\n        If we overshoot, move the right pointer to the left.\\n        Otherwise, move the left pointer to the right.\\n        */\\n        if mid * mid > x {\\n            right = mid\\n        } else {\\n            left = mid + 1\\n        }\\n    }\\n\\n    /*\\n    At the end of the loop, the left pointer will be placed at ceil(n) such that n^2 = x.\\n\\n    For example, x = 8 (sqrt is 2.82842...) and the left pointer will be at 3. \\n    Return left - 1 = 3 - 1 = 2\\n\\n    So we need to return (left - 1) as we are asked to round the answer down to the neares integer.\\n    */\\n    return left - 1\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2812675,
                "title": "use-newton-s-approach",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n\\n        k = x/2 # initial value\\n        \\n        while abs(k*k - x)>=0.1:    \\n            k = k  - (k*k - x)/(2 * k) #update\\n        return int(k)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n\\n        k = x/2 # initial value\\n        \\n        while abs(k*k - x)>=0.1:    \\n            k = k  - (k*k - x)/(2 * k) #update\\n        return int(k)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2765330,
                "title": "c-sqrt",
                "content": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if (x==0) return 0;\\n        int left{1}, right{x}, mid{x/2};\\n        while (left<=right) {\\n            if (mid==0) break;\\n            \\n            if (x/mid < mid) {\\n                right=mid-1;\\n            }\\n            \\n            else if (x/mid > mid) {\\n                if (x/(mid+1) < mid+1) return mid;\\n                else left = mid+1;\\n            }\\n\\n            else return mid;\\n\\n            mid=left + (right-left)/2;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if (x==0) return 0;\\n        int left{1}, right{x}, mid{x/2};\\n        while (left<=right) {\\n            if (mid==0) break;\\n            \\n            if (x/mid < mid) {\\n                right=mid-1;\\n            }\\n            \\n            else if (x/mid > mid) {\\n                if (x/(mid+1) < mid+1) return mid;\\n                else left = mid+1;\\n            }\\n\\n            else return mid;\\n\\n            mid=left + (right-left)/2;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2765137,
                "title": "python",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n\\n        low = 0\\n        high = x//2 + 1\\n        while low < high:\\n            mid = low + (high - low + 1) // 2\\n            if mid * mid > x:\\n                high = mid - 1\\n            else:\\n                low = mid\\n\\n        return low\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n\\n        low = 0\\n        high = x//2 + 1\\n        while low < high:\\n            mid = low + (high - low + 1) // 2\\n            if mid * mid > x:\\n                high = mid - 1\\n            else:\\n                low = mid\\n\\n        return low\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2761949,
                "title": "c-python-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nfind the largest `n` that `n * n <= x`. The largest possible number is `x // 2 + 1`, and smallest is `0`. so use binary search to find `n`.\\n\\nwhy `mid = low + (high - low + 1) // 2`?\\nBecause we update high value with `high = mid - 1`, we need to set mid closer to `high`, or we will have infinite loop if:\\n`mid = low = high + 1`, so `mid = (low + high) //2` and `mid * mid <= x`.\\n\\nwhy `left < right` rather than `left <= right`?\\n`left <= right` will also lead to infinite loop when:\\n`left = right = mid` and `mid * mid <= x`.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(logN)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\nPython:\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n\\n        low = 0\\n        high = x//2 + 1\\n        while low < high:\\n            mid = low + (high - low + 1) // 2\\n            if mid * mid > x:\\n                high = mid - 1\\n            else:\\n                low = mid\\n\\n        return low\\n```\\n\\nC++:\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int low = 0, high = x/2 + 1;\\n        while (low < high) {\\n            long mid = low + (high - low + 1) / 2;\\n            if (mid * mid <= x) {\\n                low = mid;\\n            } else {\\n                high = mid - 1;\\n            }\\n        }\\n        return low;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n\\n        low = 0\\n        high = x//2 + 1\\n        while low < high:\\n            mid = low + (high - low + 1) // 2\\n            if mid * mid > x:\\n                high = mid - 1\\n            else:\\n                low = mid\\n\\n        return low\\n```\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int low = 0, high = x/2 + 1;\\n        while (low < high) {\\n            long mid = low + (high - low + 1) / 2;\\n            if (mid * mid <= x) {\\n                low = mid;\\n            } else {\\n                high = mid - 1;\\n            }\\n        }\\n        return low;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1881328,
                "title": "java-multiple-approach-solutions-0ms-2ms",
                "content": "**Approach 1: Using Build - in Math.sqrt() function and type casting it to int, to get the integer value**\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        return (int)Math.sqrt(x);\\n    }\\n}\\n```\\n\\n**Approach 2: Using Binary Search\\nHere the search space for possible solutions is 1 to x-1**\\n\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x<=1)return x;\\n        int l=1; //low or start value = 1\\n        int h=x-1; //high or end value = x-1\\n        \\n        while(l<=h){\\n            int mid=l+(h-l)/2;\\n           \\n            if(mid==x/mid){\\n                return mid;\\n            }else if(mid<x/mid){\\n                l = mid+1;\\n            }else{\\n                h=mid-1;\\n            }\\n        }\\n        return h;\\n    }\\n}\\n```\\n**Perform a dry run for better understanding !\\nHappy Coding !\\nDo Upvote if it helped !**",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        return (int)Math.sqrt(x);\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x<=1)return x;\\n        int l=1; //low or start value = 1\\n        int h=x-1; //high or end value = x-1\\n        \\n        while(l<=h){\\n            int mid=l+(h-l)/2;\\n           \\n            if(mid==x/mid){\\n                return mid;\\n            }else if(mid<x/mid){\\n                l = mid+1;\\n            }else{\\n                h=mid-1;\\n            }\\n        }\\n        return h;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1799530,
                "title": "best-solution-with-complete-explanation",
                "content": "**Your runtime beats 95.85 % of python3 submissions.\\nYour memory usage beats 98.50 % of python3 submissions.**\\n\\n```\\ndef my_sqrt(x: int) -> int:\\n    \"\"\"\"\"\"\\n    \\n    # Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\\n    # -1) Not Allowed (Using Built-in Exponent Function or Operator): TC = O(log(x)); SC = O(1)\\n\\n    \"\"\"\\n    return int(x ** .5)\\n    \"\"\"\\n    \"\"\"\\n    return int(pow(x, .5))\\n    \"\"\"\\n    \"\"\"\\n    from math import pow\\n    return int(pow(x, .5))\\n    \"\"\"\\n    \"\"\"\\n    from math import sqrt\\n    return int(sqrt(x))\\n    \"\"\"\\n    \"\"\"\\n    from math import isqrt\\n    return isqrt(x)\\n    \"\"\"\\n\\n    # NOTE: Python doesn\\'t bound integer limit, otherwise we would have to use i == x/i instead of i*i == x for\\n    # comparisons, to avoid exceeding integer upper limit.\\n\\n    # 0) Brute Force (Linear Search): TC = O(\\u221Ax); SC = O(1)\\n    # https://en.wikipedia.org/wiki/Integer_square_root#Algorithm_using_linear_search\\n\\n    # 0.1) Intuitive:\\n    \"\"\"\\n    for sqrt in range(0, x+1):  # \\u2235 for a non-negative integer x, range(sqrt(x)) = [0, x]\\n        if (sq := sqrt*sqrt) == x:\\n            return sqrt\\n        if sq > x:  # for non-perfect square x\\n            return sqrt-1\\n    \"\"\"\\n    # 0.2) Bit Faster (due to fewer comparisons):\\n    \"\"\"\\n    sqrt = 0\\n    while sqrt*sqrt < x:\\n        sqrt += 1\\n    return sqrt if (sqrt*sqrt == x) else sqrt-1\\n    \"\"\"\\n\\n    # 1.1) Optimal (Binary Search): TC = O(log2(x)); SC = O(1)\\n    # https://leetcode.com/problems/sqrtx/discuss/25047/A-Binary-Search-Solution/24042\\n    # https://en.wikipedia.org/wiki/Binary_search_algorithm#Procedure\\n    # https://en.wikipedia.org/wiki/Integer_square_root#Algorithm_using_binary_search\\n\\n    lo, hi = 0, x  # \\u2235 for a non-negative integer x, range(sqrt(x)) = [0, x]\\n    while lo <= hi:\\n        mid = (lo + hi) // 2\\n        mid_sq = mid * mid\\n        if mid_sq == x:  # => mid = sqrt(x)\\n            return mid\\n        elif mid_sq < x:  # => mid < sqrt(x)\\n            lo = mid + 1  # compress range\\n        else:  # (if mid_sq > x) => mid > sqrt(x)\\n            hi = mid - 1  # compress range\\n    # If x is not a perfect square, ans. won\\'t be returned above, and `lo` will become > than `hi`, and the loop will\\n    # terminate.\\n    # In these cases answer will be = `lo-1` = `hi`, because the loop terminated because of two possible cases:\\n    # Either:\\n    # `mid_sq < x` (=> mid < sqrt(x)), `lo = mid + 1` executed, and `lo` became > than `hi` => int(sqrt(x)) = lo-1 = hi\\n    # Or:\\n    # `mid_sq > x` (=> mid > sqrt(x)), `hi = mid - 1` executed, and `hi` became < than `lo` => int(sqrt(x)) = hi = lo-1\\n    return lo - 1  # or hi\\n\\n    # 1.2) Optimal (Heron\\'s method, a special case of Newton\\'s method): TC = O(log(x)); SC = O(1)\\n    # -> Harder and Slower than Binary Search\\n    # https://leetcode.com/problems/sqrtx/discuss/25057/3-4-short-lines-Integer-Newton-Every-Language\\n    # https://en.wikipedia.org/wiki/Integer_square_root#Algorithm_using_Newton%27s_method\\n```\\n\\n**For more of such clear codes and explanations, here\\'s my [GitHub repository](https://github.com/samyak1409/DSA). Please upvote this post and star the repository if these helped!**\\n\\n**Thanks! :)**\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef my_sqrt(x: int) -> int:\\n    \"\"\"\"\"\"\\n    \\n    # Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\\n    # -1) Not Allowed (Using Built-in Exponent Function or Operator): TC = O(log(x)); SC = O(1)\\n\\n    \"\"\"\\n    return int(x ** .5)\\n    \"\"\"\\n    \"\"\"\\n    return int(pow(x, .5))\\n    \"\"\"\\n    \"\"\"\\n    from math import pow\\n    return int(pow(x, .5))\\n    \"\"\"\\n    \"\"\"\\n    from math import sqrt\\n    return int(sqrt(x))\\n    \"\"\"\\n    \"\"\"\\n    from math import isqrt\\n    return isqrt(x)\\n    \"\"\"\\n\\n    # NOTE: Python doesn\\'t bound integer limit, otherwise we would have to use i == x/i instead of i*i == x for\\n    # comparisons, to avoid exceeding integer upper limit.\\n\\n    # 0) Brute Force (Linear Search): TC = O(\\u221Ax); SC = O(1)\\n    # https://en.wikipedia.org/wiki/Integer_square_root#Algorithm_using_linear_search\\n\\n    # 0.1) Intuitive:\\n    \"\"\"\\n    for sqrt in range(0, x+1):  # \\u2235 for a non-negative integer x, range(sqrt(x)) = [0, x]\\n        if (sq := sqrt*sqrt) == x:\\n            return sqrt\\n        if sq > x:  # for non-perfect square x\\n            return sqrt-1\\n    \"\"\"\\n    # 0.2) Bit Faster (due to fewer comparisons):\\n    \"\"\"\\n    sqrt = 0\\n    while sqrt*sqrt < x:\\n        sqrt += 1\\n    return sqrt if (sqrt*sqrt == x) else sqrt-1\\n    \"\"\"\\n\\n    # 1.1) Optimal (Binary Search): TC = O(log2(x)); SC = O(1)\\n    # https://leetcode.com/problems/sqrtx/discuss/25047/A-Binary-Search-Solution/24042\\n    # https://en.wikipedia.org/wiki/Binary_search_algorithm#Procedure\\n    # https://en.wikipedia.org/wiki/Integer_square_root#Algorithm_using_binary_search\\n\\n    lo, hi = 0, x  # \\u2235 for a non-negative integer x, range(sqrt(x)) = [0, x]\\n    while lo <= hi:\\n        mid = (lo + hi) // 2\\n        mid_sq = mid * mid\\n        if mid_sq == x:  # => mid = sqrt(x)\\n            return mid\\n        elif mid_sq < x:  # => mid < sqrt(x)\\n            lo = mid + 1  # compress range\\n        else:  # (if mid_sq > x) => mid > sqrt(x)\\n            hi = mid - 1  # compress range\\n    # If x is not a perfect square, ans. won\\'t be returned above, and `lo` will become > than `hi`, and the loop will\\n    # terminate.\\n    # In these cases answer will be = `lo-1` = `hi`, because the loop terminated because of two possible cases:\\n    # Either:\\n    # `mid_sq < x` (=> mid < sqrt(x)), `lo = mid + 1` executed, and `lo` became > than `hi` => int(sqrt(x)) = lo-1 = hi\\n    # Or:\\n    # `mid_sq > x` (=> mid > sqrt(x)), `hi = mid - 1` executed, and `hi` became < than `lo` => int(sqrt(x)) = hi = lo-1\\n    return lo - 1  # or hi\\n\\n    # 1.2) Optimal (Heron\\'s method, a special case of Newton\\'s method): TC = O(log(x)); SC = O(1)\\n    # -> Harder and Slower than Binary Search\\n    # https://leetcode.com/problems/sqrtx/discuss/25057/3-4-short-lines-Integer-Newton-Every-Language\\n    # https://en.wikipedia.org/wiki/Integer_square_root#Algorithm_using_Newton%27s_method\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1482586,
                "title": "o-1-time-square-root-using-new-technique-bit-manipulation",
                "content": "Start checking the set bits of the probable square root from the left\\n\\n```\\n int mySqrt(int x) {\\n        \\n        int res = 0;\\n        \\n        for(int mask = 1<<15 ; mask>0 ; mask = mask>>1)\\n        {\\n            int probable_ans = res | mask;\\n            \\n            if(probable_ans <= x/probable_ans)\\n            {\\n                res = probable_ans;\\n            }\\n        }\\n        \\n        return res;\\n    }",
                "solutionTags": [],
                "code": "Start checking the set bits of the probable square root from the left\\n\\n```\\n int mySqrt(int x) {\\n        \\n        int res = 0;\\n        \\n        for(int mask = 1<<15 ; mask>0 ; mask = mask>>1)\\n        {\\n            int probable_ans = res | mask;\\n            \\n            if(probable_ans <= x/probable_ans)\\n            {\\n                res = probable_ans;\\n            }\\n        }\\n        \\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1438799,
                "title": "c-binarysearch-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int mySqrt(long long x) {\\n        long long low = 0,high = x+1; //Use of long long to avoid integer overflow\\n        while(low<high) {\\n            long long mid = low+(high -low)/2;\\n            if(mid*mid>x) \\n                high = mid ;\\n            else low = mid+1;\\n        }\\n        return low-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(long long x) {\\n        long long low = 0,high = x+1; //Use of long long to avoid integer overflow\\n        while(low<high) {\\n            long long mid = low+(high -low)/2;\\n            if(mid*mid>x) \\n                high = mid ;\\n            else low = mid+1;\\n        }\\n        return low-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1422413,
                "title": "100-faster-java-solution-binary-search",
                "content": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        \\n        if(x==0 || x==1)\\n            return x;\\n        \\n        int start=1;\\n        int end=x/2;\\n        int ans=0;\\n        \\n        \\n        \\n        while(start<=end)\\n        {\\n            int mid=start+(end-start)/2;\\n            \\n            if(mid<=x/mid)          //To escape the INT OVERFLOW\\n                {ans=mid;\\n                start=mid+1;}\\n            else\\n                end=mid-1;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        \\n        if(x==0 || x==1)\\n            return x;\\n        \\n        int start=1;\\n        int end=x/2;\\n        int ans=0;\\n        \\n        \\n        \\n        while(start<=end)\\n        {\\n            int mid=start+(end-start)/2;\\n            \\n            if(mid<=x/mid)          //To escape the INT OVERFLOW\\n                {ans=mid;\\n                start=mid+1;}\\n            else\\n                end=mid-1;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1275704,
                "title": "a-simple-binary-search-solution",
                "content": "We know that the range will always be from 1 to x so we can use binary search to implement it in O(log n ) time.\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x)\\n    {\\n        int low = 0 , high = x , ans = -1 ;\\n        \\n        while (low <= high)\\n        {\\n            long long mid = (low + high)/2;\\n            \\n            long long sq = mid*mid;\\n            \\n            if(sq == x )\\n                return mid;\\n            else if (sq > x)\\n                high = mid -1 ;\\n            else\\n            {\\n                low = mid +1;\\n                ans = mid;\\n            }\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "class Solution {\\npublic:\\n    int mySqrt(int x)\\n    {\\n        int low = 0 , high = x , ans = -1 ;\\n        \\n        while (low <= high)\\n        {\\n            long long mid = (low + high)/2;\\n            \\n            long long sq = mid*mid;\\n            \\n            if(sq == x )\\n                return mid;\\n            else if (sq > x)\\n                high = mid -1 ;\\n            else\\n            {\\n                low = mid +1;\\n                ans = mid;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 402730,
                "title": "sqrt-x-binary-search-solution-with-explanation",
                "content": "Since we are interested in an integer, the decimals of the square root have to be truncated, as stated in the problem statement.\\n\\nThat means the result of sqrt(x) will be the **closest perfect square, a, to the left of x**, including itself (a^2 <= x)\\n*Assuming a^2 <= x*, the closest perfect square to the right of x is (a + 1)^2. \\nThis gives us the tightest integer left and right bounds: **a^2 <= x < (a + 1)^2, which, in turn, gives us a <= sqrt(x) < (a + 1)**\\n\\nSo if we can somehow narrow down to a and a + 1, then we will have obtained our answer.\\n\\nKnowing this, we just need some sorted integer interval which a and a + 1  lie within in order to identify them.\\nFor x > 1, we know that 1 <= truncated sqrt(x) <= truncated (x/2), so we can narrow down our search to this sorted interval.\\n\\nWhat efficient search algorithm do we know for identifying some value in a sorted list? Binary search.\\n\\nInitialize right = (x / 2)\\nIntialize left = 1\\nDefine midpoint (our guess) to be (right + left) / 2.\\nOur goal is to keep, at most, halving our search space until we\\'ve narrowed our search space down to a and a + 1.\\n\\nSo our search will look like: \\nwhile (left <= right)\\n\\tmid = (right + left) / 2\\n\\tif ((long) (mid * mid) > x), then set right = mid - 1. *// Recall a^2 <= x < (a + 1)^2*\\n\\telse, set left = mid + 1.\\nBecause of the loop condition, our final answer \\'a\\' will be assigned to the variable named right.\\n```\\nclass Solution {\\n    \\n    public int mySqrt(int x) {\\n        if (x < 2) return x;\\n        \\n        int right = x / 2;\\n        int left = 1;\\n        while (left <= right) {\\n            int mid = (right + left) / 2;\\n            if ((long)mid*mid > x) {\\n                right = mid - 1;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n        return right;\\n    }\\n    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    \\n    public int mySqrt(int x) {\\n        if (x < 2) return x;\\n        \\n        int right = x / 2;\\n        int left = 1;\\n        while (left <= right) {\\n            int mid = (right + left) / 2;\\n            if ((long)mid*mid > x) {\\n                right = mid - 1;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n        return right;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25103,
                "title": "newton-s-method-uff1ajust-need-4-simple-lines-c",
                "content": "    class Solution {\\n    public:\\n    int mySqrt(int x) {\\n        long long v = x;  \\n\\n        while(v * v > x)\\n            v = (v + (x / v)) >> 1;\\n\\n        return v; \\n    }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n    int mySqrt(int x) {\\n        long long v = x;  \\n\\n        while(v * v > x)\\n            v = (v + (x / v)) >> 1;\\n\\n        return v; \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 25189,
                "title": "newton-s-method-in-c",
                "content": "    class Solution {\\n    public:\\n        int mySqrt(int x) {\\n            int y = 1;\\n            int n = x;\\n            while (n > y) {\\n                n = y +  (n - y) / 2;\\n                y = x / n;\\n            }\\n            return n;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int mySqrt(int x) {\\n            int y = 1;\\n            int n = x;\\n            while (n > y) {\\n                n = y +  (n - y) / 2;\\n                y = x / n;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 25226,
                "title": "my-c-code-accepted-with-5-ms",
                "content": "    //binary search\\n    int mySqrt(int x) {\\n        if(x == 0)\\n        {\\n            return 0;\\n        }\\n        int left = 1, right = x;\\n        int mid = (left + right)/2;\\n        while(true)\\n        {\\n            if(x/mid > mid)\\n            {\\n                if((x/mid - mid) == 1)\\n                {\\n                    return mid;\\n                }\\n                left = mid;\\n                mid = (left + right)/2;\\n            }else if(x/mid < mid)\\n            {\\n                if((mid - x/mid) == 1)\\n                {\\n                    return x/mid;\\n                }\\n                right = mid;\\n                mid = (left + right)/2;\\n            }else\\n            {\\n                return mid;\\n            }\\n        }\\n    }",
                "solutionTags": [],
                "code": "    //binary search\\n    int mySqrt(int x) {\\n        if(x == 0)\\n        {\\n            return 0;\\n        }\\n        int left = 1, right = x;\\n        int mid = (left + right)/2;\\n        while(true)\\n        {\\n            if(x/mid > mid)\\n            {\\n                if((x/mid - mid) == 1)\\n                {\\n                    return mid;\\n                }\\n                left = mid;\\n                mid = (left + right)/2;\\n            }else if(x/mid < mid)\\n            {\\n                if((mid - x/mid) == 1)\\n                {\\n                    return x/mid;\\n                }\\n                right = mid;\\n                mid = (left + right)/2;\\n            }else\\n            {\\n                return mid;\\n            }\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3493096,
                "title": "c-using-binary-search-with-explanation",
                "content": "# Intuition\\nTo find the square root of a non-negative integer x, we can use a binary search approach to narrow down the range of possible square root values.\\n\\n# Approach\\n1. Handle the special case where x is 0 and return 0 since the square root of 0 is 0.\\n2. Initialize the left pointer to 1 and the right pointer to x.\\n3. While the left pointer is less than or equal to the right pointer:\\n     - Calculate the middle pointer using the formula `mid = left + (right - left) / 2`.\\n     - Calculate the square of the middle value and compare it with x:\\n         - If the square is equal to x, return the middle value as the square root.\\n         - If the square is less than x, update the left pointer to `mid + 1` since the square root must be greater than or equal to mid.\\n         - If the square is greater than x, update the right pointer to `mid - 1` since the square root must be less than mid.\\n4. If no exact square root is found, return the value of the right pointer as the floor value of the square root of x.\\n\\n# Complexity\\n- Time complexity: O(log(x))\\n   - The binary search approach reduces the search space by half in each iteration, resulting in logarithmic time complexity.\\n- Space complexity: O(1)\\n   - The algorithm uses a constant amount of extra space to store the pointers and variables, regardless of the input size.\\n\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MySqrt(int x) {\\n        if (x == 0)\\n            return 0;\\n\\n        int left = 1;\\n        int right = x;\\n\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            int sqrt = x / mid;\\n\\n            if (sqrt == mid)\\n                return mid;\\n            else if (sqrt < mid)\\n                right = mid - 1;\\n            else\\n                left = mid + 1;\\n        }\\n\\n        return right;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MySqrt(int x) {\\n        if (x == 0)\\n            return 0;\\n\\n        int left = 1;\\n        int right = x;\\n\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            int sqrt = x / mid;\\n\\n            if (sqrt == mid)\\n                return mid;\\n            else if (sqrt < mid)\\n                right = mid - 1;\\n            else\\n                left = mid + 1;\\n        }\\n\\n        return right;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3348996,
                "title": "c-solution-with-nice-explanation-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHere, we are told to find the rounded off square root of any given number. So the initial intuition would be to find if the given number is a perfect square or not. So, we will accordingly employ binary search search to check that. If x would be a perfect square it would lie somewhere in between 1 to x, so perform binary search accordingly. If it is not then we will use the below approach.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWhile performing our binary search, we will surf throughout 1 to n, if the given number is not at all a perfect square, then we print the current \\'mid\\' as answer only. Because the current mid will be the nearest rounded off square root.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(log N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long int mySqrt(long long int x) {\\n        \\n        long long int low = 0, high = x;\\n\\n        int ans;\\n        while(low<=high){\\n            if(x==0) ans = 0;\\n\\n            long long int mid = low + (high-low)/2;\\n            long long int sq = mid*mid;\\n\\n            if(sq==x) return mid;\\n\\n            else if(sq>x) high = mid-1;\\n\\n            else {\\n                low = mid+1;\\n                ans = mid;\\n            }\\n\\n\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long int mySqrt(long long int x) {\\n        \\n        long long int low = 0, high = x;\\n\\n        int ans;\\n        while(low<=high){\\n            if(x==0) ans = 0;\\n\\n            long long int mid = low + (high-low)/2;\\n            long long int sq = mid*mid;\\n\\n            if(sq==x) return mid;\\n\\n            else if(sq>x) high = mid-1;\\n\\n            else {\\n                low = mid+1;\\n                ans = mid;\\n            }\\n\\n\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3244299,
                "title": "simple-java-solution",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAs per the repeated subtraction method, if a number is a perfect square, then we can determine its square root by:\\n\\nRepeatedly subtracting consecutive odd numbers from it\\nSubtract till the difference is zero(for perfect squares) and greater than 0 for non perfect squares\\nNumber of times we subtract is the required square root\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int sqrt=0;\\n        int i=1;\\n        while(x>0){\\n            x-=i;\\n            if(x<0) break;\\n            i+=2;\\n            sqrt++;\\n        }\\n        return sqrt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int sqrt=0;\\n        int i=1;\\n        while(x>0){\\n            x-=i;\\n            if(x<0) break;\\n            i+=2;\\n            sqrt++;\\n        }\\n        return sqrt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3115414,
                "title": "basic-method-for-finding-square-root",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MySqrt(int x) \\n    {\\n            if(x == 1)\\n            {\\n                return x;\\n            }\\n            for (double i = 0; i <= x ; i++)\\n            {\\n                \\n                if (i * i > x)\\n                {\\n                    return Convert.ToInt32(i-1);\\n                    break;\\n                }\\n            }\\n            return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MySqrt(int x) \\n    {\\n            if(x == 1)\\n            {\\n                return x;\\n            }\\n            for (double i = 0; i <= x ; i++)\\n            {\\n                \\n                if (i * i > x)\\n                {\\n                    return Convert.ToInt32(i-1);\\n                    break;\\n                }\\n            }\\n            return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3073151,
                "title": "very-simple-javascript-2-line-code-without-using-functions-clue-doesn-t-need-to-think-too-much",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n    for(i=0;i<=x+1;i++){\\n        if(i*i>x) return i-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n    for(i=0;i<=x+1;i++){\\n        if(i*i>x) return i-1;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2981409,
                "title": "binary-search-finding-first-true-statement-in-false-true-list-python",
                "content": "# Intuition\\nThis problem can also be seen as finding the **first** `True` element in an array of consecutive `False/True` statements.\\n\\n`mySqrt = 8`\\n\\n```\\n[0*0,1*1,2*2,3*3,4*4,5*5,6*6,7*7,8*8]\\n[ 0 , 1 , 2 , 9 , 16, 25, 36, 49, 64]\\n```\\n\\n`n*n` is greater or equal than `8`?\\n\\n```\\n[ F , F , F , T , T , T , T , T , T]\\n```\\n\\nAs such the **1st** `True` element can be found either linearly $$O(n)$$ or through binary search $$O(logn)$$, the second being the fastest.\\n\\nOn every iteration the range is split in 2 discarting either the left or the right side until there is no more space where to look for.\\n\\n```\\nmySqrt = 8 = [0,1,2,3,4,5,6,7,8]\\nleft right mid mid*mid         nums\\n0      8    4    16     [0,1,2,3,4,5,6,7,8]\\n                         ^       ^       ^\\n0      3    1    1      [0,1,2,3,4,5,6,7,8]\\n                         ^ ^   ^\\n1      3    2    4      [0,1,2,3,4,5,6,7,8]\\n                           ^ ^ ^\\n3      3    3    9      [0,1,2,3,4,5,6,7,8]\\n                               ^\\n```\\n\\nLast value where `mid` didn\\'t pass `8` was `2`, therefore `2` is returned.\\n\\n# Complexity\\n- Time complexity: $$O(logn)$$ binary search\\n\\n- Space complexity: $$O(1)$$ left / right / mid variables. \\n\\n# Code\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left, right, root = 0, x, -1\\n        while left <= right:\\n            mid = (right + left) // 2\\n            if mid * mid == x:\\n                return mid\\n            elif mid * mid < x:\\n                root = mid\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return root \\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Binary Search"
                ],
                "code": "```\\n[0*0,1*1,2*2,3*3,4*4,5*5,6*6,7*7,8*8]\\n[ 0 , 1 , 2 , 9 , 16, 25, 36, 49, 64]\\n```\n```\\n[ F , F , F , T , T , T , T , T , T]\\n```\n```\\nmySqrt = 8 = [0,1,2,3,4,5,6,7,8]\\nleft right mid mid*mid         nums\\n0      8    4    16     [0,1,2,3,4,5,6,7,8]\\n                         ^       ^       ^\\n0      3    1    1      [0,1,2,3,4,5,6,7,8]\\n                         ^ ^   ^\\n1      3    2    4      [0,1,2,3,4,5,6,7,8]\\n                           ^ ^ ^\\n3      3    3    9      [0,1,2,3,4,5,6,7,8]\\n                               ^\\n```\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left, right, root = 0, x, -1\\n        while left <= right:\\n            mid = (right + left) // 2\\n            if mid * mid == x:\\n                return mid\\n            elif mid * mid < x:\\n                root = mid\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return root \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2401150,
                "title": "python-solution",
                "content": "Runtime: 2470 ms, faster than 12.52% of Python online submissions for Sqrt(x).\\nMemory Usage: 13.5 MB, less than 36.55% of Python online submissions for Sqrt(x).\\n```\\nclass Solution(object):\\n    def mySqrt(self, x):\\n        sr =1\\n        while True:\\n            if x < sr*sr:\\n                return sr-1\\n            else:\\n                sr +=1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def mySqrt(self, x):\\n        sr =1\\n        while True:\\n            if x < sr*sr:\\n                return sr-1\\n            else:\\n                sr +=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1803436,
                "title": "c-binary-search-approach",
                "content": "Kindly **upvote** if you find it helpful **: )**\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long long int ans = -1;\\n        int s = 0;\\n        int e = x;\\n        long long int m = s + (e-s)/2;\\n        while(s<=e){\\n            if(m*m == x){\\n                return m;\\n            }else if(m*m < x){\\n                ans = m;\\n                s = m+1;\\n            }else if(m*m > x){\\n                e = m-1;\\n            }\\n            \\n            m = s + (e-s)/2;\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```\\nLet me know, if you have different approach...",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long long int ans = -1;\\n        int s = 0;\\n        int e = x;\\n        long long int m = s + (e-s)/2;\\n        while(s<=e){\\n            if(m*m == x){\\n                return m;\\n            }else if(m*m < x){\\n                ans = m;\\n                s = m+1;\\n            }else if(m*m > x){\\n                e = m-1;\\n            }\\n            \\n            m = s + (e-s)/2;\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1779982,
                "title": "a-binary-search-solution-c-code",
                "content": "Here\\'s my code below with **binary search** approach to it.\\nUpvote if you find it useful\\n```\\nint mySqrt(int x) {\\n        long left = 0, right = x, mid = (left + right)/2;\\n        while(left<=right){\\n            long ans = mid * mid;\\n            if(ans == x)\\n                return mid;\\n            if(ans<x){\\n                left = mid + 1;\\n                mid = (left + right)/2; \\n            }\\n            else{\\n                right = mid -1;\\n                mid = (left + right)/2;\\n            }\\n        }\\n        return mid;\\n    }\\n```\\nplease do let me know for any improvements to my code writing style.",
                "solutionTags": [],
                "code": "```\\nint mySqrt(int x) {\\n        long left = 0, right = x, mid = (left + right)/2;\\n        while(left<=right){\\n            long ans = mid * mid;\\n            if(ans == x)\\n                return mid;\\n            if(ans<x){\\n                left = mid + 1;\\n                mid = (left + right)/2; \\n            }\\n            else{\\n                right = mid -1;\\n                mid = (left + right)/2;\\n            }\\n        }\\n        return mid;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 778537,
                "title": "javascript-simple-binary-search-98-faster",
                "content": "```\\nvar mySqrt = function (x) {\\n  let left = 0;\\n  let right = Math.ceil(x / 2);\\n  let mid = 0;\\n\\n  while (left <= right) {\\n    mid = Math.floor((left + right) / 2);\\n\\n    if (mid * mid < x) left = mid + 1;\\n    else if (mid * mid > x) right = mid - 1;\\n    else return mid;\\n  }\\n\\n  return right;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Binary Tree"
                ],
                "code": "```\\nvar mySqrt = function (x) {\\n  let left = 0;\\n  let right = Math.ceil(x / 2);\\n  let mid = 0;\\n\\n  while (left <= right) {\\n    mid = Math.floor((left + right) / 2);\\n\\n    if (mid * mid < x) left = mid + 1;\\n    else if (mid * mid > x) right = mid - 1;\\n    else return mid;\\n  }\\n\\n  return right;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 561164,
                "title": "my-python-binary-search-algorithm",
                "content": "Explanation: \\n\\n**Brute Force approach**:\\nAs a brute force approach we can compute check each number in the range of 1 to x to search the largest number k (0 < k <= x) such that `k * k < x` and return it as the desired solution. The time complexity for this approach will be `O(k)`. For a 32-bit integeer this algorithm may take over a billion iterations.\\n\\n**Binarry Search/Divide and conquer Approach**:\\nLooking more carefully the following oservations can be made:\\n1. All the numbers 1 .. x are sorted (which should strike that binary search can be used)\\n2. If a random number k `(0 < k <= x)` (middlie element in this algorithm) is chosen it can fall in any one of the following cases: \\n\\t1.  `k * k > x` in which case we can just ignore all the numbers to the right of k and we can strictly limit the search space to the left of k i.e. between 0 (or left bound) and k -1. \\n\\t2.  Similarly if `k * k <= x` then it could be the desired answer we are after or much less than the desired answer in any case we still need to search to the right of k i.e a much bigger number whose square is less than x could be found in the range of k + 1 and x (or right boundary) so we jsut simply remember k in `res` and keep searching on the right half until we reach a k such that `k * k > x`. At this point the last recorded answer in res is the desired solution. (This is exactly how bisect_left of python is implemented). \\n3.  This algorithm has `O(log x)` complexity in the worst case as we are exponentially reducing the search space by half in every iteration by selecting the random k as the middle element.\\n\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left, right = 0, x\\n        res = 0\\n        while left <= right:\\n            mid = (right + left) // 2\\n            if mid * mid <= x:\\n                res = mid\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left, right = 0, x\\n        res = 0\\n        while left <= right:\\n            mid = (right + left) // 2\\n            if mid * mid <= x:\\n                res = mid\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 393944,
                "title": "golang-integer-newton",
                "content": "```\\nfunc mySqrt(x int) int {\\n\\tr := x\\n\\tfor r*r > x {\\n\\t\\tr = (r + x/r) / 2\\n\\t}\\n\\treturn r\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc mySqrt(x int) int {\\n\\tr := x\\n\\tfor r*r > x {\\n\\t\\tr = (r + x/r) / 2\\n\\t}\\n\\treturn r\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 313887,
                "title": "swift-web-solutionz-web-solutions-prime-torrentz-code-haxxxx0rz",
                "content": "```\\nclass Solution {\\n    func mySqrt(_ x: Int) -> Int {\\n        var res = x\\n        while res * res > x {\\n            res = (res + x / res) / 2\\n        }\\n        return res\\n    }\\n}\\n```\\n\\nKaboom.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func mySqrt(_ x: Int) -> Int {\\n        var res = x\\n        while res * res > x {\\n            res = (res + x / res) / 2\\n        }\\n        return res\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 166409,
                "title": "javascript-74-23",
                "content": "Honestly I was expecting better. I guess the cost is object instantiation?\\n\\n** Should be up to 5k but forum limit\\n\\n```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\n\\nconst preCalc = {\\n  \"0\": 0,\\n  \"1\": 1,\\n  \"2\": 1,\\n  \"3\": 1,\\n  \"4\": 2,\\n  \"5\": 2,\\n  \"6\": 2,\\n  \"7\": 2,\\n  \"8\": 2,\\n  \"9\": 3,\\n  \"10\": 3,\\n  \"11\": 3,\\n  \"12\": 3,\\n  \"13\": 3,\\n  \"14\": 3,\\n  \"15\": 3,\\n  \"16\": 4,\\n  \"17\": 4,\\n  \"18\": 4,\\n  \"19\": 4,\\n  \"20\": 4,\\n  \"21\": 4,\\n  \"22\": 4,\\n  \"23\": 4,\\n  \"24\": 4,\\n  \"25\": 5,\\n  \"26\": 5,\\n  \"27\": 5,\\n  \"28\": 5,\\n  \"29\": 5,\\n  \"30\": 5,\\n  \"31\": 5,\\n  \"32\": 5,\\n  \"33\": 5,\\n  \"34\": 5,\\n  \"35\": 5,\\n  \"36\": 6,\\n  \"37\": 6,\\n  \"38\": 6,\\n  \"39\": 6,\\n  \"40\": 6,\\n  \"41\": 6,\\n  \"42\": 6,\\n  \"43\": 6,\\n  \"44\": 6,\\n  \"45\": 6,\\n  \"46\": 6,\\n  \"47\": 6,\\n  \"48\": 6,\\n  \"49\": 7,\\n  \"50\": 7,\\n  \"51\": 7,\\n  \"52\": 7,\\n  \"53\": 7,\\n  \"54\": 7,\\n  \"55\": 7,\\n  \"56\": 7,\\n  \"57\": 7,\\n  \"58\": 7,\\n  \"59\": 7,\\n  \"60\": 7,\\n  \"61\": 7,\\n  \"62\": 7,\\n  \"63\": 7,\\n  \"64\": 8,\\n  \"65\": 8,\\n  \"66\": 8,\\n  \"67\": 8,\\n  \"68\": 8,\\n  \"69\": 8,\\n  \"70\": 8,\\n  \"71\": 8,\\n  \"72\": 8,\\n  \"73\": 8,\\n  \"74\": 8,\\n  \"75\": 8,\\n  \"76\": 8,\\n  \"77\": 8,\\n  \"78\": 8,\\n  \"79\": 8,\\n  \"80\": 8,\\n  \"81\": 9,\\n  \"82\": 9,\\n  \"83\": 9,\\n  \"84\": 9,\\n  \"85\": 9,\\n  \"86\": 9,\\n  \"87\": 9,\\n  \"88\": 9,\\n  \"89\": 9,\\n  \"90\": 9,\\n  \"91\": 9,\\n  \"92\": 9,\\n  \"93\": 9,\\n  \"94\": 9,\\n  \"95\": 9,\\n  \"96\": 9,\\n  \"97\": 9,\\n  \"98\": 9,\\n  \"99\": 9,\\n  \"100\": 10,\\n  \"101\": 10,\\n  \"102\": 10,\\n  \"103\": 10,\\n  \"104\": 10,\\n  \"105\": 10,\\n  \"106\": 10,\\n  \"107\": 10,\\n  \"108\": 10,\\n  \"109\": 10,\\n  \"110\": 10,\\n  \"111\": 10,\\n  \"112\": 10,\\n  \"113\": 10,\\n  \"114\": 10,\\n  \"115\": 10,\\n  \"116\": 10,\\n  \"117\": 10,\\n  \"118\": 10,\\n  \"119\": 10,\\n  \"120\": 10,\\n  \"121\": 11,\\n  \"122\": 11,\\n  \"123\": 11,\\n  \"124\": 11,\\n  \"125\": 11,\\n  \"126\": 11,\\n  \"127\": 11,\\n  \"128\": 11,\\n  \"129\": 11,\\n  \"130\": 11,\\n  \"131\": 11,\\n  \"132\": 11,\\n  \"133\": 11,\\n  \"134\": 11,\\n  \"135\": 11,\\n  \"136\": 11,\\n  \"137\": 11,\\n  \"138\": 11,\\n  \"139\": 11,\\n  \"140\": 11,\\n  \"141\": 11,\\n  \"142\": 11,\\n  \"143\": 11,\\n  \"144\": 12,\\n  \"145\": 12,\\n  \"146\": 12,\\n  \"147\": 12,\\n  \"148\": 12,\\n  \"149\": 12,\\n  \"150\": 12,\\n  \"151\": 12,\\n  \"152\": 12,\\n  \"153\": 12,\\n  \"154\": 12,\\n  \"155\": 12,\\n  \"156\": 12,\\n  \"157\": 12,\\n  \"158\": 12,\\n  \"159\": 12,\\n  \"160\": 12,\\n  \"161\": 12,\\n  \"162\": 12,\\n  \"163\": 12,\\n  \"164\": 12,\\n  \"165\": 12,\\n  \"166\": 12,\\n  \"167\": 12,\\n  \"168\": 12,\\n  \"169\": 13,\\n  \"170\": 13,\\n  \"171\": 13,\\n  \"172\": 13,\\n  \"173\": 13,\\n  \"174\": 13,\\n  \"175\": 13,\\n  \"176\": 13,\\n  \"177\": 13,\\n  \"178\": 13,\\n  \"179\": 13,\\n  \"180\": 13,\\n  \"181\": 13,\\n  \"182\": 13,\\n  \"183\": 13,\\n  \"184\": 13,\\n  \"185\": 13,\\n  \"186\": 13,\\n  \"187\": 13,\\n  \"188\": 13,\\n  \"189\": 13,\\n  \"190\": 13,\\n  \"191\": 13,\\n  \"192\": 13,\\n  \"193\": 13,\\n  \"194\": 13,\\n  \"195\": 13,\\n  \"196\": 14,\\n  \"197\": 14,\\n  \"198\": 14,\\n  \"199\": 14,\\n  \"200\": 14,\\n  \"201\": 14,\\n  \"202\": 14,\\n  \"203\": 14,\\n  \"204\": 14,\\n  \"205\": 14,\\n  \"206\": 14,\\n  \"207\": 14,\\n  \"208\": 14,\\n  \"209\": 14,\\n  \"210\": 14,\\n  \"211\": 14,\\n  \"212\": 14,\\n  \"213\": 14,\\n  \"214\": 14,\\n  \"215\": 14,\\n  \"216\": 14,\\n  \"217\": 14,\\n  \"218\": 14,\\n  \"219\": 14,\\n  \"220\": 14,\\n  \"221\": 14,\\n  \"222\": 14,\\n  \"223\": 14,\\n  \"224\": 14,\\n  \"225\": 15,\\n  \"226\": 15,\\n  \"227\": 15,\\n  \"228\": 15,\\n  \"229\": 15,\\n  \"230\": 15,\\n  \"231\": 15,\\n  \"232\": 15,\\n  \"233\": 15,\\n  \"234\": 15,\\n  \"235\": 15,\\n  \"236\": 15,\\n  \"237\": 15,\\n  \"238\": 15,\\n  \"239\": 15,\\n  \"240\": 15,\\n  \"241\": 15,\\n  \"242\": 15,\\n  \"243\": 15,\\n  \"244\": 15,\\n  \"245\": 15,\\n  \"246\": 15,\\n  \"247\": 15,\\n  \"248\": 15,\\n  \"249\": 15,\\n  \"250\": 15,\\n  \"251\": 15,\\n  \"252\": 15,\\n  \"253\": 15,\\n  \"254\": 15,\\n  \"255\": 15,\\n  \"256\": 16,\\n  \"257\": 16,\\n  \"258\": 16,\\n  \"259\": 16,\\n  \"260\": 16,\\n  \"261\": 16,\\n  \"262\": 16,\\n  \"263\": 16,\\n  \"264\": 16,\\n  \"265\": 16,\\n  \"266\": 16,\\n  \"267\": 16,\\n  \"268\": 16,\\n  \"269\": 16,\\n  \"270\": 16,\\n  \"271\": 16,\\n  \"272\": 16,\\n  \"273\": 16,\\n  \"274\": 16,\\n  \"275\": 16,\\n  \"276\": 16,\\n  \"277\": 16,\\n  \"278\": 16,\\n  \"279\": 16,\\n  \"280\": 16,\\n  \"281\": 16,\\n  \"282\": 16,\\n  \"283\": 16,\\n  \"284\": 16,\\n  \"285\": 16,\\n  \"286\": 16,\\n  \"287\": 16,\\n  \"288\": 16,\\n  \"289\": 17,\\n  \"290\": 17,\\n  \"291\": 17,\\n  \"292\": 17,\\n  \"293\": 17,\\n  \"294\": 17,\\n  \"295\": 17,\\n  \"296\": 17,\\n  \"297\": 17,\\n  \"298\": 17,\\n  \"299\": 17,\\n  \"300\": 17,\\n  \"301\": 17,\\n  \"302\": 17,\\n  \"303\": 17,\\n  \"304\": 17,\\n  \"305\": 17,\\n  \"306\": 17,\\n  \"307\": 17,\\n  \"308\": 17,\\n  \"309\": 17,\\n  \"310\": 17,\\n  \"311\": 17,\\n  \"312\": 17,\\n  \"313\": 17,\\n  \"314\": 17,\\n  \"315\": 17,\\n  \"316\": 17,\\n  \"317\": 17,\\n  \"318\": 17,\\n  \"319\": 17,\\n  \"320\": 17,\\n  \"321\": 17,\\n  \"322\": 17,\\n  \"323\": 17,\\n  \"324\": 18,\\n  \"325\": 18,\\n  \"326\": 18,\\n  \"327\": 18,\\n  \"328\": 18,\\n  \"329\": 18,\\n  \"330\": 18,\\n  \"331\": 18,\\n  \"332\": 18,\\n  \"333\": 18,\\n  \"334\": 18,\\n  \"335\": 18,\\n  \"336\": 18,\\n  \"337\": 18,\\n  \"338\": 18,\\n  \"339\": 18,\\n  \"340\": 18,\\n  \"341\": 18,\\n  \"342\": 18,\\n  \"343\": 18,\\n  \"344\": 18,\\n  \"345\": 18,\\n  \"346\": 18,\\n  \"347\": 18,\\n  \"348\": 18,\\n  \"349\": 18,\\n  \"350\": 18,\\n  \"351\": 18,\\n  \"352\": 18,\\n  \"353\": 18,\\n  \"354\": 18,\\n  \"355\": 18,\\n  \"356\": 18,\\n  \"357\": 18,\\n  \"358\": 18,\\n  \"359\": 18,\\n  \"360\": 18,\\n  \"361\": 19,\\n  \"362\": 19,\\n  \"363\": 19,\\n  \"364\": 19,\\n  \"365\": 19,\\n  \"366\": 19,\\n  \"367\": 19,\\n  \"368\": 19,\\n  \"369\": 19,\\n  \"370\": 19,\\n  \"371\": 19,\\n  \"372\": 19,\\n  \"373\": 19,\\n  \"374\": 19,\\n  \"375\": 19,\\n  \"376\": 19,\\n  \"377\": 19,\\n  \"378\": 19,\\n  \"379\": 19,\\n  \"380\": 19,\\n  \"381\": 19,\\n  \"382\": 19,\\n  \"383\": 19,\\n  \"384\": 19,\\n  \"385\": 19,\\n  \"386\": 19,\\n  \"387\": 19,\\n  \"388\": 19,\\n  \"389\": 19,\\n  \"390\": 19,\\n  \"391\": 19,\\n  \"392\": 19,\\n  \"393\": 19,\\n  \"394\": 19,\\n  \"395\": 19,\\n  \"396\": 19,\\n  \"397\": 19,\\n  \"398\": 19,\\n  \"399\": 19,\\n  \"400\": 20,\\n  \"401\": 20,\\n  \"402\": 20,\\n  \"403\": 20,\\n  \"404\": 20,\\n  \"405\": 20,\\n  \"406\": 20,\\n  \"407\": 20,\\n  \"408\": 20,\\n  \"409\": 20,\\n  \"410\": 20,\\n  \"411\": 20,\\n  \"412\": 20,\\n  \"413\": 20,\\n  \"414\": 20,\\n  \"415\": 20,\\n  \"416\": 20,\\n  \"417\": 20,\\n  \"418\": 20,\\n  \"419\": 20,\\n  \"420\": 20,\\n  \"421\": 20,\\n  \"422\": 20,\\n  \"423\": 20,\\n  \"424\": 20,\\n  \"425\": 20,\\n  \"426\": 20,\\n  \"427\": 20,\\n  \"428\": 20,\\n  \"429\": 20,\\n  \"430\": 20,\\n  \"431\": 20,\\n  \"432\": 20,\\n  \"433\": 20,\\n  \"434\": 20,\\n  \"435\": 20,\\n  \"436\": 20,\\n  \"437\": 20,\\n  \"438\": 20,\\n  \"439\": 20,\\n  \"440\": 20,\\n  \"441\": 21,\\n  \"442\": 21,\\n  \"443\": 21,\\n  \"444\": 21,\\n  \"445\": 21,\\n  \"446\": 21,\\n  \"447\": 21,\\n  \"448\": 21,\\n  \"449\": 21,\\n  \"450\": 21,\\n  \"451\": 21,\\n  \"452\": 21,\\n  \"453\": 21,\\n  \"454\": 21,\\n  \"455\": 21,\\n  \"456\": 21,\\n  \"457\": 21,\\n  \"458\": 21,\\n  \"459\": 21,\\n  \"460\": 21,\\n  \"461\": 21,\\n  \"462\": 21,\\n  \"463\": 21,\\n  \"464\": 21,\\n  \"465\": 21,\\n  \"466\": 21,\\n  \"467\": 21,\\n  \"468\": 21,\\n  \"469\": 21,\\n  \"470\": 21,\\n  \"471\": 21,\\n  \"472\": 21,\\n  \"473\": 21,\\n  \"474\": 21,\\n  \"475\": 21,\\n  \"476\": 21,\\n  \"477\": 21,\\n  \"478\": 21,\\n  \"479\": 21,\\n  \"480\": 21,\\n  \"481\": 21,\\n  \"482\": 21,\\n  \"483\": 21,\\n  \"484\": 22,\\n  \"485\": 22,\\n  \"486\": 22,\\n  \"487\": 22,\\n  \"488\": 22,\\n  \"489\": 22,\\n  \"490\": 22,\\n  \"491\": 22,\\n  \"492\": 22,\\n  \"493\": 22,\\n  \"494\": 22,\\n  \"495\": 22,\\n  \"496\": 22,\\n  \"497\": 22,\\n  \"498\": 22,\\n  \"499\": 22,\\n  \"500\": 22,\\n  \"501\": 22,\\n  \"502\": 22,\\n  \"503\": 22,\\n  \"504\": 22,\\n  \"505\": 22,\\n  \"506\": 22,\\n  \"507\": 22,\\n  \"508\": 22,\\n  \"509\": 22,\\n  \"510\": 22,\\n  \"511\": 22,\\n  \"512\": 22,\\n  \"513\": 22,\\n  \"514\": 22,\\n  \"515\": 22,\\n  \"516\": 22,\\n  \"517\": 22,\\n  \"518\": 22,\\n  \"519\": 22,\\n  \"520\": 22,\\n  \"521\": 22,\\n  \"522\": 22,\\n  \"523\": 22,\\n  \"524\": 22,\\n  \"525\": 22,\\n  \"526\": 22,\\n  \"527\": 22,\\n  \"528\": 22,\\n  \"529\": 23,\\n  \"530\": 23,\\n  \"531\": 23,\\n  \"532\": 23,\\n  \"533\": 23,\\n  \"534\": 23,\\n  \"535\": 23,\\n  \"536\": 23,\\n  \"537\": 23,\\n  \"538\": 23,\\n  \"539\": 23,\\n  \"540\": 23,\\n  \"541\": 23,\\n  \"542\": 23,\\n  \"543\": 23,\\n  \"544\": 23,\\n  \"545\": 23,\\n  \"546\": 23,\\n  \"547\": 23,\\n  \"548\": 23,\\n  \"549\": 23,\\n  \"550\": 23,\\n  \"551\": 23,\\n  \"552\": 23,\\n  \"553\": 23,\\n  \"554\": 23,\\n  \"555\": 23,\\n  \"556\": 23,\\n  \"557\": 23,\\n  \"558\": 23,\\n  \"559\": 23,\\n  \"560\": 23,\\n  \"561\": 23,\\n  \"562\": 23,\\n  \"563\": 23,\\n  \"564\": 23,\\n  \"565\": 23,\\n  \"566\": 23,\\n  \"567\": 23,\\n  \"568\": 23,\\n  \"569\": 23,\\n  \"570\": 23,\\n  \"571\": 23,\\n  \"572\": 23,\\n  \"573\": 23,\\n  \"574\": 23,\\n  \"575\": 23,\\n  \"576\": 24,\\n  \"577\": 24,\\n  \"578\": 24,\\n  \"579\": 24,\\n  \"580\": 24,\\n  \"581\": 24,\\n  \"582\": 24,\\n  \"583\": 24,\\n  \"584\": 24,\\n  \"585\": 24,\\n  \"586\": 24,\\n  \"587\": 24,\\n  \"588\": 24,\\n  \"589\": 24,\\n  \"590\": 24,\\n  \"591\": 24,\\n  \"592\": 24,\\n  \"593\": 24,\\n  \"594\": 24,\\n  \"595\": 24,\\n  \"596\": 24,\\n  \"597\": 24,\\n  \"598\": 24,\\n  \"599\": 24,\\n  \"600\": 24,\\n  \"601\": 24,\\n  \"602\": 24,\\n  \"603\": 24,\\n  \"604\": 24,\\n  \"605\": 24,\\n  \"606\": 24,\\n  \"607\": 24,\\n  \"608\": 24,\\n  \"609\": 24,\\n  \"610\": 24,\\n  \"611\": 24,\\n  \"612\": 24,\\n  \"613\": 24,\\n  \"614\": 24,\\n  \"615\": 24,\\n  \"616\": 24,\\n  \"617\": 24,\\n  \"618\": 24,\\n  \"619\": 24,\\n  \"620\": 24,\\n  \"621\": 24,\\n  \"622\": 24,\\n  \"623\": 24,\\n  \"624\": 24,\\n  \"625\": 25,\\n  \"626\": 25,\\n  \"627\": 25,\\n  \"628\": 25,\\n  \"629\": 25,\\n  \"630\": 25,\\n  \"631\": 25,\\n  \"632\": 25,\\n  \"633\": 25,\\n  \"634\": 25,\\n  \"635\": 25,\\n  \"636\": 25,\\n  \"637\": 25,\\n  \"638\": 25,\\n  \"639\": 25,\\n  \"640\": 25,\\n  \"641\": 25,\\n  \"642\": 25,\\n  \"643\": 25,\\n  \"644\": 25,\\n  \"645\": 25,\\n  \"646\": 25,\\n  \"647\": 25,\\n  \"648\": 25,\\n  \"649\": 25,\\n  \"650\": 25,\\n  \"651\": 25,\\n  \"652\": 25,\\n  \"653\": 25,\\n  \"654\": 25,\\n  \"655\": 25,\\n  \"656\": 25,\\n  \"657\": 25,\\n  \"658\": 25,\\n  \"659\": 25,\\n  \"660\": 25,\\n  \"661\": 25,\\n  \"662\": 25,\\n  \"663\": 25,\\n  \"664\": 25,\\n  \"665\": 25,\\n  \"666\": 25,\\n  \"667\": 25,\\n  \"668\": 25,\\n  \"669\": 25,\\n  \"670\": 25,\\n  \"671\": 25,\\n  \"672\": 25,\\n  \"673\": 25,\\n  \"674\": 25,\\n  \"675\": 25,\\n  \"676\": 26,\\n  \"677\": 26,\\n  \"678\": 26,\\n  \"679\": 26,\\n  \"680\": 26,\\n  \"681\": 26,\\n  \"682\": 26,\\n  \"683\": 26,\\n  \"684\": 26,\\n  \"685\": 26,\\n  \"686\": 26,\\n  \"687\": 26,\\n  \"688\": 26,\\n  \"689\": 26,\\n  \"690\": 26,\\n  \"691\": 26,\\n  \"692\": 26,\\n  \"693\": 26,\\n  \"694\": 26,\\n  \"695\": 26,\\n  \"696\": 26,\\n  \"697\": 26,\\n  \"698\": 26,\\n  \"699\": 26,\\n  \"700\": 26,\\n  \"701\": 26,\\n  \"702\": 26,\\n  \"703\": 26,\\n  \"704\": 26,\\n  \"705\": 26,\\n  \"706\": 26,\\n  \"707\": 26,\\n  \"708\": 26,\\n  \"709\": 26,\\n  \"710\": 26,\\n  \"711\": 26,\\n  \"712\": 26,\\n  \"713\": 26,\\n  \"714\": 26,\\n  \"715\": 26,\\n  \"716\": 26,\\n  \"717\": 26,\\n  \"718\": 26,\\n  \"719\": 26,\\n  \"720\": 26,\\n  \"721\": 26,\\n  \"722\": 26,\\n  \"723\": 26,\\n  \"724\": 26,\\n  \"725\": 26,\\n  \"726\": 26,\\n  \"727\": 26,\\n  \"728\": 26,\\n  \"729\": 27,\\n  \"730\": 27,\\n  \"731\": 27,\\n  \"732\": 27,\\n  \"733\": 27,\\n  \"734\": 27,\\n  \"735\": 27,\\n  \"736\": 27,\\n  \"737\": 27,\\n  \"738\": 27,\\n  \"739\": 27,\\n  \"740\": 27,\\n  \"741\": 27,\\n  \"742\": 27,\\n  \"743\": 27,\\n  \"744\": 27,\\n  \"745\": 27,\\n  \"746\": 27,\\n  \"747\": 27,\\n  \"748\": 27,\\n  \"749\": 27,\\n  \"750\": 27,\\n  \"751\": 27,\\n  \"752\": 27,\\n  \"753\": 27,\\n  \"754\": 27,\\n  \"755\": 27,\\n  \"756\": 27,\\n  \"757\": 27,\\n  \"758\": 27,\\n  \"759\": 27,\\n  \"760\": 27,\\n  \"761\": 27,\\n  \"762\": 27,\\n  \"763\": 27,\\n  \"764\": 27,\\n  \"765\": 27,\\n  \"766\": 27,\\n  \"767\": 27,\\n  \"768\": 27,\\n  \"769\": 27,\\n  \"770\": 27,\\n  \"771\": 27,\\n  \"772\": 27,\\n  \"773\": 27,\\n  \"774\": 27,\\n  \"775\": 27,\\n  \"776\": 27,\\n  \"777\": 27,\\n  \"778\": 27,\\n  \"779\": 27,\\n  \"780\": 27,\\n  \"781\": 27,\\n  \"782\": 27,\\n  \"783\": 27,\\n  \"784\": 28,\\n  \"785\": 28,\\n  \"786\": 28,\\n  \"787\": 28,\\n  \"788\": 28,\\n  \"789\": 28,\\n  \"790\": 28,\\n  \"791\": 28,\\n  \"792\": 28,\\n  \"793\": 28,\\n  \"794\": 28,\\n  \"795\": 28,\\n  \"796\": 28,\\n  \"797\": 28,\\n  \"798\": 28,\\n  \"799\": 28,\\n  \"800\": 28,\\n  \"801\": 28,\\n  \"802\": 28,\\n  \"803\": 28,\\n  \"804\": 28,\\n  \"805\": 28,\\n  \"806\": 28,\\n  \"807\": 28,\\n  \"808\": 28,\\n  \"809\": 28,\\n  \"810\": 28,\\n  \"811\": 28,\\n  \"812\": 28,\\n  \"813\": 28,\\n  \"814\": 28,\\n  \"815\": 28,\\n  \"816\": 28,\\n  \"817\": 28,\\n  \"818\": 28,\\n  \"819\": 28,\\n  \"820\": 28,\\n  \"821\": 28,\\n  \"822\": 28,\\n  \"823\": 28,\\n  \"824\": 28,\\n  \"825\": 28,\\n  \"826\": 28,\\n  \"827\": 28,\\n  \"828\": 28,\\n  \"829\": 28,\\n  \"830\": 28,\\n  \"831\": 28,\\n  \"832\": 28,\\n  \"833\": 28,\\n  \"834\": 28,\\n  \"835\": 28,\\n  \"836\": 28,\\n  \"837\": 28,\\n  \"838\": 28,\\n  \"839\": 28,\\n  \"840\": 28,\\n  \"841\": 29,\\n  \"842\": 29,\\n  \"843\": 29,\\n  \"844\": 29,\\n  \"845\": 29,\\n  \"846\": 29,\\n  \"847\": 29,\\n  \"848\": 29,\\n  \"849\": 29,\\n  \"850\": 29,\\n  \"851\": 29,\\n  \"852\": 29,\\n  \"853\": 29,\\n  \"854\": 29,\\n  \"855\": 29,\\n  \"856\": 29,\\n  \"857\": 29,\\n  \"858\": 29,\\n  \"859\": 29,\\n  \"860\": 29,\\n  \"861\": 29,\\n  \"862\": 29,\\n  \"863\": 29,\\n  \"864\": 29,\\n  \"865\": 29,\\n  \"866\": 29,\\n  \"867\": 29,\\n  \"868\": 29,\\n  \"869\": 29,\\n  \"870\": 29,\\n  \"871\": 29,\\n  \"872\": 29,\\n  \"873\": 29,\\n  \"874\": 29,\\n  \"875\": 29,\\n  \"876\": 29,\\n  \"877\": 29,\\n  \"878\": 29,\\n  \"879\": 29,\\n  \"880\": 29,\\n  \"881\": 29,\\n  \"882\": 29,\\n  \"883\": 29,\\n  \"884\": 29,\\n  \"885\": 29,\\n  \"886\": 29,\\n  \"887\": 29,\\n  \"888\": 29,\\n  \"889\": 29,\\n  \"890\": 29,\\n  \"891\": 29,\\n  \"892\": 29,\\n  \"893\": 29,\\n  \"894\": 29,\\n  \"895\": 29,\\n  \"896\": 29,\\n  \"897\": 29,\\n  \"898\": 29,\\n  \"899\": 29,\\n  \"900\": 30,\\n  \"901\": 30,\\n  \"902\": 30,\\n  \"903\": 30,\\n  \"904\": 30,\\n  \"905\": 30,\\n  \"906\": 30,\\n  \"907\": 30,\\n  \"908\": 30,\\n  \"909\": 30,\\n  \"910\": 30,\\n  \"911\": 30,\\n  \"912\": 30,\\n  \"913\": 30,\\n  \"914\": 30,\\n  \"915\": 30,\\n  \"916\": 30,\\n  \"917\": 30,\\n  \"918\": 30,\\n  \"919\": 30,\\n  \"920\": 30,\\n  \"921\": 30,\\n  \"922\": 30,\\n  \"923\": 30,\\n  \"924\": 30,\\n  \"925\": 30,\\n  \"926\": 30,\\n  \"927\": 30,\\n  \"928\": 30,\\n  \"929\": 30,\\n  \"930\": 30,\\n  \"931\": 30,\\n  \"932\": 30,\\n  \"933\": 30,\\n  \"934\": 30,\\n  \"935\": 30,\\n  \"936\": 30,\\n  \"937\": 30,\\n  \"938\": 30,\\n  \"939\": 30,\\n  \"940\": 30,\\n  \"941\": 30,\\n  \"942\": 30,\\n  \"943\": 30,\\n  \"944\": 30,\\n  \"945\": 30,\\n  \"946\": 30,\\n  \"947\": 30,\\n  \"948\": 30,\\n  \"949\": 30,\\n  \"950\": 30,\\n  \"951\": 30,\\n  \"952\": 30,\\n  \"953\": 30,\\n  \"954\": 30,\\n  \"955\": 30,\\n  \"956\": 30,\\n  \"957\": 30,\\n  \"958\": 30,\\n  \"959\": 30,\\n  \"960\": 30,\\n  \"961\": 31,\\n  \"962\": 31,\\n  \"963\": 31,\\n  \"964\": 31,\\n  \"965\": 31,\\n  \"966\": 31,\\n  \"967\": 31,\\n  \"968\": 31,\\n  \"969\": 31,\\n  \"970\": 31,\\n  \"971\": 31,\\n  \"972\": 31,\\n  \"973\": 31,\\n  \"974\": 31,\\n  \"975\": 31,\\n  \"976\": 31,\\n  \"977\": 31,\\n  \"978\": 31,\\n  \"979\": 31,\\n  \"980\": 31,\\n  \"981\": 31,\\n  \"982\": 31,\\n  \"983\": 31,\\n  \"984\": 31,\\n  \"985\": 31,\\n  \"986\": 31,\\n  \"987\": 31,\\n  \"988\": 31,\\n  \"989\": 31,\\n  \"990\": 31,\\n  \"991\": 31,\\n  \"992\": 31,\\n  \"993\": 31,\\n  \"994\": 31,\\n  \"995\": 31,\\n  \"996\": 31,\\n  \"997\": 31,\\n  \"998\": 31,\\n  \"999\": 31,\\n  \"1000\": 31,\\n  \"1001\": 31,\\n  \"1002\": 31,\\n  \"1003\": 31,\\n  \"1004\": 31,\\n  \"1005\": 31,\\n  \"1006\": 31,\\n  \"1007\": 31,\\n  \"1008\": 31,\\n  \"1009\": 31,\\n  \"1010\": 31,\\n  \"1011\": 31,\\n  \"1012\": 31,\\n  \"1013\": 31,\\n  \"1014\": 31,\\n  \"1015\": 31,\\n  \"1016\": 31,\\n  \"1017\": 31,\\n  \"1018\": 31,\\n  \"1019\": 31,\\n  \"1020\": 31,\\n  \"1021\": 31,\\n  \"1022\": 31,\\n  \"1023\": 31,\\n  \"1024\": 32,\\n  \"1025\": 32,\\n  \"1026\": 32,\\n  \"1027\": 32,\\n  \"1028\": 32,\\n  \"1029\": 32,\\n  \"1030\": 32,\\n  \"1031\": 32,\\n  \"1032\": 32,\\n  \"1033\": 32,\\n  \"1034\": 32,\\n  \"1035\": 32,\\n  \"1036\": 32,\\n  \"1037\": 32,\\n  \"1038\": 32,\\n  \"1039\": 32,\\n  \"1040\": 32,\\n  \"1041\": 32,\\n  \"1042\": 32,\\n  \"1043\": 32,\\n  \"1044\": 32,\\n  \"1045\": 32,\\n  \"1046\": 32,\\n  \"1047\": 32,\\n  \"1048\": 32,\\n  \"1049\": 32,\\n  \"1050\": 32,\\n  \"1051\": 32,\\n  \"1052\": 32,\\n  \"1053\": 32,\\n  \"1054\": 32,\\n  \"1055\": 32,\\n  \"1056\": 32,\\n  \"1057\": 32,\\n  \"1058\": 32,\\n  \"1059\": 32,\\n  \"1060\": 32,\\n  \"1061\": 32,\\n  \"1062\": 32,\\n  \"1063\": 32,\\n  \"1064\": 32,\\n  \"1065\": 32,\\n  \"1066\": 32,\\n  \"1067\": 32,\\n  \"1068\": 32,\\n  \"1069\": 32,\\n  \"1070\": 32,\\n  \"1071\": 32,\\n  \"1072\": 32,\\n  \"1073\": 32,\\n  \"1074\": 32,\\n  \"1075\": 32,\\n  \"1076\": 32,\\n  \"1077\": 32,\\n  \"1078\": 32,\\n  \"1079\": 32,\\n  \"1080\": 32,\\n  \"1081\": 32,\\n  \"1082\": 32,\\n  \"1083\": 32,\\n  \"1084\": 32,\\n  \"1085\": 32,\\n  \"1086\": 32,\\n  \"1087\": 32,\\n  \"1088\": 32,\\n  \"1089\": 33,\\n  \"1090\": 33,\\n  \"1091\": 33,\\n  \"1092\": 33,\\n  \"1093\": 33,\\n  \"1094\": 33,\\n  \"1095\": 33,\\n  \"1096\": 33,\\n  \"1097\": 33,\\n  \"1098\": 33,\\n  \"1099\": 33,\\n  \"1100\": 33,\\n  \"1101\": 33,\\n  \"1102\": 33,\\n  \"1103\": 33,\\n  \"1104\": 33,\\n  \"1105\": 33,\\n  \"1106\": 33,\\n  \"1107\": 33,\\n  \"1108\": 33,\\n  \"1109\": 33,\\n  \"1110\": 33,\\n  \"1111\": 33,\\n  \"1112\": 33,\\n  \"1113\": 33,\\n  \"1114\": 33,\\n  \"1115\": 33,\\n  \"1116\": 33,\\n  \"1117\": 33,\\n  \"1118\": 33,\\n  \"1119\": 33,\\n  \"1120\": 33,\\n  \"1121\": 33,\\n  \"1122\": 33,\\n  \"1123\": 33,\\n  \"1124\": 33,\\n  \"1125\": 33,\\n  \"1126\": 33,\\n  \"1127\": 33,\\n  \"1128\": 33,\\n  \"1129\": 33,\\n  \"1130\": 33,\\n  \"1131\": 33,\\n  \"1132\": 33,\\n  \"1133\": 33,\\n  \"1134\": 33,\\n  \"1135\": 33,\\n  \"1136\": 33,\\n  \"1137\": 33,\\n  \"1138\": 33,\\n  \"1139\": 33,\\n  \"1140\": 33,\\n  \"1141\": 33,\\n  \"1142\": 33,\\n  \"1143\": 33,\\n  \"1144\": 33,\\n  \"1145\": 33,\\n  \"1146\": 33,\\n  \"1147\": 33,\\n  \"1148\": 33,\\n  \"1149\": 33,\\n  \"1150\": 33,\\n  \"1151\": 33,\\n  \"1152\": 33,\\n  \"1153\": 33,\\n  \"1154\": 33,\\n  \"1155\": 33,\\n  \"1156\": 34,\\n  \"1157\": 34,\\n  \"1158\": 34,\\n  \"1159\": 34,\\n  \"1160\": 34,\\n  \"1161\": 34,\\n  \"1162\": 34,\\n  \"1163\": 34,\\n  \"1164\": 34,\\n  \"1165\": 34,\\n  \"1166\": 34,\\n  \"1167\": 34,\\n  \"1168\": 34,\\n  \"1169\": 34,\\n  \"1170\": 34,\\n  \"1171\": 34,\\n  \"1172\": 34,\\n  \"1173\": 34,\\n  \"1174\": 34,\\n  \"1175\": 34,\\n  \"1176\": 34,\\n  \"1177\": 34,\\n  \"1178\": 34,\\n  \"1179\": 34,\\n  \"1180\": 34,\\n  \"1181\": 34,\\n  \"1182\": 34,\\n  \"1183\": 34,\\n  \"1184\": 34,\\n  \"1185\": 34,\\n  \"1186\": 34,\\n  \"1187\": 34,\\n  \"1188\": 34,\\n  \"1189\": 34,\\n  \"1190\": 34,\\n  \"1191\": 34,\\n  \"1192\": 34,\\n  \"1193\": 34,\\n  \"1194\": 34,\\n  \"1195\": 34,\\n  \"1196\": 34,\\n  \"1197\": 34,\\n  \"1198\": 34,\\n  \"1199\": 34,\\n  \"1200\": 34,\\n  \"1201\": 34,\\n  \"1202\": 34,\\n  \"1203\": 34,\\n  \"1204\": 34,\\n  \"1205\": 34,\\n  \"1206\": 34,\\n  \"1207\": 34,\\n  \"1208\": 34,\\n  \"1209\": 34,\\n  \"1210\": 34,\\n  \"1211\": 34,\\n  \"1212\": 34,\\n  \"1213\": 34,\\n  \"1214\": 34,\\n  \"1215\": 34,\\n  \"1216\": 34,\\n  \"1217\": 34,\\n  \"1218\": 34,\\n  \"1219\": 34,\\n  \"1220\": 34,\\n  \"1221\": 34,\\n  \"1222\": 34,\\n  \"1223\": 34,\\n  \"1224\": 34,\\n  \"1225\": 35,\\n  \"1226\": 35,\\n  \"1227\": 35,\\n  \"1228\": 35,\\n  \"1229\": 35,\\n  \"1230\": 35,\\n  \"1231\": 35,\\n  \"1232\": 35,\\n  \"1233\": 35,\\n  \"1234\": 35,\\n  \"1235\": 35,\\n  \"1236\": 35,\\n  \"1237\": 35,\\n  \"1238\": 35,\\n  \"1239\": 35,\\n  \"1240\": 35,\\n  \"1241\": 35,\\n  \"1242\": 35,\\n  \"1243\": 35,\\n  \"1244\": 35,\\n  \"1245\": 35,\\n  \"1246\": 35,\\n  \"1247\": 35,\\n  \"1248\": 35,\\n  \"1249\": 35,\\n  \"1250\": 35,\\n  \"1251\": 35,\\n  \"1252\": 35,\\n  \"1253\": 35,\\n  \"1254\": 35,\\n  \"1255\": 35,\\n  \"1256\": 35,\\n  \"1257\": 35,\\n  \"1258\": 35,\\n  \"1259\": 35,\\n  \"1260\": 35,\\n  \"1261\": 35,\\n  \"1262\": 35,\\n  \"1263\": 35,\\n  \"1264\": 35,\\n  \"1265\": 35,\\n  \"1266\": 35,\\n  \"1267\": 35,\\n  \"1268\": 35,\\n  \"1269\": 35,\\n  \"1270\": 35,\\n  \"1271\": 35,\\n  \"1272\": 35,\\n  \"1273\": 35,\\n  \"1274\": 35,\\n  \"1275\": 35,\\n  \"1276\": 35,\\n  \"1277\": 35,\\n  \"1278\": 35,\\n  \"1279\": 35,\\n  \"1280\": 35,\\n  \"1281\": 35,\\n  \"1282\": 35,\\n  \"1283\": 35,\\n  \"1284\": 35,\\n  \"1285\": 35,\\n  \"1286\": 35,\\n  \"1287\": 35,\\n  \"1288\": 35,\\n  \"1289\": 35,\\n  \"1290\": 35,\\n  \"1291\": 35,\\n  \"1292\": 35,\\n  \"1293\": 35,\\n  \"1294\": 35,\\n  \"1295\": 35,\\n  \"1296\": 36,\\n  \"1297\": 36,\\n  \"1298\": 36,\\n  \"1299\": 36,\\n  \"1300\": 36,\\n  \"1301\": 36,\\n  \"1302\": 36,\\n  \"1303\": 36,\\n  \"1304\": 36,\\n  \"1305\": 36,\\n  \"1306\": 36,\\n  \"1307\": 36,\\n  \"1308\": 36,\\n  \"1309\": 36,\\n  \"1310\": 36,\\n  \"1311\": 36,\\n  \"1312\": 36,\\n  \"1313\": 36,\\n  \"1314\": 36,\\n  \"1315\": 36,\\n  \"1316\": 36,\\n  \"1317\": 36,\\n  \"1318\": 36,\\n  \"1319\": 36,\\n  \"1320\": 36,\\n  \"1321\": 36,\\n  \"1322\": 36,\\n  \"1323\": 36,\\n  \"1324\": 36,\\n  \"1325\": 36,\\n  \"1326\": 36,\\n  \"1327\": 36,\\n  \"1328\": 36,\\n  \"1329\": 36,\\n  \"1330\": 36,\\n  \"1331\": 36,\\n  \"1332\": 36,\\n  \"1333\": 36,\\n  \"1334\": 36,\\n  \"1335\": 36,\\n  \"1336\": 36,\\n  \"1337\": 36,\\n  \"1338\": 36,\\n  \"1339\": 36,\\n  \"1340\": 36,\\n  \"1341\": 36,\\n  \"1342\": 36,\\n  \"1343\": 36,\\n  \"1344\": 36,\\n  \"1345\": 36,\\n  \"1346\": 36,\\n  \"1347\": 36,\\n  \"1348\": 36,\\n  \"1349\": 36,\\n  \"1350\": 36,\\n  \"1351\": 36,\\n  \"1352\": 36,\\n  \"1353\": 36,\\n  \"1354\": 36,\\n  \"1355\": 36,\\n  \"1356\": 36,\\n  \"1357\": 36,\\n  \"1358\": 36,\\n  \"1359\": 36,\\n  \"1360\": 36,\\n  \"1361\": 36,\\n  \"1362\": 36,\\n  \"1363\": 36,\\n  \"1364\": 36,\\n  \"1365\": 36,\\n  \"1366\": 36,\\n  \"1367\": 36,\\n  \"1368\": 36,\\n  \"1369\": 37,\\n  \"1370\": 37,\\n  \"1371\": 37,\\n  \"1372\": 37,\\n  \"1373\": 37,\\n  \"1374\": 37,\\n  \"1375\": 37,\\n  \"1376\": 37,\\n  \"1377\": 37,\\n  \"1378\": 37,\\n  \"1379\": 37,\\n  \"1380\": 37,\\n  \"1381\": 37,\\n  \"1382\": 37,\\n  \"1383\": 37,\\n  \"1384\": 37,\\n  \"1385\": 37,\\n  \"1386\": 37,\\n  \"1387\": 37,\\n  \"1388\": 37,\\n  \"1389\": 37,\\n  \"1390\": 37,\\n  \"1391\": 37,\\n  \"1392\": 37,\\n  \"1393\": 37,\\n  \"1394\": 37,\\n  \"1395\": 37,\\n  \"1396\": 37,\\n  \"1397\": 37,\\n  \"1398\": 37,\\n  \"1399\": 37,\\n  \"1400\": 37,\\n  \"1401\": 37,\\n  \"1402\": 37,\\n  \"1403\": 37,\\n  \"1404\": 37,\\n  \"1405\": 37,\\n  \"1406\": 37,\\n  \"1407\": 37,\\n  \"1408\": 37,\\n  \"1409\": 37,\\n  \"1410\": 37,\\n  \"1411\": 37,\\n  \"1412\": 37,\\n  \"1413\": 37,\\n  \"1414\": 37,\\n  \"1415\": 37,\\n  \"1416\": 37,\\n  \"1417\": 37,\\n  \"1418\": 37,\\n  \"1419\": 37,\\n  \"1420\": 37,\\n  \"1421\": 37,\\n  \"1422\": 37,\\n  \"1423\": 37,\\n  \"1424\": 37,\\n  \"1425\": 37,\\n  \"1426\": 37,\\n  \"1427\": 37,\\n  \"1428\": 37,\\n  \"1429\": 37,\\n  \"1430\": 37,\\n  \"1431\": 37,\\n  \"1432\": 37,\\n  \"1433\": 37,\\n  \"1434\": 37,\\n  \"1435\": 37,\\n  \"1436\": 37,\\n  \"1437\": 37,\\n  \"1438\": 37,\\n  \"1439\": 37,\\n  \"1440\": 37,\\n  \"1441\": 37,\\n  \"1442\": 37,\\n  \"1443\": 37,\\n  \"1444\": 38,\\n  \"1445\": 38,\\n  \"1446\": 38,\\n  \"1447\": 38,\\n  \"1448\": 38,\\n  \"1449\": 38,\\n  \"1450\": 38,\\n  \"1451\": 38,\\n  \"1452\": 38,\\n  \"1453\": 38,\\n  \"1454\": 38,\\n  \"1455\": 38,\\n  \"1456\": 38,\\n  \"1457\": 38,\\n  \"1458\": 38,\\n  \"1459\": 38,\\n  \"1460\": 38,\\n  \"1461\": 38,\\n  \"1462\": 38,\\n  \"1463\": 38,\\n  \"1464\": 38,\\n  \"1465\": 38,\\n  \"1466\": 38,\\n  \"1467\": 38,\\n  \"1468\": 38,\\n  \"1469\": 38,\\n  \"1470\": 38,\\n  \"1471\": 38,\\n  \"1472\": 38,\\n  \"1473\": 38,\\n  \"1474\": 38,\\n  \"1475\": 38,\\n  \"1476\": 38,\\n  \"1477\": 38,\\n  \"1478\": 38,\\n  \"1479\": 38,\\n  \"1480\": 38,\\n  \"1481\": 38,\\n  \"1482\": 38,\\n  \"1483\": 38,\\n  \"1484\": 38,\\n  \"1485\": 38,\\n  \"1486\": 38,\\n  \"1487\": 38,\\n  \"1488\": 38,\\n  \"1489\": 38,\\n  \"1490\": 38,\\n  \"1491\": 38,\\n  \"1492\": 38,\\n  \"1493\": 38,\\n  \"1494\": 38,\\n  \"1495\": 38,\\n  \"1496\": 38,\\n  \"1497\": 38,\\n  \"1498\": 38,\\n  \"1499\": 38,\\n  \"1500\": 38,\\n  \"1501\": 38,\\n  \"1502\": 38,\\n  \"1503\": 38,\\n  \"1504\": 38,\\n  \"1505\": 38,\\n  \"1506\": 38,\\n  \"1507\": 38,\\n  \"1508\": 38,\\n  \"1509\": 38,\\n  \"1510\": 38,\\n  \"1511\": 38,\\n  \"1512\": 38,\\n  \"1513\": 38,\\n  \"1514\": 38,\\n  \"1515\": 38,\\n  \"1516\": 38,\\n  \"1517\": 38,\\n  \"1518\": 38,\\n  \"1519\": 38,\\n  \"1520\": 38,\\n  \"1521\": 39,\\n  \"1522\": 39,\\n  \"1523\": 39,\\n  \"1524\": 39,\\n  \"1525\": 39,\\n  \"1526\": 39,\\n  \"1527\": 39,\\n  \"1528\": 39,\\n  \"1529\": 39,\\n  \"1530\": 39,\\n  \"1531\": 39,\\n  \"1532\": 39,\\n  \"1533\": 39,\\n  \"1534\": 39,\\n  \"1535\": 39,\\n  \"1536\": 39,\\n  \"1537\": 39,\\n  \"1538\": 39,\\n  \"1539\": 39,\\n  \"1540\": 39,\\n  \"1541\": 39,\\n  \"1542\": 39,\\n  \"1543\": 39,\\n  \"1544\": 39,\\n  \"1545\": 39,\\n  \"1546\": 39,\\n  \"1547\": 39,\\n  \"1548\": 39,\\n  \"1549\": 39,\\n  \"1550\": 39,\\n  \"1551\": 39,\\n  \"1552\": 39,\\n  \"1553\": 39,\\n  \"1554\": 39,\\n  \"1555\": 39,\\n  \"1556\": 39,\\n  \"1557\": 39,\\n  \"1558\": 39,\\n  \"1559\": 39,\\n  \"1560\": 39,\\n  \"1561\": 39,\\n  \"1562\": 39,\\n  \"1563\": 39,\\n  \"1564\": 39,\\n  \"1565\": 39,\\n  \"1566\": 39,\\n  \"1567\": 39,\\n  \"1568\": 39,\\n  \"1569\": 39,\\n  \"1570\": 39,\\n  \"1571\": 39,\\n  \"1572\": 39,\\n  \"1573\": 39,\\n  \"1574\": 39,\\n  \"1575\": 39,\\n  \"1576\": 39,\\n  \"1577\": 39,\\n  \"1578\": 39,\\n  \"1579\": 39,\\n  \"1580\": 39,\\n  \"1581\": 39,\\n  \"1582\": 39,\\n  \"1583\": 39,\\n  \"1584\": 39,\\n  \"1585\": 39,\\n  \"1586\": 39,\\n  \"1587\": 39,\\n  \"1588\": 39,\\n  \"1589\": 39,\\n  \"1590\": 39,\\n  \"1591\": 39,\\n  \"1592\": 39,\\n  \"1593\": 39,\\n  \"1594\": 39,\\n  \"1595\": 39,\\n  \"1596\": 39,\\n  \"1597\": 39,\\n  \"1598\": 39,\\n  \"1599\": 39,\\n  \"1600\": 40,\\n  \"1601\": 40,\\n  \"1602\": 40,\\n  \"1603\": 40,\\n  \"1604\": 40,\\n  \"1605\": 40,\\n  \"1606\": 40,\\n  \"1607\": 40,\\n  \"1608\": 40,\\n  \"1609\": 40,\\n  \"1610\": 40,\\n  \"1611\": 40,\\n  \"1612\": 40,\\n  \"1613\": 40,\\n  \"1614\": 40,\\n  \"1615\": 40,\\n  \"1616\": 40\\n}\\n\\nvar mySqrt = function(x) {\\n  return preCalc[x] || parseInt(Math.sqrt(x))\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\n\\nconst preCalc = {\\n  \"0\": 0,\\n  \"1\": 1,\\n  \"2\": 1,\\n  \"3\": 1,\\n  \"4\": 2,\\n  \"5\": 2,\\n  \"6\": 2,\\n  \"7\": 2,\\n  \"8\": 2,\\n  \"9\": 3,\\n  \"10\": 3,\\n  \"11\": 3,\\n  \"12\": 3,\\n  \"13\": 3,\\n  \"14\": 3,\\n  \"15\": 3,\\n  \"16\": 4,\\n  \"17\": 4,\\n  \"18\": 4,\\n  \"19\": 4,\\n  \"20\": 4,\\n  \"21\": 4,\\n  \"22\": 4,\\n  \"23\": 4,\\n  \"24\": 4,\\n  \"25\": 5,\\n  \"26\": 5,\\n  \"27\": 5,\\n  \"28\": 5,\\n  \"29\": 5,\\n  \"30\": 5,\\n  \"31\": 5,\\n  \"32\": 5,\\n  \"33\": 5,\\n  \"34\": 5,\\n  \"35\": 5,\\n  \"36\": 6,\\n  \"37\": 6,\\n  \"38\": 6,\\n  \"39\": 6,\\n  \"40\": 6,\\n  \"41\": 6,\\n  \"42\": 6,\\n  \"43\": 6,\\n  \"44\": 6,\\n  \"45\": 6,\\n  \"46\": 6,\\n  \"47\": 6,\\n  \"48\": 6,\\n  \"49\": 7,\\n  \"50\": 7,\\n  \"51\": 7,\\n  \"52\": 7,\\n  \"53\": 7,\\n  \"54\": 7,\\n  \"55\": 7,\\n  \"56\": 7,\\n  \"57\": 7,\\n  \"58\": 7,\\n  \"59\": 7,\\n  \"60\": 7,\\n  \"61\": 7,\\n  \"62\": 7,\\n  \"63\": 7,\\n  \"64\": 8,\\n  \"65\": 8,\\n  \"66\": 8,\\n  \"67\": 8,\\n  \"68\": 8,\\n  \"69\": 8,\\n  \"70\": 8,\\n  \"71\": 8,\\n  \"72\": 8,\\n  \"73\": 8,\\n  \"74\": 8,\\n  \"75\": 8,\\n  \"76\": 8,\\n  \"77\": 8,\\n  \"78\": 8,\\n  \"79\": 8,\\n  \"80\": 8,\\n  \"81\": 9,\\n  \"82\": 9,\\n  \"83\": 9,\\n  \"84\": 9,\\n  \"85\": 9,\\n  \"86\": 9,\\n  \"87\": 9,\\n  \"88\": 9,\\n  \"89\": 9,\\n  \"90\": 9,\\n  \"91\": 9,\\n  \"92\": 9,\\n  \"93\": 9,\\n  \"94\": 9,\\n  \"95\": 9,\\n  \"96\": 9,\\n  \"97\": 9,\\n  \"98\": 9,\\n  \"99\": 9,\\n  \"100\": 10,\\n  \"101\": 10,\\n  \"102\": 10,\\n  \"103\": 10,\\n  \"104\": 10,\\n  \"105\": 10,\\n  \"106\": 10,\\n  \"107\": 10,\\n  \"108\": 10,\\n  \"109\": 10,\\n  \"110\": 10,\\n  \"111\": 10,\\n  \"112\": 10,\\n  \"113\": 10,\\n  \"114\": 10,\\n  \"115\": 10,\\n  \"116\": 10,\\n  \"117\": 10,\\n  \"118\": 10,\\n  \"119\": 10,\\n  \"120\": 10,\\n  \"121\": 11,\\n  \"122\": 11,\\n  \"123\": 11,\\n  \"124\": 11,\\n  \"125\": 11,\\n  \"126\": 11,\\n  \"127\": 11,\\n  \"128\": 11,\\n  \"129\": 11,\\n  \"130\": 11,\\n  \"131\": 11,\\n  \"132\": 11,\\n  \"133\": 11,\\n  \"134\": 11,\\n  \"135\": 11,\\n  \"136\": 11,\\n  \"137\": 11,\\n  \"138\": 11,\\n  \"139\": 11,\\n  \"140\": 11,\\n  \"141\": 11,\\n  \"142\": 11,\\n  \"143\": 11,\\n  \"144\": 12,\\n  \"145\": 12,\\n  \"146\": 12,\\n  \"147\": 12,\\n  \"148\": 12,\\n  \"149\": 12,\\n  \"150\": 12,\\n  \"151\": 12,\\n  \"152\": 12,\\n  \"153\": 12,\\n  \"154\": 12,\\n  \"155\": 12,\\n  \"156\": 12,\\n  \"157\": 12,\\n  \"158\": 12,\\n  \"159\": 12,\\n  \"160\": 12,\\n  \"161\": 12,\\n  \"162\": 12,\\n  \"163\": 12,\\n  \"164\": 12,\\n  \"165\": 12,\\n  \"166\": 12,\\n  \"167\": 12,\\n  \"168\": 12,\\n  \"169\": 13,\\n  \"170\": 13,\\n  \"171\": 13,\\n  \"172\": 13,\\n  \"173\": 13,\\n  \"174\": 13,\\n  \"175\": 13,\\n  \"176\": 13,\\n  \"177\": 13,\\n  \"178\": 13,\\n  \"179\": 13,\\n  \"180\": 13,\\n  \"181\": 13,\\n  \"182\": 13,\\n  \"183\": 13,\\n  \"184\": 13,\\n  \"185\": 13,\\n  \"186\": 13,\\n  \"187\": 13,\\n  \"188\": 13,\\n  \"189\": 13,\\n  \"190\": 13,\\n  \"191\": 13,\\n  \"192\": 13,\\n  \"193\": 13,\\n  \"194\": 13,\\n  \"195\": 13,\\n  \"196\": 14,\\n  \"197\": 14,\\n  \"198\": 14,\\n  \"199\": 14,\\n  \"200\": 14,\\n  \"201\": 14,\\n  \"202\": 14,\\n  \"203\": 14,\\n  \"204\": 14,\\n  \"205\": 14,\\n  \"206\": 14,\\n  \"207\": 14,\\n  \"208\": 14,\\n  \"209\": 14,\\n  \"210\": 14,\\n  \"211\": 14,\\n  \"212\": 14,\\n  \"213\": 14,\\n  \"214\": 14,\\n  \"215\": 14,\\n  \"216\": 14,\\n  \"217\": 14,\\n  \"218\": 14,\\n  \"219\": 14,\\n  \"220\": 14,\\n  \"221\": 14,\\n  \"222\": 14,\\n  \"223\": 14,\\n  \"224\": 14,\\n  \"225\": 15,\\n  \"226\": 15,\\n  \"227\": 15,\\n  \"228\": 15,\\n  \"229\": 15,\\n  \"230\": 15,\\n  \"231\": 15,\\n  \"232\": 15,\\n  \"233\": 15,\\n  \"234\": 15,\\n  \"235\": 15,\\n  \"236\": 15,\\n  \"237\": 15,\\n  \"238\": 15,\\n  \"239\": 15,\\n  \"240\": 15,\\n  \"241\": 15,\\n  \"242\": 15,\\n  \"243\": 15,\\n  \"244\": 15,\\n  \"245\": 15,\\n  \"246\": 15,\\n  \"247\": 15,\\n  \"248\": 15,\\n  \"249\": 15,\\n  \"250\": 15,\\n  \"251\": 15,\\n  \"252\": 15,\\n  \"253\": 15,\\n  \"254\": 15,\\n  \"255\": 15,\\n  \"256\": 16,\\n  \"257\": 16,\\n  \"258\": 16,\\n  \"259\": 16,\\n  \"260\": 16,\\n  \"261\": 16,\\n  \"262\": 16,\\n  \"263\": 16,\\n  \"264\": 16,\\n  \"265\": 16,\\n  \"266\": 16,\\n  \"267\": 16,\\n  \"268\": 16,\\n  \"269\": 16,\\n  \"270\": 16,\\n  \"271\": 16,\\n  \"272\": 16,\\n  \"273\": 16,\\n  \"274\": 16,\\n  \"275\": 16,\\n  \"276\": 16,\\n  \"277\": 16,\\n  \"278\": 16,\\n  \"279\": 16,\\n  \"280\": 16,\\n  \"281\": 16,\\n  \"282\": 16,\\n  \"283\": 16,\\n  \"284\": 16,\\n  \"285\": 16,\\n  \"286\": 16,\\n  \"287\": 16,\\n  \"288\": 16,\\n  \"289\": 17,\\n  \"290\": 17,\\n  \"291\": 17,\\n  \"292\": 17,\\n  \"293\": 17,\\n  \"294\": 17,\\n  \"295\": 17,\\n  \"296\": 17,\\n  \"297\": 17,\\n  \"298\": 17,\\n  \"299\": 17,\\n  \"300\": 17,\\n  \"301\": 17,\\n  \"302\": 17,\\n  \"303\": 17,\\n  \"304\": 17,\\n  \"305\": 17,\\n  \"306\": 17,\\n  \"307\": 17,\\n  \"308\": 17,\\n  \"309\": 17,\\n  \"310\": 17,\\n  \"311\": 17,\\n  \"312\": 17,\\n  \"313\": 17,\\n  \"314\": 17,\\n  \"315\": 17,\\n  \"316\": 17,\\n  \"317\": 17,\\n  \"318\": 17,\\n  \"319\": 17,\\n  \"320\": 17,\\n  \"321\": 17,\\n  \"322\": 17,\\n  \"323\": 17,\\n  \"324\": 18,\\n  \"325\": 18,\\n  \"326\": 18,\\n  \"327\": 18,\\n  \"328\": 18,\\n  \"329\": 18,\\n  \"330\": 18,\\n  \"331\": 18,\\n  \"332\": 18,\\n  \"333\": 18,\\n  \"334\": 18,\\n  \"335\": 18,\\n  \"336\": 18,\\n  \"337\": 18,\\n  \"338\": 18,\\n  \"339\": 18,\\n  \"340\": 18,\\n  \"341\": 18,\\n  \"342\": 18,\\n  \"343\": 18,\\n  \"344\": 18,\\n  \"345\": 18,\\n  \"346\": 18,\\n  \"347\": 18,\\n  \"348\": 18,\\n  \"349\": 18,\\n  \"350\": 18,\\n  \"351\": 18,\\n  \"352\": 18,\\n  \"353\": 18,\\n  \"354\": 18,\\n  \"355\": 18,\\n  \"356\": 18,\\n  \"357\": 18,\\n  \"358\": 18,\\n  \"359\": 18,\\n  \"360\": 18,\\n  \"361\": 19,\\n  \"362\": 19,\\n  \"363\": 19,\\n  \"364\": 19,\\n  \"365\": 19,\\n  \"366\": 19,\\n  \"367\": 19,\\n  \"368\": 19,\\n  \"369\": 19,\\n  \"370\": 19,\\n  \"371\": 19,\\n  \"372\": 19,\\n  \"373\": 19,\\n  \"374\": 19,\\n  \"375\": 19,\\n  \"376\": 19,\\n  \"377\": 19,\\n  \"378\": 19,\\n  \"379\": 19,\\n  \"380\": 19,\\n  \"381\": 19,\\n  \"382\": 19,\\n  \"383\": 19,\\n  \"384\": 19,\\n  \"385\": 19,\\n  \"386\": 19,\\n  \"387\": 19,\\n  \"388\": 19,\\n  \"389\": 19,\\n  \"390\": 19,\\n  \"391\": 19,\\n  \"392\": 19,\\n  \"393\": 19,\\n  \"394\": 19,\\n  \"395\": 19,\\n  \"396\": 19,\\n  \"397\": 19,\\n  \"398\": 19,\\n  \"399\": 19,\\n  \"400\": 20,\\n  \"401\": 20,\\n  \"402\": 20,\\n  \"403\": 20,\\n  \"404\": 20,\\n  \"405\": 20,\\n  \"406\": 20,\\n  \"407\": 20,\\n  \"408\": 20,\\n  \"409\": 20,\\n  \"410\": 20,\\n  \"411\": 20,\\n  \"412\": 20,\\n  \"413\": 20,\\n  \"414\": 20,\\n  \"415\": 20,\\n  \"416\": 20,\\n  \"417\": 20,\\n  \"418\": 20,\\n  \"419\": 20,\\n  \"420\": 20,\\n  \"421\": 20,\\n  \"422\": 20,\\n  \"423\": 20,\\n  \"424\": 20,\\n  \"425\": 20,\\n  \"426\": 20,\\n  \"427\": 20,\\n  \"428\": 20,\\n  \"429\": 20,\\n  \"430\": 20,\\n  \"431\": 20,\\n  \"432\": 20,\\n  \"433\": 20,\\n  \"434\": 20,\\n  \"435\": 20,\\n  \"436\": 20,\\n  \"437\": 20,\\n  \"438\": 20,\\n  \"439\": 20,\\n  \"440\": 20,\\n  \"441\": 21,\\n  \"442\": 21,\\n  \"443\": 21,\\n  \"444\": 21,\\n  \"445\": 21,\\n  \"446\": 21,\\n  \"447\": 21,\\n  \"448\": 21,\\n  \"449\": 21,\\n  \"450\": 21,\\n  \"451\": 21,\\n  \"452\": 21,\\n  \"453\": 21,\\n  \"454\": 21,\\n  \"455\": 21,\\n  \"456\": 21,\\n  \"457\": 21,\\n  \"458\": 21,\\n  \"459\": 21,\\n  \"460\": 21,\\n  \"461\": 21,\\n  \"462\": 21,\\n  \"463\": 21,\\n  \"464\": 21,\\n  \"465\": 21,\\n  \"466\": 21,\\n  \"467\": 21,\\n  \"468\": 21,\\n  \"469\": 21,\\n  \"470\": 21,\\n  \"471\": 21,\\n  \"472\": 21,\\n  \"473\": 21,\\n  \"474\": 21,\\n  \"475\": 21,\\n  \"476\": 21,\\n  \"477\": 21,\\n  \"478\": 21,\\n  \"479\": 21,\\n  \"480\": 21,\\n  \"481\": 21,\\n  \"482\": 21,\\n  \"483\": 21,\\n  \"484\": 22,\\n  \"485\": 22,\\n  \"486\": 22,\\n  \"487\": 22,\\n  \"488\": 22,\\n  \"489\": 22,\\n  \"490\": 22,\\n  \"491\": 22,\\n  \"492\": 22,\\n  \"493\": 22,\\n  \"494\": 22,\\n  \"495\": 22,\\n  \"496\": 22,\\n  \"497\": 22,\\n  \"498\": 22,\\n  \"499\": 22,\\n  \"500\": 22,\\n  \"501\": 22,\\n  \"502\": 22,\\n  \"503\": 22,\\n  \"504\": 22,\\n  \"505\": 22,\\n  \"506\": 22,\\n  \"507\": 22,\\n  \"508\": 22,\\n  \"509\": 22,\\n  \"510\": 22,\\n  \"511\": 22,\\n  \"512\": 22,\\n  \"513\": 22,\\n  \"514\": 22,\\n  \"515\": 22,\\n  \"516\": 22,\\n  \"517\": 22,\\n  \"518\": 22,\\n  \"519\": 22,\\n  \"520\": 22,\\n  \"521\": 22,\\n  \"522\": 22,\\n  \"523\": 22,\\n  \"524\": 22,\\n  \"525\": 22,\\n  \"526\": 22,\\n  \"527\": 22,\\n  \"528\": 22,\\n  \"529\": 23,\\n  \"530\": 23,\\n  \"531\": 23,\\n  \"532\": 23,\\n  \"533\": 23,\\n  \"534\": 23,\\n  \"535\": 23,\\n  \"536\": 23,\\n  \"537\": 23,\\n  \"538\": 23,\\n  \"539\": 23,\\n  \"540\": 23,\\n  \"541\": 23,\\n  \"542\": 23,\\n  \"543\": 23,\\n  \"544\": 23,\\n  \"545\": 23,\\n  \"546\": 23,\\n  \"547\": 23,\\n  \"548\": 23,\\n  \"549\": 23,\\n  \"550\": 23,\\n  \"551\": 23,\\n  \"552\": 23,\\n  \"553\": 23,\\n  \"554\": 23,\\n  \"555\": 23,\\n  \"556\": 23,\\n  \"557\": 23,\\n  \"558\": 23,\\n  \"559\": 23,\\n  \"560\": 23,\\n  \"561\": 23,\\n  \"562\": 23,\\n  \"563\": 23,\\n  \"564\": 23,\\n  \"565\": 23,\\n  \"566\": 23,\\n  \"567\": 23,\\n  \"568\": 23,\\n  \"569\": 23,\\n  \"570\": 23,\\n  \"571\": 23,\\n  \"572\": 23,\\n  \"573\": 23,\\n  \"574\": 23,\\n  \"575\": 23,\\n  \"576\": 24,\\n  \"577\": 24,\\n  \"578\": 24,\\n  \"579\": 24,\\n  \"580\": 24,\\n  \"581\": 24,\\n  \"582\": 24,\\n  \"583\": 24,\\n  \"584\": 24,\\n  \"585\": 24,\\n  \"586\": 24,\\n  \"587\": 24,\\n  \"588\": 24,\\n  \"589\": 24,\\n  \"590\": 24,\\n  \"591\": 24,\\n  \"592\": 24,\\n  \"593\": 24,\\n  \"594\": 24,\\n  \"595\": 24,\\n  \"596\": 24,\\n  \"597\": 24,\\n  \"598\": 24,\\n  \"599\": 24,\\n  \"600\": 24,\\n  \"601\": 24,\\n  \"602\": 24,\\n  \"603\": 24,\\n  \"604\": 24,\\n  \"605\": 24,\\n  \"606\": 24,\\n  \"607\": 24,\\n  \"608\": 24,\\n  \"609\": 24,\\n  \"610\": 24,\\n  \"611\": 24,\\n  \"612\": 24,\\n  \"613\": 24,\\n  \"614\": 24,\\n  \"615\": 24,\\n  \"616\": 24,\\n  \"617\": 24,\\n  \"618\": 24,\\n  \"619\": 24,\\n  \"620\": 24,\\n  \"621\": 24,\\n  \"622\": 24,\\n  \"623\": 24,\\n  \"624\": 24,\\n  \"625\": 25,\\n  \"626\": 25,\\n  \"627\": 25,\\n  \"628\": 25,\\n  \"629\": 25,\\n  \"630\": 25,\\n  \"631\": 25,\\n  \"632\": 25,\\n  \"633\": 25,\\n  \"634\": 25,\\n  \"635\": 25,\\n  \"636\": 25,\\n  \"637\": 25,\\n  \"638\": 25,\\n  \"639\": 25,\\n  \"640\": 25,\\n  \"641\": 25,\\n  \"642\": 25,\\n  \"643\": 25,\\n  \"644\": 25,\\n  \"645\": 25,\\n  \"646\": 25,\\n  \"647\": 25,\\n  \"648\": 25,\\n  \"649\": 25,\\n  \"650\": 25,\\n  \"651\": 25,\\n  \"652\": 25,\\n  \"653\": 25,\\n  \"654\": 25,\\n  \"655\": 25,\\n  \"656\": 25,\\n  \"657\": 25,\\n  \"658\": 25,\\n  \"659\": 25,\\n  \"660\": 25,\\n  \"661\": 25,\\n  \"662\": 25,\\n  \"663\": 25,\\n  \"664\": 25,\\n  \"665\": 25,\\n  \"666\": 25,\\n  \"667\": 25,\\n  \"668\": 25,\\n  \"669\": 25,\\n  \"670\": 25,\\n  \"671\": 25,\\n  \"672\": 25,\\n  \"673\": 25,\\n  \"674\": 25,\\n  \"675\": 25,\\n  \"676\": 26,\\n  \"677\": 26,\\n  \"678\": 26,\\n  \"679\": 26,\\n  \"680\": 26,\\n  \"681\": 26,\\n  \"682\": 26,\\n  \"683\": 26,\\n  \"684\": 26,\\n  \"685\": 26,\\n  \"686\": 26,\\n  \"687\": 26,\\n  \"688\": 26,\\n  \"689\": 26,\\n  \"690\": 26,\\n  \"691\": 26,\\n  \"692\": 26,\\n  \"693\": 26,\\n  \"694\": 26,\\n  \"695\": 26,\\n  \"696\": 26,\\n  \"697\": 26,\\n  \"698\": 26,\\n  \"699\": 26,\\n  \"700\": 26,\\n  \"701\": 26,\\n  \"702\": 26,\\n  \"703\": 26,\\n  \"704\": 26,\\n  \"705\": 26,\\n  \"706\": 26,\\n  \"707\": 26,\\n  \"708\": 26,\\n  \"709\": 26,\\n  \"710\": 26,\\n  \"711\": 26,\\n  \"712\": 26,\\n  \"713\": 26,\\n  \"714\": 26,\\n  \"715\": 26,\\n  \"716\": 26,\\n  \"717\": 26,\\n  \"718\": 26,\\n  \"719\": 26,\\n  \"720\": 26,\\n  \"721\": 26,\\n  \"722\": 26,\\n  \"723\": 26,\\n  \"724\": 26,\\n  \"725\": 26,\\n  \"726\": 26,\\n  \"727\": 26,\\n  \"728\": 26,\\n  \"729\": 27,\\n  \"730\": 27,\\n  \"731\": 27,\\n  \"732\": 27,\\n  \"733\": 27,\\n  \"734\": 27,\\n  \"735\": 27,\\n  \"736\": 27,\\n  \"737\": 27,\\n  \"738\": 27,\\n  \"739\": 27,\\n  \"740\": 27,\\n  \"741\": 27,\\n  \"742\": 27,\\n  \"743\": 27,\\n  \"744\": 27,\\n  \"745\": 27,\\n  \"746\": 27,\\n  \"747\": 27,\\n  \"748\": 27,\\n  \"749\": 27,\\n  \"750\": 27,\\n  \"751\": 27,\\n  \"752\": 27,\\n  \"753\": 27,\\n  \"754\": 27,\\n  \"755\": 27,\\n  \"756\": 27,\\n  \"757\": 27,\\n  \"758\": 27,\\n  \"759\": 27,\\n  \"760\": 27,\\n  \"761\": 27,\\n  \"762\": 27,\\n  \"763\": 27,\\n  \"764\": 27,\\n  \"765\": 27,\\n  \"766\": 27,\\n  \"767\": 27,\\n  \"768\": 27,\\n  \"769\": 27,\\n  \"770\": 27,\\n  \"771\": 27,\\n  \"772\": 27,\\n  \"773\": 27,\\n  \"774\": 27,\\n  \"775\": 27,\\n  \"776\": 27,\\n  \"777\": 27,\\n  \"778\": 27,\\n  \"779\": 27,\\n  \"780\": 27,\\n  \"781\": 27,\\n  \"782\": 27,\\n  \"783\": 27,\\n  \"784\": 28,\\n  \"785\": 28,\\n  \"786\": 28,\\n  \"787\": 28,\\n  \"788\": 28,\\n  \"789\": 28,\\n  \"790\": 28,\\n  \"791\": 28,\\n  \"792\": 28,\\n  \"793\": 28,\\n  \"794\": 28,\\n  \"795\": 28,\\n  \"796\": 28,\\n  \"797\": 28,\\n  \"798\": 28,\\n  \"799\": 28,\\n  \"800\": 28,\\n  \"801\": 28,\\n  \"802\": 28,\\n  \"803\": 28,\\n  \"804\": 28,\\n  \"805\": 28,\\n  \"806\": 28,\\n  \"807\": 28,\\n  \"808\": 28,\\n  \"809\": 28,\\n  \"810\": 28,\\n  \"811\": 28,\\n  \"812\": 28,\\n  \"813\": 28,\\n  \"814\": 28,\\n  \"815\": 28,\\n  \"816\": 28,\\n  \"817\": 28,\\n  \"818\": 28,\\n  \"819\": 28,\\n  \"820\": 28,\\n  \"821\": 28,\\n  \"822\": 28,\\n  \"823\": 28,\\n  \"824\": 28,\\n  \"825\": 28,\\n  \"826\": 28,\\n  \"827\": 28,\\n  \"828\": 28,\\n  \"829\": 28,\\n  \"830\": 28,\\n  \"831\": 28,\\n  \"832\": 28,\\n  \"833\": 28,\\n  \"834\": 28,\\n  \"835\": 28,\\n  \"836\": 28,\\n  \"837\": 28,\\n  \"838\": 28,\\n  \"839\": 28,\\n  \"840\": 28,\\n  \"841\": 29,\\n  \"842\": 29,\\n  \"843\": 29,\\n  \"844\": 29,\\n  \"845\": 29,\\n  \"846\": 29,\\n  \"847\": 29,\\n  \"848\": 29,\\n  \"849\": 29,\\n  \"850\": 29,\\n  \"851\": 29,\\n  \"852\": 29,\\n  \"853\": 29,\\n  \"854\": 29,\\n  \"855\": 29,\\n  \"856\": 29,\\n  \"857\": 29,\\n  \"858\": 29,\\n  \"859\": 29,\\n  \"860\": 29,\\n  \"861\": 29,\\n  \"862\": 29,\\n  \"863\": 29,\\n  \"864\": 29,\\n  \"865\": 29,\\n  \"866\": 29,\\n  \"867\": 29,\\n  \"868\": 29,\\n  \"869\": 29,\\n  \"870\": 29,\\n  \"871\": 29,\\n  \"872\": 29,\\n  \"873\": 29,\\n  \"874\": 29,\\n  \"875\": 29,\\n  \"876\": 29,\\n  \"877\": 29,\\n  \"878\": 29,\\n  \"879\": 29,\\n  \"880\": 29,\\n  \"881\": 29,\\n  \"882\": 29,\\n  \"883\": 29,\\n  \"884\": 29,\\n  \"885\": 29,\\n  \"886\": 29,\\n  \"887\": 29,\\n  \"888\": 29,\\n  \"889\": 29,\\n  \"890\": 29,\\n  \"891\": 29,\\n  \"892\": 29,\\n  \"893\": 29,\\n  \"894\": 29,\\n  \"895\": 29,\\n  \"896\": 29,\\n  \"897\": 29,\\n  \"898\": 29,\\n  \"899\": 29,\\n  \"900\": 30,\\n  \"901\": 30,\\n  \"902\": 30,\\n  \"903\": 30,\\n  \"904\": 30,\\n  \"905\": 30,\\n  \"906\": 30,\\n  \"907\": 30,\\n  \"908\": 30,\\n  \"909\": 30,\\n  \"910\": 30,\\n  \"911\": 30,\\n  \"912\": 30,\\n  \"913\": 30,\\n  \"914\": 30,\\n  \"915\": 30,\\n  \"916\": 30,\\n  \"917\": 30,\\n  \"918\": 30,\\n  \"919\": 30,\\n  \"920\": 30,\\n  \"921\": 30,\\n  \"922\": 30,\\n  \"923\": 30,\\n  \"924\": 30,\\n  \"925\": 30,\\n  \"926\": 30,\\n  \"927\": 30,\\n  \"928\": 30,\\n  \"929\": 30,\\n  \"930\": 30,\\n  \"931\": 30,\\n  \"932\": 30,\\n  \"933\": 30,\\n  \"934\": 30,\\n  \"935\": 30,\\n  \"936\": 30,\\n  \"937\": 30,\\n  \"938\": 30,\\n  \"939\": 30,\\n  \"940\": 30,\\n  \"941\": 30,\\n  \"942\": 30,\\n  \"943\": 30,\\n  \"944\": 30,\\n  \"945\": 30,\\n  \"946\": 30,\\n  \"947\": 30,\\n  \"948\": 30,\\n  \"949\": 30,\\n  \"950\": 30,\\n  \"951\": 30,\\n  \"952\": 30,\\n  \"953\": 30,\\n  \"954\": 30,\\n  \"955\": 30,\\n  \"956\": 30,\\n  \"957\": 30,\\n  \"958\": 30,\\n  \"959\": 30,\\n  \"960\": 30,\\n  \"961\": 31,\\n  \"962\": 31,\\n  \"963\": 31,\\n  \"964\": 31,\\n  \"965\": 31,\\n  \"966\": 31,\\n  \"967\": 31,\\n  \"968\": 31,\\n  \"969\": 31,\\n  \"970\": 31,\\n  \"971\": 31,\\n  \"972\": 31,\\n  \"973\": 31,\\n  \"974\": 31,\\n  \"975\": 31,\\n  \"976\": 31,\\n  \"977\": 31,\\n  \"978\": 31,\\n  \"979\": 31,\\n  \"980\": 31,\\n  \"981\": 31,\\n  \"982\": 31,\\n  \"983\": 31,\\n  \"984\": 31,\\n  \"985\": 31,\\n  \"986\": 31,\\n  \"987\": 31,\\n  \"988\": 31,\\n  \"989\": 31,\\n  \"990\": 31,\\n  \"991\": 31,\\n  \"992\": 31,\\n  \"993\": 31,\\n  \"994\": 31,\\n  \"995\": 31,\\n  \"996\": 31,\\n  \"997\": 31,\\n  \"998\": 31,\\n  \"999\": 31,\\n  \"1000\": 31,\\n  \"1001\": 31,\\n  \"1002\": 31,\\n  \"1003\": 31,\\n  \"1004\": 31,\\n  \"1005\": 31,\\n  \"1006\": 31,\\n  \"1007\": 31,\\n  \"1008\": 31,\\n  \"1009\": 31,\\n  \"1010\": 31,\\n  \"1011\": 31,\\n  \"1012\": 31,\\n  \"1013\": 31,\\n  \"1014\": 31,\\n  \"1015\": 31,\\n  \"1016\": 31,\\n  \"1017\": 31,\\n  \"1018\": 31,\\n  \"1019\": 31,\\n  \"1020\": 31,\\n  \"1021\": 31,\\n  \"1022\": 31,\\n  \"1023\": 31,\\n  \"1024\": 32,\\n  \"1025\": 32,\\n  \"1026\": 32,\\n  \"1027\": 32,\\n  \"1028\": 32,\\n  \"1029\": 32,\\n  \"1030\": 32,\\n  \"1031\": 32,\\n  \"1032\": 32,\\n  \"1033\": 32,\\n  \"1034\": 32,\\n  \"1035\": 32,\\n  \"1036\": 32,\\n  \"1037\": 32,\\n  \"1038\": 32,\\n  \"1039\": 32,\\n  \"1040\": 32,\\n  \"1041\": 32,\\n  \"1042\": 32,\\n  \"1043\": 32,\\n  \"1044\": 32,\\n  \"1045\": 32,\\n  \"1046\": 32,\\n  \"1047\": 32,\\n  \"1048\": 32,\\n  \"1049\": 32,\\n  \"1050\": 32,\\n  \"1051\": 32,\\n  \"1052\": 32,\\n  \"1053\": 32,\\n  \"1054\": 32,\\n  \"1055\": 32,\\n  \"1056\": 32,\\n  \"1057\": 32,\\n  \"1058\": 32,\\n  \"1059\": 32,\\n  \"1060\": 32,\\n  \"1061\": 32,\\n  \"1062\": 32,\\n  \"1063\": 32,\\n  \"1064\": 32,\\n  \"1065\": 32,\\n  \"1066\": 32,\\n  \"1067\": 32,\\n  \"1068\": 32,\\n  \"1069\": 32,\\n  \"1070\": 32,\\n  \"1071\": 32,\\n  \"1072\": 32,\\n  \"1073\": 32,\\n  \"1074\": 32,\\n  \"1075\": 32,\\n  \"1076\": 32,\\n  \"1077\": 32,\\n  \"1078\": 32,\\n  \"1079\": 32,\\n  \"1080\": 32,\\n  \"1081\": 32,\\n  \"1082\": 32,\\n  \"1083\": 32,\\n  \"1084\": 32,\\n  \"1085\": 32,\\n  \"1086\": 32,\\n  \"1087\": 32,\\n  \"1088\": 32,\\n  \"1089\": 33,\\n  \"1090\": 33,\\n  \"1091\": 33,\\n  \"1092\": 33,\\n  \"1093\": 33,\\n  \"1094\": 33,\\n  \"1095\": 33,\\n  \"1096\": 33,\\n  \"1097\": 33,\\n  \"1098\": 33,\\n  \"1099\": 33,\\n  \"1100\": 33,\\n  \"1101\": 33,\\n  \"1102\": 33,\\n  \"1103\": 33,\\n  \"1104\": 33,\\n  \"1105\": 33,\\n  \"1106\": 33,\\n  \"1107\": 33,\\n  \"1108\": 33,\\n  \"1109\": 33,\\n  \"1110\": 33,\\n  \"1111\": 33,\\n  \"1112\": 33,\\n  \"1113\": 33,\\n  \"1114\": 33,\\n  \"1115\": 33,\\n  \"1116\": 33,\\n  \"1117\": 33,\\n  \"1118\": 33,\\n  \"1119\": 33,\\n  \"1120\": 33,\\n  \"1121\": 33,\\n  \"1122\": 33,\\n  \"1123\": 33,\\n  \"1124\": 33,\\n  \"1125\": 33,\\n  \"1126\": 33,\\n  \"1127\": 33,\\n  \"1128\": 33,\\n  \"1129\": 33,\\n  \"1130\": 33,\\n  \"1131\": 33,\\n  \"1132\": 33,\\n  \"1133\": 33,\\n  \"1134\": 33,\\n  \"1135\": 33,\\n  \"1136\": 33,\\n  \"1137\": 33,\\n  \"1138\": 33,\\n  \"1139\": 33,\\n  \"1140\": 33,\\n  \"1141\": 33,\\n  \"1142\": 33,\\n  \"1143\": 33,\\n  \"1144\": 33,\\n  \"1145\": 33,\\n  \"1146\": 33,\\n  \"1147\": 33,\\n  \"1148\": 33,\\n  \"1149\": 33,\\n  \"1150\": 33,\\n  \"1151\": 33,\\n  \"1152\": 33,\\n  \"1153\": 33,\\n  \"1154\": 33,\\n  \"1155\": 33,\\n  \"1156\": 34,\\n  \"1157\": 34,\\n  \"1158\": 34,\\n  \"1159\": 34,\\n  \"1160\": 34,\\n  \"1161\": 34,\\n  \"1162\": 34,\\n  \"1163\": 34,\\n  \"1164\": 34,\\n  \"1165\": 34,\\n  \"1166\": 34,\\n  \"1167\": 34,\\n  \"1168\": 34,\\n  \"1169\": 34,\\n  \"1170\": 34,\\n  \"1171\": 34,\\n  \"1172\": 34,\\n  \"1173\": 34,\\n  \"1174\": 34,\\n  \"1175\": 34,\\n  \"1176\": 34,\\n  \"1177\": 34,\\n  \"1178\": 34,\\n  \"1179\": 34,\\n  \"1180\": 34,\\n  \"1181\": 34,\\n  \"1182\": 34,\\n  \"1183\": 34,\\n  \"1184\": 34,\\n  \"1185\": 34,\\n  \"1186\": 34,\\n  \"1187\": 34,\\n  \"1188\": 34,\\n  \"1189\": 34,\\n  \"1190\": 34,\\n  \"1191\": 34,\\n  \"1192\": 34,\\n  \"1193\": 34,\\n  \"1194\": 34,\\n  \"1195\": 34,\\n  \"1196\": 34,\\n  \"1197\": 34,\\n  \"1198\": 34,\\n  \"1199\": 34,\\n  \"1200\": 34,\\n  \"1201\": 34,\\n  \"1202\": 34,\\n  \"1203\": 34,\\n  \"1204\": 34,\\n  \"1205\": 34,\\n  \"1206\": 34,\\n  \"1207\": 34,\\n  \"1208\": 34,\\n  \"1209\": 34,\\n  \"1210\": 34,\\n  \"1211\": 34,\\n  \"1212\": 34,\\n  \"1213\": 34,\\n  \"1214\": 34,\\n  \"1215\": 34,\\n  \"1216\": 34,\\n  \"1217\": 34,\\n  \"1218\": 34,\\n  \"1219\": 34,\\n  \"1220\": 34,\\n  \"1221\": 34,\\n  \"1222\": 34,\\n  \"1223\": 34,\\n  \"1224\": 34,\\n  \"1225\": 35,\\n  \"1226\": 35,\\n  \"1227\": 35,\\n  \"1228\": 35,\\n  \"1229\": 35,\\n  \"1230\": 35,\\n  \"1231\": 35,\\n  \"1232\": 35,\\n  \"1233\": 35,\\n  \"1234\": 35,\\n  \"1235\": 35,\\n  \"1236\": 35,\\n  \"1237\": 35,\\n  \"1238\": 35,\\n  \"1239\": 35,\\n  \"1240\": 35,\\n  \"1241\": 35,\\n  \"1242\": 35,\\n  \"1243\": 35,\\n  \"1244\": 35,\\n  \"1245\": 35,\\n  \"1246\": 35,\\n  \"1247\": 35,\\n  \"1248\": 35,\\n  \"1249\": 35,\\n  \"1250\": 35,\\n  \"1251\": 35,\\n  \"1252\": 35,\\n  \"1253\": 35,\\n  \"1254\": 35,\\n  \"1255\": 35,\\n  \"1256\": 35,\\n  \"1257\": 35,\\n  \"1258\": 35,\\n  \"1259\": 35,\\n  \"1260\": 35,\\n  \"1261\": 35,\\n  \"1262\": 35,\\n  \"1263\": 35,\\n  \"1264\": 35,\\n  \"1265\": 35,\\n  \"1266\": 35,\\n  \"1267\": 35,\\n  \"1268\": 35,\\n  \"1269\": 35,\\n  \"1270\": 35,\\n  \"1271\": 35,\\n  \"1272\": 35,\\n  \"1273\": 35,\\n  \"1274\": 35,\\n  \"1275\": 35,\\n  \"1276\": 35,\\n  \"1277\": 35,\\n  \"1278\": 35,\\n  \"1279\": 35,\\n  \"1280\": 35,\\n  \"1281\": 35,\\n  \"1282\": 35,\\n  \"1283\": 35,\\n  \"1284\": 35,\\n  \"1285\": 35,\\n  \"1286\": 35,\\n  \"1287\": 35,\\n  \"1288\": 35,\\n  \"1289\": 35,\\n  \"1290\": 35,\\n  \"1291\": 35,\\n  \"1292\": 35,\\n  \"1293\": 35,\\n  \"1294\": 35,\\n  \"1295\": 35,\\n  \"1296\": 36,\\n  \"1297\": 36,\\n  \"1298\": 36,\\n  \"1299\": 36,\\n  \"1300\": 36,\\n  \"1301\": 36,\\n  \"1302\": 36,\\n  \"1303\": 36,\\n  \"1304\": 36,\\n  \"1305\": 36,\\n  \"1306\": 36,\\n  \"1307\": 36,\\n  \"1308\": 36,\\n  \"1309\": 36,\\n  \"1310\": 36,\\n  \"1311\": 36,\\n  \"1312\": 36,\\n  \"1313\": 36,\\n  \"1314\": 36,\\n  \"1315\": 36,\\n  \"1316\": 36,\\n  \"1317\": 36,\\n  \"1318\": 36,\\n  \"1319\": 36,\\n  \"1320\": 36,\\n  \"1321\": 36,\\n  \"1322\": 36,\\n  \"1323\": 36,\\n  \"1324\": 36,\\n  \"1325\": 36,\\n  \"1326\": 36,\\n  \"1327\": 36,\\n  \"1328\": 36,\\n  \"1329\": 36,\\n  \"1330\": 36,\\n  \"1331\": 36,\\n  \"1332\": 36,\\n  \"1333\": 36,\\n  \"1334\": 36,\\n  \"1335\": 36,\\n  \"1336\": 36,\\n  \"1337\": 36,\\n  \"1338\": 36,\\n  \"1339\": 36,\\n  \"1340\": 36,\\n  \"1341\": 36,\\n  \"1342\": 36,\\n  \"1343\": 36,\\n  \"1344\": 36,\\n  \"1345\": 36,\\n  \"1346\": 36,\\n  \"1347\": 36,\\n  \"1348\": 36,\\n  \"1349\": 36,\\n  \"1350\": 36,\\n  \"1351\": 36,\\n  \"1352\": 36,\\n  \"1353\": 36,\\n  \"1354\": 36,\\n  \"1355\": 36,\\n  \"1356\": 36,\\n  \"1357\": 36,\\n  \"1358\": 36,\\n  \"1359\": 36,\\n  \"1360\": 36,\\n  \"1361\": 36,\\n  \"1362\": 36,\\n  \"1363\": 36,\\n  \"1364\": 36,\\n  \"1365\": 36,\\n  \"1366\": 36,\\n  \"1367\": 36,\\n  \"1368\": 36,\\n  \"1369\": 37,\\n  \"1370\": 37,\\n  \"1371\": 37,\\n  \"1372\": 37,\\n  \"1373\": 37,\\n  \"1374\": 37,\\n  \"1375\": 37,\\n  \"1376\": 37,\\n  \"1377\": 37,\\n  \"1378\": 37,\\n  \"1379\": 37,\\n  \"1380\": 37,\\n  \"1381\": 37,\\n  \"1382\": 37,\\n  \"1383\": 37,\\n  \"1384\": 37,\\n  \"1385\": 37,\\n  \"1386\": 37,\\n  \"1387\": 37,\\n  \"1388\": 37,\\n  \"1389\": 37,\\n  \"1390\": 37,\\n  \"1391\": 37,\\n  \"1392\": 37,\\n  \"1393\": 37,\\n  \"1394\": 37,\\n  \"1395\": 37,\\n  \"1396\": 37,\\n  \"1397\": 37,\\n  \"1398\": 37,\\n  \"1399\": 37,\\n  \"1400\": 37,\\n  \"1401\": 37,\\n  \"1402\": 37,\\n  \"1403\": 37,\\n  \"1404\": 37,\\n  \"1405\": 37,\\n  \"1406\": 37,\\n  \"1407\": 37,\\n  \"1408\": 37,\\n  \"1409\": 37,\\n  \"1410\": 37,\\n  \"1411\": 37,\\n  \"1412\": 37,\\n  \"1413\": 37,\\n  \"1414\": 37,\\n  \"1415\": 37,\\n  \"1416\": 37,\\n  \"1417\": 37,\\n  \"1418\": 37,\\n  \"1419\": 37,\\n  \"1420\": 37,\\n  \"1421\": 37,\\n  \"1422\": 37,\\n  \"1423\": 37,\\n  \"1424\": 37,\\n  \"1425\": 37,\\n  \"1426\": 37,\\n  \"1427\": 37,\\n  \"1428\": 37,\\n  \"1429\": 37,\\n  \"1430\": 37,\\n  \"1431\": 37,\\n  \"1432\": 37,\\n  \"1433\": 37,\\n  \"1434\": 37,\\n  \"1435\": 37,\\n  \"1436\": 37,\\n  \"1437\": 37,\\n  \"1438\": 37,\\n  \"1439\": 37,\\n  \"1440\": 37,\\n  \"1441\": 37,\\n  \"1442\": 37,\\n  \"1443\": 37,\\n  \"1444\": 38,\\n  \"1445\": 38,\\n  \"1446\": 38,\\n  \"1447\": 38,\\n  \"1448\": 38,\\n  \"1449\": 38,\\n  \"1450\": 38,\\n  \"1451\": 38,\\n  \"1452\": 38,\\n  \"1453\": 38,\\n  \"1454\": 38,\\n  \"1455\": 38,\\n  \"1456\": 38,\\n  \"1457\": 38,\\n  \"1458\": 38,\\n  \"1459\": 38,\\n  \"1460\": 38,\\n  \"1461\": 38,\\n  \"1462\": 38,\\n  \"1463\": 38,\\n  \"1464\": 38,\\n  \"1465\": 38,\\n  \"1466\": 38,\\n  \"1467\": 38,\\n  \"1468\": 38,\\n  \"1469\": 38,\\n  \"1470\": 38,\\n  \"1471\": 38,\\n  \"1472\": 38,\\n  \"1473\": 38,\\n  \"1474\": 38,\\n  \"1475\": 38,\\n  \"1476\": 38,\\n  \"1477\": 38,\\n  \"1478\": 38,\\n  \"1479\": 38,\\n  \"1480\": 38,\\n  \"1481\": 38,\\n  \"1482\": 38,\\n  \"1483\": 38,\\n  \"1484\": 38,\\n  \"1485\": 38,\\n  \"1486\": 38,\\n  \"1487\": 38,\\n  \"1488\": 38,\\n  \"1489\": 38,\\n  \"1490\": 38,\\n  \"1491\": 38,\\n  \"1492\": 38,\\n  \"1493\": 38,\\n  \"1494\": 38,\\n  \"1495\": 38,\\n  \"1496\": 38,\\n  \"1497\": 38,\\n  \"1498\": 38,\\n  \"1499\": 38,\\n  \"1500\": 38,\\n  \"1501\": 38,\\n  \"1502\": 38,\\n  \"1503\": 38,\\n  \"1504\": 38,\\n  \"1505\": 38,\\n  \"1506\": 38,\\n  \"1507\": 38,\\n  \"1508\": 38,\\n  \"1509\": 38,\\n  \"1510\": 38,\\n  \"1511\": 38,\\n  \"1512\": 38,\\n  \"1513\": 38,\\n  \"1514\": 38,\\n  \"1515\": 38,\\n  \"1516\": 38,\\n  \"1517\": 38,\\n  \"1518\": 38,\\n  \"1519\": 38,\\n  \"1520\": 38,\\n  \"1521\": 39,\\n  \"1522\": 39,\\n  \"1523\": 39,\\n  \"1524\": 39,\\n  \"1525\": 39,\\n  \"1526\": 39,\\n  \"1527\": 39,\\n  \"1528\": 39,\\n  \"1529\": 39,\\n  \"1530\": 39,\\n  \"1531\": 39,\\n  \"1532\": 39,\\n  \"1533\": 39,\\n  \"1534\": 39,\\n  \"1535\": 39,\\n  \"1536\": 39,\\n  \"1537\": 39,\\n  \"1538\": 39,\\n  \"1539\": 39,\\n  \"1540\": 39,\\n  \"1541\": 39,\\n  \"1542\": 39,\\n  \"1543\": 39,\\n  \"1544\": 39,\\n  \"1545\": 39,\\n  \"1546\": 39,\\n  \"1547\": 39,\\n  \"1548\": 39,\\n  \"1549\": 39,\\n  \"1550\": 39,\\n  \"1551\": 39,\\n  \"1552\": 39,\\n  \"1553\": 39,\\n  \"1554\": 39,\\n  \"1555\": 39,\\n  \"1556\": 39,\\n  \"1557\": 39,\\n  \"1558\": 39,\\n  \"1559\": 39,\\n  \"1560\": 39,\\n  \"1561\": 39,\\n  \"1562\": 39,\\n  \"1563\": 39,\\n  \"1564\": 39,\\n  \"1565\": 39,\\n  \"1566\": 39,\\n  \"1567\": 39,\\n  \"1568\": 39,\\n  \"1569\": 39,\\n  \"1570\": 39,\\n  \"1571\": 39,\\n  \"1572\": 39,\\n  \"1573\": 39,\\n  \"1574\": 39,\\n  \"1575\": 39,\\n  \"1576\": 39,\\n  \"1577\": 39,\\n  \"1578\": 39,\\n  \"1579\": 39,\\n  \"1580\": 39,\\n  \"1581\": 39,\\n  \"1582\": 39,\\n  \"1583\": 39,\\n  \"1584\": 39,\\n  \"1585\": 39,\\n  \"1586\": 39,\\n  \"1587\": 39,\\n  \"1588\": 39,\\n  \"1589\": 39,\\n  \"1590\": 39,\\n  \"1591\": 39,\\n  \"1592\": 39,\\n  \"1593\": 39,\\n  \"1594\": 39,\\n  \"1595\": 39,\\n  \"1596\": 39,\\n  \"1597\": 39,\\n  \"1598\": 39,\\n  \"1599\": 39,\\n  \"1600\": 40,\\n  \"1601\": 40,\\n  \"1602\": 40,\\n  \"1603\": 40,\\n  \"1604\": 40,\\n  \"1605\": 40,\\n  \"1606\": 40,\\n  \"1607\": 40,\\n  \"1608\": 40,\\n  \"1609\": 40,\\n  \"1610\": 40,\\n  \"1611\": 40,\\n  \"1612\": 40,\\n  \"1613\": 40,\\n  \"1614\": 40,\\n  \"1615\": 40,\\n  \"1616\": 40\\n}\\n\\nvar mySqrt = function(x) {\\n  return preCalc[x] || parseInt(Math.sqrt(x))\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 165257,
                "title": "a-newton-iteration-solution-beat-100",
                "content": "If we want to solve a given equation f(x)=x^2-a, it is pretty easy to solve it via Newton Iteration.\\n\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/xiderowg/image_1535699152.png)\\n\\nfrom above picture we can see that if we choose a number x0 arbitarily, the intersection of the tangent of the f(x) past the point (x0,f(x0)) and the x-axis,which is (x1,0), is much closer to the real solution (x*,0). After n times iterations, the intersection point (xn,0) will be very close to (x*,0). In this question, we don\\'t need to calculate the very real solution of sqrt(a), so I give a error range, if it is within the range, just return the intersection point, here\\'s the code.\\n```\\npublic class Solution {\\n    public int MySqrt (int x) {\\n        if (x <= 1)\\n            return x;\\n        double assume = x / 2, err = 0.01;\\n        while (Math.Abs (Math.Pow (assume, 2) - x) > err) {\\n            assume = (assume + x / assume) / 2;\\n        }\\n        return (int) Math.Floor (assume);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int MySqrt (int x) {\\n        if (x <= 1)\\n            return x;\\n        double assume = x / 2, err = 0.01;\\n        while (Math.Abs (Math.Pow (assume, 2) - x) > err) {\\n            assume = (assume + x / assume) / 2;\\n        }\\n        return (int) Math.Floor (assume);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 129247,
                "title": "extension-how-to-find-a-root-of-any-number",
                "content": "We know how to get square root, but what about cube root ( x ^ 1/3 )? or arbitary number of root ?\\nThis is the code using tangent line approximation` f(xn+1) ~= f(xn) + f\\'(xn) (xn+1 \\u2212 xn))` to find root of `f(x) = x^n - a ` iteratively\\n\\nFor more info about this method plz read [Square Roots via Newton\\u2019s Method](https://math.mit.edu/~stevenj/18.335/newton-sqrt.pdf)\\n\\n```\\ndef getRoot(a, n = 2):\\n  if a * n == 0: return 0\\n  x0, x1 = a, 0\\n  while x0 > a / (x0 ** (n - 1)): # prevent overflow\\n    x1 = x0 - (x0 ** n - a) / (n * x0 ** (n - 1))\\n    if x0 == x1: break\\n    x0 = x1\\n  return x0\\n\\n>>getRoot(16, 4)\\n>>2\\n>>getRoot(7, 3)\\n>>1.7320508075688772\\n```",
                "solutionTags": [],
                "code": "```\\ndef getRoot(a, n = 2):\\n  if a * n == 0: return 0\\n  x0, x1 = a, 0\\n  while x0 > a / (x0 ** (n - 1)): # prevent overflow\\n    x1 = x0 - (x0 ** n - a) / (n * x0 ** (n - 1))\\n    if x0 == x1: break\\n    x0 = x1\\n  return x0\\n\\n>>getRoot(16, 4)\\n>>2\\n>>getRoot(7, 3)\\n>>1.7320508075688772\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 25172,
                "title": "o-logn-java-generic-binary-search-solution",
                "content": "Generic binary search, `int mid = lo + (hi - lo) / 2 + 1;` gives preference on right value, so this way we are searching for the largest mid value that satisfy the condition, which is what sqrt(x) requires.\\n\\n    public int mySqrt(int x) {\\n        int lo = 1, hi = x;\\n        while(lo < hi) {\\n            int mid = lo + (hi - lo) / 2 + 1;\\n            if(mid > x / mid) {\\n                hi = mid - 1;\\n            } else {\\n                lo = mid;\\n            }\\n        }\\n        return hi;\\n    }",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "Generic binary search, `int mid = lo + (hi - lo) / 2 + 1;` gives preference on right value, so this way we are searching for the largest mid value that satisfy the condition, which is what sqrt(x) requires.\\n\\n    public int mySqrt(int x) {\\n        int lo = 1, hi = x;\\n        while(lo < hi) {\\n            int mid = lo + (hi - lo) / 2 + 1;\\n            if(mid > x / mid) {\\n                hi = mid - 1;\\n            } else {\\n                lo = mid;\\n            }\\n        }\\n        return hi;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 25261,
                "title": "my-python-solution-cost-77ms",
                "content": "The main thought of my algorithm is binary search. Cost 77ms.\\n\\n    class Solution:\\n        # @param x, an integer\\n        # @return an integer\\n        def sqrt(self, x):\\n            if x == 0:\\n                return 0\\n            low = 1\\n            high = x\\n            mark = 1\\n            while low != high - 1:\\n                mid = (high + low) / 2\\n                if mid * mid > x:\\n                    high = mid\\n                elif mid * mid < x:\\n                    mark = mid\\n                    low = mid\\n                else:\\n                    return mid\\n            return mark\\n\\nAnd I changed **yuyibestman** and **tyuan73**'s java codes which using math method  into python and improved a little bit. Cost 79ms.\\n\\n    class Solution:\\n        # @param x, an integer\\n        # @return an integer\\n        def sqrt(self, x):\\n            ans = 0\\n            bit = 1l << 15\\n            while bit > 0:\\n                ans |= bit\\n                if ans * ans > x:\\n                    ans ^= bit\\n                bit >>= 1\\n            return int(ans)\\n\\nWish these codes can help you.",
                "solutionTags": [
                    "Python"
                ],
                "code": "The main thought of my algorithm is binary search. Cost 77ms.\\n\\n    class Solution:\\n        # @param x, an integer\\n        # @return an integer\\n        def sqrt(self, x):\\n            if x == 0:\\n                return 0\\n            low = 1\\n            high = x\\n            mark = 1\\n            while low != high - 1:\\n                mid = (high + low) / 2\\n                if mid * mid > x:\\n                    high = mid\\n                elif mid * mid < x:\\n                    mark = mid\\n                    low = mid\\n                else:\\n                    return mid\\n            return mark\\n\\nAnd I changed **yuyibestman** and **tyuan73**'s java codes which using math method  into python and improved a little bit. Cost 79ms.\\n\\n    class Solution:\\n        # @param x, an integer\\n        # @return an integer\\n        def sqrt(self, x):\\n            ans = 0\\n            bit = 1l << 15\\n            while bit > 0:\\n                ans |= bit\\n                if ans * ans > x:\\n                    ans ^= bit\\n                bit >>= 1\\n            return int(ans)\\n\\nWish these codes can help you.",
                "codeTag": "Java"
            },
            {
                "id": 3895581,
                "title": "babylonian-method",
                "content": "# Intuition\\nBabylonian method(learn calculus..!)\\n\\n# Approach\\nseries of function An+1=0.5*(An+x/An) to be iterated 50 times to get approx value of sqrt(x) \\n50 iterations is lower bound and might increase for higher values.\\n\\n# Complexity\\n- Time complexity:O(1)\\n\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\ndouble mySqrt(double x){\\n    double n=1.0;\\n    if (x!=0)\\n    {\\n        for(int i=0;i<50;i++)\\n        {\\n            n=0.5*(n+x/n);\\n        }\\n        return n;\\n    }\\n    else \\n    return 0;\\n    \\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\ndouble mySqrt(double x){\\n    double n=1.0;\\n    if (x!=0)\\n    {\\n        for(int i=0;i<50;i++)\\n        {\\n            n=0.5*(n+x/n);\\n        }\\n        return n;\\n    }\\n    else \\n    return 0;\\n    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3097751,
                "title": "newton-raphson-method-93-beats",
                "content": "\\n# Code\\n```\\nfunction mySqrt(x: number): number {\\n    let result = x;\\n    let precision = 0.00001;\\n    while (Math.abs(x - result * result) > precision) {\\n        result = (result + x / result) / 2\\n    }\\n    return Math.floor(result)\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Math"
                ],
                "code": "```\\nfunction mySqrt(x: number): number {\\n    let result = x;\\n    let precision = 0.00001;\\n    while (Math.abs(x - result * result) > precision) {\\n        result = (result + x / result) / 2\\n    }\\n    return Math.floor(result)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2914629,
                "title": "binary-search-simple-sol-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nbinary search needed\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(log n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n         if(x==0){\\n          return 0;\\n         }\\n          int low=1,high=x,ans=0;\\n             while(low<=high){\\n             \\n             int mid=(low+high)/2;\\n             \\n             if(mid<=x/mid){\\n                 ans=mid;\\n                 low=mid+1;\\n                }\\n             else\\n             high=mid-1; \\n            }\\n        return ans;\\n    }\\n}\\n \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n         if(x==0){\\n          return 0;\\n         }\\n          int low=1,high=x,ans=0;\\n             while(low<=high){\\n             \\n             int mid=(low+high)/2;\\n             \\n             if(mid<=x/mid){\\n                 ans=mid;\\n                 low=mid+1;\\n                }\\n             else\\n             high=mid-1; \\n            }\\n        return ans;\\n    }\\n}\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2866992,
                "title": "rust-solution-without-overflow-checks-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can use a binary search algorithm that checks perfect squares and comparing them to $x$. For this we need to define a lower and upper bound, which would sensibly be at least $\\\\bigl[0, x\\\\bigr]$. However, we can do a little better and get a way smaller search interval.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nWe know that the square root can at most be $x / 2$ so that would be the most intuitive upper bound. However, using $x/2$ can quickly result in overflows if $x$ is too large, which is the case in some of the test cases. To solve this problem, we can define a maximum upper bound by using the maximum integer root $\\\\lfloor\\\\sqrt{2^{31}-1}\\\\rfloor = 46340$.\\n\\nTo be optimal, we then choose our upper bound as $\\\\text{upper} = \\\\min\\\\{x/2, 46340\\\\}$. We end up with a binary search on the interval $\\\\bigl[2, \\\\min\\\\{x/2, 46340\\\\}\\\\bigr]$.\\n\\n# Complexity\\n- Time complexity: $$O(\\\\log n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nuse std::cmp::Ordering;\\n\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        if x == 0 { // non-negative => 0 is allowed\\n            return 0;\\n        }\\n\\n        let mut lower = 2;\\n        let mut higher = 46340.min(x / 2); // max possible root sqrt(i32::MAX)\\n\\n        // Boundary conditions for optimization\\n\\n        if x <= 3 {\\n            return 1;\\n        }\\n\\n        if x >= higher * higher {\\n            return higher;\\n        }\\n\\n        // Binary search the correct perfect square\\n\\n        while higher - lower > 1 {\\n            let mid = (higher + lower) / 2;\\n            let pow = mid * mid;\\n            match pow.cmp(&x) {\\n                Ordering::Less => {\\n                    lower = mid;\\n                }\\n                Ordering::Greater => {\\n                    higher = mid;\\n                }\\n                _ => {\\n                    return mid;\\n                }\\n            }\\n        }\\n\\n        // In the edge case that the number is between 2 values,\\n        // we take the lower which is equivalent to taking the floored mean\\n        lower\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Math",
                    "Binary Search"
                ],
                "code": "```\\nuse std::cmp::Ordering;\\n\\nimpl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        if x == 0 { // non-negative => 0 is allowed\\n            return 0;\\n        }\\n\\n        let mut lower = 2;\\n        let mut higher = 46340.min(x / 2); // max possible root sqrt(i32::MAX)\\n\\n        // Boundary conditions for optimization\\n\\n        if x <= 3 {\\n            return 1;\\n        }\\n\\n        if x >= higher * higher {\\n            return higher;\\n        }\\n\\n        // Binary search the correct perfect square\\n\\n        while higher - lower > 1 {\\n            let mid = (higher + lower) / 2;\\n            let pow = mid * mid;\\n            match pow.cmp(&x) {\\n                Ordering::Less => {\\n                    lower = mid;\\n                }\\n                Ordering::Greater => {\\n                    higher = mid;\\n                }\\n                _ => {\\n                    return mid;\\n                }\\n            }\\n        }\\n\\n        // In the edge case that the number is between 2 values,\\n        // we take the lower which is equivalent to taking the floored mean\\n        lower\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2667045,
                "title": "c-newton-s-method",
                "content": "```cpp\\n// Given a non-negative integer, returns the square root of x.\\n// The decimal digits are truncated in the result.\\nint mySqrt(int x) {\\n  double t = x;  // start with x\\n  // update until the error is acceptable\\n  // the diff is between t * t and x rather than t_k and t_k+1 which can be\\n  // really small 1e-2\\n  while (t * t - x >= 1) t = 0.5 * (t + x / t);\\n  return t;\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// Given a non-negative integer, returns the square root of x.\\n// The decimal digits are truncated in the result.\\nint mySqrt(int x) {\\n  double t = x;  // start with x\\n  // update until the error is acceptable\\n  // the diff is between t * t and x rather than t_k and t_k+1 which can be\\n  // really small 1e-2\\n  while (t * t - x >= 1) t = 0.5 * (t + x / t);\\n  return t;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2383861,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        long answer = 0;\\n        while (answer * answer <= x) {\\n            answer += 1;\\n        }\\n        return (int)answer - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        long answer = 0;\\n        while (answer * answer <= x) {\\n            answer += 1;\\n        }\\n        return (int)answer - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2205898,
                "title": "c-easy-explained-binary-search",
                "content": "**Idea :** We will use Binary Search in the range [1, X/2]\\n* Upper Bound will be X/2 as for any number X, its Square root is always less than x/2. \\n\\nUpvote the solution if you find it useful :)\\n\\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if(x < 2) return x;\\n        long long l = 1, r = x/2;\\n        \\n        while(l<r){\\n            long long mid = (l+r)/2;\\n            if(mid*mid == x) return mid;\\n            else if(mid*mid > x) r=mid-1;\\n            else l = mid+1;\\n        }\\n        return (l*l <= x) ? l : l-1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if(x < 2) return x;\\n        long long l = 1, r = x/2;\\n        \\n        while(l<r){\\n            long long mid = (l+r)/2;\\n            if(mid*mid == x) return mid;\\n            else if(mid*mid > x) r=mid-1;\\n            else l = mid+1;\\n        }\\n        return (l*l <= x) ? l : l-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2160206,
                "title": "simple-python-solution",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        index = 1\\n        while index*index <= x:\\n            index += 1\\n        return index-1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        index = 1\\n        while index*index <= x:\\n            index += 1\\n        return index-1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2117654,
                "title": "square-root-using-binary-search-efficient-o-logn",
                "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int low =  0;\\n        int high = x;\\n        int ans = 1;\\n        while(low<=high){\\n            long long mid =  low + (high- low)/2;\\n            if(mid*mid <= x){\\n                ans = mid;\\n                low = mid+1;\\n            }\\n            else{\\n                high = mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n\\npls upvote if useful",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int low =  0;\\n        int high = x;\\n        int ans = 1;\\n        while(low<=high){\\n            long long mid =  low + (high- low)/2;\\n            if(mid*mid <= x){\\n                ans = mid;\\n                low = mid+1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1925796,
                "title": "super-easy-solution-based-on-primary-school-maths",
                "content": "Since we only need to know integer part of the result we can use Repeated Subtraction Method which is normally used for perfect squares and assume that since sqrt() is an ascending funciton result will be correct till next perfect square\\n\\n```\\nclass Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        i = 1\\n        j = 0\\n        while x - i >= 0:\\n            x = x - i\\n            i += 2\\n            j += 1\\n            \\n        return j\\n            \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        i = 1\\n        j = 0\\n        while x - i >= 0:\\n            x = x - i\\n            i += 2\\n            j += 1\\n            \\n        return j\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1867232,
                "title": "4-approaches-brute-force-exponent-binary-search-and-the-newton-s-method",
                "content": "[Leetcode](https://leetcode.com/) [69. Sqrt(x)](https://leetcode.com/problems/sqrtx).\\n\\n***By Frank Luo***\\n\\nHere shows $4$ approaches for finding the square root of a number: Brute Force, Exponent, **Binary Search** and the **Newton\\'s Iteration Method**.\\n\\nGiven an integer $N$ and a tolerance level $L$, the task is to find the square root of that number.\\n\\n# Brute Force\\n\\nThe Brute Force way is very easy, just enumerate a value from $0$ to $x$, check the product $i^2$ and target, return the answer.\\n\\n```java\\n    public static int mySqrt(int x) {\\n        if (x == 0 || x == 1) {\\n            return x;\\n        }\\n\\n        for (int i = 0; i < x; i++) {\\n            long sum = i * i;\\n            long bigger = (long) (i + 1) * (i + 1);\\n            if (sum == x) {\\n                return i;\\n            } else if (sum < x && bigger > x) {\\n                return i;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(n)$\\n- **Space Complexity**: $O(1)$.\\n\\n# Exponent \\n\\nNoted that: \\n\\n$$\\n\\\\sqrt{x} = x^{1/2} = (e ^ {\\\\ln x})^{1/2} = e^{\\\\frac{1}{2} \\\\ln x}\\n$$\\n\\nSo we can use the exponent $\\\\exp$ and logarithm $\\\\ln$ to calculate the square root of the number $\\\\sqrt{x}$. \\n\\nIt\\'s really a fast and simple way!\\n\\nNote: Since the computer can\\'t store the exact value of the float number, and the parameters and return values of the exponential function and logarithmic function are float numbers, so the result may be wrong. \\n\\nFor example, when $x = 2147395600$, the result of $e^{\\\\frac{1}{2} \\\\ln x}$ is $10^{-11}$ from the correct value of $46340$, so when taking the integer part of the result, you will get the wrong result of $46339$.\\n\\nSo after getting the integer part $\\\\textit{ans}$ of the result, we should find out which of $\\\\textit{ans}$ and $\\\\textit{ans} + 1$ is the real answer.\\n\\n```java\\n    // Exp O(1) O(1)\\n    public static int mySqrt_exp(int x) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        int ans = (int) Math.exp(0.5 * Math.log(x));\\n        return (long) (ans + 1) * (ans + 1) <= x ? ans + 1 : ans;\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(1)$\\n- **Space Complexity**: $O(1)$.\\n\\n# Binary Search\\n\\nWe can use Binary Search to solve this problem.\\n\\nLet the square root of $x$ is $k$, $k^2 \\\\leq x$. The lower bound is $0$, and the upper bound is $x$. In each step, we need to compare the middle element $mid^2 \\\\leq x$ or $mid^2 > x$, adjust the range of the upper and lower bounds. \\n\\nSince all our operations are integer operations, there is no error, so after getting the final answer $\\\\textit{ans}$, there is no need to try $\\\\textit{ans} + 1$ again.\\n\\n```java\\n    public static int mySqrt_bs_opt(int x) {\\n        if (x <= 1) {\\n            return x;\\n        }\\n\\n        int left = 1;\\n        int right = x / 2;\\n        while (left < right) {\\n            int mid = left + (right - left + 1) / 2;\\n            if (mid > x / mid) {\\n                right = mid - 1;\\n            } else {\\n                left = mid;\\n            }\\n        }\\n\\n        return left;\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(\\\\log x)$\\n- **Space Complexity**: $O(1)$.\\n\\n# Newton\\'s Method\\n\\nThe **Newton\\'s Method** is:\\n\\nLet $N$ be any number then the square root of $N$ can be given by the formula:\\n\\n$$\\nroot = 0.5 \\\\times (X + (N / X))\\n$$\\n\\nwhere $X$ is any guess which can be assumed to be $N$ or $1$. \\n\\n1. In the above formula, $X$ is any assumed square root of $N$ and root is the correct square root of $N$.\\n2. **Tolerance limit** is the maximum difference between $X$ and root allowed.\\n\\nBut how to understand this method?\\n\\nIf we want to find the **square root** of the integer $N$. Obviously, the square root of $N$ is the function $y = f(x) = x^2 - N$ of zero.\\n\\n![Newton Iteration Method](https://assets.leetcode.com/users/images/fa60c623-19d9-4c11-9265-6caf7d713124_1647778616.7749531.png)\\n\\nWe take any $x_n$ as an initial value, at each iteration of the step. We find the point $(x_n, f(x_n))$ on the image of the function, make a slope through this point, the derivative of this point $f\\'(x_n)$, the intersection with the horizontal axis is denoted as $x_{n+1}$ compared to $x_n$. It\\'s closer to zero. \\n\\nThe equation of the straight line is:\\n\\n$$\\n2 \\\\times x_n = (x_n^2 - N) / (x_n - x)\\n$$\\n\\nThe intersection with the horizontal axis is the equation:\\n\\n$$\\n2 \\\\times x_n \\\\times x - (x_n^2 + N) = 0\\n$$\\n\\nwhich is the new iteration result $x_{n+1}$:\\n\\n$$\\nx_{n+1} = 0.5 \\\\times (x_n + N / x_n)\\n$$\\n\\nAfter iterations, the value of the true zero point $sqrt(N)$ is close enough to be an answer.\\n\\nThere comes two questions:\\n1. Which initial value do we assign?\\n2. When does the iteration end?\\n\\n### Initial value\\n\\nAs mentioned **rule 1**, we assign $X$ to the $N$ itself because we want to find the  positive $sqrt(N)$ and $N$ is surely larger than $sqrt(N)$.\\n\\n### Ending iteration \\n\\nAfter each iteration, the answer is closer to the zero point. So when the intersection obtained from two adjacent iterations is very close, we can conclude that the result at this time is enough for us to get the answer. \\n\\nAs mentioned **rule 2**, if the calculated root comes inside the tolerance allowed then break out of the loop. \\n\\nIn general, it can be judged whether the difference between the results of two adjacent iterations is less than a very small non-negative number.\\n\\n```java\\n    public static int mySqrt_newton(int x) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        double N = x;\\n        double x0 = x;\\n        while (true) {\\n            double xi = 0.5 * (x0 + N / x0);\\n            if (Math.abs(x0 - xi) < 1e-7) {\\n                break;\\n            }\\n            x0 = xi;\\n        }\\n\\n        return (int) x0;\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(\\\\log x)$\\n- **Space Complexity**: $O(1)$.\\n\\n--------------------------\\n\\nAll suggestions are welcome. \\nIf you have any query or suggestion please comment below.\\nPlease upvote\\uD83D\\uDC4D if you like\\uD83D\\uDC97 it. Thank you:-)\\n\\nExplore More [Leetcode Solutions](https://leetcode.com/discuss/general-discussion/1868912/My-Leetcode-Solutions-All-In-One). \\uD83D\\uDE09\\uD83D\\uDE03\\uD83D\\uDC97\\n\\n",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Binary Search"
                ],
                "code": "```java\\n    public static int mySqrt(int x) {\\n        if (x == 0 || x == 1) {\\n            return x;\\n        }\\n\\n        for (int i = 0; i < x; i++) {\\n            long sum = i * i;\\n            long bigger = (long) (i + 1) * (i + 1);\\n            if (sum == x) {\\n                return i;\\n            } else if (sum < x && bigger > x) {\\n                return i;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n```\n```java\\n    // Exp O(1) O(1)\\n    public static int mySqrt_exp(int x) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        int ans = (int) Math.exp(0.5 * Math.log(x));\\n        return (long) (ans + 1) * (ans + 1) <= x ? ans + 1 : ans;\\n    }\\n```\n```java\\n    public static int mySqrt_bs_opt(int x) {\\n        if (x <= 1) {\\n            return x;\\n        }\\n\\n        int left = 1;\\n        int right = x / 2;\\n        while (left < right) {\\n            int mid = left + (right - left + 1) / 2;\\n            if (mid > x / mid) {\\n                right = mid - 1;\\n            } else {\\n                left = mid;\\n            }\\n        }\\n\\n        return left;\\n    }\\n```\n```java\\n    public static int mySqrt_newton(int x) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        double N = x;\\n        double x0 = x;\\n        while (true) {\\n            double xi = 0.5 * (x0 + N / x0);\\n            if (Math.abs(x0 - xi) < 1e-7) {\\n                break;\\n            }\\n            x0 = xi;\\n        }\\n\\n        return (int) x0;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1731478,
                "title": "java-binary-search-solution",
                "content": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        /*\\n        * We will be using binary search approach in this solution\\n        * For example, if we have to find the square root of number 38\\n        * the sqrt of number 38 will be lying somewhere between 0-38 only\\n        * and this is in sorted form so we simply keep applying the binary search\\n        * and keep storing the closest possible if acurate result is not available\\n        * for that number\\n        */\\n        if(x==1) {\\n            return 1;\\n        }\\n        int low=0, high=x-1, ans=0;\\n        while(low<=high) {\\n            long mid = low + (high-low)/2;\\n            if(mid*mid == x) {\\n                return (int)mid;\\n            }\\n            else if(mid*mid < x) {\\n                ans = (int)mid;\\n                low = (int)mid+1;\\n            }\\n            else {\\n                high = (int)mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        /*\\n        * We will be using binary search approach in this solution\\n        * For example, if we have to find the square root of number 38\\n        * the sqrt of number 38 will be lying somewhere between 0-38 only\\n        * and this is in sorted form so we simply keep applying the binary search\\n        * and keep storing the closest possible if acurate result is not available\\n        * for that number\\n        */\\n        if(x==1) {\\n            return 1;\\n        }\\n        int low=0, high=x-1, ans=0;\\n        while(low<=high) {\\n            long mid = low + (high-low)/2;\\n            if(mid*mid == x) {\\n                return (int)mid;\\n            }\\n            else if(mid*mid < x) {\\n                ans = (int)mid;\\n                low = (int)mid+1;\\n            }\\n            else {\\n                high = (int)mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1725673,
                "title": "java-why-binary-search-explanation",
                "content": "##  Why Binary Search ?\\n    \\n    As we know realtion between x and x*x increase monotonically\\n\\t(i.e always increasing in nature) so the intution is as follows.\\n    \\n    The square root of number would lie between 0<= (Square Root)< x \\n\\t(where x is number itself) so we can apply BS where start =0 and end =x\\n    calculate mid and if(mid*mid == x) then mid is ans and if(mid*mid < x)\\n\\tthen it is sure that all number\\'s square before mid would be smaller than x \\n\\t, Hence we would search in right hand side of mid i.e start = mid+1.\\n    Notice , But mid could be posible ans too ( For Example condider x = 8) so \\n\\tstore mid in ans variable\\n    \\n    In case when mid*mid > x then we would search in left hand side of mid by doing this \\n\\t: end = mid-1;\\n\\t\\n\\t```\\n\\t\\n    public int mySqrt(int x) {\\n        if(x == 0 )\\n            return 0;\\n        if(x == 1 )\\n            return 1;\\n        int ans = BinarySearch(x);\\n        return ans;\\n    }\\n    public int BinarySearch(int x)\\n    {\\n        long start = 0;\\n        long end = x;\\n        long ans =0;\\n        \\n        while(start <= end)\\n        {\\n            long mid = start +(end-start)/2;\\n            \\n            if(mid == x/mid)\\n            {\\n                return (int)mid;\\n            }\\n            else if(mid < x/mid)\\n            {\\n                ans = mid;\\n                start =mid+1;\\n            }\\n            else{\\n                end = mid-1;\\n            }\\n        }\\n        return (int)ans;\\n        \\n    }\\n",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "##  Why Binary Search ?\\n    \\n    As we know realtion between x and x*x increase monotonically\\n\\t(i.e always increasing in nature) so the intution is as follows.\\n    \\n    The square root of number would lie between 0<= (Square Root)< x \\n\\t(where x is number itself) so we can apply BS where start =0 and end =x\\n    calculate mid and if(mid*mid == x) then mid is ans and if(mid*mid < x)\\n\\tthen it is sure that all number\\'s square before mid would be smaller than x \\n\\t, Hence we would search in right hand side of mid i.e start = mid+1.\\n    Notice , But mid could be posible ans too ( For Example condider x = 8) so \\n\\tstore mid in ans variable\\n    \\n    In case when mid*mid > x then we would search in left hand side of mid by doing this \\n\\t: end = mid-1;\\n\\t\\n\\t```\\n\\t\\n    public int mySqrt(int x) {\\n        if(x == 0 )\\n            return 0;\\n        if(x == 1 )\\n            return 1;\\n        int ans = BinarySearch(x);\\n        return ans;\\n    }\\n    public int BinarySearch(int x)\\n    {\\n        long start = 0;\\n        long end = x;\\n        long ans =0;\\n        \\n        while(start <= end)\\n        {\\n            long mid = start +(end-start)/2;\\n            \\n            if(mid == x/mid)\\n            {\\n                return (int)mid;\\n            }\\n            else if(mid < x/mid)\\n            {\\n                ans = mid;\\n                start =mid+1;\\n            }\\n            else{\\n                end = mid-1;\\n            }\\n        }\\n        return (int)ans;\\n        \\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1668392,
                "title": "python-easy-o-log-number-solution",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x <= 1:\\n            return x\\n        \\n        l, r = 0, x\\n        ans = 0\\n        while l < r:\\n            mid = (l+r)//2\\n            if mid*mid <= x:\\n                ans = mid\\n                l = mid + 1\\n            else:\\n                r = mid\\n                \\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x <= 1:\\n            return x\\n        \\n        l, r = 0, x\\n        ans = 0\\n        while l < r:\\n            mid = (l+r)//2\\n            if mid*mid <= x:\\n                ans = mid\\n                l = mid + 1\\n            else:\\n                r = mid\\n                \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1537772,
                "title": "c-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if(x <= 1)\\n            return x;\\n\\n        int lo = 1, hi = x / 2, ans;\\n\\n        while(lo <= hi) {\\n            int mid = (lo + hi) >> 1;\\n\\n            if(mid <= x / mid)\\n                ans = mid, lo = mid + 1;\\n            else\\n                hi = mid - 1;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if(x <= 1)\\n            return x;\\n\\n        int lo = 1, hi = x / 2, ans;\\n\\n        while(lo <= hi) {\\n            int mid = (lo + hi) >> 1;\\n\\n            if(mid <= x / mid)\\n                ans = mid, lo = mid + 1;\\n            else\\n                hi = mid - 1;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1490446,
                "title": "99-26-faster-using-binary-search-sqrt-x",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=0\\n        high=x\\n        while(low<=high):\\n            mid=low+(high-low)//2\\n            if (mid*mid<=x and (mid+1)*(mid+1)>x):\\n                return mid\\n            elif mid*mid<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n        return low\\n```\\nFor any doubts or suggestion : comment\\nUpvote if you liked the solution",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=0\\n        high=x\\n        while(low<=high):\\n            mid=low+(high-low)//2\\n            if (mid*mid<=x and (mid+1)*(mid+1)>x):\\n                return mid\\n            elif mid*mid<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n        return low\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1358659,
                "title": "cpp-easy-soltuion-two-approaches",
                "content": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n//        basically we want value of y such that y*y<=x where y is max value\\n//         Method 1 (Linear Seacrh)\\n//         TC=o(sqrt(n));\\n        \\n//         long long y=1;\\n        \\n//         while(y*y<=x){\\n//             y++;\\n//         }\\n        \\n//         return y-1;\\n        \\n//         Method 2 (Binary Search)\\n        \\n        long long  low=0;\\n        long long high=INT_MAX,ans=0;\\n        \\n        while(low<=high){\\n            \\n        long long mid=low+(high-low)/2;\\n            if(mid*mid<=x){\\n                ans=mid; \\n//                 one of the possible ans so storing it\\n                low=mid+1;\\n            }\\n            else{\\n                high=mid-1;\\n            }\\n        \\n    }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n//        basically we want value of y such that y*y<=x where y is max value\\n//         Method 1 (Linear Seacrh)\\n//         TC=o(sqrt(n));\\n        \\n//         long long y=1;\\n        \\n//         while(y*y<=x){\\n//             y++;\\n//         }",
                "codeTag": "Java"
            },
            {
                "id": 1197298,
                "title": "weeb-does-python-2-methods",
                "content": "\\n\\tfrom math import sqrt, floor\\n\\tclass Solution:\\n\\t\\tdef mySqrt(self, x: int) -> int:\\n\\t\\t\\tif x == 0: return 0\\n\\t\\t\\tif x == 1: return 1\\n\\t\\t\\tlow, high = 0, x\\n\\n\\t\\t\\twhile low<high:\\n\\t\\t\\t\\tmid = low + (high-low)//2\\n\\n\\t\\t\\t\\tif mid ** 2 <= x:\\n\\t\\t\\t\\t\\tlow = mid + 1\\n\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\thigh = mid\\n\\n\\t\\t\\treturn low-1\\n\\t\\t\\t# method2, which is faster and better bruh\\n\\t\\t\\t\"\"\"\\n\\t\\t\\treturn floor(sqrt(x))\\n\\t\\t\\t\"\"\"\\n\\nAight coders, its time for some anime recommendations\\nThis time, try checking out **Ansatsu Ky\\u014Dshitsu(Assassination Classroom)**\\n\\n# Episodes: 47 + 1 OVA \\n# Genres: Action fiction, Comedy, Science Fiction\\n\\nWanna watch an overpowered octopus? Then check this out",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "\\n\\tfrom math import sqrt, floor\\n\\tclass Solution:\\n\\t\\tdef mySqrt(self, x: int) -> int:\\n\\t\\t\\tif x == 0: return 0\\n\\t\\t\\tif x == 1: return 1\\n\\t\\t\\tlow, high = 0, x\\n\\n\\t\\t\\twhile low<high:\\n\\t\\t\\t\\tmid = low + (high-low)//2\\n\\n\\t\\t\\t\\tif mid ** 2 <= x:\\n\\t\\t\\t\\t\\tlow = mid + 1\\n\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\thigh = mid\\n\\n\\t\\t\\treturn low-1\\n\\t\\t\\t# method2, which is faster and better bruh\\n\\t\\t\\t\"\"\"\\n\\t\\t\\treturn floor(sqrt(x))\\n\\t\\t\\t\"\"\"\\n\\nAight coders, its time for some anime recommendations\\nThis time, try checking out **Ansatsu Ky\\u014Dshitsu(Assassination Classroom)**\\n\\n# Episodes: 47 + 1 OVA \\n# Genres: Action fiction, Comedy, Science Fiction\\n\\nWanna watch an overpowered octopus? Then check this out",
                "codeTag": "Java"
            },
            {
                "id": 1133794,
                "title": "binary-search-solution-with-explanation",
                "content": "You can use different methods to solve it;\\n1) sqrt(x) :P\\n2) linear search\\n3) binary search\\n4) any other searching algorithm\\n\\n```\\n// space O(1)\\n// time O(log(n))\\n\\nclass Solution \\n{\\npublic:\\n    int mySqrt(int x) \\n    {\\n        int l=1;    // dont use 0, it will cause divide by 0 error\\n        int h=x;    // this will be the maximum possible value\\n        int m;      // calculate middle    \\n        \\n        while ( l<=h ) {            // binary search\\n            m = l + (h-l)/2;        // use this to avoid integer overflow\\n            if ( m == x/m ) {       // instead of m*m == x, use this to avoid overflow\\n                return m;\\n            }\\n            else if ( m > x/m ) {   // if the m*m is bigger than x, then move to smaller numbers\\n                h = m-1;\\n            }\\n            else {                  // move to bigger numbers\\n                l = m+1;\\n            }\\n        }\\n        \\n        return l-1;                 // display low-1\\n    }\\n};\\n```\\n\\n**If this answer was helpful, please upvote it!**",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\n// space O(1)\\n// time O(log(n))\\n\\nclass Solution \\n{\\npublic:\\n    int mySqrt(int x) \\n    {\\n        int l=1;    // dont use 0, it will cause divide by 0 error\\n        int h=x;    // this will be the maximum possible value\\n        int m;      // calculate middle    \\n        \\n        while ( l<=h ) {            // binary search\\n            m = l + (h-l)/2;        // use this to avoid integer overflow\\n            if ( m == x/m ) {       // instead of m*m == x, use this to avoid overflow\\n                return m;\\n            }\\n            else if ( m > x/m ) {   // if the m*m is bigger than x, then move to smaller numbers\\n                h = m-1;\\n            }\\n            else {                  // move to bigger numbers\\n                l = m+1;\\n            }\\n        }\\n        \\n        return l-1;                 // display low-1\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1041705,
                "title": "c-solution-100-faster-two-approaches",
                "content": "Naive solution by simple checking\\nTime complexity = O(N) \\n```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if(x==0) return 0;\\n        if(x<4) return 1;\\n        int ans;\\n        for(long long int i=2; i<=x/2+1; i++) {\\n            if(i*i==x || i+1<=x/2+1 && (i*i<x && (i+1)*(i+1)>x)) {\\n                ans= i;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\nEfficient soution using Binary search\\nTime complexity= O(logN)\\n```\\nclass Solution {\\npublic:\\n    long long binarySearch(int x) {\\n        long long  s=2, e=x/2+1, mid;        \\n        while(s<=e) {\\n            mid= s+(e-s)/2;\\n            if(mid*mid==x || mid*mid<x && (mid+1)*(mid+1)>x) break;\\n            else if(mid*mid>x) e=mid-1;\\n            else s=mid+1;\\n        }\\n        return mid;\\n    }\\n    \\n    int mySqrt(int x) {\\n        if(x==0) return 0;\\n        if(x<4) return 1;        \\n        return binarySearch(x);\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        if(x==0) return 0;\\n        if(x<4) return 1;\\n        int ans;\\n        for(long long int i=2; i<=x/2+1; i++) {\\n            if(i*i==x || i+1<=x/2+1 && (i*i<x && (i+1)*(i+1)>x)) {\\n                ans= i;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 941615,
                "title": "python-a-nice-and-short-binary-search",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        l = 1\\n        r = x\\n        while l <= r:\\n            mid = (l + r) // 2\\n            if mid * mid <= x:\\n                l = mid + 1\\n            else:\\n                r = mid - 1\\n                \\n        return l - 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        l = 1\\n        r = x\\n        while l <= r:\\n            mid = (l + r) // 2\\n            if mid * mid <= x:\\n                l = mid + 1\\n            else:\\n                r = mid - 1\\n                \\n        return l - 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 208955,
                "title": "solution-in-swift",
                "content": "```\\nfunc mySqrt(_ x: Int) -> Int {\\n        var i = 0\\n        while i*i <= x {\\n            i += 1\\n        }\\n        \\n        return i-1\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nfunc mySqrt(_ x: Int) -> Int {\\n        var i = 0\\n        while i*i <= x {\\n            i += 1\\n        }\\n        \\n        return i-1\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 25053,
                "title": "here-is-my-c-solution-by-binary-search",
                "content": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        \\n        if(x == 1)\\n            return 1;\\n        int start = 1, end = x/2; \\n        while(start <= end){\\n            int mid = (start+end)/2;\\n            if(mid == x/mid)\\n                return mid;\\n            else if(mid < x/mid)\\n                start = mid+1;\\n            else\\n                end = mid-1;\\n        }\\n        \\n        return end;\\n        //0 1 2 3 4 5   3\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        \\n        if(x == 1)\\n            return 1;\\n        int start = 1, end = x/2; \\n        while(start <= end){\\n            int mid = (start+end)/2;\\n            if(mid == x/mid)\\n                return mid;\\n            else if(mid < x/mid)\\n                start = mid+1;\\n            else\\n                end = mid-1;\\n        }\\n        \\n        return end;\\n        //0 1 2 3 4 5   3\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25173,
                "title": "9-line-python-solution-binary-search",
                "content": "    def mySqrt(self, x):\\n        left, right = 0, x\\n        while left <= right:\\n            mid = (left + right) / 2\\n            if mid ** 2 <= x < (mid + 1) ** 2:\\n                return mid\\n            if mid ** 2 > x:\\n                right = mid - 1\\n            else:\\n                left = mid + 1",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "    def mySqrt(self, x):\\n        left, right = 0, x\\n        while left <= right:\\n            mid = (left + right) / 2\\n            if mid ** 2 <= x < (mid + 1) ** 2:\\n                return mid\\n            if mid ** 2 > x:\\n                right = mid - 1\\n            else:\\n                left = mid + 1",
                "codeTag": "Python3"
            },
            {
                "id": 25256,
                "title": "my-c-5ms-solution-using-something-like-binary-search",
                "content": "    int mySqrt(int x) {\\n        if (x<=1) return x;\\n        long long lb=1, rb=x, md;\\n        while(rb-lb>1)\\n        {\\n            md = (rb+lb)/2;\\n            if (md*md==x)\\n                return md;\\n            if (md*md>x)\\n                rb=md;\\n            else\\n                lb=md;\\n        }\\n        if (rb*rb==x)\\n            return rb;\\n        return lb;\\n    }",
                "solutionTags": [],
                "code": "    int mySqrt(int x) {\\n        if (x<=1) return x;\\n        long long lb=1, rb=x, md;\\n        while(rb-lb>1)\\n        {\\n            md = (rb+lb)/2;\\n            if (md*md==x)\\n                return md;\\n            if (md*md>x)\\n                rb=md;\\n            else\\n                lb=md;\\n        }\\n        if (rb*rb==x)\\n            return rb;\\n        return lb;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 25275,
                "title": "how-to-deal-with-long-overflow",
                "content": "I've been struggling with this for quite a while. I want to solve it using a binary search, and my code is quite straightforward, and I think, correct:\\n\\n              if (x < 0) {\\n    \\t\\t\\treturn -1;\\n              }\\n    \\t\\tif (x == 0 || x == 1) {\\n    \\t\\t\\treturn x;\\n    \\t\\t}\\n    \\t    int start = 1;\\n    \\t    int end = x;\\n    \\t    while (start<=end) {\\n    \\t        int mid = start+ (end-start)/2;\\n    \\t        if (mid*mid<=x && (mid+1)*(mid+1)>x) return mid;\\n    \\t        if(mid*mid>x) {\\n    \\t            end = mid-1;\\n    \\t        } else {\\n    \\t            start = mid+1;\\n    \\t        }\\n    \\t    }\\n    \\t    return 0;\\n        \\nOf course, it fails for 2147483647 case, because `mid*mid` causes integer overflow. I've tried dealing with `long` instead:\\n\\n    long tmp = mid*mid;\\n    long tmp1 = (mid+1)*(mid+1)\\n    if (tmp<=x && tmp1>x) return mid;\\n\\nHowever, I get time limit exceeded, because even that overflows.\\nHow to deal with situations like this? What am I missing?",
                "solutionTags": [],
                "code": "I've been struggling with this for quite a while. I want to solve it using a binary search, and my code is quite straightforward, and I think, correct:\\n\\n              if (x < 0) {\\n    \\t\\t\\treturn -1;\\n              }\\n    \\t\\tif (x == 0 || x == 1) {\\n    \\t\\t\\treturn x;\\n    \\t\\t}\\n    \\t    int start = 1;\\n    \\t    int end = x;\\n    \\t    while (start<=end) {\\n    \\t        int mid = start+ (end-start)/2;\\n    \\t        if (mid*mid<=x && (mid+1)*(mid+1)>x) return mid;\\n    \\t        if(mid*mid>x) {\\n    \\t            end = mid-1;\\n    \\t        } else {\\n    \\t            start = mid+1;\\n    \\t        }\\n    \\t    }\\n    \\t    return 0;\\n        \\nOf course, it fails for 2147483647 case, because `mid*mid` causes integer overflow. I've tried dealing with `long` instead:\\n\\n    long tmp = mid*mid;\\n    long tmp1 = (mid+1)*(mid+1)\\n    if (tmp<=x && tmp1>x) return mid;\\n\\nHowever, I get time limit exceeded, because even that overflows.\\nHow to deal with situations like this? What am I missing?",
                "codeTag": "Unknown"
            },
            {
                "id": 3773220,
                "title": "c-hinglish-easy-explanation-binary-search-interview-prep",
                "content": "# Intuition & Approach\\n- Explained in the code\\n\\n# Code\\n```\\nclass Solution\\n{\\n    // LOGIC\\n   \\t// 1. x diya hain uska sqaure root nikalna hain, if decimal then round it nearest integer.\\n   \\t// 2. isme directly nahin nikalna so we will use Binary Search.\\n\\n   \\t// WHY BINARY SEARCH?\\n   \\t// 3. jo bhi no ans hoga wo[1,x] ke beech ka hoga.\\n   \\t// 4. 1 to x sab sorted hain.\\n   \\t// 5. So we can check by taking mid . Id mid^2 is either<=> x so we can change low and high.\\n    // 6. Agar mid^2==x ho gaya the ans = mid else this is a decimal case so return high.\\n    // 7. Returning high because while iterations high will reach very close to the rounded integer. \\n   \\t// 8. Here Exponential Function is nothing special just for comparison.\\n\\n   \\t// ALTERNATIVE\\n   \\t// Alternative was Linear Search but usme time jyada lagta\\n   \\t// Usme bhi 1 to x ham loop chalate aur i ko sqare karke dekhte ki kahin wo eqaul hain ya bada hain x se.\\n   \\t// In that we can use the concept of Power Exponentiation.\\n\\n    //TC - O(log(x)) Binary Search\\n    //SC - O(1)\\n    public:\\n        int Exponential(int m, double mid)\\n        {\\n            long long ans = 1;\\n            for (int i = 1; i <= 2; i++)\\n            {\\n                ans = ans * mid;\\n                if (ans > m)\\n                   \\t//Ans m se bada hua matlab high mid-1 hoga\\n                    return 2;\\n            }\\n            if (ans == m)\\n               \\t//Barabar mil gaya\\n                return 0;\\n            else\\n               \\t//Low mid+1 hoga\\n                return 1;\\n        }\\n    int mySqrt(int x)\\n    {\\n        long long low = 1;\\n        long long high = x;\\n        long long mid;\\n        while (low <= high)\\n        {\\n            mid = (low + high) / 2;\\n            int expoResult = Exponential(x, mid);\\t//Comparison result\\n            if (expoResult == 0)\\t//equal\\n                return mid;\\n            else if (expoResult == 1)\\t//ans < x\\n                low = mid + 1;\\n            else\\n                high = mid - 1;\\t//ans>x\\n        }\\n        return high;\\n    }\\n};\\n```\\n\\n# Complexity\\n- Time complexity: $O(logx)$ Binary Search applied on numbers from 1 to x.\\n\\n- Space complexity: $O(1)$\\n\\nIf you *like* \\uD83D\\uDC4D this solution do *upvote* \\u2B06\\uFE0F and if there is any *improvement or suggestion* do mention it in the *comment* section \\uD83D\\uDE0A.\\n\\n<p align=\"center\">\\n<img src=\"https://assets.leetcode.com/users/images/1b604300-df68-46aa-a267-71f38463bb89_1684820402.7869222.jpeg\" width=\\'350\\' alt=\"Upvote Image\">\\n</p>",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution\\n{\\n    // LOGIC\\n   \\t// 1. x diya hain uska sqaure root nikalna hain, if decimal then round it nearest integer.\\n   \\t// 2. isme directly nahin nikalna so we will use Binary Search.\\n\\n   \\t// WHY BINARY SEARCH?\\n   \\t// 3. jo bhi no ans hoga wo[1,x] ke beech ka hoga.\\n   \\t// 4. 1 to x sab sorted hain.\\n   \\t// 5. So we can check by taking mid . Id mid^2 is either<=> x so we can change low and high.\\n    // 6. Agar mid^2==x ho gaya the ans = mid else this is a decimal case so return high.\\n    // 7. Returning high because while iterations high will reach very close to the rounded integer. \\n   \\t// 8. Here Exponential Function is nothing special just for comparison.\\n\\n   \\t// ALTERNATIVE\\n   \\t// Alternative was Linear Search but usme time jyada lagta\\n   \\t// Usme bhi 1 to x ham loop chalate aur i ko sqare karke dekhte ki kahin wo eqaul hain ya bada hain x se.\\n   \\t// In that we can use the concept of Power Exponentiation.\\n\\n    //TC - O(log(x)) Binary Search\\n    //SC - O(1)\\n    public:\\n        int Exponential(int m, double mid)\\n        {\\n            long long ans = 1;\\n            for (int i = 1; i <= 2; i++)\\n            {\\n                ans = ans * mid;\\n                if (ans > m)\\n                   \\t//Ans m se bada hua matlab high mid-1 hoga\\n                    return 2;\\n            }\\n            if (ans == m)\\n               \\t//Barabar mil gaya\\n                return 0;\\n            else\\n               \\t//Low mid+1 hoga\\n                return 1;\\n        }\\n    int mySqrt(int x)\\n    {\\n        long long low = 1;\\n        long long high = x;\\n        long long mid;\\n        while (low <= high)\\n        {\\n            mid = (low + high) / 2;\\n            int expoResult = Exponential(x, mid);\\t//Comparison result\\n            if (expoResult == 0)\\t//equal\\n                return mid;\\n            else if (expoResult == 1)\\t//ans < x\\n                low = mid + 1;\\n            else\\n                high = mid - 1;\\t//ans>x\\n        }\\n        return high;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467166,
                "title": "python-logic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        if x==1:\\n            return 1\\n        for i in range(1,x+1):\\n            if i*i > x:\\n                return i-1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        if x==1:\\n            return 1\\n        for i in range(1,x+1):\\n            if i*i > x:\\n                return i-1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3462789,
                "title": "java-code-beats-100-runtime",
                "content": "By using Binary Search Approach\\nT.C: O(logn)\\n\\n# Code\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        \\n        int low = 1, high = x;\\n        if((x==0)||(x==1)){\\n            return x;\\n        }\\n\\n        while (low<=high) {\\n            int mid = (low+high)/2;\\n            if(x/mid==mid){\\n                return mid;\\n            }\\n            else if(x/mid<mid){\\n                high=mid-1;\\n            }\\n            else if(x/mid>mid){\\n                low=mid+1;\\n            }\\n            \\n        }\\n        return high;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        \\n        int low = 1, high = x;\\n        if((x==0)||(x==1)){\\n            return x;\\n        }\\n\\n        while (low<=high) {\\n            int mid = (low+high)/2;\\n            if(x/mid==mid){\\n                return mid;\\n            }\\n            else if(x/mid<mid){\\n                high=mid-1;\\n            }\\n            else if(x/mid>mid){\\n                low=mid+1;\\n            }\\n            \\n        }\\n        return high;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3314231,
                "title": "python-3-easy-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x < 2:\\n            return x;\\n        low, high = 1, x\\n        while low <= high:\\n            mid = (low + high) // 2\\n            if mid * mid == x:\\n                return mid\\n            elif mid * mid < x:\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n        return high\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x < 2:\\n            return x;\\n        low, high = 1, x\\n        while low <= high:\\n            mid = (low + high) // 2\\n            if mid * mid == x:\\n                return mid\\n            elif mid * mid < x:\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n        return high\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3118551,
                "title": "php-binary-search",
                "content": "# Code\\n```\\nclass Solution {\\n    /**\\n     * @param Integer $x\\n     * @return Integer\\n     */\\n    function mySqrt($x) {\\n        $result = 0;\\n        $start = 0;\\n        $end = $x;\\n\\n        while ($start <= $end) {\\n            $mid = (int)(($start + $end) / 2);\\n\\n            if ($mid * $mid === $x) {\\n                return $mid;\\n            } elseif ($mid * $mid < $x) {\\n                $start = $mid + 1;\\n                $result = $mid;\\n            } else {\\n                $end = $mid - 1;\\n            }\\n        }\\n\\n        return $result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    /**\\n     * @param Integer $x\\n     * @return Integer\\n     */\\n    function mySqrt($x) {\\n        $result = 0;\\n        $start = 0;\\n        $end = $x;\\n\\n        while ($start <= $end) {\\n            $mid = (int)(($start + $end) / 2);\\n\\n            if ($mid * $mid === $x) {\\n                return $mid;\\n            } elseif ($mid * $mid < $x) {\\n                $start = $mid + 1;\\n                $result = $mid;\\n            } else {\\n                $end = $mid - 1;\\n            }\\n        }\\n\\n        return $result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3080248,
                "title": "simple-java-o-n-beginners-helpful",
                "content": "# Intuition\\nGeekster Platform\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nBinary Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int mySqrt(int n) {\\n        // By Binary Approach\\n        long st = 1 , end = n ,  mid = (st + end) / 2;\\n        while(st <= end) {\\n            if(mid * mid == n) {\\n                break;\\n            }else if (mid * mid > n) {\\n                end = mid - 1;\\n            }else {\\n                st = mid + 1;\\n            }\\n            mid = (st + end) / 2;\\n        }\\n        return (int)mid;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mySqrt(int n) {\\n        // By Binary Approach\\n        long st = 1 , end = n ,  mid = (st + end) / 2;\\n        while(st <= end) {\\n            if(mid * mid == n) {\\n                break;\\n            }else if (mid * mid > n) {\\n                end = mid - 1;\\n            }else {\\n                st = mid + 1;\\n            }\\n            mid = (st + end) / 2;\\n        }\\n        return (int)mid;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2946396,
                "title": "java-easy-solution-beats-100-with-o-log-n",
                "content": "\\n# Code\\n```\\n\\n// ******Bineary searh approach*******\\nclass Solution {\\n    public int mySqrt(int x) {\\n          if(x < 2) return x;\\n         else {\\n            int start = 0;\\n            int end = x;\\n            while (start <= end) {\\n                int mid = start + (end - start) / 2;\\n                long multiply = (long) mid * mid;\\n                if (multiply > x) {\\n                    end = mid - 1;\\n                } else if (multiply < x) {\\n                    start = mid + 1;\\n                } else {\\n                    return mid;\\n                }\\n            }\\n        return end;\\n     }\\n}\\n\\n}\\n\\n// ******Brute Force*******\\n\\nApproach 1\\n// class Solution {\\n//     public int mySqrt(int x) {\\n//         int ans = 0;\\n//         for(int i =1; i<=x;i++){\\n//           if(i*i>x){\\n//           ans=i-1;\\n//           break;\\n//           }\\n//           if(i*i==x){\\n//           ans=i;\\n//           break;\\n//           }\\n//         }\\n//         return ans;\\n//     }\\n// }\\n\\nApproach 2\\n// class Solution {\\n//     public int mySqrt(int x) {\\n//         int l = 1, h = x, ans = 1;\\n//         int mid = (int)Math.ceil(x/2);\\n//         while(mid*mid>=x){\\n//              mid = (int)Math.ceil(x/2);\\n//         }\\n//        return mid;\\n//     }\\n// }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n// ******Bineary searh approach*******\\nclass Solution {\\n    public int mySqrt(int x) {\\n          if(x < 2) return x;\\n         else {\\n            int start = 0;\\n            int end = x;\\n            while (start <= end) {\\n                int mid = start + (end - start) / 2;\\n                long multiply = (long) mid * mid;\\n                if (multiply > x) {\\n                    end = mid - 1;\\n                } else if (multiply < x) {\\n                    start = mid + 1;\\n                } else {\\n                    return mid;\\n                }\\n            }\\n        return end;\\n     }\\n}\\n\\n}\\n\\n// ******Brute Force*******\\n\\nApproach 1\\n// class Solution {\\n//     public int mySqrt(int x) {\\n//         int ans = 0;\\n//         for(int i =1; i<=x;i++){\\n//           if(i*i>x){\\n//           ans=i-1;\\n//           break;\\n//           }\\n//           if(i*i==x){\\n//           ans=i;\\n//           break;\\n//           }\\n//         }\\n//         return ans;\\n//     }\\n// }\\n\\nApproach 2\\n// class Solution {\\n//     public int mySqrt(int x) {\\n//         int l = 1, h = x, ans = 1;\\n//         int mid = (int)Math.ceil(x/2);\\n//         while(mid*mid>=x){\\n//              mid = (int)Math.ceil(x/2);\\n//         }\\n//        return mid;\\n//     }\\n// }\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2711702,
                "title": "python-easy-solution-faster-than-93-39-using-binary-search",
                "content": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        l=0\\n        h=x\\n        m=(l+h)>>1\\n        while l<=h:\\n            if m*m==x:\\n                return m\\n            elif m*m>x:\\n                h=m-1\\n            else:\\n                l=m+1\\n            m=(l+h)>>1\\n        return m\\n```",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        l=0\\n        h=x\\n        m=(l+h)>>1\\n        while l<=h:\\n            if m*m==x:\\n                return m\\n            elif m*m>x:\\n                h=m-1\\n            else:\\n                l=m+1\\n            m=(l+h)>>1\\n        return m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2659529,
                "title": "faster-than-100-binary-search",
                "content": "```\\nint mySqrt(int x) {\\n        int s=0;\\n        int e=x;\\n        int ans;\\n        \\n        while(s<=e){\\n            long long mid = s+(e-s)/2;\\n            \\n            if(mid*mid == x){\\n                return mid;\\n            }\\n            else if(mid*mid < x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e=mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nint mySqrt(int x) {\\n        int s=0;\\n        int e=x;\\n        int ans;\\n        \\n        while(s<=e){\\n            long long mid = s+(e-s)/2;\\n            \\n            if(mid*mid == x){\\n                return mid;\\n            }\\n            else if(mid*mid < x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e=mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2642495,
                "title": "java-easy-solution",
                "content": "my solution :\\nclass Solution {\\n    public int mySqrt(int x) {\\n        x=(int)Math.sqrt(x);\\n        int res = (int)Math.floor(x);\\n        return res;  \\n    }\\n}\\n\\nPLEASE upvote",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int mySqrt(int x) {\\n        x=(int)Math.sqrt(x);\\n        int res = (int)Math.floor(x);\\n        return res;  \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2627755,
                "title": "very-easy-c",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        for( long int i=0;i<=x/2;i++){\\n            if(i*i==x||(x>i*i&&x<(i+1)*(i+1))){\\n                return i;\\n            }\\n        }\\n        return 1;//return anything;\\n    }\\n};\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        for( long int i=0;i<=x/2;i++){\\n            if(i*i==x||(x>i*i&&x<(i+1)*(i+1))){\\n                return i;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2504649,
                "title": "c-solution-100-using-binary-search",
                "content": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long long strt = 0,end = x,ans=0;\\n        while(strt<=end){\\n             long long mid = (strt + end)/2;\\n            if(mid*mid <= x) ans=mid,strt = mid+1;\\n            else end = mid-1;\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        long long strt = 0,end = x,ans=0;\\n        while(strt<=end){\\n             long long mid = (strt + end)/2;\\n            if(mid*mid <= x) ans=mid,strt = mid+1;\\n            else end = mid-1;\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2408261,
                "title": "java-easy-to-understand-self-explanatory-with-and-without-binary-search",
                "content": "This is a self explanatory code so try to read it ;\\n\\nwithout using binary search ;\\n\\n```\\n  int i = 1;\\n        \\n //because 0 is a perfect square ;\\n        if(x == 0){\\n            return 0 ;\\n        }\\n        \\n        // we used the INT_MAX condition here because\\n        //integer has a defined value that it can store so after doubling it \\n        // we can reach past that value so we use this to just break out of loop if that situation comes;\\n        \\n        while(i<=x && i < Integer.MAX_VALUE/i ){\\n            // what we did is we checked each integer starting from\\n            //1 to x(given in the question) after doubling it if it is\\n            // equall to given x or not ;\\n        if(i*i == x){\\n            return i ;\\n            // if it is less than the given x then we increment the value of x ;\\n        }else if (i*i < x){\\n            i ++ ;\\n        }else{\\n            //otherwise we break the loop\\n            break ;\\n          }\\n        }\\n        //we returned i -1 because i will be incremented before breaking out of the loop ;\\n        return i-1 ;\\n```\\n\\nWith binary search ;\\n\\n```\\n//using binary search ;-\\n        \\n        if(x == 0){\\n            return 0 ;\\n            //as answer for 0 will be 0 ;\\n        }\\n        \\n        int start = 1 ;\\n        int end = x;\\n        //we will search our answer in pooootential answers from 1 to the number we are given ;\\n        \\n        int mid = start + (end - start)/2 ;\\n        //for middle ;\\n        \\n        int ans = 0 ;\\n        //a variable in which we will be storing our answer ;\\n        \\n        \\n        while(start<=end ){\\n            \\n             mid = start + (end - start)/2 ;\\n            \\n            if(mid < x / mid){\\n                start = mid + 1;\\n                //as if we don\\'t store our mid in the answer it will get changed before breaking out of the loop ;\\n                ans = mid ;\\n                \\n            }else if(mid > x / mid ){\\n                end = mid -1;\\n                //we did\\'t store our answer here because our potential answer is always <= the x so this middle \\n                //is obviously not our potential answer ;\\n            \\n            }else{\\n                return mid;\\n            }\\n            \\n        }\\n        \\n        return ans  ;\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\n  int i = 1;\\n        \\n //because 0 is a perfect square ;\\n        if(x == 0){\\n            return 0 ;\\n        }\\n        \\n        // we used the INT_MAX condition here because\\n        //integer has a defined value that it can store so after doubling it \\n        // we can reach past that value so we use this to just break out of loop if that situation comes;\\n        \\n        while(i<=x && i < Integer.MAX_VALUE/i ){\\n            // what we did is we checked each integer starting from\\n            //1 to x(given in the question) after doubling it if it is\\n            // equall to given x or not ;\\n        if(i*i == x){\\n            return i ;\\n            // if it is less than the given x then we increment the value of x ;\\n        }else if (i*i < x){\\n            i ++ ;\\n        }else{\\n            //otherwise we break the loop\\n            break ;\\n          }\\n        }\\n        //we returned i -1 because i will be incremented before breaking out of the loop ;\\n        return i-1 ;\\n```\n```\\n//using binary search ;-\\n        \\n        if(x == 0){\\n            return 0 ;\\n            //as answer for 0 will be 0 ;\\n        }\\n        \\n        int start = 1 ;\\n        int end = x;\\n        //we will search our answer in pooootential answers from 1 to the number we are given ;\\n        \\n        int mid = start + (end - start)/2 ;\\n        //for middle ;\\n        \\n        int ans = 0 ;\\n        //a variable in which we will be storing our answer ;\\n        \\n        \\n        while(start<=end ){\\n            \\n             mid = start + (end - start)/2 ;\\n            \\n            if(mid < x / mid){\\n                start = mid + 1;\\n                //as if we don\\'t store our mid in the answer it will get changed before breaking out of the loop ;\\n                ans = mid ;\\n                \\n            }else if(mid > x / mid ){\\n                end = mid -1;\\n                //we did\\'t store our answer here because our potential answer is always <= the x so this middle \\n                //is obviously not our potential answer ;\\n            \\n            }else{\\n                return mid;\\n            }\\n            \\n        }\\n        \\n        return ans  ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2299274,
                "title": "java-linear-search-solution-binary-search-solution",
                "content": "1. First we solve this problem using linear search, we have to find the sqrt(x)\\n\\there y^2 = x, so we need to find the value y i.e (y*y <= x)\\n ```\\n class Solution {\\n    public int mySqrt(int x) {\\n        long y=0;\\n        while(y*y<=x)\\n            y++;\\n        return (int)y-1;\\n    }\\n}\\n```\\nTime Complexity in case of linear search will be O(x).\\n\\n2. Using Binary Search\\n\\t* we search sqrt(x) in range 1 to x/2, so low=1;\\n\\t* Value of sqrt(x) will never be grater than x/2, so we will take high=x/2;\\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x==0)\\n            return 0;\\n        long l=1, h=x/2;\\n        int output=1;\\n        while(l<=h){\\n            long mid = l+(h-l)/2;\\n            long sqrt = mid*mid;\\n            if(sqrt == x)\\n                return (int)mid;\\n            else if(sqrt<x){\\n                output=(int)mid;\\n                l=mid+1;\\n            }\\n            else\\n                h=mid-1;\\n        } \\n        return output;\\n    }\\n}\\n```\\n\\nTime Complexity using binary search would be log(x).\\nPS: If there is any improvement that we can do in the code, please do let me know in the comments below :)",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\n class Solution {\\n    public int mySqrt(int x) {\\n        long y=0;\\n        while(y*y<=x)\\n            y++;\\n        return (int)y-1;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int mySqrt(int x) {\\n        if(x==0)\\n            return 0;\\n        long l=1, h=x/2;\\n        int output=1;\\n        while(l<=h){\\n            long mid = l+(h-l)/2;\\n            long sqrt = mid*mid;\\n            if(sqrt == x)\\n                return (int)mid;\\n            else if(sqrt<x){\\n                output=(int)mid;\\n                l=mid+1;\\n            }\\n            else\\n                h=mid-1;\\n        } \\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1570842,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1575948,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1573187,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1566625,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1575605,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1565250,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1568890,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1576429,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1575669,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1571169,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1570842,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1575948,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1573187,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1566625,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1575605,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1565250,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1568890,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1576429,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1575669,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1571169,
                "content": [
                    {
                        "username": "onedaywillmake",
                        "content": "This is a great beginner question, however the addition of values such as `2147395600` which cause an integer overflow take away from spirit of the question which is to find the algorithm. \\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm. \\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "Rimberse",
                        "content": "Questions is labelled \"easy\"\\nHas dumb and frustrating edge cases to handle\\nOk, I might be dumb but it\\'s seems like I am not the only one complaining..."
                    },
                    {
                        "username": "md_isa",
                        "content": "Totally agree with you. Took the fun out of it as I had to return separately for 0 and 1, as x+1 which was my right bound for edge case like 1, also overflowed and turned into negative."
                    },
                    {
                        "username": "tka8edd",
                        "content": "if you are solving it in O(n), you don\\'t need to cast to long and there is no overflow."
                    },
                    {
                        "username": "palakgupta1712",
                        "content": "agree with you"
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah its frustating when overflow happens and also it isnt mentioned in problem for beginners!!"
                    },
                    {
                        "username": "10alan0712",
                        "content": "fiercely upvote"
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "[@jiayipaulwang](/jiayipaulwang) However, my solution is too add \"break\" within the loop when you find the desired answer."
                    },
                    {
                        "username": "jiayipaulwang",
                        "content": "why there\\'s an integer overflow issue? I thought that wasn\\'t a thing in python"
                    },
                    {
                        "username": "mkohar",
                        "content": "\\n[@SeaShanty](/SeaShanty).  [@onedaywillmake](/onedaywillmake)\\nHow to bypass overflow without using long? Try this:\\n1. use:  mid = low +(high-low)//2. \\n instead of mid =(high+low)//2\\n\\n2. Use   if(mid==x/mid) return mid\\n  instead of:   if(mid*mid==x)\\n\\nsmall things like this go long way in interview \\n"
                    },
                    {
                        "username": "deepak130797",
                        "content": "typedef long long ll;\\nuse this simple easy"
                    },
                    {
                        "username": "valer0n3",
                        "content": "[@SeaShanty](/SeaShanty) Just consider that the solution can\\'t be more than x/2. "
                    },
                    {
                        "username": "SeaShanty",
                        "content": "OMG thank u so much for letting me know this was a case of integer overflow. I was stuck on this testcase and was making changes in my code multiple times thinking my approach was wrong. My approach works well for smaller testcases. How to handle the  214739500 testcase? Thank you "
                    },
                    {
                        "username": "Twitnithegirl",
                        "content": "\"You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.\"\\n\\nWhat is the practical application of not using the standard library of the language you work in?"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "You\\'re so right. You should say that to the interviewer."
                    },
                    {
                        "username": "mepradeepkr",
                        "content": "Agree!!Bro"
                    },
                    {
                        "username": "h4ytham",
                        "content": "[@martynov-94](/martynov-94) well why would you bench press in a warehouse? You\\'re \"in a warehouse\" (using python) so bench pressing is redundant"
                    },
                    {
                        "username": "martynov-94",
                        "content": "Why bench press in the gym when you can just use a forklift?"
                    },
                    {
                        "username": "__Simamina__",
                        "content": "They say you can\\'t use it but you actually can(like, what the heck)"
                    },
                    {
                        "username": "WallaWonka",
                        "content": "To understand how someone implemented the standard library you are sitting on. So you can improve as a coder knowing how something is behind the curtains and to have more knowledge to extend the default/standard of things. If we all took as a premisse that all ships must sail in water, we would never have created rocket ships. "
                    },
                    {
                        "username": "d4mir",
                        "content": "I guess logic and understanding the function and being able to work without using it. The same with in-built quicksort in Java (Arrays.sort()), we have it in the standard library, but we still learn it in the course as well as other sortings."
                    },
                    {
                        "username": "kuelf",
                        "content": "It\\'s a challenge "
                    },
                    {
                        "username": "niklas5559",
                        "content": "Python3\\nFeel free to ask questions if the code is too complex\\n\\n`return int(x ** 0.5)`"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "I don\\'t get it. You can still just make it 1 line in Java without using an exponent operator (nor importing any library).\\n```\\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\\n```"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "My questions : Did you read the description carrefully?"
                    },
                    {
                        "username": "nodejk",
                        "content": "fyi for all the people who take things way too seriously, this is a joke."
                    },
                    {
                        "username": "milii048_leetcode",
                        "content": "Man, you must think you\\'re special right? Read the rules of the question before you post something dumb like this"
                    },
                    {
                        "username": "Pranav-2103",
                        "content": "dumbest answer ever"
                    },
                    {
                        "username": "arobe91594",
                        "content": "[@mihir2310](/mihir2310) \\nYou are correct. I am not certain, but OP may be criticizing the fact that the auto-grader cannot detect that you are violating those rules. That, or they didn\\'t read the rules and are a bit too snarky. Or the problem statement changed over time."
                    },
                    {
                        "username": "mihir2310",
                        "content": "they said you can\\'t use that ** operation"
                    },
                    {
                        "username": "rajanbhagat92",
                        "content": "\\tif (x <= 1) return x;\\n\\tlong i = 1;\\n\\tlong sq = i * i;\\n\\twhile (x >= sq) {\\n\\t\\ti++;\\n\\t\\tsq = i * i;\\n\\t}\\n\\treturn (int) (i - 1);"
                    },
                    {
                        "username": "brendanbdev",
                        "content": "```\nfor(int i=0;true;i++)if(i*i>x||i*i<0)return i-1;\n```"
                    },
                    {
                        "username": "Gilbertttt",
                        "content": "Please can you break this down i\\'m having trouble understanding this\\n"
                    },
                    {
                        "username": "OlfactoryReflex",
                        "content": "BOOM baby! This is it. After Googling and reviewing the definition of square root, I came to the same solution."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "SeraphNiu",
                        "content": "![image](https://assets.leetcode.com/users/images/4d8f6ebd-d3a8-4cd7-8223-7ff4ecb2de52_1628032236.8164496.png)\\n"
                    },
                    {
                        "username": "itmevic",
                        "content": "why are u posting solution here? do u know how to read?"
                    },
                    {
                        "username": "sjrj0604",
                        "content": "How are you using the value of \\'lo\\' without initialising it first?"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "that will make sense. How do you expect the sqrt of 2 is  integer too?"
                    },
                    {
                        "username": "chinmayjain096",
                        "content": "but in question they mention about the integer value of number not the decimal of number.\\nu can right code also too get precious ans put which decimal u want in vs code/any compiler"
                    },
                    {
                        "username": "AbhiLeet",
                        "content": "May be I am missing something here, but the upper bound on the srqrt(x)  for any positive integer x cannot be more that x/2   (in fact its x/2 ONLY for number from 4-8) for any integer > 8, the upper bound on the sqrt is strictly < x/2.   So that makes me wonder - why are so many folks taking such a huge upper bound (INT_MX) for this problem ?"
                    },
                    {
                        "username": "artofhuman",
                        "content": "In binary search it saves one operation, it does not matter "
                    },
                    {
                        "username": "shubhamkeshari04",
                        "content": "why i m getting wrong answer for input x=2147395599\\n pls help"
                    },
                    {
                        "username": "stardust-skg",
                        "content": "[@rglamazda](/rglamazda) It\\'s better to use int properly :) "
                    },
                    {
                        "username": "Kromydas",
                        "content": "as [@rglamazda] has said, use long. A even better ideal is to use long long. And watch out for x = 0, and use while loops. (they are better in this scenario because they are conditional on different things, easier for beginners). It also makes your code slightly faster depending on what conditions you put in a for loop"
                    },
                    {
                        "username": "TheoW03",
                        "content": "[@TheoW03](/TheoW03) exactly. not 46369\\n"
                    },
                    {
                        "username": "TheoW03",
                        "content": "no its right the sqrt of (2147395599) is 46340"
                    },
                    {
                        "username": "Dest1ni",
                        "content": "This is a great beginner question, however the addition of values such as 2147395600 which cause an integer overflow take away from spirit of the question which is to find the algorithm.\\n\\nMany users would not expect having to cast things to long in an question labeled \"beginner\", I\\'ve seen a lot of frustration for users thinking their approach is wrong and throwing it away thinking it must be something wrong with their algorithm.\\n\\nRemove those extreme edge cases, or let\\'s call the question at least a \\'medium\\' level - or add a note about integer overflow"
                    },
                    {
                        "username": "rglamazda",
                        "content": "try to use long instead int"
                    },
                    {
                        "username": "user2354Mw",
                        "content": "\\tr = x\\n\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\n\\tfor i in range(20):\\n\\t\\tr = (r + x / r) / 2\\n\\n\\treturn math.floor(r)"
                    },
                    {
                        "username": "anish_kr23",
                        "content": "[@nguyentuan67](/nguyentuan67)  i also not understand why he uses like this function.??????\\n"
                    },
                    {
                        "username": "d4mir",
                        "content": "[@nguyentuan67](/nguyentuan67) It\\'s a Newton-Raphson method"
                    },
                    {
                        "username": "wangchao426",
                        "content": "[@nguyentuan67](/nguyentuan67) ordinary least squares"
                    },
                    {
                        "username": "nguyentuan67",
                        "content": "why r = (r + x / r) / 2 ? i don\\'t understand."
                    },
                    {
                        "username": "waerte",
                        "content": "Kindly provide hint for implementing your own sqrt.\\nthanks!"
                    },
                    {
                        "username": "NerdPai",
                        "content": "https://en.wikipedia.org/wiki/Newton%27s_method"
                    }
                ]
            },
            {
                "id": 1752649,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 1984354,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 1815448,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 1574586,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 1573102,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 1567185,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 1574875,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 1567838,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 2016911,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 2006507,
                "content": [
                    {
                        "username": "sakethbhardwajV",
                        "content": "this problem has an edge cases where it causes integer overflow..\\nso instead of checking `(mid * mid == x)` which causes integer overflow write the condition as `(x / mid == mid)` and similar condition for else if cases... "
                    },
                    {
                        "username": "bradwick21",
                        "content": "thanks man"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 beginner\\'s tip :: just a binary search application"
                    },
                    {
                        "username": "M_Suleman",
                        "content": "Sorry for a newbie question...\\nCan we use Binary search for this problem? \\nCan we use Binary search on integers ?\\n"
                    },
                    {
                        "username": "Harshsharma12",
                        "content": "ya definitely\\n"
                    },
                    {
                        "username": "_ast0",
                        "content": "![image](https://assets.leetcode.com/users/images/cb663b54-6011-4ef8-9e5b-b904151e90c0_1604983977.0130923.png)\\n"
                    },
                    {
                        "username": "9902699141a",
                        "content": "upvote creative way doing but we need write our own algo."
                    },
                    {
                        "username": "mayank-goyal",
                        "content": "What are you getting by submitting pre-defined functions?"
                    },
                    {
                        "username": "chognzi",
                        "content": "![image](https://assets.leetcode.com/users/chognzi/image_1570974209.png)\\n894427 should be the correct answer!"
                    },
                    {
                        "username": "CandyRobbery",
                        "content": "With 2 as input, \"Expected answer\" gives 1;\\nWith -1 as input, \"Expected answer\" gives -2147483648;\\n\\nThe input should be non-negative, otherwise it's meaningless.\\nThe output should be double, sqrt(2) should return 1.414... (until the double precision)"
                    },
                    {
                        "username": "akshat005",
                        "content": "Under root of negative number is a complex number! maybe that\\'s why we are not getting accurate answer!"
                    },
                    {
                        "username": "ktime",
                        "content": "I solved it using simple binary search based on the explanation at \\n[Square Root Using Binary Search ](https://algotree.org/algorithms/binary_search/squareroot/)"
                    },
                    {
                        "username": "turbocv",
                        "content": "Actually, I think this problem needs more explanations.\\nX is not the perfect square number, besides, we want to find the closest int which is smaller than or equals to exact sqrt(x)."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "`class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        low=1\\n        high=x\\n        ans=-1\\n        while(low<=high):\\n            mid=(low+high)//2\\n            midsq=mid*mid\\n            if midsq==x:\\n                return mid\\n            elif midsq<x:\\n                low=mid+1\\n            else:\\n                high=mid-1\\n                ans=mid\\n        return ans          `\\n\\nI used Binary Search Concept to solve this but Case 2 said its wrong \\nx=8\\nmy output=3\\nexpected = 2\\nPlease help"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Two minutes of silence for the Python and JavaScript users. :)"
                    }
                ]
            },
            {
                "id": 2002368,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 1973644,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 1870945,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 1783110,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 1718056,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 1571168,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 1573549,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 2071559,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 2068128,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 2055978,
                "content": [
                    {
                        "username": "bhuppidhamii",
                        "content": "I love 69."
                    },
                    {
                        "username": "sitanggang",
                        "content": "var mySqrt = function(x) {\n    let num = 0;\n\n    while(num * num <= x){\n      num++\n    }\n    return num-1\n};"
                    },
                    {
                        "username": "vinnnu",
                        "content": "hint: binary search"
                    },
                    {
                        "username": "riyaJH",
                        "content": "can anyone tell me what\\'s wrong with my code?\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int low = 1;\\n        int high = x;\\n        int res = 0;\\n        while(low<=high){         \\n            int mid = low + (high - low)/2;\\n            int msq = mid*mid;\\n            if(msq==x)\\n            return mid;\\n\\n            else if(msq<x){\\n            res = mid;\\n            low = mid+1;}\\n\\n            else\\n            high = mid-1;\\n        }\\n        return res;\\n    }\\n}\\n\\nOUTPUT:\\nInput\\nx =\\n2147395599\\n14 / 1017 testcases passed\\nOutput\\n2147395599\\nExpected\\n46339"
                    },
                    {
                        "username": "G_HoST-1008",
                        "content": "use long long int data type instead of int, in res and msq"
                    },
                    {
                        "username": "Anup_303030",
                        "content": "error is comming up\n Error is : time limit Exceeded\n\nclass Solution {\n    public int mySqrt(int x) {\n\n              int low = 1;\n              int high = x;\n              int ans = 0;\n\n              while (low<= high)\n              {\n                 int mid = (low + high)/2;\n                int sqr = mid*mid;\n\n                if(sqr == x)\n                {\n                   return mid;\n\n                }\n                else if(sqr < x)\n                {\n                    ans = mid;\n                    low = mid+1;\n                }\n                else\n                {\n                    high = mid -1;\n                }\n                \n              }\n                    return ans;\n    }\n    \n    \n}\n\nerror is comming up\n Error is : time limit Exceeded"
                    },
                    {
                        "username": "leap2014",
                        "content": "sqrt(3) = 1.732. So it makes more sense that the result is 2 instead of 1."
                    },
                    {
                        "username": "sainath81061",
                        "content": "//Use  this code in c#  \\npublic int MySqrt(int x) {\\n        long n =1,sum;\\n        sum =  n * n;\\n      if(x != 1){\\n      while (x >= sum)\\n        {\\n            n++;\\n            sum = n * n;\\n           \\n        }\\n      }else\\n        {\\n           return (int)n;\\n        }      \\n        return (int) (n -1);  \\n    }"
                    },
                    {
                        "username": "arnavjain",
                        "content": "return math.floor(sqrt(x))"
                    },
                    {
                        "username": "byte101",
                        "content": "Here we use the binary search, because \\n1. num are sorted exam 9 -> {1,2,3,4,5,6,7,8,9}\\n2. and the answer will always  <= to mid\\nlet\\'s take an example (sqrt(9))\\nand the answer belongs to half of the array {1,2,3,4}\\n\\nTime Complexity - O(log(n/2))\\nSpace - O(1)"
                    },
                    {
                        "username": "user4173R",
                        "content": "math.sqrt() function in python is not violating any requirements, so i guess it would suffice"
                    },
                    {
                        "username": "laxxy",
                        "content": "```cpp\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x==0){\n            return 0;\n        }\n        if(x==1 || x==2 || x==3){\n            return 1;\n        }\n        for(int i=1;i<=x/2;i++){\n            if(x/i==i){\n                return i;\n            }\n            else if(x/i<i+1){\n                return i-1;\n            }\n        } \n        return -1;\n    }\n};\n```\nhow is this solution?"
                    }
                ]
            },
            {
                "id": 2054504,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 2044339,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 2023840,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 2016650,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 2007495,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 2004227,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 2003535,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 1997101,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 1994972,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 1980617,
                "content": [
                    {
                        "username": "devanshsharma07",
                        "content": "I guess there is a bug in this program. When we talk about nearest integer it should be rouned to nearest integer. If square root of 8 is 2.82 then it should be rounded to 3 as it is the nearest one not to 2."
                    },
                    {
                        "username": "kamrun",
                        "content": "why we are not using decimal values here? I understand we want integer result but during the process why we are not considering decimal value?"
                    },
                    {
                        "username": "sasibunny31",
                        "content": "the given x is of integer type and it stores the 2123643174314 test case but it sqrt number is not storing why????????"
                    },
                    {
                        "username": "shaikhsaif_codx",
                        "content": "can we use return sqrt(x);??\\n"
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "you can\\'t, in description it self they mentioned, You must not use any built-in exponent function or operator."
                    },
                    {
                        "username": "SAMUDRA_069",
                        "content": "int s=floor(sqrt(n));\n    return s;\ncan i use pre-defined function in coding round?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Why this doesn\\'t work?\\n\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = x\\n        l, r = 0, x\\n        while l <= r:\\n            mid = int(l + (r-l)/2)\\n            if (mid*mid) > x:\\n                r = mid - 1\\n            elif (mid*mid) < x:\\n                ans = l\\n                l = mid + 1\\n            else:\\n                return mid\\n        return ans"
                    },
                    {
                        "username": "SenWang666",
                        "content": "Shouldn\\'t the nearest integer of 2.82842 be 3 instead of 2?"
                    },
                    {
                        "username": "krishnu9",
                        "content": "I hate this problem. Having TCs like 2147483647 causing integer overflow take away the fun from solving algorithmic problems."
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me - this problem presents an interesting application of the binary search algorithm. It demonstrates how binary search can be applied to problems beyond searching in a sorted array. Also this problem teaches the concept of avoiding integer overflow."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "How is this easy..."
                    }
                ]
            },
            {
                "id": 1980327,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1979697,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1978379,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1975065,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1969141,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1966266,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1960566,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1950048,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1947700,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1946277,
                "content": [
                    {
                        "username": "lifehacks2004",
                        "content": "how is the square root of 8, 4 instead of 2. seems kind of wrong"
                    },
                    {
                        "username": "ayushdhn",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        if(x<0)\\n            x=(-1)*x;\\n        int res=0;\\n        for(int i=1;i<x;i++){\\n            if(i*i>=x){\\n                res=i;\\n                break;\\n                }\\n            }\\n        return res-1;\\n    }\\n}\\n\\ncan anyone help me\\nit has passed 1008 out of 1017 cases\\nerror is coming in x=4"
                    },
                    {
                        "username": "kumkumsisodiya9630",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s+(e-s)/2;\\n        long long int ans = -1;\\n        while(s<=e){\\n            long long int sqr = mid*mid;\\n            if(sqr == x)\\n            return mid;\\n        if(sqr<x){\\n        ans = mid;\\n        s= mid+1;\\n        }\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s+(e-s)/2;\\n    \\n    }\\n    return ans;\\n    }\\n};"
                    },
                    {
                        "username": "CDelisa",
                        "content": "Is the question worded poorly? It\\'s not square root, it\\'s nth root. Wrong answer. Input x = 8. Expected = 2. That\\'s a cubic root, not square root."
                    },
                    {
                        "username": "iamrathoreanuj",
                        "content": "for x =2147395599\\n\\nRESULT     time limit exceeded \\nbut why?"
                    },
                    {
                        "username": "Kira_Rapota",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "goldfishfish",
                        "content": "why does binary search work in this problem? "
                    },
                    {
                        "username": "anusha_ghosh_",
                        "content": "My code (which is as follows) is going wrong in the test case of x = 2147385600. I don\\'t understand where I am going wrong, can someone help? Thank you.\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i = 0, sqrt = 0;\\n        while((i*i)<=x){\\n            sqrt = i;\\n            i++;\\n        }\\n        return sqrt;\\n    }\\n}"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "for some test case it is out of int bounds so use long and return int using typecasting\\n"
                    },
                    {
                        "username": "snowden1007",
                        "content": "try using long lont int "
                    },
                    {
                        "username": "thedabbinggamer894",
                        "content": "Would binary search be vaild here, or is it too slow?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "simple python code by bruteforcing class Solution:\\n    def mySqrt(self, n: int) -> int:\\n        index = 0\\n        a = 1\\n        square_root = 0\\n\\n        for j in range(n):\\n        \\n            index += a\\n           \\n            a += 2\\n            square_root += 1\\n\\n            if index > n:\\n                square_root-=1\\n\\n                break\\n            elif index==n:\\n                break\\n            \\n            \\n       \\n        return square_root\\n"
                    }
                ]
            },
            {
                "id": 1941278,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1936243,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1930368,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1922230,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1920838,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1913630,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1912030,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1895498,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1885107,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1876400,
                "content": [
                    {
                        "username": "palakgupta1712",
                        "content": "I have used binary search approach to solve this question and I also used long long  int to store the values.  It\\'s still showing TLE for the value 2147395600. Also the constraints are 0 <= x <= 2^31 - 1 , how is this justified please help!"
                    },
                    {
                        "username": "wadhwanichirag93",
                        "content": "its because you must have used (int) try to use long for calculations and typecast to int while returning the answer.\\n "
                    },
                    {
                        "username": "kmooventhan98",
                        "content": "Always getting \\nTime Limit Exceeded\\nany one knows why?"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "same"
                    },
                    {
                        "username": "Lunar-Eclipse",
                        "content": "simple question use sqrt(abs(x)), in cpp"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "not to use built in function bro just read the question\\n"
                    },
                    {
                        "username": "darkling23",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n    int s =0;\\n    int e = n-1;\\n    long long int mid = s + (e-s)/2;\\n\\n    long long int ans = -1;\\n    while(s<=e){\\n\\n        long long int square = mid*mid;\\n        if (mid == square){\\n            return mid;\\n        }\\n\\n        else if (square<n){\\n            ans = mid;\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n        mid = s + (e-s)/2;\\n    }\\n\\n}\\n\\n\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\nCan someone please say whats wrong with this code cuz its throwing me this sort of error:\\n\"Line 27: Char 1: error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n}\\n^\\n1 error generated.\""
                    },
                    {
                        "username": "Kromydas",
                        "content": "You did not return a value in your code. Your binary search function is a long long int, so you are expected to return a long long int. Instead, you did not return anything. \\n\\nTo fix this error, just do `return ans;` in your binary search function after the while loop. (This is based off of how I understand your code). "
                    },
                    {
                        "username": "devTabasco",
                        "content": "There are no specific constraints mentioned regarding the time complexity. However, if exhaustive search is used, it will lead to a runtime error, making the problem unsolvable."
                    },
                    {
                        "username": "Kromydas",
                        "content": "As a helpful hint to all of the beginners, beware of edge cases such as when x = 0. And if you are planning on doing this the brute force way, use while loops, not for loops. If you do for (int i = 0; i < x; i++), this will achieve Time Limit Exceeded. \\n\\nInstead of using for loops, have a while loop with a condition such as while (i * i <= x) {}. This will make it faster, just enough to barely solve the problem. \\n\\nAnother thing to note is that you can\\'t just abs(x - i * i), you have to consider the possibilities under x. Ie if x = 8, you can\\'t consider 9, although it is the closest to 8. You have to consider the one under it, or 4. \\n\\nUsing this method helps you down the line as well. When you return you don\\'t need to separate the perfect square cases and the ones that aren\\'t prefect squares, as I\\'ve seen some solutions do. You only need to return i, not i - 1 or something. \\n\\nP.S use long long int or long long. Otherwise some test cases may fail because of overflow. "
                    },
                    {
                        "username": "alessandromarchesin",
                        "content": "What part of \"1. Please don\\'t post any solutions in this discussion.\" you do not understand?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "me coming into the problem - \"37.5% acceptance rate on an easy?  pfft!\"\\n3 wrong submissions later - \"oh i see...\""
                    },
                    {
                        "username": "digital-idiot",
                        "content": "Why expected output is `2` for the input `8`?\\n\\n`sqrt(8)` is `2.8284271247461903`, when rounded to nearest integer it is `3`."
                    },
                    {
                        "username": "liebrynth",
                        "content": "because its not round up but int and when we convert decimal value to int it will ignore all the decimal after that. That\\'s why answer is 2"
                    },
                    {
                        "username": "TheoW03",
                        "content": "but a better solution I have found. is quick inv sqrt. you run \\n(or the quake 3 algorithm)\\n\\n  x = x * (1.5f - (xhalf * x * x));\\n3 times. \\nand to get the sqrt\\nyou multiply by \\n\\nfloat y = (int)(x*fastInverseSqrt(x)+0.01f);\\n\\nthey are some draw backs. quick_inv_sqrt is not accurate, its an approximation. and it will kill you bc of rounding errors. but its the I believe O(1) solution. and quicker then the stuff the Math libraries offer in C. about 4 times I read. "
                    }
                ]
            },
            {
                "id": 1876395,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1876039,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1875181,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1873010,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1871645,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1866008,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1852338,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1847857,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1847116,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1837537,
                "content": [
                    {
                        "username": "TheoW03",
                        "content": "sqrt(2147395599) = 46340 \\n\\nnot 46339"
                    },
                    {
                        "username": "DowdyJ",
                        "content": "I ran into this. The square root is more precisely \"46339.9999892\". As floats may not be accurate enough to represent this, switching to double solves the issue."
                    },
                    {
                        "username": "iam_sandeep_maddheshiya",
                        "content": "What\\'s wrong in my code ? 1012/1017 test cases passes only...\\n\\n\\nclass Solution {\\n    public int mySqrt(int x) {\\n        int i=1;\\n        for(int j=1;j<=x/2;j++){\\n            long sq=i*i;\\n            if((int)sq==x){\\n                return i;\\n            }\\n            else if((int)sq>x)\\n            {\\n                return i-1;\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}"
                    },
                    {
                        "username": "slisnychyi",
                        "content": "it would be better that to have `long` as return value"
                    },
                    {
                        "username": "Isaiahorekan",
                        "content": "Interesting question"
                    },
                    {
                        "username": "IrenaXiao",
                        "content": "A quick way to find square root is the repeat subtraction method. While it will not produce the fastest code, it is however much easier to write and understand for a newbie like me."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "In problem statement it is mentioned that \"return nearest rounded integer\". Then how come round(2.858) is 2 not 3. And round(2.858) is 3.  As 3 is nearest integer to 2.858.\\nSo Either problem statement is wrong or test cases are rigged.\\nIf in test cases they want floor value then in problem statement they should strictly mention \" return floor value\".\\nBecause floor != round. "
                    },
                    {
                        "username": "gupta_arpita",
                        "content": "Error in TC : 2147395599\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x==0 || x ==1)\n            return x;\n\n        int first = 1;\n        int last = x;\n        int mid = (first+last)/2;\n        int pre_mid = mid;\n        int count = 0;\n        unsigned long long int temp =0;\n        while(first<last)\n        {\n            \n\n            if (count !=0 && pre_mid == mid)\n                return mid;\n            temp = mid*mid;\n            if (temp == x)\n                return mid;\n            else if (temp < x)\n                first = mid;\n            else last = mid;\n\n            pre_mid = mid;  \n\n            mid = (first+last)/2; \n            \n            count ++;\n\n                    \n        } \n\n        return mid;   \n    }\n};\n\n\nRuntime Error\n14 / 1017 testcases passed\nLine 19: Char 23: runtime error: signed integer overflow: 1073697800 * 1073697800 cannot be represented in type 'int' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:28:23\nLast Executed Input\nUse Testcase\nx =\n2147395599\n\n"
                    },
                    {
                        "username": "hirithik05",
                        "content": "\\n#JAVA\\n `class Solution {\\n\\n    long search(int n){\\n        int start =0;\\n        int end = n;\\n        int mid = start+(end-start)/2;\\n        long ans = 0;\\n        while(start<=end){\\n            long square = (long)mid * (long)mid;\\n            if(square == n){\\n                return mid;\\n            }\\n            else if(square>n){\\n                end = mid-1;\\n            }\\n            else{\\n                ans = mid;\\n                start = mid +1;\\n            }mid = start+(end-start)/2;\\n        }return ans;\\n    }\\n    public int mySqrt(int x) {\\n        return (int)search(x);\\n    }\\n}`"
                    },
                    {
                        "username": "sudeepmk45",
                        "content": "how the solution is approached"
                    },
                    {
                        "username": "elkinef84",
                        "content": "Repeated Subtraction Method + recursion have passed here."
                    }
                ]
            },
            {
                "id": 1836039,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1835019,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1832165,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1824213,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1816537,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1811160,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1809886,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1807248,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1803248,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1793886,
                "content": [
                    {
                        "username": "imsumit_17",
                        "content": "guys what problem we will get if we directly use sqrt function in c++ will it be considered as bad coding practice?"
                    },
                    {
                        "username": "radek4128",
                        "content": "If the description says that we can\\'t use any built-in exponent function, why submissions with them are accepted?"
                    },
                    {
                        "username": "Keremovsky",
                        "content": "don\\'t use mid = (first + last) / 2 for find middle value\\nuse mid = first + (last - first) / 2 so you don\\'t have to deal with 2147395600"
                    },
                    {
                        "username": "Sanjeevan-S",
                        "content": " `int i=1;\\n        if(x>=0 && x<1){`\\n           ` return 0;`\\n       ` }`\\n       ` else{`\\n           ` while (i <= x/i) {`\\n           ` i++;`\\n          `  }`\\n       ` }`\\n       ` return i-1;`\\n\\ncouldnt think of the binary search solution, this is what i was able to come up with"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": "what if i directly do \\nclass Solution {\\n    public int mySqrt(int x) {\\n       return (int)Math.sqrt(x);\\n    }\\n}"
                    },
                    {
                        "username": "CyberMaestro",
                        "content": "return int(math.sqrt(x))"
                    },
                    {
                        "username": "akashshaw01",
                        "content": "hint - data type of mid will be long long beacause mid * mid be overflow the limit of the int.\\n\\n\\n\\nmy code - https://leetcode.com/problems/sqrtx/solutions/3216039/c-simple-binary-search-o-log-n-beginner-friendly/?orderBy=most_votes"
                    },
                    {
                        "username": "BachusPL",
                        "content": "Is this the simplest problem in Leetcode?"
                    },
                    {
                        "username": "kumarprashant82061",
                        "content": "class Solution {\\npublic:\\n    int mySqrt(int x) {\\n         if(x <= 1)\\n        return x;\\n\\n        return floor(sqrt(x));\\n    }\\n};"
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "In Python Its very simple to solve, There is a in build function Import math \\njust used math.squer() and whats value return just convert into a integer .solved the problem.\\nexample:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        ans = math.sqrt(x)\\n        return int(ans)\\n\\n"
                    },
                    {
                        "username": "Alex230103",
                        "content": "the whole point of this problem is to not use build in functions"
                    }
                ]
            },
            {
                "id": 1792889,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1786950,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1785206,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1782936,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1782173,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1772992,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1760907,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1757994,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1756312,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1752384,
                "content": [
                    {
                        "username": "rishavm",
                        "content": "Solution which has time complexity of O(1). have used built-in functions which clearly mentioned in the problem description not allowed.\\nStill they are getting accepted and being ranked at the top."
                    },
                    {
                        "username": "snowden1007",
                        "content": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n        int ans = pow(x , 0.5);\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "SurajXXh",
                        "content": "can anyone give me through explanation why this code worked for long but not for int (It is humble request ,  don\\'t use very professional words please keep the explanation simple) "
                    },
                    {
                        "username": "landong",
                        "content": "you are using python or python3? long is no longer supported in python3"
                    },
                    {
                        "username": "RaikotaPavansai",
                        "content": "it is showing time limit exceeded what this mean?\\n"
                    },
                    {
                        "username": "aydin_akbuga",
                        "content": "I found a math way to make this calculation. It is not the best but it works well. It is based on this farmula\n1 + 3 + 5 + 7 + 9 + … + (2n – 1) = n²\n\n def mySqrt(self, x: int) -> int:\n        num = 1\n        counter = 0\n        while num <= x:\n            x = x - num\n            num = num + 2\n            counter = counter+1\n        return counter"
                    },
                    {
                        "username": "Satyam_Singh_01",
                        "content": "I am new at leetcode and whenever i run my code \" error: redefinition of \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) { \" this compilation error pops up. Can someone please tell me what am I doing wrong.\\n"
                    },
                    {
                        "username": "mdude",
                        "content": "Using Binary Search solution\\nAll the provided solutions assume that `if(mid * mid < x) start = mid + 1`\\nWhat if the input was `x = 8`, then we could by mistake skip the 2 as `2 * 2 < 8` and the new start will be 3\\nSo shouldn\\'t it be `start = mid` ?"
                    },
                    {
                        "username": "shru20",
                        "content": "class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x==0:\\n            return 0\\n        n=1\\n        while n**2<=x:\\n            n+=1\\n        return n-1\\n"
                    },
                    {
                        "username": "Aman3107",
                        "content": "Simplest solution is here.........\n\n\n     \n        int count=0;\n        for(int i=1;i<=x;i+=2){\n            x=x-i;\n            count++;\n        }\n        return count;\n\n"
                    },
                    {
                        "username": "omsky8",
                        "content": "[@brbamcoding](/brbamcoding) it is O(log N) as the we are not traversing till n. The value of x is getting reduced and also the step size is 2 for i."
                    },
                    {
                        "username": "brbamcoding",
                        "content": "This is not O(log N), is it?"
                    },
                    {
                        "username": "liqingzhao",
                        "content": "if you use x * x  to compare,it will result it integer overflow.So the right way is to use x / mid or (long) mid * mid"
                    }
                ]
            },
            {
                "id": 1744286,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1744285,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1740811,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1739981,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1739905,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1733539,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1733479,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1733108,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1729077,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1724157,
                "content": [
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid * mid is overflowing we are not storing the mid * mid we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "brbamcoding",
                        "content": "It should get stored somewhere in memory to hold good for the comparison. This is probably why it happens eve n if we explicitly don\\'t allot a variable for it."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "why  mid*mid is overflowing we are not storing the mid*mid anywhere  we are just comparing it with x then also why overflow is occuring ? anyone"
                    },
                    {
                        "username": "avishekgop5833",
                        "content": " `class Solution {\\n    public int mySqrt(int x) {\\n         long y = 0 ;\\n        while(y*y<=x)y++;\\n        return y-1.0;\\n    }\\n}`\\n\\nLine 5: error: incompatible types: possible lossy conversion from double to int\\n        return y-1.0;  plz help me"
                    },
                    {
                        "username": "Preadator_Dp",
                        "content": "one line code\\n#include<bits/stdc++.h>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n       int ans =sqrt(x);\\n       return ans;\\n    }\\n};"
                    },
                    {
                        "username": "psrij",
                        "content": "return pow(x,0.5);   \nQuick and easy c++ solution\nis there any other solution other that this \nif yes then pls reply"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "ParagBagga",
                        "content": "public class Solution {\\n    public int MySqrt(int x) {\\n         int low = 1;\\n            int high = x;\\n            int mid = (low + high) / 2;\\n\\n            while (low <= high)\\n            {\\n                if (mid  > x/mid)\\n                {\\n                    high = mid - 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid < x/mid)\\n                {\\n                    low = mid + 1;\\n                    mid = (low + high) / 2;\\n                }\\n                else if (mid == x/mid)\\n                {\\n                    return mid;\\n                }\\n            }\\n\\n            return high;\\n    }\\n}"
                    },
                    {
                        "username": "aritrabasu2002",
                        "content": "#include<iostream>\\n#include<cmath>\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int x) {\\n        double result;\\n        result=pow(x,0.5);\\n        return result;\\n    }\\n};"
                    },
                    {
                        "username": "omuksa007",
                        "content": "why it gives o/p of 0 for i/p of 4?\\nplease tell me.....\\n\\n int mySqrt(int x) {\\n        if(x==1){\\n            return 1;\\n        }\\n        for(int i=1;i<x/2;i++){\\n            if((i*i) == x){\\n                return i;\\n            }\\n            else if((i+1)*(i+1)>x && (i*i) < x){\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }"
                    },
                    {
                        "username": "Abu_Daud",
                        "content": "using math formula \\nWe can consider mathematical term (\\u221Ax-\\u221Ax)2  = 0.\\nReplacing one of the \\u221Ax\\u2018s with y, then the equation becomes (y-\\u221Ax)2 => y2 \\u2013 2y\\u221Ax + x = 0\\n=> \\u221Ax = (y2 + x) / 2y\\n=> \\u221Ax = (y + x/y) / 2"
                    }
                ]
            },
            {
                "id": 1719021,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1717758,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1716996,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1708965,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1708535,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1707636,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1707300,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1697020,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1696727,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1693401,
                "content": [
                    {
                        "username": "Rawan_Rababah",
                        "content": "TypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nLine 42 in _driver (Solution.py)\\n    _driver()\\nLine 48 in <module> (Solution.py)\\n\\n\\nthe run is accepted but when i click om submit , the massage above show ??\\nwho know the solution >??"
                    },
                    {
                        "username": "hegdeanirudh2003",
                        "content": "what is time complexity for this solution:\\nimport math\\nclass Solution:\\n    def mySqrt(self, x: int) -> int:\\n        return int(math.sqrt(x))"
                    },
                    {
                        "username": "user9177eE",
                        "content": "Why this solution is correct?\\nclass Solution {\\npublic:\\n\\n    long long int binarySearch(int x){\\n        \\n\\n        int s = 0;\\n        int e = x;\\n        long long int mid = s + (e-s)/2;\\n\\n        long long int ans = -1;\\n\\n        while(s<=e){\\n            long long int z = mid*mid;\\n\\n            if(z == x){\\n                return mid;\\n            }\\n            else if(z<x){\\n                s = mid+1;\\n                ans = mid;\\n            }\\n            else{\\n                e = mid-1;\\n            }\\n\\n            mid = s + (e-s)/2;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n    int mySqrt(int x) {\\n        return binarySearch(x);\\n    }\\n};\\n\\n\\nI mean there is no even array in the code to apply binary search on .\\n\\n\\nWhereas I have written this code on my vs code(ignore that long long int thing), but atleast it has proper logic.\\n#include<iostream>\\nusing namespace std;\\n\\nint searchSpace(int a){\\n    int arr[a+1];\\n    for(int i=0; i<=a; i++){\\n        arr[i]=i;\\n    }\\n\\n    int s=0;\\n    int e=a;\\n    int mid = s + (e-s)/2;\\n\\n    while(s<=e){\\n        int x = mid*mid;\\n\\n        if(x == a){\\n            return arr[mid];\\n            \\n        }\\n        \\n        else if(x<a){\\n            s = mid+1;\\n        }\\n\\n        else{\\n            e = mid-1;\\n        }\\n\\n        mid = s + (e-s)/2;\\n    }\\n\\n    return arr[mid-1];\\n\\n}\\n\\n\\nint main(){\\n\\n    int a;\\n    cout<<\"Enter a number: \";\\n    cin>>a;\\n\\n    cout<<\"Square root of \"<<a<<\" is \"<<searchSpace(a)<<\".\\\\n\"<<endl;\\n\\n}\\n"
                    },
                    {
                        "username": "Jkpgiitian",
                        "content": "int mySqrt(int x) {\n        int i=1;\n        if(x==0)\n            return 0;\n        while(i<=x){\n            if(x==i*i)\n                return i;\n            else if(x>(i*i) && x<(i+1)*(i+1))\n                return i;\n            else\n                i++;\n        }\n    \n    return -1;\n    }\n\n**How to rectify the signed integer overflow problem??\n"
                    },
                    {
                        "username": "kaustubhrajput",
                        "content": "Bruteforce gave O(N) while when we used Binary Search we got O(log n).\\nThis is the application of Binary search."
                    },
                    {
                        "username": "nachiket-s",
                        "content": "Can someone pls suggest me the syntax to use recursion in python. I am familiar with recursion in regular python code but \\'class solution(object)\\' and usage of \\'self\\' for function confuses me"
                    },
                    {
                        "username": "sharmamuskan296",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    long long int binarysearch(int n ){\\n        int s = 0;\\n        int e = n;\\n        long long int m = s+(e-s)/2;\\n        long long int ans = -1;\\n\\n        while (s<=e){\\n            long long int sq = m * m; //range fatt gyi \\n            if (sq == n){\\n                return m;\\n            }\\n            if (sq < n){\\n                ans = m;\\n                s = m + 1;\\n            }\\n            else {\\n                e = m - 1;\\n            }\\n        m = s + (e - s) / 2;\\n        }\\n    return ans ;\\n    }\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n        \\n    }\\n};"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "Sorry I am cringe\n\n    def mySqrt(self, x: int) -> int:\n        return int(sqrt(x))"
                    },
                    {
                        "username": "izzattulaev",
                        "content": "very very easy for beginner or senior"
                    },
                    {
                        "username": "dzhang1238",
                        "content": "class Solution {\\n    public int mySqrt(int x) {\\n        int mid_num = x/2;\\n\\n        while ( (mid_num * mid_num) > x){\\n            mid_num /= 2;\\n        }\\n\\n        while ( (mid_num * mid_num) <= x ){\\n            mid_num += 1;\\n        }\\n\\n        return mid_num-1;\\n    }\\n}\\n\\nIs it because the integer overflow so it won\\'t work?"
                    }
                ]
            },
            {
                "id": 1692009,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            },
            {
                "id": 1691079,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            },
            {
                "id": 1687241,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            },
            {
                "id": 1686773,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            },
            {
                "id": 1684588,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            },
            {
                "id": 1684188,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            },
            {
                "id": 1667238,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            },
            {
                "id": 1644819,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            },
            {
                "id": 1638341,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            },
            {
                "id": 1633552,
                "content": [
                    {
                        "username": "anubhavnegi54",
                        "content": "Take care of integer overflow guys"
                    },
                    {
                        "username": "mustahid19",
                        "content": "class Solution(object):\\n    def mySqrt(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        result = float(x) ** (0.5)\\n        return int(result)"
                    },
                    {
                        "username": "Khushali_",
                        "content": "I  am unable to understand this behavior, when we give x as 2147395600 it gives output as 289398. How it is possible, as per the condition in the while loop. As it would exceed the value of x. \\n\\nCan anyone explain?\\n\\npublic static int mySqrt(int x) {\\n        int i = 1;\\n        if(x==1){\\n            return 1;\\n        }\\n\\n        while (i*i <= x){\\n            System.out.println(\"Square of \"+ i + \" :\" + i*i);\\n            i++;\\n        }\\n        return i-1;\\n    }"
                    },
                    {
                        "username": "thisisahtesham",
                        "content": "just use sqrt() in c++  :) easiest solution lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9[C++] FAANG \\uD83D\\uDE28 Interview Optimized code \\uD83D\\uDE31 INSANE\\nhttps://leetcode.com/problems/sqrtx/solutions/2266517/c-faang-interview-optimized-code-insane/"
                    },
                    {
                        "username": "akashdwivedi563",
                        "content": "HI here is my java solution using Binary search \\n`public int mySqrt(int x) {\\n        if (x < 2)\\n            return x;\\n        int end = x / 2;\\n        int start = 1;\\n        while (start <= end) {\\n            int mid = (start + end) / 2;\\n            if ((long) mid * mid > x) {\\n                end = mid - 1;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return end;\\n    }`"
                    },
                    {
                        "username": "damacaner",
                        "content": "> You must not use any built-in exponent function or operator.\\n\\nYou must or you should? cause this works for GoLang kek.\\n `return int(math.Floor(math.Sqrt(float64(x))))`"
                    },
                    {
                        "username": "piratedjesus",
                        "content": "Using BS\\n\\nclass Solution {\\npublic:\\n    int mySqrt(int num) {\\n    int start = 0, end = num-1;\\n    long long int mid = start + (end-start)/2,ans=-1;\\n    if(num==0||num==1){\\n        return num;\\n    }\\n    while (start<=end)\\n    {\\n        if(mid*mid>num){\\n            end = mid-1;\\n        }\\n        else if(mid*mid<=num){\\n            ans = max(ans,mid);\\n            start = mid +1;\\n        }\\n       mid = start + (end-start)/2;\\n    }\\n     return ans;  \\n    }\\n};"
                    },
                    {
                        "username": "soumyamaheshwari",
                        "content": "when mid*mid will be done it will go out of the range of int so that is why we will use long long int"
                    },
                    {
                        "username": "avnish39cs",
                        "content": "class Solution {\\npublic:\\nlong long int binarysearch(int n){\\n  int s=0,e=n;\\n        long long int mid=s+(e-s)/2;\\n        long long int ans=-1;\\n        while(s<=e){\\n            long long int square=mid*mid;\\n            if(square==n){\\n                return mid;\\n            }\\n            if(square<n){\\n                ans=mid;\\n                s=mid+1;            \\n        }\\n        else{\\n            e=mid-1;\\n        }\\n        mid=s+(e-s)/2;\\n        \\n    }\\n    return ans;\\n\\n}\\n    int mySqrt(int x) {\\n        return binarysearch(x);\\n    }\\n};\\n      "
                    }
                ]
            }
        ]
    }
]