[
    {
        "title": "Circular Sentence",
        "question_content": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces.\n\n\tFor example, \"Hello World\", \"HELLO\", \"hello world hello world\" are all sentences.\n\nWords consist of only uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different.\nA sentence is circular if:\n\n\tThe last character of a word is equal to the first character of the next word.\n\tThe last character of the last word is equal to the first character of the first word.\n\nFor example, \"leetcode exercises sound delightful\", \"eetcode\", \"leetcode eats soul\" are all circular sentences. However, \"Leetcode is cool\", \"happy Leetcode\", \"Leetcode\" and \"I like Leetcode\" are not circular sentences.\nGiven a string sentence, return true if it is circular. Otherwise, return false.\n&nbsp;\nExample 1:\n\nInput: sentence = \"leetcode exercises sound delightful\"\nOutput: true\nExplanation: The words in sentence are [\"leetcode\", \"exercises\", \"sound\", \"delightful\"].\n- leetcode's&nbsp;last character is equal to exercises's first character.\n- exercises's&nbsp;last character is equal to sound's first character.\n- sound's&nbsp;last character is equal to delightful's first character.\n- delightful's&nbsp;last character is equal to leetcode's first character.\nThe sentence is circular.\nExample 2:\n\nInput: sentence = \"eetcode\"\nOutput: true\nExplanation: The words in sentence are [\"eetcode\"].\n- eetcode's&nbsp;last character is equal to eetcode's first character.\nThe sentence is circular.\nExample 3:\n\nInput: sentence = \"Leetcode is cool\"\nOutput: false\nExplanation: The words in sentence are [\"Leetcode\", \"is\", \"cool\"].\n- Leetcode's&nbsp;last character is not equal to is's first character.\nThe sentence is not circular.\n&nbsp;\nConstraints:\n\n\t1 <= sentence.length <= 500\n\tsentence consist of only lowercase and uppercase English letters and spaces.\n\tThe words in sentence are separated by a single space.\n\tThere are no leading or trailing spaces.",
        "solutions": [
            {
                "id": 2874980,
                "title": "python-c-o-1-space-explained",
                "content": "**\\u2705 IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n****\\nThis solution employs checking the circularity condition with no additional space. Time complexity is linear: **O(N)**. Space complexity is constant: **O(1)**.\\n****\\n\\n**Comment.** Check letters adjacent to spaces. In the end, check extreme letters.\\n\\n**Python #1.** Constant-space solution.\\n```\\nclass Solution:\\n    def isCircularSentence(self, s: str) -> bool:\\n        for i in range(len(s)):\\n            if s[i] == \" \" and s[i-1] != s[i+1]:\\n                return False\\n        return s[0] == s[-1]\\n```\\n\\n**Python #2.** Linear-space solution using split.\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split(\" \")\\n        for i in range(len(words)):\\n            if words[i-1][-1] != words[i][0]:\\n                return False\\n        return True\\n```\\n\\n**C++.** Constant-space solution.\\n```\\nclass Solution \\n{\\npublic:\\n    bool isCircularSentence(string s) \\n    {\\n        for (int i = 0; i < s.size(); ++i)\\n            if (s[i] == \\' \\' && s[i-1] != s[i+1])\\n                return false;\\n        return s[0] == s[s.size()-1];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, s: str) -> bool:\\n        for i in range(len(s)):\\n            if s[i] == \" \" and s[i-1] != s[i+1]:\\n                return False\\n        return s[0] == s[-1]\\n```\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split(\" \")\\n        for i in range(len(words)):\\n            if words[i-1][-1] != words[i][0]:\\n                return False\\n        return True\\n```\n```\\nclass Solution \\n{\\npublic:\\n    bool isCircularSentence(string s) \\n    {\\n        for (int i = 0; i < s.size(); ++i)\\n            if (s[i] == \\' \\' && s[i-1] != s[i+1])\\n                return false;\\n        return s[0] == s[s.size()-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874952,
                "title": "simple-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)==\\' \\')\\n            {\\n                if(s.charAt(i-1)!=s.charAt(i+1))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        return s.charAt(0) == s.charAt(s.length()-1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)==\\' \\')\\n            {\\n                if(s.charAt(i-1)!=s.charAt(i+1))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        return s.charAt(0) == s.charAt(s.length()-1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874990,
                "title": "c-solution-very-simple",
                "content": "<b>Up Vote if you like the solution\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        if(s[0] != s[s.size()-1]) return false;\\n        for(int i = 0; i<s.size(); ++i){\\n            if(s[i] == \\' \\' && s[i-1] != s[i+1]) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        if(s[0] != s[s.size()-1]) return false;\\n        for(int i = 0; i<s.size(); ++i){\\n            if(s[i] == \\' \\' && s[i-1] != s[i+1]) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874981,
                "title": "one-pass-o-1-space",
                "content": "# C++ Iterative\\n\\tbool isCircularSentence(string sen) {\\n        int sz = sen.size();\\n        if(sen[0] != sen[sz - 1]) return false;\\n        for(int i = 0; i < sz;++i)\\n            if(sen[i] == \\' \\' && sen[i - 1] != sen[i + 1]) return false;\\n        return true;\\n    }\\n# C++ Recursion\\nJust for fun :)\\n     \\n\\t bool isCircularSentence(string sen) {\\n        int sz = sen.size();\\n        if(sen[0] != sen[sz - 1]) return false;\\n        \\n        function<bool(int)> solve = [&](int i){\\n            if(i == sz) return true;\\n            if(sen[i] == \\' \\' && sen[i - 1] != sen[i + 1]) return false;\\n            return solve(i + 1);\\n        };\\n        return solve(0);\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "# C++ Iterative\\n\\tbool isCircularSentence(string sen) {\\n        int sz = sen.size();\\n        if(sen[0] != sen[sz - 1]) return false;\\n        for(int i = 0; i < sz;++i)\\n            if(sen[i] == \\' \\' && sen[i - 1] != sen[i + 1]) return false;\\n        return true;\\n    }\\n# C++ Recursion\\nJust for fun :)\\n     \\n\\t bool isCircularSentence(string sen) {\\n        int sz = sen.size();\\n        if(sen[0] != sen[sz - 1]) return false;\\n        \\n        function<bool(int)> solve = [&](int i){\\n            if(i == sz) return true;\\n            if(sen[i] == \\' \\' && sen[i - 1] != sen[i + 1]) return false;\\n            return solve(i + 1);\\n        };\\n        return solve(0);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2875035,
                "title": "c-short-and-easy-single-traversal",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        \\n        // iterate till space \\n        int i=0 ;\\n        while( s[i] != \\' \\' && i<s.size() ){\\n            i++ ;\\n        }\\n        \\n        // if sentence does\\'nt have whitespaces \\n        // then simply check the first and last character \\n        if( s[0] != s[s.size()-1] ) return false ;\\n        \\n        // if sentence have whitespaces \\n        // now check for the last and first word \\n        else if( s[i] == \\' \\' && s[i-1] != s[i+1] ) return false ;\\n        \\n        return true ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        \\n        // iterate till space \\n        int i=0 ;\\n        while( s[i] != \\' \\' && i<s.size() ){\\n            i++ ;\\n        }\\n        \\n        // if sentence does\\'nt have whitespaces \\n        // then simply check the first and last character \\n        if( s[0] != s[s.size()-1] ) return false ;\\n        \\n        // if sentence have whitespaces \\n        // now check for the last and first word \\n        else if( s[i] == \\' \\' && s[i-1] != s[i+1] ) return false ;\\n        \\n        return true ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875169,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) \\n    {\\n        int n = s.size();\\n        for (int i = 0; i < s.size(); i++)\\n        {\\n            if (s[i] == \\' \\')\\n            {\\n\\t\\t\\t   //if there is space char at \"i\" => s[i - 1] will be last char of prevWord, s[i + 1] will be first char fo nextWord\\n                if (s[i - 1] != s[i + 1]) return false;\\n            }\\n        }\\n        return (s[0] == s[n - 1]);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) \\n    {\\n        int n = s.size();\\n        for (int i = 0; i < s.size(); i++)\\n        {\\n            if (s[i] == \\' \\')\\n            {\\n\\t\\t\\t   //if there is space char at \"i\" => s[i - 1] will be last char of prevWord, s[i + 1] will be first char fo nextWord\\n                if (s[i - 1] != s[i + 1]) return false;\\n            }\\n        }\\n        return (s[0] == s[n - 1]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874968,
                "title": "simple-and-easy-to-understand-two-solutions-python",
                "content": "##### Solution 1:\\n* *Time Complexity :* **O(N)**\\n* *Space Complexity:* **O(1)**\\n```\\nclass Solution(object):\\n    def isCircularSentence(self, s):\\n        if s[0] != s[-1]: return False\\n        flag = 1\\n        for ch in s:\\n            if flag:\\n                if ch != \\' \\': last = ch\\n                else: flag = 0\\n            else:\\n                if ch != last: return False\\n                flag = 1\\n        return True\\n```\\n##### Solution 2:\\n* *Time Complexity :* **O(N)**\\n* *Space Complexity:* **O(N)**\\n```\\nclass Solution(object):\\n    def isCircularSentence(self, s):\\n        arr, word = [], \\'\\'\\n        for ch in s:\\n            if ch == \\' \\':\\n                arr.append(word)\\n                word = \\'\\'\\n            else: word += ch\\n        arr.append(word)\\n        if arr[0][0] != arr[-1][-1]:\\n            return False\\n        last = arr[0][-1]   \\n        for i in range(1, len(arr)):\\n            if arr[i][0] == last:\\n                last = arr[i][-1]\\n            else:\\n                return False\\n        return True\\n```\\n**UpVote**, if you like it **:)**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def isCircularSentence(self, s):\\n        if s[0] != s[-1]: return False\\n        flag = 1\\n        for ch in s:\\n            if flag:\\n                if ch != \\' \\': last = ch\\n                else: flag = 0\\n            else:\\n                if ch != last: return False\\n                flag = 1\\n        return True\\n```\n```\\nclass Solution(object):\\n    def isCircularSentence(self, s):\\n        arr, word = [], \\'\\'\\n        for ch in s:\\n            if ch == \\' \\':\\n                arr.append(word)\\n                word = \\'\\'\\n            else: word += ch\\n        arr.append(word)\\n        if arr[0][0] != arr[-1][-1]:\\n            return False\\n        last = arr[0][-1]   \\n        for i in range(1, len(arr)):\\n            if arr[i][0] == last:\\n                last = arr[i][-1]\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875013,
                "title": "javascript-tc-o-n-sc-o-1",
                "content": "```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    const words = sentence.split(\\' \\');\\n    const lastWord = words[words.length - 1];\\n    let lastChar = lastWord[lastWord.length - 1];\\n    \\n    for (const word of words) {\\n        if (word[0] !== lastChar) {\\n            return false;\\n        }\\n        lastChar = word[word.length - 1];\\n    }\\n    \\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    const words = sentence.split(\\' \\');\\n    const lastWord = words[words.length - 1];\\n    let lastChar = lastWord[lastWord.length - 1];\\n    \\n    for (const word of words) {\\n        if (word[0] !== lastChar) {\\n            return false;\\n        }\\n        lastChar = word[word.length - 1];\\n    }\\n    \\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3134757,
                "title": "python-easy-solution",
                "content": "# Code\\u2705\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool: #// sentence = \"leetcode exercises sound delightful\"\\n        sentence_list = list(sentence.split(\" \")) #// sentence_list = [\\'leetcode\\', \\'exercises\\', \\'sound\\', \\'delightful\\']                                  \\n        current = \"\"                                                #// LOOP 1                                LOOP 2\\n        for index, word in enumerate(sentence_list):                #// when index = 0 and word = leetcode    when index = 1 and word = exercises\\n            if current and current != word[0]:                      #// condition not met as current = \"\"     current = \"e\" and current = word[0]\\n                return False\\n            current = word[-1]                                      #// current = \\'e\\' now                     current = \\'s\\' now\\n            if index == len(sentence_list)-1 and current != sentence_list[0][0]:   #// this condition will satisfy when index = 3 and current = l of leetcode (first word in sentence_list)\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool: #// sentence = \"leetcode exercises sound delightful\"\\n        sentence_list = list(sentence.split(\" \")) #// sentence_list = [\\'leetcode\\', \\'exercises\\', \\'sound\\', \\'delightful\\']                                  \\n        current = \"\"                                                #// LOOP 1                                LOOP 2\\n        for index, word in enumerate(sentence_list):                #// when index = 0 and word = leetcode    when index = 1 and word = exercises\\n            if current and current != word[0]:                      #// condition not met as current = \"\"     current = \"e\" and current = word[0]\\n                return False\\n            current = word[-1]                                      #// current = \\'e\\' now                     current = \\'s\\' now\\n            if index == len(sentence_list)-1 and current != sentence_list[0][0]:   #// this condition will satisfy when index = 3 and current = l of leetcode (first word in sentence_list)\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876570,
                "title": "c-2-different-approaches-fast-0ms-100",
                "content": "# Approach 1: hand rolled loop (3ms)\\nWe just scan for a space and compare the letters before and after it.\\n\\n```cpp\\n    static bool isCircularSentence(const string& s) noexcept {\\n        if (s.front() != s.back()) return false;\\n        \\n        for (size_t p = 1; p < size(s); ++p)\\n            if (s[p] == \\' \\' && s[p - 1] != s[p + 1]) return false;\\n        \\n        return true;\\n    }\\n```\\n\\n**Complexity Analysis**\\nLet $$n$$ the length of the input string then the\\n  * Time complexity is $$O(n)$$ and the\\n  * Space complexity is $$O(1)$$.\\n# Approach 2: string::find_first_of (0ms)\\n\\n```std::string``` function are often highly optimized, so instead of scanning the input char by char we use ```string::find_first_of``` to find the next space.\\n\\n```cpp\\n    static bool isCircularSentence(const string& s) noexcept {\\n        if (s.front() != s.back()) return false;\\n        \\n        for (size_t p = 0; (p = s.find_first_of(\\' \\', p + 1)) != string::npos; )\\n            if (s[p - 1] != s[p + 1]) return false;\\n        \\n        return true;\\n    }\\n```\\n\\nThe complexity is the same as approach 1, but the constant factors are different. Just to confirm the generated code is also different, see https://godbolt.org/z/qxo4frj35\\n\\n**Complexity Analysis**\\nLet $$n$$ the length of the input string then the\\n  * Time complexity is $$O(n)$$ and the\\n  * Space complexity is $$O(1)$$.\\n\\n_As always: Feedback, questions, and comments are welcome. Leaving an up-vote sparks joy! :)_\\n\\n**p.s. Join us on the [LeetCode The Hard Way Discord Server](https://discord.gg/hFUyVyWy2E)!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\n    static bool isCircularSentence(const string& s) noexcept {\\n        if (s.front() != s.back()) return false;\\n        \\n        for (size_t p = 1; p < size(s); ++p)\\n            if (s[p] == \\' \\' && s[p - 1] != s[p + 1]) return false;\\n        \\n        return true;\\n    }\\n```\n```std::string```\n```string::find_first_of```\n```cpp\\n    static bool isCircularSentence(const string& s) noexcept {\\n        if (s.front() != s.back()) return false;\\n        \\n        for (size_t p = 0; (p = s.find_first_of(\\' \\', p + 1)) != string::npos; )\\n            if (s[p - 1] != s[p + 1]) return false;\\n        \\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2875018,
                "title": "c-simple-approach",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    bool isCircularSentence(string s) \\n    {\\n        int n=s.size();\\n        for(int i=0; i<n-1; i++)\\n            if(s[i+1]==\\' \\' && s[i]!=s[i+2])\\n                return false;\\n        \\n        return s[0]==s[n-1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    bool isCircularSentence(string s) \\n    {\\n        int n=s.size();\\n        for(int i=0; i<n-1; i++)\\n            if(s[i+1]==\\' \\' && s[i]!=s[i+2])\\n                return false;\\n        \\n        return s[0]==s[n-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876528,
                "title": "c-short-and-easy-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n = sentence.size();\\n        \\n        if(sentence[0]!= sentence[n-1])\\n            return false;\\n        \\n        for(int i = 0; i<n; i++){\\n            if(sentence[i] == \\' \\' && sentence[i-1]!= sentence[i+1])\\n            return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n = sentence.size();\\n        \\n        if(sentence[0]!= sentence[n-1])\\n            return false;\\n        \\n        for(int i = 0; i<n; i++){\\n            if(sentence[i] == \\' \\' && sentence[i-1]!= sentence[i+1])\\n            return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875566,
                "title": "python-3-3-lines-with-example-t-m-99-97",
                "content": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:    #  Ex:  sentence = \"leetcode exercises sound delightful\"\\n\\n        sentence = sentence.split() ;print(sentence)        #       sentence = [\\'leetcode\\',\\'exercises\\',\\'sound\\',\\'delightful\\']           \\n\\n        sentence.append(sentence[0])                        #       sentence = [\\'leetcode\\',\\'exercises\\',\\'sound\\',\\'delightful\\',\\'leetcode\\']\\n        print(list(zip(sentence, sentence[1:])))\\n        return all(a[-1] == b[0]                            #       zip(sentence, sentence[1:]) = ((  \\'leetcode\\', \\'exercises\\' ),\\n               for a, b in zip(sentence, sentence[1:]))     #                                      ( \\'exercises\\', \\'sound\\'     ),\\n                                                            #                                      (     \\'sound\\', \\'delightful\\'),\\n                                                            #                                      (\\'delightful\\', \\'leetcode   \\'))\\n                                                            #                                                 |    |\\n                                                            #      return all(\\'e\\' == \\'e\\'),(\\'s\\' == \\'s\\'),(\\'d\\' == \\'d\\'),(\\'l\\' == \\'l\\')) -> True\\n```\\n[https://leetcode.com/submissions/detail/854275045/](http://)\\n\\nI could be wrong, but I think that time is *O*(*N*) and space is *O*(*N*).",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:    #  Ex:  sentence = \"leetcode exercises sound delightful\"\\n\\n        sentence = sentence.split() ;print(sentence)        #       sentence = [\\'leetcode\\',\\'exercises\\',\\'sound\\',\\'delightful\\']           \\n\\n        sentence.append(sentence[0])                        #       sentence = [\\'leetcode\\',\\'exercises\\',\\'sound\\',\\'delightful\\',\\'leetcode\\']\\n        print(list(zip(sentence, sentence[1:])))\\n        return all(a[-1] == b[0]                            #       zip(sentence, sentence[1:]) = ((  \\'leetcode\\', \\'exercises\\' ),\\n               for a, b in zip(sentence, sentence[1:]))     #                                      ( \\'exercises\\', \\'sound\\'     ),\\n                                                            #                                      (     \\'sound\\', \\'delightful\\'),\\n                                                            #                                      (\\'delightful\\', \\'leetcode   \\'))\\n                                                            #                                                 |    |\\n                                                            #      return all(\\'e\\' == \\'e\\'),(\\'s\\' == \\'s\\'),(\\'d\\' == \\'d\\'),(\\'l\\' == \\'l\\')) -> True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875467,
                "title": "circular-sentence-c-solution",
                "content": "# Intuition\\n  \\n# Approach\\n  first finding all the string and store it to a vector\\n  then check the conditions\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        vector<string> v;\\n        int i=0;\\n        s+=\\' \\';\\n        for(int i=0;i<s.size();i++){\\n            string str=\"\";\\n            while(s[i]!=\\' \\'){\\n                str+=s[i];\\n                i++;\\n            }\\n            v.push_back(str);\\n        }\\n        // for(auto s:v)cout<<s<<\" \";\\n        int n=v.size();\\n        for(int i=0;i<n-1;i++){\\n            string s1=v[i];\\n            string s2=v[i+1];\\n            if(s1[s1.size()-1]!=s2[0])\\n                return false;\\n        }\\n        if(v[n-1][v[n-1].size()-1]== v[0][0])return true;\\n        \\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        vector<string> v;\\n        int i=0;\\n        s+=\\' \\';\\n        for(int i=0;i<s.size();i++){\\n            string str=\"\";\\n            while(s[i]!=\\' \\'){\\n                str+=s[i];\\n                i++;\\n            }\\n            v.push_back(str);\\n        }\\n        // for(auto s:v)cout<<s<<\" \";\\n        int n=v.size();\\n        for(int i=0;i<n-1;i++){\\n            string s1=v[i];\\n            string s2=v[i+1];\\n            if(s1[s1.size()-1]!=s2[0])\\n                return false;\\n        }\\n        if(v[n-1][v[n-1].size()-1]== v[0][0])return true;\\n        \\n        return false;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2875234,
                "title": "c-simple-and-easy-solution-in-o-n",
                "content": "# Intuition\\nwe need to check for only false or true cases in my case I am checking for false\\n\\n# Approach\\nif s[i]!=s[size-1] return false\\n   and than iterate through the string if space is found \\ncheck the preceding and succedig charcter if they are not equal simply\\nreturn false\\n```\\nfor(int i=0; i<l; i++)\\n        {\\n           \\n            if(s[i]==\\' \\')\\n            {\\n                if(s[i-1]!=s[i+1])\\n                {\\n                    return 0;\\n                }\\n            }\\n            \\n        }\\n```\\nAnd in all other case return true;\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n\\n$O(n)$\\n\\n- Space complexity:\\n\\n$O(1)$\\n## UPVOTE MY SOLUTION\\nFOR ANY DOUBT ASK IN COMMENT SECTION\\n \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        int l=s.size();\\n         if(s[0]!=s[l-1])\\n         {\\n             return 0;\\n         }\\n         \\n       \\n     \\n        for(int i=0; i<l; i++)\\n        {\\n           \\n            if(s[i]==\\' \\')\\n            {\\n                if(s[i-1]!=s[i+1])\\n                {\\n                    return 0;\\n                }\\n            }\\n            \\n        }\\n        \\n      return 1;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nfor(int i=0; i<l; i++)\\n        {\\n           \\n            if(s[i]==\\' \\')\\n            {\\n                if(s[i-1]!=s[i+1])\\n                {\\n                    return 0;\\n                }\\n            }\\n            \\n        }\\n```\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        int l=s.size();\\n         if(s[0]!=s[l-1])\\n         {\\n             return 0;\\n         }\\n         \\n       \\n     \\n        for(int i=0; i<l; i++)\\n        {\\n           \\n            if(s[i]==\\' \\')\\n            {\\n                if(s[i-1]!=s[i+1])\\n                {\\n                    return 0;\\n                }\\n            }\\n            \\n        }\\n        \\n      return 1;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874951,
                "title": "java-simplest-with-comments",
                "content": "```\\n    public boolean isCircularSentence(String sentence) {\\n        //split sentence into array of words\\n        String[] arr = sentence.split(\" \");\\n        \\n        //check for 2nd condition\\n        if(arr[0].charAt(0) != arr[arr.length - 1].charAt(arr[arr.length - 1].length() - 1)) return false;\\n\\n        //check for first condition\\n        for(int i = 0; i < arr.length - 1; i++) {\\n            if(arr[i + 1].charAt(0) != arr[i].charAt(arr[i].length() - 1)) return false;\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public boolean isCircularSentence(String sentence) {\\n        //split sentence into array of words\\n        String[] arr = sentence.split(\" \");\\n        \\n        //check for 2nd condition\\n        if(arr[0].charAt(0) != arr[arr.length - 1].charAt(arr[arr.length - 1].length() - 1)) return false;\\n\\n        //check for first condition\\n        for(int i = 0; i < arr.length - 1; i++) {\\n            if(arr[i + 1].charAt(0) != arr[i].charAt(arr[i].length() - 1)) return false;\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2988857,
                "title": "ansi-easy-soluton",
                "content": "```c\\nbool isCircularSentence(char *sentence)\\n{\\n    int len = strlen(sentence);\\n    \\n    if (sentence[0] != sentence[len - 1])\\n        return false;\\n\\n    for (int i = 0 ; i < len ; i++)\\n        if (sentence[i] == \\' \\' && sentence[i - 1] != sentence[i + 1])\\n            return false;\\n\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```c\\nbool isCircularSentence(char *sentence)\\n{\\n    int len = strlen(sentence);\\n    \\n    if (sentence[0] != sentence[len - 1])\\n        return false;\\n\\n    for (int i = 0 ; i < len ; i++)\\n        if (sentence[i] == \\' \\' && sentence[i - 1] != sentence[i + 1])\\n            return false;\\n\\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2937064,
                "title": "check-around-spaces",
                "content": "**C++**\\n```cpp\\nbool isCircularSentence(string s) {\\n    for (int i = 1; i < s.size() - 1; ++i)\\n        if (s[i] == \\' \\' && s[i - 1] != s[i + 1])\\n            return false;\\n    return s.front() == s.back();\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nbool isCircularSentence(string s) {\\n    for (int i = 1; i < s.size() - 1; ++i)\\n        if (s[i] == \\' \\' && s[i - 1] != s[i + 1])\\n            return false;\\n    return s.front() == s.back();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2896332,
                "title": "java-simple-circular-sentence",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String s[]=sentence.split(\" \");\\n        int l=s.length;\\n        for(int i=0;i<l-1;i++)\\n        {\\n            if(s[i].charAt(s[i].length()-1)!=s[i+1].charAt(0))return false;\\n        }\\n        return s[0].charAt(0)==s[l-1].charAt(s[l-1].length()-1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String s[]=sentence.split(\" \");\\n        int l=s.length;\\n        for(int i=0;i<l-1;i++)\\n        {\\n            if(s[i].charAt(s[i].length()-1)!=s[i+1].charAt(0))return false;\\n        }\\n        return s[0].charAt(0)==s[l-1].charAt(s[l-1].length()-1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876951,
                "title": "split-sentence",
                "content": "# Intuition\\nSplit the sentences into words then check for the condition.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nKeep track of the last character of the word and chek it wiht the begin of next.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: *`O(n)`*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: *`O(n)`*\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String words[] = sentence.split(\" \");\\n        int n = words.length;\\n        if(n == 0)\\n            return true;\\n        int last = words[n - 1].charAt(words[n - 1].length() - 1);\\n        for(int i = 0; i < n; i++) {\\n            if(words[i].charAt(0) != last)\\n                return false;\\n            last = words[i].charAt(words[i].length() - 1);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String words[] = sentence.split(\" \");\\n        int n = words.length;\\n        if(n == 0)\\n            return true;\\n        int last = words[n - 1].charAt(words[n - 1].length() - 1);\\n        for(int i = 0; i < n; i++) {\\n            if(words[i].charAt(0) != last)\\n                return false;\\n            last = words[i].charAt(words[i].length() - 1);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875943,
                "title": "easy-and-short-c-solution-with-time-complexity",
                "content": "Here is my C++ solution :-\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        int n= s.size();\\n        for (int i=1; i<(n-1); i++){\\n            if (s[i]==\\' \\' && s[i-1]!=s[i+1]){\\n                return false;\\n            }\\n        }\\n        if (s[0]!=s[n-1])return false;\\n        return true;\\n    }\\n};\\n```\\n\\n**Time Complexity : O(N)\\nSpace Complexity : O(1)**",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        int n= s.size();\\n        for (int i=1; i<(n-1); i++){\\n            if (s[i]==\\' \\' && s[i-1]!=s[i+1]){\\n                return false;\\n            }\\n        }\\n        if (s[0]!=s[n-1])return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875450,
                "title": "easiest-clean-code-beginner-friendly",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        if(sentence[0] != sentence[sentence.length()-1]) return false; // base case\\n        for (int i = 0 ; i < sentence.length() ; ++i)\\n        {\\n            if(sentence[i] == \\' \\') // if we encounter a space, that means here words breaked up, so we need to check the prev character & the next character if they are equal\\n            {\\n                if(sentence[i-1] != sentence[i+1]) return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        if(sentence[0] != sentence[sentence.length()-1]) return false; // base case\\n        for (int i = 0 ; i < sentence.length() ; ++i)\\n        {\\n            if(sentence[i] == \\' \\') // if we encounter a space, that means here words breaked up, so we need to check the prev character & the next character if they are equal\\n            {\\n                if(sentence[i-1] != sentence[i+1]) return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875247,
                "title": "c-easy-space-o-1-time-o-n-no-split-explanation",
                "content": "Idea is check first letter and last letter of the string `sentence` first.\\nAnd then find out all space in the string `sentence`, check two letter closed to space.\\nIf all the above condition  are passed, then  the sentence is circular sentence.\\n\\n```C++\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n = sentence.length();\\n        if(sentence[0] != sentence[n-1]) return false;\\n        for(int i = 1 ; i<n;i++)\\n            if(sentence[i]==\\' \\' && (sentence[i-1] != sentence[i+1]))  return false;\\n        return true;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```C++\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n = sentence.length();\\n        if(sentence[0] != sentence[n-1]) return false;\\n        for(int i = 1 ; i<n;i++)\\n            if(sentence[i]==\\' \\' && (sentence[i-1] != sentence[i+1]))  return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875056,
                "title": "python-simple-python-solution-90-faster-string-split",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 31 ms, faster than 90.91% of Python3 online submissions for Circular Sentence.\\n# Memory Usage: 13.8 MB, less than 100.00% of Python3 online submissions for Circular Sentence.\\n\\n\\tclass Solution:\\n\\t\\tdef isCircularSentence(self, sentence: str) -> bool:\\n\\n\\t\\t\\tsentence = sentence.split()\\n\\t\\t\\tfirst_word = sentence[0]\\n\\t\\t\\tlast_word = sentence[-1]\\n\\n\\t\\t\\tif first_word[0] != last_word[-1]:\\n\\t\\t\\t\\treturn False\\n\\n\\t\\t\\tfor i in range(len(sentence)-1):\\n\\n\\t\\t\\t\\tfirst_word = sentence[i]\\n\\t\\t\\t\\tlast_word = sentence[i+1]\\n\\n\\t\\t\\t\\tif first_word[-1] != last_word[0]:\\n\\t\\t\\t\\t\\treturn False\\n\\n\\t\\t\\treturn True\\n\\t\\t\\t\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 31 ms, faster than 90.91% of Python3 online submissions for Circular Sentence.\\n# Memory Usage: 13.8 MB, less than 100.00% of Python3 online submissions for Circular Sentence.\\n\\n\\tclass Solution:\\n\\t\\tdef isCircularSentence(self, sentence: str) -> bool:\\n\\n\\t\\t\\tsentence = sentence.split()\\n\\t\\t\\tfirst_word = sentence[0]\\n\\t\\t\\tlast_word = sentence[-1]\\n\\n\\t\\t\\tif first_word[0] != last_word[-1]:\\n\\t\\t\\t\\treturn False\\n\\n\\t\\t\\tfor i in range(len(sentence)-1):\\n\\n\\t\\t\\t\\tfirst_word = sentence[i]\\n\\t\\t\\t\\tlast_word = sentence[i+1]\\n\\n\\t\\t\\t\\tif first_word[-1] != last_word[0]:\\n\\t\\t\\t\\t\\treturn False\\n\\n\\t\\t\\treturn True\\n\\t\\t\\t\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 3122257,
                "title": "easy-one-dood",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        String[] a = s.split(\"\\\\\\\\s+\");\\n        int n = a.length;\\n        if(n==1)\\n        {\\n            int h = a[0].length();\\n            if(a[0].charAt(0)==a[0].charAt(h-1))\\n                return true;\\n            else\\n                return false;\\n        }\\n        for(int i=0;i<n-1;i++)\\n        {\\n            int h = a[i].length();\\n            if(a[i].charAt(h-1)!=a[i+1].charAt(0))\\n                return false;\\n        }\\n        int j = a[n-1].length();\\n        if(a[0].charAt(0) != a[n-1].charAt(j-1))\\n            return false;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        String[] a = s.split(\"\\\\\\\\s+\");\\n        int n = a.length;\\n        if(n==1)\\n        {\\n            int h = a[0].length();\\n            if(a[0].charAt(0)==a[0].charAt(h-1))\\n                return true;\\n            else\\n                return false;\\n        }\\n        for(int i=0;i<n-1;i++)\\n        {\\n            int h = a[i].length();\\n            if(a[i].charAt(h-1)!=a[i+1].charAt(0))\\n                return false;\\n        }\\n        int j = a[n-1].length();\\n        if(a[0].charAt(0) != a[n-1].charAt(j-1))\\n            return false;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3029305,
                "title": "java-fast-and-short-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSimply check all the sentences first and last letters\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i)==\\' \\'){\\n                if(s.charAt(i-1)!=s.charAt(i+1)){\\n                    return false;\\n                }\\n            }\\n        }\\n        return s.charAt(0) == s.charAt(s.length()-1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i)==\\' \\'){\\n                if(s.charAt(i-1)!=s.charAt(i+1)){\\n                    return false;\\n                }\\n            }\\n        }\\n        return s.charAt(0) == s.charAt(s.length()-1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3005174,
                "title": "python-python-3-detailed-explanation",
                "content": "# Approach:\\n- First, we have to split the `sentence` string into a list by its spaces\\n    - We can do this by using the python built in `split` function\\n```\\nsentence = \"hi everyone how are you\"\\nreturn sentence.split()\\n\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\\n- Second, we have to check if the first character of the first word is the same as the last character of the last word\\n    - We can do this by using `words[0][0] == words[-1][-1]\\n    `\\n- After this, we can start iterating through `words` to check if the last letter of the current position: `x` is the same as the first letter of the next position: `x+1`\\n    - Every iteration, we have to check to make sure that the requirement is met and if it isnt, we would instantly `return False` as it is not considered a \"circular sentence\"\\n- Once all of the propper requirements are met, we can `return True`\\n\\n# Python 3:\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```\\n# Python:\\n```\\nclass Solution(object):\\n    def isCircularSentence(self, sentence):\\n        \"\"\"\\n        :type sentence: str\\n        :rtype: bool\\n        \"\"\"\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nsentence = \"hi everyone how are you\"\\nreturn sentence.split()\\n\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3005172,
                "title": "detailed-explanation-python",
                "content": "# Approach:\\n- First, we have to split the `sentence` string into a list by its spaces\\n    - We can do this by using the python built in `split` function\\n```\\ndef func():\\n    sentence = \"hi everyone how are you\"\\n    return sentence.split()\\n\\nprint(func())\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\\n- Second, we have to check if the first character of the first word is the same as the last character of the last word\\n    - We can do this by using `words[0][0] == words[-1][-1]\\n    `\\n- After this, we can start iterating through `words` to check if the last letter of the current position: `x` is the same as the first letter of the next position: `x+1`\\n    - Every iteration, we have to check to make sure that the requirement is met and if it isnt, we would instantly `return False` as it is not considered a \"circular sentence\"\\n- Once all of the propper requirements are met, we can `return True`\\n\\n# Python 3:\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```\\n# Python:\\n```\\nclass Solution(object):\\n    def isCircularSentence(self, sentence):\\n        \"\"\"\\n        :type sentence: str\\n        :rtype: bool\\n        \"\"\"\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef func():\\n    sentence = \"hi everyone how are you\"\\n    return sentence.split()\\n\\nprint(func())\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2960013,
                "title": "100-0-ms-2-lines-o-1-space",
                "content": "# upvote pls\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String S) {\\n        int L=S.length()-1;\\n        for(int i=0;i<=L;i++)\\n            if(S.charAt(i) == \\' \\' && S.charAt(i-1)!=S.charAt(i+1)) return false;\\n        \\n        return S.charAt(0)==S.charAt(L);\\n\\n\\n\\n        // var s=new Stack<Character>();\\n        // s.push(S.charAt(0));\\n        // String A[]=S.split(\" \");\\n        // s.push(A[0].charAt(A[0].length()-1));\\n        // int l=A.length;\\n        // if(l==1 && s.pop()!=s.pop()) return false;\\n        // for(int i=1;i<l;i++){\\n        //     if(A[i].charAt(0)!=s.peek()) return false;\\n        //     s.pop();\\n        //     s.push(A[i].charAt(A[i].length()-1));\\n        // }\\n        // if(!s.isEmpty() && s.pop()!=s.pop()) return false;\\n        // return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String S) {\\n        int L=S.length()-1;\\n        for(int i=0;i<=L;i++)\\n            if(S.charAt(i) == \\' \\' && S.charAt(i-1)!=S.charAt(i+1)) return false;\\n        \\n        return S.charAt(0)==S.charAt(L);\\n\\n\\n\\n        // var s=new Stack<Character>();\\n        // s.push(S.charAt(0));\\n        // String A[]=S.split(\" \");\\n        // s.push(A[0].charAt(A[0].length()-1));\\n        // int l=A.length;\\n        // if(l==1 && s.pop()!=s.pop()) return false;\\n        // for(int i=1;i<l;i++){\\n        //     if(A[i].charAt(0)!=s.peek()) return false;\\n        //     s.pop();\\n        //     s.push(A[i].charAt(A[i].length()-1));\\n        // }\\n        // if(!s.isEmpty() && s.pop()!=s.pop()) return false;\\n        // return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2919097,
                "title": "best-appprooooooooch-u-ever-seen-c-complete-beginner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUsed the indixes of the spaces and compare just back and front\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        vector<int>space_idx;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]==\\' \\')space_idx.push_back(i);\\n        }\\n        if(space_idx.size()==0)\\n        {\\n            if(s[0]!=s[s.size()-1])\\n            {\\n                return false;\\n            }\\n            return true;\\n        }\\n        for(int i=0;i<space_idx.size();i++)\\n        {\\n            if(s[space_idx[i]-1]!=s[space_idx[i]+1])return false;\\n        }\\n        //Take Care\\n        //  Uppercase and lowercase English letters are considered different.\\n        // failing test case---> \"Leetcode eisc cool\"\\n        if(s[0]!=s[s.size()-1])return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        vector<int>space_idx;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]==\\' \\')space_idx.push_back(i);\\n        }\\n        if(space_idx.size()==0)\\n        {\\n            if(s[0]!=s[s.size()-1])\\n            {\\n                return false;\\n            }\\n            return true;\\n        }\\n        for(int i=0;i<space_idx.size();i++)\\n        {\\n            if(s[space_idx[i]-1]!=s[space_idx[i]+1])return false;\\n        }\\n        //Take Care\\n        //  Uppercase and lowercase English letters are considered different.\\n        // failing test case---> \"Leetcode eisc cool\"\\n        if(s[0]!=s[s.size()-1])return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2898344,
                "title": "python-3-python-detailed-explanation-beginner-friendly",
                "content": "# Approach:\\n- First, we have to split the `sentence` string into a list by its spaces\\n    - We can do this by using the python built in `split` function\\n```\\ndef func():\\n    sentence = \"hi everyone how are you\"\\n    return sentence.split()\\n\\nprint(func())\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\\n- Second, we have to check if the first character of the first word is the same as the last character of the last word\\n    - We can do this by using `words[0][0] == words[-1][-1]\\n    `\\n- After this, we can start iterating through `words` to check if the last letter of the current position: `x` is the same as the first letter of the next position: `x+1`\\n    - Every iteration, we have to check to make sure that the requirement is met and if it isnt, we would instantly `return False` as it is not considered a \"circular sentence\"\\n- Once all of the propper requirements are met, we can `return True`\\n\\n# Python 3:\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```\\n# Python:\\n```\\nclass Solution(object):\\n    def isCircularSentence(self, sentence):\\n        \"\"\"\\n        :type sentence: str\\n        :rtype: bool\\n        \"\"\"\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef func():\\n    sentence = \"hi everyone how are you\"\\n    return sentence.split()\\n\\nprint(func())\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2895733,
                "title": "python-3-python-detailed-explanation-beginner-friendly",
                "content": "# Approach:\\n- First, we have to split the `sentence` string into a list by its spaces\\n    - We can do this by using the python built in `split` function\\n```\\nsentence = \"hi everyone how are you\"\\nreturn sentence.split()\\n\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\\n- Second, we have to check if the first character of the first word is the same as the last character of the last word\\n    - We can do this by using `words[0][0] == words[-1][-1]\\n    `\\n- After this, we can start iterating through `words` to check if the last letter of the current position: `x` is the same as the first letter of the next position: `x+1`\\n    - Every iteration, we have to check to make sure that the requirement is met and if it isnt, we would instantly `return False` as it is not considered a \"circular sentence\"\\n- Once all of the propper requirements are met, we can `return True`\\n\\n# Python 3:\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```\\n# Python:\\n```\\nclass Solution(object):\\n    def isCircularSentence(self, sentence):\\n        \"\"\"\\n        :type sentence: str\\n        :rtype: bool\\n        \"\"\"\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nsentence = \"hi everyone how are you\"\\nreturn sentence.split()\\n\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2882873,
                "title": "python-str-split-o-n",
                "content": "https://leetcode.com/submissions/detail/855455129/\\n```\\nRuntime: 26 ms, faster than 98.84% of Python3 online submissions for Circular Sentence.\\nMemory Usage: 13.9 MB, less than 12.12% of Python3 online submissions for Circular Sentence.\\n```\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        if sentence[0]!=sentence[-1]: return False\\n        words = sentence.split(\\' \\')\\n        for i,word in enumerate(words[1:]):\\n            if words[i][-1]!=word[0]:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nRuntime: 26 ms, faster than 98.84% of Python3 online submissions for Circular Sentence.\\nMemory Usage: 13.9 MB, less than 12.12% of Python3 online submissions for Circular Sentence.\\n```\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        if sentence[0]!=sentence[-1]: return False\\n        words = sentence.split(\\' \\')\\n        for i,word in enumerate(words[1:]):\\n            if words[i][-1]!=word[0]:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2878738,
                "title": "easy-python-solution-1-line-beats-100-runtime",
                "content": "I used the .split() method in python to separate the sentence into a list\\nFor example: \\n\"leetcode exercises sound delightful\" \\n[\\'leetcode\\', \\'exercises\\', \\'sound\\', \\'delightful\\']\\n\\nThen I created another list that was rotated by list splicing:\\nsentences.split() = [\\'leetcode\\', \\'exercises\\', \\'sound\\', \\'delightful\\'], so \\nsentences.split()[1:] + sentences.split[:1] would be\\n[\\'exercises\\', \\'sound\\', \\'delightful\\'] + [\\'leetcode\\']\\nwhich is just [\\'exercises\\', \\'sound\\', \\'delightful\\', \\'leetcode\\']\\n\\n\\nFrom here I could just map the function and compare each first and last\\ncharacter, then use the all() function to make sure each one is the same.\\nHope this helped!\\n\\n# Complexity\\nThis is my first post so I don\\'t know how to find the space or complexity\\n\\n# Code\\n```\\nclass Solution(object):\\n    def isCircularSentence(self, sentence):\\n        \"\"\"\\n        :type sentence: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        return all(map(lambda x, y: x[-1] == y[-0], sentence.split(), sentence.split()[1:] + sentence.split()[:1]))\\n            \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def isCircularSentence(self, sentence):\\n        \"\"\"\\n        :type sentence: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        return all(map(lambda x, y: x[-1] == y[-0], sentence.split(), sentence.split()[1:] + sentence.split()[:1]))\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2878403,
                "title": "easy-js-solution-o-n-2-solutions-100-faster",
                "content": "2 Easy JavaScript solutions, one without using split , second one by splitting sentence into words\\n```\\n// Process whole sentence, whenever you encounter a space, its previous and next character should match, else return false\\nvar isCircularSentence = function(sentence) {\\n\\tfor(let i = 0; i < sentence.length; i++){\\n        if(sentence[i] === \\' \\'){\\n            if(sentence[i - 1] !== sentence[i + 1])\\n                return false;\\n        }\\n    }\\n    return sentence[0] === sentence[sentence.length - 1]\\n}\\n// Split sentence into words and check if last character of every word is equal to first character of next word\\nvar isCircularSentence = function(sentence) {\\n    const words = sentence.split(\" \");\\n    if(words.length === 1)\\n        return words[0][0] === words[0][words[0].length - 1]\\n    for(let i = 0; i < words.length - 1; i++){\\n        const word = words[i];\\n        if(i === 0){\\n            const last = words[words.length - 1]\\n           if(word[0] !== last[last.length - 1])\\n               return false;\\n        }\\n        if(word[word.length - 1] !== words[i + 1][0])\\n            return false;\\n    }\\n    return true;\\n};\\n```\\n\\n### 87 ms, faster than 100.00% of JavaScript online submissions for Circular Sentence.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// Process whole sentence, whenever you encounter a space, its previous and next character should match, else return false\\nvar isCircularSentence = function(sentence) {\\n\\tfor(let i = 0; i < sentence.length; i++){\\n        if(sentence[i] === \\' \\'){\\n            if(sentence[i - 1] !== sentence[i + 1])\\n                return false;\\n        }\\n    }\\n    return sentence[0] === sentence[sentence.length - 1]\\n}\\n// Split sentence into words and check if last character of every word is equal to first character of next word\\nvar isCircularSentence = function(sentence) {\\n    const words = sentence.split(\" \");\\n    if(words.length === 1)\\n        return words[0][0] === words[0][words[0].length - 1]\\n    for(let i = 0; i < words.length - 1; i++){\\n        const word = words[i];\\n        if(i === 0){\\n            const last = words[words.length - 1]\\n           if(word[0] !== last[last.length - 1])\\n               return false;\\n        }\\n        if(word[word.length - 1] !== words[i + 1][0])\\n            return false;\\n    }\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2878318,
                "title": "simple-c-solution",
                "content": "//T.C -> O(n) where n is the length of the string\\n\\t\\t//S.C -> O(1)\\n\\t\\t\\n\\t\\tif(sentence[0]!=sentence[sentence.size()-1]){\\n            return false;\\n        }\\n        \\n        for(int i=0;i<sentence.length();i++){\\n            if((sentence[i]==\\' \\') && (sentence[i-1]!=sentence[i+1])){\\n                return false;\\n            }\\n               \\n        }\\n               return true;",
                "solutionTags": [
                    "C"
                ],
                "code": "//T.C -> O(n) where n is the length of the string\\n\\t\\t//S.C -> O(1)\\n\\t\\t\\n\\t\\tif(sentence[0]!=sentence[sentence.size()-1]){\\n            return false;\\n        }\\n        \\n        for(int i=0;i<sentence.length();i++){\\n            if((sentence[i]==\\' \\') && (sentence[i-1]!=sentence[i+1])){\\n                return false;\\n            }\\n               \\n        }\\n               return true;",
                "codeTag": "Unknown"
            },
            {
                "id": 2877645,
                "title": "c-o-n-easy-to-understand-with-in-depth-explanation-and-examples",
                "content": "#### Table of Contents\\n\\n- [TL;DR](#tldr)\\n  - [Code](#code)\\n  - [Complexity](#complexity)\\n- [In Depth Analysis](#in-depth-analysis)\\n  - [Intuition](#intuition)\\n  - [Approach](#approach)\\n  - [Example](#example)\\n\\n# TL;DR\\n\\nMake sure the first and last character **AND** the characters before and after spaces are equal\\n\\n## Code\\n\\n```c++\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        const int n = sentence.size();\\n        for (int i = 0; i < n; i++)\\n            if (sentence[i] == \\' \\' && sentence[i - 1] != sentence[i + 1])\\n                return false;\\n\\n        return sentence[0] == sentence[n - 1];\\n    }\\n};\\n\\n```\\n\\n## Complexity\\n\\n**Time Complexity:** $$O(N)$$ where $$N$$ is the length of the string\\n**Space Complexity:** $$O(1)$$\\n\\n**PLEASE UPVOTE IF YOU FIND MY POST HELPFUL!! \\uD83E\\uDD7A\\uD83D\\uDE01**\\n\\n---\\n\\n# In Depth Analysis\\n\\n## Intuition\\n\\nIterate through the string and if we encounter a space, make sure that the character before equals the character after\\n\\n## Approach \\n\\nI iterated through the characters in the string and if I came to a space, I checked if the character before did not equal the character after. If that is the case, I know the sentence is not circular and I can return false.\\n\\nWhen that is finished, I just need to check if the first character is equal to the last character\\n\\n## Example\\n\\nLets use the first example, where `sentence = \"leetcode exercises sound delightful\"`\\n\\nI will be showing all of the checks, specifically at the spaces\\n\\n| Space # | Char Before | Char After |\\n|:-------:|:-----------:|:----------:|\\n|    1    |      e      |      e     |\\n|    2    |      s      |      s     |\\n|    3    |      d      |      d     |\\n\\nSince all of these are equal, I just check if `sentence[0] == sentence[n - 1]` $$\\\\rightarrow$$ `\\'l\\' == \\'l\\'`, so it returns true which is the correct answer\\n\\n**PLEASE UPVOTE IF YOU FIND MY POST HELPFUL!! \\uD83E\\uDD7A\\uD83D\\uDE01**",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```c++\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        const int n = sentence.size();\\n        for (int i = 0; i < n; i++)\\n            if (sentence[i] == \\' \\' && sentence[i - 1] != sentence[i + 1])\\n                return false;\\n\\n        return sentence[0] == sentence[n - 1];\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876326,
                "title": "javascript-1-linear-regexp-o-n-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCheck letter around all space and first and last letter\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n1 linear With regExp\\n```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    return sentence.match(/(\\\\w)( \\\\1)+/g)?.length === sentence.match(/ (\\\\w )*/g)?.length && sentence[0] === sentence[sentence.length - 1]\\n};\\n```\\nWith find\\n```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    let find = sentence.indexOf(\\' \\')\\n    while (find != -1) {\\n        if (sentence[find - 1] != sentence[find + 1])\\n            return false\\n        find = sentence.indexOf(\\' \\', find + 1)\\n    }\\n    return sentence[0] === sentence[sentence.length - 1]\\n};\\n```\\nWith split\\n```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    let array = sentence.split(\\' \\')\\n    for (let i = 1; i < array.length; i++)\\n        if (array[i][0] != array[i - 1][array[i - 1].length - 1])\\n            return false\\n    if (array[0][0] != array[array.length - 1][array[array.length - 1].length - 1])\\n        return false\\n    return true\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    return sentence.match(/(\\\\w)( \\\\1)+/g)?.length === sentence.match(/ (\\\\w )*/g)?.length && sentence[0] === sentence[sentence.length - 1]\\n};\\n```\n```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    let find = sentence.indexOf(\\' \\')\\n    while (find != -1) {\\n        if (sentence[find - 1] != sentence[find + 1])\\n            return false\\n        find = sentence.indexOf(\\' \\', find + 1)\\n    }\\n    return sentence[0] === sentence[sentence.length - 1]\\n};\\n```\n```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    let array = sentence.split(\\' \\')\\n    for (let i = 1; i < array.length; i++)\\n        if (array[i][0] != array[i - 1][array[i - 1].length - 1])\\n            return false\\n    if (array[0][0] != array[array.length - 1][array[array.length - 1].length - 1])\\n        return false\\n    return true\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2876200,
                "title": "short-and-simple-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] s = sentence.split(\" \");\\n        \\n        if(s.length==1){              //Edge case when sentence length is one\\n            if(s[0].charAt(0)!= s[0].charAt(s[0].length()-1)){\\n                return false;\\n            }\\n        }\\n        \\n        \\n        for(int i=1;i<s.length;++i){\\n                if(s[i].charAt(0)!=s[i-1].charAt(s[i-1].length()-1)){    //just comparing first character of current string to last \\n                    return false;                                                        //character of previous string\\n                }\\n                if(i==s.length-1){\\n                    if(s[i].charAt(s[i].length()-1)!=s[0].charAt(0)){            //checking last string with first string\\n                    return false;\\n                }\\n                }\\n            }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] s = sentence.split(\" \");\\n        \\n        if(s.length==1){              //Edge case when sentence length is one\\n            if(s[0].charAt(0)!= s[0].charAt(s[0].length()-1)){\\n                return false;\\n            }\\n        }\\n        \\n        \\n        for(int i=1;i<s.length;++i){\\n                if(s[i].charAt(0)!=s[i-1].charAt(s[i-1].length()-1)){    //just comparing first character of current string to last \\n                    return false;                                                        //character of previous string\\n                }\\n                if(i==s.length-1){\\n                    if(s[i].charAt(s[i].length()-1)!=s[0].charAt(0)){            //checking last string with first string\\n                    return false;\\n                }\\n                }\\n            }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875273,
                "title": "split-method",
                "content": "Please do **upvote and share**.\\n\\n```\\nclass Solution {\\nprivate:\\n    vector<string> split(string &s, const char &c) {\\n        int n = s.size(), l = 0, r = 0;\\n        s.push_back(c);\\n        vector<string> res;\\n        do {\\n            while (s[r] != c) r++;\\n            string word = s.substr(l, r - l);\\n            if (!word.empty()) {\\n                res.push_back(word);\\n            }\\n            while (s[r] == c) r++;\\n            l = r;\\n        } while (r < n);\\n        return res;\\n    }\\npublic:\\n    bool isCircularSentence(string &s) {\\n        if (s[0] != s.back()) return false;\\n        vector<string> arr = split(s, \\' \\');\\n        for (int i = 0; i < arr.size() - 1; i++) {\\n            if (arr[i].back() != arr[i + 1][0]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    vector<string> split(string &s, const char &c) {\\n        int n = s.size(), l = 0, r = 0;\\n        s.push_back(c);\\n        vector<string> res;\\n        do {\\n            while (s[r] != c) r++;\\n            string word = s.substr(l, r - l);\\n            if (!word.empty()) {\\n                res.push_back(word);\\n            }\\n            while (s[r] == c) r++;\\n            l = r;\\n        } while (r < n);\\n        return res;\\n    }\\npublic:\\n    bool isCircularSentence(string &s) {\\n        if (s[0] != s.back()) return false;\\n        vector<string> arr = split(s, \\' \\');\\n        for (int i = 0; i < arr.size() - 1; i++) {\\n            if (arr[i].back() != arr[i + 1][0]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875249,
                "title": "python3-one-line-regex-two-solutions",
                "content": "# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        return all(a==b for a,s,b in re.findall(\\'\\\\w \\\\w\\',sentence+\\' \\'+sentence))\\n```\\nVanilla Python Solution:\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words=sentence.split()\\n        words+=[words[0]]\\n        return all(a[-1]==b[0] for a,b in zip(words,words[1:]))   \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        return all(a==b for a,s,b in re.findall(\\'\\\\w \\\\w\\',sentence+\\' \\'+sentence))\\n```\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words=sentence.split()\\n        words+=[words[0]]\\n        return all(a[-1]==b[0] for a,b in zip(words,words[1:]))   \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875182,
                "title": "c-java-python3-split-sentence-into-words",
                "content": "**C++**\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        vector<string> words; \\n        istringstream iss(sentence); \\n        string buff; \\n        while (iss >> buff) words.push_back(buff); \\n        for (int i = 0, n = words.size(); i < n; ++i) \\n            if (words[i].back() != words[(i+1) % n][0]) return false; \\n        return true; \\n    }\\n};\\n```\\n**Java**\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] words = sentence.split(\" \"); \\n        for (int i = 0, n = words.length; i < n; ++i) \\n            if (!words[i].endsWith(words[(i+1) % n].substring(0, 1))) return false; \\n        return true; \\n    }\\n}\\n```\\n**Python3**\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        return all(w[-1] == words[(i+1) % len(words)][0] for i, w in enumerate(words))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        vector<string> words; \\n        istringstream iss(sentence); \\n        string buff; \\n        while (iss >> buff) words.push_back(buff); \\n        for (int i = 0, n = words.size(); i < n; ++i) \\n            if (words[i].back() != words[(i+1) % n][0]) return false; \\n        return true; \\n    }\\n};\\n```\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] words = sentence.split(\" \"); \\n        for (int i = 0, n = words.length; i < n; ++i) \\n            if (!words[i].endsWith(words[(i+1) % n].substring(0, 1))) return false; \\n        return true; \\n    }\\n}\\n```\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        return all(w[-1] == words[(i+1) % len(words)][0] for i, w in enumerate(words))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875131,
                "title": "c-easy-approach-beginner-frndly",
                "content": "class Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n\\t\\n        int len = s.size();\\n        int flag = 0;\\n        for(int i=1;i<len-1;i++){\\n            if(s[i]!=\\' \\') continue;\\n            else if(s[i]==\\' \\'){\\n                if(s[i-1]==s[i+1]){\\n                    flag=0;\\n                }else{\\n                    flag=1; break;\\n                }\\n            }\\n        }\\n        if(s[0]==s[len-1] && flag!=1){\\n            return true;\\n        }else return false;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n\\t\\n        int len = s.size();\\n        int flag = 0;\\n        for(int i=1;i<len-1;i++){\\n            if(s[i]!=\\' \\') continue;\\n            else if(s[i]==\\' \\'){\\n                if(s[i-1]==s[i+1]){\\n                    flag=0;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2875128,
                "title": "c-easy-solution",
                "content": "class Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n\\t\\n        bool ans = true;\\n        if(s[0] != s[s.size()-1]) ans = false;\\n        for(int i=1;i<s.size()-1;i++){\\n            if(s[i] == \\' \\' && s[i-1] != s[i+1]){\\n                ans = false;\\n                break;\\n            }\\n        }\\n        \\n        \\n        return ans;\\n        \\n\\t\\t\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n\\t\\n        bool ans = true;\\n        if(s[0] != s[s.size()-1]) ans = false;\\n        for(int i=1;i<s.size()-1;i++){\\n            if(s[i] == \\' \\' && s[i-1] != s[i+1]){\\n                ans = false;\\n                break;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2875077,
                "title": "java-easy-solution",
                "content": "\\tclass Solution {\\n\\t\\tpublic boolean isCircularSentence(String sentence) {\\n\\n\\t\\t\\tint n = sentence.length();\\n\\t\\t\\tif(sentence.charAt(0) != sentence.charAt(n-1))\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\tfor(int i = 0 ;i< n; i++ ){\\n\\t\\t\\t  if(sentence.charAt(i) == \\' \\' && sentence.charAt(i-1) != sentence.charAt(i+1))\\n\\t\\t\\t\\t  return false;\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\t}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n\\t\\tpublic boolean isCircularSentence(String sentence) {\\n\\n\\t\\t\\tint n = sentence.length();\\n\\t\\t\\tif(sentence.charAt(0) != sentence.charAt(n-1))\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\tfor(int i = 0 ;i< n; i++ ){\\n\\t\\t\\t  if(sentence.charAt(i) == \\' \\' && sentence.charAt(i-1) != sentence.charAt(i+1))\\n\\t\\t\\t\\t  return false;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2875061,
                "title": "c-easy",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int len=sentence.length();\\n        \\n        if(sentence[0]!=sentence[len-1])\\n            return false;\\n        \\n        for(int i=0;i<len;i++){\\n            if(sentence[i]==\\' \\' ){\\n                if(sentence[i-1] != sentence[i+1])\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int len=sentence.length();\\n        \\n        if(sentence[0]!=sentence[len-1])\\n            return false;\\n        \\n        for(int i=0;i<len;i++){\\n            if(sentence[i]==\\' \\' ){\\n                if(sentence[i-1] != sentence[i+1])\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875049,
                "title": "loop",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        \\n        //stringstream ss(s);\\n        vector<string>ans;\\n        char ch;\\n        if(s[0] != s[s.size() -1]) return false;\\n        for(int i = 0 ; i < s.size()-1 ; i++){\\n            if(s[i] == \\' \\'){\\n                if(s[i-1] == s[i+1]) continue;\\n                else return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        \\n        //stringstream ss(s);\\n        vector<string>ans;\\n        char ch;\\n        if(s[0] != s[s.size() -1]) return false;\\n        for(int i = 0 ; i < s.size()-1 ; i++){\\n            if(s[i] == \\' \\'){\\n                if(s[i-1] == s[i+1]) continue;\\n                else return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875019,
                "title": "python-two-approaches",
                "content": "Without **Split** Space `O(1`)\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        for i in range(len(sentence)):\\n            if sentence[i] == \" \":\\n                if sentence[i-1] != sentence[i+1]:\\n                    return False\\n        return sentence[0] == sentence[-1]\\n```\\n\\n\\nUsing **Split** Space `O(n)`\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split(\\' \\')\\n        prev = words[0]\\n        \\n        for w in words[1:]:\\n            if w[0]!=prev[-1]:\\n                return False\\n            prev = w\\n        \\n        return sentence[0]==sentence[-1]",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        for i in range(len(sentence)):\\n            if sentence[i] == \" \":\\n                if sentence[i-1] != sentence[i+1]:\\n                    return False\\n        return sentence[0] == sentence[-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875012,
                "title": "clean-5-line-c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:o(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        \\n        if(sentence[0]!=sentence[n-1]) return false;\\n        \\n        for(int i=0;i<n;i++){\\n            if(sentence[i]==\\' \\' && sentence[i-1]!=sentence[i+1]) return false;\\n            \\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        \\n        if(sentence[0]!=sentence[n-1]) return false;\\n        \\n        for(int i=0;i<n;i++){\\n            if(sentence[i]==\\' \\' && sentence[i-1]!=sentence[i+1]) return false;\\n            \\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923219,
                "title": "two-approches-beginner-friendly-0ms",
                "content": "\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string &nums) {\\n        if (nums[0] != nums.back()) {\\n            return false;\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==\\' \\' and nums[i-1]!=nums[i+1])   return false;\\n        }\\n        return true;\\n    }\\n};\\n\\n```\\n\\n\\n\\n\\n# Code\\n```\\n\\nclass Solution {\\nprivate:\\n    vector<string> split(const string &s, const char delimiter) {\\n        vector<string> tokens;\\n        istringstream ss(s);\\n        string tok;\\n        while (getline(ss, tok, delimiter)) {\\n            if (!tok.empty()) {\\n                tokens.push_back(tok);\\n            }\\n        }\\n        return tokens;\\n    }\\npublic:\\n    bool isCircularSentence(const string &nums) {\\n        if (nums[0] != nums.back()) {\\n            return false;\\n        }\\n        vector<string> ans = split(nums, \\' \\');\\n        for (int i = 0; i < ans.size() - 1; i++) {\\n            if (ans[i].back() != ans[i + 1][0]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string &nums) {\\n        if (nums[0] != nums.back()) {\\n            return false;\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==\\' \\' and nums[i-1]!=nums[i+1])   return false;\\n        }\\n        return true;\\n    }\\n};\\n\\n```\n```\\n\\nclass Solution {\\nprivate:\\n    vector<string> split(const string &s, const char delimiter) {\\n        vector<string> tokens;\\n        istringstream ss(s);\\n        string tok;\\n        while (getline(ss, tok, delimiter)) {\\n            if (!tok.empty()) {\\n                tokens.push_back(tok);\\n            }\\n        }\\n        return tokens;\\n    }\\npublic:\\n    bool isCircularSentence(const string &nums) {\\n        if (nums[0] != nums.back()) {\\n            return false;\\n        }\\n        vector<string> ans = split(nums, \\' \\');\\n        for (int i = 0; i < ans.size() - 1; i++) {\\n            if (ans[i].back() != ans[i + 1][0]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3673538,
                "title": "direct-pointer-approach-with-no-built-in-functions-o-n-o-1-code-only",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public bool IsCircularSentence(string sentence) {\\n        int i = 0;\\n        while (i<sentence.Length-1) {\\n            if (sentence[i]==\\' \\')\\n                if (sentence[i-1]!=sentence[i+1]) return false;\\n            i++;\\n        }\\n        return sentence[0]==sentence[i];\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "String"
                ],
                "code": "```\\npublic class Solution {\\n    public bool IsCircularSentence(string sentence) {\\n        int i = 0;\\n        while (i<sentence.Length-1) {\\n            if (sentence[i]==\\' \\')\\n                if (sentence[i-1]!=sentence[i+1]) return false;\\n            i++;\\n        }\\n        return sentence[0]==sentence[i];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3597030,
                "title": "beginners-approach",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    first check for 1st character and the last character\\n    then, store each word into string[] and check for same \\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        if(sentence.charAt(0)!=sentence.charAt(sentence.length()-1)) \\n            return false;\\n\\n        String[] s= sentence.split(\" \");\\n\\n        for(int i=0;i<s.length-1;i++){\\n            if(s[i].charAt(s[i].length()-1)!= s[i+1].charAt(0))\\n                return false;\\n        }\\n\\n\\nreturn true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        if(sentence.charAt(0)!=sentence.charAt(sentence.length()-1)) \\n            return false;\\n\\n        String[] s= sentence.split(\" \");\\n\\n        for(int i=0;i<s.length-1;i++){\\n            if(s[i].charAt(s[i].length()-1)!= s[i+1].charAt(0))\\n                return false;\\n        }\\n\\n\\nreturn true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3587839,
                "title": "circular-sentence-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int i;\\n        if(sentence[0]!=sentence[sentence.length()-1])\\n            return false;\\n        for(i=0 ; i<sentence.length() ; i++)\\n        {\\n            if(sentence[i]==\\' \\' && sentence[i-1]!=sentence[i+1])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/8fa3b74d-0ed7-4674-8260-2b7ee76f7c86_1685676332.3804836.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int i;\\n        if(sentence[0]!=sentence[sentence.length()-1])\\n            return false;\\n        for(i=0 ; i<sentence.length() ; i++)\\n        {\\n            if(sentence[i]==\\' \\' && sentence[i-1]!=sentence[i+1])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3548270,
                "title": "c-code-runtime-0-ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nbool isCircularSentence(char * sentence){\\n\\n    int i=0;\\n    char first = sentence[0], last, last_tail, next_head;\\n\\n    while(sentence[i] != \\'\\\\0\\'){\\n        last = sentence[i];\\n        if(sentence[i] == \\' \\'){\\n            if( sentence[i-1] != sentence[i+1])\\n                return false;\\n        }\\n        i++;\\n    }\\n\\n    if(first==last){\\n        return true;\\n    }else{\\n        return false;\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isCircularSentence(char * sentence){\\n\\n    int i=0;\\n    char first = sentence[0], last, last_tail, next_head;\\n\\n    while(sentence[i] != \\'\\\\0\\'){\\n        last = sentence[i];\\n        if(sentence[i] == \\' \\'){\\n            if( sentence[i-1] != sentence[i+1])\\n                return false;\\n        }\\n        i++;\\n    }\\n\\n    if(first==last){\\n        return true;\\n    }else{\\n        return false;\\n    }\\n    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489046,
                "title": "c-easy-solution-100-t-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n            bool val = true;\\n            int n = s.size();\\n            if(s[0]!=s[n-1]){\\n                    val = false;\\n            }\\n            for(int i=1; i<n-1; i++){\\n                    if(s[i]==\\' \\'  && s[i-1]!=s[i+1]){\\n                            val = false; break;\\n                    }\\n                    \\n            }\\n            return val;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n            bool val = true;\\n            int n = s.size();\\n            if(s[0]!=s[n-1]){\\n                    val = false;\\n            }\\n            for(int i=1; i<n-1; i++){\\n                    if(s[i]==\\' \\'  && s[i-1]!=s[i+1]){\\n                            val = false; break;\\n                    }\\n                    \\n            }\\n            return val;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3414058,
                "title": "pretty-and-easy",
                "content": "\\n\\n# Approach\\nJust split the sentence and check if the last letter of the current word is same as the first letter of the next word. Before doing it, do check the condition that the last and the first letter of the sentence are equal or not. \\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        if sentence[0] != sentence[-1]:\\n            return False\\n        sentence = sentence.split(\" \")\\n        for i in range(len(sentence)-1):\\n            s1 = sentence[i]\\n            s2 = sentence[i+1]\\n            if s1[-1] != s2[0]:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        if sentence[0] != sentence[-1]:\\n            return False\\n        sentence = sentence.split(\" \")\\n        for i in range(len(sentence)-1):\\n            s1 = sentence[i]\\n            s2 = sentence[i+1]\\n            if s1[-1] != s2[0]:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3343476,
                "title": "javascript-one-pass-no-split-beats-99-35",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCheck two letters around spaces, if it is not equal return false early, else check the first and the last letters of the sentence. Look at the example below and you can notice that equal letters should be around a space.\\n\\nExample: \"**l**eetcod**e e**xercise**s s**oun**d d**elightfu**l**\"\\n\\nTime complexity: O(n).\\n\\n# Code\\n```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    for (let i = 0; i < sentence.length; i++) {\\n        if (sentence[i] === \\' \\') {\\n            if (sentence[i - 1] !== sentence[i + 1]) {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    return sentence[0] === sentence[sentence.length - 1];\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    for (let i = 0; i < sentence.length; i++) {\\n        if (sentence[i] === \\' \\') {\\n            if (sentence[i - 1] !== sentence[i + 1]) {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    return sentence[0] === sentence[sentence.length - 1];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3293476,
                "title": "detailed-explanation-python-python-3",
                "content": "# Approach:\\n- First, we have to split the `sentence` string into a list by its spaces\\n    - We can do this by using the python built in `split` function\\n```\\nsentence = \"hi everyone how are you\"\\nreturn sentence.split()\\n\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\\n- Second, we have to check if the first character of the first word is the same as the last character of the last word\\n    - We can do this by using `words[0][0] == words[-1][-1]\\n    `\\n- After this, we can start iterating through `words` to check if the last letter of the current position: `x` is the same as the first letter of the next position: `x+1`\\n    - Every iteration, we have to check to make sure that the requirement is met and if it isnt, we would instantly `return False` as it is not considered a \"circular sentence\"\\n- Once all of the propper requirements are met, we can `return True`\\n\\n# Python 3:\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```\\n# Python:\\n```\\nclass Solution(object):\\n    def isCircularSentence(self, sentence):\\n        \"\"\"\\n        :type sentence: str\\n        :rtype: bool\\n        \"\"\"\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nsentence = \"hi everyone how are you\"\\nreturn sentence.split()\\n\\n-> [\"hi\", \"everyone\", \"how\", \"are\", \"you\"]\\n```\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        if words[0][0] == words[-1][-1]:\\n            for x in range(len(words)-1):\\n                if words[x][-1] != words[x+1][0]:\\n                    return False\\n        else:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3289207,
                "title": "beat-98-15-23ms-pyhton3",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, s: str) -> bool:\\n        if s[-1] !=  s[0] : return False\\n        prev = s[-1]\\n        for i in s.split():\\n            if i[0] != prev: return False\\n            else: prev = i[-1]\\n        return True\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, s: str) -> bool:\\n        if s[-1] !=  s[0] : return False\\n        prev = s[-1]\\n        for i in s.split():\\n            if i[0] != prev: return False\\n            else: prev = i[-1]\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3137088,
                "title": "100-c-o-n-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence)\\n    {\\n        if(sentence[0]==sentence[sentence.size()-1])\\n        {\\n            for(int i=1;i<sentence.size()-1;i++)\\n            {\\n                if(sentence[i]==\\' \\' && sentence[i-1]!=sentence[i+1])\\n                {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence)\\n    {\\n        if(sentence[0]==sentence[sentence.size()-1])\\n        {\\n            for(int i=1;i<sentence.size()-1;i++)\\n            {\\n                if(sentence[i]==\\' \\' && sentence[i-1]!=sentence[i+1])\\n                {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3120386,
                "title": "beats-100-easy-c-solution-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(0)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nbool isCircularSentence(char * sentence){\\n    // Checking first letter and last as a base case\\n    if (sentence[0] != sentence[strlen(sentence) - 1])\\n        return false;\\n    for (int i = 0; i <= strlen(sentence); i++){\\n        if (sentence[i] == \\' \\' && sentence[i - 1] != sentence[i + 1])\\n            return false;\\n    }\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isCircularSentence(char * sentence){\\n    // Checking first letter and last as a base case\\n    if (sentence[0] != sentence[strlen(sentence) - 1])\\n        return false;\\n    for (int i = 0; i <= strlen(sentence); i++){\\n        if (sentence[i] == \\' \\' && sentence[i - 1] != sentence[i + 1])\\n            return false;\\n    }\\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3110602,
                "title": "python-mod-division-to-wrap-around",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFor a sentence of n words, it requires evaluation of adjacent characters $$n$$ times. \\n\\nSince the iteration is circular, using mod division is helpful in handling wrap around. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nSuppose there are $$M$$ characters and $$N$$ words in total. \\n\\n$$O(M)$$ for splitting into words, $$O(N)$$ for going through the first and last character of each word. \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(M)$$ for storing the spitted result of the sentence.\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        \"\"\"for a sentence of n words, evaluate n times\"\"\"\\n        words = sentence.split(\\' \\')\\n        n = len(words)\\n        for i in range(n):\\n            if words[i%n][-1] != words[(i+1)%n][0]:\\n                return False\\n        else:\\n            return True\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        \"\"\"for a sentence of n words, evaluate n times\"\"\"\\n        words = sentence.split(\\' \\')\\n        n = len(words)\\n        for i in range(n):\\n            if words[i%n][-1] != words[(i+1)%n][0]:\\n                return False\\n        else:\\n            return True\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3027394,
                "title": "python-solution-with-split-and-zip",
                "content": "\\n# Code\\n```python\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        \\n        for prev, curr in zip(words, words[1:]):\\n            if prev[-1] != curr[0]:\\n                return False\\n        return words[0][0] == words[-1][-1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        \\n        for prev, curr in zip(words, words[1:]):\\n            if prev[-1] != curr[0]:\\n                return False\\n        return words[0][0] == words[-1][-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2985256,
                "title": "python-solution-faster-than-98-45",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        print(words)\\n        if words[0][0] != words[-1][-1]:\\n            return False\\n        for i in range(len(words) - 1):\\n            if words[i][-1] != words[i+1][0]:\\n                return False\\n        return True \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        print(words)\\n        if words[0][0] != words[-1][-1]:\\n            return False\\n        for i in range(len(words) - 1):\\n            if words[i][-1] != words[i+1][0]:\\n                return False\\n        return True \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2898773,
                "title": "beats-99-java-python-solutions",
                "content": "# Intuition\\nWe split the words and store them in an array. Then we iterate over them with a for loop and checking if those words satisfy the given conditions.\\n\\n# Approach\\nAfter storing the words in an array, we iterate over them with a for loop, and check the last character of that word whether it is equal to the first character of the next word. \\n\\nIf all words satisfy this equality, we do a last check of equality with the first character of the first word, and the last character of the last word and see if they are equal.\\n\\nIf at any point, these qualities are not satisfied, false is returned, whereas if they are satisfied until the end, true is returned.\\n\\n# Complexity\\n- Time complexity:\\n  O(n)\\n# Python Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        last = words[len(words) - 1]\\n        if len(words) == 1 and words[0][0] == last[len(last) - 1]:\\n            return True\\n        else:\\n            for i in range(0, len(words) - 1):\\n                if words[i][len(words[i]) - 1] != words[i + 1][0]:\\n                    return False\\n\\n            if words[0][0] == last[len(last) - 1]:\\n                return True\\n```\\n\\n# Java Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] words = sentence.split(\" \");\\n        for(int i = 0; i < words.length - 1; i++)\\n        {\\n            String word = words[i];\\n            int length = word.length(); \\n            char char1 = word.charAt(length - 1);\\n            String word2 = words[i + 1];\\n            char char2 = word2.charAt(0);\\n            if(char1 != char2)\\n            {\\n                return false;\\n            }\\n            \\n        }\\n        String word1 = words[0];\\n        String word2 = words[words.length - 1];\\n        int length = word2.length();\\n        if(word1.charAt(0) == word2.charAt(length - 1))\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        words = sentence.split()\\n        last = words[len(words) - 1]\\n        if len(words) == 1 and words[0][0] == last[len(last) - 1]:\\n            return True\\n        else:\\n            for i in range(0, len(words) - 1):\\n                if words[i][len(words[i]) - 1] != words[i + 1][0]:\\n                    return False\\n\\n            if words[0][0] == last[len(last) - 1]:\\n                return True\\n```\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] words = sentence.split(\" \");\\n        for(int i = 0; i < words.length - 1; i++)\\n        {\\n            String word = words[i];\\n            int length = word.length(); \\n            char char1 = word.charAt(length - 1);\\n            String word2 = words[i + 1];\\n            char char2 = word2.charAt(0);\\n            if(char1 != char2)\\n            {\\n                return false;\\n            }\\n            \\n        }\\n        String word1 = words[0];\\n        String word2 = words[words.length - 1];\\n        int length = word2.length();\\n        if(word1.charAt(0) == word2.charAt(length - 1))\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2893648,
                "title": "simple-brute-force",
                "content": "Simple Explanation, watch the video: https://youtu.be/enoonZz8PX8\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n = sentence.size();\\n        if (sentence[0] != sentence[n-1]) {\\n            return false;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            if (sentence[i] == \\' \\') {\\n                if (sentence[i-1] == sentence[i+1]) {\\n                    continue;\\n                }\\n                else {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n = sentence.size();\\n        if (sentence[0] != sentence[n-1]) {\\n            return false;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            if (sentence[i] == \\' \\') {\\n                if (sentence[i-1] == sentence[i+1]) {\\n                    continue;\\n                }\\n                else {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2882545,
                "title": "java-2ms-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        char first = s.charAt(0), last = s.charAt(s.length() - 1);\\n        if (first != last) return false;\\n        String[] arr = s.split(\" \");\\n        for (int i = 0; i < arr.length - 1; i++) {\\n            String word1 = arr[i], word2 = arr[i + 1];\\n            if (word1.charAt(word1.length() - 1) != word2.charAt(0)) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        char first = s.charAt(0), last = s.charAt(s.length() - 1);\\n        if (first != last) return false;\\n        String[] arr = s.split(\" \");\\n        for (int i = 0; i < arr.length - 1; i++) {\\n            String word1 = arr[i], word2 = arr[i + 1];\\n            if (word1.charAt(word1.length() - 1) != word2.charAt(0)) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2880596,
                "title": "c-map",
                "content": "class Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        vector<string> sp;\\n        string s=\"\";\\n        for(auto it:sentence){\\n            if(it==\\' \\'){\\n                sp.push_back(s);\\n                s=\"\";\\n                continue;\\n            }\\n            s+=it;\\n        }\\n        sp.push_back(s);\\n        map<char,int> sp1;\\n        for(auto it:sp){\\n            int n=it.size();\\n            char a=it[0];\\n            char b=it[n-1];\\n            sp1[a]++;\\n            sp1[b]++;\\n        }\\n        for(auto it:sp1){\\n            if(it.second%2!=0){\\n                return false;\\n            }\\n            \\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        vector<string> sp;\\n        string s=\"\";\\n        for(auto it:sentence){\\n            if(it==\\' \\'){\\n                sp.push_back(s);\\n                s=\"\";\\n                continue;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2879840,
                "title": "best-easiest-c-solution",
                "content": "bool isCircularSentence(char *s)\\n{\\n    \\n    int len,i;\\n    len = strlen(s);\\n    \\n   \\n    \\n        for(i=0;i<len;i++)\\n        {\\n            if(s[i]== \\' \\')\\n            {\\n                if(s[i-1] != s[i+1])\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n         \\n         if(s[0] != s[len-1])\\n         {\\n             return false;\\n         }\\n     \\n     return true;\\n}",
                "solutionTags": [],
                "code": "bool isCircularSentence(char *s)\\n{\\n    \\n    int len,i;\\n    len = strlen(s);\\n    \\n   \\n    \\n        for(i=0;i<len;i++)\\n        {\\n            if(s[i]== \\' \\')\\n            {\\n                if(s[i-1] != s[i+1])\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n         \\n         if(s[0] != s[len-1])\\n         {\\n             return false;\\n         }\\n     \\n     return true;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 2879258,
                "title": "cpp-solution-easy-t0-understand-simple-and-clean",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        int flag=0;\\n        int count=0;\\n        \\n        for(int i=0;i<n;i++){\\n           if(sentence[i]==\\' \\') {\\n               count++; } }\\n        \\n        if(count==0){if(sentence[0]==sentence[n-1])return true;}\\n        \\n        else\\n        {\\n            \\n            for(int i=0;i<n;i++) {\\n                if(sentence[i]==\\' \\') {\\n                    if(sentence[i-1]==sentence[i+1] && sentence[0]==sentence[n-1]){\\n                    flag=1; } } } }\\n        \\n        if(flag==1)return true;\\n        return false;\\n    }\\n};",
                "solutionTags": [
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        int flag=0;\\n        int count=0;\\n        \\n        for(int i=0;i<n;i++){\\n           if(sentence[i]==\\' \\') {\\n               count++; }",
                "codeTag": "Java"
            },
            {
                "id": 2878561,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\nprivate:\\n    vector<string> getSentenceArr(string &sentence){\\n        string temp;\\n        vector<string> v;\\n        for(char &letter: sentence){\\n            if(letter == \\' \\'){\\n                v.push_back(temp);\\n                temp.clear();\\n            }else temp += letter;\\n        }\\n        v.push_back(temp);\\n        return v;\\n    }\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        auto v = getSentenceArr(sentence); //Get the word array\\n        int n = v.size();\\n        for(int i=0,j=1; i<n; ++i,++j){\\n            if(i == n-1) j = 0; //If we counter the last word then change the j to j = 0, i.e first word of the list\\n            if(v[i].back() != v[j].front()) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    vector<string> getSentenceArr(string &sentence){\\n        string temp;\\n        vector<string> v;\\n        for(char &letter: sentence){\\n            if(letter == \\' \\'){\\n                v.push_back(temp);\\n                temp.clear();\\n            }else temp += letter;\\n        }\\n        v.push_back(temp);\\n        return v;\\n    }\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        auto v = getSentenceArr(sentence); //Get the word array\\n        int n = v.size();\\n        for(int i=0,j=1; i<n; ++i,++j){\\n            if(i == n-1) j = 0; //If we counter the last word then change the j to j = 0, i.e first word of the list\\n            if(v[i].back() != v[j].front()) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2878042,
                "title": "cpp-solution-beats-100",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        char fst = s[0];\\n        int n = s.size();\\n        for(int i=0;i<n;i++){\\n            if(s[i] == \\' \\'){\\n                if(s[i-1] != s[i+1]){\\n                    return false;\\n                }\\n            }\\n            if(i==n-1){\\n                if(fst !=  s[i])\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        char fst = s[0];\\n        int n = s.size();\\n        for(int i=0;i<n;i++){\\n            if(s[i] == \\' \\'){\\n                if(s[i-1] != s[i+1]){\\n                    return false;\\n                }\\n            }\\n            if(i==n-1){\\n                if(fst !=  s[i])\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877654,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\'\\'\\'\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool isCircularSentence(string sentence) {\\n\\t\\t\\tstringstream X(sentence);\\n\\t\\t\\tvector<string>v;\\n\\t\\t\\twhile(getline(X, sentence, \\' \\')){\\n\\t\\t\\t\\tv.push_back(sentence);\\n\\t\\t\\t}\\n\\t\\t\\tchar fs=v[0][0], ls=v[0][v[0].size()-1], f1;\\n\\t\\t\\tif(v.size()==1){return v[0][0]==v[0][v[0].size()-1];}\\n\\t\\t\\tfor(int i=1; i<v.size(); i++){\\n\\t\\t\\t\\t//cout<<v[i][0]<<\" \"<<ls<<endl;\\n\\t\\t\\t\\tif(v[i][0]!=ls){return false;}\\n\\t\\t\\t\\tls=v[i][v[i].size()-1];\\n\\t\\t\\t}\\n\\t\\t\\treturn v[v.size()-1][v[v.size()-1].size()-1]==fs;\\n\\t\\t}\\n\\t};\\n\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tbool isCircularSentence(string sentence) {\\n\\t\\t\\tstringstream X(sentence);\\n\\t\\t\\tvector<string>v;\\n\\t\\t\\twhile(getline(X, sentence, \\' \\')){\\n\\t\\t\\t\\tv.push_back(sentence);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2877355,
                "title": "c-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        stringstream s(sentence);\\n        string word;\\n        vector<string>strList;\\n        while (s >> word) strList.push_back(word);\\n        \\n        \\n        for(int i=0;i<strList.size();i++){\\n            string curr = strList[i];\\n            string next;\\n            if(i==strList.size()-1){\\n                next=strList[0];\\n            }else next = strList[i+1];\\n\\n            if(curr[curr.length()-1]!=next[0]) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        stringstream s(sentence);\\n        string word;\\n        vector<string>strList;\\n        while (s >> word) strList.push_back(word);\\n        \\n        \\n        for(int i=0;i<strList.size();i++){\\n            string curr = strList[i];\\n            string next;\\n            if(i==strList.size()-1){\\n                next=strList[0];\\n            }else next = strList[i+1];\\n\\n            if(curr[curr.length()-1]!=next[0]) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876849,
                "title": "java-solution-using-o-n-loop-easy-understanding",
                "content": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n\\t\\tint size = ch.length;\\n\\t\\t\\n\\t\\tif(size == 1) return true;\\n\\t\\t\\n\\t\\tif(ch[0] != ch[size-1]) return false;\\n\\t\\t\\n\\t\\tfor(int i = 0; i < size; i++) {\\n\\t\\t\\tif((ch[i]+\"\").isBlank()) {\\n\\t\\t\\t\\tif(ch[i-1] != ch[i+1]) return false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n\\t\\tint size = ch.length;\\n\\t\\t\\n\\t\\tif(size == 1) return true;\\n\\t\\t\\n\\t\\tif(ch[0] != ch[size-1]) return false;\\n\\t\\t\\n\\t\\tfor(int i = 0; i < size; i++) {\\n\\t\\t\\tif((ch[i]+\"\").isBlank()) {\\n\\t\\t\\t\\tif(ch[i-1] != ch[i+1]) return false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876771,
                "title": "c-stringstream",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe first set out last character of the last word. \\nThen split sentence into words with using stringstream.\\nThen check all new words\\' first character to the previous word\\'s last character.\\n(previous of the first word is the last word)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        char last = sentence.back();\\n        stringstream ss(sentence);\\n        string str;\\n        while(ss >> str){\\n            if(str[0] != last) return false;\\n            last = str.back();\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        char last = sentence.back();\\n        stringstream ss(sentence);\\n        string str;\\n        while(ss >> str){\\n            if(str[0] != last) return false;\\n            last = str.back();\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876631,
                "title": "easy-solution-with-explanation-in-java-faster-than100",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code first checks if the first and last character of a sentence are same. If they are, it sets flag to 1. Then it iterates through each character in the string array and checks for spaces. For every space found, it compares the previous and next characters with each other using an if statement. If both match, then flag is set to 1 else 0. Finally after all iterations have been done, another check is performed on whether or not the first and last characters of a sentence match again (this time without setting any flags). The final value of flag determines whether or not a given sentence is circular or not\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        char c[] = sentence.toCharArray();\\n        int flag = 0;\\n         if(c[0]==c[c.length-1]) flag =1;\\n        for(int i=0; i<c.length; i++){\\n            if(c[i]==\\' \\'){\\n                if(c[i+1]==c[i-1]){\\n                    flag = 1;\\n                } else flag = 0;\\n            }    \\n        }\\n       \\n         if(c[0]!=c[c.length-1]) flag =0;\\n                   if(flag ==1) return true;\\n                   return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        char c[] = sentence.toCharArray();\\n        int flag = 0;\\n         if(c[0]==c[c.length-1]) flag =1;\\n        for(int i=0; i<c.length; i++){\\n            if(c[i]==\\' \\'){\\n                if(c[i+1]==c[i-1]){\\n                    flag = 1;\\n                } else flag = 0;\\n            }    \\n        }\\n       \\n         if(c[0]!=c[c.length-1]) flag =0;\\n                   if(flag ==1) return true;\\n                   return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876378,
                "title": "java-using-arrays-with-tc-2ms-easy-and-beginner-solution",
                "content": "# Intuition \\uD83E\\uDD14\\uD83D\\uDCAD\\nSpliting the given string into individual words and converting them into an array. Then, comparing consecutive words and validating the given condition.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach \\uD83D\\uDE4B\\u200D\\u2642\\uFE0F\\nIf there\\'s only one word available in the sentence, then compare the first and last characters of that word.\\n\\nWhen there are more multiple words available, then iterate through each word and compare the last character of current word with first character of next word ,and return False when the condition is not satisfied, until the loop reaches last word. Finally, compare the last word with first word and return True if the given sentence forms a Circular sentence else return False.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity \\u23F3\\n- Time complexity: $$O(N)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(k)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code \\uD83D\\uDC68\\u200D\\uD83D\\uDCBB\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] L = sentence.split(\" \");\\n        for(int i=0;i<L.length;i++){\\n            if (i == L.length-1){\\n                if (L[i].charAt(L[i].length()-1) == L[0].charAt(0)) return true;\\n                else return false;\\n            }\\n            if (L[i].charAt(L[i].length()-1) == L[i+1].charAt(0)) continue;\\n            else return false;\\n        }\\n\\n        return false;\\n    }\\n}\\n```\\n# Result \\uD83D\\uDE0E\\n\\n**Runtime:** 2ms Beats 100% other submissions\\n**Memory:** 40MB Beats 100% other submissions\\n\\n![image.png](https://assets.leetcode.com/users/images/231fc013-a8fb-48f0-9b8a-51a8de4c1b2f_1670143740.011693.png)\\n",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] L = sentence.split(\" \");\\n        for(int i=0;i<L.length;i++){\\n            if (i == L.length-1){\\n                if (L[i].charAt(L[i].length()-1) == L[0].charAt(0)) return true;\\n                else return false;\\n            }\\n            if (L[i].charAt(L[i].length()-1) == L[i+1].charAt(0)) continue;\\n            else return false;\\n        }\\n\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876364,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        boolean status = true;\\n        String words[] = sentence.split(\" \");\\n        char prev = words[0].charAt(words[0].length()-1);\\n        for(int i=1;i<words.length;i++) {\\n            if(prev != words[i].charAt(0)) {\\n                status = false;\\n                break;\\n            }\\n            prev = words[i].charAt(words[i].length()-1);\\n        }\\n        if(status) {\\n            status = words[0].charAt(0) == words[words.length - 1].charAt(words[words.length-1].length()-1);\\n        }\\n        return status;    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        boolean status = true;\\n        String words[] = sentence.split(\" \");\\n        char prev = words[0].charAt(words[0].length()-1);\\n        for(int i=1;i<words.length;i++) {\\n            if(prev != words[i].charAt(0)) {\\n                status = false;\\n                break;\\n            }\\n            prev = words[i].charAt(words[i].length()-1);\\n        }\\n        if(status) {\\n            status = words[0].charAt(0) == words[words.length - 1].charAt(words[words.length-1].length()-1);\\n        }\\n        return status;    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875955,
                "title": "c-simple-circular-array",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string str) {\\n        vector<string>v;\\n        stringstream s(str);\\n        string word;\\n        while(s>>word){\\n            v.push_back(word);\\n        }\\n        int n=v.size();\\n        if(n==1){\\n            return v[0][0]==v[0][v[0].size()-1];\\n        }\\n        for(int i=0;i<n-1;i++){\\n            int k=v[i].size();\\n            if(v[i][k-1]!=v[i+1][0]){\\n                return false;\\n            }\\n        }\\n        if(v[0][0]!=v[n-1][v[n-1].size()-1]){\\n            return false;\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\npublic:\\n    bool isCircularSentence(string str) {\\n        vector<string>v;\\n        stringstream s(str);\\n        string word;\\n        while(s>>word){\\n            v.push_back(word);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2875865,
                "title": "c-solution-provided-by-chatgpt-with-explanation",
                "content": "\\n\\n# Approach\\nThis solution first splits the given sentence into words by looking for spaces between them. Then, it checks if the last character of each word is equal to the first character of the next word, and also if the last character of the last word is equal to the first character of the first word. If all of these conditions are satisfied, the function returns true, indicating that the sentence is circular. Otherwise, it returns false.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the solution provided above is O(n), where n is the number of characters in the sentence. This is because the solution iterates through each character in the sentence once to split it into words, and then iterates through the words to check if they are circular. Since the number of characters is always proportional to the number of words, the time complexity is O(n).\\n\\nNote that the time complexity can be improved by using a different algorithm to split the sentence into words. For example, using a regular expression to split the sentence on spaces would have a time complexity of O(m), where m is the number of words in the sentence. However, this would make the solution more complex and less readable, so the simpler solution is preferred in this case.\\n\\n- Space complexity:\\nThe space complexity of the solution provided above is O(m), where m is the number of words in the sentence. This is because the solution splits the sentence into words and stores them in a vector. The number of words in the sentence is always proportional to the number of characters, so the space complexity is O(m).\\n\\nNote that the space complexity can be improved by not storing the words in a vector, but rather using two pointers to iterate through the sentence and check if the words are circular. However, this would make the solution more complex and less readable, so the simpler solution is preferred in this case.\\n\\n# Code\\n```\\nbool isCircularSentence(const std::string& sentence) {\\n  if (sentence.empty()) return false;\\n\\n  // Split the sentence into words\\n  std::vector<std::string> words;\\n  std::string word = \"\";\\n  for (char c : sentence) {\\n    if (c == \\' \\') {\\n      words.push_back(word);\\n      word = \"\";\\n    } else {\\n      word += c;\\n    }\\n  }\\n  words.push_back(word);\\n\\n  // Check if the last character of each word is equal to the first character of the next word\\n  for (int i = 0; i < words.size() - 1; ++i) {\\n    if (words[i].back() != words[i + 1].front()) return false;\\n  }\\n\\n  // Check if the last character of the last word is equal to the first character of the first word\\n  return words.back().back() == words.front().front();\\n}\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nbool isCircularSentence(const std::string& sentence) {\\n  if (sentence.empty()) return false;\\n\\n  // Split the sentence into words\\n  std::vector<std::string> words;\\n  std::string word = \"\";\\n  for (char c : sentence) {\\n    if (c == \\' \\') {\\n      words.push_back(word);\\n      word = \"\";\\n    } else {\\n      word += c;\\n    }\\n  }\\n  words.push_back(word);\\n\\n  // Check if the last character of each word is equal to the first character of the next word\\n  for (int i = 0; i < words.size() - 1; ++i) {\\n    if (words[i].back() != words[i + 1].front()) return false;\\n  }\\n\\n  // Check if the last character of the last word is equal to the first character of the first word\\n  return words.back().back() == words.front().front();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2875465,
                "title": "c-using-stack",
                "content": "~~~\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        stringstream str(s);\\n        stack<char> st;\\n         string word;\\n        while (str >> word)\\n        {\\n            int n=word.size()-1;\\n            if( !st.empty() &&word[0]==st.top()) \\n            {\\n                st.pop();\\n            }\\n            else\\n            {\\n                st.push(word[0]);\\n            }\\n            if(!st.empty() && word[n]==st.top())\\n            {\\n                st.pop();\\n            }\\n           else st.push(word[n]);\\n        }\\n        return st.empty();\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String",
                    "Stack"
                ],
                "code": "class Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        stringstream str(s);\\n        stack<char> st;\\n         string word;\\n        while (str >> word)\\n        {\\n            int n=word.size()-1;\\n            if( !st.empty() &&word[0]==st.top()) \\n            {\\n                st.pop();\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2875435,
                "title": "java-one-pass-no-extra-space-clean-and-simple",
                "content": "### **Please Upvote** :D\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        if (s.charAt(0) != s.charAt(s.length() - 1)) {\\n            return false;\\n        }\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s.charAt(i) == \\' \\' && s.charAt(i + 1) != s.charAt(i - 1)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n// TC: O(n), SC: O(1)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        if (s.charAt(0) != s.charAt(s.length() - 1)) {\\n            return false;\\n        }\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s.charAt(i) == \\' \\' && s.charAt(i + 1) != s.charAt(i - 1)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n// TC: O(n), SC: O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875378,
                "title": "c-very-simple",
                "content": "```\\nbool isCircularSentence(string s) {\\n        for(int i=0;i<s.size()-1;i++)\\n        {\\n            if(s[i+1]==\\' \\'&&s[i]!=s[i+2])return false;\\n        }\\n        return s[0]==s[s.size()-1];\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nbool isCircularSentence(string s) {\\n        for(int i=0;i<s.size()-1;i++)\\n        {\\n            if(s[i+1]==\\' \\'&&s[i]!=s[i+2])return false;\\n        }\\n        return s[0]==s[s.size()-1];\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2875368,
                "title": "python-split-very-simple",
                "content": "We just simply split the array and check for first element of (i+1)th string and last last element of ith string.\\nIf they are not equal we return False.\\nelse at the last we return True\\n\\n```\\nclass Solution:\\n    def isCircularSentence(self, s: str) -> bool:\\n        k = s.split()\\n        for i in range(len(k)-1):\\n            if(k[i][-1]!=k[i+1][0]):\\n                return False\\n        if(k[len(k)-1][-1]!=k[0][0]):\\n            return False\\n        return True\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, s: str) -> bool:\\n        k = s.split()\\n        for i in range(len(k)-1):\\n            if(k[i][-1]!=k[i+1][0]):\\n                return False\\n        if(k[len(k)-1][-1]!=k[0][0]):\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875223,
                "title": "java",
                "content": "```\\n\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        int n = s.length();\\n        \\n        if(s.charAt(0) != s.charAt(n-1))\\n            return false;\\n        \\n        for(int i=0; i<n; i++){\\n            if(s.charAt(i) == \\' \\'){\\n                if( s.charAt(i-1) != s.charAt(i+1))\\n                    return false;\\n            } \\n        }        \\n        return true;\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        int n = s.length();\\n        \\n        if(s.charAt(0) != s.charAt(n-1))\\n            return false;\\n        \\n        for(int i=0; i<n; i++){\\n            if(s.charAt(i) == \\' \\'){\\n                if( s.charAt(i-1) != s.charAt(i+1))\\n                    return false;\\n            } \\n        }        \\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875072,
                "title": "brute-force-simple-java-solution",
                "content": "**I know one day you will be able to solve all the four questions in contest. All the Best\\uD83E\\uDD1E**\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] array = sentence.split(\" \");\\n        if(array.length==1){\\n            if(array[0].charAt(0)==array[0].charAt(array[0].length()-1)){\\n                return true;\\n            }\\n        }\\n        \\n        if(array[0].charAt(0)==array[array.length-1].charAt(array[array.length-1].length()-1)){\\n            for(int i=0;i<array.length-1;i++){\\n                \\n                int last = array[i].length()-1;\\n                int first = 0;\\n                if(array[i].charAt(last)!=array[i+1].charAt(first)){\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n}\\n```\\n**Please Upvote if you liked\\uD83D\\uDC4D**",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] array = sentence.split(\" \");\\n        if(array.length==1){\\n            if(array[0].charAt(0)==array[0].charAt(array[0].length()-1)){\\n                return true;\\n            }\\n        }\\n        \\n        if(array[0].charAt(0)==array[array.length-1].charAt(array[array.length-1].length()-1)){\\n            for(int i=0;i<array.length-1;i++){\\n                \\n                int last = array[i].length()-1;\\n                int first = 0;\\n                if(array[i].charAt(last)!=array[i+1].charAt(first)){\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875066,
                "title": "go-add-first-to-end",
                "content": "```\\nfunc isCircularSentence(sentence string) bool {\\n    tokens := strings.Split(sentence, \" \")\\n    l := len(tokens)\\n    tokens = append(tokens, tokens[0])\\n    for i, t := range tokens[:l] {\\n        if t[len(t)-1] != tokens[i+1][0] {\\n            return false\\n        }\\n    }\\n    return true\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc isCircularSentence(sentence string) bool {\\n    tokens := strings.Split(sentence, \" \")\\n    l := len(tokens)\\n    tokens = append(tokens, tokens[0])\\n    for i, t := range tokens[:l] {\\n        if t[len(t)-1] != tokens[i+1][0] {\\n            return false\\n        }\\n    }\\n    return true\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2875031,
                "title": "c-do-as-told",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        if(s[0]!=s[s.size()-1]) return false;\\n        for(int i=0;i<s.size();i++){\\n            int j=i;\\n            while(j<s.size() && s[j]!=\\' \\'){\\n                j++;\\n            }\\n            if(j+1<s.size() && s[j+1]!=s[j-1]) return false;\\n            i=j;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        if(s[0]!=s[s.size()-1]) return false;\\n        for(int i=0;i<s.size();i++){\\n            int j=i;\\n            while(j<s.size() && s[j]!=\\' \\'){\\n                j++;\\n            }\\n            if(j+1<s.size() && s[j+1]!=s[j-1]) return false;\\n            i=j;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875022,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) \\n    {\\n        int n = sentence.size() ;\\n        char f = sentence[0] , l = sentence[n-1] ;\\n        char fl , sf ;\\n        if(f!=l)\\n        {\\n            return false ;\\n        }\\n        for(int i=0 ; i<n-1 ; i++)\\n        {\\n            if( sentence[i]==\\' \\')\\n            {\\n                fl = sentence[i-1] ;\\n                sf = sentence[i+1] ;\\n                if(fl!=sf)\\n                {\\n                    return false ;\\n                }\\n            }\\n        }\\n          return true ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) \\n    {\\n        int n = sentence.size() ;\\n        char f = sentence[0] , l = sentence[n-1] ;\\n        char fl , sf ;\\n        if(f!=l)\\n        {\\n            return false ;\\n        }\\n        for(int i=0 ; i<n-1 ; i++)\\n        {\\n            if( sentence[i]==\\' \\')\\n            {\\n                fl = sentence[i-1] ;\\n                sf = sentence[i+1] ;\\n                if(fl!=sf)\\n                {\\n                    return false ;\\n                }\\n            }\\n        }\\n          return true ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875007,
                "title": "stringstream-iterative-approaches-one-pass",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        stringstream take(sentence);\\n        string curr,prev;\\n        while(take >> curr){\\n            if(!prev.empty() and prev.back() != curr[0]) return false;\\n            prev = curr;\\n        };\\n        return sentence[0] == sentence.back();\\n    }\\n};\\n```\\n\\n# Code:\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        for(int i = 0; i<s.size(); ++i)\\n            if(s[i] == \\' \\' && s[i-1] != s[i+1]) return false;\\n        return s[0] == s.back();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        stringstream take(sentence);\\n        string curr,prev;\\n        while(take >> curr){\\n            if(!prev.empty() and prev.back() != curr[0]) return false;\\n            prev = curr;\\n        };\\n        return sentence[0] == sentence.back();\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        for(int i = 0; i<s.size(); ++i)\\n            if(s[i] == \\' \\' && s[i-1] != s[i+1]) return false;\\n        return s[0] == s.back();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874995,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        for(int i=1;i<s.length()-1;i++){\\n            if(s.charAt(i)==\\' \\'){\\n                if(s.charAt(i-1)!=s.charAt(i+1))\\n                    return false;\\n            }   \\n        }\\n        return s.charAt(s.length()-1)==s.charAt(0);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        for(int i=1;i<s.length()-1;i++){\\n            if(s.charAt(i)==\\' \\'){\\n                if(s.charAt(i-1)!=s.charAt(i+1))\\n                    return false;\\n            }   \\n        }\\n        return s.charAt(s.length()-1)==s.charAt(0);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874967,
                "title": "java-easy-solution",
                "content": "```\\n/*\\n    Simple loop and compare characters\\n    Time: O(n)\\n*/\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] sList = sentence.split(\" \");\\n\\n        if (sentence.charAt(0) != sentence.charAt(sentence.length()-1)) { // compare beginning and end of circle\\n            return false;\\n        }\\n        \\n        for (int i = 1; i < sList.length; i++) { // compare end of last word and beginning of next word\\n            char endBefore = sList[i-1].charAt(sList[i-1].length()-1);\\n            char beginNext = sList[i].charAt(0) ;\\n            if (endBefore != beginNext) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\n/*\\n    Simple loop and compare characters\\n    Time: O(n)\\n*/\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] sList = sentence.split(\" \");\\n\\n        if (sentence.charAt(0) != sentence.charAt(sentence.length()-1)) { // compare beginning and end of circle\\n            return false;\\n        }\\n        \\n        for (int i = 1; i < sList.length; i++) { // compare end of last word and beginning of next word\\n            char endBefore = sList[i-1].charAt(sList[i-1].length()-1);\\n            char beginNext = sList[i].charAt(0) ;\\n            if (endBefore != beginNext) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874962,
                "title": "easy-java-solution",
                "content": "```\\n public boolean isCircularSentence(String sentence) {\\n        String[] words = sentence.split(\" \");\\n        char first = words[0].charAt(0);\\n        char last = words[words.length-1].charAt(words[words.length-1].length()-1);\\n        int n = words.length;\\n        for(int i=1;i<n;i++){\\n              char len1 = words[i].charAt(0);\\n            char len2 = words[i-1].charAt(words[i-1].length()-1);\\n            if(len1!=len2){\\n                \\n                return false;\\n            }\\n        }\\n        if(first!=last){\\n            return false;\\n        }\\n        \\n        \\n        return true;\\n        \\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n public boolean isCircularSentence(String sentence) {\\n        String[] words = sentence.split(\" \");\\n        char first = words[0].charAt(0);\\n        char last = words[words.length-1].charAt(words[words.length-1].length()-1);\\n        int n = words.length;\\n        for(int i=1;i<n;i++){\\n              char len1 = words[i].charAt(0);\\n            char len2 = words[i-1].charAt(words[i-1].length()-1);\\n            if(len1!=len2){\\n                \\n                return false;\\n            }\\n        }\\n        if(first!=last){\\n            return false;\\n        }\\n        \\n        \\n        return true;\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4098078,
                "title": "typescript-simple-solution",
                "content": "# Thank you for reading my post\\n\\uD83D\\uDC4D Upvote if you like\\n\\uD83D\\uDE4F If you have any questions, please let me know in the comment section.\\n\\n# Code \\n- Splits the input sentence into an array of words called splitted.\\n- Appends the first word of the splitted array to its end, forming a circle.\\n- Iterates through the splitted array, checking if the last letter of the current word matches the first letter of the next word.\\n    - if not, stop the loop by simply returning false\\n- If iterated succesfully, it means it has circular sentence. \\n```ts\\nfunction isCircularSentence(sentence: string): boolean {\\n    const splitted = sentence.split(\" \")\\n    splitted.push(splitted[0])\\n\\n    for (let i = 0 ; i < splitted.length - 1; i++) {\\n        if (splitted[i][splitted[i].length - 1] !== splitted[i + 1][0])\\n            return false\\n    }\\n    return true\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```ts\\nfunction isCircularSentence(sentence: string): boolean {\\n    const splitted = sentence.split(\" \")\\n    splitted.push(splitted[0])\\n\\n    for (let i = 0 ; i < splitted.length - 1; i++) {\\n        if (splitted[i][splitted[i].length - 1] !== splitted[i + 1][0])\\n            return false\\n    }\\n    return true\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097809,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        return sentence[0] == sentence[-1] and all(w1[-1] == w2[0] for w1, w2 in pairwise(sentence.split())) \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        return sentence[0] == sentence[-1] and all(w1[-1] == w2[0] for w1, w2 in pairwise(sentence.split())) \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4085262,
                "title": "c-magic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        if(s[0]!=s[s.size()-1])\\n        return 0;\\n        \\n        char ck=s[0];\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\' \\'){\\n                if(s[i+1]!=ck)\\n                return 0;\\n            }\\n             ck=s[i];\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s) {\\n        if(s[0]!=s[s.size()-1])\\n        return 0;\\n        \\n        char ck=s[0];\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\' \\'){\\n                if(s[i+1]!=ck)\\n                return 0;\\n            }\\n             ck=s[i];\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084187,
                "title": "c-easy-solution-split-and-compare",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool IsCircularSentence(string sentence) {\\n        var words = sentence.Split(\" \");\\n        if(words.Length < 1)\\n            return false;\\n        else if(!words[words.Length-1].EndsWith(words[0][0]))\\n            return false;\\n        for(int i=0;i<words.Length-1;i++){\\n            if(words[i+1][0] != (words[i][words[i].Length-1])){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool IsCircularSentence(string sentence) {\\n        var words = sentence.Split(\" \");\\n        if(words.Length < 1)\\n            return false;\\n        else if(!words[words.Length-1].EndsWith(words[0][0]))\\n            return false;\\n        for(int i=0;i<words.Length-1;i++){\\n            if(words[i+1][0] != (words[i][words[i].Length-1])){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078304,
                "title": "simple-typescript-and-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n // function for compare arrays\\n function arraysEqual(arr1: Array<string>, arr2: Array<string>): boolean {\\n  return arr1.length === arr2.length && arr1.every((value, index) => value === arr2[index]);\\n}\\n\\nvar isCircularSentence = function(sentence: string) {\\n    const arrayOfWords = sentence.split(\" \");\\n  const wordsAraryLength = arrayOfWords.length;\\n  //array for first letters\\n  const arrayOfFirstLetters = [];\\n  const arrayOfLastLetters = [];\\n  \\n  //base, when only one word\\n  if(wordsAraryLength === 1){\\n    return sentence[0] === sentence[sentence.length - 1];\\n  }\\n  \\n  \\n  for(let i of arrayOfWords) {\\n    arrayOfFirstLetters.push(i[0]);\\n    arrayOfLastLetters.push(i[i.length -1]);\\n  }\\n  //simple case, check the first letter of first element equals to last letter of last element\\n  if(sentence[0] !== sentence[sentence.length - 1]) {\\n    return false;\\n  } else {\\n    arrayOfFirstLetters.shift();\\n    arrayOfLastLetters.pop();\\n    return arraysEqual(arrayOfFirstLetters, arrayOfLastLetters);\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n // function for compare arrays\\n function arraysEqual(arr1: Array<string>, arr2: Array<string>): boolean {\\n  return arr1.length === arr2.length && arr1.every((value, index) => value === arr2[index]);\\n}\\n\\nvar isCircularSentence = function(sentence: string) {\\n    const arrayOfWords = sentence.split(\" \");\\n  const wordsAraryLength = arrayOfWords.length;\\n  //array for first letters\\n  const arrayOfFirstLetters = [];\\n  const arrayOfLastLetters = [];\\n  \\n  //base, when only one word\\n  if(wordsAraryLength === 1){\\n    return sentence[0] === sentence[sentence.length - 1];\\n  }\\n  \\n  \\n  for(let i of arrayOfWords) {\\n    arrayOfFirstLetters.push(i[0]);\\n    arrayOfLastLetters.push(i[i.length -1]);\\n  }\\n  //simple case, check the first letter of first element equals to last letter of last element\\n  if(sentence[0] !== sentence[sentence.length - 1]) {\\n    return false;\\n  } else {\\n    arrayOfFirstLetters.shift();\\n    arrayOfLastLetters.pop();\\n    return arraysEqual(arrayOfFirstLetters, arrayOfLastLetters);\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073768,
                "title": "java-script-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\n // function for compare arrays\\n function arraysEqual(arr1, arr2) {\\n  return arr1.length === arr2.length && arr1.every((value, index) => value === arr2[index]);\\n}\\n\\n// function which return array of words\\nconst createArrayOfWords = (str) => {\\n//what we are looking for\\n  let target = \\' \\'; \\n//current position\\n  let pos = 0;\\n//previous position\\n  let prevPosition = 0;\\n//array of devided words\\n  const wortsArray = [];\\n//iterate string\\n  while (true) {\\n    //found target\\n    let foundPos = str.indexOf(target, pos);\\n    //if false we will brake loop and will add last word\\n    if (foundPos == -1) {\\n      wortsArray.push(str.slice(prevPosition));\\n      break;\\n    } else {\\n      //add words to array\\n      wortsArray.push(str.slice(prevPosition, foundPos));\\n    //asign previos position\\n      prevPosition = foundPos + 1;\\n    }\\n    pos = foundPos + 1; \\n  }\\n  return wortsArray;\\n}\\nvar isCircularSentence = function(sentence) {\\n\\n  const arrayOfWords = createArrayOfWords(sentence);\\n  const wordsAraryLength = arrayOfWords.length;\\n  //array for first letters\\n  const arrayOfFirstLetters = [];\\n  const arrayOfLastLetters = [];\\n  \\n  //base, when only one word\\n  if(wordsAraryLength === 1){\\n    return sentence[0] === sentence.at(-1);\\n  }\\n  \\n  //add first and last latters to arrays\\n  for(let i of arrayOfWords) {\\n    arrayOfFirstLetters.push(i.at());\\n    arrayOfLastLetters.push(i.at(-1));\\n  }\\n  //simple case, check the first letter of first \\n  //element equals to last   letter of last element\\n  if(arrayOfFirstLetters.at() !== arrayOfLastLetters.at(-1)) {\\n    return false;\\n  } else {\\n    //after if we don\\'t needed first latter from  and\\n    //last letter from arrayOfLastLetters\\n    arrayOfFirstLetters.shift();\\n    arrayOfLastLetters.pop();\\n    //compare what left\\n    return arraysEqual(arrayOfFirstLetters, arrayOfLastLetters);\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\n // function for compare arrays\\n function arraysEqual(arr1, arr2) {\\n  return arr1.length === arr2.length && arr1.every((value, index) => value === arr2[index]);\\n}\\n\\n// function which return array of words\\nconst createArrayOfWords = (str) => {\\n//what we are looking for\\n  let target = \\' \\'; \\n//current position\\n  let pos = 0;\\n//previous position\\n  let prevPosition = 0;\\n//array of devided words\\n  const wortsArray = [];\\n//iterate string\\n  while (true) {\\n    //found target\\n    let foundPos = str.indexOf(target, pos);\\n    //if false we will brake loop and will add last word\\n    if (foundPos == -1) {\\n      wortsArray.push(str.slice(prevPosition));\\n      break;\\n    } else {\\n      //add words to array\\n      wortsArray.push(str.slice(prevPosition, foundPos));\\n    //asign previos position\\n      prevPosition = foundPos + 1;\\n    }\\n    pos = foundPos + 1; \\n  }\\n  return wortsArray;\\n}\\nvar isCircularSentence = function(sentence) {\\n\\n  const arrayOfWords = createArrayOfWords(sentence);\\n  const wordsAraryLength = arrayOfWords.length;\\n  //array for first letters\\n  const arrayOfFirstLetters = [];\\n  const arrayOfLastLetters = [];\\n  \\n  //base, when only one word\\n  if(wordsAraryLength === 1){\\n    return sentence[0] === sentence.at(-1);\\n  }\\n  \\n  //add first and last latters to arrays\\n  for(let i of arrayOfWords) {\\n    arrayOfFirstLetters.push(i.at());\\n    arrayOfLastLetters.push(i.at(-1));\\n  }\\n  //simple case, check the first letter of first \\n  //element equals to last   letter of last element\\n  if(arrayOfFirstLetters.at() !== arrayOfLastLetters.at(-1)) {\\n    return false;\\n  } else {\\n    //after if we don\\'t needed first latter from  and\\n    //last letter from arrayOfLastLetters\\n    arrayOfFirstLetters.shift();\\n    arrayOfLastLetters.pop();\\n    //compare what left\\n    return arraysEqual(arrayOfFirstLetters, arrayOfLastLetters);\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070722,
                "title": "easy-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) \\n    {\\n        int n=sentence.size();\\n        if(sentence[0]!=sentence[n-1])\\n        return false;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(sentence[i]==\\' \\')\\n            {\\n                if(sentence[i-1]!=sentence[i+1])\\n                return false;\\n            }\\n        }\\n        return true;    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) \\n    {\\n        int n=sentence.size();\\n        if(sentence[0]!=sentence[n-1])\\n        return false;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(sentence[i]==\\' \\')\\n            {\\n                if(sentence[i-1]!=sentence[i+1])\\n                return false;\\n            }\\n        }\\n        return true;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069009,
                "title": "c-iterators",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nss\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        if(*sentence.begin() == *(sentence.end()-1)){\\n            for (auto p = sentence.begin(); p<sentence.end(); p++){\\n                if(*p == \\' \\'){\\n                    if(*(p-1) == *(p+1))continue;\\n                    else return false;\\n                }\\n        }\\n        return true;\\n            }\\n        return false;\\n    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        if(*sentence.begin() == *(sentence.end()-1)){\\n            for (auto p = sentence.begin(); p<sentence.end(); p++){\\n                if(*p == \\' \\'){\\n                    if(*(p-1) == *(p+1))continue;\\n                    else return false;\\n                }\\n        }\\n        return true;\\n            }\\n        return false;\\n    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064303,
                "title": "faster-than-97-and-memory-less-than-98",
                "content": "# Intuition\\nfirst check if string\\'s last and first chars are same, if not return false; check for last of current string and last of next string if not, return false; \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n                if(sentence.charAt(0)!=sentence.charAt(sentence.length()-1)){return false;}\\n        String [] str = sentence.split(\" \");\\n        int last = str.length-1;\\n        for(int i=1; i<str.length; i++){\\n            if(str[i-1].charAt(str[i-1].length()-1) != str[i].charAt(0)){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n                if(sentence.charAt(0)!=sentence.charAt(sentence.length()-1)){return false;}\\n        String [] str = sentence.split(\" \");\\n        int last = str.length-1;\\n        for(int i=1; i<str.length; i++){\\n            if(str[i-1].charAt(str[i-1].length()-1) != str[i].charAt(0)){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045344,
                "title": "one-easiest-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        array = sentence.split(\" \")\\n        n = len(array)\\n\\n        for i in range(n):\\n            if(i == n-1):\\n                if(array[i][-1] == array[0][0]):\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                if(array[i][-1] != array[i+1][0]):\\n                    return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        array = sentence.split(\" \")\\n        n = len(array)\\n\\n        for i in range(n):\\n            if(i == n-1):\\n                if(array[i][-1] == array[0][0]):\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                if(array[i][-1] != array[i+1][0]):\\n                    return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045039,
                "title": "all-you-need-is-only-7-lines",
                "content": "First approach was so long code. I found the other solution. It was helpful for me. \\n\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        s = sentence.split(\\' \\')\\n        if sentence[0] != sentence[-1]:\\n            return False\\n        for i in range(len(s) - 1):\\n            if s[i][-1] != s[i+1][0]:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        s = sentence.split(\\' \\')\\n        if sentence[0] != sentence[-1]:\\n            return False\\n        for i in range(len(s) - 1):\\n            if s[i][-1] != s[i+1][0]:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4038623,
                "title": "simple-python-solution-beast-96-runtime-and-95-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sent_list=sentence.split(\" \")\\n        n=len(sent_list)\\n        sent_list.append(sent_list[0])\\n\\n        return sum([1 for i in range(n) if sent_list[i][-1]==sent_list[i+1][0]])==n               \\n                \\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sent_list=sentence.split(\" \")\\n        n=len(sent_list)\\n        sent_list.append(sent_list[0])\\n\\n        return sum([1 for i in range(n) if sent_list[i][-1]==sent_list[i+1][0]])==n               \\n                \\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031632,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence = sentence.split(\" \")\\n\\n        for i in range(len(sentence) - 1):\\n            if sentence[i][-1] != sentence[i+1][0]:\\n                return False\\n   \\n        if sentence[-1][-1] != sentence[0][0]:\\n            return False\\n        \\n        return True\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence = sentence.split(\" \")\\n\\n        for i in range(len(sentence) - 1):\\n            if sentence[i][-1] != sentence[i+1][0]:\\n                return False\\n   \\n        if sentence[-1][-1] != sentence[0][0]:\\n            return False\\n        \\n        return True\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023168,
                "title": "easy-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        for(int i=0;i<sentence.length();i++){\\n            if(sentence.charAt(i) == \\' \\'){\\n                if(sentence.charAt(i-1) != sentence.charAt(i+1)){\\n                    return false;\\n                }\\n            }\\n        }\\n        if(sentence.charAt(0) != sentence.charAt(sentence.length()-1)){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        for(int i=0;i<sentence.length();i++){\\n            if(sentence.charAt(i) == \\' \\'){\\n                if(sentence.charAt(i-1) != sentence.charAt(i+1)){\\n                    return false;\\n                }\\n            }\\n        }\\n        if(sentence.charAt(0) != sentence.charAt(sentence.length()-1)){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4020887,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] s = sentence.split(\" \");\\n        char c = s[0].charAt(0);\\n        for(int i=0;i<s.length;i++)\\n        {\\n            if(i!=s.length-1)\\n            {\\n                if(s[i].charAt(s[i].length()-1)!=s[i+1].charAt(0))\\n                {\\n                    return false;\\n                }\\n            }\\n            else{\\n                if(s[i].charAt(s[i].length()-1)!=c)\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] s = sentence.split(\" \");\\n        char c = s[0].charAt(0);\\n        for(int i=0;i<s.length;i++)\\n        {\\n            if(i!=s.length-1)\\n            {\\n                if(s[i].charAt(s[i].length()-1)!=s[i+1].charAt(0))\\n                {\\n                    return false;\\n                }\\n            }\\n            else{\\n                if(s[i].charAt(s[i].length()-1)!=c)\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019832,
                "title": "simple-java-solution-1-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String arr[]=sentence.split(\" \");\\n        if(arr[0].charAt(0)!=arr[arr.length-1].charAt(arr[arr.length-1].length()-1))\\n            return false;\\n        for(int i=0;i<arr.length-1;i++){\\n            if(arr[i].charAt(arr[i].length()-1)!=arr[i+1].charAt(0))\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String arr[]=sentence.split(\" \");\\n        if(arr[0].charAt(0)!=arr[arr.length-1].charAt(arr[arr.length-1].length()-1))\\n            return false;\\n        for(int i=0;i<arr.length-1;i++){\\n            if(arr[i].charAt(arr[i].length()-1)!=arr[i+1].charAt(0))\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4018919,
                "title": "easy-cpp-solution-optimized",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        char firstChar = sentence[0];\\n\\n        for(int i = 0; i < sentence.length(); i++){\\n            if(sentence[i] == \\' \\'){\\n                if(sentence[i-1] != sentence[i+1]) return false;\\n            }\\n\\n            if(i == sentence.length() - 1){\\n                if(sentence[sentence.length()-1] != firstChar) return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        char firstChar = sentence[0];\\n\\n        for(int i = 0; i < sentence.length(); i++){\\n            if(sentence[i] == \\' \\'){\\n                if(sentence[i-1] != sentence[i+1]) return false;\\n            }\\n\\n            if(i == sentence.length() - 1){\\n                if(sentence[sentence.length()-1] != firstChar) return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011566,
                "title": "2490-circular-sentence",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] words = sentence.split(\" \");\\n        int n = words.length;\\n\\n        if (n == 1) {\\n            String s = words[0]  ;\\n            return s.charAt(0)==s.charAt(s.length()-1);\\n        }\\n\\n        \\n\\n        for (int i = 0; i < n; i++) {\\n            String currentWord = words[i];\\n            String nextWord = words[(i + 1) % n];\\n\\n            if (currentWord.charAt(currentWord.length() - 1) != nextWord.charAt(0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] words = sentence.split(\" \");\\n        int n = words.length;\\n\\n        if (n == 1) {\\n            String s = words[0]  ;\\n            return s.charAt(0)==s.charAt(s.length()-1);\\n        }\\n\\n        \\n\\n        for (int i = 0; i < n; i++) {\\n            String currentWord = words[i];\\n            String nextWord = words[(i + 1) % n];\\n\\n            if (currentWord.charAt(currentWord.length() - 1) != nextWord.charAt(0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4004018,
                "title": "python-90-beating-easy-solution-with-walrus-operator",
                "content": "# Approach\\nIf the last character is not equal to the first, return False. Otherwise, we go through the indexes of words and look at the end and beginning of each, and if we find a non-match, then we return False, and if all the tests passed and the False was not returned, then we return True.\\n![image.png](https://assets.leetcode.com/users/images/4bdbbead-cfcc-4384-a691-86bdbfc52f57_1693893369.9099636.png)\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        if sentence[0] != sentence[-1]:\\n            return False\\n        for ind in range(len(words := sentence.split(\\' \\')) - 1):\\n            if words[ind][-1] != words[ind + 1][0]:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        if sentence[0] != sentence[-1]:\\n            return False\\n        for ind in range(len(words := sentence.split(\\' \\')) - 1):\\n            if words[ind][-1] != words[ind + 1][0]:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4001578,
                "title": "solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        a=list(sentence.split(\" \"))\\n        print(a)\\n        b=[]\\n        for i in range(0,len(a)) :\\n            b.append([])\\n        for i in range(0,len(a)) :\\n            b[i].append(a[i][0])\\n            if i==0 :\\n                b[0].append(a[len(a)-1][len(a[len(a)-1])-1])\\n            else :\\n                b[i].append(a[i-1][len(a[i-1])-1])\\n        c=0\\n        for i in b :\\n            if i.count(i[0])==2 :\\n                c+=1\\n        return True if c==len(b) else False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        a=list(sentence.split(\" \"))\\n        print(a)\\n        b=[]\\n        for i in range(0,len(a)) :\\n            b.append([])\\n        for i in range(0,len(a)) :\\n            b[i].append(a[i][0])\\n            if i==0 :\\n                b[0].append(a[len(a)-1][len(a[len(a)-1])-1])\\n            else :\\n                b[i].append(a[i-1][len(a[i-1])-1])\\n        c=0\\n        for i in b :\\n            if i.count(i[0])==2 :\\n                c+=1\\n        return True if c==len(b) else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3990422,
                "title": "c-easy-solution-beats-100",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        if(sentence.back() != sentence[0]) return false;\\n        for(int i = 0; i < sentence.size(); i++) {\\n            if(sentence[i] == \\' \\') {\\n                if(sentence[i - 1] != sentence[i + 1]) return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        if(sentence.back() != sentence[0]) return false;\\n        for(int i = 0; i < sentence.size(); i++) {\\n            if(sentence[i] == \\' \\') {\\n                if(sentence[i - 1] != sentence[i + 1]) return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3988591,
                "title": "easy-solution-made-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        l=sentence.split()\\n        print(l)\\n        if (len(l)==0):\\n            return True\\n        if (len(l)==1):\\n            if l[0][-1]==l[0][0]:\\n                return True\\n            else:\\n                return False\\n        for i in range(len(l)):\\n            if (i==len(l)-1): \\n                if (l[i][-1]==l[0][0]):\\n                    return True\\n                else:\\n                    return False\\n                \\n            elif(l[i][-1]==l[i+1][0]):\\n                pass\\n            else:\\n                return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        l=sentence.split()\\n        print(l)\\n        if (len(l)==0):\\n            return True\\n        if (len(l)==1):\\n            if l[0][-1]==l[0][0]:\\n                return True\\n            else:\\n                return False\\n        for i in range(len(l)):\\n            if (i==len(l)-1): \\n                if (l[i][-1]==l[0][0]):\\n                    return True\\n                else:\\n                    return False\\n                \\n            elif(l[i][-1]==l[i+1][0]):\\n                pass\\n            else:\\n                return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3985758,
                "title": "very-basic-java-soln-96",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String s[]=sentence.split(\" \");\\n        for(int i=0;i<s.length-1;i++){\\n            if(s[i].charAt(s[i].length()-1)!=s[i+1].charAt(0))\\n                return false;\\n        }\\n        if(s[0].charAt(0)==s[s.length-1].charAt(s[s.length-1].length()-1))\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String s[]=sentence.split(\" \");\\n        for(int i=0;i<s.length-1;i++){\\n            if(s[i].charAt(s[i].length()-1)!=s[i+1].charAt(0))\\n                return false;\\n        }\\n        if(s[0].charAt(0)==s[s.length-1].charAt(s[s.length-1].length()-1))\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979757,
                "title": "circular-sentence-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        for(int i=0; i<sentence.length(); i++){\\n            if(sentence.charAt(i) == \\' \\'){\\n                if(sentence.charAt(i-1) != sentence.charAt(i+1)){\\n                    return false;\\n                }\\n            }\\n        }\\n        if(sentence.charAt(0) != sentence.charAt(sentence.length()-1)){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        for(int i=0; i<sentence.length(); i++){\\n            if(sentence.charAt(i) == \\' \\'){\\n                if(sentence.charAt(i-1) != sentence.charAt(i+1)){\\n                    return false;\\n                }\\n            }\\n        }\\n        if(sentence.charAt(0) != sentence.charAt(sentence.length()-1)){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3975565,
                "title": "2490-circular-sentence",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] s = sentence.split(\" \");\\n\\n        for(int i=0;i<s.length;i++){\\n            if(i==0){\\n                if(s[i].charAt(0) != s[s.length-1].charAt(s[s.length-1].length()-1)){\\n                    return false;\\n                }\\n            }\\n            else{\\n                if(s[i].charAt(0) != s[i-1].charAt(s[i-1].length()-1)){\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String[] s = sentence.split(\" \");\\n\\n        for(int i=0;i<s.length;i++){\\n            if(i==0){\\n                if(s[i].charAt(0) != s[s.length-1].charAt(s[s.length-1].length()-1)){\\n                    return false;\\n                }\\n            }\\n            else{\\n                if(s[i].charAt(0) != s[i-1].charAt(s[i-1].length()-1)){\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3970707,
                "title": "java-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        \\n        String[] words = sentence.split(\" \");\\n\\n        int n = words.length;\\n\\n        for(int i = 0; i < n; i++){\\n\\n            String currWord = words[i];\\n            int last1 = currWord.length();\\n\\n            String nextWord = words[(i + 1) % n];\\n\\n            if(currWord.charAt(last1 - 1) != nextWord.charAt(0)) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        \\n        String[] words = sentence.split(\" \");\\n\\n        int n = words.length;\\n\\n        for(int i = 0; i < n; i++){\\n\\n            String currWord = words[i];\\n            int last1 = currWord.length();\\n\\n            String nextWord = words[(i + 1) % n];\\n\\n            if(currWord.charAt(last1 - 1) != nextWord.charAt(0)) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3961028,
                "title": "java-1-ms-solution-optimal-and-easy",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        char start = sentence.charAt(0);\\n        char end = sentence.charAt(sentence.length()-1);\\n        boolean ans = false;\\n\\n        if (start != end) {return false;}\\n\\n        for (int i = 1; i < sentence.length()-1; i++) {\\n            if (sentence.charAt(i) != \\' \\') {\\n                continue;\\n            }\\n            else {\\n                ans = sentence.charAt(i-1) == sentence.charAt(i+1);\\n\\n                if (!ans) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n// TC : O(n)\\n// SC : O(1)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        char start = sentence.charAt(0);\\n        char end = sentence.charAt(sentence.length()-1);\\n        boolean ans = false;\\n\\n        if (start != end) {return false;}\\n\\n        for (int i = 1; i < sentence.length()-1; i++) {\\n            if (sentence.charAt(i) != \\' \\') {\\n                continue;\\n            }\\n            else {\\n                ans = sentence.charAt(i-1) == sentence.charAt(i+1);\\n\\n                if (!ans) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n// TC : O(n)\\n// SC : O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954660,
                "title": "ruby-split-conditionals-returns-55ms",
                "content": "```\\ndef is_circular_sentence(sentence)\\n  s = sentence.split\\n  if s[-1][-1] == s[0][0]\\n    return true if s.size == 1\\n    return (1...s.size).map{|i| s[i-1][-1] == s[i][0]}.all?\\n  end\\n  return false\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\ndef is_circular_sentence(sentence)\\n  s = sentence.split\\n  if s[-1][-1] == s[0][0]\\n    return true if s.size == 1\\n    return (1...s.size).map{|i| s[i-1][-1] == s[i][0]}.all?\\n  end\\n  return false\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3946603,
                "title": "circular-sentence-in-java",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(sentence length)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String st=\"\";\\n        sentence=sentence+\" \";\\n        for(int i=0;i<sentence.length();i++)\\n        {\\n            if(sentence.charAt(i)==\\' \\' )\\n            {\\n                if(sentence.charAt(i-1)==sentence.charAt(0) && i==sentence.length()-1)\\n                break;\\n                else if(i==sentence.length()-1 && sentence.charAt(i-1)!=sentence.charAt(0))\\n                return false;\\n                else if(sentence.charAt(i-1)==sentence.charAt(i+1))\\n                continue;\\n                else \\n                return false;\\n            }\\n        } \\n            return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        String st=\"\";\\n        sentence=sentence+\" \";\\n        for(int i=0;i<sentence.length();i++)\\n        {\\n            if(sentence.charAt(i)==\\' \\' )\\n            {\\n                if(sentence.charAt(i-1)==sentence.charAt(0) && i==sentence.length()-1)\\n                break;\\n                else if(i==sentence.length()-1 && sentence.charAt(i-1)!=sentence.charAt(0))\\n                return false;\\n                else if(sentence.charAt(i-1)==sentence.charAt(i+1))\\n                continue;\\n                else \\n                return false;\\n            }\\n        } \\n            return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3940520,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n     String s[] = sentence.split(\" \");\\n     for(int i=0;i<s.length-1;i++){\\n         int n = s[i].length()-1;\\n         if(s[i].charAt(n)!=s[i+1].charAt(0)){\\n             return false;\\n         }\\n     }   \\n     if(s.length==1){\\n         if(s[0].charAt(0)!=s[0].charAt(s[0].length()-1)){\\n             return false;\\n         }\\n     }\\n     if(s[0].charAt(0)!=s[s.length-1].charAt(s[s.length-1].length()-1)){\\n         return false;\\n     }\\n     return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n     String s[] = sentence.split(\" \");\\n     for(int i=0;i<s.length-1;i++){\\n         int n = s[i].length()-1;\\n         if(s[i].charAt(n)!=s[i+1].charAt(0)){\\n             return false;\\n         }\\n     }   \\n     if(s.length==1){\\n         if(s[0].charAt(0)!=s[0].charAt(s[0].length()-1)){\\n             return false;\\n         }\\n     }\\n     if(s[0].charAt(0)!=s[s.length-1].charAt(s[s.length-1].length()-1)){\\n         return false;\\n     }\\n     return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3932929,
                "title": "easy-solution-using-java",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        int n = s.length();\\n\\n        if(s.charAt(0) != s.charAt(n - 1)){\\n            return false;\\n        }\\n\\n        for(int i = 2; i < n; i++){\\n            if(s.charAt(i - 1) == \\' \\'){\\n                if(s.charAt(i) != s.charAt(i - 2)){\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String s) {\\n        int n = s.length();\\n\\n        if(s.charAt(0) != s.charAt(n - 1)){\\n            return false;\\n        }\\n\\n        for(int i = 2; i < n; i++){\\n            if(s.charAt(i - 1) == \\' \\'){\\n                if(s.charAt(i) != s.charAt(i - 2)){\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3925781,
                "title": "simple-c-solution",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public bool IsCircularSentence(string sentence) {\\n        string[] value = sentence.Split(\" \");\\n        if(value[value.Length-1][value[value.Length-1].Length-1] != value[0][0]) return false;\\n        for (int i =0; i < value.Length-1;i++){\\n            if (value[i][value[i].Length-1] != value[i+1][0]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool IsCircularSentence(string sentence) {\\n        string[] value = sentence.Split(\" \");\\n        if(value[value.Length-1][value[value.Length-1].Length-1] != value[0][0]) return false;\\n        for (int i =0; i < value.Length-1;i++){\\n            if (value[i][value[i].Length-1] != value[i+1][0]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3918450,
                "title": "99-83-beats-in-run-time-only-25ms-in-python-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        lst=sentence.split(\" \")\\n        if lst[len(lst)-1][-1]!=lst[0][0]:\\n            return False\\n        for i in range(len(lst)-1):\\n            if lst[i][-1]!=lst[i+1][0]:\\n                return False\\n        return True\\n            \\n\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        lst=sentence.split(\" \")\\n        if lst[len(lst)-1][-1]!=lst[0][0]:\\n            return False\\n        for i in range(len(lst)-1):\\n            if lst[i][-1]!=lst[i+1][0]:\\n                return False\\n        return True\\n            \\n\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3917514,
                "title": "beginner-friendly-solution-is-explained-in-detail-enjoy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code is checking whether the given sentence is a circular sentence or not. It does so by comparing characters at specific positions and making sure that the conditions for circularity are met.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code first checks if the first and last characters of the sentence are the same. If they are not, the function returns false immediately, as the sentence cannot be circular.\\n\\nIt then iterates through the sentence starting from the second character up to the second-to-last character. For each character, it checks if it is a space (\\' \\'). If it is a space, it verifies that the character before the space and the character after the space are the same. If they are not the same, the function returns false, indicating that the sentence is not circular.\\n\\nIf the loop completes without returning false, it means that all characters satisfy the conditions for a circular sentence, and the function returns true.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this algorithm is O(n), where n is the length of the input sentence. The reason is that the code iterates through the sentence once to perform the checks.\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this algorithm is O(1), as it uses a constant amount of extra space for variables and comparisons, regardless of the input size.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        \\n        if(sentence[0] != sentence[sentence.length() - 1]) return false;\\n\\n        for(int i = 1; i < sentence.length() - 1; ++i){\\n            if(sentence[i] == \\' \\'){\\n                if(sentence[i - 1] != sentence[i + 1]) return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        \\n        if(sentence[0] != sentence[sentence.length() - 1]) return false;\\n\\n        for(int i = 1; i < sentence.length() - 1; ++i){\\n            if(sentence[i] == \\' \\'){\\n                if(sentence[i - 1] != sentence[i + 1]) return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904630,
                "title": "2-easy-java-solution-0ms-beats-100",
                "content": "# 1ms solution\\n```java\\nclass Solution {\\n    public boolean isCircularSentence0(String sentence) {\\n        int n = sentence.length();\\n        if(sentence.charAt(0) != sentence.charAt(n-1)) {\\n            return false;\\n        }\\n        char ch;\\n        for(int i = 0;i<n;i++){\\n            ch = sentence.charAt(i);\\n            if(ch == \\' \\') {\\n                if(sentence.charAt(i-1) != sentence.charAt(i+1)) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\\n\\n# 0ms solution\\nhttps://leetcode.com/problems/circular-sentence/submissions/1020274069/\\n\\n```java\\nclass Solution {\\n\\n    public boolean isCircularSentence(String s) {\\n        int n = s.length();\\n        if(s.charAt(0) != s.charAt(n-1)) {\\n            return false;\\n        }\\n        int spaceIdx = s.indexOf(\\' \\');\\n        while(spaceIdx >= 0) {\\n            if(s.charAt(spaceIdx-1) != s.charAt(spaceIdx+1)) {\\n                return false;\\n            }\\n            spaceIdx = s.indexOf(\\' \\', spaceIdx+1);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```java\\nclass Solution {\\n    public boolean isCircularSentence0(String sentence) {\\n        int n = sentence.length();\\n        if(sentence.charAt(0) != sentence.charAt(n-1)) {\\n            return false;\\n        }\\n        char ch;\\n        for(int i = 0;i<n;i++){\\n            ch = sentence.charAt(i);\\n            if(ch == \\' \\') {\\n                if(sentence.charAt(i-1) != sentence.charAt(i+1)) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\n```java\\nclass Solution {\\n\\n    public boolean isCircularSentence(String s) {\\n        int n = s.length();\\n        if(s.charAt(0) != s.charAt(n-1)) {\\n            return false;\\n        }\\n        int spaceIdx = s.indexOf(\\' \\');\\n        while(spaceIdx >= 0) {\\n            if(s.charAt(spaceIdx-1) != s.charAt(spaceIdx+1)) {\\n                return false;\\n            }\\n            spaceIdx = s.indexOf(\\' \\', spaceIdx+1);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3899872,
                "title": "python-solution-o-n-beginner-friendly",
                "content": "# Intuition\\nWe can check circular sentence by checking each pair words in sentence.\\n\\n# Approach\\nInitially we check left and right side of sentece, if they are not the same - its not a circular sentense. And then we take a pair words of sentence by .split() method and checking it. For better understanding you can see on code below. \\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        start, end = sentence[0], sentence[-1]\\n        if start != end:\\n            return False\\n        for x, y in zip(sentence.split(), sentence.split()[1:]):\\n            if x[-1] != y[0]:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        start, end = sentence[0], sentence[-1]\\n        if start != end:\\n            return False\\n        for x, y in zip(sentence.split(), sentence.split()[1:]):\\n            if x[-1] != y[0]:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3890216,
                "title": "python-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence_arr = sentence.split(\" \")\\n        result = True\\n        for i, word in enumerate(sentence_arr):\\n            print(i)\\n            curr = word\\n            prev = (sentence_arr[i-1])\\n            next = (sentence_arr[i+1 if i < len(sentence_arr)-1 else 0])\\n\\n            print(word, prev, next)\\n            if not (word[0] == prev[-1] and word[-1] == next[0]):\\n                result = False\\n\\n        return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence_arr = sentence.split(\" \")\\n        result = True\\n        for i, word in enumerate(sentence_arr):\\n            print(i)\\n            curr = word\\n            prev = (sentence_arr[i-1])\\n            next = (sentence_arr[i+1 if i < len(sentence_arr)-1 else 0])\\n\\n            print(word, prev, next)\\n            if not (word[0] == prev[-1] and word[-1] == next[0]):\\n                result = False\\n\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887611,
                "title": "java-solution-very-easy-97-1ms-time-99-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        \\n        String [] arr = sentence.split(\" \");\\n\\n        if(arr.length==1) \\n        return arr[0].charAt(0) == \\n            arr[0].charAt(arr[0].length()-1) ? true : false;\\n\\n        if(arr[0].charAt(0) != arr[arr.length-1].charAt(arr[arr.length-1].length()-1))\\n        return false;\\n\\n        for(int i=0; i<arr.length-1; i++)\\n    if(arr[i].charAt(arr[i].length()-1) != arr[i+1].charAt(0))\\n          return false;\\n\\n\\n        return true;\\n      \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        \\n        String [] arr = sentence.split(\" \");\\n\\n        if(arr.length==1) \\n        return arr[0].charAt(0) == \\n            arr[0].charAt(arr[0].length()-1) ? true : false;\\n\\n        if(arr[0].charAt(0) != arr[arr.length-1].charAt(arr[arr.length-1].length()-1))\\n        return false;\\n\\n        for(int i=0; i<arr.length-1; i++)\\n    if(arr[i].charAt(arr[i].length()-1) != arr[i+1].charAt(0))\\n          return false;\\n\\n\\n        return true;\\n      \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3870514,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public boolean isCircularSentence(String sentence) \\n    {\\n         sentence=sentence+\" \";\\n         int l=sentence.length();\\n         int m=0;\\n         for(int i=0;i<l;i++)\\n         {\\n             char w=sentence.charAt(i);\\n             if(w==\\' \\')\\n             {\\n                 m++;\\n             }\\n         }\\n        if(m==1)\\n        {\\n            int y=sentence.length();\\n            char v=sentence.charAt(0);\\n            char v1=sentence.charAt(y-2);\\n            if(v==v1)\\n            {\\n                return true;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        else \\n        {\\n            String s1=\"\";\\n            String s3=\"\";\\n            for(int i=0;i<sentence.length();i++)\\n            {\\n                if(sentence.charAt(i)!=\\' \\')\\n                {\\n                    s1=s1+sentence.charAt(i);\\n                }\\n                else\\n                {\\n                    s3=s3+s1.charAt(0);\\n                    s3=s3+s1.charAt(s1.length()-1);\\n                    s1=\"\";\\n                }\\n            }\\n            System.out.print(s3);\\n                int p=0;\\n                for(int k=1;k<=s3.length()-2;k++)\\n                {\\n                    if(s3.charAt(k)==s3.charAt(k+1))\\n                    {\\n                        k++;\\n                    }\\n                    else\\n                    {\\n                        p=-1;\\n                        break;\\n                    }\\n                }\\n                int f=0;\\n                if(p!=-1)\\n                {\\n                    if(s3.charAt(0)==s3.charAt(s3.length()-1))\\n                    {\\n                        f=1;\\n                    }\\n                }\\n                if(f==1)\\n                {\\n                    return true;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public boolean isCircularSentence(String sentence) \\n    {\\n         sentence=sentence+\" \";\\n         int l=sentence.length();\\n         int m=0;\\n         for(int i=0;i<l;i++)\\n         {\\n             char w=sentence.charAt(i);\\n             if(w==\\' \\')\\n             {\\n                 m++;\\n             }\\n         }\\n        if(m==1)\\n        {\\n            int y=sentence.length();\\n            char v=sentence.charAt(0);\\n            char v1=sentence.charAt(y-2);\\n            if(v==v1)\\n            {\\n                return true;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        else \\n        {\\n            String s1=\"\";\\n            String s3=\"\";\\n            for(int i=0;i<sentence.length();i++)\\n            {\\n                if(sentence.charAt(i)!=\\' \\')\\n                {\\n                    s1=s1+sentence.charAt(i);\\n                }\\n                else\\n                {\\n                    s3=s3+s1.charAt(0);\\n                    s3=s3+s1.charAt(s1.length()-1);\\n                    s1=\"\";\\n                }\\n            }\\n            System.out.print(s3);\\n                int p=0;\\n                for(int k=1;k<=s3.length()-2;k++)\\n                {\\n                    if(s3.charAt(k)==s3.charAt(k+1))\\n                    {\\n                        k++;\\n                    }\\n                    else\\n                    {\\n                        p=-1;\\n                        break;\\n                    }\\n                }\\n                int f=0;\\n                if(p!=-1)\\n                {\\n                    if(s3.charAt(0)==s3.charAt(s3.length()-1))\\n                    {\\n                        f=1;\\n                    }\\n                }\\n                if(f==1)\\n                {\\n                    return true;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3870457,
                "title": "mystery-of-circular-sentences-a-simple-algorithm-explained-with-code",
                "content": "\\n# Approach\\nSplit the Sentence: The given sentence is split into words.\\n\\nCheck for Single Word: If there\\'s only one word in the sentence, the code checks if the first and last characters are the same.\\n\\nIterate Through Words: For multiple words, the code iterates through them, checking if the last character of the current word is the same as the first character of the next word.\\n\\nCheck First and Last Words: Finally, it checks if the first character of the first word is the same as the last character of the last word.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n), where n is the total number of characters in the sentence. This is because each character is checked once.\\n\\n- Space complexity:\\n O(m), where m is the number of words in the sentence. This is due to the space required to store the words after splitting the sentence.\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n\\n        boolean isCircular = true;\\n\\n\\n            //The given sentence is split into words.\\n\\n        String[] words = sentence.split(\" \");\\n\\n        // If there\\'s only one word in the sentence, the code checks if the first and last characters are the same.\\n\\n        if(words.length <=1) {\\n            if(sentence.charAt(0)!= sentence.charAt(sentence.length()-1)) return false; \\n        }\\n        \\n        else {\\n\\n\\n        //For multiple words, the code iterates through them, checking if the last character of the current word is the same as the first character of the next word.\\n\\n        for(int i=0;i<words.length-1;i++) {\\n            if(words[i].charAt(words[i].length()-1) != words[i+1].charAt(0)) return false;\\n            \\n            \\n        }\\n\\n// Finally, it checks if the first character of the first word is the same as the last character of the last word.\\n\\n        if(words[0].charAt(0) != words[words.length-1].charAt(words[words.length-1].length()-1)) return false;\\n\\n\\n        }\\n\\n\\n\\n        \\n            return true;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n\\n        boolean isCircular = true;\\n\\n\\n            //The given sentence is split into words.\\n\\n        String[] words = sentence.split(\" \");\\n\\n        // If there\\'s only one word in the sentence, the code checks if the first and last characters are the same.\\n\\n        if(words.length <=1) {\\n            if(sentence.charAt(0)!= sentence.charAt(sentence.length()-1)) return false; \\n        }\\n        \\n        else {\\n\\n\\n        //For multiple words, the code iterates through them, checking if the last character of the current word is the same as the first character of the next word.\\n\\n        for(int i=0;i<words.length-1;i++) {\\n            if(words[i].charAt(words[i].length()-1) != words[i+1].charAt(0)) return false;\\n            \\n            \\n        }\\n\\n// Finally, it checks if the first character of the first word is the same as the last character of the last word.\\n\\n        if(words[0].charAt(0) != words[words.length-1].charAt(words[words.length-1].length()-1)) return false;\\n\\n\\n        }\\n\\n\\n\\n        \\n            return true;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3866192,
                "title": "easy-to-understand-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        int count=0;\\n        \\n        for(int i=0;i<sentence.length();i++)\\n        {\\n            if(sentence.charAt(i)==\\' \\')\\n            {\\n                if(sentence.charAt(i-1)!=sentence.charAt(i+1))\\n                {\\n                    return false;\\n                }\\n            }\\n            \\n        }\\n      return sentence.charAt(sentence.length()-1)==sentence.charAt(0);\\n   }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        int count=0;\\n        \\n        for(int i=0;i<sentence.length();i++)\\n        {\\n            if(sentence.charAt(i)==\\' \\')\\n            {\\n                if(sentence.charAt(i-1)!=sentence.charAt(i+1))\\n                {\\n                    return false;\\n                }\\n            }\\n            \\n        }\\n      return sentence.charAt(sentence.length()-1)==sentence.charAt(0);\\n   }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3863882,
                "title": "java-1ms-beats-96-86",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n\\n        String[] sent = sentence.split(\" \");\\n\\n        // check first char of first word against last char of last word\\n        if (firstChar(sent[0]) != lastChar(sent[sent.length - 1])) {\\n            return false;\\n        }\\n        // invariant now: first char of first word equals last char of last word\\n\\n        if (sent.length == 1) {\\n            return true;\\n        }\\n        // invariant now: sent.length >= 2\\n\\n        for (int i = 0; i < sent.length - 1; ++i) {\\n            if (lastChar(sent[i]) != firstChar(sent[i + 1])) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    private char firstChar(String s) {\\n        return s.charAt(0);\\n    }\\n\\n    private char lastChar(String s) {\\n        return s.charAt(s.length() - 1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n\\n        String[] sent = sentence.split(\" \");\\n\\n        // check first char of first word against last char of last word\\n        if (firstChar(sent[0]) != lastChar(sent[sent.length - 1])) {\\n            return false;\\n        }\\n        // invariant now: first char of first word equals last char of last word\\n\\n        if (sent.length == 1) {\\n            return true;\\n        }\\n        // invariant now: sent.length >= 2\\n\\n        for (int i = 0; i < sent.length - 1; ++i) {\\n            if (lastChar(sent[i]) != firstChar(sent[i + 1])) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    private char firstChar(String s) {\\n        return s.charAt(0);\\n    }\\n\\n    private char lastChar(String s) {\\n        return s.charAt(s.length() - 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3861848,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        char prev;\\n        for(int i = 0; i<sentence.size(); i++){\\n            if(i == sentence.size()-1){\\n                if(sentence[i]!=sentence[0]){\\n                    return false;\\n                }\\n            }\\n            if(sentence[i] == \\' \\'){\\n                if(prev!=sentence[i+1]){\\n                    return false;\\n                }\\n            }\\n            prev = sentence[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        char prev;\\n        for(int i = 0; i<sentence.size(); i++){\\n            if(i == sentence.size()-1){\\n                if(sentence[i]!=sentence[0]){\\n                    return false;\\n                }\\n            }\\n            if(sentence[i] == \\' \\'){\\n                if(prev!=sentence[i+1]){\\n                    return false;\\n                }\\n            }\\n            prev = sentence[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841711,
                "title": "check-first-and-last-letters-then-use-sliding-window",
                "content": "# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        if sentence[0] != sentence[-1]:\\n            return False\\n        \\n        for i in range(1, len(sentence) - 1):\\n            if (sentence[i] == \" \" and\\n                sentence[i - 1] != sentence[i + 1]):\\n                    return False\\n\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        if sentence[0] != sentence[-1]:\\n            return False\\n        \\n        for i in range(1, len(sentence) - 1):\\n            if (sentence[i] == \" \" and\\n                sentence[i - 1] != sentence[i + 1]):\\n                    return False\\n\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839434,
                "title": "jebasraja-very-easy",
                "content": "# Intuition:Karunya university:accenture\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public boolean isCircularSentence(String sentence) \\n    {\\n       String[] arr=sentence.split(\" \");\\n       Boolean finalanswer=true;\\n       if (arr[0].charAt(0)!=arr[arr.length-1].charAt(arr[arr.length-1].length()-1)) \\n{\\n //System.out.println(\"false\");\\n //return false; \\n   finalanswer=false;\\n\\n}\\n\\nfor (int i = 0; i < arr.length-1; i++) \\n{ \\n   if (arr[i].charAt(arr[i].length()-1)!=arr[i+1].charAt(0)) \\n   {\\n    //System.out.println(\"false\");\\n   finalanswer=false;\\n   break;\\n   //return false;\\n   }\\n  \\n}\\n\\nreturn finalanswer;  \\n\\n     }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public boolean isCircularSentence(String sentence) \\n    {\\n       String[] arr=sentence.split(\" \");\\n       Boolean finalanswer=true;\\n       if (arr[0].charAt(0)!=arr[arr.length-1].charAt(arr[arr.length-1].length()-1)) \\n{\\n //System.out.println(\"false\");\\n //return false; \\n   finalanswer=false;\\n\\n}\\n\\nfor (int i = 0; i < arr.length-1; i++) \\n{ \\n   if (arr[i].charAt(arr[i].length()-1)!=arr[i+1].charAt(0)) \\n   {\\n    //System.out.println(\"false\");\\n   finalanswer=false;\\n   break;\\n   //return false;\\n   }\\n  \\n}\\n\\nreturn finalanswer;  \\n\\n     }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836830,
                "title": "best-runtime-and-memory",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        int len=sentence.length();\\n        if(sentence.charAt(0)!=sentence.charAt(len-1)) return false;\\n        for(int i=0;i<len;i++){\\n            if(sentence.charAt(i)==\\' \\'){\\n                if(sentence.charAt(i-1)!=sentence.charAt(i+1)) return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        int len=sentence.length();\\n        if(sentence.charAt(0)!=sentence.charAt(len-1)) return false;\\n        for(int i=0;i<len;i++){\\n            if(sentence.charAt(i)==\\' \\'){\\n                if(sentence.charAt(i-1)!=sentence.charAt(i+1)) return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3823969,
                "title": "java-clean-solution-1-ms-97-62-time-96-56-space",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        \\n        for (int i = 0; i < sentence.length(); i++) {\\n            if ((sentence.charAt(i) == \\' \\') && (sentence.charAt(i - 1) != sentence.charAt(i + 1))) {\\n                return false;\\n            }\\n        }\\n        \\n        return sentence.charAt(0) == sentence.charAt(sentence.length() - 1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n        \\n        for (int i = 0; i < sentence.length(); i++) {\\n            if ((sentence.charAt(i) == \\' \\') && (sentence.charAt(i - 1) != sentence.charAt(i + 1))) {\\n                return false;\\n            }\\n        }\\n        \\n        return sentence.charAt(0) == sentence.charAt(sentence.length() - 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3823054,
                "title": "2-line-python-solution-91-30-runtime-and-92-75-memory",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis solution page have two solution for this problem. First solution more understandable but slower than other. \\nAt second one solution use just 2 line. I use all() function. All function control every each words character. I bind all function with and operator. Because lastly we must looking up last word\\'s last character and first word\\'s first character. Because of that we must write this : str[-1][-1] == str[0][0].\\n\\nIf all() function return True and \" str[-1][-1] == str[0][0] \" return True --> True and True = True. \\n\\n\\n# Code\\n```\\nclass Solution(object):\\n    def isCircularSentence(self, sentence):\\n        \"\"\"\\n        :type sentence: str\\n        :rtype: bool\\n        \"\"\"\\n        # str = sentence.split()\\n        # if str[0][0] != str[-1][-1] : return False\\n        # for i in range(len(str)):\\n        #     if i == len(str) - 1 : \\n        #         return str[i][-1] == str[0][0] \\n        #     if str[i][-1] != str[i+1][0] : return False\\n            \\n        # return True\\n\\n        str = sentence.split()\\n        return all(str[i][-1] == str[i+1][0] for i in range(len(str)-1)) and str[-1][-1] == str[0][0]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def isCircularSentence(self, sentence):\\n        \"\"\"\\n        :type sentence: str\\n        :rtype: bool\\n        \"\"\"\\n        # str = sentence.split()\\n        # if str[0][0] != str[-1][-1] : return False\\n        # for i in range(len(str)):\\n        #     if i == len(str) - 1 : \\n        #         return str[i][-1] == str[0][0] \\n        #     if str[i][-1] != str[i+1][0] : return False\\n            \\n        # return True\\n\\n        str = sentence.split()\\n        return all(str[i][-1] == str[i+1][0] for i in range(len(str)-1)) and str[-1][-1] == str[0][0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3809477,
                "title": "circular-sentence",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n         for (int i = 0; i < sentence.length(); ++i)\\n      if (sentence.charAt(i) == \\' \\' && sentence.charAt(i - 1) != sentence.charAt(i + 1))\\n        return false;\\n    return sentence.charAt(0) == sentence.charAt(sentence.length() - 1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isCircularSentence(String sentence) {\\n         for (int i = 0; i < sentence.length(); ++i)\\n      if (sentence.charAt(i) == \\' \\' && sentence.charAt(i - 1) != sentence.charAt(i + 1))\\n        return false;\\n    return sentence.charAt(0) == sentence.charAt(sentence.length() - 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3804027,
                "title": "easy-solution-1-line",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def isCircularSentence(self, s: str) -> bool:\\n        return all(s[i] != \\' \\' or s[i-1] == s[i+1] for i in range(len(s))) and s[-1] == s[0]\\n```\\n\\nPlease let me know if any improvements can be made.\\n\\nThanks",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isCircularSentence(self, s: str) -> bool:\\n        return all(s[i] != \\' \\' or s[i-1] == s[i+1] for i in range(len(s))) and s[-1] == s[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3782490,
                "title": "dart-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  bool isCircularSentence(String s) {\\n      for (int i = 0; i < s.length; i++)\\n      {\\n          if (s[i] == \\' \\')\\n          {\\n              if (s[i-1] != s[i+1])\\n              {\\n                  return false;\\n              }\\n          }\\n      }\\n      return s[0] == s[s.length-1];\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  bool isCircularSentence(String s) {\\n      for (int i = 0; i < s.length; i++)\\n      {\\n          if (s[i] == \\' \\')\\n          {\\n              if (s[i-1] != s[i+1])\\n              {\\n                  return false;\\n              }\\n          }\\n      }\\n      return s[0] == s[s.length-1];\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3771393,
                "title": "c-beats-100-easy-simple-solution-o-n-o-1",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n = sentence.length();\\n        if(sentence[0]!=sentence[n-1]) return false;\\n        for(int i=0;i<n;i++){\\n            if(sentence[i]==\\' \\'){\\n                if(sentence[i-1]!=sentence[i+1]) return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n = sentence.length();\\n        if(sentence[0]!=sentence[n-1]) return false;\\n        for(int i=0;i<n;i++){\\n            if(sentence[i]==\\' \\'){\\n                if(sentence[i-1]!=sentence[i+1]) return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3762368,
                "title": "easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s){\\n        vector<string>v;\\n        string str;\\n        for(auto i:s){\\n            if(i==\\' \\'){\\n                v.push_back(str);\\n                str=\"\";\\n            }\\n            else{\\n                str+=tolower(i);\\n            }\\n        }\\n        v.push_back(str);\\n        for(int i=0; i<v.size()-1; i++){\\n            int n = v[i].size();\\n            if(v[i][n-1]!=v[i+1][0]){\\n                return false;\\n            }\\n        }\\n        if(s[0]!=s[s.size()-1]){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string s){\\n        vector<string>v;\\n        string str;\\n        for(auto i:s){\\n            if(i==\\' \\'){\\n                v.push_back(str);\\n                str=\"\";\\n            }\\n            else{\\n                str+=tolower(i);\\n            }\\n        }\\n        v.push_back(str);\\n        for(int i=0; i<v.size()-1; i++){\\n            int n = v[i].size();\\n            if(v[i][n-1]!=v[i+1][0]){\\n                return false;\\n            }\\n        }\\n        if(s[0]!=s[s.size()-1]){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3755822,
                "title": "kotlin-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    fun isCircularSentence(sentence: String): Boolean {\\n        var i = 1\\n\\n        while (i < sentence.length) {\\n            if (sentence[i-1] == \\' \\' && sentence[i] != sentence[i-2])\\n                return false\\n\\n            if (i+1 == sentence.length && sentence.first() != sentence.last())\\n                return false\\n\\n            i++\\n        }\\n\\n        return true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun isCircularSentence(sentence: String): Boolean {\\n        var i = 1\\n\\n        while (i < sentence.length) {\\n            if (sentence[i-1] == \\' \\' && sentence[i] != sentence[i-2])\\n                return false\\n\\n            if (i+1 == sentence.length && sentence.first() != sentence.last())\\n                return false\\n\\n            i++\\n        }\\n\\n        return true\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3734472,
                "title": "rust-short-and-fast",
                "content": "# Approach\\nUsing `windows(3)` find every group of 3 characters where the middle character is a space, then compare the first and the third characters.\\nCompare first and last separately because they won\\'t be in any window.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n`into_bytes` does not create a copy\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn is_circular_sentence(sentence: String) -> bool {\\n        let bytes = sentence.into_bytes();\\n        bytes.first() == bytes.last()\\n            && bytes\\n                .windows(3)\\n                .filter(|w| w[1] == b\\' \\')\\n                .all(|w| w[0] == w[2])\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn is_circular_sentence(sentence: String) -> bool {\\n        let bytes = sentence.into_bytes();\\n        bytes.first() == bytes.last()\\n            && bytes\\n                .windows(3)\\n                .filter(|w| w[1] == b\\' \\')\\n                .all(|w| w[0] == w[2])\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3734255,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    const arrSent = sentence.split(\\' \\');\\n    const lastWord = arrSent[arrSent.length - 1];\\n    let lastChar = lastWord[lastWord.length - 1];\\n    \\n    for (const word of arrSent) {\\n        if (word[0] !== lastChar) return false; \\n        lastChar = word[word.length - 1];\\n    }\\n    \\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} sentence\\n * @return {boolean}\\n */\\nvar isCircularSentence = function(sentence) {\\n    const arrSent = sentence.split(\\' \\');\\n    const lastWord = arrSent[arrSent.length - 1];\\n    let lastChar = lastWord[lastWord.length - 1];\\n    \\n    for (const word of arrSent) {\\n        if (word[0] !== lastChar) return false; \\n        lastChar = word[word.length - 1];\\n    }\\n    \\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1785177,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1926613,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1948220,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1840110,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1804973,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1749439,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1713573,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1711612,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1708433,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1708211,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1785177,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1926613,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1948220,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1840110,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1804973,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1749439,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1713573,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1711612,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1708433,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            },
            {
                "id": 1708211,
                "content": [
                    {
                        "username": "ashu_98872",
                        "content": "\"Leetcode eisc cool\" issue in the test case. it should be true but exceoted is false.?"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "It should be false because of Uppercase \"L\" in the start and Lowercase \"l\" in the end. They are not equal"
                    },
                    {
                        "username": "coderrsc",
                        "content": "\"leetcode eats soul\" that is pretty good example"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "It is an answerable easy question. I solved using indexes of gaps between the words in a sentence => [Solution Here! check it out Once](https://leetcode.com/problems/circular-sentence/solutions/3693785/find-the-and-get-the-answer-100-0ms/)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "c++ :\\n\\nclass Solution {\\npublic:\\n    bool isCircularSentence(string sentence) {\\n        int n=sentence.size();\\n        if(sentence[0]==sentence[n-1]){\\n            for(int i=1;i<n-1;i++){\\n                if(sentence[i]==\\' \\'){\\n                    if(sentence[i-1]!=sentence[i+1]) return 0;\\n                }\\n            }\\n        return 1;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "prasannaprassu80",
                        "content": "can you tell me the changes in my code? - 2 test cases failed only\\n\\nclass Solution:\\n    def isCircularSentence(self, sentence: str) -> bool:\\n        sentence= sentence.split()\\n        if len(sentence)==1:\\n            if sentence[0][0] != sentence[-1][-1]:\\n                return False\\n            else:\\n                return True\\n        for i in range(1, len(sentence)):\\n            print(sentence[i-1], sentence[i])\\n            print(sentence[i-1][-1], sentence[i][0])\\n            if sentence[i-1][-1]==sentence[i][0]:\\n                if sentence[-1][-1]== sentence[0][0]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                return False"
                    },
                    {
                        "username": "kd_5304",
                        "content": "`\\nInput: \"Leetcode is cool\"\\nOutput: false\\n`\\nlol :)"
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "They have a good sense of humor)"
                    },
                    {
                        "username": "kd_5304",
                        "content": "[@laxmi17sarki](/laxmi17sarki)  I know the output is false. I just found it funny that Leetcode isn\\'t cool :)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "[@Khushi Dusad](/kd_5304) : Yes the Output is false. because Uppercase and Lowercase are treated different. It\\'s mentioned in the question as well."
                    },
                    {
                        "username": "gregsklyanny",
                        "content": "Pretty good problem for morning tea)"
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Everyone, Can someone help me understand: why  \"Leetcode eisc cool\" is not a circular sentence?\\n\\nCode: https://leetcode.com/problems/circular-sentence/           "
                    },
                    {
                        "username": "swarupsai112002",
                        "content": "This is case sensitive.As the last letter of last word is \\'lowercase L\\' and first letter of first word is \\'Capital L\\'. They both are not same,hence it is not a circular sentence."
                    },
                    {
                        "username": "laxmi17sarki",
                        "content": "Hi Folks, I understood my own mistake I wasn't comparing the last element with the first element so that it forms a circular sentence. Here is my updated code :\n `class Solution(object):\n    def isCircularSentence(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        word_list = sentence.split()\n        if len(word_list) > 1:\n            for index in range(len(word_list)):\n                if word_list[index%len(word_list)][-1] ==  word_list[(index+1)%len(word_list)][0]:                \n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif word_list[0][0] == word_list[0][-1]:\n            return True\n        else:\n            return False`\n            "
                    },
                    {
                        "username": "Abdukhalil-zoda",
                        "content": "\"IuTiUtGGsNydmacGduehPPGksKQyT TmOraUbCcQdnZUCpGCYtGp p pG GCcRvZDRawqGKOiBSLwjIDOjdhnHiisfddYoeHqxOqkUvOEyI\"\\nwhy this test gives true anybody can explain it"
                    },
                    {
                        "username": "vikash46719",
                        "content": "The first and last character of the given string is the same and also last character of first word is same as first character of next word and so on.\\ni.e., \\nFirst character of string is \\'l\\'\\nLast character of string is also \\'l\\'\\nLast character of first word is \\'T\\' \\nFirst character of second is also \\'T\\'\\nLast character of second word is \\'p\\' \\nFirst character of third is also \\'p\\'\\nand so on......."
                    },
                    {
                        "username": "Kishan_Kumar_Zalavadia",
                        "content": "Best and Easy JAVA solution\\n\\npublic boolean isCircularSentence(String sentence) {\\n        char[] ch = sentence.toCharArray();\\n        for(int i=1;i<ch.length-1;i++){\\n            if(ch[i]==\\' \\'){\\n                if(ch[i-1]!=ch[i+1])\\n                    return false;\\n            }\\n        }\\n        if(ch[0]!=ch[ch.length-1])\\n            return false;\\n        return true;\\n    } "
                    },
                    {
                        "username": "belinskyi",
                        "content": "Please, use `Solutions` section to post your answer, not `Discussion`"
                    }
                ]
            }
        ]
    }
]