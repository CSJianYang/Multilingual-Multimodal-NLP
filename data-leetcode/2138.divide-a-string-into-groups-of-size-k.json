[
    {
        "title": "Divide a String Into Groups of Size k",
        "question_content": "A string s can be partitioned into groups of size k using the following procedure:\n\n\tThe first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. Each character can be a part of exactly one group.\n\tFor the last group, if the string does not have k characters remaining, a character fill is used to complete the group.\n\nNote that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s.\nGiven the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.\n&nbsp;\nExample 1:\n\nInput: s = \"abcdefghi\", k = 3, fill = \"x\"\nOutput: [\"abc\",\"def\",\"ghi\"]\nExplanation:\nThe first 3 characters \"abc\" form the first group.\nThe next 3 characters \"def\" form the second group.\nThe last 3 characters \"ghi\" form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are \"abc\", \"def\", and \"ghi\".\n\nExample 2:\n\nInput: s = \"abcdefghij\", k = 3, fill = \"x\"\nOutput: [\"abc\",\"def\",\"ghi\",\"jxx\"]\nExplanation:\nSimilar to the previous example, we are forming the first three groups \"abc\", \"def\", and \"ghi\".\nFor the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.\nThus, the 4 groups formed are \"abc\", \"def\", \"ghi\", and \"jxx\".\n\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 100\n\ts consists of lowercase English letters only.\n\t1 <= k <= 100\n\tfill is a lowercase English letter.",
        "solutions": [
            {
                "id": 1693253,
                "title": "division-and-modulo",
                "content": "We pre-initialize the result with filled `k`-size strings.\\n\\nThen, we place `i`-th character into res`[i / k][i % k]`.\\n\\n**C++**\\n```cpp\\nvector<string> divideString(string s, int k, char fill) {\\n    vector<string> res((s.size() + k - 1) / k, string(k, fill));\\n    for (int i = 0; i < s.size(); ++i)\\n        res[i / k][i % k] = s[i];\\n    return res;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nvector<string> divideString(string s, int k, char fill) {\\n    vector<string> res((s.size() + k - 1) / k, string(k, fill));\\n    for (int i = 0; i < s.size(); ++i)\\n        res[i / k][i % k] = s[i];\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1693310,
                "title": "java-2ms-0-n",
                "content": "* \\tfirst append the fill at the end of str based on the length of str\\n* \\tdivide into k length\\n\\t\\n\\t    public String[] divideString(String str, int k, char fill) {\\n\\t        \\n\\t    \\t// return if k and str are same\\n\\t    \\tif (str.length() == k)\\n\\t\\t\\t\\treturn new String[] { str };\\n\\n\\t\\t\\tint index = 0;\\n\\t\\t\\tint stringLength = str.length();\\n\\t\\t\\tStringBuilder sb = new StringBuilder(str);\\n\\t\\t\\t\\n\\t\\t\\t// find size of array creation\\n\\t\\t\\tString[] strArr = (stringLength % k == 0) ? new String[stringLength / k] : new String[(stringLength / k) + 1];\\n\\n\\t\\t\\t//append fill after str \\n\\t\\t\\tif (stringLength % k != 0) {\\n\\t\\t\\t\\tfor (int i = 0; i < k - (stringLength % k); i++) {\\n\\t\\t\\t\\t\\tsb.append(fill);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t//divide into k\\n\\t\\t\\tfor (int i = 0; i < sb.length(); i += k) {\\t\\t\\t\\n\\t\\t\\t\\tstrArr[index] = (sb.substring(i, i + k));\\n\\t\\t\\t\\t++index;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn strArr;\\n\\t",
                "solutionTags": [
                    "Java"
                ],
                "code": "* \\tfirst append the fill at the end of str based on the length of str\\n* \\tdivide into k length\\n\\t\\n\\t    public String[] divideString(String str, int k, char fill) {\\n\\t        \\n\\t    \\t// return if k and str are same\\n\\t    \\tif (str.length() == k)\\n\\t\\t\\t\\treturn new String[] { str };\\n\\n\\t\\t\\tint index = 0;\\n\\t\\t\\tint stringLength = str.length();\\n\\t\\t\\tStringBuilder sb = new StringBuilder(str);\\n\\t\\t\\t\\n\\t\\t\\t// find size of array creation\\n\\t\\t\\tString[] strArr = (stringLength % k == 0) ? new String[stringLength / k] : new String[(stringLength / k) + 1];\\n\\n\\t\\t\\t//append fill after str \\n\\t\\t\\tif (stringLength % k != 0) {\\n\\t\\t\\t\\tfor (int i = 0; i < k - (stringLength % k); i++) {\\n\\t\\t\\t\\t\\tsb.append(fill);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t//divide into k\\n\\t\\t\\tfor (int i = 0; i < sb.length(); i += k) {\\t\\t\\t\\n\\t\\t\\t\\tstrArr[index] = (sb.substring(i, i + k));\\n\\t\\t\\t\\t++index;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn strArr;\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 1693143,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> v;\\n        for(int i=0;i<s.size();i=i+k)\\n        {\\n            string t=s.substr(i,k); // make substring of size atmost k\\n           \\n            if(t.size()==k)  // if size if k then push\\n            {\\n                v.push_back(t);\\n                continue;\\n            }\\n\\t\\t\\t\\n            int l=t.size();  // if it is the last group and size if less than k\\n            for(int j=0;j<(k-l);j++)  // add fill char to t to make size k\\n                t+=fill;\\n\\t\\t\\t\\t\\n            v.push_back(t);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> v;\\n        for(int i=0;i<s.size();i=i+k)\\n        {\\n            string t=s.substr(i,k); // make substring of size atmost k\\n           \\n            if(t.size()==k)  // if size if k then push\\n            {\\n                v.push_back(t);\\n                continue;\\n            }\\n\\t\\t\\t\\n            int l=t.size();  // if it is the last group and size if less than k\\n            for(int j=0;j<(k-l);j++)  // add fill char to t to make size k\\n                t+=fill;\\n\\t\\t\\t\\t\\n            v.push_back(t);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1701196,
                "title": "easy-python-solution",
                "content": "```\\ndef divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        l=[]\\n        if len(s)%k!=0:\\n            s+=fill*(k-len(s)%k)\\n        for i in range(0,len(s),k):\\n            l.append(s[i:i+k])\\n        return l\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        l=[]\\n        if len(s)%k!=0:\\n            s+=fill*(k-len(s)%k)\\n        for i in range(0,len(s),k):\\n            l.append(s[i:i+k])\\n        return l\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1693500,
                "title": "java-solution-with-out-string-builder",
                "content": "/* class Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int len = 0;\\n        while (s.length() % k != 0){\\n            s += fill;\\n        } \\n        String[] res = new String[s.length()/k];\\n        int i = 0;\\n        int index = 0;\\n \\n        while (i < s.length()){\\n            String subStr = s.substring(i, i + k);\\n            res[index++] = subStr;\\n            i = i + k;\\n        }\\n        return res;\\n    }\\n} */",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int len = 0;\\n        while (s.length() % k != 0){\\n            s += fill;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1758438,
                "title": "java-easy-efficient-with-explanation",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int rem = 0;\\n        if( s.length() % k != 0){\\n             rem = k - s.length() % k; //counting the total positions where we have to fill the char \"fill\".\\n        }\\n        for(int i = 0; i < rem; i++){\\n            s = s+fill; //appending the char to the String\\n        }\\n        \\n        String[] strs = new String[s.length()/k];  //the length will be String length / K because we are making pair of k length Strings.\\n        int index = 0;  //index for array.\\n        for(int i = 0; i < s.length(); i+=k){\\n            strs[index] = s.substring(i, i+k); //substing of  current element to Kth element. \\n            index++;\\n        }\\n        return strs;\\n    }\\n}\\n```\\nPlease **UPVOTE** if you find this solution helpful.\\nHappy Coding : )",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int rem = 0;\\n        if( s.length() % k != 0){\\n             rem = k - s.length() % k; //counting the total positions where we have to fill the char \"fill\".\\n        }\\n        for(int i = 0; i < rem; i++){\\n            s = s+fill; //appending the char to the String\\n        }\\n        \\n        String[] strs = new String[s.length()/k];  //the length will be String length / K because we are making pair of k length Strings.\\n        int index = 0;  //index for array.\\n        for(int i = 0; i < s.length(); i+=k){\\n            strs[index] = s.substring(i, i+k); //substing of  current element to Kth element. \\n            index++;\\n        }\\n        return strs;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1712532,
                "title": "python-simple-solution-85-faster-o-n-time-99-space-efficient",
                "content": "Understanding:\\nSlice the strings in length of k, append them to a list. Check the length of the last item in the list, if its length is less than k then add the fill letter (length of last item - k) times\\n\\nAlgorithm:\\n- Loop: from index 0 till index less than length of string\\n- Append s[i:i+k] to list\\n- Increment index by k\\n- End loop\\n- If length of last element in list is less than k then\\n- Last element = last element + fill*(k-len(last element))\\n- Return list\\n\\nPython code :\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        l, i, N = [], 0, len(s)\\n        while i<N:\\n            l.append(s[i:i+k])\\n            i += k\\n        last = l[-1]\\n        if(len(last)<k):\\n            l[-1] += fill*(k-len(last))\\n        return l\\n```",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        l, i, N = [], 0, len(s)\\n        while i<N:\\n            l.append(s[i:i+k])\\n            i += k\\n        last = l[-1]\\n        if(len(last)<k):\\n            l[-1] += fill*(k-len(last))\\n        return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1693887,
                "title": "c-javascript-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) \\n    {\\n        int n=s.size();\\n        vector<string>v;\\n        for(int i=0;i<n;i+=k)\\n        {\\n            v.push_back(s.substr(i,k));\\n        }\\n        if(v.back().size()==k)\\n        {\\n            return v;\\n        }\\n        for(int i=v.back().size();i<k;i++)\\n        {\\n            v.back()+=fill;\\n        }\\n        return v;\\n    }\\n};\\n```\\n\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) \\n{\\n  var ans=[];\\n  for(let i=0;i<s.length;i+=k)\\n    {\\n      ans.push(s.substring(i,i+k));\\n    }\\n  let str=ans[ans.length-1];\\n  if(str.length==k)\\n    {\\n      return ans;\\n    }\\n  for(let i=str.length;i<k;i++)\\n    {\\n      ans[ans.length-1]+=fill;\\n    }\\n  return ans;\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) \\n    {\\n        int n=s.size();\\n        vector<string>v;\\n        for(int i=0;i<n;i+=k)\\n        {\\n            v.push_back(s.substr(i,k));\\n        }\\n        if(v.back().size()==k)\\n        {\\n            return v;\\n        }\\n        for(int i=v.back().size();i<k;i++)\\n        {\\n            v.back()+=fill;\\n        }\\n        return v;\\n    }\\n};\\n```\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) \\n{\\n  var ans=[];\\n  for(let i=0;i<s.length;i+=k)\\n    {\\n      ans.push(s.substring(i,i+k));\\n    }\\n  let str=ans[ans.length-1];\\n  if(str.length==k)\\n    {\\n      return ans;\\n    }\\n  for(let i=str.length;i<k;i++)\\n    {\\n      ans[ans.length-1]+=fill;\\n    }\\n  return ans;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1694872,
                "title": "kotlin-pad-and-chunk-one-line-function",
                "content": "```\\nclass Solution {\\n    fun divideString(s: String, k: Int, fill: Char) = s.chunked(k) {it.padEnd(k, fill).toString()}\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun divideString(s: String, k: Int, fill: Char) = s.chunked(k) {it.padEnd(k, fill).toString()}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1693283,
                "title": "python3-one-liner",
                "content": "1. ```s+k*fill``` means that we add ```k``` extra charaters at the end of string ```s```.\\n2. Slice ```[i*k:i*k+k]``` take k characters starting at index ```i*k```\\n3. ```len(s)//k``` is number of completed parts\\n4. We have some leftover in the string ```s``` when ```0<len(s)%k```\\n5. We put all steps in one list comprehension.\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return [(s+k*fill)[i*k:i*k+k] for i in range(len(s)//k+(0<len(s)%k))]\\n```\\n\\nShorter version (thanks @cc189):\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return [(s+k*fill)[i:i+k] for i in range(0,len(s),k)]\\n```",
                "solutionTags": [],
                "code": "```s+k*fill```\n```k```\n```s```\n```[i*k:i*k+k]```\n```i*k```\n```len(s)//k```\n```s```\n```0<len(s)%k```\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return [(s+k*fill)[i*k:i*k+k] for i in range(len(s)//k+(0<len(s)%k))]\\n```\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return [(s+k*fill)[i:i+k] for i in range(0,len(s),k)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1692914,
                "title": "python3-simulation",
                "content": "Please check out this [commit](https://github.com/gaosanyong/leetcode/commit/210499523d9965e2d9dd5e1a6fbf67931233e41b) for solutions of weekly 276. \\n\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        ans = []\\n        for i in range(0, len(s), k): \\n            ss = s[i:i+k]\\n            ans.append(ss + (k-len(ss))*fill)\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        ans = []\\n        for i in range(0, len(s), k): \\n            ss = s[i:i+k]\\n            ans.append(ss + (k-len(ss))*fill)\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1703691,
                "title": "c-easy-to-understand-basic",
                "content": "```\\nvector<string> divideString(string s, int k, char fill) {\\n        int n = s.length();\\n        if(n%k != 0){\\n            while(n%k != 0){\\n                s += fill;\\n                n++;\\n            }\\n        }\\n        vector<string> res;\\n        for(int i = 0 ; i < n ; i+=k){\\n            res.push_back(s.substr(i,k));\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nvector<string> divideString(string s, int k, char fill) {\\n        int n = s.length();\\n        if(n%k != 0){\\n            while(n%k != 0){\\n                s += fill;\\n                n++;\\n            }\\n        }\\n        vector<string> res;\\n        for(int i = 0 ; i < n ; i+=k){\\n            res.push_back(s.substr(i,k));\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1693045,
                "title": "c-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n = s.size();\\n        int j=0,i=0;\\n        vector<string> result;\\n        string res = \"\";\\n        while(j<n){\\n            res += s[j];\\n            if(res.size() == k){\\n                result.push_back(res);\\n                res = \"\";\\n            }\\n            j++;\\n        }\\n        \\n        if(res != \"\"){\\n            while(res.size() < k){\\n                res += fill;\\n            }\\n            result.push_back(res);\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n = s.size();\\n        int j=0,i=0;\\n        vector<string> result;\\n        string res = \"\";\\n        while(j<n){\\n            res += s[j];\\n            if(res.size() == k){\\n                result.push_back(res);\\n                res = \"\";\\n            }\\n            j++;\\n        }\\n        \\n        if(res != \"\"){\\n            while(res.size() < k){\\n                res += fill;\\n            }\\n            result.push_back(res);\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3070031,
                "title": "python-one-liner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return [s[i:i+k] + fill * (k-len(s[i:i+k])) for i in range(0, len(s), k)]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return [s[i:i+k] + fill * (k-len(s[i:i+k])) for i in range(0, len(s), k)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2855056,
                "title": "python-comments-clean",
                "content": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        while len(s)%k != 0:\\n            s += fill\\n        # checking until the string is dividable into k groups\\n        # if not, it will add the filler until it is\\n        \\n        c = []\\n        for x in range(0, len(s), k): # starts at 0, goes to len(s), iteration value is k\\n            c.append(s[x:x+k]) # appends everything from x->x+k (iteration value)\\n\\n        return c # return final list\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        while len(s)%k != 0:\\n            s += fill\\n        # checking until the string is dividable into k groups\\n        # if not, it will add the filler until it is\\n        \\n        c = []\\n        for x in range(0, len(s), k): # starts at 0, goes to len(s), iteration value is k\\n            c.append(s[x:x+k]) # appends everything from x->x+k (iteration value)\\n\\n        return c # return final list\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2753411,
                "title": "easy-c-solution-logic-building",
                "content": "**Upvote if it helps you**\\n\\n```\\n\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> v;\\n     \\n        int i=0;\\n        while(i<s.length()){\\n            int j=i+k-1;\\n            if(j>=s.length()) break;\\n            string str=\"\";\\n            while(i<=j){\\n                str = str+s[i];\\n                i++;\\n            }\\n            v.push_back(str);\\n            \\n        }\\n         cout<<i;\\n        if(i!=s.length()){\\n            string str=\"\";\\n            while(i<s.length()){\\n                str= str+s[i];\\n                i++;\\n            }\\n            while(str.length()!=k){\\n                str = str+fill;\\n            }\\n            v.push_back(str);\\n        }\\n        \\n        return v;\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> v;\\n     \\n        int i=0;\\n        while(i<s.length()){\\n            int j=i+k-1;\\n            if(j>=s.length()) break;\\n            string str=\"\";\\n            while(i<=j){\\n                str = str+s[i];\\n                i++;\\n            }\\n            v.push_back(str);\\n            \\n        }\\n         cout<<i;\\n        if(i!=s.length()){\\n            string str=\"\";\\n            while(i<s.length()){\\n                str= str+s[i];\\n                i++;\\n            }\\n            while(str.length()!=k){\\n                str = str+fill;\\n            }\\n            v.push_back(str);\\n        }\\n        \\n        return v;\\n    }\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1693171,
                "title": "string-manipulation-with-a-touch-of-brute-force",
                "content": "We simply first append until we can form groups of k strings without getting out of bounds.\\nThen two cases can rise -:\\n1. (len(string)-1)%k==0 implying we do not need to use fill string\\n2. If that is not the case we use fill string to complete the required group of string.\\n\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n\\t\\t\\n\\t\\tans = []\\n        n = len(s)\\n        end = 0\\n        while end<len(s):\\n                        \\n            if end+k<=len(s): \\n                ans.append(s[end:end+k])\\n            else:\\n                res  = s[end:]   # remaining string \\n                left = (end+k)-n # Number of places left\\n                to_add = fill*left # Use that many fill characters\\n                c = res+to_add # Append it to the remainign string\\n                ans.append(c)   \\n                break\\n                \\n            \\n            end = end+k\\n        return ans\\n```\\n\\nQuestions like this require you to know the operations your strings can perform in your own language \\nAlthough there is not much logic it\\'s more about how familiar are you with your own language !\\nThanks for reading !",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n\\t\\t\\n\\t\\tans = []\\n        n = len(s)\\n        end = 0\\n        while end<len(s):\\n                        \\n            if end+k<=len(s): \\n                ans.append(s[end:end+k])\\n            else:\\n                res  = s[end:]   # remaining string \\n                left = (end+k)-n # Number of places left\\n                to_add = fill*left # Use that many fill characters\\n                c = res+to_add # Append it to the remainign string\\n                ans.append(c)   \\n                break\\n                \\n            \\n            end = end+k\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1693038,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n          int n = s.length();\\n        int t = (int) Math.ceil(n * 1.0 / k);\\n        String[] res = new String[t];\\n        int j = 0;\\n        for (int i = 0; i < n; i += k) {\\n            if (i + k >= n) {\\n                res[j++] = s.substring(i, n);\\n                break;\\n            }\\n            res[j++] = s.substring(i, i + k);\\n        }\\n        while (res[t - 1].length() < k) {\\n            res[t - 1] += fill;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n          int n = s.length();\\n        int t = (int) Math.ceil(n * 1.0 / k);\\n        String[] res = new String[t];\\n        int j = 0;\\n        for (int i = 0; i < n; i += k) {\\n            if (i + k >= n) {\\n                res[j++] = s.substring(i, n);\\n                break;\\n            }\\n            res[j++] = s.substring(i, i + k);\\n        }\\n        while (res[t - 1].length() < k) {\\n            res[t - 1] += fill;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3634060,
                "title": "c-super-easy-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n = s.size();\\n        vector<string> ans;\\n        string temp = \"\";\\n        for(int i=0; i<n; i++){\\n            temp.push_back(s[i]);\\n            if(temp.size() == k){\\n                ans.push_back(temp);\\n                temp = \"\";\\n            }\\n        }\\n        if(temp.size() == 0) return ans;\\n        while(temp.size() != k){\\n            temp.push_back(fill);\\n        }\\n        ans.push_back(temp);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n = s.size();\\n        vector<string> ans;\\n        string temp = \"\";\\n        for(int i=0; i<n; i++){\\n            temp.push_back(s[i]);\\n            if(temp.size() == k){\\n                ans.push_back(temp);\\n                temp = \"\";\\n            }\\n        }\\n        if(temp.size() == 0) return ans;\\n        while(temp.size() != k){\\n            temp.push_back(fill);\\n        }\\n        ans.push_back(temp);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2843543,
                "title": "python-simple-with-comments",
                "content": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        while len(s)%k != 0:\\n            s += fill\\n        # checking until the string is dividable into k groups\\n        # if not, it will add the filler until it is\\n        \\n        c = []\\n        for x in range(0, len(s), k): # starts at 0, goes to len(s), iteration value is k\\n            c.append(s[x:x+k]) # appends everything from x->x+k (iteration value)\\n\\n        return c # return final list\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        while len(s)%k != 0:\\n            s += fill\\n        # checking until the string is dividable into k groups\\n        # if not, it will add the filler until it is\\n        \\n        c = []\\n        for x in range(0, len(s), k): # starts at 0, goes to len(s), iteration value is k\\n            c.append(s[x:x+k]) # appends everything from x->x+k (iteration value)\\n\\n        return c # return final list\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2795599,
                "title": "java-solution-in-just-2-ms",
                "content": "# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        //the size of result array\\n        String[] r = new String[(int) Math.ceil((s.length() * 1.0) / k)];\\n        int idx;\\n        //if the last one needs to be filled, then I do it\\n        if (s.length() % k != 0) {\\n            idx = s.length() - (s.length() % k);\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(s.substring(idx));\\n            for (int i = sb.length(); i < k; i++) {\\n                sb.append(fill);\\n            }\\n            r[r.length - 1] = sb.toString();\\n        } else {\\n            //no need to fill the last, \\n            //that\\'s why idx is equal to s length\\n            idx = s.length();\\n        }\\n        for (int i = 0; i < idx; i+=k) {\\n            r[i / k] = s.substring(i, i + k);\\n        }\\n        \\n        return r;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        //the size of result array\\n        String[] r = new String[(int) Math.ceil((s.length() * 1.0) / k)];\\n        int idx;\\n        //if the last one needs to be filled, then I do it\\n        if (s.length() % k != 0) {\\n            idx = s.length() - (s.length() % k);\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(s.substring(idx));\\n            for (int i = sb.length(); i < k; i++) {\\n                sb.append(fill);\\n            }\\n            r[r.length - 1] = sb.toString();\\n        } else {\\n            //no need to fill the last, \\n            //that\\'s why idx is equal to s length\\n            idx = s.length();\\n        }\\n        for (int i = 0; i < idx; i+=k) {\\n            r[i / k] = s.substring(i, i + k);\\n        }\\n        \\n        return r;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2682704,
                "title": "cpp-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n;\\n        if(s.length()%k==0)\\n        {\\n            n=(s.length())/k;\\n        }\\n        else if(s.length()%k!=0)\\n        {\\n            n=(s.length()/k)+1;\\n        }\\n        string temp;\\n        for(int i=0;i<n*k;i++)\\n        {\\n            if(i>=s.length())\\n            {\\n                temp.push_back(fill);\\n            }\\n            else \\n            {\\n                temp.push_back(s[i]);\\n            }\\n        }\\n        vector<string>ans;\\n        int idx=0;\\n        while(idx<temp.length())\\n        {\\n            string a=\"\";\\n            int counter=0;\\n            while(idx<temp.length() and counter<k)\\n            {\\n                a.push_back(temp[idx]);\\n                counter++;\\n                idx++;\\n            }\\n            ans.push_back(a);\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n;\\n        if(s.length()%k==0)\\n        {\\n            n=(s.length())/k;\\n        }\\n        else if(s.length()%k!=0)\\n        {\\n            n=(s.length()/k)+1;\\n        }\\n        string temp;\\n        for(int i=0;i<n*k;i++)\\n        {\\n            if(i>=s.length())\\n            {\\n                temp.push_back(fill);\\n            }\\n            else \\n            {\\n                temp.push_back(s[i]);\\n            }\\n        }\\n        vector<string>ans;\\n        int idx=0;\\n        while(idx<temp.length())\\n        {\\n            string a=\"\";\\n            int counter=0;\\n            while(idx<temp.length() and counter<k)\\n            {\\n                a.push_back(temp[idx]);\\n                counter++;\\n                idx++;\\n            }\\n            ans.push_back(a);\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2682698,
                "title": "cpp-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n     \\n        while((s.length() % k)!=0)\\n        {\\n            s.push_back(fill);\\n        }     \\n        vector<string>ans;  \\n        int idx=0;\\n        \\n        while(idx<s.length())\\n        {\\n            int counter=0;\\n            string str=\"\";\\n            \\n            while(idx<s.length() and counter<k)\\n            {\\n                str.push_back(s[idx]);\\n                idx++;\\n                counter++;\\n            }\\n            ans.push_back(str);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n     \\n        while((s.length() % k)!=0)\\n        {\\n            s.push_back(fill);\\n        }     \\n        vector<string>ans;  \\n        int idx=0;\\n        \\n        while(idx<s.length())\\n        {\\n            int counter=0;\\n            string str=\"\";\\n            \\n            while(idx<s.length() and counter<k)\\n            {\\n                str.push_back(s[idx]);\\n                idx++;\\n                counter++;\\n            }\\n            ans.push_back(str);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2624714,
                "title": "java-o-n-clean-code",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        ArrayList<String> list = new ArrayList<>();\\n        StringBuilder sb = new StringBuilder();\\n        for (char ch : s.toCharArray()) {\\n            sb.append(ch);\\n            if (sb.length() == k) {\\n                list.add(sb.toString());\\n                sb.setLength(0);\\n            }\\n        }\\n        if (sb.length() > 0) {\\n           int count = k - sb.length();\\n            for (int i = 0; i < count; i++) {\\n                sb.append(fill);\\n            }\\n            list.add(sb.toString());\\n        }\\n        return list.toArray(new String[list.size()]);\\n    }\\n}\\n```\\n\\nA little bit of refinement\\n\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int chunks = s.length() % k != 0? (s.length() / k) + 1 : s.length() / k;\\n        String[] res = new String[chunks];\\n        StringBuilder sb = new StringBuilder(s);\\n        if (s.length() % k > 0) {\\n            for (int i = 0; i < k - (s.length() % k); i++) {\\n                sb.append(fill);\\n            }\\n        }\\n        s = sb.toString();\\n        sb.setLength(0);\\n        int i = 0;\\n        for (char ch : s.toCharArray()) {\\n            sb.append(ch);\\n            if (sb.length() == k) {\\n                res[i++] = sb.toString();\\n                sb.setLength(0);\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        ArrayList<String> list = new ArrayList<>();\\n        StringBuilder sb = new StringBuilder();\\n        for (char ch : s.toCharArray()) {\\n            sb.append(ch);\\n            if (sb.length() == k) {\\n                list.add(sb.toString());\\n                sb.setLength(0);\\n            }\\n        }\\n        if (sb.length() > 0) {\\n           int count = k - sb.length();\\n            for (int i = 0; i < count; i++) {\\n                sb.append(fill);\\n            }\\n            list.add(sb.toString());\\n        }\\n        return list.toArray(new String[list.size()]);\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int chunks = s.length() % k != 0? (s.length() / k) + 1 : s.length() / k;\\n        String[] res = new String[chunks];\\n        StringBuilder sb = new StringBuilder(s);\\n        if (s.length() % k > 0) {\\n            for (int i = 0; i < k - (s.length() % k); i++) {\\n                sb.append(fill);\\n            }\\n        }\\n        s = sb.toString();\\n        sb.setLength(0);\\n        int i = 0;\\n        for (char ch : s.toCharArray()) {\\n            sb.append(ch);\\n            if (sb.length() == k) {\\n                res[i++] = sb.toString();\\n                sb.setLength(0);\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2563402,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int len=s.length(),size=0,rem=0;\\n        if(len%k==0){\\n            size=len/k;\\n        }else{\\n            rem=k-(len%k);\\n            size=len/k +1;\\n        }\\n        for(int i=0;i<rem;i++){\\n            s+=fill;\\n        }\\n        int start=0,end=k;\\n        String[] ans=new String[size];\\n        for(int i=0;i<size;i++){\\n            String temp=s.substring(start,end);\\n            ans[i]=temp;\\n            start=end;\\n            end+=k;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int len=s.length(),size=0,rem=0;\\n        if(len%k==0){\\n            size=len/k;\\n        }else{\\n            rem=k-(len%k);\\n            size=len/k +1;\\n        }\\n        for(int i=0;i<rem;i++){\\n            s+=fill;\\n        }\\n        int start=0,end=k;\\n        String[] ans=new String[size];\\n        for(int i=0;i<size;i++){\\n            String temp=s.substring(start,end);\\n            ans[i]=temp;\\n            start=end;\\n            end+=k;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1789360,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int i=0;\\n        vector<string>ans;\\n        while(i<s.length()) {\\n            string tmp=\"\";\\n            while(tmp.length()<k && i<s.length()) {\\n                tmp.push_back(s[i++]);\\n            }\\n            if(tmp.length()!=k) {\\n                while(tmp.length()<k) {\\n                    tmp.push_back(fill);\\n                }\\n            }\\n            ans.push_back(tmp);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n***Please upvote if you have got any help from my code. Thank you.***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int i=0;\\n        vector<string>ans;\\n        while(i<s.length()) {\\n            string tmp=\"\";\\n            while(tmp.length()<k && i<s.length()) {\\n                tmp.push_back(s[i++]);\\n            }\\n            if(tmp.length()!=k) {\\n                while(tmp.length()<k) {\\n                    tmp.push_back(fill);\\n                }\\n            }\\n            ans.push_back(tmp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1786482,
                "title": "simple-c-solution-100-faster",
                "content": "class Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        string t;\\n        vector<string>res;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            t+=s[i];\\n            if(t.size()==k)\\n            {\\n                res.push_back(t);\\n                t=\"\";\\n            }\\n        }\\n        if(t.size()!=0)\\n        {\\n            while(t.size()!=k)\\n                t+=fill;\\n            res.push_back(t);\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        string t;\\n        vector<string>res;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            t+=s[i];\\n            if(t.size()==k)\\n            {\\n                res.push_back(t);\\n                t=\"\";\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1762585,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        if (len(s)%k!=0):\\n            s+=(fill*(k-len(s)%k))\\n        return [s[i:i+k] for i in range(0,len(s)-k+1,k)]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        if (len(s)%k!=0):\\n            s+=(fill*(k-len(s)%k))\\n        return [s[i:i+k] for i in range(0,len(s)-k+1,k)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1740778,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int i = 0, j = 0, len = s.length();\\n        \\n        int groupCount = len % k == 0 ? len / k : len / k + 1;\\n        var result = new String[groupCount];\\n        \\n        while (i + k < len) {\\n            result[j++] = s.substring(i, i + k);\\n            i += k;\\n        }\\n        var last = s.substring(i);\\n        last += String.valueOf(fill).repeat(i + k - len);\\n        result[j] = last;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int i = 0, j = 0, len = s.length();\\n        \\n        int groupCount = len % k == 0 ? len / k : len / k + 1;\\n        var result = new String[groupCount];\\n        \\n        while (i + k < len) {\\n            result[j++] = s.substring(i, i + k);\\n            i += k;\\n        }\\n        var last = s.substring(i);\\n        last += String.valueOf(fill).repeat(i + k - len);\\n        result[j] = last;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1719159,
                "title": "0-ms-faster-than-100-00-c-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        string str=\"\";\\n        for(int i=0;i<s.size();i++){\\n            str+=s[i];\\n            if((i+1)%k==0){\\n                ans.push_back(str);\\n                str.erase();\\n            }\\n            \\n        }\\n        if(str.size()>0){\\n            while(str.size()!=k){\\n                str+=fill;\\n            }\\n            ans.push_back(str);\\n        }\\n        \\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        string str=\"\";\\n        for(int i=0;i<s.size();i++){\\n            str+=s[i];\\n            if((i+1)%k==0){\\n                ans.push_back(str);\\n                str.erase();\\n            }\\n            \\n        }\\n        if(str.size()>0){\\n            while(str.size()!=k){\\n                str+=fill;\\n            }\\n            ans.push_back(str);\\n        }\\n        \\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1710751,
                "title": "java-7-lines-1ms-99-faster",
                "content": "- First we get the total length of what the string is supposed to be after filling.\\n- Then we create a stringbuilder appending those missing letters\\n- We replace `s` with the stringbuilder string\\n- Finally, we copy each length `k` substring into `ans` array\\n```Java\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int n = s.length(), m = n % k, len = n + (m == 0? 0: k - m);\\n        StringBuilder sb = new StringBuilder(s);\\n        for (int i = 0; i < len - n; i++) sb.append(fill);\\n        s = sb.toString();\\n\\n        String[] ans = new String[len / k];\\n        for (int i = 0; i < len; i+=k)\\n            ans[i/k] = s.substring(i, i + k);\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```Java\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int n = s.length(), m = n % k, len = n + (m == 0? 0: k - m);\\n        StringBuilder sb = new StringBuilder(s);\\n        for (int i = 0; i < len - n; i++) sb.append(fill);\\n        s = sb.toString();\\n\\n        String[] ans = new String[len / k];\\n        for (int i = 0; i < len; i+=k)\\n            ans[i/k] = s.substring(i, i + k);\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1696553,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn divide_string(mut s: String, k: i32, fill: char) -> Vec<String> {\\n        let l = s.len();\\n        let ku = k as usize;\\n        let rem = l % ku;\\n        let parts = l / ku + (rem > 0) as usize;\\n        let mut res = Vec::with_capacity(parts);\\n\\n        (0..ku - rem).for_each(|_| s.push(fill));\\n        for i in 0..parts {\\n            res.push(s[i * ku..(i + 1) * ku].to_string());\\n        }\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn divide_string(mut s: String, k: i32, fill: char) -> Vec<String> {\\n        let l = s.len();\\n        let ku = k as usize;\\n        let rem = l % ku;\\n        let parts = l / ku + (rem > 0) as usize;\\n        let mut res = Vec::with_capacity(parts);\\n\\n        (0..ku - rem).for_each(|_| s.push(fill));\\n        for i in 0..parts {\\n            res.push(s[i * ku..(i + 1) * ku].to_string());\\n        }\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1694807,
                "title": "python-o-n-solution",
                "content": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        length = len(s)\\n        res=[]\\n        for i in range(0,length,k):\\n            if i+k>length:\\n                break\\n            res.append(s[i:i+k])\\n        mod =length%k \\n        \\n        if mod!= 0:\\n            fill_str = fill *(k-mod)\\n            add_str = s[i:]+fill_str\\n            res.append(add_str)\\n            \\n        return res    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        length = len(s)\\n        res=[]\\n        for i in range(0,length,k):\\n            if i+k>length:\\n                break\\n            res.append(s[i:i+k])\\n        mod =length%k \\n        \\n        if mod!= 0:\\n            fill_str = fill *(k-mod)\\n            add_str = s[i:]+fill_str\\n            res.append(add_str)\\n            \\n        return res    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1694286,
                "title": "python-simple-solution-for-beginners-runtime-23ms-faster-100-memory-66-67",
                "content": "\\tclass Solution:\\n\\t\\tdef divideString(self, s: str, k: int, fill: str) -> List[str]:\\n\\t\\t\\tlst = []\\n\\t\\t\\tn = len(s)\\n\\t\\t\\tfor i in range(0, n, k):\\n\\t\\t\\t\\tlst.append(s[i:i+k])\\n\\n\\t\\t\\tlast_len = len(lst[-1])\\n\\t\\t\\tif last_len != k:                         # check length of the last element in the list\\n\\t\\t\\t\\tlast_str = lst[-1]\\n\\t\\t\\t\\tfor i in range(last_len, k):\\n\\t\\t\\t\\t\\tlast_str += fill\\n\\t\\t\\t\\tlst[-1] = last_str\\n\\t\\t\\treturn lst",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef divideString(self, s: str, k: int, fill: str) -> List[str]:\\n\\t\\t\\tlst = []\\n\\t\\t\\tn = len(s)\\n\\t\\t\\tfor i in range(0, n, k):\\n\\t\\t\\t\\tlst.append(s[i:i+k])\\n\\n\\t\\t\\tlast_len = len(lst[-1])\\n\\t\\t\\tif last_len != k:                         # check length of the last element in the list\\n\\t\\t\\t\\tlast_str = lst[-1]\\n\\t\\t\\t\\tfor i in range(last_len, k):\\n\\t\\t\\t\\t\\tlast_str += fill\\n\\t\\t\\t\\tlst[-1] = last_str\\n\\t\\t\\treturn lst",
                "codeTag": "Java"
            },
            {
                "id": 1693803,
                "title": "javascipt-intutive-solution",
                "content": "**If you find this solution Useful please upvote**\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n    let result = [];\\n    let remainLetter = s.length % k;\\n    if(remainLetter !== 0){\\n        s += fill.repeat(k-remainLetter);\\n    }\\n    \\n    let i=0;\\n    while(i<s.length){\\n        result.push(s.substring(i, i+k));\\n        i+=k\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n    let result = [];\\n    let remainLetter = s.length % k;\\n    if(remainLetter !== 0){\\n        s += fill.repeat(k-remainLetter);\\n    }\\n    \\n    let i=0;\\n    while(i<s.length){\\n        result.push(s.substring(i, i+k));\\n        i+=k\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1693562,
                "title": "c-basic-approach-easy-to-understand",
                "content": "```\\nvector<string> divideString(string s, int k, char fill) {\\n        vector<string>ans;\\n        bool flag=false;\\n        int i;\\n        for( i=0;i<s.length();i+=k){\\n            if(i+k-1<s.length()){\\n                ans.push_back(s.substr(i,k));\\n            }else{\\n                flag=true;\\n                break;\\n            }\\n        }\\n        string temp;\\n        if(flag){\\n             temp=s.substr(i,k);\\n            int res=k-temp.length();\\n            while(res){\\n                temp+=fill;\\n                res--;\\n            }\\n             ans.push_back(temp);\\n        }\\n        return ans;\\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nvector<string> divideString(string s, int k, char fill) {\\n        vector<string>ans;\\n        bool flag=false;\\n        int i;\\n        for( i=0;i<s.length();i+=k){\\n            if(i+k-1<s.length()){\\n                ans.push_back(s.substr(i,k));\\n            }else{\\n                flag=true;\\n                break;\\n            }\\n        }\\n        string temp;\\n        if(flag){\\n             temp=s.substr(i,k);\\n            int res=k-temp.length();\\n            while(res){\\n                temp+=fill;\\n                res--;\\n            }\\n             ans.push_back(temp);\\n        }\\n        return ans;\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1693476,
                "title": "java-o-n-100-faster",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int n=s.length();\\n        int toFill= n%k==0?0:(k-n%k);\\n        StringBuilder sb = new StringBuilder(s);\\n        \\n        while(toFill-->0){\\n            sb.append(fill);\\n        }\\n        String[] ans=new String[sb.length()/k];\\n        \\n        \\n        for(int i=0;i<ans.length;i++){\\n            ans[i]=sb.substring(k*i,k*i+k);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int n=s.length();\\n        int toFill= n%k==0?0:(k-n%k);\\n        StringBuilder sb = new StringBuilder(s);\\n        \\n        while(toFill-->0){\\n            sb.append(fill);\\n        }\\n        String[] ans=new String[sb.length()/k];\\n        \\n        \\n        for(int i=0;i<ans.length;i++){\\n            ans[i]=sb.substring(k*i,k*i+k);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1692924,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int length=s.length()/k;\\n        if(s.length()%k!=0) length++;\\n        String[] ans=new String[length];\\n        int i=0;\\n        int idx=0;\\n        while(i<s.length()){\\n            if(i+k>s.length()){\\n                StringBuilder str=new StringBuilder();\\n                str.append(s.substring(i));\\n                while(str.length()<k){\\n                    str.append(fill);\\n                }\\n                ans[idx]=str.toString();\\n                break;\\n            }\\n            ans[idx]=s.substring(i,i+k);\\n            i+=k;\\n            idx++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int length=s.length()/k;\\n        if(s.length()%k!=0) length++;\\n        String[] ans=new String[length];\\n        int i=0;\\n        int idx=0;\\n        while(i<s.length()){\\n            if(i+k>s.length()){\\n                StringBuilder str=new StringBuilder();\\n                str.append(s.substring(i));\\n                while(str.length()<k){\\n                    str.append(fill);\\n                }\\n                ans[idx]=str.toString();\\n                break;\\n            }\\n            ans[idx]=s.substring(i,i+k);\\n            i+=k;\\n            idx++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839426,
                "title": "fast-solution-java-98-beats",
                "content": "# Code\\n```\\nclass Solution{\\n    public String[] divideString(String s, int k, char fill){\\n        List<String> ans = new ArrayList<>();\\n        for(int i=0; i<s.length(); i+=k){\\n            StringBuilder as = new StringBuilder(\"\");\\n            if(i+k<=s.length()) as.append(s.substring(i, i+k));\\n            else as.append(s.substring(i));\\n            if(as.length()!=k){\\n                for(int j=as.length(); j<k; j++) as.append(fill);\\n            }\\n            ans.add(as.toString());\\n        }\\n        int n = ans.size();\\n        String[] arr = new String[n];\\n        for(int i=0; i<n; i++){\\n            arr[i] = ans.get(i);\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution{\\n    public String[] divideString(String s, int k, char fill){\\n        List<String> ans = new ArrayList<>();\\n        for(int i=0; i<s.length(); i+=k){\\n            StringBuilder as = new StringBuilder(\"\");\\n            if(i+k<=s.length()) as.append(s.substring(i, i+k));\\n            else as.append(s.substring(i));\\n            if(as.length()!=k){\\n                for(int j=as.length(); j<k; j++) as.append(fill);\\n            }\\n            ans.add(as.toString());\\n        }\\n        int n = ans.size();\\n        String[] arr = new String[n];\\n        for(int i=0; i<n; i++){\\n            arr[i] = ans.get(i);\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3584368,
                "title": "divide-a-string-into-groups-of-size-k-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int i, j=0;\\n        vector<string> ans;\\n        string temp=\"\";\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            temp += s[i];\\n            j++;\\n            if(j==k)\\n            {\\n                ans.push_back(temp);\\n                temp.clear();\\n                j=0;\\n            }\\n        }\\n        if(temp.length()!=0)\\n        {\\n            for(i=0 ; i<k-j ; i++)\\n            {\\n                temp += fill;\\n            }\\n            ans.push_back(temp);\\n            temp.clear();\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/6b48d103-467f-4924-97ad-51d4b2ca9e8f_1685592112.2697668.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int i, j=0;\\n        vector<string> ans;\\n        string temp=\"\";\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            temp += s[i];\\n            j++;\\n            if(j==k)\\n            {\\n                ans.push_back(temp);\\n                temp.clear();\\n                j=0;\\n            }\\n        }\\n        if(temp.length()!=0)\\n        {\\n            for(i=0 ; i<k-j ; i++)\\n            {\\n                temp += fill;\\n            }\\n            ans.push_back(temp);\\n            temp.clear();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246332,
                "title": "go",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n# Code\\n```\\n\\nfunc divideString(s string, k int, fill byte) []string {\\n\\tresult := make([]string, 0)\\n\\n\\tfor i := 0; i < len(s); i += k {\\n\\t\\tvar subString string\\n\\n\\t\\tif i+k < len(s) {\\n\\t\\t\\tsubString = s[i : i+k]\\n\\t\\t} else {\\n\\t\\t\\tsubString = s[i:]\\n\\t\\t\\tsubString += strings.Repeat(string(fill), k-len(subString))\\n\\t\\t}\\n\\n\\t\\tresult = append(result, subString)\\n\\t}\\n\\n\\treturn result\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n\\nfunc divideString(s string, k int, fill byte) []string {\\n\\tresult := make([]string, 0)\\n\\n\\tfor i := 0; i < len(s); i += k {\\n\\t\\tvar subString string\\n\\n\\t\\tif i+k < len(s) {\\n\\t\\t\\tsubString = s[i : i+k]\\n\\t\\t} else {\\n\\t\\t\\tsubString = s[i:]\\n\\t\\t\\tsubString += strings.Repeat(string(fill), k-len(subString))\\n\\t\\t}\\n\\n\\t\\tresult = append(result, subString)\\n\\t}\\n\\n\\treturn result\\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3229087,
                "title": "c-easy-best-explanation-o-n-time-n-space",
                "content": "# Intuition:\\nThe problem is to divide a given string into groups of size k, such that each group is made up of k characters, and any remaining characters are filled up with a given fill character. To solve this problem, the code first checks if the given string can be divided evenly into k-sized groups. If not, it calculates the number of fill characters needed and adds them to the end of the string. Then, it creates groups of size k by looping over the characters in the string and adding each character to a temporary string until the group size reaches k. The completed group strings are added to a vector, and the loop continues until all characters have been processed.\\n\\n# Approach:\\nThe code takes the following approach to solve the problem:\\n\\nCreate an empty vector to store the divided strings.\\nCheck if the given string can be divided evenly into k-sized groups. If not, calculate the number of fill characters needed and add them to the end of the string.\\nLoop over the characters in the string and create groups of size k by adding each character to a temporary string until the group size reaches k.\\nAdd the completed group strings to the vector.\\nContinue the loop until all characters have been processed.\\nReturn the vector containing all the divided strings.\\n# Time Complexity:\\nThe time complexity of the code is O(n), where n is the length of the input string. This is because the code loops over the characters in the string once to add fill characters (if necessary) and create groups of size k.\\n\\n# Space Complexity:\\nThe space complexity of the code is O(n), where n is the length of the input string. This is because the code creates an empty vector to store the divided strings, and a temporary string to store each group of size k. The size of the vector and the temporary string can be up to n. Additionally, if fill characters are added to the string, the space complexity increases by the number of fill characters added, which can be up to k.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string>v;  // create an empty vector to store the divided strings\\n        if(s.size()%k!=0){  // check if the string cannot be divided evenly into k-sized groups\\n            int next = ceil(float(s.size())/float(k));  // calculate the number of groups needed\\n            int rem = (next*k) - s.size();  // calculate the number of fill characters needed\\n            for(int i =0;i<rem;i++){  // add the fill characters to the end of the string\\n                s+=fill;\\n            }\\n        }\\n        int temp = 0;  // initialize a counter variable to keep track of the group size\\n        string str = \"\";  // initialize an empty string to store each group\\n        for(int i =0;i<s.size();){  // loop over the characters in the string\\n            str = \"\";  // reset the string for each new group\\n            while(temp != k){  // loop until the group size reaches k\\n               str+=s[i];  // add the current character to the group string\\n               i++;  // move to the next character in the string\\n               temp++;  // increment the group size counter\\n           }\\n            v.push_back(str);  // add the completed group string to the vector\\n            temp = 0;  // reset the group size counter for the next group\\n        }\\n        return v;  // return the vector containing all the divided strings\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string>v;  // create an empty vector to store the divided strings\\n        if(s.size()%k!=0){  // check if the string cannot be divided evenly into k-sized groups\\n            int next = ceil(float(s.size())/float(k));  // calculate the number of groups needed\\n            int rem = (next*k) - s.size();  // calculate the number of fill characters needed\\n            for(int i =0;i<rem;i++){  // add the fill characters to the end of the string\\n                s+=fill;\\n            }\\n        }\\n        int temp = 0;  // initialize a counter variable to keep track of the group size\\n        string str = \"\";  // initialize an empty string to store each group\\n        for(int i =0;i<s.size();){  // loop over the characters in the string\\n            str = \"\";  // reset the string for each new group\\n            while(temp != k){  // loop until the group size reaches k\\n               str+=s[i];  // add the current character to the group string\\n               i++;  // move to the next character in the string\\n               temp++;  // increment the group size counter\\n           }\\n            v.push_back(str);  // add the completed group string to the vector\\n            temp = 0;  // reset the group size counter for the next group\\n        }\\n        return v;  // return the vector containing all the divided strings\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2910011,
                "title": "javascript-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$ \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n**69 ms, beats 91%**\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\n var divideString = function(s, k, fill) {\\n    const res = []\\n     let temp = \\'\\'\\n     let len = 0\\n     if(s.length % k === 0){\\n         len = s.length\\n    }else{\\n         len = s.length + k-(s.length%k)\\n     }\\n     for(let i= 0; i<len; i++){\\n         temp += s[i] || fill\\n         if(temp.length === k){\\n             res.push(temp)\\n             temp= \"\"\\n         }\\n     }\\n     return res\\n };\\n```\\n//\\n# Complexity\\n- Time complexity:\\n $$O(n/3)$$ \\n\\n**54 ms, beats 100%**\\n```\\nvar divideString = function(s, k, fill) {\\n    const res = []\\n    s= s.length % k === 0 ? s : s+ fill.repeat(k-(s.length%k))\\n    let a = 0\\n    b = k\\n    for(let i= a; i<s.length; i+= k){\\n        res.push(s.slice(a,b))\\n        a+= k\\n        b+= k\\n    }\\n    return res\\n};\\n```\\n**Plz upvote if it was helpful**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\n var divideString = function(s, k, fill) {\\n    const res = []\\n     let temp = \\'\\'\\n     let len = 0\\n     if(s.length % k === 0){\\n         len = s.length\\n    }else{\\n         len = s.length + k-(s.length%k)\\n     }\\n     for(let i= 0; i<len; i++){\\n         temp += s[i] || fill\\n         if(temp.length === k){\\n             res.push(temp)\\n             temp= \"\"\\n         }\\n     }\\n     return res\\n };\\n```\n```\\nvar divideString = function(s, k, fill) {\\n    const res = []\\n    s= s.length % k === 0 ? s : s+ fill.repeat(k-(s.length%k))\\n    let a = 0\\n    b = k\\n    for(let i= a; i<s.length; i+= k){\\n        res.push(s.slice(a,b))\\n        a+= k\\n        b+= k\\n    }\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2830173,
                "title": "easiest-java-one-loop-simple-decision",
                "content": "## PLEASE UPVOTE IF LIKE \\uD83D\\uDE0A \\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        //First Get the given string length\\n        int n = s.length();\\n        \\n        //Check if string would have its fixed length or not\\n        // fixed length means, there is no requirement to add the \\'fill\\' character\\n        // possibly for last answer arrayString\\n        boolean hasFixed = (n%k==0);\\n        \\n        // Now decide the length of result array of string based upon hasFixed flag\\n        int newSize = n/k + (hasFixed? 0:1);\\n        \\n        //Create ans array\\n        String result[] = new String[newSize];\\n        \\n        // index to filling the ans array from begining(0-index)\\n        int index = 0;\\n        \\n        // start the loop, based upon the flag\\n        // here going with n, means we have all fixed answer array without any fill char\\n        // else go upto n-k,\\n        // See example 1 and 2 of description\\n        for(int i=0;i<(hasFixed?n:n-k);i+=k){\\n            result[index++] = s.substring(i,k+i);\\n        }\\n        \\n        // If flag is not fixed array size based upon parameter k, look for the remaining char\\n        // which was not selected from above loop\\n        if(!hasFixed){\\n            \\n            //Create the last one,\\n            result[index] = s.substring((n/k)*k);\\n            \\n            // Now append the fill char for the remaining place\\n            for(int i=0;i<k-n%k;i++)\\n                result[index] +=\"\"+fill;\\n        }\\n        \\n        // return the result array\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        //First Get the given string length\\n        int n = s.length();\\n        \\n        //Check if string would have its fixed length or not\\n        // fixed length means, there is no requirement to add the \\'fill\\' character\\n        // possibly for last answer arrayString\\n        boolean hasFixed = (n%k==0);\\n        \\n        // Now decide the length of result array of string based upon hasFixed flag\\n        int newSize = n/k + (hasFixed? 0:1);\\n        \\n        //Create ans array\\n        String result[] = new String[newSize];\\n        \\n        // index to filling the ans array from begining(0-index)\\n        int index = 0;\\n        \\n        // start the loop, based upon the flag\\n        // here going with n, means we have all fixed answer array without any fill char\\n        // else go upto n-k,\\n        // See example 1 and 2 of description\\n        for(int i=0;i<(hasFixed?n:n-k);i+=k){\\n            result[index++] = s.substring(i,k+i);\\n        }\\n        \\n        // If flag is not fixed array size based upon parameter k, look for the remaining char\\n        // which was not selected from above loop\\n        if(!hasFixed){\\n            \\n            //Create the last one,\\n            result[index] = s.substring((n/k)*k);\\n            \\n            // Now append the fill char for the remaining place\\n            for(int i=0;i<k-n%k;i++)\\n                result[index] +=\"\"+fill;\\n        }\\n        \\n        // return the result array\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2809676,
                "title": "lengthy-but-easy-approach-java",
                "content": "\\n# Approach\\nLogical one but somewhat long-\\nFirst I checked if the string contains the exact number of characters which can be divided into k pairs. If the characters are more then the fill string is added number of times so that string can be divided into k pairs.Then the pairs are added to arraylist and returned as array.\\n\\n# Complexity\\nRuntime: 5 ms\\nMemory: 41.3 MB\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        \\n        if(s.length()%k!=0){\\n            int c2=k;\\n            int hm=0;\\n            for(int i=0;i<s.length();i+=k){\\n                if(i>hm){\\n                    hm=i;\\n                }\\n            }\\n            int fk=(hm+k)-(hm+1);\\n            List<String> lst=new ArrayList<>();\\n            StringBuilder ss=new StringBuilder(s);\\n            for(int j=0;j<fk;j++){\\n                ss.append(fill);\\n            }    \\n            String fi=ss.toString();\\n            System.out.println(fi);\\n            for(int i=0;i<fi.length();i+=k){\\n                if(c2<=fi.length()){\\n                    StringBuilder sb=new StringBuilder();\\n                    sb.append(fi.substring(i,c2));\\n                    lst.add(sb.toString());\\n                    c2+=k;\\n                }\\n                \\n            }\\n            String[] arr = new String[lst.size()]; \\n  \\n            // ArrayList to Array Conversion \\n            for (int i = 0; i < lst.size(); i++) arr[i] = lst.get(i); \\n            return arr;\\n        }\\n        else{\\n            int c2=k;\\n            List<String> lst=new ArrayList<>();\\n            \\n            for(int i=0;i<s.length();i+=k){\\n                if(c2<=s.length()){\\n                    StringBuilder sb=new StringBuilder();\\n                    sb.append(s.substring(i,c2));\\n                    lst.add(sb.toString());\\n                    c2+=k;\\n                }\\n                \\n            }\\n            String[] arr = new String[lst.size()]; \\n  \\n            // ArrayList to Array Conversion \\n            for (int i = 0; i < lst.size(); i++) arr[i] = lst.get(i); \\n            return arr;\\n        }\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        \\n        if(s.length()%k!=0){\\n            int c2=k;\\n            int hm=0;\\n            for(int i=0;i<s.length();i+=k){\\n                if(i>hm){\\n                    hm=i;\\n                }\\n            }\\n            int fk=(hm+k)-(hm+1);\\n            List<String> lst=new ArrayList<>();\\n            StringBuilder ss=new StringBuilder(s);\\n            for(int j=0;j<fk;j++){\\n                ss.append(fill);\\n            }    \\n            String fi=ss.toString();\\n            System.out.println(fi);\\n            for(int i=0;i<fi.length();i+=k){\\n                if(c2<=fi.length()){\\n                    StringBuilder sb=new StringBuilder();\\n                    sb.append(fi.substring(i,c2));\\n                    lst.add(sb.toString());\\n                    c2+=k;\\n                }\\n                \\n            }\\n            String[] arr = new String[lst.size()]; \\n  \\n            // ArrayList to Array Conversion \\n            for (int i = 0; i < lst.size(); i++) arr[i] = lst.get(i); \\n            return arr;\\n        }\\n        else{\\n            int c2=k;\\n            List<String> lst=new ArrayList<>();\\n            \\n            for(int i=0;i<s.length();i+=k){\\n                if(c2<=s.length()){\\n                    StringBuilder sb=new StringBuilder();\\n                    sb.append(s.substring(i,c2));\\n                    lst.add(sb.toString());\\n                    c2+=k;\\n                }\\n                \\n            }\\n            String[] arr = new String[lst.size()]; \\n  \\n            // ArrayList to Array Conversion \\n            for (int i = 0; i < lst.size(); i++) arr[i] = lst.get(i); \\n            return arr;\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2760583,
                "title": "easy-python-solution-faster-than-84",
                "content": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        ans = []\\n        no_of_groups = math.ceil(len(s)/k)\\n        start = 0\\n        while no_of_groups>0:\\n            if s[start:start+k]:\\n                ans.append(s[start:start+k])\\n            else:\\n                ans.append(s[start:])\\n            start+=k\\n            no_of_groups-=1\\n        while len(ans[-1])!=k:\\n                ans[-1]+=fill           \\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        ans = []\\n        no_of_groups = math.ceil(len(s)/k)\\n        start = 0\\n        while no_of_groups>0:\\n            if s[start:start+k]:\\n                ans.append(s[start:start+k])\\n            else:\\n                ans.append(s[start:])\\n            start+=k\\n            no_of_groups-=1\\n        while len(ans[-1])!=k:\\n                ans[-1]+=fill           \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2358749,
                "title": "simple-c-soln-for-divide-a-string-into-groups-of-size-k",
                "content": "```\\nvector<string> divideString(string s, int k, char fill) {\\n        vector<string> result; \\n        string str = \"\";\\n        int i; \\n        for( i = 0; i<s.size(); i++){\\n            str+=s[i];\\n            if((i+1)%k==0){\\n                result.push_back(str);\\n                str=\"\";\\n            }   \\n        }\\n        //Storing the odd empty characters. \\n        if(i%k!=0){\\n            while(i%k!=0){\\n                str+=fill; \\n                i++;\\n            }\\n            result.push_back(str);\\n        }\\n        return result;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nvector<string> divideString(string s, int k, char fill) {\\n        vector<string> result; \\n        string str = \"\";\\n        int i; \\n        for( i = 0; i<s.size(); i++){\\n            str+=s[i];\\n            if((i+1)%k==0){\\n                result.push_back(str);\\n                str=\"\";\\n            }   \\n        }\\n        //Storing the odd empty characters. \\n        if(i%k!=0){\\n            while(i%k!=0){\\n                str+=fill; \\n                i++;\\n            }\\n            result.push_back(str);\\n        }\\n        return result;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2299619,
                "title": "simple-c-solution-beginner-friendly-3ms",
                "content": "```\\n        vector<string> v;\\n        for(int i=0;i<s.length();i=i+k)\\n        {\\n            string str = s.substr(i,k);\\n            if(str.length()==k)\\n            {\\n                v.push_back(str);\\n            }\\n            else\\n            {\\n                int a = k - str.length();\\n                while(a--)\\n                {\\n                    str+=fill;\\n                }\\n                v.push_back(str);\\n            }\\n        }\\n        return v;\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n        vector<string> v;\\n        for(int i=0;i<s.length();i=i+k)\\n        {\\n            string str = s.substr(i,k);\\n            if(str.length()==k)\\n            {\\n                v.push_back(str);\\n            }\\n            else\\n            {\\n                int a = k - str.length();\\n                while(a--)\\n                {\\n                    str+=fill;\\n                }\\n                v.push_back(str);\\n            }\\n        }\\n        return v;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2242757,
                "title": "c-best-solution-using-substr",
                "content": "class Solution {\\npublic:\\n\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> v;\\n        int i = 0;\\n        while(i < s.size()){\\n            string str = \"\";\\n            str = s.substr(i , k);\\n            int n = str.size();\\n            if(n != k){\\n               while(n < k){\\n                str += fill;\\n                n++;\\n               }\\n            }\\n            v.push_back(str);\\n            i = i+ k;   \\n        }\\n        return v;\\n        \\n    }\\n};\\n\\n**Please Upvote :)**",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> v;\\n        int i = 0;\\n        while(i < s.size()){\\n            string str = \"\";\\n            str = s.substr(i , k);\\n            int n = str.size();\\n            if(n != k){\\n               while(n < k){\\n                str += fill;\\n                n++;\\n               }",
                "codeTag": "Java"
            },
            {
                "id": 2134179,
                "title": "python-1-liner-solution-o-n",
                "content": "```py\\n# from re import findall\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return findall(\\'.\\' * k, s + fill * (k - len(s) % k if len(s) % k else 0))\\n```",
                "solutionTags": [],
                "code": "```py\\n# from re import findall\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return findall(\\'.\\' * k, s + fill * (k - len(s) % k if len(s) % k else 0))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2106861,
                "title": "java-very-easy-to-understand",
                "content": "```\\n public String[] divideString(String s, int k, char fill) {\\n        while(s.length()%k!=0){\\n\\n            s+=fill;\\n        }\\n        String[] str=new String[s.length()/k];\\n        \\n        int i=0;\\n        int j=k;\\n       for(int p=0;p<str.length;p++){\\n           str[p]=s.substring(i,j);\\n           i+=k;\\n           j+=k;\\n       }\\n        return str;\\n            \\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n public String[] divideString(String s, int k, char fill) {\\n        while(s.length()%k!=0){\\n\\n            s+=fill;\\n        }\\n        String[] str=new String[s.length()/k];\\n        \\n        int i=0;\\n        int j=k;\\n       for(int p=0;p<str.length;p++){\\n           str[p]=s.substring(i,j);\\n           i+=k;\\n           j+=k;\\n       }\\n        return str;\\n            \\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1986833,
                "title": "java-code-with-basic-understanding",
                "content": "\\tclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> ans=new ArrayList();\\n        \\n        int l=s.length()%k; //storing the remainder of length when divided with k\\n        \\n        if(l>0){\\n\\t\\t//             adding the remaining letters\\n\\t\\t\\t\\tfor(int i=1;i<=k-l;i++){\\n\\t\\t\\t\\t\\ts=s+fill;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t//         storing the required string in list\\n\\t\\t\\tfor(int i=0;i<s.length();i=i+k){\\n\\t\\t\\t\\tint p=k;\\n\\t\\t\\t\\tint j=i;\\n\\t\\t\\t\\tString word=\"\";\\n\\t\\t\\t\\twhile(p>0 && j<s.length()){\\n\\t\\t\\t\\t\\tword+=s.charAt(j);\\n\\t\\t\\t\\t\\tp--;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tans.add(word);\\n\\t\\t\\t}\\n\\t\\t\\tString str[]=new String [ans.size()];\\n\\t//         converting list to array\\n\\t\\t\\tfor(int i=0;i<ans.size();i++){\\n\\t\\t\\t\\tstr[i]=ans.get(i);\\n\\t\\t\\t}\\n\\t\\t\\treturn str;\\n\\t\\t}\\n\\t}\\n",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "class Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> ans=new ArrayList();\\n        \\n        int l=s.length()%k; //storing the remainder of length when divided with k\\n        \\n        if(l>0){\\n\\t\\t//             adding the remaining letters\\n\\t\\t\\t\\tfor(int i=1;i<=k-l;i++){\\n\\t\\t\\t\\t\\ts=s+fill;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1914219,
                "title": "java-modulo-string-manipulation-looping-list-to-array",
                "content": "hmm\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        \\n        int remaining =  s.length()%k;\\n        if(remaining != 0) s = s + (fill + \"\").repeat(k - remaining);\\n        \\n\\n        List<String> list = new ArrayList<>();\\n        for(int i = 0; i < s.length(); i+=k) {\\n            list.add(s.substring(i,i+k));\\n        }\\n        \\n        return list.toArray(new String[list.size()]);\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        \\n        int remaining =  s.length()%k;\\n        if(remaining != 0) s = s + (fill + \"\").repeat(k - remaining);\\n        \\n\\n        List<String> list = new ArrayList<>();\\n        for(int i = 0; i < s.length(); i+=k) {\\n            list.add(s.substring(i,i+k));\\n        }\\n        \\n        return list.toArray(new String[list.size()]);\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1800421,
                "title": "java-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int l=0;\\n        if(s.length()%k==0)\\n        {\\n            l=s.length()/k;\\n        }\\n        else\\n        {\\n            l=s.length()/k+1;\\n        }\\n        String[] str=new String[l];\\n        for(int i=0;i<s.length();i=i+k)\\n        {\\n            String st=\"\";\\n            for(int j=i;j<i+k && j<s.length();j++)\\n            {\\n                st+=s.charAt(j);\\n            }\\n            str[i/k]=st;\\n        }\\n        if(str[str.length-1].length()<k)\\n        {\\n            String ss=str[str.length-1];\\n            for(int i=str[str.length-1].length();i<k;i++)\\n            {\\n                ss+=fill;\\n            }\\n            str[str.length-1]=ss;\\n        }\\n        return str;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int l=0;\\n        if(s.length()%k==0)\\n        {\\n            l=s.length()/k;\\n        }\\n        else\\n        {\\n            l=s.length()/k+1;\\n        }\\n        String[] str=new String[l];\\n        for(int i=0;i<s.length();i=i+k)\\n        {\\n            String st=\"\";\\n            for(int j=i;j<i+k && j<s.length();j++)\\n            {\\n                st+=s.charAt(j);\\n            }\\n            str[i/k]=st;\\n        }\\n        if(str[str.length-1].length()<k)\\n        {\\n            String ss=str[str.length-1];\\n            for(int i=str[str.length-1].length();i<k;i++)\\n            {\\n                ss+=fill;\\n            }\\n            str[str.length-1]=ss;\\n        }\\n        return str;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750578,
                "title": "faster-than-100-00-of-c-solutions",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        \\n        vector<string> res;\\n        \\n        for(int i = 0; i<s.size(); i = i + k)\\n        {\\n             res.push_back(s.substr(i, k));\\n        }\\n        \\n        \\n        int count = res[res.size()-1].size();\\n        if(count<k)\\n        {\\n            string x = string(k-count, fill);\\n            res[res.size()-1] += x;\\n        }\\n            \\n       return res; \\n    }\\n};\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        \\n        vector<string> res;\\n        \\n        for(int i = 0; i<s.size(); i = i + k)\\n        {\\n             res.push_back(s.substr(i, k));\\n        }\\n        \\n        \\n        int count = res[res.size()-1].size();\\n        if(count<k)\\n        {\\n            string x = string(k-count, fill);\\n            res[res.size()-1] += x;\\n        }\\n            \\n       return res; \\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1742855,
                "title": "a-unqiue-solution-to-the-problem",
                "content": "```\\n\\n```class Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> a;\\n        int n=s.size();\\n        string store=\"\";\\n        int mod=n%k;\\n        int i=0;\\n        int q=n/k;//finding quotient of the size of string divided by k\\n        int fill_size=((q+1)*k-n);//for finding the fill size if the modulus with n is not 0\\n        cout<<fill_size<<endl;\\n        // string f=fill;\\n        if(mod!=0)\\n        {\\n            s=s.append(fill_size,fill);\\n        } \\n        cout<<s<<endl;\\n        int start=0;\\n        while(start<n)\\n        {\\n            cout<<start<<\" \"<<start+k<<endl;\\n             store=s.substr(start,k);//for extracting and storing the substring\\n            cout<<store<<endl;\\n            a.push_back(store);\\n            store=\"\";\\n            start=start+k;\\n        }\\n       \\n        return a;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1724701,
                "title": "java-99-faster-solution",
                "content": "```  \\n  public String[] divideString(String s, int k, char fill) {\\n        int n = s.length();\\n        int No_fills = (n%k==0?0:k-(n%k));\\n        int total_len = n+No_fills;\\n        int count = 0;\\n        StringBuilder sb = new StringBuilder(s);\\n        String[] ans = new String[total_len/k]; \\n        for(int i=0; i<No_fills;i++){\\n            sb.append(fill);\\n        }\\n        s=sb.toString();\\n        for(int i = 0; i<total_len;i+=k){\\n            ans[count++]=s.substring(i,i+k);\\n        }            \\n        return ans;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "String"
                ],
                "code": "```  \\n  public String[] divideString(String s, int k, char fill) {\\n        int n = s.length();\\n        int No_fills = (n%k==0?0:k-(n%k));\\n        int total_len = n+No_fills;\\n        int count = 0;\\n        StringBuilder sb = new StringBuilder(s);\\n        String[] ans = new String[total_len/k]; \\n        for(int i=0; i<No_fills;i++){\\n            sb.append(fill);\\n        }\\n        s=sb.toString();\\n        for(int i = 0; i<total_len;i+=k){\\n            ans[count++]=s.substring(i,i+k);\\n        }            \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1709424,
                "title": "basic-c-implementation",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string>res;\\n        int y=s.size()%k;\\n        int z=k-y;\\n        if(y>0){\\n            while(z--){\\n                s+=fill;\\n            }\\n        }\\n        for(int i=0;i<s.size();){\\n            int x=k;\\n            string l=\"\";\\n            while(x--){\\n                l+=s[i];\\n                i++;\\n            }\\n            res.push_back(l);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string>res;\\n        int y=s.size()%k;\\n        int z=k-y;\\n        if(y>0){\\n            while(z--){\\n                s+=fill;\\n            }\\n        }\\n        for(int i=0;i<s.size();){\\n            int x=k;\\n            string l=\"\";\\n            while(x--){\\n                l+=s[i];\\n                i++;\\n            }\\n            res.push_back(l);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1708401,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> v;\\n        string tmp = \"\";\\n        for(int i = 0; i < s.length(); i++){\\n            tmp+=s[i];\\n            if((i+1)%k==0){\\n                v.push_back(tmp);\\n                tmp=\"\";\\n            }\\n        }\\n        if(tmp.length()!=0){\\n            while(tmp.length()!=k){\\n                tmp+=fill;\\n            }\\n            v.push_back(tmp);\\n        }\\n        return v;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> v;\\n        string tmp = \"\";\\n        for(int i = 0; i < s.length(); i++){\\n            tmp+=s[i];\\n            if((i+1)%k==0){\\n                v.push_back(tmp);\\n                tmp=\"\";\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1702057,
                "title": "91-better-than-other-solutions-in-python",
                "content": "```\\nimport textwrap\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        a=textwrap.fill(s,k).split()[::-1]\\n        for i in range(len(a)):\\n            if len(a[i])!=k:\\n                string=fill*((k-len(a[i])))\\n                # print(string)\\n                a[i]+=string\\n            else:\\n                break\\n        return a[::-1]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nimport textwrap\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        a=textwrap.fill(s,k).split()[::-1]\\n        for i in range(len(a)):\\n            if len(a[i])!=k:\\n                string=fill*((k-len(a[i])))\\n                # print(string)\\n                a[i]+=string\\n            else:\\n                break\\n        return a[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1699415,
                "title": "c-0-ms-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        \\n        vector<string> res;\\n        \\n        for(int i = 0; i < s.size(); i += k){\\n            res.push_back(s.substr(i, k));\\n        }\\n        string last_str = res.at(res.size()-1);\\n        \\n        while (last_str.size() != k) {\\n            last_str.push_back(fill);\\n        }\\n        res[res.size()-1] = last_str;\\n       \\n        return res;\\n    }\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/613e5e9e-521e-45f5-bf0b-ed2c961cfb39_1642498551.0331402.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        \\n        vector<string> res;\\n        \\n        for(int i = 0; i < s.size(); i += k){\\n            res.push_back(s.substr(i, k));\\n        }\\n        string last_str = res.at(res.size()-1);\\n        \\n        while (last_str.size() != k) {\\n            last_str.push_back(fill);\\n        }\\n        res[res.size()-1] = last_str;\\n       \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1697109,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int n = s.length();\\n        \\n        //get the size of string array\\n        int size = (n + k - 1 ) / k;\\n        \\n        String[] ans = new String[size];\\n        \\n        int i = 0;\\n        String temp = \"\";\\n        int j = 0;\\n        while (i < n) {\\n            // when size of temp is smaller than k\\n            if (temp.length() < k) {\\n                temp += s.charAt(i); \\n                i++;\\n            } else if (temp.length() == k) {\\n                //storing k sized group in ans arry\\n                ans[j] = temp;  \\n                j++; \\n                temp = new String();\\n            } \\n        }\\n        ans[j] = temp; \\n        // get last string to check whether it is of size k or not\\n        temp = ans[size - 1];\\n        \\n        //if length of temp is not k then fill it\\n        if (temp.length() != k) {\\n            i = 0;\\n            n = temp.length();\\n            j = k - n;\\n            while (j -- > 0) {\\n                temp += fill;\\n            }\\n             //putting filled string back into ans array\\n            ans[size - 1] = temp;\\n        }\\n        //returning ans\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int n = s.length();\\n        \\n        //get the size of string array\\n        int size = (n + k - 1 ) / k;\\n        \\n        String[] ans = new String[size];\\n        \\n        int i = 0;\\n        String temp = \"\";\\n        int j = 0;\\n        while (i < n) {\\n            // when size of temp is smaller than k\\n            if (temp.length() < k) {\\n                temp += s.charAt(i); \\n                i++;\\n            } else if (temp.length() == k) {\\n                //storing k sized group in ans arry\\n                ans[j] = temp;  \\n                j++; \\n                temp = new String();\\n            } \\n        }\\n        ans[j] = temp; \\n        // get last string to check whether it is of size k or not\\n        temp = ans[size - 1];\\n        \\n        //if length of temp is not k then fill it\\n        if (temp.length() != k) {\\n            i = 0;\\n            n = temp.length();\\n            j = k - n;\\n            while (j -- > 0) {\\n                temp += fill;\\n            }\\n             //putting filled string back into ans array\\n            ans[size - 1] = temp;\\n        }\\n        //returning ans\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1696954,
                "title": "python-3-solution-faster-than-100-35ms",
                "content": "```py\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        grps = [s[i:i+k] for i in range(0, len(s), k)]\\n        grps[-1] += (fill * (k - len(grps[-1])))\\n        return grps\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```py\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        grps = [s[i:i+k] for i in range(0, len(s), k)]\\n        grps[-1] += (fill * (k - len(grps[-1])))\\n        return grps\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1696249,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        \\n        if (s.length()%k!=0)\\n        {\\n             while(s.length()%k!=0)\\n             {\\n                 s = s + fill;\\n             }\\n                  \\n        }\\n        vector<string>v;\\n        string s1;\\n        int d=0;\\n        for (int i=0;i<s.length();i++)\\n        {\\n             s1 = s1 + s[i];\\n            d++;\\n             if (d==k)\\n             {\\n                  v.push_back(s1);\\n                 d=0;\\n                 s1 = \"\";\\n             }\\n        }\\n        return v;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        \\n        if (s.length()%k!=0)\\n        {\\n             while(s.length()%k!=0)\\n             {\\n                 s = s + fill;\\n             }\\n                  \\n        }\\n        vector<string>v;\\n        string s1;\\n        int d=0;\\n        for (int i=0;i<s.length();i++)\\n        {\\n             s1 = s1 + s[i];\\n            d++;\\n             if (d==k)\\n             {\\n                  v.push_back(s1);\\n                 d=0;\\n                 s1 = \"\";\\n             }\\n        }\\n        return v;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1695109,
                "title": "python-beginner",
                "content": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        li=[]\\n        a=len(s)//k\\n        a=a*k\\n        for i in range(0,a,k):\\n            li.append(s[i:i+k])\\n        b=len(s)-a\\n        if(b>0):\\n            st=s[a:]\\n            b=k-b\\n            for i in range(b):\\n                st=st+fill\\n            li.append(st)\\n        return li",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        li=[]\\n        a=len(s)//k\\n        a=a*k\\n        for i in range(0,a,k):\\n            li.append(s[i:i+k])\\n        b=len(s)-a\\n        if(b>0):\\n            st=s[a:]\\n            b=k-b\\n            for i in range(b):\\n                st=st+fill\\n            li.append(st)\\n        return li",
                "codeTag": "Java"
            },
            {
                "id": 1694993,
                "title": "python-java-easy-to-understand",
                "content": "\\tclass Solution:\\n\\t\\tdef divideString(self, s: str, k: int, fill: str) -> List[str]:\\n\\t\\t\\tcur = \"\"\\n\\t\\t\\tres = []\\n\\t\\t\\tfor c in s:\\n\\t\\t\\t\\tcur += c\\n\\t\\t\\t\\tif len(cur) == k:\\n\\t\\t\\t\\t\\tres.append(cur)\\n\\t\\t\\t\\t\\tcur = \"\"\\n\\t\\t\\tif cur != \"\":\\n\\t\\t\\t\\tcur += fill * (k - len(cur))\\n\\t\\t\\t\\tres.append(cur)\\n\\t\\t\\treturn res\\n\\n\\n\\tclass Solution {\\n\\t\\tpublic String[] divideString(String s, int k, char fill) {\\n\\t\\t\\tStringBuilder sb = new StringBuilder();\\n\\t\\t\\tList<String> res = new ArrayList<>();\\n\\t\\t\\tfor (char c: s.toCharArray()) {\\n\\t\\t\\t\\tsb.append(c);\\n\\t\\t\\t\\tif (sb.length() == k) {\\n\\t\\t\\t\\t\\tres.add(sb.toString());\\n\\t\\t\\t\\t\\tsb = new StringBuilder();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (sb.length() != 0) {\\n\\t\\t\\t\\tint n = k - sb.length();\\n\\t\\t\\t\\tfor (int i = 0; i < n; i ++) {\\n\\t\\t\\t\\t\\tsb.append(fill);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tres.add(sb.toString());\\n\\t\\t\\t}\\n\\t\\t\\treturn res.toArray(new String[res.size()]);\\n\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "class Solution:\\n\\t\\tdef divideString(self, s: str, k: int, fill: str) -> List[str]:\\n\\t\\t\\tcur = \"\"\\n\\t\\t\\tres = []\\n\\t\\t\\tfor c in s:\\n\\t\\t\\t\\tcur += c\\n\\t\\t\\t\\tif len(cur) == k:\\n\\t\\t\\t\\t\\tres.append(cur)\\n\\t\\t\\t\\t\\tcur = \"\"\\n\\t\\t\\tif cur != \"\":\\n\\t\\t\\t\\tcur += fill * (k - len(cur))\\n\\t\\t\\t\\tres.append(cur)\\n\\t\\t\\treturn res\\n\\n\\n\\tclass Solution {\\n\\t\\tpublic String[] divideString(String s, int k, char fill) {\\n\\t\\t\\tStringBuilder sb = new StringBuilder();\\n\\t\\t\\tList<String> res = new ArrayList<>();\\n\\t\\t\\tfor (char c: s.toCharArray()) {\\n\\t\\t\\t\\tsb.append(c);\\n\\t\\t\\t\\tif (sb.length() == k) {\\n\\t\\t\\t\\t\\tres.add(sb.toString());\\n\\t\\t\\t\\t\\tsb = new StringBuilder();\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1694771,
                "title": "weekly-contest-276-q1",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector <string> v;\\n        string str;\\n        int index=0;\\n        for(auto &it:s)\\n        {\\n            str.push_back(it);\\n            index++;\\n            if(index==k)\\n            {\\n                v.push_back(str);\\n                str=\"\"; index=0;\\n            }\\n        }\\n        if(str.size() < k && str.size()!=0)\\n        {\\n            for(int i=str.size();i<k;++i)\\n                str.push_back(fill);\\n            v.push_back(str);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector <string> v;\\n        string str;\\n        int index=0;\\n        for(auto &it:s)\\n        {\\n            str.push_back(it);\\n            index++;\\n            if(index==k)\\n            {\\n                v.push_back(str);\\n                str=\"\"; index=0;\\n            }\\n        }\\n        if(str.size() < k && str.size()!=0)\\n        {\\n            for(int i=str.size();i<k;++i)\\n                str.push_back(fill);\\n            v.push_back(str);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1694375,
                "title": "c",
                "content": "1) Traverse through the string with increments of k(i=i+k).\\n2) Take substrings from ith index of length k, and push in the vector\\n3) If substring is not of length k, keep on adding fill(char) till length become k\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> vec;\\n        string temp;\\n        int n=s.length();\\n        for(int i=0;i<n;i+=k){\\n            temp=s.substr(i,k);\\n            if(temp.length()==k){\\n                vec.push_back(temp);\\n            }\\n            else{\\n                while(temp.length()!=k){\\n                    temp += fill;\\n                }\\n                vec.push_back(temp);\\n            }\\n        }\\n        return vec;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> vec;\\n        string temp;\\n        int n=s.length();\\n        for(int i=0;i<n;i+=k){\\n            temp=s.substr(i,k);\\n            if(temp.length()==k){\\n                vec.push_back(temp);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1694170,
                "title": "c-easy-code",
                "content": "Tried to write in most easy format.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n            \\n        vector<string>answer;\\n        int count=0;\\n        string group;\\n\\t\\t//Keeping adding char in group and as group size become k, then push it into vector\\n        for(int i=0;i<s.size();i++)            \\n        {\\n            group+=s[i];\\n            count++;\\n            if(count==k){\\n                answer.push_back(group);\\n                group=\"\",count=0;\\n            }\\n        }\\n\\t\\t//If any extra left, then add fill into it accordingly\\n        if(group!=\"\")\\n        {\\n            while(group.size()<k)\\n                group+=fill;\\n            answer.push_back(group);\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n            \\n        vector<string>answer;\\n        int count=0;\\n        string group;\\n\\t\\t//Keeping adding char in group and as group size become k, then push it into vector\\n        for(int i=0;i<s.size();i++)            \\n        {\\n            group+=s[i];\\n            count++;\\n            if(count==k){\\n                answer.push_back(group);\\n                group=\"\",count=0;\\n            }\\n        }\\n\\t\\t//If any extra left, then add fill into it accordingly\\n        if(group!=\"\")\\n        {\\n            while(group.size()<k)\\n                group+=fill;\\n            answer.push_back(group);\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1694009,
                "title": "simple-java-100-fast-intuitive",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> ls=new ArrayList<>();\\n        for(int i=0;i<s.length();i+=k){\\n            if(i+k>=s.length()){\\n                StringBuilder sub=new StringBuilder(s.substring(i,s.length()));\\n                while(sub.length()<k)\\n                    sub=sub.append(fill);\\n                ls.add(sub.toString());\\n            }else\\n                ls.add(s.substring(i,i+k));\\n        }\\n        \\n        return ls.toArray(new String[ls.size()]);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> ls=new ArrayList<>();\\n        for(int i=0;i<s.length();i+=k){\\n            if(i+k>=s.length()){\\n                StringBuilder sub=new StringBuilder(s.substring(i,s.length()));\\n                while(sub.length()<k)\\n                    sub=sub.append(fill);\\n                ls.add(sub.toString());\\n            }else\\n                ls.add(s.substring(i,i+k));\\n        }\\n        \\n        return ls.toArray(new String[ls.size()]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1693966,
                "title": "divide-a-string-into-groups-of-size-k",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> st;\\n        while(s.size()%k!=0)\\n            s+=fill;\\n        int count=0,i=0;\\n        string res=\"\";\\n        while(i<s.size()){\\n            for(int j=i;j<i+k;j++)\\n                res+=s[j];\\n            st.push_back(res);\\n            res=\"\";\\n            i+=k;\\n        }\\n        return st;\\n        \\n    }\\n};\\n\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> st;\\n        while(s.size()%k!=0)\\n            s+=fill;\\n        int count=0,i=0;\\n        string res=\"\";\\n        while(i<s.size()){\\n            for(int j=i;j<i+k;j++)\\n                res+=s[j];\\n            st.push_back(res);\\n            res=\"\";\\n            i+=k;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1693811,
                "title": "c-probably-the-easiest-way-to-solve-this",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n=s.size();\\n        \\n        int c=0;\\n        vector<string>ans;\\n        string a;\\n        for(int i=0;i<n;i++){\\n            if(c<k){\\n\\t\\t\\t\\t//we fill the string till the size becomes equal to the required size\\n                a.push_back(s[i]);\\n                c++;\\n            }\\n            if(c==k){\\n\\t\\t\\t// we dont want want to keep adding characters to our string a when count>k\\n\\t\\t\\t//therefore we push a into our ans vector and reset everything for the next k characters\\n                c=0;\\n                ans.push_back(a);\\n                a.erase();\\n            }\\n        }\\n        int req=0;\\n\\t\\t//now in the last k character slot, if count!=k, then it will never erase the string a\\n\\t\\t// therefore, we can use that to satisfy the fill condition.\\n        if(a.size()!=0){\\n            req=k-a.size();\\n        \\n            while(req--){\\n                a.push_back(fill);\\n            }\\n            ans.push_back(a);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n=s.size();\\n        \\n        int c=0;\\n        vector<string>ans;\\n        string a;\\n        for(int i=0;i<n;i++){\\n            if(c<k){\\n\\t\\t\\t\\t//we fill the string till the size becomes equal to the required size\\n                a.push_back(s[i]);\\n                c++;\\n            }\\n            if(c==k){\\n\\t\\t\\t// we dont want want to keep adding characters to our string a when count>k\\n\\t\\t\\t//therefore we push a into our ans vector and reset everything for the next k characters\\n                c=0;\\n                ans.push_back(a);\\n                a.erase();\\n            }\\n        }\\n        int req=0;\\n\\t\\t//now in the last k character slot, if count!=k, then it will never erase the string a\\n\\t\\t// therefore, we can use that to satisfy the fill condition.\\n        if(a.size()!=0){\\n            req=k-a.size();\\n        \\n            while(req--){\\n                a.push_back(fill);\\n            }\\n            ans.push_back(a);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1693354,
                "title": "c-easy-0-ms-faster-than-100-00-solution",
                "content": "**Please Upvote if you find this solution helpful**\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n = s.size();\\n        int add = n%k;\\n        if(add != 0) {\\n            while(add++ != k) {\\n                s.push_back(fill);\\n            }\\n        }\\n        vector <string> v;\\n        for(int i=0; i<n; i+=k) {\\n            v.push_back(s.substr(i,k));\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n = s.size();\\n        int add = n%k;\\n        if(add != 0) {\\n            while(add++ != k) {\\n                s.push_back(fill);\\n            }\\n        }\\n        vector <string> v;\\n        for(int i=0; i<n; i+=k) {\\n            v.push_back(s.substr(i,k));\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1693176,
                "title": "beats-100",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int start = 0, end = k;\\n        ArrayList<String> res = new ArrayList<>();\\n        StringBuilder str = new StringBuilder();\\n        while(end < s.length()){\\n            res.add(s.substring(start, end));\\n            start = end;\\n            end += k;\\n        }\\n        if(start < s.length()){\\n            str = new StringBuilder(s.substring(start, s.length()));\\n        }\\n        int n = str.length();\\n        if(str.length() < k){\\n            for(int i = 0; i < k - n; ++i){\\n                str.append(fill);\\n            }    \\n        }\\n        if(str.length() != 0)\\n            res.add(str.toString());\\n        String[] arr = new String[res.size()];\\n        return res.toArray(arr);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int start = 0, end = k;\\n        ArrayList<String> res = new ArrayList<>();\\n        StringBuilder str = new StringBuilder();\\n        while(end < s.length()){\\n            res.add(s.substring(start, end));\\n            start = end;\\n            end += k;\\n        }\\n        if(start < s.length()){\\n            str = new StringBuilder(s.substring(start, s.length()));\\n        }\\n        int n = str.length();\\n        if(str.length() < k){\\n            for(int i = 0; i < k - n; ++i){\\n                str.append(fill);\\n            }    \\n        }\\n        if(str.length() != 0)\\n            res.add(str.toString());\\n        String[] arr = new String[res.size()];\\n        return res.toArray(arr);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1693160,
                "title": "java-easy-to-understand-easy-peasy-solution",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int slength = s.length();\\n        int size = (int)Math.ceil((double) slength/(double)k);\\n        String[] res = new String[size];\\n        Arrays.fill(res,\"\");\\n        int count = 0;\\n        for(int i=0,j=0;i<s.length();i++){\\n            if(count<k){\\n                res[j]+=s.charAt(i);\\n                count++;\\n            }\\n            else{\\n                count = 1;\\n                j++;\\n                 res[j]+=s.charAt(i);\\n            }\\n            \\n        }\\n        while(res[res.length-1].length()!=k){\\n            res[res.length-1]+=fill;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int slength = s.length();\\n        int size = (int)Math.ceil((double) slength/(double)k);\\n        String[] res = new String[size];\\n        Arrays.fill(res,\"\");\\n        int count = 0;\\n        for(int i=0,j=0;i<s.length();i++){\\n            if(count<k){\\n                res[j]+=s.charAt(i);\\n                count++;\\n            }\\n            else{\\n                count = 1;\\n                j++;\\n                 res[j]+=s.charAt(i);\\n            }\\n            \\n        }\\n        while(res[res.length-1].length()!=k){\\n            res[res.length-1]+=fill;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1692993,
                "title": "easy-javascript-js",
                "content": "```\\nvar divideString = function(s, k, fill) {\\n    const res = [];\\n    let str = \\'\\';\\n    \\n    for (let i = 0; i < s.length; i++) {\\n        str += s[i];\\n        \\n        if (str.length === k) {\\n            res.push(str);\\n            str = \\'\\';\\n        }\\n    }\\n    \\n    const n = str.length;\\n    \\n    if (n > 0) {\\n        for (let i = 0; i < k - n; i++) {\\n            str += fill;\\n        }    \\n        res.push(str);\\n    }\\n    \\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar divideString = function(s, k, fill) {\\n    const res = [];\\n    let str = \\'\\';\\n    \\n    for (let i = 0; i < s.length; i++) {\\n        str += s[i];\\n        \\n        if (str.length === k) {\\n            res.push(str);\\n            str = \\'\\';\\n        }\\n    }\\n    \\n    const n = str.length;\\n    \\n    if (n > 0) {\\n        for (let i = 0; i < k - n; i++) {\\n            str += fill;\\n        }    \\n        res.push(str);\\n    }\\n    \\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1692936,
                "title": "easy-intuitive-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        string w=\"\";\\n        vector<string>res;\\n        int c=0;\\n        for(auto i : s){\\n            w+=i;\\n            c++;\\n            if(c==k){\\n                res.push_back(w);\\n                c=0;\\n                \\n                w=\"\";\\n            }\\n        }\\n        int f=0;\\n        while(c>0 && c!=k){\\n            f=1;\\n            w+=fill;\\n            c++;\\n        }\\n      if(f==1){\\n          res.push_back(w);\\n      }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        string w=\"\";\\n        vector<string>res;\\n        int c=0;\\n        for(auto i : s){\\n            w+=i;\\n            c++;\\n            if(c==k){\\n                res.push_back(w);\\n                c=0;\\n                \\n                w=\"\";\\n            }\\n        }\\n        int f=0;\\n        while(c>0 && c!=k){\\n            f=1;\\n            w+=fill;\\n            c++;\\n        }\\n      if(f==1){\\n          res.push_back(w);\\n      }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4083738,
                "title": "simple-and-easy-java-solution-more-than-96-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> list = new ArrayList<>();\\n        StringBuilder sb = new StringBuilder();\\n        for(char c:s.toCharArray()){\\n            sb.append(c);\\n            if(sb.length()==k){\\n                list.add(sb.toString());\\n                sb.setLength(0);\\n            }\\n        }\\n        while(sb.length() != 0 && sb.length() != k){\\n            sb.append(fill);\\n        }\\n        if(sb.length()==k){\\n            list.add(sb.toString());\\n        }\\n        String[] ans = new String[list.size()];\\n        int i=0;\\n        for(String str:list){\\n            ans[i++] = str;\\n        }   \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> list = new ArrayList<>();\\n        StringBuilder sb = new StringBuilder();\\n        for(char c:s.toCharArray()){\\n            sb.append(c);\\n            if(sb.length()==k){\\n                list.add(sb.toString());\\n                sb.setLength(0);\\n            }\\n        }\\n        while(sb.length() != 0 && sb.length() != k){\\n            sb.append(fill);\\n        }\\n        if(sb.length()==k){\\n            list.add(sb.toString());\\n        }\\n        String[] ans = new String[list.size()];\\n        int i=0;\\n        for(String str:list){\\n            ans[i++] = str;\\n        }   \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073730,
                "title": "easy-cpp-solution-beats-100-in-runtime-beginner-friendly",
                "content": "![image.png](https://assets.leetcode.com/users/images/3b4393b8-ec47-4ae3-9590-f388be070c80_1695320765.7643156.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n\\n        for(int i=0; i<s.length(); i+=k){\\n            if(i+k < s.length())\\n                ans.push_back(s.substr(i,k));\\n\\n            else{\\n                string tmp = s.substr(i,k);\\n                while(tmp.length() < k) tmp += fill;\\n                ans.push_back(tmp);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n\\n        for(int i=0; i<s.length(); i+=k){\\n            if(i+k < s.length())\\n                ans.push_back(s.substr(i,k));\\n\\n            else{\\n                string tmp = s.substr(i,k);\\n                while(tmp.length() < k) tmp += fill;\\n                ans.push_back(tmp);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073362,
                "title": "beats-90-easy-simple-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        a=[]\\n        for i in range(0,len(s),k):\\n            a.append(s[i:i+k])\\n        if len(a[len(a)-1])<k:\\n            a[len(a)-1]=a[len(a)-1]+(k-len(a[len(a)-1]))*fill\\n        return (a)\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        a=[]\\n        for i in range(0,len(s),k):\\n            a.append(s[i:i+k])\\n        if len(a[len(a)-1])<k:\\n            a[len(a)-1]=a[len(a)-1]+(k-len(a[len(a)-1]))*fill\\n        return (a)\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066350,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return [\"\".join(gr) for gr in itertools.zip_longest(*([iter(s)] * k), fillvalue= fill)]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        return [\"\".join(gr) for gr in itertools.zip_longest(*([iter(s)] * k), fillvalue= fill)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064705,
                "title": "easiest-approach-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int len = 0;\\n        while (s.length() % k != 0){\\n            s += fill;\\n        }\\n        String[] res = new String[s.length()/k];\\n        int i = 0;\\n        int index = 0;\\n\\n        while (i < s.length()){\\n            String subStr = s.substring(i, i + k);\\n            res[index++] = subStr;\\n            i = i + k;\\n    }\\n    return res;\\n}\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int len = 0;\\n        while (s.length() % k != 0){\\n            s += fill;\\n        }\\n        String[] res = new String[s.length()/k];\\n        int i = 0;\\n        int index = 0;\\n\\n        while (i < s.length()){\\n            String subStr = s.substring(i, i + k);\\n            res[index++] = subStr;\\n            i = i + k;\\n    }\\n    return res;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4043541,
                "title": "c-solution-beats-100-easy-solution",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        string temp=\"\";\\n        for(int i=0;i<s.size();i++){\\n            temp.push_back(s[i]);\\n            if(temp.size()==k){\\n                ans.push_back(temp);\\n                temp=\"\";\\n            }\\n        }\\n        if(temp.size()==0){\\n            return ans;\\n        }\\n        while(temp.size()!=k){\\n            temp.push_back(fill);\\n        }\\n        ans.push_back(temp);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        string temp=\"\";\\n        for(int i=0;i<s.size();i++){\\n            temp.push_back(s[i]);\\n            if(temp.size()==k){\\n                ans.push_back(temp);\\n                temp=\"\";\\n            }\\n        }\\n        if(temp.size()==0){\\n            return ans;\\n        }\\n        while(temp.size()!=k){\\n            temp.push_back(fill);\\n        }\\n        ans.push_back(temp);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042130,
                "title": "c-1-line-solution-linq",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public string[] DivideString(string s, int k, char fill)\\n    {\\n        return s.Chunk(k).Select(x => new string(x) + new string(fill, k - x.Length)).ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public string[] DivideString(string s, int k, char fill)\\n    {\\n        return s.Chunk(k).Select(x => new string(x) + new string(fill, k - x.Length)).ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4039642,
                "title": "c-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\npublic class Solution {\\n    public string[] DivideString(string s, int k, char fill)\\n    {\\n        int numGroups = (int)Math.Ceiling((double)s.Length / k);\\n        string[] groups = new string[numGroups];\\n\\n        for (int i = 0; i < s.Length; i += k)\\n        {\\n            string group = \"\";\\n\\n            for (int j = i; j < i + k && j < s.Length; j++)\\n            {\\n                group += s[j];\\n            }\\n\\n            if (group.Length < k)\\n            {\\n                group = group.PadRight(k, fill);\\n            }\\n\\n            groups[i / k] = group;\\n        }\\n\\n        return groups;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\n\\npublic class Solution {\\n    public string[] DivideString(string s, int k, char fill)\\n    {\\n        int numGroups = (int)Math.Ceiling((double)s.Length / k);\\n        string[] groups = new string[numGroups];\\n\\n        for (int i = 0; i < s.Length; i += k)\\n        {\\n            string group = \"\";\\n\\n            for (int j = i; j < i + k && j < s.Length; j++)\\n            {\\n                group += s[j];\\n            }\\n\\n            if (group.Length < k)\\n            {\\n                group = group.PadRight(k, fill);\\n            }\\n\\n            groups[i / k] = group;\\n        }\\n\\n        return groups;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4027415,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        s = list(s)\\n        res = []\\n        for i in range(0, len(s), k):\\n            if i + k < len(s):\\n                curr = \"\".join(s[i:i+k])\\n                res.append(curr)\\n            else:\\n                curr = s[i:]\\n                diff = k - len(curr)\\n\\n                curr += fill * diff\\n                curr = \"\".join(curr)\\n                res.append(curr)\\n\\n        return res\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        s = list(s)\\n        res = []\\n        for i in range(0, len(s), k):\\n            if i + k < len(s):\\n                curr = \"\".join(s[i:i+k])\\n                res.append(curr)\\n            else:\\n                curr = s[i:]\\n                diff = k - len(curr)\\n\\n                curr += fill * diff\\n                curr = \"\".join(curr)\\n                res.append(curr)\\n\\n        return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002616,
                "title": "java-1ms-simple-solution-with-stringbuilder",
                "content": "```\\n    public String[] divideString(String s, int k, char fill) {\\n        int len = s.length();\\n        int count = len / k;\\n        int left = len % k;\\n        int resCount = left > 0? count + 1 : count;\\n\\t\\t//create result String array\\n        String[] res = new String[resCount];\\n        for(int i = 0 ; i < count; i++) {\\n            res[i] = new String(s.substring(i * k, (i + 1) * k));\\n        }\\n        if(left > 0) {\\n            StringBuilder sb = new StringBuilder(s.substring(count*k));\\n            int tofill = k - left;\\n            while(tofill > 0) {\\n                sb.append(fill);\\n                tofill--;\\n            }\\n            res[resCount-1] = sb.toString();\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\n    public String[] divideString(String s, int k, char fill) {\\n        int len = s.length();\\n        int count = len / k;\\n        int left = len % k;\\n        int resCount = left > 0? count + 1 : count;\\n\\t\\t//create result String array\\n        String[] res = new String[resCount];\\n        for(int i = 0 ; i < count; i++) {\\n            res[i] = new String(s.substring(i * k, (i + 1) * k));\\n        }\\n        if(left > 0) {\\n            StringBuilder sb = new StringBuilder(s.substring(count*k));\\n            int tofill = k - left;\\n            while(tofill > 0) {\\n                sb.append(fill);\\n                tofill--;\\n            }\\n            res[resCount-1] = sb.toString();\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002188,
                "title": "too-long-but-successful-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        ans = []\\n        cnt = 0\\n        temp = \\'\\'\\n        if len(s) % k == 0:\\n            for i in s:\\n                temp += i\\n                cnt += 1\\n                if cnt == k:\\n                    ans.append(temp)\\n                    cnt = 0\\n                    temp = \\'\\'\\n        else:\\n            for i in range(((len(s) // k) + 1) * k - len(s)):\\n                s += fill\\n            for i in s:\\n                temp += i\\n                cnt += 1\\n                if cnt == k:\\n                    ans.append(temp)\\n                    cnt = 0\\n                    temp = \\'\\'\\n        return ans\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        ans = []\\n        cnt = 0\\n        temp = \\'\\'\\n        if len(s) % k == 0:\\n            for i in s:\\n                temp += i\\n                cnt += 1\\n                if cnt == k:\\n                    ans.append(temp)\\n                    cnt = 0\\n                    temp = \\'\\'\\n        else:\\n            for i in range(((len(s) // k) + 1) * k - len(s)):\\n                s += fill\\n            for i in s:\\n                temp += i\\n                cnt += 1\\n                if cnt == k:\\n                    ans.append(temp)\\n                    cnt = 0\\n                    temp = \\'\\'\\n        return ans\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3999332,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n     ArrayList<Character>list = new ArrayList<>();\\n     ArrayList<String>list1 = new ArrayList<>();\\n\\n     for(char ch:s.toCharArray()){\\n         list.add(ch);\\n     }\\n     String s1 = \"\";\\n     int x = 0;\\n     int y = 0;\\n     int count = 0;\\n     for(char c:list){\\n\\n         s1 = s1 + c;\\n          x++;\\n          if(x==k){\\n           list1.add(s1);\\n           s1 = \"\";\\n           x = 0;\\n          }\\n      }\\n      System.out.print(s1.length());\\n      if(s1.length()>0){\\n        while(s1.length()!=k){\\n            s1 = s1 + fill;\\n        }\\n        list1.add(s1);\\n      }\\n    String str[] = new String[list1.size()];\\n    for(String s2:list1){\\n        str[y] = s2;\\n        y++;\\n    }\\n\\n    return str;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n     ArrayList<Character>list = new ArrayList<>();\\n     ArrayList<String>list1 = new ArrayList<>();\\n\\n     for(char ch:s.toCharArray()){\\n         list.add(ch);\\n     }\\n     String s1 = \"\";\\n     int x = 0;\\n     int y = 0;\\n     int count = 0;\\n     for(char c:list){\\n\\n         s1 = s1 + c;\\n          x++;\\n          if(x==k){\\n           list1.add(s1);\\n           s1 = \"\";\\n           x = 0;\\n          }\\n      }\\n      System.out.print(s1.length());\\n      if(s1.length()>0){\\n        while(s1.length()!=k){\\n            s1 = s1 + fill;\\n        }\\n        list1.add(s1);\\n      }\\n    String str[] = new String[list1.size()];\\n    for(String s2:list1){\\n        str[y] = s2;\\n        y++;\\n    }\\n\\n    return str;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3995989,
                "title": "solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        a=[]\\n        for i in range(0,len(s)//k) :\\n            a.append(s[i*k:k*i+k:])\\n        if len(s)%k!=0 :\\n            a.append(s[len(s)-len(s)%k:len(s):])\\n        if len(s)%k!=0 :\\n            for i in range(len(a[len(a)-1]),k):\\n                a[len(a)-1]+=fill\\n        return a\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        a=[]\\n        for i in range(0,len(s)//k) :\\n            a.append(s[i*k:k*i+k:])\\n        if len(s)%k!=0 :\\n            a.append(s[len(s)-len(s)%k:len(s):])\\n        if len(s)%k!=0 :\\n            for i in range(len(a[len(a)-1]),k):\\n                a[len(a)-1]+=fill\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983786,
                "title": "divide-a-string-into-groups-of-size-k",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        size=len(s)\\n        result=[]\\n        c=0\\n        count,remainder=divmod(size,k)\\n        for i in range(0,count):\\n            result.append(s[c:c+k])\\n            c+=k\\n        if remainder!=0:\\n            result.append(s[c:]+fill*(k-remainder))\\n        return result\\n        \\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        size=len(s)\\n        result=[]\\n        c=0\\n        count,remainder=divmod(size,k)\\n        for i in range(0,count):\\n            result.append(s[c:c+k])\\n            c+=k\\n        if remainder!=0:\\n            result.append(s[c:]+fill*(k-remainder))\\n        return result\\n        \\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978739,
                "title": "clean-golang-solution-explains-itself",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1), no extra array allocated except `ret`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunc divideString(s string, k int, fill byte) []string {\\n    var ret []string \\n    mod := len(s) % k\\n    \\n    if mod != 0 {\\n        s += strings.Repeat(string(fill), k - mod)\\n    }\\n\\n    for i:=0; i<len(s); i+=k {\\n        ret = append(ret, s[i:i+k])\\n        //ret[i/k] = s[i:i+k]\\n    }\\n\\n    return ret\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc divideString(s string, k int, fill byte) []string {\\n    var ret []string \\n    mod := len(s) % k\\n    \\n    if mod != 0 {\\n        s += strings.Repeat(string(fill), k - mod)\\n    }\\n\\n    for i:=0; i<len(s); i+=k {\\n        ret = append(ret, s[i:i+k])\\n        //ret[i/k] = s[i:i+k]\\n    }\\n\\n    return ret\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978254,
                "title": "easy-python3-beats-97-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        t = \\'\\'\\n        r = []\\n        c = 0\\n        for ch in s:\\n            t += ch\\n            c += 1\\n            if c == k:\\n                r.append(t)\\n                t = \\'\\'\\n                c = 0\\n        if t != \\'\\':\\n            r.append(t)\\n        \\n        for i,st in enumerate(r):\\n            if len(st) != k:\\n                while(len(st) != k):\\n                    st += fill\\n                r[i]=st\\n        return(r)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        t = \\'\\'\\n        r = []\\n        c = 0\\n        for ch in s:\\n            t += ch\\n            c += 1\\n            if c == k:\\n                r.append(t)\\n                t = \\'\\'\\n                c = 0\\n        if t != \\'\\':\\n            r.append(t)\\n        \\n        for i,st in enumerate(r):\\n            if len(st) != k:\\n                while(len(st) != k):\\n                    st += fill\\n                r[i]=st\\n        return(r)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3929810,
                "title": "java-solution-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> list=new ArrayList<>();\\n        String str=\"\";\\n        int cnt=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(cnt!=k)\\n            {\\n                str+=s.charAt(i);\\n                cnt++;\\n            }\\n            else{\\n                list.add(str);\\n                str=\"\";\\n                str+=s.charAt(i);\\n                cnt=1;\\n            }\\n        }\\n\\n        if(!str.equals(\"\"))\\n        {\\n                while(str.length()!=k)\\n                {\\n                    str+=fill;\\n                }\\n                list.add(str);\\n        }\\n\\n        String arr[]=new String[list.size()];\\n        for(int j=0;j<list.size();j++)\\n        {\\n            arr[j]=list.get(j);\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> list=new ArrayList<>();\\n        String str=\"\";\\n        int cnt=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(cnt!=k)\\n            {\\n                str+=s.charAt(i);\\n                cnt++;\\n            }\\n            else{\\n                list.add(str);\\n                str=\"\";\\n                str+=s.charAt(i);\\n                cnt=1;\\n            }\\n        }\\n\\n        if(!str.equals(\"\"))\\n        {\\n                while(str.length()!=k)\\n                {\\n                    str+=fill;\\n                }\\n                list.add(str);\\n        }\\n\\n        String arr[]=new String[list.size()];\\n        for(int j=0;j<list.size();j++)\\n        {\\n            arr[j]=list.get(j);\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3909736,
                "title": "easiest-solution-to-divide-the-string-0ms-to-run-the-code-beats-100-of-the-use",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n\\n-> When s.length() % k != 0, the time complexity is **O((length + 1) * k)** .\\n->When s.length() % k == 0, the time complexity is **O(length * k)**.\\n\\n- Space complexity:\\n-> When s.length() % k != 0,  the space complexity is **O(length * k)**.\\n-> When s.length() % k == 0, the space complexity is **O(length * k)**.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> divide;\\n        int length = s.length()/k;\\n        int startIndex = 0;\\n        if(s.length()%k!= 0){\\n            \\n        for(int i=0;i<=length;i++){\\n            string part = s.substr(startIndex,k);\\n            while(part.length()!=k){\\n                part+= fill;\\n            }\\n            divide.push_back(part);\\n            startIndex+=k;\\n        }\\n        }\\n        else{\\n            for(int i=0;i<length;i++){\\n            string part = s.substr(startIndex,k);\\n            divide.push_back(part);\\n            startIndex+=k;\\n        }\\n        }\\n        \\n\\n        return divide;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> divide;\\n        int length = s.length()/k;\\n        int startIndex = 0;\\n        if(s.length()%k!= 0){\\n            \\n        for(int i=0;i<=length;i++){\\n            string part = s.substr(startIndex,k);\\n            while(part.length()!=k){\\n                part+= fill;\\n            }\\n            divide.push_back(part);\\n            startIndex+=k;\\n        }\\n        }\\n        else{\\n            for(int i=0;i<length;i++){\\n            string part = s.substr(startIndex,k);\\n            divide.push_back(part);\\n            startIndex+=k;\\n        }\\n        }\\n        \\n\\n        return divide;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905696,
                "title": "easy-c-solution-faster-than-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string>ans;\\n\\n        for(int i=0; i<s.size(); i+=k){\\n            string subStr = s.substr(i, k);\\n            if(subStr.size() == k){\\n                ans.push_back(subStr);\\n            }else{\\n                int diff = k-subStr.size();\\n                for(int j=0; j<diff; j++){\\n                    subStr += fill;\\n                }\\n                ans.push_back(subStr);\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string>ans;\\n\\n        for(int i=0; i<s.size(); i+=k){\\n            string subStr = s.substr(i, k);\\n            if(subStr.size() == k){\\n                ans.push_back(subStr);\\n            }else{\\n                int diff = k-subStr.size();\\n                for(int j=0; j<diff; j++){\\n                    subStr += fill;\\n                }\\n                ans.push_back(subStr);\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905366,
                "title": "java-simple-substring",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> result = new ArrayList<>();\\n        int i=0;\\n        while(i+k<s.length()){\\n            result.add(s.substring(i,i+k));\\n            i+=k;\\n        }\\n        if(i<s.length()){\\n            String last = s.substring(i,s.length());\\n            k-=last.length();\\n            while(k-->0)\\n                last+=fill;\\n            result.add(last);\\n        }\\n        return result.toArray(new String[0]);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        List<String> result = new ArrayList<>();\\n        int i=0;\\n        while(i+k<s.length()){\\n            result.add(s.substring(i,i+k));\\n            i+=k;\\n        }\\n        if(i<s.length()){\\n            String last = s.substring(i,s.length());\\n            k-=last.length();\\n            while(k-->0)\\n                last+=fill;\\n            result.add(last);\\n        }\\n        return result.toArray(new String[0]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3892998,
                "title": "rust",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn divide_string(s: String, k: i32, fill: char) -> Vec<String> {\\n        let mut res = vec![];\\n        let _w = s.chars().into_iter().collect::<Vec<_>>();\\n        let w = _w.chunks(k as usize);\\n        for j in w.into_iter(){\\n            if j.len() == k as usize{\\n                res.push(j.into_iter().collect::<String>());\\n            }else{\\n                let remain = k as usize -j.len();\\n                let mut m = j.into_iter().collect::<String>();\\n                for _ in 0..remain{\\n                    m.push(fill);\\n                }\\n                res.push(m);         \\n            }\\n        }\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn divide_string(s: String, k: i32, fill: char) -> Vec<String> {\\n        let mut res = vec![];\\n        let _w = s.chars().into_iter().collect::<Vec<_>>();\\n        let w = _w.chunks(k as usize);\\n        for j in w.into_iter(){\\n            if j.len() == k as usize{\\n                res.push(j.into_iter().collect::<String>());\\n            }else{\\n                let remain = k as usize -j.len();\\n                let mut m = j.into_iter().collect::<String>();\\n                for _ in 0..remain{\\n                    m.push(fill);\\n                }\\n                res.push(m);         \\n            }\\n        }\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3888944,
                "title": "simple-java-solution-beginner-friendly",
                "content": "\\n\\n# Approach\\nIterate over string and take k characters from string and if at the end if we get (size of string % k) elements then add char fill until string size become k and then you can get your final string aslo.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public String[] divideString(String s, int k, char fill) \\n    {\\n        List<String> list = new ArrayList<>();\\n        int n = s.length();\\n        \\n        int i = 0;\\n        while(i < n)\\n        {\\n            if(i + k < n)\\n            {\\n                list.add(s.substring(i, i + k));\\n                i += k;\\n            }\\n            else\\n            {\\n                String temp = \"\";\\n                while(i < n)\\n                {\\n                    temp += (s.charAt(i) + \"\");\\n                    i++;\\n                }\\n                while(temp.length() < k)\\n                {\\n                    temp += (fill + \"\");\\n                }\\n                list.add(temp);\\n            }\\n        }\\n        String ans[] = new String[list.size()];\\n        int idx = 0;\\n        for(String str : list)\\n        {\\n            ans[idx] = str;\\n            idx++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public String[] divideString(String s, int k, char fill) \\n    {\\n        List<String> list = new ArrayList<>();\\n        int n = s.length();\\n        \\n        int i = 0;\\n        while(i < n)\\n        {\\n            if(i + k < n)\\n            {\\n                list.add(s.substring(i, i + k));\\n                i += k;\\n            }\\n            else\\n            {\\n                String temp = \"\";\\n                while(i < n)\\n                {\\n                    temp += (s.charAt(i) + \"\");\\n                    i++;\\n                }\\n                while(temp.length() < k)\\n                {\\n                    temp += (fill + \"\");\\n                }\\n                list.add(temp);\\n            }\\n        }\\n        String ans[] = new String[list.size()];\\n        int idx = 0;\\n        for(String str : list)\\n        {\\n            ans[idx] = str;\\n            idx++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851895,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        \\n        vector<string> res{};\\n\\n        for(int i = 0; i < s.size(); i += k){\\n            res.push_back(s.substr(i, k));\\n        }\\n\\n        while(res.back().size() < k) \\n            res.back().push_back(fill);\\n\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        \\n        vector<string> res{};\\n\\n        for(int i = 0; i < s.size(); i += k){\\n            res.push_back(s.substr(i, k));\\n        }\\n\\n        while(res.back().size() < k) \\n            res.back().push_back(fill);\\n\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3828506,
                "title": "java-solution-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n    \\n       int num = (s.length() + k -1)/k;\\n        String[] arr  = new String[num];\\n        int j=0;\\n       \\n       for(int i=0; i<num; i++){\\n           StringBuilder str = new StringBuilder();\\n           int c=0;\\n           while(c != k){\\n               if(j < s.length()){\\n               str.append(s.charAt(j));\\n               j++;\\n               }else{\\n                     str.append(fill);\\n               }\\n               c++;\\n           }\\n           arr[i] = str.toString();\\n       }\\n       return arr;\\n        \\n    \\n}\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n    \\n       int num = (s.length() + k -1)/k;\\n        String[] arr  = new String[num];\\n        int j=0;\\n       \\n       for(int i=0; i<num; i++){\\n           StringBuilder str = new StringBuilder();\\n           int c=0;\\n           while(c != k){\\n               if(j < s.length()){\\n               str.append(s.charAt(j));\\n               j++;\\n               }else{\\n                     str.append(fill);\\n               }\\n               c++;\\n           }\\n           arr[i] = str.toString();\\n       }\\n       return arr;\\n        \\n    \\n}\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3826357,
                "title": "beats-90-of-solutions-hints-provided-as-well",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nDon\\'t look at the solutions. Instead use my hints:\\n\\n1. What are the necessary mathematical calculations required for you to complete this (i.e length, modulus operator, dividend, .....)\\n\\n2. Is there a way for you to check how many elements will be left to append with the fill character?\\n\\n3. How can you add the remaining characters left in input \"s\" with the \"fill\" character, maybe through a for-loop\\n\\nGood luck!\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe start of by creating an empty list called final which takes in all of the substrings that are complete (i.e those that can be completely filled with the characters present in s).\\n\\nNow we check if there are any characters left in s through the if-statement \"if remain != 0\". If this is false, it means that remain = 0 meaning, that there are no more elements left to append in s.\\n\\nHowever, if remain != 0 is true, then that means there are elements present in the list and thus we have to be append these. First, lets append these remaining elements into another list called part. \\n\\nNow to file the remaining elements so that the length of part = k, we will append the character \"fill\" as many times as required.\\n\\nLastly, we will convert part into a string and append this value to final and return final to give the answer :)\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(length // k\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(length + k) \\n# Code\\n```\\nclass Solution(object):\\n    def divideString(self, s, k, fill):\\n        length = (len(s))\\n        remainder = length % k\\n        index = 0 \\n        final = []\\n        \\n        while index < length//k:\\n            final.append(s[k*index:k*index + k])\\n            index = index + 1\\n            \\n            \\n        part = [] \\n        remain = ((length-(k*(index-1)+k))) # k - \\n        if remain != 0:\\n        \\n            part.append(s[-remain:])\\n            \\n            value = 0\\n            while value < k -remain:\\n                part.append(fill)\\n                value = value + 1\\n            \\n            \\n            part = \"\".join(part)\\n            final.append(part)\\n        \\n        \\n        return final\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def divideString(self, s, k, fill):\\n        length = (len(s))\\n        remainder = length % k\\n        index = 0 \\n        final = []\\n        \\n        while index < length//k:\\n            final.append(s[k*index:k*index + k])\\n            index = index + 1\\n            \\n            \\n        part = [] \\n        remain = ((length-(k*(index-1)+k))) # k - \\n        if remain != 0:\\n        \\n            part.append(s[-remain:])\\n            \\n            value = 0\\n            while value < k -remain:\\n                part.append(fill)\\n                value = value + 1\\n            \\n            \\n            part = \"\".join(part)\\n            final.append(part)\\n        \\n        \\n        return final\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3824373,
                "title": "java-script-code-fast-and-easy-solution-beats-100",
                "content": "\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n        // Get the length of the input string.\\n    let size = s.length;\\n    \\n    // Initialize a variable to keep track of the starting index of each divided part.\\n    let start = 0;\\n    \\n    // Initialize an empty array to store the divided strings.\\n    const array = [];\\n    \\n    // Loop through the input string, dividing it into parts of length k.\\n    while (start < size) {\\n        // Extract a part of the input string using slice().\\n        let part = s.slice(start, start + k);\\n        \\n        // If the extracted part is shorter than k, pad it with the fill character using padEnd().\\n        let check = part.padEnd(k, fill);\\n        \\n        // Add the divided string to the array.\\n        array.push(check);\\n        \\n        // Move the start index to the next part.\\n        start += k;\\n    }\\n    \\n    // Return the array containing the divided strings.\\n    return array;\\n};\\n```",
                "solutionTags": [
                    "Python",
                    "JavaScript",
                    "String",
                    "Simulation"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n        // Get the length of the input string.\\n    let size = s.length;\\n    \\n    // Initialize a variable to keep track of the starting index of each divided part.\\n    let start = 0;\\n    \\n    // Initialize an empty array to store the divided strings.\\n    const array = [];\\n    \\n    // Loop through the input string, dividing it into parts of length k.\\n    while (start < size) {\\n        // Extract a part of the input string using slice().\\n        let part = s.slice(start, start + k);\\n        \\n        // If the extracted part is shorter than k, pad it with the fill character using padEnd().\\n        let check = part.padEnd(k, fill);\\n        \\n        // Add the divided string to the array.\\n        array.push(check);\\n        \\n        // Move the start index to the next part.\\n        start += k;\\n    }\\n    \\n    // Return the array containing the divided strings.\\n    return array;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3823616,
                "title": "solution-using-ljust-and-scan-methods",
                "content": "# Approach\\nThe ljust method pads the string with fill on the right until its length becomes a multiple of k. We calculate the desired length using (s.length / k.to_f).ceil * k, which ensures we add enough fill to make the string length divisible by k.\\n\\nWe then use s.scan(/.{#{k}}/) to scan the string with a regular expression pattern that matches any k characters. This approach is more concise and doesn\\'t require constructing the regular expression manually.\\n# Complexity\\n- Time complexity:\\nO(len(s) / k)\\n\\n- Space complexity:\\nO(k + len(s) / k)\\n\\n# Code\\n```\\n# @param {String} s\\n# @param {Integer} k\\n# @param {Character} fill\\n# @return {String[]}\\ndef divide_string(s, k, fill)\\n  s = s.ljust((s.length / k.to_f).ceil * k, fill)\\n  s.scan(/.{#{k}}/)\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {String} s\\n# @param {Integer} k\\n# @param {Character} fill\\n# @return {String[]}\\ndef divide_string(s, k, fill)\\n  s = s.ljust((s.length / k.to_f).ceil * k, fill)\\n  s.scan(/.{#{k}}/)\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3816468,
                "title": "divide-a-string-into-groups-of-size-k",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        ArrayList<String> arr = new ArrayList<String>();\\n        for(int i=0;i<s.length();i=i+k)\\n        {\\n            if(i+k<=s.length())\\n            arr.add(s.substring(i,i+k));\\n            else\\n            arr.add(s.substring(i,s.length()));\\n        }\\n        String[] str = new String[arr.size()];\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(arr.get(i).length()!=k)\\n            {\\n                String s1 = arr.get(i);\\n                for(int j=arr.get(i).length();j<k;j++)\\n                {\\n                    s1=s1+fill;\\n                }\\n                str[i] = s1;\\n            }\\n            else\\n            str[i] = arr.get(i);\\n        }\\n        return str;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        ArrayList<String> arr = new ArrayList<String>();\\n        for(int i=0;i<s.length();i=i+k)\\n        {\\n            if(i+k<=s.length())\\n            arr.add(s.substring(i,i+k));\\n            else\\n            arr.add(s.substring(i,s.length()));\\n        }\\n        String[] str = new String[arr.size()];\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(arr.get(i).length()!=k)\\n            {\\n                String s1 = arr.get(i);\\n                for(int j=arr.get(i).length();j<k;j++)\\n                {\\n                    s1=s1+fill;\\n                }\\n                str[i] = s1;\\n            }\\n            else\\n            str[i] = arr.get(i);\\n        }\\n        return str;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3811197,
                "title": "very-easy-jebasraja",
                "content": "# Intuition:KARUNYA UNIVERSITY::ACCENTURE\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n {\\n    public String[] divideString(String s, int k, char fill) \\n    {\\n        \\nString[] words;\\n\\n\\nSystem.out.println(\"length-->\"+s.length());\\n\\n//balanced String\\nif (s.length()%k==0) \\n{\\n  words=new String[s.length()/k]; \\n  System.out.println(\"length of words\"+words.length);\\n\\n  String str=\"\";\\n\\n  for (int i = 1; i <=s.length(); i++) \\n  { \\n    if (i%k==0) \\n    {\\n      str+=s.charAt(i-1);\\n     // System.out.println(str);  \\n      words[((i/k)-1)]=str;\\n      str=\"\";\\n    } \\n    else \\n    {\\n      str+=s.charAt(i-1);\\n    }  \\n  }  \\n}\\n//if remainder\\nelse\\n{\\n  words=new String[(s.length()/k)+1];\\n  System.out.println(\"length of words array--->\"+words.length);\\n  String str=\"\";\\n \\n   for (int i = 1; i <=s.length()-(s.length()%k); i++) \\n  {\\n        //System.out.println(i);\\n       \\n    if (i%k==0) \\n    {\\n      str+=s.charAt(i-1);\\n      //System.out.println(str);  \\n      words[((i/k)-1)]=str;\\n      str=\"\";\\n    } \\n    else \\n    {\\n      str+=s.charAt(i-1);\\n    }\\n        \\n }\\n  System.out.println(s.length()-s.length()%k);\\n  int start=s.length()-s.length()%k;\\n  str=\"\";\\n  for (int i = 0; i < k; i++) \\n  {    \\n      if (start<s.length()) \\n      {    \\n        str+=s.charAt(start);\\n        start++;\\n      }\\n      else\\n      {\\n       str+=fill;\\n      }\\n  }\\n \\n  words[words.length-1]=str;\\n  \\n}\\n\\nreturn words;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n {\\n    public String[] divideString(String s, int k, char fill) \\n    {\\n        \\nString[] words;\\n\\n\\nSystem.out.println(\"length-->\"+s.length());\\n\\n//balanced String\\nif (s.length()%k==0) \\n{\\n  words=new String[s.length()/k]; \\n  System.out.println(\"length of words\"+words.length);\\n\\n  String str=\"\";\\n\\n  for (int i = 1; i <=s.length(); i++) \\n  { \\n    if (i%k==0) \\n    {\\n      str+=s.charAt(i-1);\\n     // System.out.println(str);  \\n      words[((i/k)-1)]=str;\\n      str=\"\";\\n    } \\n    else \\n    {\\n      str+=s.charAt(i-1);\\n    }  \\n  }  \\n}\\n//if remainder\\nelse\\n{\\n  words=new String[(s.length()/k)+1];\\n  System.out.println(\"length of words array--->\"+words.length);\\n  String str=\"\";\\n \\n   for (int i = 1; i <=s.length()-(s.length()%k); i++) \\n  {\\n        //System.out.println(i);\\n       \\n    if (i%k==0) \\n    {\\n      str+=s.charAt(i-1);\\n      //System.out.println(str);  \\n      words[((i/k)-1)]=str;\\n      str=\"\";\\n    } \\n    else \\n    {\\n      str+=s.charAt(i-1);\\n    }\\n        \\n }\\n  System.out.println(s.length()-s.length()%k);\\n  int start=s.length()-s.length()%k;\\n  str=\"\";\\n  for (int i = 0; i < k; i++) \\n  {    \\n      if (start<s.length()) \\n      {    \\n        str+=s.charAt(start);\\n        start++;\\n      }\\n      else\\n      {\\n       str+=fill;\\n      }\\n  }\\n \\n  words[words.length-1]=str;\\n  \\n}\\n\\nreturn words;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3806079,
                "title": "simple",
                "content": "\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1) We donot consider return vector.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n       int n=s.length();\\n       vector<string>ans;\\n        string a;\\n\\n       for(int i=0;i<n;i=i+k){\\n           a=s.substr(i,k);\\n           if(a.size()!=k){\\n               a.append(k-a.size(),fill);\\n           }\\n            ans.push_back(a); \\n           \\n       } \\n       return ans;\\n    }\\n};\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/f1fdca2b-f4d4-46cf-b9bb-d52e64fd71ca_1690122888.1268222.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n       int n=s.length();\\n       vector<string>ans;\\n        string a;\\n\\n       for(int i=0;i<n;i=i+k){\\n           a=s.substr(i,k);\\n           if(a.size()!=k){\\n               a.append(k-a.size(),fill);\\n           }\\n            ans.push_back(a); \\n           \\n       } \\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3803728,
                "title": "c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n = s.size();\\n\\n        if(n%k){\\n            int x = n%k;\\n            x = k-x;\\n            cout << x;\\n\\n            while(x--){\\n                s += fill;\\n            }\\n        }\\n\\n        n = s.size();\\n\\n        vector<string> ans;\\n\\n        int i = 0;\\n        while(i < n){\\n            ans.push_back(s.substr(i, k));\\n            i += k;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n = s.size();\\n\\n        if(n%k){\\n            int x = n%k;\\n            x = k-x;\\n            cout << x;\\n\\n            while(x--){\\n                s += fill;\\n            }\\n        }\\n\\n        n = s.size();\\n\\n        vector<string> ans;\\n\\n        int i = 0;\\n        while(i < n){\\n            ans.push_back(s.substr(i, k));\\n            i += k;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3792544,
                "title": "80-javascript-runtime-o-n-n-building-up-our-substrings-execution-flow-control",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> Execution Flow Control.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. --> We loop through the main string, and build up our to be pushed in string until it reaches a given K length, we push it in, and restart. We cover the EDGE CASE where there are not enough elements in the last substring by checking its length. if it does have a length, it means that it did not reach our first if statement, therefore the loop ended\\nwithout gaining our K length. So we deal with that with a simple while loop.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> O(n*n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ --> \\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n    let resultArray = [];\\n    let resultingSubstring = \"\";\\n    for (let eachCharacter = 0; eachCharacter < s.length; eachCharacter++) {\\n        resultingSubstring = resultingSubstring + s[eachCharacter];\\n        if (resultingSubstring.length === k) {\\n            resultArray.push(resultingSubstring);\\n            resultingSubstring = \"\";\\n        }\\n    }\\n    if (resultingSubstring.length) {\\n        while (resultingSubstring.length !== k) {\\n            resultingSubstring = resultingSubstring + fill;\\n        }\\n        resultArray.push(resultingSubstring);\\n    }\\n    return resultArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n    let resultArray = [];\\n    let resultingSubstring = \"\";\\n    for (let eachCharacter = 0; eachCharacter < s.length; eachCharacter++) {\\n        resultingSubstring = resultingSubstring + s[eachCharacter];\\n        if (resultingSubstring.length === k) {\\n            resultArray.push(resultingSubstring);\\n            resultingSubstring = \"\";\\n        }\\n    }\\n    if (resultingSubstring.length) {\\n        while (resultingSubstring.length !== k) {\\n            resultingSubstring = resultingSubstring + fill;\\n        }\\n        resultArray.push(resultingSubstring);\\n    }\\n    return resultArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3788060,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n\\n        if (k > s.length()) {\\n            StringBuilder sb = new StringBuilder(s);\\n            int diff = k - s.length();\\n            while (diff-- > 0) {\\n                sb.append(fill);\\n            }\\n            return new String[] {sb.toString()};\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        int length = s.length();\\n        int l = 0;\\n        while (length > 0) {\\n            length -= k;\\n            sb.append(s, l, Math.min(l + k, s.length())).append(\",\");\\n            l = l + k <= s.length() ? l += k : s.length();\\n            if ((length > 0 && length < k) || s.length() < k) {\\n                int diff = k - length;\\n                length -= k;\\n                sb.append(s, l, s.length());\\n                while (diff-- > 0) {\\n                    sb.append(fill);\\n                }\\n            }\\n        }\\n        return sb.toString().split(\",\");\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n\\n        if (k > s.length()) {\\n            StringBuilder sb = new StringBuilder(s);\\n            int diff = k - s.length();\\n            while (diff-- > 0) {\\n                sb.append(fill);\\n            }\\n            return new String[] {sb.toString()};\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        int length = s.length();\\n        int l = 0;\\n        while (length > 0) {\\n            length -= k;\\n            sb.append(s, l, Math.min(l + k, s.length())).append(\",\");\\n            l = l + k <= s.length() ? l += k : s.length();\\n            if ((length > 0 && length < k) || s.length() < k) {\\n                int diff = k - length;\\n                length -= k;\\n                sb.append(s, l, s.length());\\n                while (diff-- > 0) {\\n                    sb.append(fill);\\n                }\\n            }\\n        }\\n        return sb.toString().split(\",\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3786390,
                "title": "c-0ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nvector<string> divideString(string s, int k, char fill) {\\n        \\n        int temp = 0;\\n        int cnt = 0;\\n        int cnt_k = 0;\\n        vector<string> ret;\\n        string str;\\n\\n        temp = s.length()%k;\\n\\n        while (cnt < s.length() - temp)\\n        {\\n            if (cnt_k < k)\\n            {\\n                // snprintf(temp_s,1,\"%c\",s[cnt]);\\n                str += s[cnt];\\n                cnt_k++;\\n                cnt++;\\n            }\\n            else\\n            {\\n                cnt_k = 0;\\n                ret.push_back(str);\\n                str.clear();\\n                // memset((char*)temp_s,0,k);\\n            }\\n\\n        }\\n\\n        if(!str.empty()) \\n        {\\n            ret.push_back(str);\\n            str.clear();\\n        }\\n\\n        if ( temp != 0)\\n        {\\n            //append last char\\n\\n            for (int j = 0; j < temp; j++)\\n            {\\n                str += s[s.length() - temp + j];\\n            }\\n            \\n\\n            for (int i = 0; i < k-temp; i++)\\n            {\\n                str += fill;\\n            }\\n\\n            ret.push_back(str);\\n        }\\n        \\n        \\n        return ret;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nvector<string> divideString(string s, int k, char fill) {\\n        \\n        int temp = 0;\\n        int cnt = 0;\\n        int cnt_k = 0;\\n        vector<string> ret;\\n        string str;\\n\\n        temp = s.length()%k;\\n\\n        while (cnt < s.length() - temp)\\n        {\\n            if (cnt_k < k)\\n            {\\n                // snprintf(temp_s,1,\"%c\",s[cnt]);\\n                str += s[cnt];\\n                cnt_k++;\\n                cnt++;\\n            }\\n            else\\n            {\\n                cnt_k = 0;\\n                ret.push_back(str);\\n                str.clear();\\n                // memset((char*)temp_s,0,k);\\n            }\\n\\n        }\\n\\n        if(!str.empty()) \\n        {\\n            ret.push_back(str);\\n            str.clear();\\n        }\\n\\n        if ( temp != 0)\\n        {\\n            //append last char\\n\\n            for (int j = 0; j < temp; j++)\\n            {\\n                str += s[s.length() - temp + j];\\n            }\\n            \\n\\n            for (int i = 0; i < k-temp; i++)\\n            {\\n                str += fill;\\n            }\\n\\n            ret.push_back(str);\\n        }\\n        \\n        \\n        return ret;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3786328,
                "title": "by-07chrono-cpp-the-best-solution-ever",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int L = s.length();\\n        int n = L/3, cnt = 0, i = 0, j = 0, m = 0, denta;\\n        string tmp = \"\";\\n        vector<string> out;\\n        bool flag = false;\\n        if(L%k == 0)\\n            flag = true;\\n        if(L < k)\\n        {\\n            denta = k - L;\\n            while(i++ < denta)\\n            {\\n                s += fill;\\n            }\\n            out = {s};\\n        }\\n        else\\n        {\\n            i = 0;\\n            for(char w: s)\\n            {\\n                if(i<k)\\n                {\\n                    tmp += w;\\n                    i++;\\n                    if(j == L-1 && flag == true)\\n                        out.push_back(tmp);\\n                }\\n                else\\n                {\\n                    out.push_back(tmp);\\n                    cnt += 1;\\n                    i = 1;\\n                    tmp = w;\\n                    if(j == L-1 && flag == true)\\n                        out.push_back(tmp);\\n                }\\n                j++;            \\n            }\\n            if(flag == false)\\n            {\\n                denta = k - tmp.length();\\n                i = 0;\\n                while(i++<denta)\\n                {\\n                    tmp += fill;\\n                }\\n                out.push_back(tmp);\\n            }\\n        }\\n        return out;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int L = s.length();\\n        int n = L/3, cnt = 0, i = 0, j = 0, m = 0, denta;\\n        string tmp = \"\";\\n        vector<string> out;\\n        bool flag = false;\\n        if(L%k == 0)\\n            flag = true;\\n        if(L < k)\\n        {\\n            denta = k - L;\\n            while(i++ < denta)\\n            {\\n                s += fill;\\n            }\\n            out = {s};\\n        }\\n        else\\n        {\\n            i = 0;\\n            for(char w: s)\\n            {\\n                if(i<k)\\n                {\\n                    tmp += w;\\n                    i++;\\n                    if(j == L-1 && flag == true)\\n                        out.push_back(tmp);\\n                }\\n                else\\n                {\\n                    out.push_back(tmp);\\n                    cnt += 1;\\n                    i = 1;\\n                    tmp = w;\\n                    if(j == L-1 && flag == true)\\n                        out.push_back(tmp);\\n                }\\n                j++;            \\n            }\\n            if(flag == false)\\n            {\\n                denta = k - tmp.length();\\n                i = 0;\\n                while(i++<denta)\\n                {\\n                    tmp += fill;\\n                }\\n                out.push_back(tmp);\\n            }\\n        }\\n        return out;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3780900,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> result;\\n        int start = 0;\\n        while (start < s.length())\\n        {\\n            string str = s.substr(start, k);\\n            result.push_back(str);\\n            start += k;\\n            if ( (start - s.length()) > 0 )\\n            {\\n                result.back().resize(k, fill);\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> result;\\n        int start = 0;\\n        while (start < s.length())\\n        {\\n            string str = s.substr(start, k);\\n            result.push_back(str);\\n            start += k;\\n            if ( (start - s.length()) > 0 )\\n            {\\n                result.back().resize(k, fill);\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3774146,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        int i=0 , j=k;\\n        string str = \"\";\\n        while (i < s.length()){\\n            str += s[i];\\n            i++;\\n            j--;\\n            if (j==0){\\n                ans.push_back(str);\\n                j = k;\\n                str = \"\";\\n            }\\n        }\\n        if (s.length() % k != 0){\\n            j = k-str.length();\\n            while (j>0){\\n                str += fill;\\n                j--;\\n            }    \\n            ans.push_back(str);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        int i=0 , j=k;\\n        string str = \"\";\\n        while (i < s.length()){\\n            str += s[i];\\n            i++;\\n            j--;\\n            if (j==0){\\n                ans.push_back(str);\\n                j = k;\\n                str = \"\";\\n            }\\n        }\\n        if (s.length() % k != 0){\\n            j = k-str.length();\\n            while (j>0){\\n                str += fill;\\n                j--;\\n            }    \\n            ans.push_back(str);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3770778,
                "title": "c-solution",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public string[] DivideString(string s, int k, char fill) {\\n        StringBuilder builder = new();\\n        builder.Length = k;\\n        int length1 = s.Length;\\n        int length2 = (int)Math.Ceiling((double)length1 / k);\\n        string[] result = new string[length2];\\n\\n        for (int i = 0; i < length2; i++){\\n            int current = i * k;\\n            \\n            for (int index = current; index < current + k; index++){\\n                builder[index % k] = index < length1 ? s[index] : fill;\\n            }\\n            result[i] = builder.ToString();\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public string[] DivideString(string s, int k, char fill) {\\n        StringBuilder builder = new();\\n        builder.Length = k;\\n        int length1 = s.Length;\\n        int length2 = (int)Math.Ceiling((double)length1 / k);\\n        string[] result = new string[length2];\\n\\n        for (int i = 0; i < length2; i++){\\n            int current = i * k;\\n            \\n            for (int index = current; index < current + k; index++){\\n                builder[index % k] = index < length1 ? s[index] : fill;\\n            }\\n            result[i] = builder.ToString();\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3768606,
                "title": "easy-solution-in-c",
                "content": "# Intuition\\n\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string>ans;\\n        string str;\\n        for(int i=0;i<s.length();i++){\\n            if((i+1) % k==0){\\n                str+=s[i];\\n                if(str.length()==k){\\n                    ans.push_back(str);\\n                    str=\"\";\\n                }\\n                else{\\n                    for(int i=str.length();i<=k;i++){\\n                        str+=fill;\\n                    }\\n                    ans.push_back(str);\\n                    str=\"\";\\n                }\\n            }\\n            else{\\n                str+=s[i];\\n            }\\n        }\\n        if(str==\"\")\\n        return ans;\\n\\n         for(int i=str.length();i<k;i++){\\n                        str+=fill;\\n                    }\\n                     ans.push_back(str);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string>ans;\\n        string str;\\n        for(int i=0;i<s.length();i++){\\n            if((i+1) % k==0){\\n                str+=s[i];\\n                if(str.length()==k){\\n                    ans.push_back(str);\\n                    str=\"\";\\n                }\\n                else{\\n                    for(int i=str.length();i<=k;i++){\\n                        str+=fill;\\n                    }\\n                    ans.push_back(str);\\n                    str=\"\";\\n                }\\n            }\\n            else{\\n                str+=s[i];\\n            }\\n        }\\n        if(str==\"\")\\n        return ans;\\n\\n         for(int i=str.length();i<k;i++){\\n                        str+=fill;\\n                    }\\n                     ans.push_back(str);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3767614,
                "title": "c-easy-method",
                "content": "\\n# Approach\\nFirst while loop check if it needs to fill the char, and in the for loop is to divide the string into substring and save into the vector.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        while(s.size()%k!=0){\\n            s+=fill;\\n        }\\n        for(int i=0;i<s.size();i+=k){\\n            string temp=s.substr(i,k);\\n            ans.push_back(temp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        while(s.size()%k!=0){\\n            s+=fill;\\n        }\\n        for(int i=0;i<s.size();i+=k){\\n            string temp=s.substr(i,k);\\n            ans.push_back(temp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3759428,
                "title": "python-simple-python-solution",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 58 ms, faster than 6.07% of Python3 online submissions for Divide a String Into Groups of Size k.\\n# Memory Usage: 16.2 MB, less than 97.15% of Python3 online submissions for Divide a String Into Groups of Size k.\\n\\n\\tclass Solution:\\n\\t\\tdef divideString(self, s: str, k: int, fill: str) -> List[str]:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\tcurrent_count = 0\\n\\t\\t\\tcurrent_group = \\'\\'\\n\\n\\t\\t\\tfor index in range(len(s)):\\n\\n\\t\\t\\t\\tcurrent_group = current_group + s[index]\\n\\t\\t\\t\\tcurrent_count = current_count + 1\\n\\n\\t\\t\\t\\tif current_count == k:\\n\\t\\t\\t\\t\\tresult.append(current_group)\\n\\t\\t\\t\\t\\tcurrent_count = 0\\n\\t\\t\\t\\t\\tcurrent_group = \\'\\'\\n\\n\\t\\t\\t\\tif index == len(s) - 1 and current_count != 0 and current_count < k:\\n\\n\\t\\t\\t\\t\\tresult.append(current_group + fill * (k - current_count)) \\n\\n\\t\\t\\treturn result\\n\\t\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 58 ms, faster than 6.07% of Python3 online submissions for Divide a String Into Groups of Size k.\\n# Memory Usage: 16.2 MB, less than 97.15% of Python3 online submissions for Divide a String Into Groups of Size k.\\n\\n\\tclass Solution:\\n\\t\\tdef divideString(self, s: str, k: int, fill: str) -> List[str]:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\tcurrent_count = 0\\n\\t\\t\\tcurrent_group = \\'\\'\\n\\n\\t\\t\\tfor index in range(len(s)):\\n\\n\\t\\t\\t\\tcurrent_group = current_group + s[index]\\n\\t\\t\\t\\tcurrent_count = current_count + 1\\n\\n\\t\\t\\t\\tif current_count == k:\\n\\t\\t\\t\\t\\tresult.append(current_group)\\n\\t\\t\\t\\t\\tcurrent_count = 0\\n\\t\\t\\t\\t\\tcurrent_group = \\'\\'\\n\\n\\t\\t\\t\\tif index == len(s) - 1 and current_count != 0 and current_count < k:\\n\\n\\t\\t\\t\\t\\tresult.append(current_group + fill * (k - current_count)) \\n\\n\\t\\t\\treturn result\\n\\t\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 3758110,
                "title": "easy-go-solution",
                "content": "```\\nfunc divideString(s string, k int, fill byte) []string {\\n        n := len(s)\\n        m := n / k\\n        div := n % k\\n        rem := k - div\\n        if div != 0 {\\n                m++\\n        }\\n\\n        res := make([]string, 0, m)\\n\\n        chars := make([]byte, 0, k)\\n        for i := 0; i < n; i++ {\\n                chars = append(chars, s[i])\\n                if (i+1)%k == 0 {\\n                        res = append(res, string(chars))\\n                        chars = make([]byte, 0, k)\\n                }\\n        }\\n\\n        if div != 0 {\\n                chars = fillByte(chars, fill, rem)\\n                res = append(res, string(chars))\\n        }\\n\\n        return res\\n}\\n\\nfunc fillByte(chars []byte, fill byte, times int) []byte {\\n        for i := 0; i < times; i++ {\\n                chars = append(chars, fill)\\n        }\\n\\n        return chars\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc divideString(s string, k int, fill byte) []string {\\n        n := len(s)\\n        m := n / k\\n        div := n % k\\n        rem := k - div\\n        if div != 0 {\\n                m++\\n        }\\n\\n        res := make([]string, 0, m)\\n\\n        chars := make([]byte, 0, k)\\n        for i := 0; i < n; i++ {\\n                chars = append(chars, s[i])\\n                if (i+1)%k == 0 {\\n                        res = append(res, string(chars))\\n                        chars = make([]byte, 0, k)\\n                }\\n        }\\n\\n        if div != 0 {\\n                chars = fillByte(chars, fill, rem)\\n                res = append(res, string(chars))\\n        }\\n\\n        return res\\n}\\n\\nfunc fillByte(chars []byte, fill byte, times int) []byte {\\n        for i := 0; i < times; i++ {\\n                chars = append(chars, fill)\\n        }\\n\\n        return chars\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3756344,
                "title": "c-stack-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n\\n# Code\\n```\\npublic class Solution {\\n    public string[] DivideString(string s, int k, char fill) {\\n        List<string> Ans = new List<string>();\\n        Stack<char> st = new Stack<char>();\\n        int i = 0;\\n        foreach(char c in s){\\n            i++;\\n            st.Push(c);\\n            if(i == k){\\n                Ans.Add(string.Concat(st.Reverse()));\\n                st.Clear();\\n                i = 0;\\n            }\\n        }\\n        if(i > 0){\\n        while(i < k){\\n            st.Push(fill);\\n            i++;\\n        }\\n        Ans.Add(string.Concat(st.Reverse()));\\n        }\\n        return(Ans.ToArray());\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public string[] DivideString(string s, int k, char fill) {\\n        List<string> Ans = new List<string>();\\n        Stack<char> st = new Stack<char>();\\n        int i = 0;\\n        foreach(char c in s){\\n            i++;\\n            st.Push(c);\\n            if(i == k){\\n                Ans.Add(string.Concat(st.Reverse()));\\n                st.Clear();\\n                i = 0;\\n            }\\n        }\\n        if(i > 0){\\n        while(i < k){\\n            st.Push(fill);\\n            i++;\\n        }\\n        Ans.Add(string.Concat(st.Reverse()));\\n        }\\n        return(Ans.ToArray());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3752863,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s , int k , char f){\\n        vector<string>v;\\n        string str;\\n        for(int i=0; i<s.size(); ){\\n            int p = k;\\n            str=\"\";\\n            while(p-- && i<s.size()){\\n                str+=s[i++];\\n            }\\n            if(str.size()==k){\\n                v.push_back(str);\\n            }\\n        }\\n        if(str.size()==k){\\n            return v;\\n        }\\n        int g = k-str.size();\\n        while(g--){\\n            str+=f;\\n        }\\n        v.push_back(str);\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s , int k , char f){\\n        vector<string>v;\\n        string str;\\n        for(int i=0; i<s.size(); ){\\n            int p = k;\\n            str=\"\";\\n            while(p-- && i<s.size()){\\n                str+=s[i++];\\n            }\\n            if(str.size()==k){\\n                v.push_back(str);\\n            }\\n        }\\n        if(str.size()==k){\\n            return v;\\n        }\\n        int g = k-str.size();\\n        while(g--){\\n            str+=f;\\n        }\\n        v.push_back(str);\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3749875,
                "title": "3-lines-of-code",
                "content": "# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        if len(s) % k != 0:\\n            s = s + fill * (len(s) // k * k + k - len(s))\\n        return [s[i:i + k] for i in range(0, len(s), k)]\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        if len(s) % k != 0:\\n            s = s + fill * (len(s) // k * k + k - len(s))\\n        return [s[i:i + k] for i in range(0, len(s), k)]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3726052,
                "title": "java-simple-mod",
                "content": "Code is self-explanatory, but feel free to ask questions\\n>**T/S:** O(n)/O(n), where n = size(s)\\n```\\npublic String[] divideString(String s, int k, char fill) {\\n\\tvar i = 0;\\n\\tvar n = s.length();\\n\\tvar remainder = n % k;\\n\\tvar groups = new ArrayList<String>();\\n\\n\\tfor (; i + k <= n; i += k)\\n\\t\\tgroups.add(s.substring(i, i + k));\\n\\n\\tif (remainder != 0)\\n\\t\\tgroups.add(s.substring(i) + String.valueOf(fill).repeat(k - remainder));\\n\\n\\treturn groups.toArray(new String[0]);\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic String[] divideString(String s, int k, char fill) {\\n\\tvar i = 0;\\n\\tvar n = s.length();\\n\\tvar remainder = n % k;\\n\\tvar groups = new ArrayList<String>();\\n\\n\\tfor (; i + k <= n; i += k)\\n\\t\\tgroups.add(s.substring(i, i + k));\\n\\n\\tif (remainder != 0)\\n\\t\\tgroups.add(s.substring(i) + String.valueOf(fill).repeat(k - remainder));\\n\\n\\treturn groups.toArray(new String[0]);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3722412,
                "title": "clean-and-clear-solution-easy-to-understand",
                "content": "\\n# Code\\n```\\nconst divideString = (s, k, fill) => {\\n    let result = [];\\n    let number_of_parts = Math.ceil(s.length / k);\\n    let number_of_fills = (k * number_of_parts) - s.length;\\n    let modifiedString = s;\\n\\n    while (number_of_fills > 0) {\\n        modifiedString += fill;\\n        number_of_fills--;\\n    }\\n\\n    while (number_of_parts > 0) {\\n        result.push(modifiedString.substr(0, k));\\n        modifiedString = modifiedString.substr(k);\\n        number_of_parts--;\\n    }\\n\\n    return result;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nconst divideString = (s, k, fill) => {\\n    let result = [];\\n    let number_of_parts = Math.ceil(s.length / k);\\n    let number_of_fills = (k * number_of_parts) - s.length;\\n    let modifiedString = s;\\n\\n    while (number_of_fills > 0) {\\n        modifiedString += fill;\\n        number_of_fills--;\\n    }\\n\\n    while (number_of_parts > 0) {\\n        result.push(modifiedString.substr(0, k));\\n        modifiedString = modifiedString.substr(k);\\n        number_of_parts--;\\n    }\\n\\n    return result;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3711084,
                "title": "easy-c-solution-simple-string-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        reverse(s.begin(),s.end());\\n        string t=\"\";\\n\\n        while(s.size()){\\n            t.push_back(s.back());\\n            s.pop_back();\\n            if(t.size()==k)ans.push_back(t),t.clear();\\n        }\\n\\n        while(t.size()==0)return ans;\\n\\n        while(t.size()!=k)t.push_back(fill);\\n        ans.push_back(t);\\n\\n        for(auto x:ans)cout<<x<<endl;\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        reverse(s.begin(),s.end());\\n        string t=\"\";\\n\\n        while(s.size()){\\n            t.push_back(s.back());\\n            s.pop_back();\\n            if(t.size()==k)ans.push_back(t),t.clear();\\n        }\\n\\n        while(t.size()==0)return ans;\\n\\n        while(t.size()!=k)t.push_back(fill);\\n        ans.push_back(t);\\n\\n        for(auto x:ans)cout<<x<<endl;\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3706042,
                "title": "easiest-just-2-lines-clear-explanation-list-comprehension",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nOn reading the question once, it is clear that we are required to take string slices. So..., just do that.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Make a list to hold all the slices.\\n    - Do it seperately and then run a loop appending each slice with every iteration.\\n    - Or, use list comprehension (as done here).\\n2. Lastly, change the last slice by adding required number of *fill*. Required number will be \"*k - len(last_slice)*\" because each slice must be of *k* length, so whatever length is left, add that number of *fill*.\\n3. Smile.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n/k)\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        ans = [s[i:i+k] for i in range(0,len(s),k)] # [f(x) for x in sequence]\\n        ans[-1] = ans[-1]+fill*(k-len(ans[-1])) #changing last slice\\n        return ans\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        ans = [s[i:i+k] for i in range(0,len(s),k)] # [f(x) for x in sequence]\\n        ans[-1] = ans[-1]+fill*(k-len(ans[-1])) #changing last slice\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3703936,
                "title": "php-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param Integer $k\\n     * @param String $fill\\n     * @return String[]\\n     */\\n    function divideString($s, $k, $fill) {\\n         $result = [];\\n        for($i=0; $i<strlen($s); $i+=$k){\\n          $str = substr($s, $i, $k);\\n          if(strlen($str) != $k){\\n            while(strlen($str) < $k){\\n              $str .= $fill;\\n            }\\n          }\\n          $result[] = $str;\\n           \\n        }\\n        return $result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param Integer $k\\n     * @param String $fill\\n     * @return String[]\\n     */\\n    function divideString($s, $k, $fill) {\\n         $result = [];\\n        for($i=0; $i<strlen($s); $i+=$k){\\n          $str = substr($s, $i, $k);\\n          if(strlen($str) != $k){\\n            while(strlen($str) < $k){\\n              $str .= $fill;\\n            }\\n          }\\n          $result[] = $str;\\n           \\n        }\\n        return $result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3699435,
                "title": "c-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n    int n=s.size();\\n    int kp=k-n%k;\\n    if(n%k){\\n    for(int i=0;i<kp;i++){\\n        s+=fill;\\n    }}\\n    vector<string> ans;  \\n    string m;  \\n    for(int i=1;i<=s.size();i++){\\n        if(i%k==0)\\n        {\\n            m+=s[i-1];\\n            ans.push_back(m);\\n            m=\"\";\\n        } else {\\n            m+=s[i-1];\\n        }\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n    int n=s.size();\\n    int kp=k-n%k;\\n    if(n%k){\\n    for(int i=0;i<kp;i++){\\n        s+=fill;\\n    }}\\n    vector<string> ans;  \\n    string m;  \\n    for(int i=1;i<=s.size();i++){\\n        if(i%k==0)\\n        {\\n            m+=s[i-1];\\n            ans.push_back(m);\\n            m=\"\";\\n        } else {\\n            m+=s[i-1];\\n        }\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3689805,
                "title": "using-ljust",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. --> here we python inbuilt function **s.ljust()** which used to create a string of fixed size length.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        l=[]\\n        for i in range(0,len(s),k):\\n            l.append(s[i:i+k].ljust(k,fill))\\n        return l\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        l=[]\\n        for i in range(0,len(s),k):\\n            l.append(s[i:i+k].ljust(k,fill))\\n        return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3688344,
                "title": "c-easy-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        string tmp = \"\";\\n        for(int i = 0; i < s.size(); i++){\\n            tmp+=s[i];\\n            if(tmp.size() == k){\\n                ans.push_back(tmp);\\n                tmp = \"\";\\n            }\\n        }\\n        if(tmp != \"\"){\\n            while(tmp != \"\" && tmp.size() < k){\\n                tmp+=fill;\\n            }\\n            ans.push_back(tmp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        string tmp = \"\";\\n        for(int i = 0; i < s.size(); i++){\\n            tmp+=s[i];\\n            if(tmp.size() == k){\\n                ans.push_back(tmp);\\n                tmp = \"\";\\n            }\\n        }\\n        if(tmp != \"\"){\\n            while(tmp != \"\" && tmp.size() < k){\\n                tmp+=fill;\\n            }\\n            ans.push_back(tmp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3687106,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity:  $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:  $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n    const result = [];\\n    for (let i = 0; i < s.length; i += k) {\\n        let str = \\'\\';\\n        for (let j = i; j < k + i; j++) {\\n            str += s[j] || fill;\\n        }\\n        result.push(str);\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n    const result = [];\\n    for (let i = 0; i < s.length; i += k) {\\n        let str = \\'\\';\\n        for (let j = i; j < k + i; j++) {\\n            str += s[j] || fill;\\n        }\\n        result.push(str);\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3664475,
                "title": "java-simple-solution-stringbuilder-96-faster",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    public String[] divideString(String s, int k, char fill) {\\n        if (s.length() == k) {\\n            return new String[]{s};\\n        }\\n\\n        int stringLength = s.length();\\n        int arrayLength = stringLength % k == 0 ? stringLength / k : stringLength / k + 1;\\n        String[] dividedString = new String[arrayLength];\\n\\n        StringBuilder stringToDivide = new StringBuilder(s);\\n        if (stringLength % k != 0) {\\n            stringToDivide.append(\\n                    String\\n                            .valueOf(fill)\\n                            .repeat(\\n                                    Math.max(0, k - (stringLength % k))\\n                            ));\\n        }\\n\\n        int index = 0;\\n        for (int i = 0; i < stringToDivide.length(); i += k) {\\n            dividedString[index++] = stringToDivide.substring(i, i + k);\\n        }\\n\\n        return dividedString;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n\\n    public String[] divideString(String s, int k, char fill) {\\n        if (s.length() == k) {\\n            return new String[]{s};\\n        }\\n\\n        int stringLength = s.length();\\n        int arrayLength = stringLength % k == 0 ? stringLength / k : stringLength / k + 1;\\n        String[] dividedString = new String[arrayLength];\\n\\n        StringBuilder stringToDivide = new StringBuilder(s);\\n        if (stringLength % k != 0) {\\n            stringToDivide.append(\\n                    String\\n                            .valueOf(fill)\\n                            .repeat(\\n                                    Math.max(0, k - (stringLength % k))\\n                            ));\\n        }\\n\\n        int index = 0;\\n        for (int i = 0; i < stringToDivide.length(); i += k) {\\n            dividedString[index++] = stringToDivide.substring(i, i + k);\\n        }\\n\\n        return dividedString;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3657930,
                "title": "divide-a-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        lst=[]\\n        for i in range(0,len(s),k):\\n            if i+k<len(s):\\n                lst.append(s[i:i+k:])\\n            else:\\n                lst.append(s[i::]) \\n        while len(lst[-1])<k:\\n            lst[-1]+=fill\\n        return lst\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        lst=[]\\n        for i in range(0,len(s),k):\\n            if i+k<len(s):\\n                lst.append(s[i:i+k:])\\n            else:\\n                lst.append(s[i::]) \\n        while len(lst[-1])<k:\\n            lst[-1]+=fill\\n        return lst\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3657271,
                "title": "t-n-o-n-no-extra-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nLoop through, keep adding k elements into result. If len(string)%k !=0 it implies we need some fill chars. Append k - len(string)%3 fill chars. e.g. len(str) = 7 & k = 3. 7%3 => 1. We take (0,2) & (3,5) append to result. Now we take (6) & add 3 - 7%3 = 2 fill chars\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Iterate through string, in increments of k, in range 0:len(s) - len(s)%k\\n2. If len(s)%k !=0, then add  k - len(string)%3 fill chars\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nT(n) = O(n) - we traverse the string length once.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace = we use a temp string to build fill chars. That will be max k-1. But that\\'s the requirement of the solution, to build & return those fill chars. So no extra space.\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        res = []\\n        \\n        _r = len(s)%k\\n        _q = len(s)//k\\n\\n        for i in range(0,len(s) - _r,k):\\n            res.append(s[i:i+k])\\n        \\n        if(_r!=0 ):\\n            _s = s[_q*k:_q*k+_r]\\n            for _ in range((k-_r) ):\\n                _s += fill\\n            res.append( _s )\\n\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        res = []\\n        \\n        _r = len(s)%k\\n        _q = len(s)//k\\n\\n        for i in range(0,len(s) - _r,k):\\n            res.append(s[i:i+k])\\n        \\n        if(_r!=0 ):\\n            _s = s[_q*k:_q*k+_r]\\n            for _ in range((k-_r) ):\\n                _s += fill\\n            res.append( _s )\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3649990,
                "title": "python-solution-speed-90-and-storage-80",
                "content": "# Intuition\\nThe hardest part of this problem is finding the equation for string adding. After we do that will just create a list and append a \\ns[start:finish] substring slice until we reach the length of s.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing the module operator we can see if we have a remainder and thus needing to add a fill string to s. We can calculate the fill strins needed by subtracting k from the modulo of the length of s/k.\\n\\nIf s length == 5 and k == 2 this code or equation will output 3. \\n\\nRemember the module operator will return either 1 or zero.\\n\\n# Complexity\\n- Time complexity:\\n    The time complexity is O(n) since we needed to use a while loop.\\n    A while loop will always consume O(n) time. In more detail the   while loop will be ran n/k times were k is the substring length.\\n\\n- Space complexity:\\n    The space complexity is also O(n) since we needed to use a list/vector to store strings. \\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        \\n        partitioned = []\\n        start = 0\\n        finish = k\\n\\n        if len(s)%k > 0:\\n            s = s + fill * (k - len(s)%k)\\n\\n        while finish <= len(s):\\n            partitioned.append(s[start:finish])\\n            start += k\\n            finish += k\\n            \\n        return partitioned\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        \\n        partitioned = []\\n        start = 0\\n        finish = k\\n\\n        if len(s)%k > 0:\\n            s = s + fill * (k - len(s)%k)\\n\\n        while finish <= len(s):\\n            partitioned.append(s[start:finish])\\n            start += k\\n            finish += k\\n            \\n        return partitioned\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3649972,
                "title": "c-solution-90-speed",
                "content": "# Intuition\\nThe hardest part of this problem is finding the equation for string adding.\\nAfter we do that will just create a vector and push_back a s[:k] substring until we reach the length of s.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing the module operator we can see if we have a remainder and thus needing to add a fill string to s. We can calculate the fill strins needed by subtracting k from the remainder of the length of s/k.\\n\\nIf s length == 5 and k == 2 this eqaution will output 3. \\n\\nRemember the module operator will return either 1 or zero.\\n\\n# Complexity\\n- Time complexity:\\n    The time complexity is O(n) since we needed to use a while loop.\\n    A while loop will always consume O * n time.\\n\\n- Space complexity:\\n    The space complexity is also O(n) since we needed to use a list/vector to store strings. \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int start = 0; \\n        std::vector<std::string> partitioned;\\n\\n        // Check if we need to add to or fill the string.\\n        if(s.length() % k > 0) {\\n            s = s + std::string(k - s.length() % k, fill);\\n        }\\n\\n        //Push back sub strings into partitioned.\\n        while(start < s.length()){\\n            partitioned.push_back(s.substr(start, k));\\n            start += k;\\n        }\\n\\n    return partitioned;    \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int start = 0; \\n        std::vector<std::string> partitioned;\\n\\n        // Check if we need to add to or fill the string.\\n        if(s.length() % k > 0) {\\n            s = s + std::string(k - s.length() % k, fill);\\n        }\\n\\n        //Push back sub strings into partitioned.\\n        while(start < s.length()){\\n            partitioned.push_back(s.substr(start, k));\\n            start += k;\\n        }\\n\\n    return partitioned;    \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3646655,
                "title": "python-easy-2-line-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        s += (len(s)%k>0)*(k-len(s)%k)*fill\\n        return (s[i:i+k] for i in range(0, len(s), k))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        s += (len(s)%k>0)*(k-len(s)%k)*fill\\n        return (s[i:i+k] for i in range(0, len(s), k))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3645653,
                "title": "python",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Sliding Window\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n# Code\\n```\\n\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        result = []\\n\\n        for i in range(0, len(s), k):\\n            sub_string = s[i:i+k]\\n\\n            if (len_substring := len(sub_string)) < k:\\n                sub_string += fill * (k - len_substring)\\n            \\n            result.append(sub_string)\\n        \\n        return result\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        result = []\\n\\n        for i in range(0, len(s), k):\\n            sub_string = s[i:i+k]\\n\\n            if (len_substring := len(sub_string)) < k:\\n                sub_string += fill * (k - len_substring)\\n            \\n            result.append(sub_string)\\n        \\n        return result\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3640010,
                "title": "naive-approach-easiest-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int i=0; vector<string> ans;\\n        while(i<s.length()) {\\n            string str = \"\";\\n            int j = 0;\\n            while(j<k) {\\n                if(i >= s.size()) {\\n                    str += fill;\\n                }\\n                else str += s[i];\\n                i++; j++;\\n            }\\n            ans.push_back(str);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int i=0; vector<string> ans;\\n        while(i<s.length()) {\\n            string str = \"\";\\n            int j = 0;\\n            while(j<k) {\\n                if(i >= s.size()) {\\n                    str += fill;\\n                }\\n                else str += s[i];\\n                i++; j++;\\n            }\\n            ans.push_back(str);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3638186,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    std::vector<std::string> divideString(const std::string& s, int k, char fill) {\\n    std::vector<std::string> res;\\n    int max = s.length() / k;\\n    \\n    for (int i = 0; i < max; i++) {\\n        std::string temp = s.substr(i * k, k);\\n        res.push_back(temp);\\n    }\\n    if(s.length()%k!=0){\\n    std::string temp = \"\";\\n    for (int j = max * k; j < s.length(); j++) {\\n        temp += s[j];\\n    }\\n    \\n    int a = temp.size();\\n    for (int j = a; j < k; j++) {\\n        temp += fill;\\n    }\\n    res.push_back(temp);\\n    }\\n    return res;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    std::vector<std::string> divideString(const std::string& s, int k, char fill) {\\n    std::vector<std::string> res;\\n    int max = s.length() / k;\\n    \\n    for (int i = 0; i < max; i++) {\\n        std::string temp = s.substr(i * k, k);\\n        res.push_back(temp);\\n    }\\n    if(s.length()%k!=0){\\n    std::string temp = \"\";\\n    for (int j = max * k; j < s.length(); j++) {\\n        temp += s[j];\\n    }\\n    \\n    int a = temp.size();\\n    for (int j = a; j < k; j++) {\\n        temp += fill;\\n    }\\n    res.push_back(temp);\\n    }\\n    return res;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3630043,
                "title": "simple-python-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        output = [s[i:i+k] for i in range(0, len(s), k)]\\n        if len(output[-1]) != k:\\n            output[-1]+=fill*(k - len(output[-1]))\\n        return output\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        output = [s[i:i+k] for i in range(0, len(s), k)]\\n        if len(output[-1]) != k:\\n            output[-1]+=fill*(k - len(output[-1]))\\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3611147,
                "title": "easy-solution-and-very-simple-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        i=0\\n        l=[]\\n        r=len(s)%k\\n\\n        while(i<len(s)):\\n            if i+k-1<len(s):\\n                l.append(s[i:i+k])\\n            else:\\n                l.append(s[i:]+fill*(k-r))\\n            i+=k\\n        return l\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        i=0\\n        l=[]\\n        r=len(s)%k\\n\\n        while(i<len(s)):\\n            if i+k-1<len(s):\\n                l.append(s[i:i+k])\\n            else:\\n                l.append(s[i:]+fill*(k-r))\\n            i+=k\\n        return l\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3605971,
                "title": "divide-a-string-into-group-of-size-k-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        group = \"\"\\n        res = []\\n        for i in range(len(s)):\\n            if len(group) == k:\\n                res.append(group)\\n                group = \"\"\\n            group+=s[i]\\n        res.append(group + (fill)*(k-len(group)))\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        group = \"\"\\n        res = []\\n        for i in range(len(s)):\\n            if len(group) == k:\\n                res.append(group)\\n                group = \"\"\\n            group+=s[i]\\n        res.append(group + (fill)*(k-len(group)))\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3585800,
                "title": "100-time-beat-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n=s.size(),i=0;\\n        vector<string>ans;\\n        while(i<n)\\n        {\\n            int j=0;\\n            string t=\"\";\\n            while(j<k and i<n)\\n            {\\n                t+=s[i];\\n                i++;j++;\\n            }\\n            if(t.size()<k)\\n            {\\n                while(j<k)\\n                {\\n                    t+=fill;\\n                    j++;\\n                }\\n            }\\n            ans.push_back(t);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int n=s.size(),i=0;\\n        vector<string>ans;\\n        while(i<n)\\n        {\\n            int j=0;\\n            string t=\"\";\\n            while(j<k and i<n)\\n            {\\n                t+=s[i];\\n                i++;j++;\\n            }\\n            if(t.size()<k)\\n            {\\n                while(j<k)\\n                {\\n                    t+=fill;\\n                    j++;\\n                }\\n            }\\n            ans.push_back(t);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3579510,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n    let count = 0;\\n    let lst = [];\\n    let temp = \"\";\\n    for(let w of s){\\n        temp+= w;\\n        if (temp.length == k) {\\n            lst.push(temp);\\n            temp = \"\"\\n        }\\n    }\\n\\n    while(temp.length > 0){\\n        temp+=fill\\n        if (temp.length == k){\\n             lst.push(temp);\\n             temp = \"\"\\n        }\\n    }\\n    return lst;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @param {character} fill\\n * @return {string[]}\\n */\\nvar divideString = function(s, k, fill) {\\n    let count = 0;\\n    let lst = [];\\n    let temp = \"\";\\n    for(let w of s){\\n        temp+= w;\\n        if (temp.length == k) {\\n            lst.push(temp);\\n            temp = \"\"\\n        }\\n    }\\n\\n    while(temp.length > 0){\\n        temp+=fill\\n        if (temp.length == k){\\n             lst.push(temp);\\n             temp = \"\"\\n        }\\n    }\\n    return lst;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3577712,
                "title": "very-easy-solution-comment-to-help-understand-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int len = s.size();\\n        int j = 0;\\n        vector<string>ans;\\n        string str = \"\";\\n\\n        for(int i=0; i<len; i++){\\n            if(j==k){\\n                ans.push_back(str);\\n                j=0;\\n                str=\"\";\\n            }\\n            str+=s[i];\\n            j++;\\n        }\\n        if(j!=0){\\n            while(j!=k){\\n                str+=fill;\\n                j++;\\n            }\\n            ans.push_back(str);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        int len = s.size();\\n        int j = 0;\\n        vector<string>ans;\\n        string str = \"\";\\n\\n        for(int i=0; i<len; i++){\\n            if(j==k){\\n                ans.push_back(str);\\n                j=0;\\n                str=\"\";\\n            }\\n            str+=s[i];\\n            j++;\\n        }\\n        if(j!=0){\\n            while(j!=k){\\n                str+=fill;\\n                j++;\\n            }\\n            ans.push_back(str);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575412,
                "title": "fast-and-very-easy-java-solution",
                "content": "\\n# Complexity\\n- Time complexity:\\n- O(S)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        String[] groups = new String[(s.length() + k - 1) / k];\\n        for (int i = 0, j = 0; i < s.length(); i += k, j++) {\\n            if (i < s.length() - k) {\\n                groups[j] = s.substring(i, i + k);\\n            } else {\\n                groups[j] = (s.substring(i) + String.valueOf(fill).repeat(k)).substring(0, k);\\n            }\\n        }\\n        return groups;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        String[] groups = new String[(s.length() + k - 1) / k];\\n        for (int i = 0, j = 0; i < s.length(); i += k, j++) {\\n            if (i < s.length() - k) {\\n                groups[j] = s.substring(i, i + k);\\n            } else {\\n                groups[j] = (s.substring(i) + String.valueOf(fill).repeat(k)).substring(0, k);\\n            }\\n        }\\n        return groups;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3563599,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> partition;\\n        string str=\"\";\\n        for(int i=0; i < s.size(); i++){\\n            str+=s[i];\\n            if(str.size()==k){\\n                partition.push_back(str);\\n                str=\"\";\\n            }\\n        }\\n        if(str.size()!=0){\\n            int size_left = k - str.size();\\n            while(size_left--) str+=fill;\\n            partition.push_back(str);\\n        }\\n        return partition;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> partition;\\n        string str=\"\";\\n        for(int i=0; i < s.size(); i++){\\n            str+=s[i];\\n            if(str.size()==k){\\n                partition.push_back(str);\\n                str=\"\";\\n            }\\n        }\\n        if(str.size()!=0){\\n            int size_left = k - str.size();\\n            while(size_left--) str+=fill;\\n            partition.push_back(str);\\n        }\\n        return partition;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3554511,
                "title": "logical-and-very-easy-c-solution",
                "content": "# JAI SHREE RAM\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        int n=s.size();\\n        int i=0,j=0;\\n        string res=\"\";\\n        while(j<n){\\n            res+=s[j];\\n            if(res.size()==k){\\n                ans.push_back(res);\\n                res=\"\";\\n            }\\n            j++;\\n        }\\n        if(res!=\"\"){\\n            while(res.size()<k){\\n                res+=fill;\\n            }\\n            ans.push_back(res);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![leetcode upvote.jpg](https://assets.leetcode.com/users/images/71a2b98c-7ede-49cd-8420-7658040d7ac4_1684820754.2957351.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> divideString(string s, int k, char fill) {\\n        vector<string> ans;\\n        int n=s.size();\\n        int i=0,j=0;\\n        string res=\"\";\\n        while(j<n){\\n            res+=s[j];\\n            if(res.size()==k){\\n                ans.push_back(res);\\n                res=\"\";\\n            }\\n            j++;\\n        }\\n        if(res!=\"\"){\\n            while(res.size()<k){\\n                res+=fill;\\n            }\\n            ans.push_back(res);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3497612,
                "title": "python3-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        \\n        n=len(s)\\n        rem=n%k\\n        \\n        if rem!=0:\\n            s+=fill*(k-rem)\\n        \\n        return [s[i:i+k] for i in range(0,len(s),k)]\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\\n        \\n        n=len(s)\\n        rem=n%k\\n        \\n        if rem!=0:\\n            s+=fill*(k-rem)\\n        \\n        return [s[i:i+k] for i in range(0,len(s),k)]\\n        \\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1791410,
                "content": [
                    {
                        "username": "kBrostoff",
                        "content": "I actually liked using Python\\'s `textwrap.wrap(...)` method and then checking if the last item in the array is length `k`, if not, add to last element `fill * (k - len(r[-1])`"
                    },
                    {
                        "username": "Msey",
                        "content": "One of my favourite easy questions"
                    },
                    {
                        "username": "topswe",
                        "content": "Use python string slicing. [s[i:i+k] for i in range(0, len(s), k)] will work except for the last \\'fill\\' slice, so add a conditional that checks for this case."
                    }
                ]
            },
            {
                "id": 1759258,
                "content": [
                    {
                        "username": "kBrostoff",
                        "content": "I actually liked using Python\\'s `textwrap.wrap(...)` method and then checking if the last item in the array is length `k`, if not, add to last element `fill * (k - len(r[-1])`"
                    },
                    {
                        "username": "Msey",
                        "content": "One of my favourite easy questions"
                    },
                    {
                        "username": "topswe",
                        "content": "Use python string slicing. [s[i:i+k] for i in range(0, len(s), k)] will work except for the last \\'fill\\' slice, so add a conditional that checks for this case."
                    }
                ]
            },
            {
                "id": 1721928,
                "content": [
                    {
                        "username": "kBrostoff",
                        "content": "I actually liked using Python\\'s `textwrap.wrap(...)` method and then checking if the last item in the array is length `k`, if not, add to last element `fill * (k - len(r[-1])`"
                    },
                    {
                        "username": "Msey",
                        "content": "One of my favourite easy questions"
                    },
                    {
                        "username": "topswe",
                        "content": "Use python string slicing. [s[i:i+k] for i in range(0, len(s), k)] will work except for the last \\'fill\\' slice, so add a conditional that checks for this case."
                    }
                ]
            }
        ]
    }
]