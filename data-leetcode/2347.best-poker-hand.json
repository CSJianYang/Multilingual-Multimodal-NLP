[
    {
        "title": "Best Poker Hand",
        "question_content": "You are given an integer array ranks and a character array suits. You have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i].\nThe following are the types of poker hands you can make from best to worst:\n\n\t\"Flush\": Five cards of the same suit.\n\t\"Three of a Kind\": Three cards of the same rank.\n\t\"Pair\": Two cards of the same rank.\n\t\"High Card\": Any single card.\n\nReturn a string representing the best type of poker hand you can make with the given cards.\nNote that the return values are case-sensitive.\n&nbsp;\nExample 1:\n\nInput: ranks = [13,2,3,1,9], suits = [\"a\",\"a\",\"a\",\"a\",\"a\"]\nOutput: \"Flush\"\nExplanation: The hand with all the cards consists of 5 cards with the same suit, so we have a \"Flush\".\n\nExample 2:\n\nInput: ranks = [4,4,2,4,4], suits = [\"d\",\"a\",\"a\",\"b\",\"c\"]\nOutput: \"Three of a Kind\"\nExplanation: The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a \"Three of a Kind\".\nNote that we could also make a \"Pair\" hand but \"Three of a Kind\" is a better hand.\nAlso note that other cards could be used to make the \"Three of a Kind\" hand.\nExample 3:\n\nInput: ranks = [10,10,2,12,9], suits = [\"a\",\"b\",\"c\",\"a\",\"d\"]\nOutput: \"Pair\"\nExplanation: The hand with the first and second card consists of 2 cards with the same rank, so we have a \"Pair\".\nNote that we cannot make a \"Flush\" or a \"Three of a Kind\".\n\n&nbsp;\nConstraints:\n\n\tranks.length == suits.length == 5\n\t1 <= ranks[i] <= 13\n\t'a' <= suits[i] <= 'd'\n\tNo two cards have the same rank and suit.",
        "solutions": [
            {
                "id": 2322350,
                "title": "quads-and-fives",
                "content": "Note that we need to return \"Three of a Kind\" if we have quads or fives.\\n\\n**Python 3**\\nCheck out the pattern matching introduced in Python 3.10 - it is very powerful.\\n\\n```python\\nclass Solution:\\n    def bestHand(self, r: List[int], s: List[str]) -> str:\\n        if max(s) == min(s):\\n            return \"Flush\" \\n        match max(Counter(r).values()):\\n            case 5 | 4 | 3:\\n                return \"Three of a Kind\"\\n            case 2:\\n                return \"Pair\"\\n            case _:\\n                return \"High Card\"\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def bestHand(self, r: List[int], s: List[str]) -> str:\\n        if max(s) == min(s):\\n            return \"Flush\" \\n        match max(Counter(r).values()):\\n            case 5 | 4 | 3:\\n                return \"Three of a Kind\"\\n            case 2:\\n                return \"Pair\"\\n            case _:\\n                return \"High Card\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322861,
                "title": "c-java-python-kotlin-using-map-beginner-friendly-easy-to-understand",
                "content": "**WORKING**\\n* We use 2 maps to store the count of:\\n\\t* Number of cards with same suit\\n\\t* Number of cards with same ranks\\n* Check the maps for each condition `(Flush, Three of a Kind, Pair)` and change `ans` whenever condition is fulfilled.\\n* The conditions are:\\n\\t* \"Flush\": Five cards of the same suit.\\n\\t* \"Three of a Kind\": Three cards of the same rank. \\n\\t* \"Pair\": Two cards of the same rank.\\n\\t* \"High Card\": Any single card.\\n* The default/base case of answer is `High Card`\\n\\n*C++ Solution*\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<char,int> m ; // Stores count of same suit\\n        map<int,int> m2 ; // Stores count of same rank\\n        for(auto i:suits)\\n        {\\n            m[i]++ ;\\n        }\\n        for(auto i:ranks)\\n        {\\n            m2[i]++ ;\\n        }\\n        string ans = \"High Card\" ;\\n        for(auto i:m) // Checking same suit\\n        {\\n            if(i.second == 5)\\n            {\\n                ans = \"Flush\" ;\\n\\t\\t\\t\\tbreak ;\\n            }\\n        }\\n        for(auto i:m2) // Checking same rank\\n        {\\n            if(i.second >= 3)\\n            {\\n                ans = \"Three of a Kind\" ;\\n                break ;\\n            }\\n            else if(i.second == 2)\\n            {\\n                ans = \"Pair\" ;\\n\\t\\t\\t\\tbreak ;\\n            }\\n        }\\n        return ans ;\\n    }\\n};\\n```\\n*Python Solution*\\n```\\nclass Solution(object):\\n    def bestHand(self, ranks, suits):\\n        \"\"\"\\n        :type ranks: List[int]\\n        :type suits: List[str]\\n        :rtype: str\\n        \"\"\"\\n        cnt = max(Counter(ranks).values()) # Counts maximum number of ranks of the same kind\\n        ans = \"High Card\"   \\n        if(len(set(suits)) == 1): # 5 of the same\\n            ans = \"Flush\"\\n        elif cnt >= 3:\\n            ans = \"Three of a Kind\"\\n        elif cnt == 2:\\n            ans = \"Pair\"\\n        return ans \\n```\\n*JAVA Solution*\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int []hashr = new int[15] ; // Check Constraints\\n        int []hashs = new int[5] ; // Check Constraints\\n        for(int i = 0 ; i < 5 ; i++)\\n        {\\n            hashr[ranks[i]] += 1 ;\\n            hashs[suits[i] - \\'a\\'] += 1 ;\\n        }\\n        String ans = \"High Card\" ;\\n        for(int i = 0 ; i < 5 ; i++) // Checking same suit\\n        {\\n            if(hashs[i] == 5)\\n            {\\n                ans = \"Flush\" ;\\n\\t\\t\\t\\tbreak ;\\n            }\\n        }\\n        for(int i = 0 ; i < 14 ; i++) // Checking same rank\\n        {\\n            if(hashr[i] >= 3)\\n            {\\n                ans = \"Three of a Kind\" ;\\n                return ans ;\\n            }\\n            else if(hashr[i] == 2)\\n            {\\n                ans = \"Pair\" ;\\n            }\\n        }\\n        return ans ;\\n    }\\n}\\n```\\n*Kotlin Solution*\\n```\\nclass Solution {\\n    fun bestHand(ranks: IntArray, s: CharArray): String {\\n        if(s[0] == s[1] && s[1] == s[2] && s[2] == s[3] && s[3] == s[4])\\n        {\\n            return \"Flush\" \\n        }\\n        val r = Array(14, {0}) \\n        for(i in 0..ranks.size - 1)\\n        {\\n            r[ranks[i]] += 1 ;\\n        }\\n        for(i in 0..r.size - 1)\\n        {\\n            if(r[i] >= 3)\\n            {\\n                return \"Three of a Kind\" ;\\n            }\\n            if(r[i] == 2)\\n            {\\n                return \"Pair\" ;\\n            }\\n        }\\n        return \"High Card\" \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<char,int> m ; // Stores count of same suit\\n        map<int,int> m2 ; // Stores count of same rank\\n        for(auto i:suits)\\n        {\\n            m[i]++ ;\\n        }\\n        for(auto i:ranks)\\n        {\\n            m2[i]++ ;\\n        }\\n        string ans = \"High Card\" ;\\n        for(auto i:m) // Checking same suit\\n        {\\n            if(i.second == 5)\\n            {\\n                ans = \"Flush\" ;\\n\\t\\t\\t\\tbreak ;\\n            }\\n        }\\n        for(auto i:m2) // Checking same rank\\n        {\\n            if(i.second >= 3)\\n            {\\n                ans = \"Three of a Kind\" ;\\n                break ;\\n            }\\n            else if(i.second == 2)\\n            {\\n                ans = \"Pair\" ;\\n\\t\\t\\t\\tbreak ;\\n            }\\n        }\\n        return ans ;\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def bestHand(self, ranks, suits):\\n        \"\"\"\\n        :type ranks: List[int]\\n        :type suits: List[str]\\n        :rtype: str\\n        \"\"\"\\n        cnt = max(Counter(ranks).values()) # Counts maximum number of ranks of the same kind\\n        ans = \"High Card\"   \\n        if(len(set(suits)) == 1): # 5 of the same\\n            ans = \"Flush\"\\n        elif cnt >= 3:\\n            ans = \"Three of a Kind\"\\n        elif cnt == 2:\\n            ans = \"Pair\"\\n        return ans \\n```\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int []hashr = new int[15] ; // Check Constraints\\n        int []hashs = new int[5] ; // Check Constraints\\n        for(int i = 0 ; i < 5 ; i++)\\n        {\\n            hashr[ranks[i]] += 1 ;\\n            hashs[suits[i] - \\'a\\'] += 1 ;\\n        }\\n        String ans = \"High Card\" ;\\n        for(int i = 0 ; i < 5 ; i++) // Checking same suit\\n        {\\n            if(hashs[i] == 5)\\n            {\\n                ans = \"Flush\" ;\\n\\t\\t\\t\\tbreak ;\\n            }\\n        }\\n        for(int i = 0 ; i < 14 ; i++) // Checking same rank\\n        {\\n            if(hashr[i] >= 3)\\n            {\\n                ans = \"Three of a Kind\" ;\\n                return ans ;\\n            }\\n            else if(hashr[i] == 2)\\n            {\\n                ans = \"Pair\" ;\\n            }\\n        }\\n        return ans ;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    fun bestHand(ranks: IntArray, s: CharArray): String {\\n        if(s[0] == s[1] && s[1] == s[2] && s[2] == s[3] && s[3] == s[4])\\n        {\\n            return \"Flush\" \\n        }\\n        val r = Array(14, {0}) \\n        for(i in 0..ranks.size - 1)\\n        {\\n            r[ranks[i]] += 1 ;\\n        }\\n        for(i in 0..r.size - 1)\\n        {\\n            if(r[i] >= 3)\\n            {\\n                return \"Three of a Kind\" ;\\n            }\\n            if(r[i] == 2)\\n            {\\n                return \"Pair\" ;\\n            }\\n        }\\n        return \"High Card\" \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2323247,
                "title": "java-single-pass",
                "content": "**Code:**\\n\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int max = 0, suit = 0;\\n        char ch = suits[0];\\n        \\n        int[] arr = new int[14];\\n        for(int i=0; i<ranks.length; i++){\\n            arr[ranks[i]]++;\\n            max = Math.max(max, arr[ranks[i]]);\\n            if(suits[i] == ch) suit++;\\n        }\\n        \\n        if(suit==5) return \"Flush\";\\n        return max >= 3 ? \"Three of a Kind\" : (max == 2 ? \"Pair\" : \"High Card\");\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "**Code:**\\n\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int max = 0, suit = 0;\\n        char ch = suits[0];\\n        \\n        int[] arr = new int[14];\\n        for(int i=0; i<ranks.length; i++){\\n            arr[ranks[i]]++;\\n            max = Math.max(max, arr[ranks[i]]);\\n            if(suits[i] == ch) suit++;\\n        }\\n        \\n        if(suit==5) return \"Flush\";\\n        return max >= 3 ? \"Three of a Kind\" : (max == 2 ? \"Pair\" : \"High Card\");\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2322459,
                "title": "java-python-3-3-conditionals-w-brief-explanation-and-analysis",
                "content": "1. If all characters in `suits` are same, then it is `Flush`;\\n2. If there are at least `3` values in `ranks` are same, it is `Three of a Kind`;\\n3. If there are`2` values in `ranks` are same, it is `Pair`;\\n4. Otherwise, it is `High Card`.\\n\\n```java\\n    public String bestHand(int[] r, char[] s) {\\n        int[] cnt = new int[14];\\n        IntStream.of(r).forEach(i -> ++cnt[i]);\\n        int max = IntStream.of(cnt).max().getAsInt();\\n        if (s[0] == s[1] && s[1] == s[2] && s[2] == s[3] && s[3] == s[4]) {\\n            return \"Flush\";\\n        }else if (max >= 3) {\\n            return \"Three of a Kind\";\\n        }else if (max == 2) {\\n            return \"Pair\";\\n        }else {\\n            return \"High Card\";\\n        }\\n    }\\n```\\n```python\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits)) == 1:\\n            return \"Flush\"\\n        match max(Counter(ranks).values()):\\n            case 3 | 4 | 5:\\n                return \"Three of a Kind\"\\n            case 2:\\n                return \"Pair\"\\n            case _:\\n                return \"High Card\"\\n```\\nor \\n\\n```python\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        cnt = Counter(ranks)\\n        if len(set(suits)) == 1:\\n            return \"Flush\"\\n        elif max(cnt.values()) >= 3:\\n            return \"Three of a Kind\"\\n        elif max(cnt.values()) == 2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n```\\n\\n**Analysis:**\\n\\nTime: `O(r + s)`, where `r = ranks.length, s = suits.length`;\\nspace: \\njava code - `O(range)`, where `range` is the upper bound of the `ranks`\\nPython 3 - `O(# of distinct values in ranks)`",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public String bestHand(int[] r, char[] s) {\\n        int[] cnt = new int[14];\\n        IntStream.of(r).forEach(i -> ++cnt[i]);\\n        int max = IntStream.of(cnt).max().getAsInt();\\n        if (s[0] == s[1] && s[1] == s[2] && s[2] == s[3] && s[3] == s[4]) {\\n            return \"Flush\";\\n        }else if (max >= 3) {\\n            return \"Three of a Kind\";\\n        }else if (max == 2) {\\n            return \"Pair\";\\n        }else {\\n            return \"High Card\";\\n        }\\n    }\\n```\n```python\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits)) == 1:\\n            return \"Flush\"\\n        match max(Counter(ranks).values()):\\n            case 3 | 4 | 5:\\n                return \"Three of a Kind\"\\n            case 2:\\n                return \"Pair\"\\n            case _:\\n                return \"High Card\"\\n```\n```python\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        cnt = Counter(ranks)\\n        if len(set(suits)) == 1:\\n            return \"Flush\"\\n        elif max(cnt.values()) >= 3:\\n            return \"Three of a Kind\"\\n        elif max(cnt.values()) == 2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2715245,
                "title": "c-solution-memory-usage-10-2-100-faster",
                "content": "100% faster solution ,please upvote\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        int count=1;\\n        int freq=1;\\n        int maxi=1;\\n        int maxim=1;\\n        sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=1;i<5;i++){\\n            if(ranks[i]==ranks[i-1]){\\n                freq++;\\n                maxim=max(maxim,freq);\\n            }\\n            else{freq=1;}\\n            if(suits[i]==suits[i-1]){\\n                count++;\\n                maxi=max(count,maxi);\\n            }\\n            else{count=1;}\\n        }\\n        if(maxi==5){return \"Flush\";}\\n        else if(maxim>=3){return \"Three of a Kind\";}\\n        else if(maxim==2){return \"Pair\";}\\n        else{return \"High Card\";}\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        int count=1;\\n        int freq=1;\\n        int maxi=1;\\n        int maxim=1;\\n        sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=1;i<5;i++){\\n            if(ranks[i]==ranks[i-1]){\\n                freq++;\\n                maxim=max(maxim,freq);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2322351,
                "title": "cpp-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& r, vector<char>& s) {\\n        vector<int> v(26);\\n        unordered_map<int,int> mp;\\n        for(char c:s)v[c-\\'a\\']++;\\n        for(int x:r)mp[x]++;\\n        for(int x:v){\\n            if(x>=5)return \"Flush\";\\n        }\\n        bool ans=false;\\n        for(auto it:mp){\\n            if(it.second>=2)ans=true;\\n            if(it.second>=3) return \"Three of a Kind\";\\n        }\\n        if(ans)return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& r, vector<char>& s) {\\n        vector<int> v(26);\\n        unordered_map<int,int> mp;\\n        for(char c:s)v[c-\\'a\\']++;\\n        for(int x:r)mp[x]++;\\n        for(int x:v){\\n            if(x>=5)return \"Flush\";\\n        }\\n        bool ans=false;\\n        for(auto it:mp){\\n            if(it.second>=2)ans=true;\\n            if(it.second>=3) return \"Three of a Kind\";\\n        }\\n        if(ans)return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322253,
                "title": "2-easy-solutions-c",
                "content": "***For Flush we need to check is all elements in suit array is same or not***\\n***For Three of a kind check freq greater then 2 and not flush***\\n***if freq = 2 pair and if freq = 1 High card***\\n# MAP\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<int, int> m1;\\n        int mn = INT_MIN;\\n        int all_same = count(begin(suits), end(suits), suits[0]);\\n        int n = ranks.size();\\n        for (int i = 0; i < n; i++) {\\n            m1[ranks[i]]++;\\n            mn = max(mn, m1[ranks[i]]);\\n        }\\n        if (all_same == n)     return \"Flush\";\\n        if (mn >= 3)      return \"Three of a Kind\";\\n        if (mn == 2)      return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```\\n\\n# ARRAY\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int n = ranks.size();\\n        int all_same = count(begin(suits), end(suits), suits[0]);       \\n        vector<int> v1(14, 0);\\n        for(int i = 0; i < n; i++)    v1[ranks[i]]++;\\n        int maxi = *max_element(begin(v1), end(v1));\\n        if (all_same == n)     return \"Flush\";\\n        if (maxi >= 3)      return \"Three of a Kind\";\\n        if (maxi == 2)      return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<int, int> m1;\\n        int mn = INT_MIN;\\n        int all_same = count(begin(suits), end(suits), suits[0]);\\n        int n = ranks.size();\\n        for (int i = 0; i < n; i++) {\\n            m1[ranks[i]]++;\\n            mn = max(mn, m1[ranks[i]]);\\n        }\\n        if (all_same == n)     return \"Flush\";\\n        if (mn >= 3)      return \"Three of a Kind\";\\n        if (mn == 2)      return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int n = ranks.size();\\n        int all_same = count(begin(suits), end(suits), suits[0]);       \\n        vector<int> v1(14, 0);\\n        for(int i = 0; i < n; i++)    v1[ranks[i]]++;\\n        int maxi = *max_element(begin(v1), end(v1));\\n        if (all_same == n)     return \"Flush\";\\n        if (maxi >= 3)      return \"Three of a Kind\";\\n        if (maxi == 2)      return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2350329,
                "title": "without-hashmap-tc-o-n-sc-o-1",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n    int max = 0;\\n    int card = 0;\\n    char ch = suits[0];\\n    int[] arr = new int[14];\\n    for(int i = 0; i < 5; i++){\\n        arr[ranks[i]]++;\\n        max = Math.max(max,arr[ranks[i]]);\\n        if(suits[i] == ch) card++;\\n    }\\n        if(card == 5) return \"Flush\";\\n     return max >= 3 ? \"Three of a Kind\":(max == 2 ? \"Pair\" : \"High Card\");\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n    int max = 0;\\n    int card = 0;\\n    char ch = suits[0];\\n    int[] arr = new int[14];\\n    for(int i = 0; i < 5; i++){\\n        arr[ranks[i]]++;\\n        max = Math.max(max,arr[ranks[i]]);\\n        if(suits[i] == ch) card++;\\n    }\\n        if(card == 5) return \"Flush\";\\n     return max >= 3 ? \"Three of a Kind\":(max == 2 ? \"Pair\" : \"High Card\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322369,
                "title": "c-use-map-simple-efficient-solution",
                "content": "```\\n/*\\n\"Flush\": Five cards of the same suit.\\n\"Three of a Kind\": Three cards of the same rank.\\n\"Pair\": Two cards of the same rank.\\n\"High Card\": Any single card.\\n*/\\n\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        map<int,int> same_suit;\\n        map<int,int> same_rank;\\n        for(int i=0; i<ranks.size(); i++)\\n        {\\n            same_suit[suits[i]-\\'a\\']++; //storing count of same char\\n            same_rank[ranks[i]]++; //storing count of same rank\\n        }\\n        \\n        int three=0, pair_=0;\\n        for(int i=0; i<ranks.size(); i++)\\n        {\\n\\t\\t\\t//apply operations as per the condition given \\n            if(same_suit[suits[i] - \\'a\\'] > 4) \\n                return \"Flush\";\\n            \\n            else if(same_rank[ranks[i]] > 2)\\n                three=1;\\n            \\n            else if(same_rank[ranks[i]] > 1)\\n                pair_=1;\\n        }\\n        \\n        if(three) return \"Three of a Kind\";\\n        else if(pair_) return \"Pair\";\\n        return \"High Card\";\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n/*\\n\"Flush\": Five cards of the same suit.\\n\"Three of a Kind\": Three cards of the same rank.\\n\"Pair\": Two cards of the same rank.\\n\"High Card\": Any single card.\\n*/\\n\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        map<int,int> same_suit;\\n        map<int,int> same_rank;\\n        for(int i=0; i<ranks.size(); i++)\\n        {\\n            same_suit[suits[i]-\\'a\\']++; //storing count of same char\\n            same_rank[ranks[i]]++; //storing count of same rank\\n        }\\n        \\n        int three=0, pair_=0;\\n        for(int i=0; i<ranks.size(); i++)\\n        {\\n\\t\\t\\t//apply operations as per the condition given \\n            if(same_suit[suits[i] - \\'a\\'] > 4) \\n                return \"Flush\";\\n            \\n            else if(same_rank[ranks[i]] > 2)\\n                three=1;\\n            \\n            else if(same_rank[ranks[i]] > 1)\\n                pair_=1;\\n        }\\n        \\n        if(three) return \"Three of a Kind\";\\n        else if(pair_) return \"Pair\";\\n        return \"High Card\";\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322935,
                "title": "check-for-every-case-single-o-5-time-only",
                "content": "# C++    \\n\\tstring bestHand(vector<int>& a, vector<char>& b) { \\n        int cnt[14]{};\\n        int sut[4]{};\\n        bool pair=false, three=false, four=false;\\n        //single traversal of 5\\n        for(int i=0;i<5;i++){\\n            ++cnt[a[i]];\\n            ++sut[b[i]-\\'a\\'];\\n            if(sut[b[i]-\\'a\\']==5) four=1;\\n            if(cnt[a[i]]>=3) three=1;\\n            if(cnt[a[i]]==2) pair=true;\\n        }\\n        if(four) return \"Flush\";\\n        if(three) return \"Three of a Kind\";\\n        if(pair) return \"Pair\";\\n        return \"High Card\";\\n    }\\nTime - O(5)\\nSpace - O(14)",
                "solutionTags": [
                    "C"
                ],
                "code": "# C++    \\n\\tstring bestHand(vector<int>& a, vector<char>& b) { \\n        int cnt[14]{};\\n        int sut[4]{};\\n        bool pair=false, three=false, four=false;\\n        //single traversal of 5\\n        for(int i=0;i<5;i++){\\n            ++cnt[a[i]];\\n            ++sut[b[i]-\\'a\\'];\\n            if(sut[b[i]-\\'a\\']==5) four=1;\\n            if(cnt[a[i]]>=3) three=1;\\n            if(cnt[a[i]]==2) pair=true;\\n        }\\n        if(four) return \"Flush\";\\n        if(three) return \"Three of a Kind\";\\n        if(pair) return \"Pair\";\\n        return \"High Card\";\\n    }\\nTime - O(5)\\nSpace - O(14)",
                "codeTag": "Unknown"
            },
            {
                "id": 2322753,
                "title": "a-simple-and-intuitive-java-solution",
                "content": "It is intutive to use maps for storing frequencies for both ranks and suits arrays. \\nThen we just use conditionals to determine the best poker card. Simple if and else conditions takes care of that.\\nKindly upvote if this helps.\\n\\n```\\n public String bestHand(int[] ranks, char[] suits) {\\n            Map<Integer, Integer> rankmap = new HashMap<>();\\n            Map<Character, Integer> suitmap = new HashMap<>();\\n\\n            for(int r: ranks){\\n                rankmap.put(r, rankmap.getOrDefault(r, 0) + 1);\\n            }\\n\\n            for(char s: suits){\\n                suitmap.put(s, suitmap.getOrDefault(s, 0) + 1);\\n            }\\n\\t\\t\\t\\n\\t\\t\\t// Being smart about the conditons\\n            if(suitmap.containsValue(5)){\\n                return \"Flush\";\\n            }\\n            if(rankmap.containsValue(5) || rankmap.containsValue(4) || rankmap.containsValue(3)){\\n                return \"Three of a Kind\";\\n            }\\n            if(rankmap.containsValue(2)){\\n                return \"Pair\";\\n            }\\n            return \"High Card\";\\n        \\n    }\\n\\t```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n public String bestHand(int[] ranks, char[] suits) {\\n            Map<Integer, Integer> rankmap = new HashMap<>();\\n            Map<Character, Integer> suitmap = new HashMap<>();\\n\\n            for(int r: ranks){\\n                rankmap.put(r, rankmap.getOrDefault(r, 0) + 1);\\n            }\\n\\n            for(char s: suits){\\n                suitmap.put(s, suitmap.getOrDefault(s, 0) + 1);\\n            }\\n\\t\\t\\t\\n\\t\\t\\t// Being smart about the conditons\\n            if(suitmap.containsValue(5)){\\n                return \"Flush\";\\n            }\\n            if(rankmap.containsValue(5) || rankmap.containsValue(4) || rankmap.containsValue(3)){\\n                return \"Three of a Kind\";\\n            }\\n            if(rankmap.containsValue(2)){\\n                return \"Pair\";\\n            }\\n            return \"High Card\";\\n        \\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 2747268,
                "title": "hashmap",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer,Integer> a=new HashMap<>();\\n        HashMap<Character,Integer> b=new HashMap<>();\\n        String h=\"High Card\";\\n        for(int i:ranks){\\n            a.put(i,a.getOrDefault(i,0)+1);\\n        }\\n        for(char i:suits){\\n            b.put(i,b.getOrDefault(i,0)+1);\\n        }\\n        if(b.containsValue(5)){\\n            return \"Flush\";\\n        }\\n        if(a.containsValue(3)||a.containsValue(4)||a.containsValue(5)){\\n            return \"Three of a Kind\";\\n        }\\n        if(a.containsValue(2)){\\n            return \"Pair\";\\n        }\\n        return h;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer,Integer> a=new HashMap<>();\\n        HashMap<Character,Integer> b=new HashMap<>();\\n        String h=\"High Card\";\\n        for(int i:ranks){\\n            a.put(i,a.getOrDefault(i,0)+1);\\n        }\\n        for(char i:suits){\\n            b.put(i,b.getOrDefault(i,0)+1);\\n        }\\n        if(b.containsValue(5)){\\n            return \"Flush\";\\n        }\\n        if(a.containsValue(3)||a.containsValue(4)||a.containsValue(5)){\\n            return \"Three of a Kind\";\\n        }\\n        if(a.containsValue(2)){\\n            return \"Pair\";\\n        }\\n        return h;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2741176,
                "title": "c-easy-short",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n     string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> rmp;\\n        for(auto s: suits) rmp[s]++;\\n        for(auto m: rmp) if(m.second == 5) return \"Flush\";\\n        rmp.clear();\\n        for(auto r: ranks) rmp[r]++;\\n        for(auto m: rmp) if(m.second >= 3) return \"Three of a Kind\";\\n        for(auto m: rmp) if(m.second >= 2) return \"Pair\";\\n        return \"High Card\";\\n    }\\n\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> rmp;\\n        for(auto s: suits) rmp[s]++;\\n        for(auto m: rmp) if(m.second == 5) return \"Flush\";\\n        rmp.clear();\\n        for(auto r: ranks) rmp[r]++;\\n        for(auto m: rmp) if(m.second >= 3) return \"Three of a Kind\";\\n        for(auto m: rmp) if(m.second >= 2) return \"Pair\";\\n        return \"High Card\";\\n    }\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2428490,
                "title": "python-elegant-short-without-ifs-counter-hashmap",
                "content": "```\\ndef bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n\\tmax_rank_cnt = max(Counter(ranks).values())\\n\\tmax_suit_cnt = max(Counter(suits).values())\\n\\n\\treturn {\\n\\t\\tmax_rank_cnt == 2: \\'Pair\\',\\n\\t\\tmax_rank_cnt >= 3: \\'Three of a Kind\\',\\n\\t\\tmax_suit_cnt == 5: \\'Flush\\',\\n\\t}.get(True, \\'High Card\\')\\n```\\n\\nIf you like this solution remember to **upvote it** to let me know.\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n\\tmax_rank_cnt = max(Counter(ranks).values())\\n\\tmax_suit_cnt = max(Counter(suits).values())\\n\\n\\treturn {\\n\\t\\tmax_rank_cnt == 2: \\'Pair\\',\\n\\t\\tmax_rank_cnt >= 3: \\'Three of a Kind\\',\\n\\t\\tmax_suit_cnt == 5: \\'Flush\\',\\n\\t}.get(True, \\'High Card\\')\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2323343,
                "title": "js-4-lines-of-code",
                "content": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n  if (new Set(suits).size === 1) return \"Flush\";\\n  const counts = ranks.reduce((acc, cur) => (acc[cur]++, acc), new Uint8Array(14));\\n  const max = Math.max(...counts);\\n  return max > 2 ? \"Three of a Kind\" : max > 1 ? \"Pair\" : \"High Card\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Set"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n  if (new Set(suits).size === 1) return \"Flush\";\\n  const counts = ranks.reduce((acc, cur) => (acc[cur]++, acc), new Uint8Array(14));\\n  const max = Math.max(...counts);\\n  return max > 2 ? \"Three of a Kind\" : max > 1 ? \"Pair\" : \"High Card\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2322411,
                "title": "python-easy-approach",
                "content": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n\\n        dictRanks = {}\\n        dictSuits = {}\\n        \\n        for key in ranks:\\n            dictRanks[key] = dictRanks.get(key, 0) + 1\\n\\n        for key in suits:\\n            dictSuits[key] = dictSuits.get(key, 0) + 1\\n            \\n        maxRanks = max(dictRanks.values())\\n        maxSuits = max(dictSuits.values())\\n        \\n        if maxSuits == 5:\\n            return \"Flush\"\\n        if maxRanks >= 3:\\n            return \"Three of a Kind\"\\n        if maxRanks >= 2:\\n            return \"Pair\" \\n        return \"High Card\"    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n\\n        dictRanks = {}\\n        dictSuits = {}\\n        \\n        for key in ranks:\\n            dictRanks[key] = dictRanks.get(key, 0) + 1\\n\\n        for key in suits:\\n            dictSuits[key] = dictSuits.get(key, 0) + 1\\n            \\n        maxRanks = max(dictRanks.values())\\n        maxSuits = max(dictSuits.values())\\n        \\n        if maxSuits == 5:\\n            return \"Flush\"\\n        if maxRanks >= 3:\\n            return \"Three of a Kind\"\\n        if maxRanks >= 2:\\n            return \"Pair\" \\n        return \"High Card\"    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322282,
                "title": "c-o-n-approaches-commented-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        map<int,int> same_suit;                // map for counting the suit value frequency\\n        map<int,int> same_rank;                // map for counting the rank value frequency\\n        \\n        // counting the frequency\\n        for(int i=0;i<5;i++)\\n        {\\n            same_rank[ranks[i]]++;\\n            same_suit[suits[i]-\\'a\\']++;\\n        }\\n        \\n        // cheking for conditions\\n        for(int i=0;i<5;i++)\\n        {\\n            // Five cards of the same suit\\n            if(same_suit[suits[i]-\\'a\\']==5)\\n                return \"Flush\";\\n            \\n            // Three cards of the same rank\\n            else if(same_rank[ranks[i]]>2)\\n                return \"Three of a Kind\";\\n            \\n            // Two cards of the same rank\\n            else if(same_rank[ranks[i]]>1)\\n                return \"Pair\";\\n        }\\n        \\n        // Any single card\\n        return \"High Card\";\\n    }\\n};\\n\\n// TC : O(N)+O(N)\\n// SC : O(N)+O(N)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        map<int,int> same_suit;                // map for counting the suit value frequency\\n        map<int,int> same_rank;                // map for counting the rank value frequency\\n        \\n        // counting the frequency\\n        for(int i=0;i<5;i++)\\n        {\\n            same_rank[ranks[i]]++;\\n            same_suit[suits[i]-\\'a\\']++;\\n        }\\n        \\n        // cheking for conditions\\n        for(int i=0;i<5;i++)\\n        {\\n            // Five cards of the same suit\\n            if(same_suit[suits[i]-\\'a\\']==5)\\n                return \"Flush\";\\n            \\n            // Three cards of the same rank\\n            else if(same_rank[ranks[i]]>2)\\n                return \"Three of a Kind\";\\n            \\n            // Two cards of the same rank\\n            else if(same_rank[ranks[i]]>1)\\n                return \"Pair\";\\n        }\\n        \\n        // Any single card\\n        return \"High Card\";\\n    }\\n};\\n\\n// TC : O(N)+O(N)\\n// SC : O(N)+O(N)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3208929,
                "title": "easy-solution-every-map-math-max",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    if (suits.every(suit => suit === suits[0])) {\\n        return \"Flush\";\\n    }\\n    const ranksMap = ranks.reduce((acc, rank) => {\\n        acc[rank] = (acc[rank] ?? 0) + 1;\\n        return acc;\\n    }, {});\\n    const maxTheSameRank = Math.max(...Object.values(ranksMap));\\n    if (maxTheSameRank >= 3) {\\n        return \"Three of a Kind\";\\n    }\\n    if (maxTheSameRank >= 2) {\\n        return \"Pair\";\\n    }\\n    return \"High Card\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    if (suits.every(suit => suit === suits[0])) {\\n        return \"Flush\";\\n    }\\n    const ranksMap = ranks.reduce((acc, rank) => {\\n        acc[rank] = (acc[rank] ?? 0) + 1;\\n        return acc;\\n    }, {});\\n    const maxTheSameRank = Math.max(...Object.values(ranksMap));\\n    if (maxTheSameRank >= 3) {\\n        return \"Three of a Kind\";\\n    }\\n    if (maxTheSameRank >= 2) {\\n        return \"Pair\";\\n    }\\n    return \"High Card\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3081391,
                "title": "java-hashmap",
                "content": "# Intuition\\nWith the help of for loop in HashMap \\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Integer> hm = new HashMap<>();\\n        HashMap<Character, Integer> hp = new HashMap<>();\\n        for(int i=0; i<ranks.length; i++){\\n            if(hm.containsKey(ranks[i])){\\n                int ab= hm.get(ranks[i]);\\n                int cd = ab+1;\\n                hm.put(ranks[i], cd);\\n         }\\n         else{\\n             hm.put(ranks[i],1);\\n         }\\n        } \\n        for(int i=0; i<suits.length; i++){\\n                 if(hp.containsKey(suits[i])){\\n                int ab= hp.get(suits[i]);\\n                int cd = ab+1;\\n                hp.put(suits[i], cd);\\n         }\\n         else{\\n             hp.put(suits[i],1);\\n         }\\n        }\\n        ArrayList<Integer> al= new ArrayList<>();\\n        for(int key : hm.keySet()){\\n           al.add(hm.get(key));\\n        }\\n        Collections.sort(al, Collections.reverseOrder());\\n        for(int i=0; i<al.size(); i++){\\n            if(al.get(i)>=3){\\n                return \"Three of a Kind\";\\n            }\\n            else if(al.get(i)==2){\\n                return \"Pair\";\\n            }\\n        }\\n        for(char key:hp.keySet()){\\n            if(hp.get(key)==5){\\n                return \"Flush\";\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Integer> hm = new HashMap<>();\\n        HashMap<Character, Integer> hp = new HashMap<>();\\n        for(int i=0; i<ranks.length; i++){\\n            if(hm.containsKey(ranks[i])){\\n                int ab= hm.get(ranks[i]);\\n                int cd = ab+1;\\n                hm.put(ranks[i], cd);\\n         }\\n         else{\\n             hm.put(ranks[i],1);\\n         }\\n        } \\n        for(int i=0; i<suits.length; i++){\\n                 if(hp.containsKey(suits[i])){\\n                int ab= hp.get(suits[i]);\\n                int cd = ab+1;\\n                hp.put(suits[i], cd);\\n         }\\n         else{\\n             hp.put(suits[i],1);\\n         }\\n        }\\n        ArrayList<Integer> al= new ArrayList<>();\\n        for(int key : hm.keySet()){\\n           al.add(hm.get(key));\\n        }\\n        Collections.sort(al, Collections.reverseOrder());\\n        for(int i=0; i<al.size(); i++){\\n            if(al.get(i)>=3){\\n                return \"Three of a Kind\";\\n            }\\n            else if(al.get(i)==2){\\n                return \"Pair\";\\n            }\\n        }\\n        for(char key:hp.keySet()){\\n            if(hp.get(key)==5){\\n                return \"Flush\";\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2689984,
                "title": "memory-usage-10-2-mb-less-than-85-36-of-c-online-submissions",
                "content": "**C++ SOLUTION using BRUTE FORCE APPROACH and HASHING**\\n\\n```\\n\\n/*** 2347. Best Poker Hand ***/\\n\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n      \\n\\t   //declared a vector named frequency to store the frequency of ranks \\n       vector<int> frequency;\\n\\t   \\n\\t   //declared a count variable of int datatype to count the number of equal suits\\n       int count=0;\\n\\t   \\n\\t   //traversed the suits vector and counted the equal number of suits\\n        for(int i=0;i<suits.size();++i){\\n            if(suits[i]==suits[i+1]) count++;\\n        }\\n\\t\\t//if all the suits are same then return Flush\\n        if(count+1==suits.size()) return \"Flush\";\\n\\t\\t\\n        else{\\n\\t\\t\\n\\t\\t//used hashing to find the frequency of ranks\\n\\t\\t\\n        unordered_map<int,int> mp;\\n        for(int i=0;i<ranks.size();++i){\\n            mp[ranks[i]]++;\\n        }\\n\\t\\t//stored the values of frequency of the ranks in the pre-initialised vector frequency\\n        for(auto i:mp){\\n           frequency.push_back(i.second);\\n        }\\n        \\n\\t\\t//sorted the frequency vector to find the best hand\\n        sort(frequency.begin(),frequency.end());\\n\\t\\t\\n\\t\\t//declared and assigned the the largest frequency of ranks,  to the variable largest \\n        int largest =  frequency[frequency.size()-1];\\n\\t\\t\\n\\t\\t//as per problem statement \\n        if(largest>=3) return \"Three of a Kind\";\\n\\t\\t\\n        else if(largest==2) return \"Pair\";\\n\\t\\t\\n        }\\n        return \"High Card\";\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\n/*** 2347. Best Poker Hand ***/\\n\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n      \\n\\t   //declared a vector named frequency to store the frequency of ranks \\n       vector<int> frequency;\\n\\t   \\n\\t   //declared a count variable of int datatype to count the number of equal suits\\n       int count=0;\\n\\t   \\n\\t   //traversed the suits vector and counted the equal number of suits\\n        for(int i=0;i<suits.size();++i){\\n            if(suits[i]==suits[i+1]) count++;\\n        }\\n\\t\\t//if all the suits are same then return Flush\\n        if(count+1==suits.size()) return \"Flush\";\\n\\t\\t\\n        else{\\n\\t\\t\\n\\t\\t//used hashing to find the frequency of ranks\\n\\t\\t\\n        unordered_map<int,int> mp;\\n        for(int i=0;i<ranks.size();++i){\\n            mp[ranks[i]]++;\\n        }\\n\\t\\t//stored the values of frequency of the ranks in the pre-initialised vector frequency\\n        for(auto i:mp){\\n           frequency.push_back(i.second);\\n        }\\n        \\n\\t\\t//sorted the frequency vector to find the best hand\\n        sort(frequency.begin(),frequency.end());\\n\\t\\t\\n\\t\\t//declared and assigned the the largest frequency of ranks,  to the variable largest \\n        int largest =  frequency[frequency.size()-1];\\n\\t\\t\\n\\t\\t//as per problem statement \\n        if(largest>=3) return \"Three of a Kind\";\\n\\t\\t\\n        else if(largest==2) return \"Pair\";\\n\\t\\t\\n        }\\n        return \"High Card\";\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2489410,
                "title": "python-straight-forward",
                "content": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        counter = Counter(ranks)\\n        if len(set(suits)) == 1:\\n            return \"Flush\"\\n        elif max(counter.values()) >= 3:\\n            return \"Three of a Kind\"\\n        elif max(counter.values()) == 2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        counter = Counter(ranks)\\n        if len(set(suits)) == 1:\\n            return \"Flush\"\\n        elif max(counter.values()) >= 3:\\n            return \"Three of a Kind\"\\n        elif max(counter.values()) == 2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2388670,
                "title": "c-simple-and-clean-solution-for-beginners",
                "content": "**Please Upvote if it helped you !!!\\nHappy Coding :)**\\n```\\n string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        unordered_map<int,int> p;\\n        unordered_map<int,int> q;\\n        int freq=INT_MIN;\\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            p[ranks[i]]++;\\n            freq=max(freq,p[ranks[i]]);\\n        }\\n        for(int i=0;i<suits.size();i++)\\n        {\\n            q[suits[i]]++;\\n        }\\n        if(q.size()==1)\\n            return \"Flush\";\\n        if(freq>=3)\\n            return \"Three of a Kind\";\\n        if(freq==2)\\n            return \"Pair\";\\n        return \"High Card\";\\n    }\\n```\\t",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        unordered_map<int,int> p;\\n        unordered_map<int,int> q;\\n        int freq=INT_MIN;\\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            p[ranks[i]]++;\\n            freq=max(freq,p[ranks[i]]);\\n        }\\n        for(int i=0;i<suits.size();i++)\\n        {\\n            q[suits[i]]++;\\n        }\\n        if(q.size()==1)\\n            return \"Flush\";\\n        if(freq>=3)\\n            return \"Three of a Kind\";\\n        if(freq==2)\\n            return \"Pair\";\\n        return \"High Card\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2380710,
                "title": "python-simple-hashmap",
                "content": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        s={}\\n        for i in suits:\\n            if i in s:\\n                s[i]+=1\\n                if s[i]==5:\\n                    return \\'Flush\\'\\n            else:\\n                s[i]=1\\n        r={}\\n        max_ = 0\\n        for i in ranks:\\n            if i in r:\\n                r[i]+=1\\n                max_=max(max_,r[i])\\n            else:\\n                r[i]=1\\n        if max_>=3:\\n            return \"Three of a Kind\"\\n        elif max_==2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        s={}\\n        for i in suits:\\n            if i in s:\\n                s[i]+=1\\n                if s[i]==5:\\n                    return \\'Flush\\'\\n            else:\\n                s[i]=1\\n        r={}\\n        max_ = 0\\n        for i in ranks:\\n            if i in r:\\n                r[i]+=1\\n                max_=max(max_,r[i])\\n            else:\\n                r[i]=1\\n        if max_>=3:\\n            return \"Three of a Kind\"\\n        elif max_==2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2349856,
                "title": "java-without-hash-map-beginner-friendly",
                "content": "```\\n\\tint max = 0, suit = 0;\\n    char ch = suits[0];\\n    \\n    int[] arr = new int[14];\\n    for(int i=0; i<ranks.length; i++){\\n        arr[ranks[i]]++;\\n        max = Math.max(max, arr[ranks[i]]);\\n        if(suits[i] == ch) suit++;\\n    }\\n    \\n    if(suit==5) return \"Flush\";\\n    return max >= 3 ? \"Three of a Kind\" : (max == 2 ? \"Pair\" : \"High Card\");",
                "solutionTags": [],
                "code": "```\\n\\tint max = 0, suit = 0;\\n    char ch = suits[0];\\n    \\n    int[] arr = new int[14];\\n    for(int i=0; i<ranks.length; i++){\\n        arr[ranks[i]]++;\\n        max = Math.max(max, arr[ranks[i]]);\\n        if(suits[i] == ch) suit++;\\n    }\\n    \\n    if(suit==5) return \"Flush\";\\n    return max >= 3 ? \"Three of a Kind\" : (max == 2 ? \"Pair\" : \"High Card\");",
                "codeTag": "Unknown"
            },
            {
                "id": 2333288,
                "title": "go",
                "content": "My Solution on Github: [link](https://github.com/lostlang/LeetcodeGo)\\n```\\nfunc bestHand(ranks []int, suits []byte) string {\\n\\tvar hashRanks = make(map[int]int)\\n\\tvar hachSuits = make(map[byte]int)\\n\\n\\tvar maxRank, maxSuit int\\n\\n\\tfor _, val := range ranks {\\n\\t\\thashRanks[val]++\\n\\n\\t\\tif hashRanks[val] > maxRank {\\n\\t\\t\\tmaxRank = hashRanks[val]\\n\\t\\t}\\n\\t}\\n\\n\\tfor _, char := range suits {\\n\\t\\thachSuits[char]++\\n\\n\\t\\tif hachSuits[char] > maxSuit {\\n\\t\\t\\tmaxSuit = hachSuits[char]\\n\\t\\t}\\n\\t}\\n\\n\\tif maxSuit == 5 {\\n\\t\\treturn \"Flush\"\\n\\t} else if maxRank >= 3 {\\n\\t\\treturn \"Three of a Kind\"\\n\\t} else if maxRank == 2 {\\n\\t\\treturn \"Pair\"\\n\\t}\\n\\n\\treturn \"High Card\"\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc bestHand(ranks []int, suits []byte) string {\\n\\tvar hashRanks = make(map[int]int)\\n\\tvar hachSuits = make(map[byte]int)\\n\\n\\tvar maxRank, maxSuit int\\n\\n\\tfor _, val := range ranks {\\n\\t\\thashRanks[val]++\\n\\n\\t\\tif hashRanks[val] > maxRank {\\n\\t\\t\\tmaxRank = hashRanks[val]\\n\\t\\t}\\n\\t}\\n\\n\\tfor _, char := range suits {\\n\\t\\thachSuits[char]++\\n\\n\\t\\tif hachSuits[char] > maxSuit {\\n\\t\\t\\tmaxSuit = hachSuits[char]\\n\\t\\t}\\n\\t}\\n\\n\\tif maxSuit == 5 {\\n\\t\\treturn \"Flush\"\\n\\t} else if maxRank >= 3 {\\n\\t\\treturn \"Three of a Kind\"\\n\\t} else if maxRank == 2 {\\n\\t\\treturn \"Pair\"\\n\\t}\\n\\n\\treturn \"High Card\"\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2325005,
                "title": "cpp-simple-basic-unordered-set-explanation-space-o-n-time-o-n-frequency-steps",
                "content": "**Approch**\\n1)Can compare suits directly as suits has only one condition that all have, to be equal to be a \"*Flush*\".\\n2)Use unordered_map to count the frequency of ranks\\n3)Then return \"*Three of a kind*\" if 3 or more cards are equal.\\n4)Return \"*Pair*\" if 2 of same type.\\n5)If none of the above contions match return \"*High Card*\"\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int s=1;\\n        for(int i=0;i<suits.size()-1;i++)\\n        {\\n            if(suits[i]==suits[i+1])\\n                s++;\\n        }\\n        if(s==5)\\n            return\"Flush\";\\n        unordered_map <int ,int>um;\\n        for(int i=0;i<ranks.size();i++)\\n            um[ranks[i]]++;\\n        \\n       for(auto x:um)\\n       {\\n           if(x.second>=3)\\n               return \"Three of a Kind\";\\n       }\\n        for(auto x: um)\\n        {\\n            if(x.second==2)\\n                return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```\\nUpvote is appreciated.",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int s=1;\\n        for(int i=0;i<suits.size()-1;i++)\\n        {\\n            if(suits[i]==suits[i+1])\\n                s++;\\n        }\\n        if(s==5)\\n            return\"Flush\";\\n        unordered_map <int ,int>um;\\n        for(int i=0;i<ranks.size();i++)\\n            um[ranks[i]]++;\\n        \\n       for(auto x:um)\\n       {\\n           if(x.second>=3)\\n               return \"Three of a Kind\";\\n       }\\n        for(auto x: um)\\n        {\\n            if(x.second==2)\\n                return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2323092,
                "title": "o-1-space-o-1-time-c",
                "content": "everything takes constant time as size of both the vectors is 5\\n```\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int c1=1,sameRank=0;\\n        sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=1;i<5;++i)\\n        {\\n            if(ranks[i]==ranks[i-1]) c1++;\\n            else c1=1;\\n            sameRank=max(sameRank,c1);\\n        }\\n        if(suits[0]==suits[4]) return \"Flush\";\\n        else if(sameRank>=3) return \"Three of a Kind\";\\n        else if(sameRank==2) return \"Pair\";\\n         return \"High Card\";\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int c1=1,sameRank=0;\\n        sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=1;i<5;++i)\\n        {\\n            if(ranks[i]==ranks[i-1]) c1++;\\n            else c1=1;\\n            sameRank=max(sameRank,c1);\\n        }\\n        if(suits[0]==suits[4]) return \"Flush\";\\n        else if(sameRank>=3) return \"Three of a Kind\";\\n        else if(sameRank==2) return \"Pair\";\\n         return \"High Card\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2323044,
                "title": "easy-c-beginner-friendly-solution",
                "content": "```\\n\\tclass Solution {\\npublic:\\n    \\n    bool allEqual(vector<char>& suits){\\n        int n = suits.size();\\n        char first = suits[0];\\n        for(int i=1;i<n;i++){\\n            if(suits[i] != first){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    \\n    bool threeSame(vector<int>& ranks){\\n        int n = ranks.size();\\n        unordered_map<int,int> mp;\\n        for(int i=0;i<n;i++){\\n            mp[ranks[i]]++;\\n        }\\n        for(auto i : mp){\\n            if(i.second >= 3){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n     bool twoSame(vector<int>& ranks){\\n        int n = ranks.size();\\n        unordered_map<int,int> mp;\\n        for(int i=0;i<n;i++){\\n            mp[ranks[i]]++;\\n        }\\n        for(auto i : mp){\\n            if(i.second == 2){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int n = ranks.size();\\n        string ans;\\n        if(allEqual(suits)){\\n            ans = \"Flush\";\\n        }\\n        else if(threeSame(ranks)){\\n            ans = \"Three of a Kind\";\\n        }\\n        else if(twoSame(ranks)){\\n            ans = \"Pair\";\\n        }\\n        else{\\n            ans = \"High Card\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\tclass Solution {\\npublic:\\n    \\n    bool allEqual(vector<char>& suits){\\n        int n = suits.size();\\n        char first = suits[0];\\n        for(int i=1;i<n;i++){\\n            if(suits[i] != first){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    \\n    bool threeSame(vector<int>& ranks){\\n        int n = ranks.size();\\n        unordered_map<int,int> mp;\\n        for(int i=0;i<n;i++){\\n            mp[ranks[i]]++;\\n        }\\n        for(auto i : mp){\\n            if(i.second >= 3){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n     bool twoSame(vector<int>& ranks){\\n        int n = ranks.size();\\n        unordered_map<int,int> mp;\\n        for(int i=0;i<n;i++){\\n            mp[ranks[i]]++;\\n        }\\n        for(auto i : mp){\\n            if(i.second == 2){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int n = ranks.size();\\n        string ans;\\n        if(allEqual(suits)){\\n            ans = \"Flush\";\\n        }\\n        else if(threeSame(ranks)){\\n            ans = \"Three of a Kind\";\\n        }\\n        else if(twoSame(ranks)){\\n            ans = \"Pair\";\\n        }\\n        else{\\n            ans = \"High Card\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2323025,
                "title": "javascript-solution",
                "content": "```\\nvar bestHand = function(rank, st) \\n{\\n    let list={};\\n    for(let it of st){\\n        if(!list[it]){\\n            list[it]=1;\\n        }\\n        else{\\n            list[it]+=1;\\n        }\\n    }\\n    if(Object.keys(list).length===1) return \"Flush\";\\n    let map={};\\n    let istwo=0;\\n    for(let it of rank){\\n        if(!map[it]){\\n            map[it]=1;\\n        }\\n        else{\\n            map[it]+=1;\\n        }\\n        if(map[it]===3){\\n            return \"Three of a Kind\";\\n        }\\n        if(map[it]===2){\\n            istwo=1;\\n        }\\n    }\\n    if(istwo===1) return \"Pair\";\\n    return \"High Card\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar bestHand = function(rank, st) \\n{\\n    let list={};\\n    for(let it of st){\\n        if(!list[it]){\\n            list[it]=1;\\n        }\\n        else{\\n            list[it]+=1;\\n        }\\n    }\\n    if(Object.keys(list).length===1) return \"Flush\";\\n    let map={};\\n    let istwo=0;\\n    for(let it of rank){\\n        if(!map[it]){\\n            map[it]=1;\\n        }\\n        else{\\n            map[it]+=1;\\n        }\\n        if(map[it]===3){\\n            return \"Three of a Kind\";\\n        }\\n        if(map[it]===2){\\n            istwo=1;\\n        }\\n    }\\n    if(istwo===1) return \"Pair\";\\n    return \"High Card\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2322591,
                "title": "java-1ms-easy-using-hashmap",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n          HashMap<Character,Integer> map=new HashMap<>();\\n        HashMap<Integer,Integer> map2=new HashMap<>();\\n        int temp=0;\\n        int count=0;\\n        for(int i=0;i<ranks.length;i++)\\n        {\\n            if(map.containsKey(suits[i]))\\n            {\\n                int curr=map.get(suits[i]);\\n                temp=Math.max(temp,curr);\\n            }\\n            if(map2.containsKey(ranks[i]))\\n            {\\n                int curr=map2.get(ranks[i]);\\n                count=Math.max(curr,count);\\n            }\\n            map.put(suits[i],map.getOrDefault(suits[i],0)+1);\\n            map2.put(ranks[i],map2.getOrDefault(ranks[i],0)+1);\\n        }\\n        if(temp==ranks.length-1)\\n            return \"Flush\";\\n        if(count>=2)\\n            return \"Three of a Kind\";\\n        if(count==1)\\n            return \"Pair\";\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n          HashMap<Character,Integer> map=new HashMap<>();\\n        HashMap<Integer,Integer> map2=new HashMap<>();\\n        int temp=0;\\n        int count=0;\\n        for(int i=0;i<ranks.length;i++)\\n        {\\n            if(map.containsKey(suits[i]))\\n            {\\n                int curr=map.get(suits[i]);\\n                temp=Math.max(temp,curr);\\n            }\\n            if(map2.containsKey(ranks[i]))\\n            {\\n                int curr=map2.get(ranks[i]);\\n                count=Math.max(curr,count);\\n            }\\n            map.put(suits[i],map.getOrDefault(suits[i],0)+1);\\n            map2.put(ranks[i],map2.getOrDefault(ranks[i],0)+1);\\n        }\\n        if(temp==ranks.length-1)\\n            return \"Flush\";\\n        if(count>=2)\\n            return \"Three of a Kind\";\\n        if(count==1)\\n            return \"Pair\";\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322555,
                "title": "c-map",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        \\n        unordered_map<char,int>mp1;\\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            mp1[suits[i]]++;\\n        }\\n        for(auto i:mp1)if(i.second==5)return \"Flush\";\\n        unordered_map<int,int>mp;        \\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            mp[ranks[i]]++;\\n        }\\n        for(auto i:mp)if(i.second>=3)return \"Three of a Kind\";\\n        for(auto i:mp)if(i.second>=2)return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        \\n        unordered_map<char,int>mp1;\\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            mp1[suits[i]]++;\\n        }\\n        for(auto i:mp1)if(i.second==5)return \"Flush\";\\n        unordered_map<int,int>mp;        \\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            mp[ranks[i]]++;\\n        }\\n        for(auto i:mp)if(i.second>=3)return \"Three of a Kind\";\\n        for(auto i:mp)if(i.second>=2)return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322549,
                "title": "trivial-java-solution",
                "content": "Keep a frequency map for suits and ranks and check for all the conditions at the end. \\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        HashMap<Character, Integer> sm = new HashMap<>();\\n        HashMap<Integer, Integer> rm = new HashMap<>();\\n    \\n        for(int i = 0; i < 5 ; i++){\\n            sm.put(suits[i], sm.getOrDefault(suits[i],0)+1);\\n            rm.put(ranks[i], rm.getOrDefault(ranks[i],0)+1);\\n        }\\n        \\n        for(char cs : suits){\\n            if(sm.get(cs) == 5){\\n                return \"Flush\";\\n            }\\n        }\\n        \\n        for(int cr : ranks){\\n            if(rm.get(cr) >= 3){\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for(int cr : ranks){\\n            if(rm.get(cr) == 2){\\n                return \"Pair\";\\n            }\\n        }\\n        \\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        HashMap<Character, Integer> sm = new HashMap<>();\\n        HashMap<Integer, Integer> rm = new HashMap<>();\\n    \\n        for(int i = 0; i < 5 ; i++){\\n            sm.put(suits[i], sm.getOrDefault(suits[i],0)+1);\\n            rm.put(ranks[i], rm.getOrDefault(ranks[i],0)+1);\\n        }\\n        \\n        for(char cs : suits){\\n            if(sm.get(cs) == 5){\\n                return \"Flush\";\\n            }\\n        }\\n        \\n        for(int cr : ranks){\\n            if(rm.get(cr) >= 3){\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for(int cr : ranks){\\n            if(rm.get(cr) == 2){\\n                return \"Pair\";\\n            }\\n        }\\n        \\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322540,
                "title": "c-hashmap-easy",
                "content": "**C++**\\n            \\n\\t  public:\\n      string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int,int> m;\\n        unordered_map<char,int> mp;\\n        for(auto c:suits)mp[c]++;\\n        for(auto p:mp){\\n            if(p.second==5)return \"Flush\";\\n        }\\n        for(auto b:ranks)m[b]++;\\n        for(auto x:m){\\n            if(x.second>=3)return \"Three of a Kind\";\\n           \\n            \\n        }\\n         for(auto o:m){\\n            \\n           if(o.second==2)return \"Pair\";\\n            \\n        }\\n        return \"High Card\";\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "**C++**\\n            \\n\\t  public:\\n      string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int,int> m;\\n        unordered_map<char,int> mp;\\n        for(auto c:suits)mp[c]++;\\n        for(auto p:mp){\\n            if(p.second==5)return \"Flush\";\\n        }\\n        for(auto b:ranks)m[b]++;\\n        for(auto x:m){\\n            if(x.second>=3)return \"Three of a Kind\";\\n           \\n            \\n        }\\n         for(auto o:m){\\n            \\n           if(o.second==2)return \"Pair\";\\n            \\n        }\\n        return \"High Card\";\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2322494,
                "title": "very-easy-and-simple-to-understand-c-solution",
                "content": "<b> Up Vote if you like the solution\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> rmp;\\n        for(auto s: suits) rmp[s]++;\\n        for(auto m: rmp) if(m.second == 5) return \"Flush\";\\n        rmp.clear();\\n        for(auto r: ranks) rmp[r]++;\\n        for(auto m: rmp) if(m.second >= 3) return \"Three of a Kind\";\\n        for(auto m: rmp) if(m.second >= 2) return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> rmp;\\n        for(auto s: suits) rmp[s]++;\\n        for(auto m: rmp) if(m.second == 5) return \"Flush\";\\n        rmp.clear();\\n        for(auto r: ranks) rmp[r]++;\\n        for(auto m: rmp) if(m.second >= 3) return \"Three of a Kind\";\\n        for(auto m: rmp) if(m.second >= 2) return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3793279,
                "title": "100-beats-fastest-solution-java",
                "content": "# Code\\n```\\nclass Solution{\\n    public String bestHand(int[] ranks, char[] suits){\\n        int[] arr = new int[14];\\n        for(int i=0; i<5; i++) arr[ranks[i]]++;\\n        int max = maxNum(arr);\\n        if(isFlush(suits)) return \"Flush\";\\n        else if(max>=3) return \"Three of a Kind\";\\n        else if(max>=2) return \"Pair\";\\n        else return \"High Card\";\\n        \\n    }\\n\\n    public boolean isFlush(char[] suits){\\n        char a = suits[0];\\n        for(int i=1; i<suits.length; i++){\\n            if(suits[i]!=a) return false;\\n        }\\n        return true;\\n    }\\n\\n    public int maxNum(int[] arr){\\n        int max = arr[0];\\n        for(int e:arr) max = Math.max(max, e);\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution{\\n    public String bestHand(int[] ranks, char[] suits){\\n        int[] arr = new int[14];\\n        for(int i=0; i<5; i++) arr[ranks[i]]++;\\n        int max = maxNum(arr);\\n        if(isFlush(suits)) return \"Flush\";\\n        else if(max>=3) return \"Three of a Kind\";\\n        else if(max>=2) return \"Pair\";\\n        else return \"High Card\";\\n        \\n    }\\n\\n    public boolean isFlush(char[] suits){\\n        char a = suits[0];\\n        for(int i=1; i<suits.length; i++){\\n            if(suits[i]!=a) return false;\\n        }\\n        return true;\\n    }\\n\\n    public int maxNum(int[] arr){\\n        int max = arr[0];\\n        for(int e:arr) max = Math.max(max, e);\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3376028,
                "title": "best-poker-hand-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int i, j=0;\\n        string str;\\n        for(i=0 ; i<suits.size() ; i++)\\n        {\\n            if(count(suits.begin(), suits.end(), suits[i])>=5)\\n            {\\n                str = \"Flush\";\\n                return str;\\n            }\\n        }\\n        for(i=0 ; i<ranks.size() ; i++)\\n        {\\n            if(count(ranks.begin(), ranks.end(), ranks[i])>=3)\\n            {\\n                str = \"Three of a Kind\";\\n                return str;\\n            }\\n            else if(count(ranks.begin(), ranks.end(), ranks[i])>j)\\n            {\\n                j = count(ranks.begin(), ranks.end(), ranks[i]);\\n            }\\n        }\\n        if(j==2)\\n        {\\n            str = \"Pair\";\\n            return str;\\n        }\\n        else\\n        {\\n            str = \"High Card\";\\n            return str;\\n        }\\n        return str;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/792a2ee3-fa92-4936-9a87-216cd9a9ac02_1682613207.1269994.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int i, j=0;\\n        string str;\\n        for(i=0 ; i<suits.size() ; i++)\\n        {\\n            if(count(suits.begin(), suits.end(), suits[i])>=5)\\n            {\\n                str = \"Flush\";\\n                return str;\\n            }\\n        }\\n        for(i=0 ; i<ranks.size() ; i++)\\n        {\\n            if(count(ranks.begin(), ranks.end(), ranks[i])>=3)\\n            {\\n                str = \"Three of a Kind\";\\n                return str;\\n            }\\n            else if(count(ranks.begin(), ranks.end(), ranks[i])>j)\\n            {\\n                j = count(ranks.begin(), ranks.end(), ranks[i]);\\n            }\\n        }\\n        if(j==2)\\n        {\\n            str = \"Pair\";\\n            return str;\\n        }\\n        else\\n        {\\n            str = \"High Card\";\\n            return str;\\n        }\\n        return str;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3323888,
                "title": "c-easy-best-poker-hand-0ms-runtime-100-beats-5-6mb-usage-90-91-beats",
                "content": "# Approach\\nThe code is self-explanatory.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n```\\nchar * bestHand(int* ranks, int ranksSize, char* suits, int suitsSize)\\n{\\n    int rankAppear[13] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\\n    int suitAppear[4] = {0, 0, 0, 0};\\n\\n    int rankMax = 0, suitMax = 0, best = 0;\\n\\n    for(int i = 0; i < ranksSize; i++) rankAppear[ranks[i] - 1] += 1;\\n    for(int i = 0; i < suitsSize; i++) suitAppear[suits[i] - \\'a\\'] += 1;\\n    \\n    for(int i = 0; i < 13; i++) \\n    {\\n        if(rankAppear[i] > rankMax) \\n        {\\n            if(rankAppear[i] > 3) rankAppear[i] = 3;\\n\\n            rankMax = rankAppear[i];\\n        }\\n\\n        if(i < 4) \\n        {\\n            if(suitAppear[i] > suitMax) \\n            {\\n                if(suitAppear[i] > 1 && suitAppear[i] < 5) suitAppear[i] = 1;\\n\\n                suitMax = suitAppear[i];\\n            }\\n        }\\n    }\\n\\n\\n    best = (suitMax > rankMax)? suitMax : rankMax;\\n\\n    return (best == 1)? \"High Card\" : (best == 2)? \"Pair\" : (best == 3)? \"Three of a Kind\" : \"Flush\";\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nchar * bestHand(int* ranks, int ranksSize, char* suits, int suitsSize)\\n{\\n    int rankAppear[13] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\\n    int suitAppear[4] = {0, 0, 0, 0};\\n\\n    int rankMax = 0, suitMax = 0, best = 0;\\n\\n    for(int i = 0; i < ranksSize; i++) rankAppear[ranks[i] - 1] += 1;\\n    for(int i = 0; i < suitsSize; i++) suitAppear[suits[i] - \\'a\\'] += 1;\\n    \\n    for(int i = 0; i < 13; i++) \\n    {\\n        if(rankAppear[i] > rankMax) \\n        {\\n            if(rankAppear[i] > 3) rankAppear[i] = 3;\\n\\n            rankMax = rankAppear[i];\\n        }\\n\\n        if(i < 4) \\n        {\\n            if(suitAppear[i] > suitMax) \\n            {\\n                if(suitAppear[i] > 1 && suitAppear[i] < 5) suitAppear[i] = 1;\\n\\n                suitMax = suitAppear[i];\\n            }\\n        }\\n    }\\n\\n\\n    best = (suitMax > rankMax)? suitMax : rankMax;\\n\\n    return (best == 1)? \"High Card\" : (best == 2)? \"Pair\" : (best == 3)? \"Three of a Kind\" : \"Flush\";\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3323813,
                "title": "easy-java-solution-using-hashmap",
                "content": "# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        char suit = suits[0];\\n        boolean flag = true;\\n        for(char c : suits)\\n        {\\n            if(suit!=c)\\n            {\\n                flag = false;\\n                break;\\n            }\\n        }\\n        if(flag)\\n            return \"Flush\";\\n        Map<Integer, Integer> rank = new HashMap<>();\\n        for(int  i : ranks)\\n        {\\n            if(!rank.containsKey(i))\\n            {\\n                rank.put(i,1);\\n            }\\n            else\\n            {\\n                int count = rank.get(i);\\n                rank.put(i,++count);\\n            }\\n        }\\n        int count = 0 ;\\n        for(int i : rank.keySet())\\n        {\\n            if(rank.get(i)>count)\\n                count = rank.get(i);\\n        }\\n\\n        if(count==2)\\n            return \"Pair\";\\n        else if(count==1)\\n            return \"High Card\";\\n        else\\n            return \"Three of a Kind\";\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        char suit = suits[0];\\n        boolean flag = true;\\n        for(char c : suits)\\n        {\\n            if(suit!=c)\\n            {\\n                flag = false;\\n                break;\\n            }\\n        }\\n        if(flag)\\n            return \"Flush\";\\n        Map<Integer, Integer> rank = new HashMap<>();\\n        for(int  i : ranks)\\n        {\\n            if(!rank.containsKey(i))\\n            {\\n                rank.put(i,1);\\n            }\\n            else\\n            {\\n                int count = rank.get(i);\\n                rank.put(i,++count);\\n            }\\n        }\\n        int count = 0 ;\\n        for(int i : rank.keySet())\\n        {\\n            if(rank.get(i)>count)\\n                count = rank.get(i);\\n        }\\n\\n        if(count==2)\\n            return \"Pair\";\\n        else if(count==1)\\n            return \"High Card\";\\n        else\\n            return \"Three of a Kind\";\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3207273,
                "title": "basic-c-easy-solution-just-by-sorting",
                "content": "# Intuition\\nFirst sort both the vectors\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nAfter sorting the vectors, just apply the given conditions in the problem statement\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N logN)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n\\n        if(suits[0]==suits[4])\\n        return \"Flush\";\\n        else if(ranks[0]==ranks[2] || ranks[1]==ranks[3] || ranks[2]==ranks[4])\\n        return \"Three of a Kind\";\\n        else if(ranks[0]==ranks[1] || ranks[1]==ranks[2] || ranks[2]==ranks[3]\\n        || ranks[3]==ranks[4])\\n        return \"Pair\";\\n        else\\n        return \"High Card\";\\n    }\\n};\\n```\\n![4q0zf1.jpg](https://assets.leetcode.com/users/images/4bd70366-cbb5-46fb-8edb-9f5028b701c8_1676834292.1899798.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "Sorting",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n\\n        if(suits[0]==suits[4])\\n        return \"Flush\";\\n        else if(ranks[0]==ranks[2] || ranks[1]==ranks[3] || ranks[2]==ranks[4])\\n        return \"Three of a Kind\";\\n        else if(ranks[0]==ranks[1] || ranks[1]==ranks[2] || ranks[2]==ranks[3]\\n        || ranks[3]==ranks[4])\\n        return \"Pair\";\\n        else\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3066102,
                "title": "2347-java-3-approach",
                "content": "# Approach 1\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 0 ms\\n- Beats : 100%\\n- Memory : 40.3 MB\\n- Beats : 53.24%\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int max = 0 , count = 0 , i = 0;\\n        int arr[] = new int[14];\\n        while(i < 5){\\n            if(suits[0] == suits[i]) count++;\\n            max = Math.max(++arr[ranks[i]] , max);\\n            i++;\\n        }\\n        return count == 5 ? \"Flush\" : \\n        max > 2 ? \"Three of a Kind\" : \\n        max > 1 ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```\\n# Approach 2\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 0 ms\\n- Beats : 100%\\n- Memory : 39.8 MB\\n- Beats : 92.96%\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] s) {\\n        if(s[0]==s[1]&&s[0]==s[2]&&s[0]==s[3]&&s[0]==s[4]) return \"Flush\";\\n        boolean b = false;\\n        Arrays.sort(ranks);\\n        for(int j = 0; j < 3; j++) {\\n            if(ranks[j] == ranks[j+1]){\\n                 if(ranks[j+1] == ranks[j+2])return \"Three of a Kind\";\\n                 b = true;\\n            }\\n            if(ranks[j+1] == ranks[j+2]) b = true;\\n        }\\n        return b ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```\\n# Approach 3\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 0 ms\\n- Beats : 100%\\n- Memory : 40 MB\\n- Beats : 74.65%\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int arr[] = new int[5];\\n        boolean b = false;\\n        for(char ch : suits) arr[ch - \\'a\\']++;\\n        for(int i : arr) if(i == 5) return \"Flush\";\\n        Arrays.sort(ranks);\\n        for(int j = 0; j < 3; j++) {\\n            if(ranks[j] == ranks[j+1]){\\n                 if(ranks[j+1] == ranks[j+2])return \"Three of a Kind\";\\n                 b = true;\\n            }\\n            if(ranks[j+1] == ranks[j+2]) b = true;\\n        }\\n        return b ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int max = 0 , count = 0 , i = 0;\\n        int arr[] = new int[14];\\n        while(i < 5){\\n            if(suits[0] == suits[i]) count++;\\n            max = Math.max(++arr[ranks[i]] , max);\\n            i++;\\n        }\\n        return count == 5 ? \"Flush\" : \\n        max > 2 ? \"Three of a Kind\" : \\n        max > 1 ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] s) {\\n        if(s[0]==s[1]&&s[0]==s[2]&&s[0]==s[3]&&s[0]==s[4]) return \"Flush\";\\n        boolean b = false;\\n        Arrays.sort(ranks);\\n        for(int j = 0; j < 3; j++) {\\n            if(ranks[j] == ranks[j+1]){\\n                 if(ranks[j+1] == ranks[j+2])return \"Three of a Kind\";\\n                 b = true;\\n            }\\n            if(ranks[j+1] == ranks[j+2]) b = true;\\n        }\\n        return b ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int arr[] = new int[5];\\n        boolean b = false;\\n        for(char ch : suits) arr[ch - \\'a\\']++;\\n        for(int i : arr) if(i == 5) return \"Flush\";\\n        Arrays.sort(ranks);\\n        for(int j = 0; j < 3; j++) {\\n            if(ranks[j] == ranks[j+1]){\\n                 if(ranks[j+1] == ranks[j+2])return \"Three of a Kind\";\\n                 b = true;\\n            }\\n            if(ranks[j+1] == ranks[j+2]) b = true;\\n        }\\n        return b ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3055784,
                "title": "using-unordered-set-o-nlogn-3ms",
                "content": "# Intuition\\nCount the frequency of elements in suits first and if there are more than one element, check the frequency in ranks array.\\n\\n# Approach\\nDeclare an unordered set, store the elements of suits in the set. If the size of the set equals to 1, return \"Flush\". \\n\\nIf the size is greater than 1, sort the ranks array to calculate the frequencies of all the elements and find the maximum frequency in the ranks array.\\n\\nIf the maximum frequncy is greater than or equal to 3, return \"Three of a Kind\".\\n\\nElse if maximum frequency is equal to 2, return \"Pair\".\\n\\nElse return \"High Card\".\\n\\n# Complexity\\n- Time complexity:\\nO(nlogn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        unordered_set<int> s(suits.begin() , suits.end());\\n        if(s.size() == 1)   return \"Flush\";\\n        sort(ranks.begin() , ranks.end());\\n        int mx = 0, count = 1;\\n        for(int i = 1; i < 5; i++)\\n        {\\n            if(ranks[i] == ranks[i - 1])\\n            {\\n                count++;\\n                mx = max(count , mx);\\n            }\\n            else\\n                count = 1;\\n        }\\n        if(mx >= 3)  return \"Three of a Kind\";\\n        if(mx == 2)  return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) \\n    {\\n        unordered_set<int> s(suits.begin() , suits.end());\\n        if(s.size() == 1)   return \"Flush\";\\n        sort(ranks.begin() , ranks.end());\\n        int mx = 0, count = 1;\\n        for(int i = 1; i < 5; i++)\\n        {\\n            if(ranks[i] == ranks[i - 1])\\n            {\\n                count++;\\n                mx = max(count , mx);\\n            }\\n            else\\n                count = 1;\\n        }\\n        if(mx >= 3)  return \"Three of a Kind\";\\n        if(mx == 2)  return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3002196,
                "title": "accepted-swift",
                "content": "```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        \\n        guard Set(suits).count > 1 else { return \"Flush\" }\\n        \\n        let cs = ranks.reduce(into: [Int: Int](), { $0[$1, default: 0] += 1 }).values.max()!\\n        \\n        guard cs < 3 else { return \"Three of a Kind\" }\\n        guard cs < 2 else { return \"Pair\" }\\n        \\n        return \"High Card\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        \\n        guard Set(suits).count > 1 else { return \"Flush\" }\\n        \\n        let cs = ranks.reduce(into: [Int: Int](), { $0[$1, default: 0] += 1 }).values.max()!\\n        \\n        guard cs < 3 else { return \"Three of a Kind\" }\\n        guard cs < 2 else { return \"Pair\" }\\n        \\n        return \"High Card\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877177,
                "title": "java-hashmap-easy-to-understand-o-n-time",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Integer> h=new HashMap<>();\\n        for(int i=0; i<ranks.length; i++){\\n            h.put(ranks[i], h.getOrDefault(ranks[i],0)+1);\\n        }\\n        HashMap<Character, Integer> h1=new HashMap<>();\\n        for(int i=0; i<suits.length; i++){\\n            h1.put(suits[i], h1.getOrDefault(suits[i],0)+1);\\n        }\\n        for(int i: h1.values()){\\n            if(i==5){\\n                return \"Flush\"; \\n            }\\n        }\\n        for(int i: h.values()){\\n            if(i>=3){\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for(int i: h.values()){\\n            if(i==2){\\n                return \"Pair\";\\n            }\\n        }\\n        for(int i: h.values()){\\n            if(i==1){\\n                return \"High Card\";\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Integer> h=new HashMap<>();\\n        for(int i=0; i<ranks.length; i++){\\n            h.put(ranks[i], h.getOrDefault(ranks[i],0)+1);\\n        }\\n        HashMap<Character, Integer> h1=new HashMap<>();\\n        for(int i=0; i<suits.length; i++){\\n            h1.put(suits[i], h1.getOrDefault(suits[i],0)+1);\\n        }\\n        for(int i: h1.values()){\\n            if(i==5){\\n                return \"Flush\"; \\n            }\\n        }\\n        for(int i: h.values()){\\n            if(i>=3){\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for(int i: h.values()){\\n            if(i==2){\\n                return \"Pair\";\\n            }\\n        }\\n        for(int i: h.values()){\\n            if(i==1){\\n                return \"High Card\";\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874095,
                "title": "crazy-1ms-solution-c-java",
                "content": "# \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Integer> maprank=new HashMap();\\n        for(int i:ranks)\\n        {\\n            maprank.put(i,maprank.getOrDefault(i,0)+1);\\n        }\\n        HashMap<Character, Integer> mapsuit=new HashMap();\\n        for(char c:suits)\\n        {\\n            mapsuit.put(c,mapsuit.getOrDefault(c,0)+1);\\n        }\\n        if(mapsuit.containsValue(5))\\n            return \"Flush\";\\n        if(maprank.containsValue(3)||maprank.containsValue(4)||maprank.containsValue(5))\\n            return \"Three of a Kind\";\\n        if(maprank.containsValue(2))\\n            return \"Pair\";\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Integer> maprank=new HashMap();\\n        for(int i:ranks)\\n        {\\n            maprank.put(i,maprank.getOrDefault(i,0)+1);\\n        }\\n        HashMap<Character, Integer> mapsuit=new HashMap();\\n        for(char c:suits)\\n        {\\n            mapsuit.put(c,mapsuit.getOrDefault(c,0)+1);\\n        }\\n        if(mapsuit.containsValue(5))\\n            return \"Flush\";\\n        if(maprank.containsValue(3)||maprank.containsValue(4)||maprank.containsValue(5))\\n            return \"Three of a Kind\";\\n        if(maprank.containsValue(2))\\n            return \"Pair\";\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2578586,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        char[] theSame = new char[suits.length];\\n        Arrays.fill(theSame, suits[0]);\\n        if(Arrays.equals(suits, theSame)){\\n            return \"Flush\";\\n        }\\n        \\n        Map<Integer, Integer> map = new HashMap<>();\\n        \\n        for(int n : ranks){\\n            map.merge(n, 1, (a,b) -> a + b);\\n        }\\n        \\n        if(Collections.max(map.values()) >= 3){\\n            return \"Three of a Kind\";\\n        }\\n        \\n        if(Collections.max(map.values()) >= 2){\\n            return \"Pair\";\\n        }\\n        \\n        return \"High Card\";\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        char[] theSame = new char[suits.length];\\n        Arrays.fill(theSame, suits[0]);\\n        if(Arrays.equals(suits, theSame)){\\n            return \"Flush\";\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2518986,
                "title": "java-solution-1ms-runtime-easy-to-understand-brute-force",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] rank, char[] card) {\\n        if (allCardSame(card)) return \"Flush\";\\n        if (threeOfKind(rank)) return \"Three of a Kind\";\\n        if (pair(rank)) return \"Pair\";\\n        if (highCard(rank)) return \"High Card\";\\n        return \"\";\\n    }\\n\\n    private static boolean highCard(int[] rank) {\\n        for (int i = 0; i < rank.length - 1; i++) {\\n            for (int j = i+1; j < rank.length; j++) {\\n                if (rank[i] == rank[j]) return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private static boolean pair(int[] rank) {\\n        int two = 0;\\n        for (int i = 0; i < rank.length - 1; i++) {\\n            int n = 1;\\n            for (int j = i+1; j < rank.length; j++) {\\n                if (rank[i] == rank[j]) {\\n                    n++;\\n                }\\n            }\\n            if (n < 2) continue;\\n            if (n > 2) return false;\\n            two = n;\\n        }\\n        return two == 2;\\n    }\\n\\n    private static boolean threeOfKind(int[] rank) {\\n        for (int i = 0; i < rank.length - 1; i++) {\\n            int n = 1;\\n            for (int j = i+1; j < rank.length; j++) {\\n                if (rank[i] == rank[j]) n++;\\n            }\\n            if (n >= 3) return true;\\n        }\\n        return false;\\n    }\\n\\n    private static boolean allCardSame(char[] card) {\\n        for (char c : card) {\\n            if (card[0] != c) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] rank, char[] card) {\\n        if (allCardSame(card)) return \"Flush\";\\n        if (threeOfKind(rank)) return \"Three of a Kind\";\\n        if (pair(rank)) return \"Pair\";\\n        if (highCard(rank)) return \"High Card\";\\n        return \"\";\\n    }\\n\\n    private static boolean highCard(int[] rank) {\\n        for (int i = 0; i < rank.length - 1; i++) {\\n            for (int j = i+1; j < rank.length; j++) {\\n                if (rank[i] == rank[j]) return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private static boolean pair(int[] rank) {\\n        int two = 0;\\n        for (int i = 0; i < rank.length - 1; i++) {\\n            int n = 1;\\n            for (int j = i+1; j < rank.length; j++) {\\n                if (rank[i] == rank[j]) {\\n                    n++;\\n                }\\n            }\\n            if (n < 2) continue;\\n            if (n > 2) return false;\\n            two = n;\\n        }\\n        return two == 2;\\n    }\\n\\n    private static boolean threeOfKind(int[] rank) {\\n        for (int i = 0; i < rank.length - 1; i++) {\\n            int n = 1;\\n            for (int j = i+1; j < rank.length; j++) {\\n                if (rank[i] == rank[j]) n++;\\n            }\\n            if (n >= 3) return true;\\n        }\\n        return false;\\n    }\\n\\n    private static boolean allCardSame(char[] card) {\\n        for (char c : card) {\\n            if (card[0] != c) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2500500,
                "title": "java-1ms-using-array-as-bucket",
                "content": "Keep count of number of suits and ranks.\\nAnd, run checks through the constraints provided by the question.\\n\\n```java\\npublic String bestHand(int[] ranks, char[] suits) {\\n        \\n        int[] suitCount = new int[4];\\n        for(char ch : suits){\\n            ++suitCount[ch - \\'a\\'];\\n        }\\n        \\n        int[] rankCount = new int[13];\\n        for(int rank : ranks){\\n            ++rankCount[rank - 1];\\n        }\\n        \\n        for(int num : suitCount){\\n            if(num == 5) return \"Flush\";\\n        }\\n        \\n        int max = -1;\\n        for(int num : rankCount){\\n            if(num > max) max = num;\\n        }\\n        \\n        if(max >= 3) return \"Three of a Kind\";\\n        if(max == 2) return \"Pair\";\\n        \\n        return \"High Card\";\\n    }\\n\\t\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "Iterator"
                ],
                "code": "```java\\npublic String bestHand(int[] ranks, char[] suits) {\\n        \\n        int[] suitCount = new int[4];\\n        for(char ch : suits){\\n            ++suitCount[ch - \\'a\\'];\\n        }\\n        \\n        int[] rankCount = new int[13];\\n        for(int rank : ranks){\\n            ++rankCount[rank - 1];\\n        }\\n        \\n        for(int num : suitCount){\\n            if(num == 5) return \"Flush\";\\n        }\\n        \\n        int max = -1;\\n        for(int num : rankCount){\\n            if(num > max) max = num;\\n        }\\n        \\n        if(max >= 3) return \"Three of a Kind\";\\n        if(max == 2) return \"Pair\";\\n        \\n        return \"High Card\";\\n    }\\n\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2491231,
                "title": "c-easy-using-hash-map-4ms",
                "content": "class Solution {\\npublic:\\n    string bestHand(vector<int>& r, vector<char>& s) {\\n        unordered_map<int,int>m;\\n        int b=0,c=0;\\n        for(auto i:r)m[i]++;\\n        for(auto i:m){\\n            if(i.second>2) b++;\\n            else if(i.second==2) c++;\\n        }\\n        int f=count(s.begin(),s.end(),s[0]);\\n        if(f==r.size()) return \"Flush\";\\n        else if(b>=c && b>0) return \"Three of a Kind\";\\n        else if(b<c) return \"Pair\";\\n        return \"High Card\";\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string bestHand(vector<int>& r, vector<char>& s) {\\n        unordered_map<int,int>m;\\n        int b=0,c=0;\\n        for(auto i:r)m[i]++;\\n        for(auto i:m){\\n            if(i.second>2) b++;\\n            else if(i.second==2) c++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2402482,
                "title": "c-faster-than-100",
                "content": "class Solution {\\npublic:\\n    string bestHand(vector<int>& rank, vector<char>& suits) {\\n        string ans=\"High Card\";\\n        char temp;\\n        sort(rank.begin(),rank.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=0;i<suits.size();i++){\\n             temp=suits[0];\\n            if(temp==suits[4]){\\n                ans= \"Flush\";\\n                break;\\n            }}\\n             for(int i=0;i<suits.size();i++){\\n                   if(rank[i]==rank[i+1]){\\n                ans= \"Pair\";\\n                      \\n            }\\n                 if(rank[i]==rank[i+1] && rank[i]==rank[i+2] ){\\n                ans= \"Three of a Kind\";\\n                     break;\\n             } \\n                \\n             }\\n           \\n            \\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string bestHand(vector<int>& rank, vector<char>& suits) {\\n        string ans=\"High Card\";\\n        char temp;\\n        sort(rank.begin(),rank.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=0;i<suits.size();i++){\\n             temp=suits[0];\\n            if(temp==suits[4]){\\n                ans= \"Flush\";\\n                break;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2377771,
                "title": "python-easy-colution",
                "content": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        N = len(ranks)\\n        statistic = defaultdict(int)\\n\\n        letter_freq = 0\\n        number_freq = 0\\n\\n        for i in range(N):\\n            statistic[ranks[i]] += 1\\n            statistic[suits[i]] += 1\\n            letter_freq = max(letter_freq, statistic[suits[i]])\\n            number_freq = max(number_freq, statistic[ranks[i]])\\n\\n        if letter_freq >=5:\\n            return \"Flush\"\\n\\n        if number_freq >=3:\\n            return \"Three of a Kind\"\\n        if number_freq >= 2:\\n            return \"Pair\"\\n\\n        return \"High Card\"\\n```\\n\\nor by using counter\\n\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        N = len(ranks)\\n        statistic = defaultdict(int)\\n\\n        letter_freq = Counter(suits).most_common(1)\\n        number_freq = Counter(ranks).most_common(1)\\n        \\n        if letter_freq[0][1] >=5:\\n            return \"Flush\"\\n\\n        if number_freq[0][1] >=3:\\n            return \"Three of a Kind\"\\n        if number_freq[0][1] >= 2:\\n            return \"Pair\"\\n\\n        return \"High Card\"\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        N = len(ranks)\\n        statistic = defaultdict(int)\\n\\n        letter_freq = 0\\n        number_freq = 0\\n\\n        for i in range(N):\\n            statistic[ranks[i]] += 1\\n            statistic[suits[i]] += 1\\n            letter_freq = max(letter_freq, statistic[suits[i]])\\n            number_freq = max(number_freq, statistic[ranks[i]])\\n\\n        if letter_freq >=5:\\n            return \"Flush\"\\n\\n        if number_freq >=3:\\n            return \"Three of a Kind\"\\n        if number_freq >= 2:\\n            return \"Pair\"\\n\\n        return \"High Card\"\\n```\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        N = len(ranks)\\n        statistic = defaultdict(int)\\n\\n        letter_freq = Counter(suits).most_common(1)\\n        number_freq = Counter(ranks).most_common(1)\\n        \\n        if letter_freq[0][1] >=5:\\n            return \"Flush\"\\n\\n        if number_freq[0][1] >=3:\\n            return \"Three of a Kind\"\\n        if number_freq[0][1] >= 2:\\n            return \"Pair\"\\n\\n        return \"High Card\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2372709,
                "title": "easy-to-understand-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<char,int> c;\\n        for(auto i: suits) c[i]++;\\n        for(auto i:c) if(i.second==5) return \"Flush\";\\n        \\n        map<int,int> m;\\n        for(auto i: ranks) m[i]++;\\n        \\n        for(auto i: m) if(i.second>=3) return \"Three of a Kind\";\\n        for(auto i: m) if(i.second>=2) return \"Pair\";\\n        \\n        return \"High Card\";\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<char,int> c;\\n        for(auto i: suits) c[i]++;\\n        for(auto i:c) if(i.second==5) return \"Flush\";\\n        \\n        map<int,int> m;\\n        for(auto i: ranks) m[i]++;\\n        \\n        for(auto i: m) if(i.second>=3) return \"Three of a Kind\";\\n        for(auto i: m) if(i.second>=2) return \"Pair\";\\n        \\n        return \"High Card\";\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2370888,
                "title": "c-easy-soln",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        set<char>s(suits.begin(),suits.end());\\n        if(s.size()==1) return \"Flush\";\\n        unordered_map<int,int>m;\\n        for(auto x:ranks)\\n            m[x]++;\\n        bool res=false;\\n        for(auto [rk,ct]:m){\\n            if(ct>=3) return \"Three of a Kind\";\\n            if(ct>=2) res=true;\\n        }\\n        if(res) return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        set<char>s(suits.begin(),suits.end());\\n        if(s.size()==1) return \"Flush\";\\n        unordered_map<int,int>m;\\n        for(auto x:ranks)\\n            m[x]++;\\n        bool res=false;\\n        for(auto [rk,ct]:m){\\n            if(ct>=3) return \"Three of a Kind\";\\n            if(ct>=2) res=true;\\n        }\\n        if(res) return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2369839,
                "title": "ruby-one-liner",
                "content": "```\\n# @param {Integer[]} ranks\\n# @param {Character[]} suits\\n# @return {String}\\ndef best_hand(ranks, suits)\\n  suits.uniq.size == 1 ? \\'Flush\\' : [\\'High Card\\', \\'Pair\\'][ranks.tally.values.max - 1] || \\'Three of a Kind\\'\\nend\\n```",
                "solutionTags": [],
                "code": "```\\n# @param {Integer[]} ranks\\n# @param {Character[]} suits\\n# @return {String}\\ndef best_hand(ranks, suits)\\n  suits.uniq.size == 1 ? \\'Flush\\' : [\\'High Card\\', \\'Pair\\'][ranks.tally.values.max - 1] || \\'Three of a Kind\\'\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2349364,
                "title": "c-straightforward-approach-easy-simple",
                "content": "![image](https://assets.leetcode.com/users/images/9546892c-9308-438b-9775-6f1f91260523_1659078823.013932.png)\\n\\n**T->O(1) && S->O(1)\\nBecause size of both ransk and suits is always constant.**\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tstring bestHand(vector<int>& ranks, vector<char>& suits) {\\n\\t\\t\\tunordered_map<int,int>r,s;\\n\\t\\t\\tfor(auto i:ranks)r[i]++;\\n\\t\\t\\tfor(auto i:suits)s[i]++;\\n\\t\\t\\tif(s.size()==1)return \"Flush\";\\n\\t\\t\\tbool flag=false;\\n\\t\\t\\tfor(auto i:r){\\n\\t\\t\\t\\tif(i.second>=3)return \"Three of a Kind\";\\n\\t\\t\\t\\telse if(i.second==2)flag=true;\\n\\t\\t\\t}\\n\\t\\t\\tif(flag)return \"Pair\";\\n\\t\\t\\treturn \"High Card\";\\n\\t\\t}        \\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tstring bestHand(vector<int>& ranks, vector<char>& suits) {\\n\\t\\t\\tunordered_map<int,int>r,s;\\n\\t\\t\\tfor(auto i:ranks)r[i]++;\\n\\t\\t\\tfor(auto i:suits)s[i]++;\\n\\t\\t\\tif(s.size()==1)return \"Flush\";\\n\\t\\t\\tbool flag=false;\\n\\t\\t\\tfor(auto i:r){\\n\\t\\t\\t\\tif(i.second>=3)return \"Three of a Kind\";\\n\\t\\t\\t\\telse if(i.second==2)flag=true;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2342242,
                "title": "easy-java-solution-using-hashmap",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer,Integer> hmap = new HashMap<>();\\n        char c = suits[0];\\n        boolean check = true;\\n        int max = 0;\\n        for(int i=0;i<5;i++)\\n        {\\n            if(suits[i]!=c && check){\\n                check = false;\\n            }\\n            hmap.put(ranks[i],hmap.getOrDefault(ranks[i],0)+1);\\n            max = Math.max(hmap.get(ranks[i]),max);\\n        }\\n        if(check)\\n            return \"Flush\";\\n        else if(max>=3)\\n            return \"Three of a Kind\";\\n        else if(max==2)\\n            return \"Pair\";\\n        else\\n            return \"High Card\";\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer,Integer> hmap = new HashMap<>();\\n        char c = suits[0];\\n        boolean check = true;\\n        int max = 0;\\n        for(int i=0;i<5;i++)\\n        {\\n            if(suits[i]!=c && check){\\n                check = false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2339977,
                "title": "c-easy-solution-0ms-o-1-space",
                "content": "\\n\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        \\n        bool check  = true;\\n        for(int  i = 1 ; i < suits.size() ; i++)\\n        {\\n            if(suits[i]!=suits[i-1])\\n            {\\n                check = false;\\n                break;\\n            }\\n        }\\n        \\n        if(check)\\n            return \"Flush\";\\n        \\n        vector<int> mp(14, 0);\\n        \\n        for(int i = 0 ; i< 5; i++)\\n            mp[ranks[i]]++;\\n        \\n      \\n        for(int i = 1 ; i< 14; i++)\\n        {\\n             if(mp[i] >= 3)\\n                return \"Three of a Kind\";\\n            if(mp[i] == 2)\\n                check = true;\\n        }\\n        \\n        if(check)\\n            return \"Pair\";\\n        \\n        return \"High Card\";\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        \\n        bool check  = true;\\n        for(int  i = 1 ; i < suits.size() ; i++)\\n        {\\n            if(suits[i]!=suits[i-1])\\n            {\\n                check = false;\\n                break;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2337373,
                "title": "optimal-cpp-solution-o-n-simple-explanation",
                "content": "Simple solution using hash map.\\n\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map <int, int> r;\\n        unordered_map <int, int> s;\\n\\t\\t\\n\\t\\t//counting the number of times that particular element has been repeated \\n        for(int i = 0; i<ranks.size(); i++){\\n            r[ranks[i]]++;\\n            s[suits[i]]++;\\n        }\\n\\t\\t\\n\\t\\t//Traversing map\\n\\t\\t//Looking for Three of a Kind\\n        for(auto pr : r){\\n            if(pr.second >= 3)\\n                return \"Three of a Kind\";\\n        }\\n\\t\\t//Looking for Pair\\n        for(auto pr : r){\\n            if(pr.second == 2)\\n                return \"Pair\";\\n        }\\n\\t\\t//Looking for Flush\\n        for(auto pr : s){\\n            if(pr.second == 5)\\n                return \"Flush\";\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```\\nPlease upvote if you like my solution :)\\nThank you!",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map <int, int> r;\\n        unordered_map <int, int> s;\\n\\t\\t\\n\\t\\t//counting the number of times that particular element has been repeated \\n        for(int i = 0; i<ranks.size(); i++){\\n            r[ranks[i]]++;\\n            s[suits[i]]++;\\n        }\\n\\t\\t\\n\\t\\t//Traversing map\\n\\t\\t//Looking for Three of a Kind\\n        for(auto pr : r){\\n            if(pr.second >= 3)\\n                return \"Three of a Kind\";\\n        }\\n\\t\\t//Looking for Pair\\n        for(auto pr : r){\\n            if(pr.second == 2)\\n                return \"Pair\";\\n        }\\n\\t\\t//Looking for Flush\\n        for(auto pr : s){\\n            if(pr.second == 5)\\n                return \"Flush\";\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2329913,
                "title": "c-easy-to-understand-uisng-map-begineer-freindly",
                "content": "```\\nPlease upvote if you like the solution ):\\n```\\nstring bestHand(vector<int>& ranks, vector<char>& suits) {\\n        \\n       \\n       int n = ranks.size();\\n        int m  = suits.size();\\n        \\n        unordered_map<int,int> mp1; // for ranks\\n        unordered_map<int,int> mp2; // for suits\\n        \\n        int max1=0,max2 = 0;\\n        \\n        for(int i=0;i<n;i++){\\n            mp1[ranks[i]]++;\\n        }\\n        for(int j=0;j<m;j++){\\n            mp2[suits[j]]++;\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            max1 = max(max1,mp1[ranks[i]]);\\n        }\\n        \\n        for(int i=0;i<m;i++){\\n            max2 = max(max2,mp2[suits[i]]);\\n        }\\n        \\n        if(max2 == 5){\\n            return \"Flush\";\\n        }\\n        if(max1 >= 3){\\n            return \"Three of a Kind\";\\n        }\\n        if(max1 >= 2){\\n            return \"Pair\";\\n        }\\n        \\n        return \"High Card\";\\n        \\n        \\n        \\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nPlease upvote if you like the solution ):\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2326278,
                "title": "c-100-faster-time-complexity-o-1-space-complexity-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<char,int>m1;\\n        unordered_map<int,int>m;\\n        for(int i=0;i<5;i++)\\n            m[ranks[i]]++;\\n        for(int i=0;i<5;i++)\\n            m1[suits[i]-\\'a\\'];\\n        if(m1.size()==1)\\n            return \"Flush\";\\n        else if(m.size()==2)\\n            return \"Three of a Kind\";\\n        string x;\\n        for(auto &i:m)\\n        {\\n            if(i.second==3)\\n                return \"Three of a Kind\";\\n            else if(i.second==2)\\n                x=\"Pair\";\\n        }\\n        if(x==\"Pair\")\\n            return \"Pair\";\\n        else\\n            return \"High Card\";\\n        \\n    }\\n};\\nfeel free to ask your doubt happy to help.\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<char,int>m1;\\n        unordered_map<int,int>m;\\n        for(int i=0;i<5;i++)\\n            m[ranks[i]]++;\\n        for(int i=0;i<5;i++)\\n            m1[suits[i]-\\'a\\'];\\n        if(m1.size()==1)\\n            return \"Flush\";\\n        else if(m.size()==2)\\n            return \"Three of a Kind\";\\n        string x;\\n        for(auto &i:m)\\n        {\\n            if(i.second==3)\\n                return \"Three of a Kind\";\\n            else if(i.second==2)\\n                x=\"Pair\";\\n        }\\n        if(x==\"Pair\")\\n            return \"Pair\";\\n        else\\n            return \"High Card\";\\n        \\n    }\\n};\\nfeel free to ask your doubt happy to help.\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2326144,
                "title": "python3-o-n",
                "content": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits))==1:\\n            return \\'Flush\\'\\n        if len(set(ranks))==len(ranks):\\n            return \\'High Card\\'\\n        elif len(set(suits))!=1:\\n            for i in range(len(ranks)):\\n                if ranks.count(ranks[i])>=3:\\n                    return \\'Three of a Kind\\'\\n                elif 2<=ranks.count(ranks[i])<3:\\n                    return \\'Pair\\'\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits))==1:\\n            return \\'Flush\\'\\n        if len(set(ranks))==len(ranks):\\n            return \\'High Card\\'\\n        elif len(set(suits))!=1:\\n            for i in range(len(ranks)):\\n                if ranks.count(ranks[i])>=3:\\n                    return \\'Three of a Kind\\'\\n                elif 2<=ranks.count(ranks[i])<3:\\n                    return \\'Pair\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2326042,
                "title": "swift-fastest-4ms-fully-explained",
                "content": "```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        guard Set(suits).count > 1 else { return \"Flush\" }\\n        let set = NSCountedSet(array: ranks)\\n        switch Set(ranks).reduce(0) { max($0, set.count(for: $1)) } {\\n            case 3...5: return \"Three of a Kind\"\\n            case 2: return \"Pair\"\\n            default: return \"High Card\"\\n        }\\n    }\\n}\\n```\\n\\n**Solution Explanation**\\n\\n**1) Check for Flush**\\nA Flush is where all suits are the same. Convert `suits` array into a set. If element count is one, we have a Flush\\n```\\n guard Set(suits).count > 1 else { return \"Flush\" }\\n```\\n\\n**2) Determine max instance count of each unique rank**\\nWe convert `ranks` array into both a `NSCountedSet` to provide an instance count for any element and a Swift Set to provide a list of unique values. An `NSCountedSet` is used because it is faster than a `Set.reduce()` to count instances.\\n\\nWe then reduce those unique values into the instance count and determine the maximum instance count.\\n\\n```\\n let set = NSCountedSet(array: ranks)\\n switch Set(ranks).reduce(0) { max($0, set.count(for: $1)) } {\\n```\\n\\n**3) Interpret max instance count**\\nThis count will be from 1 to 5. Any value that is 3 or more, we are required to return `\"Three of a Kind\"`. Otherwise, `\"Pair\"` or `\"High Card\"` for 2 or 1 max instances.\\n\\n```\\ncase 3...5: return \"Three of a Kind\"\\ncase 2: return \"Pair\"\\ndefault: return \"High Card\"\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        guard Set(suits).count > 1 else { return \"Flush\" }\\n        let set = NSCountedSet(array: ranks)\\n        switch Set(ranks).reduce(0) { max($0, set.count(for: $1)) } {\\n            case 3...5: return \"Three of a Kind\"\\n            case 2: return \"Pair\"\\n            default: return \"High Card\"\\n        }\\n    }\\n}\\n```\n```\\n guard Set(suits).count > 1 else { return \"Flush\" }\\n```\n```\\n let set = NSCountedSet(array: ranks)\\n switch Set(ranks).reduce(0) { max($0, set.count(for: $1)) } {\\n```\n```\\ncase 3...5: return \"Three of a Kind\"\\ncase 2: return \"Pair\"\\ndefault: return \"High Card\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2325832,
                "title": "simple-solution",
                "content": "```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        var isFlush = true\\n        for i in 1...4 {\\n            if suits[i] != suits[0] {\\n                isFlush = false\\n                break\\n            }\\n        } \\n        if isFlush { return \"Flush\" }\\n        \\n        var arr = Array(repeating: 0, count: 14) \\n        for num in ranks {\\n            arr[num] += 1\\n        }\\n        \\n        var ans = \"High Card\"\\n        for i in 1...13 {\\n            if arr[i] >= 3 { return \"Three of a Kind\" }\\n            if arr[i] == 2 { ans = \"Pair\" }\\n        }\\n        return ans\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        var isFlush = true\\n        for i in 1...4 {\\n            if suits[i] != suits[0] {\\n                isFlush = false\\n                break\\n            }\\n        } \\n        if isFlush { return \"Flush\" }\\n        \\n        var arr = Array(repeating: 0, count: 14) \\n        for num in ranks {\\n            arr[num] += 1\\n        }\\n        \\n        var ans = \"High Card\"\\n        for i in 1...13 {\\n            if arr[i] >= 3 { return \"Three of a Kind\" }\\n            if arr[i] == 2 { ans = \"Pair\" }\\n        }\\n        return ans\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2325602,
                "title": "java-hshset-hashmap-easy-solution",
                "content": "\\'\\'\\'\\n        HashMap<Integer,Integer> map=new HashMap<>();\\n        HashSet<Character> set=new HashSet<>();\\n        \\n        for(char c:suits){\\n            set.add(c);\\n        }\\n        \\n        if(set.size()==1){\\n            return \"Flush\";\\n        }\\n        \\n        int temp=0;\\n        for(int i=0;i<ranks.length;i++){\\n            if(map.containsKey(ranks[i])){\\n                int curr=map.get(ranks[i]);\\n                temp=Math.max(curr,temp);\\n            }\\n            \\n            map.put(ranks[i], map.getOrDefault(ranks[i],0)+1);\\n        }\\n        \\n        if(temp>=2){\\n            return \"Three of a Kind\";\\n        }else if(temp==1){\\n            return \"Pair\";\\n        }\\n        \\n        return \"High Card\";\\n        \\n    }\\n\\n\\'\\'\\'",
                "solutionTags": [
                    "Java",
                    "Ordered Set"
                ],
                "code": "\\'\\'\\'\\n        HashMap<Integer,Integer> map=new HashMap<>();\\n        HashSet<Character> set=new HashSet<>();\\n        \\n        for(char c:suits){\\n            set.add(c);\\n        }\\n        \\n        if(set.size()==1){\\n            return \"Flush\";\\n        }\\n        \\n        int temp=0;\\n        for(int i=0;i<ranks.length;i++){\\n            if(map.containsKey(ranks[i])){\\n                int curr=map.get(ranks[i]);\\n                temp=Math.max(curr,temp);\\n            }\\n            \\n            map.put(ranks[i], map.getOrDefault(ranks[i],0)+1);\\n        }\\n        \\n        if(temp>=2){\\n            return \"Three of a Kind\";\\n        }else if(temp==1){\\n            return \"Pair\";\\n        }\\n        \\n        return \"High Card\";\\n        \\n    }\\n\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2325475,
                "title": "cpp-easy-solution-using",
                "content": "**please upvote if u like it**\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits)\\n    {\\n        int i,j=0,k;\\n        string s;\\n        char c=suits[0];\\n     for(i=1;i<suits.size();i++)\\n         if(suits[i]==suits[0])\\n             j++;\\n        if(j==4)\\n        { s=\"Flush\";\\n            return s;}\\n        else{\\n            j=0;\\n            sort(ranks.begin(),ranks.end());\\n            for(i=0;i<ranks.size()-1;i++)\\n            if(ranks[i]==ranks[i+1])\\n                if(ranks[i]==ranks[i+2] && i<ranks.size()-2)\\n                    return \"Three of a Kind\";\\n              for(i=0;i<ranks.size()-1;i++)\\n                  if(ranks[i]==ranks[i+1])\\n                      return \"Pair\";\\n            \\n        }\\n        return \"High Card\";\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits)\\n    {\\n        int i,j=0,k;\\n        string s;\\n        char c=suits[0];\\n     for(i=1;i<suits.size();i++)\\n         if(suits[i]==suits[0])\\n             j++;\\n        if(j==4)\\n        { s=\"Flush\";\\n            return s;}",
                "codeTag": "Java"
            },
            {
                "id": 2325393,
                "title": "c-check-each-kind-separately",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<char,int> flush ;\\n        unordered_map<int,int> rank ;\\n        \\n        for(auto &x : suits) ++flush[x] ;\\n        for(auto &x : flush) if(x.second == 5) return \"Flush\" ;\\n        for(auto &x : ranks) ++rank[x] ;\\n        for(auto &x : rank) if(x.second >= 3) return \"Three of a Kind\" ;\\n        for(auto &x : rank) if(x.second >= 2) return \"Pair\" ;\\n        return \"High Card\" ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<char,int> flush ;\\n        unordered_map<int,int> rank ;\\n        \\n        for(auto &x : suits) ++flush[x] ;\\n        for(auto &x : flush) if(x.second == 5) return \"Flush\" ;\\n        for(auto &x : ranks) ++rank[x] ;\\n        for(auto &x : rank) if(x.second >= 3) return \"Three of a Kind\" ;\\n        for(auto &x : rank) if(x.second >= 2) return \"Pair\" ;\\n        return \"High Card\" ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2325273,
                "title": "easy-solution-in-java",
                "content": "class Solution {\\n    public String bestHand(int[] rank, char[] suits) {\\n         HashMap<Integer,Integer>hm=new HashMap<>();\\n        for(int i=0;i<rank.length;i++)\\n        {\\n            if(hm.containsKey(rank[i]))\\n            {\\n                int x=hm.get(rank[i]);\\n                x++;\\n                hm.put(rank[i],x);\\n            }\\n            else\\n            {\\n                hm.put(rank[i],1);\\n            }\\n        }\\n         if(suits[0]==suits[1])\\n         {\\n             if(suits[1]==suits[2])\\n             {\\n                 if(suits[2]==suits[3])\\n                 {\\n                     if(suits[3]==suits[4])\\n                     {\\n                         return \"Flush\";\\n                     }\\n                 }\\n             }\\n         }\\n          for (Map.Entry<Integer,Integer> entry : hm.entrySet()) \\n          {\\n               if(entry.getValue()>=3)\\n               {\\n                   //System.out.println(\"Three of a Kind\");\\n                   return \"Three of a Kind\";\\n               }\\n          }\\n           for (Map.Entry<Integer,Integer> entry : hm.entrySet()) \\n          {\\n               if(entry.getValue()==2)\\n               {\\n                   //System.out.println(\"Three of a Kind\");\\n                   return \"Pair\";\\n               }\\n          }\\n          return \"High Card\";\\n           \\n            //System.out.println(entry.getKey()+\" \"+entry.getValue());\\n          \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public String bestHand(int[] rank, char[] suits) {\\n         HashMap<Integer,Integer>hm=new HashMap<>();\\n        for(int i=0;i<rank.length;i++)\\n        {\\n            if(hm.containsKey(rank[i]))\\n            {\\n                int x=hm.get(rank[i]);\\n                x++;\\n                hm.put(rank[i],x);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2324586,
                "title": "easy-understanding-c-hashmap-pair",
                "content": "```\\n string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int count=0;\\n        vector<pair<int,char>>p;\\n        for(int i=0; i<ranks.size(); i++)\\n        {\\n            p.push_back({ranks[i],suits[i]});\\n        }\\n        for(int i=0; i<p.size(); i++)\\n        {\\n            for(int j=i+1; j<p.size(); i++)\\n            {\\n                if(p[i].second==p[j].second) count++;\\n                else break;\\n            }\\n        }\\n        if(count==5) return \"Flush\";\\n        vector<int>v;\\n        for(auto i:p)\\n        {\\n            v.push_back(i.first);\\n        }\\n       unordered_map<int,int>mp;\\n       for(auto i:v)\\n       {\\n           mp[i]++;\\n       }\\n        int count1=0;\\n        for(auto i:mp)\\n        {\\n            count1=max(count1,i.second);\\n        }\\n        string str;\\n        if(count1>=3) return \"Three of a Kind\";\\n        else if(count1==2) return \"Pair\";\\n        else  return \"High Card\";\\n    }\\n```\\n![image](https://assets.leetcode.com/users/images/2faaa499-65a7-4728-ad61-c25ebd0cc8a4_1658633866.1081953.png)\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int count=0;\\n        vector<pair<int,char>>p;\\n        for(int i=0; i<ranks.size(); i++)\\n        {\\n            p.push_back({ranks[i],suits[i]});\\n        }\\n        for(int i=0; i<p.size(); i++)\\n        {\\n            for(int j=i+1; j<p.size(); i++)\\n            {\\n                if(p[i].second==p[j].second) count++;\\n                else break;\\n            }\\n        }\\n        if(count==5) return \"Flush\";\\n        vector<int>v;\\n        for(auto i:p)\\n        {\\n            v.push_back(i.first);\\n        }\\n       unordered_map<int,int>mp;\\n       for(auto i:v)\\n       {\\n           mp[i]++;\\n       }\\n        int count1=0;\\n        for(auto i:mp)\\n        {\\n            count1=max(count1,i.second);\\n        }\\n        string str;\\n        if(count1>=3) return \"Three of a Kind\";\\n        else if(count1==2) return \"Pair\";\\n        else  return \"High Card\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2323361,
                "title": "python-easy-understanding-solution",
                "content": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if(len(set(suits))==1):\\n            return \"Flush\"\\n        \\n        mp={}\\n        \\n        for i in range(5):\\n            if(ranks[i] not in mp):\\n                mp[ranks[i]]=1\\n            else:\\n                mp[ranks[i]]+=1\\n        \\n        for val in mp:\\n            if(mp[val]>=3):\\n                return \"Three of a Kind\"\\n            elif(mp[val]==2):\\n                return \"Pair\"\\n        \\n        return \"High Card\"\\n\\t\\t\\n\\t\\t",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "class Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if(len(set(suits))==1):\\n            return \"Flush\"\\n        \\n        mp={}",
                "codeTag": "Java"
            },
            {
                "id": 2322937,
                "title": "short-concise-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> mr;\\n        for(int i : ranks) mr[i]++;\\n        \\n        unordered_map<char, int> ms;\\n        for(char c : suits) ms[c]++;\\n        \\n        if(ms.size() == 1) return \"Flush\";\\n        for(auto i : mr) {\\n            if(i.second >= 3) return \"Three of a Kind\";\\n        }\\n        for(auto i : mr) {\\n            if(i.second == 2) return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> mr;\\n        for(int i : ranks) mr[i]++;\\n        \\n        unordered_map<char, int> ms;\\n        for(char c : suits) ms[c]++;\\n        \\n        if(ms.size() == 1) return \"Flush\";\\n        for(auto i : mr) {\\n            if(i.second >= 3) return \"Three of a Kind\";\\n        }\\n        for(auto i : mr) {\\n            if(i.second == 2) return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322882,
                "title": "rust-solution",
                "content": "~~~\\nuse std::collections::HashMap;\\n\\nimpl Solution {\\n    pub fn best_hand(ranks: Vec<i32>, suits: Vec<char>) -> String {\\n        let mut suits = suits;\\n        let mut ret = String::new();\\n        \\n        suits.sort();\\n        if suits[0] == suits[4] {\\n            ret += \"Flush\";\\n            return ret\\n        }\\n        \\n        let mut mp: HashMap<i32, i32> = HashMap::new();\\n        for a in ranks {\\n            *mp.entry(a).or_default() += 1;\\n        }\\n        \\n        let mut mx = 1;\\n        for (a, cnt) in mp {\\n            mx = mx.max(cnt);\\n        }\\n        \\n        if mx >= 3 { ret += \"Three of a Kind\"; }\\n        else if mx == 2 { ret += \"Pair\"; }\\n        else { ret += \"High Card\"; }\\n        \\n        ret\\n    }\\n}\\n~~~",
                "solutionTags": [
                    "Rust"
                ],
                "code": "~~~\\nuse std::collections::HashMap;\\n\\nimpl Solution {\\n    pub fn best_hand(ranks: Vec<i32>, suits: Vec<char>) -> String {\\n        let mut suits = suits;\\n        let mut ret = String::new();\\n        \\n        suits.sort();\\n        if suits[0] == suits[4] {\\n            ret += \"Flush\";\\n            return ret\\n        }\\n        \\n        let mut mp: HashMap<i32, i32> = HashMap::new();\\n        for a in ranks {\\n            *mp.entry(a).or_default() += 1;\\n        }\\n        \\n        let mut mx = 1;\\n        for (a, cnt) in mp {\\n            mx = mx.max(cnt);\\n        }\\n        \\n        if mx >= 3 { ret += \"Three of a Kind\"; }\\n        else if mx == 2 { ret += \"Pair\"; }\\n        else { ret += \"High Card\"; }\\n        \\n        ret\\n    }\\n}\\n~~~",
                "codeTag": "Unknown"
            },
            {
                "id": 2322739,
                "title": "very-simple-and-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int freq[4]={0};\\n        for(char &ch:suits)\\n            freq[ch-\\'a\\']++;\\n        \\n        for(int i=0;i<4;i++) {\\n            if(freq[i]==5)\\n                return \"Flush\";\\n        }\\n        \\n        int count=0;\\n        for(int i=0;i<5;i++) {\\n            int cnt=1;\\n            for(int j=i+1;j<5;j++) {\\n                if(ranks[i]==ranks[j])\\n                    cnt++;\\n            }\\n            //cout<<cnt<<\\' \\';\\n            count=max(count,cnt);\\n        }\\n        \\n        if(count>=3)    return \"Three of a Kind\";\\n        else if(count==2)   return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```\\n\\n# Please upvote if you liked the solution\\n\\n# \\uD83D\\uDCBB\\uD83D\\uDC31\\u200D\\uD83D\\uDCBBIf there are any suggestions / questions / mistakes in my post, please do comment below \\uD83D\\uDC47",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int freq[4]={0};\\n        for(char &ch:suits)\\n            freq[ch-\\'a\\']++;\\n        \\n        for(int i=0;i<4;i++) {\\n            if(freq[i]==5)\\n                return \"Flush\";\\n        }\\n        \\n        int count=0;\\n        for(int i=0;i<5;i++) {\\n            int cnt=1;\\n            for(int j=i+1;j<5;j++) {\\n                if(ranks[i]==ranks[j])\\n                    cnt++;\\n            }\\n            //cout<<cnt<<\\' \\';\\n            count=max(count,cnt);\\n        }\\n        \\n        if(count>=3)    return \"Three of a Kind\";\\n        else if(count==2)   return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2322714,
                "title": "a-flag-and-a-vector",
                "content": "We are making a vector of size 13 to find frequencies of each rank. We also maintain a variable `suitchange` which becomes `true` when cards of different suits are found. In a single pass, we keep saving the `maxfreq` and then check accordingly.\\n\\n```\\nstring bestHand(vector<int>& ranks, vector<char>& suits) {\\n        \\n        int n = 5;\\n        vector<int> freq(13,0);\\n        bool suitchange = false;\\n        \\n        int maxfreq=1;\\n        for(int i=0;i<5;i++){\\n            \\n            freq[ranks[i]-1]++;\\n            \\n            //Calculating maximum frequency of a rank\\n            maxfreq = max(maxfreq,freq[ranks[i]-1]);\\n            \\n            if(i>0 && suits[i-1]!=suits[i])\\n                suitchange = true;\\n        }\\n        \\n        if(!suitchange)\\n            return \"Flush\";\\n        \\n        if(maxfreq >= 3)\\n            return \"Three of a Kind\";\\n        \\n        if(maxfreq == 2)\\n            return \"Pair\";\\n        \\n        return \"High Card\";\\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nstring bestHand(vector<int>& ranks, vector<char>& suits) {\\n        \\n        int n = 5;\\n        vector<int> freq(13,0);\\n        bool suitchange = false;\\n        \\n        int maxfreq=1;\\n        for(int i=0;i<5;i++){\\n            \\n            freq[ranks[i]-1]++;\\n            \\n            //Calculating maximum frequency of a rank\\n            maxfreq = max(maxfreq,freq[ranks[i]-1]);\\n            \\n            if(i>0 && suits[i-1]!=suits[i])\\n                suitchange = true;\\n        }\\n        \\n        if(!suitchange)\\n            return \"Flush\";\\n        \\n        if(maxfreq >= 3)\\n            return \"Three of a Kind\";\\n        \\n        if(maxfreq == 2)\\n            return \"Pair\";\\n        \\n        return \"High Card\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2322607,
                "title": "easy-c-solution-for-poker-hands",
                "content": "```\\nclass Solution {\\npublic:\\n    map<int,int>mr; map<char,int>ms; string ans; int d=0;\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n      for(int i=0;i<suits.size();i++) \\n          ms[suits[i]]++;\\n        for(int i=0;i<ranks.size();i++)\\n            mr[ranks[i]]++;\\n        for(auto i=ms.begin();i!=ms.end();i++)\\n            if(i->second==5){\\n                d=1;\\n            }\\n        // return ans;\\n        int a=0,b=0,c=0;\\n        for(auto i=mr.begin();i!=mr.end();i++){\\n            if(i->second>=3)\\n                a=1;\\n            else if(i->second==2)\\n                b=1;\\n            else c=1;\\n        }\\n        if(d==1)\\n            ans=\"Flush\";\\n        else if(a==1)\\n            ans= \"Three of a Kind\";\\n        else if(b==1)\\n            ans=\"Pair\";\\n        else ans=\"High Card\";\\n                return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    map<int,int>mr; map<char,int>ms; string ans; int d=0;\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n      for(int i=0;i<suits.size();i++) \\n          ms[suits[i]]++;\\n        for(int i=0;i<ranks.size();i++)\\n            mr[ranks[i]]++;\\n        for(auto i=ms.begin();i!=ms.end();i++)\\n            if(i->second==5){\\n                d=1;\\n            }\\n        // return ans;\\n        int a=0,b=0,c=0;\\n        for(auto i=mr.begin();i!=mr.end();i++){\\n            if(i->second>=3)\\n                a=1;\\n            else if(i->second==2)\\n                b=1;\\n            else c=1;\\n        }\\n        if(d==1)\\n            ans=\"Flush\";\\n        else if(a==1)\\n            ans= \"Three of a Kind\";\\n        else if(b==1)\\n            ans=\"Pair\";\\n        else ans=\"High Card\";\\n                return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322512,
                "title": "c-easy-solution-with-linq",
                "content": "```\\npublic class Solution\\n{\\n    public string BestHand(int[] ranks, char[] suits)\\n    {\\n        if (suits.Distinct().Count() == 1)\\n            return \"Flush\";\\n\\n        var count = ranks\\n            .GroupBy(r => r)\\n            .Select(g => new { r = g.Key, c = g.Count() })\\n            .OrderByDescending(g => g.c)\\n            .First().c;\\n\\n        return count switch\\n        {\\n            >= 3 => \"Three of a Kind\",\\n            >= 2 => \"Pair\",\\n            _ => \"High Card\"\\n        };\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution\\n{\\n    public string BestHand(int[] ranks, char[] suits)\\n    {\\n        if (suits.Distinct().Count() == 1)\\n            return \"Flush\";\\n\\n        var count = ranks\\n            .GroupBy(r => r)\\n            .Select(g => new { r = g.Key, c = g.Count() })\\n            .OrderByDescending(g => g.c)\\n            .First().c;\\n\\n        return count switch\\n        {\\n            >= 3 => \"Three of a Kind\",\\n            >= 2 => \"Pair\",\\n            _ => \"High Card\"\\n        };\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322423,
                "title": "java-easy",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        boolean flag = true;\\n        for(int i = 0; i < suits.length-1; i++){\\n            if(suits[i] != suits[i+1]){\\n                flag = false;\\n                break;\\n            }            \\n        }\\n        if(flag)\\n            return \"Flush\";\\n        \\n        HashMap<Integer, List<Character>> map = new HashMap();\\n        int chidx = 0;\\n        for(int i: ranks){\\n            List<Character> l = new ArrayList();\\n            if(map.containsKey(i))\\n                l = map.get(i);\\n            l.add(suits[chidx]);\\n            chidx++;\\n            map.put(i,l);            \\n        }\\n        int max = 0;\\n        for(int i: map.keySet()){\\n            List<Character> list = map.get(i);\\n            Set<Character> set = new HashSet<Character>(list);\\n            max = Math.max(set.size(), max);\\n        }\\n        if(max >= 3)\\n            return \"Three of a Kind\";\\n        else if(max == 2)\\n            return \"Pair\";\\n        else\\n            return \"High Card\";\\n            \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        boolean flag = true;\\n        for(int i = 0; i < suits.length-1; i++){\\n            if(suits[i] != suits[i+1]){\\n                flag = false;\\n                break;\\n            }            \\n        }\\n        if(flag)\\n            return \"Flush\";\\n        \\n        HashMap<Integer, List<Character>> map = new HashMap();\\n        int chidx = 0;\\n        for(int i: ranks){\\n            List<Character> l = new ArrayList();\\n            if(map.containsKey(i))\\n                l = map.get(i);\\n            l.add(suits[chidx]);\\n            chidx++;\\n            map.put(i,l);            \\n        }\\n        int max = 0;\\n        for(int i: map.keySet()){\\n            List<Character> list = map.get(i);\\n            Set<Character> set = new HashSet<Character>(list);\\n            max = Math.max(set.size(), max);\\n        }\\n        if(max >= 3)\\n            return \"Three of a Kind\";\\n        else if(max == 2)\\n            return \"Pair\";\\n        else\\n            return \"High Card\";\\n            \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322417,
                "title": "java-map-easy",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        Set<Character> s = new HashSet<>();\\n        \\n        for(char c : suits) s.add(c);\\n        \\n        int a[]=new int[14];\\n        \\n        for(int i : ranks) a[i]++;\\n        \\n        if(s.size()==1) return \"Flush\";\\n        \\n        int three=0;\\n        int two=0;\\n        \\n        for(int i : a){\\n         if(i>=3) three++;\\n         if(i==2) two++;\\n        }\\n        \\n        if(three>0) return \"Three of a Kind\";\\n        if(two>0) return \"Pair\";\\n        \\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        Set<Character> s = new HashSet<>();\\n        \\n        for(char c : suits) s.add(c);\\n        \\n        int a[]=new int[14];\\n        \\n        for(int i : ranks) a[i]++;\\n        \\n        if(s.size()==1) return \"Flush\";\\n        \\n        int three=0;\\n        int two=0;\\n        \\n        for(int i : a){\\n         if(i>=3) three++;\\n         if(i==2) two++;\\n        }\\n        \\n        if(three>0) return \"Three of a Kind\";\\n        if(two>0) return \"Pair\";\\n        \\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322396,
                "title": "c-read-do",
                "content": "**Time:** `O(1)`\\n**Space:** `O(1)`\\n`As there are only 5 elements in the given data set`\\n\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> r_maps, s_maps;\\n        for (auto r : ranks) {\\n            r_maps[r]++;\\n        }\\n        for (auto s : suits) {\\n            s_maps[s]++;\\n        }\\n        for (auto s : suits) {\\n            if (s_maps[s] == 5) {\\n                return \"Flush\";\\n            }\\n        }\\n        for (auto r : ranks) {\\n            if (r_maps[r] >= 3) {\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for (auto r : ranks) {\\n            if (r_maps[r] >= 2) {\\n                return \"Pair\";\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> r_maps, s_maps;\\n        for (auto r : ranks) {\\n            r_maps[r]++;\\n        }\\n        for (auto s : suits) {\\n            s_maps[s]++;\\n        }\\n        for (auto s : suits) {\\n            if (s_maps[s] == 5) {\\n                return \"Flush\";\\n            }\\n        }\\n        for (auto r : ranks) {\\n            if (r_maps[r] >= 3) {\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for (auto r : ranks) {\\n            if (r_maps[r] >= 2) {\\n                return \"Pair\";\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322275,
                "title": "simple-explained-java-solution",
                "content": "```\\nclass Solution {\\n//     In the question, we have best to worst type of poker hand.\\n    public String bestHand(int[] ranks, char[] suits) {\\n        char ch = suits[0];\\n        boolean b = true;\\n//         We will check the best poker hand first. If character at 0th index is same as all others then we have to return \"Flush\", otherwise we need to check for the next one.\\n        for(int i = 1 ; i < 5 ; i++){\\n            if(ch != suits[i]){\\n                b = false;\\n                break;\\n            }\\n        }\\n//         If all were same, we will not go further and return from here.\\n        if(b){\\n            return \"Flush\";\\n        }\\n//         We will mark the number of cards present of each rank.\\n        int [] cards = new int[13];\\n        for(int i = 0 ; i < 5 ; i++){\\n            cards[ranks[i]-1]++;\\n        }\\n        \\n//         As there will be atleast 1 card of some rank and suit, so we will take maximum as 1.\\n        int max = 1;\\n        for(int i = 0 ; i < 13; i++){\\n            max = Math.max(max,cards[i]);\\n        }\\n        \\n//         If atleast 3 cards of 1 rank are there (3 or 4 cards can be there of same rank), we will return Three of a Kind\\n        if(max >= 3){\\n            return \"Three of a Kind\";\\n        }else if(max == 2){\\n//             If 2 cards, then Pair\\n            return \"Pair\";\\n        }else{\\n//             As we had last priority as High Card, so if we do not meet any of the above conditions, we will return High Card.\\n            return \"High Card\";\\n        }\\n    }\\n}\\n```\\nIf you liked the solution or found it belpful, do upvote. :)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n//     In the question, we have best to worst type of poker hand.\\n    public String bestHand(int[] ranks, char[] suits) {\\n        char ch = suits[0];\\n        boolean b = true;\\n//         We will check the best poker hand first. If character at 0th index is same as all others then we have to return \"Flush\", otherwise we need to check for the next one.\\n        for(int i = 1 ; i < 5 ; i++){\\n            if(ch != suits[i]){\\n                b = false;\\n                break;\\n            }\\n        }\\n//         If all were same, we will not go further and return from here.\\n        if(b){\\n            return \"Flush\";\\n        }\\n//         We will mark the number of cards present of each rank.\\n        int [] cards = new int[13];\\n        for(int i = 0 ; i < 5 ; i++){\\n            cards[ranks[i]-1]++;\\n        }\\n        \\n//         As there will be atleast 1 card of some rank and suit, so we will take maximum as 1.\\n        int max = 1;\\n        for(int i = 0 ; i < 13; i++){\\n            max = Math.max(max,cards[i]);\\n        }\\n        \\n//         If atleast 3 cards of 1 rank are there (3 or 4 cards can be there of same rank), we will return Three of a Kind\\n        if(max >= 3){\\n            return \"Three of a Kind\";\\n        }else if(max == 2){\\n//             If 2 cards, then Pair\\n            return \"Pair\";\\n        }else{\\n//             As we had last priority as High Card, so if we do not meet any of the above conditions, we will return High Card.\\n            return \"High Card\";\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4094980,
                "title": "beats-100-runtime-0ms-by-prodonik-java-c",
                "content": "# Intuition\\nBeats 100% )\\nwe just need to check if suits consists of the same chars only, if not, then we get to the next part.\\n\\n# Code\\n```\\npublic class Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        if (isFlush(suits)) {\\n            return \"Flush\";\\n        }\\n\\n        int maxCount = 0;\\n        for (int rank : ranks) {\\n            int count = countOccurrences(ranks, rank);\\n            if (count > maxCount) {\\n                maxCount = count;\\n            }\\n        }\\n\\n        if (maxCount > 2) {\\n            return \"Three of a Kind\";\\n        }\\n        if (maxCount == 2) {\\n            return \"Pair\";\\n        }\\n\\n        return \"High Card\";\\n    }\\n\\n    public boolean isFlush(char[] suits) {\\n        int count = 0;\\n        for (char suit : suits) {\\n            if (suit == suits[0]) {\\n                count++;\\n            }\\n        }\\n        return count == 5;\\n    }\\n\\n    public int countOccurrences(int[] array, int element) {\\n        int count = 0;\\n        for (int i = 0; i < array.length; i++) {\\n            if (array[i] == element) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        if (isFlush(suits)) {\\n            return \"Flush\";\\n        }\\n\\n        int maxCount = 0;\\n        for (int rank : ranks) {\\n            int count = countOccurrences(ranks, rank);\\n            if (count > maxCount) {\\n                maxCount = count;\\n            }\\n        }\\n\\n        if (maxCount > 2) {\\n            return \"Three of a Kind\";\\n        }\\n        if (maxCount == 2) {\\n            return \"Pair\";\\n        }\\n\\n        return \"High Card\";\\n    }\\n\\n    public boolean isFlush(char[] suits) {\\n        int count = 0;\\n        for (char suit : suits) {\\n            if (suit == suits[0]) {\\n                count++;\\n            }\\n        }\\n        return count == 5;\\n    }\\n\\n    public int countOccurrences(int[] array, int element) {\\n        int count = 0;\\n        for (int i = 0; i < array.length; i++) {\\n            if (array[i] == element) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084067,
                "title": "best-poker-hand",
                "content": "# Approach\\nA \\'Flush\\' is the odd one out of the possible hands (i.e. it is based on suit rather than rank) and therefore the obvious starting point. \\n\\nUsing a hash-map method, iterate through the suits array to determine how many of each suit there are. If there is the case where a suit === 5, return \\'Flush\\'. Otherwise, proceeed to ranks. \\n\\nIf the hand is not a flush, use a hashmap to iterate through the ranks to determine the number of each rank. The value of the rank is irrelevant in this case. The emphasis is on the number of times it occurs. \\n\\nBy using another hashmap, we can determine how many of each rank their is. Setting the highest of the ranks to \\'max\\' variable, we can then use this in a switch statement. \\n\\nThe switch statement will then return a particular string based on the case of \\'max\\'. \\n\\n```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    var suity = {};\\n    var maxSuit = 0;\\n    for (let i = 0; i < suits.length; i++) {\\n        if (suity[suits[i]]) {\\n            suity[suits[i]]++\\n        } else {\\n            suity[suits[i]] = 1;\\n        }\\n        if (suity[suits[i]] > maxSuit) {\\n            maxSuit = suity[suits[i]]\\n        }\\n    }\\n    \\n    if (maxSuit === 5) {\\n        return \"Flush\"\\n    } else {\\n        var hand = {};\\n        var maxRank = 0;\\n        for (let i = 0; i < ranks.length; i++) {\\n            if (hand[ranks[i]]) {\\n                hand[ranks[i]]++\\n            } else {\\n                hand[ranks[i]] = 1\\n            }\\n            if (hand[ranks[i]] > maxRank) {\\n                maxRank = hand[ranks[i]]\\n            }\\n        }\\n\\n        switch (maxRank) {\\n            case 4:\\n            case 3:\\n            return \\'Three of a Kind\\';\\n            case 2:\\n            return \\'Pair\\'\\n            break; \\n            case 1:\\n            return \\'High Card\\'\\n            break;\\n            default: \\n            return \\'no dice\\'\\n            break;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    var suity = {};\\n    var maxSuit = 0;\\n    for (let i = 0; i < suits.length; i++) {\\n        if (suity[suits[i]]) {\\n            suity[suits[i]]++\\n        } else {\\n            suity[suits[i]] = 1;\\n        }\\n        if (suity[suits[i]] > maxSuit) {\\n            maxSuit = suity[suits[i]]\\n        }\\n    }\\n    \\n    if (maxSuit === 5) {\\n        return \"Flush\"\\n    } else {\\n        var hand = {};\\n        var maxRank = 0;\\n        for (let i = 0; i < ranks.length; i++) {\\n            if (hand[ranks[i]]) {\\n                hand[ranks[i]]++\\n            } else {\\n                hand[ranks[i]] = 1\\n            }\\n            if (hand[ranks[i]] > maxRank) {\\n                maxRank = hand[ranks[i]]\\n            }\\n        }\\n\\n        switch (maxRank) {\\n            case 4:\\n            case 3:\\n            return \\'Three of a Kind\\';\\n            case 2:\\n            return \\'Pair\\'\\n            break; \\n            case 1:\\n            return \\'High Card\\'\\n            break;\\n            default: \\n            return \\'no dice\\'\\n            break;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083601,
                "title": "java8-solution",
                "content": "\\n\\n# Approach\\nJava8\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Long> hm = Arrays.stream(ranks).boxed().collect(Collectors.groupingBy(e -> e, HashMap::new, Collectors.counting()));\\n        Map<Character, Long> hs = new String(suits).chars().mapToObj(c -> (char) c).collect(Collectors.groupingBy(e -> e, Collectors.counting()));\\n        String[] res = {\"High Card\"};\\n        hm.values().stream().sorted().forEach(i -> {\\n            if (i == 2) {\\n                res[0] = \"Pair\";\\n            } else if (i >= 2) {\\n                res[0] = \"Three of a Kind\";\\n            }\\n        });\\n        hs.values().forEach(i -> {\\n            if (i == 5) {\\n                res[0] = \"Flush\";\\n            }\\n        });\\n        return res[0];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Long> hm = Arrays.stream(ranks).boxed().collect(Collectors.groupingBy(e -> e, HashMap::new, Collectors.counting()));\\n        Map<Character, Long> hs = new String(suits).chars().mapToObj(c -> (char) c).collect(Collectors.groupingBy(e -> e, Collectors.counting()));\\n        String[] res = {\"High Card\"};\\n        hm.values().stream().sorted().forEach(i -> {\\n            if (i == 2) {\\n                res[0] = \"Pair\";\\n            } else if (i >= 2) {\\n                res[0] = \"Three of a Kind\";\\n            }\\n        });\\n        hs.values().forEach(i -> {\\n            if (i == 5) {\\n                res[0] = \"Flush\";\\n            }\\n        });\\n        return res[0];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077661,
                "title": "easy-cpp-solution-beginner-friendly",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        vector<int> rank(14, 0);\\n        vector<int> suit(4, 0);\\n        \\n        int maxR = 0;\\n        for(auto i : suits){\\n            suit[i-\\'a\\']++;\\n            maxR = max(maxR, suit[i-\\'a\\']);\\n        }\\n        if(maxR == 5) return \"Flush\";\\n        \\n        maxR = 0;\\n        for(int i=0; i<ranks.size(); i++){\\n            rank[ranks[i]]++;\\n            maxR = max(maxR, rank[ranks[i]]);\\n        }\\n        if(maxR >= 3) return \"Three of a Kind\";\\n        if(maxR == 2) return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        vector<int> rank(14, 0);\\n        vector<int> suit(4, 0);\\n        \\n        int maxR = 0;\\n        for(auto i : suits){\\n            suit[i-\\'a\\']++;\\n            maxR = max(maxR, suit[i-\\'a\\']);\\n        }\\n        if(maxR == 5) return \"Flush\";\\n        \\n        maxR = 0;\\n        for(int i=0; i<ranks.size(); i++){\\n            rank[ranks[i]]++;\\n            maxR = max(maxR, rank[ranks[i]]);\\n        }\\n        if(maxR >= 3) return \"Three of a Kind\";\\n        if(maxR == 2) return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075783,
                "title": "simple-c-solution-using-linq",
                "content": "# Approach\\n- Check conditions strating with the best hand down to worse\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public string BestHand(int[] ranks, char[] suits)\\n    {\\n        var suit = suits[0];\\n        if (suits.All(s => s == suit))\\n        {\\n            return \"Flush\";\\n        }\\n\\n        var rankCounts = new Dictionary<int, int>();\\n\\n        foreach (var rank in ranks)\\n        {\\n            rankCounts.TryAdd(rank, 0);\\n            rankCounts[rank]++;\\n        }\\n\\n        if (rankCounts.Values.Any(count => count >= 3))\\n        {\\n            return \"Three of a Kind\";\\n        }\\n\\n        return rankCounts.Values.Any(count => count >= 2) ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public string BestHand(int[] ranks, char[] suits)\\n    {\\n        var suit = suits[0];\\n        if (suits.All(s => s == suit))\\n        {\\n            return \"Flush\";\\n        }\\n\\n        var rankCounts = new Dictionary<int, int>();\\n\\n        foreach (var rank in ranks)\\n        {\\n            rankCounts.TryAdd(rank, 0);\\n            rankCounts[rank]++;\\n        }\\n\\n        if (rankCounts.Values.Any(count => count >= 3))\\n        {\\n            return \"Three of a Kind\";\\n        }\\n\\n        return rankCounts.Values.Any(count => count >= 2) ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070831,
                "title": "java-hashmap",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Integer> rankMap = new HashMap<>();\\n        HashMap<Character, Integer> suitMap = new HashMap<>();\\n        for(int rank: ranks){\\n            if(rankMap.containsKey(rank)){\\n                rankMap.put(rank, rankMap.get(rank) + 1);\\n            }else{\\n                rankMap.put(rank, 1);\\n            }\\n        }\\n        for(Character suit: suits){\\n            if(suitMap.containsKey(suit)){\\n                suitMap.put(suit, suitMap.get(suit) + 1);\\n            }else{\\n                suitMap.put(suit, 1);\\n            }\\n        }\\n        for(Character suit: suits){\\n            if(suitMap.get(suit) == 5) return \"Flush\";\\n        }\\n        for(int rank: ranks){\\n            if(rankMap.get(rank) >= 3) return \"Three of a Kind\";\\n        }\\n        int count = 0;\\n        for(int rank: ranks){\\n            if(rankMap.get(rank) == 2){\\n                count++;\\n                if(count == 2) return \"Pair\";\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer, Integer> rankMap = new HashMap<>();\\n        HashMap<Character, Integer> suitMap = new HashMap<>();\\n        for(int rank: ranks){\\n            if(rankMap.containsKey(rank)){\\n                rankMap.put(rank, rankMap.get(rank) + 1);\\n            }else{\\n                rankMap.put(rank, 1);\\n            }\\n        }\\n        for(Character suit: suits){\\n            if(suitMap.containsKey(suit)){\\n                suitMap.put(suit, suitMap.get(suit) + 1);\\n            }else{\\n                suitMap.put(suit, 1);\\n            }\\n        }\\n        for(Character suit: suits){\\n            if(suitMap.get(suit) == 5) return \"Flush\";\\n        }\\n        for(int rank: ranks){\\n            if(rankMap.get(rank) >= 3) return \"Three of a Kind\";\\n        }\\n        int count = 0;\\n        for(int rank: ranks){\\n            if(rankMap.get(rank) == 2){\\n                count++;\\n                if(count == 2) return \"Pair\";\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064187,
                "title": "trial-and-error",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLoops \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int suitNum = 1;\\n        int k = 0;\\n        boolean noFlush = false;\\n        while (k < 5 & !noFlush){\\n            char suit = suits[k]; \\n            for (int i = k; i < 5; i++){\\n                if (i == k){ continue; }\\n                if (suits[i] == suit){\\n                    suitNum++;\\n                    if (suitNum >= 5){ return \"Flush\"; }\\n                }\\n                else{\\n                    noFlush = true;\\n                    break;\\n                }\\n            }\\n            k++; \\n        }\\n\\n        int rankNum = 1;\\n        int q = 0;\\n        boolean isPair = false;\\n        while (q < 5){\\n            int rank = ranks[q];\\n            for (int j = q; j < 5; j++){\\n                if (j == q){ continue; }\\n                if (ranks[j] == rank){\\n                    rankNum++;\\n                }\\n            }\\n            if (rankNum >= 3){\\n                return \"Three of a Kind\";\\n            }\\n            else if (rankNum >= 2){\\n                isPair = true;\\n            }\\n            q++;\\n            rankNum = 1;\\n        }\\n        if (isPair){ return \"Pair\"; }\\n\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int suitNum = 1;\\n        int k = 0;\\n        boolean noFlush = false;\\n        while (k < 5 & !noFlush){\\n            char suit = suits[k]; \\n            for (int i = k; i < 5; i++){\\n                if (i == k){ continue; }\\n                if (suits[i] == suit){\\n                    suitNum++;\\n                    if (suitNum >= 5){ return \"Flush\"; }\\n                }\\n                else{\\n                    noFlush = true;\\n                    break;\\n                }\\n            }\\n            k++; \\n        }\\n\\n        int rankNum = 1;\\n        int q = 0;\\n        boolean isPair = false;\\n        while (q < 5){\\n            int rank = ranks[q];\\n            for (int j = q; j < 5; j++){\\n                if (j == q){ continue; }\\n                if (ranks[j] == rank){\\n                    rankNum++;\\n                }\\n            }\\n            if (rankNum >= 3){\\n                return \"Three of a Kind\";\\n            }\\n            else if (rankNum >= 2){\\n                isPair = true;\\n            }\\n            q++;\\n            rankNum = 1;\\n        }\\n        if (isPair){ return \"Pair\"; }\\n\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063916,
                "title": "python-solution-using-counter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nGiven a hand of cards, our objective is to determine if it qualifies as one of the specified hands: \"Flush\", \"Three of a Kind\", or \"Pair\". If none of these conditions is met, the hand is classified as \"High Card\". The intuition here is that we can determine the type of hand by counting the occurrences of each rank and examining the distinct suits in the hand.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFlush Check: We first check if all the suits in the hand are the same. If this is the case, it\\'s a Flush. This can be easily determined by converting the list of suits to a set and checking if its length is 1.\\n\\nRank Counting: Next, we count the occurrences of each rank in the hand. We use the Counter class from the collections module for this purpose. This gives us a dictionary where the keys are ranks and the values are their respective counts.\\n\\nDetermine Hand Type: After counting ranks, we check the highest count of ranks.\\n\\nIf the highest count is 3 or more, it\\'s \"Three of a Kind\".\\nIf the highest count is 2, it\\'s a \"Pair\".\\nIf the highest count is 1, it\\'s a \"High Card\".\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits)) == 1:\\n            return \"Flush\"\\n        \\n        rank_count = Counter(ranks)\\n        \\n        max_count = max(rank_count.values())\\n        \\n        if max_count >= 3:\\n            return \"Three of a Kind\"\\n        elif max_count == 2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n            \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits)) == 1:\\n            return \"Flush\"\\n        \\n        rank_count = Counter(ranks)\\n        \\n        max_count = max(rank_count.values())\\n        \\n        if max_count >= 3:\\n            return \"Three of a Kind\"\\n        elif max_count == 2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059785,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<char,int> s;\\n        unordered_map<int,int> r;\\n\\n        for(auto x:suits)\\n            s[x]++;\\n\\n        for(auto x:ranks)\\n            r[x]++;\\n        \\n        for(auto x:s){\\n            if(x.second==5)\\n            return \"Flush\";\\n        }\\n\\n        bool flag=false;\\n\\n        for(auto x:r){\\n            if(x.second==2)\\n            flag=true;\\n            else if(x.second>=3)\\n            return \"Three of a Kind\";\\n        }\\n        if(flag)\\n        return \"Pair\";\\n        \\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<char,int> s;\\n        unordered_map<int,int> r;\\n\\n        for(auto x:suits)\\n            s[x]++;\\n\\n        for(auto x:ranks)\\n            r[x]++;\\n        \\n        for(auto x:s){\\n            if(x.second==5)\\n            return \"Flush\";\\n        }\\n\\n        bool flag=false;\\n\\n        for(auto x:r){\\n            if(x.second==2)\\n            flag=true;\\n            else if(x.second>=3)\\n            return \"Three of a Kind\";\\n        }\\n        if(flag)\\n        return \"Pair\";\\n        \\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042295,
                "title": "c-program-answer-using-hash-map",
                "content": "\\n\\n# Code\\n```\\nchar * bestHand(int* ranks, int ranksSize, char* suits, int suitsSize){\\n\\n     int t1[256] = {0};\\n\\n     for(int i=0;i<suitsSize;i++){\\n         t1[(int)suits[i]] ++;\\n     } \\n\\n     for(int i=0;i<256;i++){\\n         if(t1[i] == 5){\\n             return \"Flush\";\\n         }\\n     }\\n     \\n     int s1[1000] = {0};\\n\\n     for(int i=0;i<ranksSize;i++){\\n        s1[ranks[i]] ++;\\n     }\\n\\n     for(int i=0;i<1000;i++){\\n         if(s1[i] >= 3){\\n             return \"Three of a Kind\";\\n         }\\n      } \\n\\n      for(int i=0;i<1000;i++){\\n         if(s1[i] == 2){\\n             return \"Pair\";\\n         }\\n      }     \\n    return \"High Card\";  \\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar * bestHand(int* ranks, int ranksSize, char* suits, int suitsSize){\\n\\n     int t1[256] = {0};\\n\\n     for(int i=0;i<suitsSize;i++){\\n         t1[(int)suits[i]] ++;\\n     } \\n\\n     for(int i=0;i<256;i++){\\n         if(t1[i] == 5){\\n             return \"Flush\";\\n         }\\n     }\\n     \\n     int s1[1000] = {0};\\n\\n     for(int i=0;i<ranksSize;i++){\\n        s1[ranks[i]] ++;\\n     }\\n\\n     for(int i=0;i<1000;i++){\\n         if(s1[i] >= 3){\\n             return \"Three of a Kind\";\\n         }\\n      } \\n\\n      for(int i=0;i<1000;i++){\\n         if(s1[i] == 2){\\n             return \"Pair\";\\n         }\\n      }     \\n    return \"High Card\";  \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037934,
                "title": "cpp-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        bool threekind = false, pair = false, flush = false;\\n        int arr[14] = {0};\\n        for(int i = 0; i < ranks.size(); i++){\\n            int n = ranks[i];\\n            arr[n]++;\\n            //cout << ranks[i] << endl;\\n        }\\n        for(int i = 0; i <= 13; i++){\\n            if(arr[i] >= 3){\\n        \\n                threekind = true;\\n            }\\n            if(arr[i] == 2){\\n                pair = true;\\n            }\\n        }\\n        if(suits[0] == suits[1] && suits[1] == suits[2] && suits[2] == suits[3] && suits[3] == suits[4]){\\n            flush = true;\\n        } \\n        if(flush){\\n            return \"Flush\";\\n        } else if(threekind){\\n            return \"Three of a Kind\";\\n        } else if(pair){\\n            return \"Pair\";\\n        } \\n        return \"High Card\";\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        bool threekind = false, pair = false, flush = false;\\n        int arr[14] = {0};\\n        for(int i = 0; i < ranks.size(); i++){\\n            int n = ranks[i];\\n            arr[n]++;\\n            //cout << ranks[i] << endl;\\n        }\\n        for(int i = 0; i <= 13; i++){\\n            if(arr[i] >= 3){\\n        \\n                threekind = true;\\n            }\\n            if(arr[i] == 2){\\n                pair = true;\\n            }\\n        }\\n        if(suits[0] == suits[1] && suits[1] == suits[2] && suits[2] == suits[3] && suits[3] == suits[4]){\\n            flush = true;\\n        } \\n        if(flush){\\n            return \"Flush\";\\n        } else if(threekind){\\n            return \"Three of a Kind\";\\n        } else if(pair){\\n            return \"Pair\";\\n        } \\n        return \"High Card\";\\n\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4032081,
                "title": "brute-force-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        boolean flush =false;\\n        boolean three =false;\\n        boolean pair =false;\\n\\n        Map<Integer,Integer> map = new HashMap<>();\\n        char ch =suits[0];\\n        int count =1;\\n        for(int i = 1; i<suits.length;i++){\\n            if(suits[i] == ch)\\n            count++;\\n        }\\n        if(count == 5)\\n       flush = true;\\n        for(int i = 0; i<5 ;i++){\\n            map.put(ranks[i],map.getOrDefault(ranks[i],0)+1);\\n        }\\n        for(int i : map.keySet()){\\n            if(map.get(i) >=3)\\n            three =true;\\n            else if(map.get(i) >=2)\\n            pair = true;\\n        }\\n        if(flush == true)\\n        return \"Flush\";\\n        else if(three == true)\\n        return \"Three of a Kind\";\\n        else if(pair == true)\\n        return \"Pair\";\\n        else return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        boolean flush =false;\\n        boolean three =false;\\n        boolean pair =false;\\n\\n        Map<Integer,Integer> map = new HashMap<>();\\n        char ch =suits[0];\\n        int count =1;\\n        for(int i = 1; i<suits.length;i++){\\n            if(suits[i] == ch)\\n            count++;\\n        }\\n        if(count == 5)\\n       flush = true;\\n        for(int i = 0; i<5 ;i++){\\n            map.put(ranks[i],map.getOrDefault(ranks[i],0)+1);\\n        }\\n        for(int i : map.keySet()){\\n            if(map.get(i) >=3)\\n            three =true;\\n            else if(map.get(i) >=2)\\n            pair = true;\\n        }\\n        if(flush == true)\\n        return \"Flush\";\\n        else if(three == true)\\n        return \"Three of a Kind\";\\n        else if(pair == true)\\n        return \"Pair\";\\n        else return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4016070,
                "title": "golang-ordered-matchers",
                "content": "# Code\\n```\\n\\n\\nfunc bestHand(ranks []int, suits []byte) string {\\n\\n    var cards Cards\\n    for i := 0; i < 5; i++ {\\n        cards[i] = Card {\\n            Suit: toSuit(suits[i]),\\n            Kind: ranks[i]+1,\\n        }\\n    }\\n\\n    for _, elem := range matchers {\\n\\t\\t\\tif elem.Matcher(cards) {\\n\\t\\t\\t\\treturn elem.Name\\n\\t\\t\\t}\\n\\t}\\n\\n\\tpanic(\"should never be here\")\\n}\\n\\nfunc toSuit(b byte) Suit {\\n\\tswitch b {\\n\\t\\tcase \\'a\\':\\n\\t\\t\\treturn Diamond\\n\\t\\tcase \\'b\\':\\n\\t\\t\\treturn Spade\\n\\t\\tcase \\'c\\':\\n\\t\\t\\treturn Heart\\n\\t\\tcase \\'d\\':\\n\\t\\t\\treturn Club\\n\\t\\tdefault:\\n\\t\\t\\treturn Invalid\\n\\t}\\n}\\n\\ntype Suit int\\n\\nconst (\\n\\tInvalid = -1\\n\\tDiamond = 0\\n\\tSpade   = 1\\n\\tHeart   = 2\\n\\tClub    = 3\\n)\\n\\nconst (\\n\\tRoyalFlush    = \"RoyalFlush\"\\n\\tStraightFlush = \"StraightFlush\"\\n\\tFourOfAKind   = \"FourOfAKind\"\\n\\tFullHouse     = \"FullHouse\"\\n\\tFlush         = \"Flush\"\\n\\tStraight      = \"Straight\"\\n\\tThreeOfAKind  = \"Three of a Kind\"\\n\\tTwoPairs      = \"TwoPairs\"\\n\\tPair          = \"Pair\"\\n\\tHighCard      = \"High Card\"\\n)\\n\\ntype Card struct {\\n\\tSuit Suit\\n\\tKind int // 2-14 (14 is Ace)\\n}\\n\\ntype Cards [5]Card\\n\\ntype Matcher func(Cards) bool\\n\\nfunc ThreeOfAKindMatcher(cards Cards) bool {\\n\\treturn nOfAKindMatcher(cards, 3)\\n}\\n\\nfunc PairMatcher(cards Cards) bool {\\n\\treturn nOfAKindMatcher(cards, 2)\\n}\\n\\n\\nfunc FlushMatcher(cards Cards) bool {\\n\\tcardSuit := cards[0].Suit\\n\\tfor _, card := range cards[1:] {\\n\\t\\tif card.Suit != cardSuit {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\t}\\n\\treturn true\\n}\\n\\nfunc HighCardMatcher(Cards) bool {\\n\\t// dummy thing, keep it here just for consistency\\n\\treturn true\\n}\\n\\ntype MatcherWithName struct {\\n\\tName    string\\n\\tMatcher Matcher\\n}\\n\\nvar matchers = []MatcherWithName{\\n\\t{\\n\\t\\tName:    Flush,\\n\\t\\tMatcher: FlushMatcher,\\n\\t},\\n\\t{\\n\\t\\tName:    ThreeOfAKind,\\n\\t\\tMatcher: ThreeOfAKindMatcher,\\n\\t},\\n\\t{\\n\\t\\tName:    Pair,\\n\\t\\tMatcher: PairMatcher,\\n\\t},\\n\\t{\\n\\t\\tName:    HighCard,\\n\\t\\tMatcher: HighCardMatcher,\\n\\t},\\n}\\n\\nfunc nOfAKindMatcher(cards Cards, n int) bool {\\n\\tfor _, val := range initKindArray(cards) {\\n\\t\\tif val >= n {\\n\\t\\t\\treturn true\\n\\t\\t}\\n\\t}\\n\\n\\treturn false\\n}\\n\\nfunc initKindArray(cards Cards) [13]int {\\n\\tvar vals [13]int\\n\\tfor _, card := range cards {\\n\\t\\tvals[card.Kind-2]++\\n\\t}\\n\\treturn vals\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n\\n\\nfunc bestHand(ranks []int, suits []byte) string {\\n\\n    var cards Cards\\n    for i := 0; i < 5; i++ {\\n        cards[i] = Card {\\n            Suit: toSuit(suits[i]),\\n            Kind: ranks[i]+1,\\n        }\\n    }\\n\\n    for _, elem := range matchers {\\n\\t\\t\\tif elem.Matcher(cards) {\\n\\t\\t\\t\\treturn elem.Name\\n\\t\\t\\t}\\n\\t}\\n\\n\\tpanic(\"should never be here\")\\n}\\n\\nfunc toSuit(b byte) Suit {\\n\\tswitch b {\\n\\t\\tcase \\'a\\':\\n\\t\\t\\treturn Diamond\\n\\t\\tcase \\'b\\':\\n\\t\\t\\treturn Spade\\n\\t\\tcase \\'c\\':\\n\\t\\t\\treturn Heart\\n\\t\\tcase \\'d\\':\\n\\t\\t\\treturn Club\\n\\t\\tdefault:\\n\\t\\t\\treturn Invalid\\n\\t}\\n}\\n\\ntype Suit int\\n\\nconst (\\n\\tInvalid = -1\\n\\tDiamond = 0\\n\\tSpade   = 1\\n\\tHeart   = 2\\n\\tClub    = 3\\n)\\n\\nconst (\\n\\tRoyalFlush    = \"RoyalFlush\"\\n\\tStraightFlush = \"StraightFlush\"\\n\\tFourOfAKind   = \"FourOfAKind\"\\n\\tFullHouse     = \"FullHouse\"\\n\\tFlush         = \"Flush\"\\n\\tStraight      = \"Straight\"\\n\\tThreeOfAKind  = \"Three of a Kind\"\\n\\tTwoPairs      = \"TwoPairs\"\\n\\tPair          = \"Pair\"\\n\\tHighCard      = \"High Card\"\\n)\\n\\ntype Card struct {\\n\\tSuit Suit\\n\\tKind int // 2-14 (14 is Ace)\\n}\\n\\ntype Cards [5]Card\\n\\ntype Matcher func(Cards) bool\\n\\nfunc ThreeOfAKindMatcher(cards Cards) bool {\\n\\treturn nOfAKindMatcher(cards, 3)\\n}\\n\\nfunc PairMatcher(cards Cards) bool {\\n\\treturn nOfAKindMatcher(cards, 2)\\n}\\n\\n\\nfunc FlushMatcher(cards Cards) bool {\\n\\tcardSuit := cards[0].Suit\\n\\tfor _, card := range cards[1:] {\\n\\t\\tif card.Suit != cardSuit {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\t}\\n\\treturn true\\n}\\n\\nfunc HighCardMatcher(Cards) bool {\\n\\t// dummy thing, keep it here just for consistency\\n\\treturn true\\n}\\n\\ntype MatcherWithName struct {\\n\\tName    string\\n\\tMatcher Matcher\\n}\\n\\nvar matchers = []MatcherWithName{\\n\\t{\\n\\t\\tName:    Flush,\\n\\t\\tMatcher: FlushMatcher,\\n\\t},\\n\\t{\\n\\t\\tName:    ThreeOfAKind,\\n\\t\\tMatcher: ThreeOfAKindMatcher,\\n\\t},\\n\\t{\\n\\t\\tName:    Pair,\\n\\t\\tMatcher: PairMatcher,\\n\\t},\\n\\t{\\n\\t\\tName:    HighCard,\\n\\t\\tMatcher: HighCardMatcher,\\n\\t},\\n}\\n\\nfunc nOfAKindMatcher(cards Cards, n int) bool {\\n\\tfor _, val := range initKindArray(cards) {\\n\\t\\tif val >= n {\\n\\t\\t\\treturn true\\n\\t\\t}\\n\\t}\\n\\n\\treturn false\\n}\\n\\nfunc initKindArray(cards Cards) [13]int {\\n\\tvar vals [13]int\\n\\tfor _, card := range cards {\\n\\t\\tvals[card.Kind-2]++\\n\\t}\\n\\treturn vals\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994804,
                "title": "c-easy-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int n = ranks.size();\\n\\n        map<int, int> rFreq;\\n        map<char, int> sFreq;\\n\\n        for(int i = 0; i < n; i++){\\n            rFreq[ranks[i]]++;\\n            sFreq[suits[i]]++;\\n        }\\n\\n        if(sFreq.size() == 1) return \"Flush\";\\n\\n        int rank = 0;\\n\\n        for(auto it:rFreq){\\n            rank = max(rank, it.second);\\n        }\\n\\n        if(rank >= 3) return \"Three of a Kind\";\\n\\n        if(rank == 2) return \"Pair\";\\n\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int n = ranks.size();\\n\\n        map<int, int> rFreq;\\n        map<char, int> sFreq;\\n\\n        for(int i = 0; i < n; i++){\\n            rFreq[ranks[i]]++;\\n            sFreq[suits[i]]++;\\n        }\\n\\n        if(sFreq.size() == 1) return \"Flush\";\\n\\n        int rank = 0;\\n\\n        for(auto it:rFreq){\\n            rank = max(rank, it.second);\\n        }\\n\\n        if(rank >= 3) return \"Three of a Kind\";\\n\\n        if(rank == 2) return \"Pair\";\\n\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3993239,
                "title": "best-poker-hand-js-as-easy-as-possible",
                "content": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    if (new Set(suits).size == 1) return \"Flush\"\\n    hash = {}\\n\\n    for (rank of ranks) {\\n        hash[rank] ? hash[rank]++ : hash[rank] = 1\\n    }\\n\\n    max = 0\\n\\n    for (key in hash) {\\n        max = Math.max(max, hash[key])\\n    }\\n\\n    if (max >= 3) return \"Three of a Kind\"\\n    if (max == 2) return \"Pair\"\\n\\n    return \"High Card\"\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    if (new Set(suits).size == 1) return \"Flush\"\\n    hash = {}\\n\\n    for (rank of ranks) {\\n        hash[rank] ? hash[rank]++ : hash[rank] = 1\\n    }\\n\\n    max = 0\\n\\n    for (key in hash) {\\n        max = Math.max(max, hash[key])\\n    }\\n\\n    if (max >= 3) return \"Three of a Kind\"\\n    if (max == 2) return \"Pair\"\\n\\n    return \"High Card\"\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3988148,
                "title": "normal-python-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks, suits) -> str:\\n\\n        if len(set(suits)) == 1:\\n            return \\'Flush\\'\\n\\n        two = False\\n        for i in ranks:\\n            if ranks.count(i) >= 3:\\n                return \\'Three of a Kind\\'\\n            elif ranks.count(i) == 2:\\n                two = True\\n\\n        return \\'Pair\\' if two else \\'High Card\\'\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks, suits) -> str:\\n\\n        if len(set(suits)) == 1:\\n            return \\'Flush\\'\\n\\n        two = False\\n        for i in ranks:\\n            if ranks.count(i) >= 3:\\n                return \\'Three of a Kind\\'\\n            elif ranks.count(i) == 2:\\n                two = True\\n\\n        return \\'Pair\\' if two else \\'High Card\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987713,
                "title": "python-simple-python-solution-hash-map-98-faster",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 27 ms, faster than 98.83% of Python3 online submissions for Best Poker Hand.\\n# Memory Usage: 16.4 MB, less than 32.87% of Python3 online submissions for Best Poker Hand.\\n\\n![image](https://assets.leetcode.com/users/images/12f94501-9477-43b7-b6f7-2ebbcb5eccac_1693559952.918822.png)\\n\\n\\tclass Solution:\\n\\t\\tdef bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n\\n\\t\\t\\thash_map_suits = {}\\n\\t\\t\\thash_map_ranks = {}\\n\\n\\t\\t\\tfor suit in suits:\\n\\n\\t\\t\\t\\tif suit not in hash_map_suits:\\n\\t\\t\\t\\t\\thash_map_suits[suit] = 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\thash_map_suits[suit] = hash_map_suits[suit] + 1\\n\\n\\t\\t\\tfor suit in hash_map_suits:\\n\\t\\t\\t\\tif hash_map_suits[suit] == 5:\\n\\t\\t\\t\\t\\treturn \\'Flush\\'\\n\\n\\t\\t\\tfor rank in ranks:\\n\\n\\t\\t\\t\\tif rank not in hash_map_ranks:\\n\\t\\t\\t\\t\\thash_map_ranks[rank] = 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\thash_map_ranks[rank] = hash_map_ranks[rank] + 1\\n\\n\\t\\t\\ttwo_cards_same_rank = False\\n\\n\\t\\t\\tfor rank in hash_map_ranks:\\n\\t\\t\\t\\tif hash_map_ranks[rank] >= 3:\\n\\t\\t\\t\\t\\treturn \\'Three of a Kind\\'\\n\\n\\t\\t\\t\\tif hash_map_ranks[rank] >= 2:\\n\\t\\t\\t\\t\\ttwo_cards_same_rank = True\\n\\n\\t\\t\\tif two_cards_same_rank == True:\\n\\t\\t\\t\\treturn \\'Pair\\'\\n\\n\\t\\t\\treturn \\'High Card\\'\\n\\n\\tTime Complexity : O(n)\\n\\tSpace Complexity : O(n)\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table"
                ],
                "code": "class Solution:\\n\\t\\tdef bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n\\n\\t\\t\\thash_map_suits = {}",
                "codeTag": "Java"
            },
            {
                "id": 3987640,
                "title": "0ms-100-java-hashmap",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- First check the only condition related to suits then check conditions related to rank\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        \\n        for(int i=1; i<suits.length; i++){\\n            if(suits[i-1] != suits[i]) break;\\n            if(i==suits.length-1) return \"Flush\";\\n        }\\n\\n        HashMap<Integer, Integer> mp = new HashMap<>();\\n        int max = 0;\\n        for(int i : ranks){\\n            if(mp.containsKey(i)){\\n                mp.put(i, mp.get(i)+1);\\n            }\\n            else mp.put(i,1);\\n            \\n            if(max<mp.get(i)) max = mp.get(i);\\n        }\\n        if(max>=3) return \"Three of a Kind\";\\n        if(max>=2) return \"Pair\";\\n        else return \"High Card\";\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        \\n        for(int i=1; i<suits.length; i++){\\n            if(suits[i-1] != suits[i]) break;\\n            if(i==suits.length-1) return \"Flush\";\\n        }\\n\\n        HashMap<Integer, Integer> mp = new HashMap<>();\\n        int max = 0;\\n        for(int i : ranks){\\n            if(mp.containsKey(i)){\\n                mp.put(i, mp.get(i)+1);\\n            }\\n            else mp.put(i,1);\\n            \\n            if(max<mp.get(i)) max = mp.get(i);\\n        }\\n        if(max>=3) return \"Three of a Kind\";\\n        if(max>=2) return \"Pair\";\\n        else return \"High Card\";\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974417,
                "title": "my-intuitive-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSequentially check the conditions 1 through 4, and return the outcome corresponding to the first met condition. (From the hint)\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Loop through the suits array, if any of the element does not equal to the first element, then break the loop. If all the elements are the same suits, return \"Flush\"\\n2. Create new Map to count the occurence of the same ranked cards.\\n3. Loop through the ranks array and check if the current card exists in the Map. If so then add 1 to the count of the card. While doing so, check if the count is larger than 3. If it is then return \"Three of a Kind\". If the current card does not exist, add it to the map with the value of 1.\\n4. Then check if the Map size is smaller than 5. If it is then there\\'s a pair, so return \"Pair\". If not then all of the cards is unique, so return \"High Card\"\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    for (let i = 0; i < 4; i++) {\\n        if(suits[i] !== suits[i + 1]) {\\n            break\\n        }\\n\\n        if(i === 3) return \"Flush\"\\n    }\\n    let mp = new Map()\\n    for (let i = 0; i < 5; i++) {\\n        if(mp.get(ranks[i])) {\\n            mp.set(ranks[i], mp.get(ranks[i]) + 1)\\n            if(mp.get(ranks[i]) > 2 ) return \"Three of a Kind\"\\n        } else {\\n            mp.set(ranks[i], 1)\\n        }\\n    }\\n    if(mp.size < 5) {\\n        return \"Pair\"\\n    } else {\\n        return \"High Card\"\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    for (let i = 0; i < 4; i++) {\\n        if(suits[i] !== suits[i + 1]) {\\n            break\\n        }\\n\\n        if(i === 3) return \"Flush\"\\n    }\\n    let mp = new Map()\\n    for (let i = 0; i < 5; i++) {\\n        if(mp.get(ranks[i])) {\\n            mp.set(ranks[i], mp.get(ranks[i]) + 1)\\n            if(mp.get(ranks[i]) > 2 ) return \"Three of a Kind\"\\n        } else {\\n            mp.set(ranks[i], 1)\\n        }\\n    }\\n    if(mp.size < 5) {\\n        return \"Pair\"\\n    } else {\\n        return \"High Card\"\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3952264,
                "title": "simple-python-solution-o-n-using-set",
                "content": "The code first checks for a flush by examining if all cards have the same suit. Then, it analyzes card ranks for different combinations such as \\'High Card\\' (no matching ranks), \\'Three of a Kind\\', and \\'Pair\\'. The code returns \\'False\\' if none of the specified combinations are matched.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def bestHand(self, ranks, suits):\\n        \"\"\"asdasdf\\n        :tyasdfpe ranks: List[int]\\n        :type suasdfits: List[str]\\n        :rtype: str\\n        \"\"\"\\n        \\n        if len(set(suits))==1:\\n            return \\'Flush\\'\\n        rank=set(ranks)\\n        if len(rank)==5:\\n            return \\'High Card\\'\\n        \\n        ranker={}\\n        for r in ranks:\\n            if r not in ranker:\\n                ranker[r]=1\\n            else:\\n                ranker[r]+=1\\n        if max(ranker.values())>=3:\\n            return \"Three of a Kind\"\\n        if max(ranker.values())==2:\\n            return \\'Pair\\'\\n        return False\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def bestHand(self, ranks, suits):\\n        \"\"\"asdasdf\\n        :tyasdfpe ranks: List[int]\\n        :type suasdfits: List[str]\\n        :rtype: str\\n        \"\"\"\\n        \\n        if len(set(suits))==1:\\n            return \\'Flush\\'\\n        rank=set(ranks)\\n        if len(rank)==5:\\n            return \\'High Card\\'\\n        \\n        ranker={}\\n        for r in ranks:\\n            if r not in ranker:\\n                ranker[r]=1\\n            else:\\n                ranker[r]+=1\\n        if max(ranker.values())>=3:\\n            return \"Three of a Kind\"\\n        if max(ranker.values())==2:\\n            return \\'Pair\\'\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3930139,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n public:\\n  string bestHand(vector<int>& ranks, vector<char>& suits) {\\n    if (all_of(suits.begin(), suits.end(),\\n               [&suits](const char suit) { return suit == suits[0]; }))\\n      return \"Flush\";\\n\\n    constexpr int kMax = 13;\\n    vector<int> count(kMax + 1);\\n\\n    for (const int rank : ranks)\\n      ++count[rank];\\n\\n    const int max = *max_element(count.begin(), count.end());\\n    if (max > 2)\\n      return \"Three of a Kind\";\\n    if (max == 2)\\n      return \"Pair\";\\n    return \"High Card\";\\n  }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n public:\\n  string bestHand(vector<int>& ranks, vector<char>& suits) {\\n    if (all_of(suits.begin(), suits.end(),\\n               [&suits](const char suit) { return suit == suits[0]; }))\\n      return \"Flush\";\\n\\n    constexpr int kMax = 13;\\n    vector<int> count(kMax + 1);\\n\\n    for (const int rank : ranks)\\n      ++count[rank];\\n\\n    const int max = *max_element(count.begin(), count.end());\\n    if (max > 2)\\n      return \"Three of a Kind\";\\n    if (max == 2)\\n      return \"Pair\";\\n    return \"High Card\";\\n  }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3928282,
                "title": "basic-java-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        // int c=0;\\n        // char k=suits[0];\\n        // for(char ch:suits)\\n        //     if(ch==k)\\n        //         c++;\\n        // if(c==5)\\n        //     return \"Flush\";\\n        // Map<Integer,Integer> map=new HashMap<>();\\n        // for(int i:ranks)\\n        //     if(map.containsKey(i))\\n        //         map.put(i,map.get(i)+1);\\n        //     else\\n        //         map.put(i,1);\\n        // int max=1;\\n        // for(int i:map.keySet())\\n        //     max=Math.max(max,map.get(i));\\n        // if(max==2)\\n        //     return \"Pair\";\\n        // else if(max>2)\\n        //     return \"Three of a Kind\";\\n        // else\\n        //     return \"High Card\";\\n        int c=1,k=1,max=0;\\n        Arrays.sort(ranks);\\n        for(int i=1;i<5;i++){\\n            if(suits[i]==suits[0])\\n                c++;\\n            if(ranks[i]==ranks[i-1])\\n                k++;\\n            else{\\n                k=1;\\n            }\\n            max=Math.max(max,k);\\n        }\\n        if(c==5)\\n            return \"Flush\";\\n        if(max==2)\\n            return \"Pair\";\\n        if(max>2)\\n            return \"Three of a Kind\";\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        // int c=0;\\n        // char k=suits[0];\\n        // for(char ch:suits)\\n        //     if(ch==k)\\n        //         c++;\\n        // if(c==5)\\n        //     return \"Flush\";\\n        // Map<Integer,Integer> map=new HashMap<>();\\n        // for(int i:ranks)\\n        //     if(map.containsKey(i))\\n        //         map.put(i,map.get(i)+1);\\n        //     else\\n        //         map.put(i,1);\\n        // int max=1;\\n        // for(int i:map.keySet())\\n        //     max=Math.max(max,map.get(i));\\n        // if(max==2)\\n        //     return \"Pair\";\\n        // else if(max>2)\\n        //     return \"Three of a Kind\";\\n        // else\\n        //     return \"High Card\";\\n        int c=1,k=1,max=0;\\n        Arrays.sort(ranks);\\n        for(int i=1;i<5;i++){\\n            if(suits[i]==suits[0])\\n                c++;\\n            if(ranks[i]==ranks[i-1])\\n                k++;\\n            else{\\n                k=1;\\n            }\\n            max=Math.max(max,k);\\n        }\\n        if(c==5)\\n            return \"Flush\";\\n        if(max==2)\\n            return \"Pair\";\\n        if(max>2)\\n            return \"Three of a Kind\";\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923187,
                "title": "python-fast-solution-beats-100",
                "content": "# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        maxi = max(Counter(ranks).values())\\n        if len(set(suits)) == 1: return \"Flush\"\\n        elif maxi == 1: return \"High Card\"\\n        elif maxi == 2: return \"Pair\"\\n        else: return \"Three of a Kind\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        maxi = max(Counter(ranks).values())\\n        if len(set(suits)) == 1: return \"Flush\"\\n        elif maxi == 1: return \"High Card\"\\n        elif maxi == 2: return \"Pair\"\\n        else: return \"Three of a Kind\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3921503,
                "title": "c-count-arrays",
                "content": "```\\npublic class Solution {\\n    public string BestHand(int[] ranks, char[] suits)\\n    {\\n        var r = new int[13 + 1];\\n        var s = new int[4];\\n\\n        bool flush = false;\\n        bool tk = false;\\n        bool pair = false;\\n\\n        for (int i = 0; i < ranks.Length; i++)\\n        {\\n            if (++s[suits[i] - \\'a\\'] == 5) flush = true;\\n\\n            switch (++r[ranks[i]])\\n            {\\n                case 2:\\n                    pair = true;\\n                    break;\\n                case 3:\\n                    tk = true;\\n                    break;\\n            }\\n        }\\n\\n        if (flush) return \"Flush\";\\n        if (tk) return \"Three of a Kind\";\\n        if (pair) return \"Pair\";\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public string BestHand(int[] ranks, char[] suits)\\n    {\\n        var r = new int[13 + 1];\\n        var s = new int[4];\\n\\n        bool flush = false;\\n        bool tk = false;\\n        bool pair = false;\\n\\n        for (int i = 0; i < ranks.Length; i++)\\n        {\\n            if (++s[suits[i] - \\'a\\'] == 5) flush = true;\\n\\n            switch (++r[ranks[i]])\\n            {\\n                case 2:\\n                    pair = true;\\n                    break;\\n                case 3:\\n                    tk = true;\\n                    break;\\n            }\\n        }\\n\\n        if (flush) return \"Flush\";\\n        if (tk) return \"Three of a Kind\";\\n        if (pair) return \"Pair\";\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3883666,
                "title": "c-easy-to-understand-solution-beats-runtime-100-memory-48",
                "content": "![image.png](https://assets.leetcode.com/users/images/d8d26180-8ba3-4de2-8638-e5686ce13260_1691527391.4018283.png)\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public string BestHand(int[] ranks, char[] suits) {\\n        HashSet<char> suitsHashSet = new HashSet<char>(suits);\\n        if (suitsHashSet.Count == 1)\\n        {\\n            return \"Flush\";\\n        }\\n\\n        HashSet<int> ranksHashSet = new HashSet<int>(ranks);\\n        if (ranksHashSet.Count == 4)\\n        {\\n            return \"Pair\";\\n        }\\n\\n        if (ranksHashSet.Count == 5)\\n        {\\n            return \"High Card\";\\n        }\\n\\n        if (ranksHashSet.Count == 2)\\n        {\\n            return \"Three of a Kind\";\\n        }\\n\\n        int counter = 0;\\n        Dictionary<int, int> dictionary = new Dictionary<int, int>();\\n        foreach (int rank in ranks)\\n        {\\n            if (!dictionary.ContainsKey(rank))\\n            {\\n                dictionary[rank] = 1;\\n            }\\n            else\\n            {\\n                dictionary[rank]++;\\n            }\\n\\n            counter = dictionary[rank] > counter ? dictionary[rank] : counter;\\n        }\\n       \\n        return counter == 3? \"Three of a Kind\" : \"Pair\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Array",
                    "Hash Table",
                    "Counting"
                ],
                "code": "```\\npublic class Solution {\\n    public string BestHand(int[] ranks, char[] suits) {\\n        HashSet<char> suitsHashSet = new HashSet<char>(suits);\\n        if (suitsHashSet.Count == 1)\\n        {\\n            return \"Flush\";\\n        }\\n\\n        HashSet<int> ranksHashSet = new HashSet<int>(ranks);\\n        if (ranksHashSet.Count == 4)\\n        {\\n            return \"Pair\";\\n        }\\n\\n        if (ranksHashSet.Count == 5)\\n        {\\n            return \"High Card\";\\n        }\\n\\n        if (ranksHashSet.Count == 2)\\n        {\\n            return \"Three of a Kind\";\\n        }\\n\\n        int counter = 0;\\n        Dictionary<int, int> dictionary = new Dictionary<int, int>();\\n        foreach (int rank in ranks)\\n        {\\n            if (!dictionary.ContainsKey(rank))\\n            {\\n                dictionary[rank] = 1;\\n            }\\n            else\\n            {\\n                dictionary[rank]++;\\n            }\\n\\n            counter = dictionary[rank] > counter ? dictionary[rank] : counter;\\n        }\\n       \\n        return counter == 3? \"Three of a Kind\" : \"Pair\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3880462,
                "title": "swift-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        \\n        guard Set(suits).count != 1 else { return \"Flush\" }\\n        let ranksCount = ranks.reduce(into: [:]) { $0[$1, default: 0] += 1 }.values\\n        guard !ranksCount.contains(3) && !ranksCount.contains(4) && !ranksCount.contains(5) else { return \"Three of a Kind\" }\\n        guard Set(ranks).count > 4 else { return \"Pair\" }\\n        \\n        return \"High Card\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Array",
                    "Hash Table",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        \\n        guard Set(suits).count != 1 else { return \"Flush\" }\\n        let ranksCount = ranks.reduce(into: [:]) { $0[$1, default: 0] += 1 }.values\\n        guard !ranksCount.contains(3) && !ranksCount.contains(4) && !ranksCount.contains(5) else { return \"Three of a Kind\" }\\n        guard Set(ranks).count > 4 else { return \"Pair\" }\\n        \\n        return \"High Card\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3861714,
                "title": "beats-100-runtime-using-if-else",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] r, char[] s) {\\n       Arrays.sort(r);\\n       if(s[0]==s[1]&& s[0]==s[2] && s[0]==s[3] && s[0]==s[4]) return \"Flush\";\\n       else if((r[0]==r[1] && r[0]==r[2]) || (r[2]==r[1] && r[1]==r[3]) || (r[3]==r[2] && r[4]==r[2])) return \"Three of a Kind\";\\n       else if(r[0]==r[1] || r[1]==r[2] || r[2]==r[3] || r[3]==r[4]) return \"Pair\";\\n       else return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] r, char[] s) {\\n       Arrays.sort(r);\\n       if(s[0]==s[1]&& s[0]==s[2] && s[0]==s[3] && s[0]==s[4]) return \"Flush\";\\n       else if((r[0]==r[1] && r[0]==r[2]) || (r[2]==r[1] && r[1]==r[3]) || (r[3]==r[2] && r[4]==r[2])) return \"Three of a Kind\";\\n       else if(r[0]==r[1] || r[1]==r[2] || r[2]==r[3] || r[3]==r[4]) return \"Pair\";\\n       else return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3812163,
                "title": "python-easy-dictionary-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        #if len(set(suits))==1:\\n        if (all(suits[0]==x for x in suits))==True:\\n            return \"Flush\"\\n        d=dict()\\n        for x in ranks: \\n            d[x]=d.get(x,0)+1\\n        if max(d.values())>=3:\\n            return \"Three of a Kind\"\\n        if max(d.values())==2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        #if len(set(suits))==1:\\n        if (all(suits[0]==x for x in suits))==True:\\n            return \"Flush\"\\n        d=dict()\\n        for x in ranks: \\n            d[x]=d.get(x,0)+1\\n        if max(d.values())>=3:\\n            return \"Three of a Kind\"\\n        if max(d.values())==2:\\n            return \"Pair\"\\n        else:\\n            return \"High Card\"\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3811493,
                "title": "best-poker-hand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer,Integer> hr = new HashMap<Integer,Integer>();\\n        for(int i=0;i<ranks.length;i++)\\n        {\\n            hr.put(ranks[i],hr.getOrDefault(ranks[i],0)+1);\\n        }\\n        HashMap<Character,Integer> hs = new HashMap<Character,Integer>();\\n        for(int i=0;i<suits.length;i++)\\n        {\\n            hs.put(suits[i],hs.getOrDefault(suits[i],0)+1);\\n        }\\n        String str = new String();\\n        for(Map.Entry<Character,Integer> e:hs.entrySet())\\n        {\\n            if(e.getValue()==5)\\n            {\\n                str = \"Flush\";\\n                return str;\\n            }\\n        }\\n        String str1=new String();\\n        String str2=new String();\\n        String str3=new String();\\n        for(Map.Entry<Integer,Integer> e:hr.entrySet())\\n        {\\n            if(e.getValue()>=3)\\n            {\\n                str1 = \"Three of a Kind\";\\n            }\\n            else if(e.getValue()==2)\\n            {\\n                str2 = \"Pair\";\\n            }\\n            else if(e.getValue()==1)\\n            {\\n                str3 =\"High Card\";\\n            }\\n    }\\n    if(str1.isEmpty()==false)\\n    return str1;\\n    if(str2.isEmpty()==false)\\n    return str2;\\n    return str3;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        HashMap<Integer,Integer> hr = new HashMap<Integer,Integer>();\\n        for(int i=0;i<ranks.length;i++)\\n        {\\n            hr.put(ranks[i],hr.getOrDefault(ranks[i],0)+1);\\n        }\\n        HashMap<Character,Integer> hs = new HashMap<Character,Integer>();\\n        for(int i=0;i<suits.length;i++)\\n        {\\n            hs.put(suits[i],hs.getOrDefault(suits[i],0)+1);\\n        }\\n        String str = new String();\\n        for(Map.Entry<Character,Integer> e:hs.entrySet())\\n        {\\n            if(e.getValue()==5)\\n            {\\n                str = \"Flush\";\\n                return str;\\n            }\\n        }\\n        String str1=new String();\\n        String str2=new String();\\n        String str3=new String();\\n        for(Map.Entry<Integer,Integer> e:hr.entrySet())\\n        {\\n            if(e.getValue()>=3)\\n            {\\n                str1 = \"Three of a Kind\";\\n            }\\n            else if(e.getValue()==2)\\n            {\\n                str2 = \"Pair\";\\n            }\\n            else if(e.getValue()==1)\\n            {\\n                str3 =\"High Card\";\\n            }\\n    }\\n    if(str1.isEmpty()==false)\\n    return str1;\\n    if(str2.isEmpty()==false)\\n    return str2;\\n    return str3;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3808528,
                "title": "using-hash-map-and-set",
                "content": "# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        ranks = Counter(ranks)\\n        suits = set(suits)\\n        if len(suits) == 1:\\n            return \"Flush\"\\n        if max(ranks.values()) >= 3:\\n            return \"Three of a Kind\"\\n        if len(ranks) <= 4:\\n            return \"Pair\"\\n        return \"High Card\"\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        ranks = Counter(ranks)\\n        suits = set(suits)\\n        if len(suits) == 1:\\n            return \"Flush\"\\n        if max(ranks.values()) >= 3:\\n            return \"Three of a Kind\"\\n        if len(ranks) <= 4:\\n            return \"Pair\"\\n        return \"High Card\"\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3767450,
                "title": "easy",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>&r , vector<char>&s){\\n        char c = s[0];\\n        int co=0;\\n        for(auto i:s){\\n            if(i==c){\\n                co++;\\n            }\\n        }\\n        if(co==5){\\n            return \"Flush\";\\n        }\\n        unordered_map<int,int>mp;\\n        for(auto i:r){\\n            mp[i]++;\\n        }\\n        int fr=0;\\n        for(auto i:mp){\\n            if(i.second>fr){\\n                fr=i.second;\\n            }\\n        }\\n        if(fr>=3){\\n            return \"Three of a Kind\";\\n        }\\n        if(fr==2){\\n            return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>&r , vector<char>&s){\\n        char c = s[0];\\n        int co=0;\\n        for(auto i:s){\\n            if(i==c){\\n                co++;\\n            }\\n        }\\n        if(co==5){\\n            return \"Flush\";\\n        }\\n        unordered_map<int,int>mp;\\n        for(auto i:r){\\n            mp[i]++;\\n        }\\n        int fr=0;\\n        for(auto i:mp){\\n            if(i.second>fr){\\n                fr=i.second;\\n            }\\n        }\\n        if(fr>=3){\\n            return \"Three of a Kind\";\\n        }\\n        if(fr==2){\\n            return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3759503,
                "title": "python-solution-in-10-lines-of-code",
                "content": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if Counter(suits).most_common(1)[0][1] == 5:\\n            return \"Flush\"\\n        \\n        match Counter(ranks).most_common(1)[0][1]:\\n            case c if c >= 3:\\n                return \"Three of a Kind\"\\n            case c if c == 2:\\n                return \"Pair\"\\n            case _:\\n                return \"High Card\"\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if Counter(suits).most_common(1)[0][1] == 5:\\n            return \"Flush\"\\n        \\n        match Counter(ranks).most_common(1)[0][1]:\\n            case c if c >= 3:\\n                return \"Three of a Kind\"\\n            case c if c == 2:\\n                return \"Pair\"\\n            case _:\\n                return \"High Card\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3752042,
                "title": "100-easy-to-understand-simple-clean",
                "content": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        output = 0\\n        for i in suits:\\n            if i != suits[0]:\\n                output = 1\\n        if output == 0:\\n            return(\"Flush\")\\n\\n        for j in ranks:\\n            if ranks.count(j) >= 3:\\n                return(\"Three of a Kind\")\\n\\n        for k in ranks:\\n            if ranks.count(k) == 2: return(\"Pair\")\\n\\n        return(\"High Card\")        \\n```\\nIf you have any questions or comments about my solution, please make sure to leave a comment in the section below my code and I will get back to you ASAP to the best of my ability. :) Thanks!",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        output = 0\\n        for i in suits:\\n            if i != suits[0]:\\n                output = 1\\n        if output == 0:\\n            return(\"Flush\")\\n\\n        for j in ranks:\\n            if ranks.count(j) >= 3:\\n                return(\"Three of a Kind\")\\n\\n        for k in ranks:\\n            if ranks.count(k) == 2: return(\"Pair\")\\n\\n        return(\"High Card\")        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3750336,
                "title": "simple-js-solution-10lines",
                "content": "# Approach \\nhashmap and conditional statement\\n\\n# Complexity\\n- Time complexity:O(1)\\n\\n- Space complexity:O(ranks, suits)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    let shash = {};\\n    let rhash = {};\\n    suits.map((x) =>shash[x]=(shash[x]||0)+1)\\n    ranks.map((x) =>rhash[x]=(rhash[x]||0)+1)\\n    if(Object.keys(shash).length === 1){\\n        return \"Flush\"\\n    }else if(Object.values(rhash).some((x) =>x===3 || x===4 )){\\n        return \"Three of a Kind\"\\n    }else if(Object.values(rhash).some((x) =>x===2)){\\n        return \"Pair\"\\n    }else {\\n        return \"High Card\"\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    let shash = {};\\n    let rhash = {};\\n    suits.map((x) =>shash[x]=(shash[x]||0)+1)\\n    ranks.map((x) =>rhash[x]=(rhash[x]||0)+1)\\n    if(Object.keys(shash).length === 1){\\n        return \"Flush\"\\n    }else if(Object.values(rhash).some((x) =>x===3 || x===4 )){\\n        return \"Three of a Kind\"\\n    }else if(Object.values(rhash).some((x) =>x===2)){\\n        return \"Pair\"\\n    }else {\\n        return \"High Card\"\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3742639,
                "title": "python-easy-solution-98-beats",
                "content": "# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits)) == 1:\\n            return \\'Flush\\'\\n        \\n        cnt = Counter(ranks)\\n        max_chr = max(cnt, key=cnt.get)\\n        if cnt.get(max_chr) >= 3:\\n            return \\'Three of a Kind\\'\\n        if cnt.get(max_chr) == 2:\\n            return \\'Pair\\'\\n        return \\'High Card\\'\\n            \\n```\\n![catty.png](https://assets.leetcode.com/users/images/139bfd2b-de4d-49cb-86da-6d3521f278b0_1688933834.8745553.png)\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits)) == 1:\\n            return \\'Flush\\'\\n        \\n        cnt = Counter(ranks)\\n        max_chr = max(cnt, key=cnt.get)\\n        if cnt.get(max_chr) >= 3:\\n            return \\'Three of a Kind\\'\\n        if cnt.get(max_chr) == 2:\\n            return \\'Pair\\'\\n        return \\'High Card\\'\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3729371,
                "title": "c-0ms-no-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo iterate map, you\\'ll need 13 operations and extra memory space.\\nThere\\'re max of 5 cards, iterate with `i,j` only need max of 4+3+2+1 = 10 operations.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Simply compare with first card\\'s suit for \"flush\".\\n- Iterate with `i,j` to count how many cards are the same. (Less iteration for `i` if remaning checks won\\'t get a better poker hand.)\\n\\n# Complexity\\n- Time complexity: O(c)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- Space complexity: O(c)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        for(int i = 1; i < 5 && suits[i] == suits[0]; ++i) {\\n            if (i == 4) {\\n                return \"Flush\";\\n            }\\n        }\\n\\n        auto mc = 1;\\n        for(int i = 0; mc < 3 && i < 5 - mc; ++i) {\\n            auto c = 1;\\n            for(int j = i+1; j < 5; ++j) {\\n                if (ranks[j] == ranks[i]) {\\n                    ++c;\\n                }\\n            }\\n            if (mc < c) {\\n                mc = c;\\n            }\\n        }\\n        switch (mc) {\\n            case 4:\\n            case 3:\\n                return \"Three of a Kind\";\\n            case 2:\\n                return \"Pair\";\\n            default:\\n                return \"High Card\";\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        for(int i = 1; i < 5 && suits[i] == suits[0]; ++i) {\\n            if (i == 4) {\\n                return \"Flush\";\\n            }\\n        }\\n\\n        auto mc = 1;\\n        for(int i = 0; mc < 3 && i < 5 - mc; ++i) {\\n            auto c = 1;\\n            for(int j = i+1; j < 5; ++j) {\\n                if (ranks[j] == ranks[i]) {\\n                    ++c;\\n                }\\n            }\\n            if (mc < c) {\\n                mc = c;\\n            }\\n        }\\n        switch (mc) {\\n            case 4:\\n            case 3:\\n                return \"Three of a Kind\";\\n            case 2:\\n                return \"Pair\";\\n            default:\\n                return \"High Card\";\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3723388,
                "title": "o-n-java-solution-using-int-array",
                "content": "Very straightforward, just follow the logic flow - Count the frequency of ranks and suits, then return results with the its designated order.\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int[] rank = new int[14];\\n        int[] suit = new int[4];\\n        for (int num: ranks) {\\n            rank[num]++;\\n        }\\n        for (char ch: suits) {\\n            suit[ch - \\'a\\']++;\\n        }\\n        for (int num: suit) {\\n            if (num == 5) {\\n                return \"Flush\";\\n            }\\n        }\\n        for (int i = 1; i < rank.length; i++) {\\n            if (rank[i] >= 3) {\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for (int i = 1; i < rank.length; i++) {\\n            if (rank[i] >= 2) {\\n                return \"Pair\";\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int[] rank = new int[14];\\n        int[] suit = new int[4];\\n        for (int num: ranks) {\\n            rank[num]++;\\n        }\\n        for (char ch: suits) {\\n            suit[ch - \\'a\\']++;\\n        }\\n        for (int num: suit) {\\n            if (num == 5) {\\n                return \"Flush\";\\n            }\\n        }\\n        for (int i = 1; i < rank.length; i++) {\\n            if (rank[i] >= 3) {\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for (int i = 1; i < rank.length; i++) {\\n            if (rank[i] >= 2) {\\n                return \"Pair\";\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3720391,
                "title": "java-without-using-data-structure",
                "content": "# Intuition\\nSlove the problem without using Data Structure \\n\\n# Code\\n```java\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        // Check for flush\\n        boolean isFlush = true;\\n        char suit = suits[0];\\n        for (int i = 1; i < suits.length; i++) {\\n            if (suits[i] != suit) {\\n                isFlush = false;\\n                break;\\n            }\\n        }\\n\\n        // Check for three of a kind or pair\\n        int threeOfAKindRank = 0;\\n        int pairRank = 0;\\n        int[] countRank = new int[14];\\n        for (int rank : ranks) {\\n            countRank[rank]++;\\n            if (countRank[rank] == 3) {\\n                threeOfAKindRank = rank;\\n            } else if (countRank[rank] == 2) {\\n                pairRank = rank;\\n            }\\n        }\\n\\n        // Return the best hand\\n        if (isFlush) {\\n            return \"Flush\";\\n        } else if (threeOfAKindRank != 0) {\\n            return \"Three of a Kind\";\\n        } else if (pairRank != 0) {\\n            return countRank[pairRank] == 4 ? \"Four of a Kind\" : \"Pair\";\\n        } else {\\n            return \"High Card\";\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        // Check for flush\\n        boolean isFlush = true;\\n        char suit = suits[0];\\n        for (int i = 1; i < suits.length; i++) {\\n            if (suits[i] != suit) {\\n                isFlush = false;\\n                break;\\n            }\\n        }\\n\\n        // Check for three of a kind or pair\\n        int threeOfAKindRank = 0;\\n        int pairRank = 0;\\n        int[] countRank = new int[14];\\n        for (int rank : ranks) {\\n            countRank[rank]++;\\n            if (countRank[rank] == 3) {\\n                threeOfAKindRank = rank;\\n            } else if (countRank[rank] == 2) {\\n                pairRank = rank;\\n            }\\n        }\\n\\n        // Return the best hand\\n        if (isFlush) {\\n            return \"Flush\";\\n        } else if (threeOfAKindRank != 0) {\\n            return \"Three of a Kind\";\\n        } else if (pairRank != 0) {\\n            return countRank[pairRank] == 4 ? \"Four of a Kind\" : \"Pair\";\\n        } else {\\n            return \"High Card\";\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3719607,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    if (suits.every(suit => suit === suits[0])) return \"Flush\";\\n    const map = {}\\n    ranks.forEach((item) => {\\n        map[item] = (map[item] ?? 0) + 1;\\n    });\\n    const max = Math.max(...Object.values(map));\\n    if (max >= 3) {\\n        return \"Three of a Kind\";\\n    }\\n    if (max >= 2) {\\n        return \"Pair\";\\n    }\\n    return \"High Card\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    if (suits.every(suit => suit === suits[0])) return \"Flush\";\\n    const map = {}\\n    ranks.forEach((item) => {\\n        map[item] = (map[item] ?? 0) + 1;\\n    });\\n    const max = Math.max(...Object.values(map));\\n    if (max >= 3) {\\n        return \"Three of a Kind\";\\n    }\\n    if (max >= 2) {\\n        return \"Pair\";\\n    }\\n    return \"High Card\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3692594,
                "title": "python-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        cnt=1\\n        flg=0\\n        dic={}\\n        for i in suits[1:]:\\n            if i==suits[0]:\\n                cnt+=1\\n        if cnt==5:\\n            return \"Flush\"\\n        for i in ranks:\\n            if i in dic:\\n                dic[i]+=1\\n                if dic[i]==3:\\n                    return \"Three of a Kind\"\\n                if dic[i]==2:\\n                    flg=1\\n            else:\\n                dic[i]=1\\n        if flg==1:\\n            return \"Pair\"\\n        return \"High Card\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        cnt=1\\n        flg=0\\n        dic={}\\n        for i in suits[1:]:\\n            if i==suits[0]:\\n                cnt+=1\\n        if cnt==5:\\n            return \"Flush\"\\n        for i in ranks:\\n            if i in dic:\\n                dic[i]+=1\\n                if dic[i]==3:\\n                    return \"Three of a Kind\"\\n                if dic[i]==2:\\n                    flg=1\\n            else:\\n                dic[i]=1\\n        if flg==1:\\n            return \"Pair\"\\n        return \"High Card\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3684948,
                "title": "simple-to-understand-beats-100-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n       vector<int> rank(14,0);\\n       vector<int> suit(4,0);\\n\\n       for(int i=0;i<5;i++){\\n            rank[ranks[i]]++;\\n            suit[suits[i]-\\'a\\']++;\\n       }\\n\\n       int suit2=*max_element(suit.begin(),suit.end());\\n       int rank2=*max_element(rank.begin(),rank.end());\\n       \\n\\n       if(rank2>=3){\\n           return \"Three of a Kind\";\\n       }\\n       else if(rank2==2){\\n           return \"Pair\";\\n       }\\n       else if(suit2==5){\\n           return \"Flush\";\\n       }\\n       else{\\n           return \"High Card\";\\n       }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n       vector<int> rank(14,0);\\n       vector<int> suit(4,0);\\n\\n       for(int i=0;i<5;i++){\\n            rank[ranks[i]]++;\\n            suit[suits[i]-\\'a\\']++;\\n       }\\n\\n       int suit2=*max_element(suit.begin(),suit.end());\\n       int rank2=*max_element(rank.begin(),rank.end());\\n       \\n\\n       if(rank2>=3){\\n           return \"Three of a Kind\";\\n       }\\n       else if(rank2==2){\\n           return \"Pair\";\\n       }\\n       else if(suit2==5){\\n           return \"Flush\";\\n       }\\n       else{\\n           return \"High Card\";\\n       }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3675079,
                "title": "using-map-runtime-beats-95-65",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    let rank = new Map(), max = 0\\n    if([...new Set(suits)].length === 1) return \"Flush\"\\n    \\n    ranks.forEach(e => rank.set(e, rank.get(e) + 1 || 1))\\n    rank.forEach((value, key, map) => {\\n        max = value > max ? value : max\\n    })\\n\\n    if(max >= 3) return \"Three of a Kind\"\\n    if(max >= 2) return \"Pair\"\\n\\n    return \"High Card\"\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    let rank = new Map(), max = 0\\n    if([...new Set(suits)].length === 1) return \"Flush\"\\n    \\n    ranks.forEach(e => rank.set(e, rank.get(e) + 1 || 1))\\n    rank.forEach((value, key, map) => {\\n        max = value > max ? value : max\\n    })\\n\\n    if(max >= 3) return \"Three of a Kind\"\\n    if(max >= 2) return \"Pair\"\\n\\n    return \"High Card\"\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3666666,
                "title": "easy-java-solution-using-hashmap-clean-code-11-lines-only",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    \\n    public String bestHand(int[] ranks, char[] suits) {\\n\\n        if(suits[0] == suits[1] && suits[1] == suits[2] && suits[2] == suits[3] && suits[3] == suits[4]) return \"Flush\";\\n\\n        Map<Integer, Integer> rankFreq = new HashMap<>();\\n        for (int num : ranks) {\\n            rankFreq.put(num, rankFreq.getOrDefault(num, 0) + 1);\\n        }\\n\\n        for (int rank : rankFreq.keySet()) {\\n            if (rankFreq.get(rank) >= 3) {\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for (int rank : rankFreq.keySet()) {\\n            if (rankFreq.get(rank) == 2) {\\n                return \"Pair\";\\n            }\\n        }\\n        // If none of the above conditions are met, return \"High Card\"\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\n    public String bestHand(int[] ranks, char[] suits) {\\n\\n        if(suits[0] == suits[1] && suits[1] == suits[2] && suits[2] == suits[3] && suits[3] == suits[4]) return \"Flush\";\\n\\n        Map<Integer, Integer> rankFreq = new HashMap<>();\\n        for (int num : ranks) {\\n            rankFreq.put(num, rankFreq.getOrDefault(num, 0) + 1);\\n        }\\n\\n        for (int rank : rankFreq.keySet()) {\\n            if (rankFreq.get(rank) >= 3) {\\n                return \"Three of a Kind\";\\n            }\\n        }\\n        for (int rank : rankFreq.keySet()) {\\n            if (rankFreq.get(rank) == 2) {\\n                return \"Pair\";\\n            }\\n        }\\n        // If none of the above conditions are met, return \"High Card\"\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3662390,
                "title": "simplest-solution-nnn",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        Arrays.sort(ranks);\\n        Arrays.sort(suits);\\n        int max1=0,max2=0,cnt1=1,cnt2=1;\\n        for(int i=1;i<5;i++){\\n            if(ranks[i]==ranks[i-1]){\\n                cnt1++;\\n            }else{\\n                max1=Math.max(max1,cnt1);\\n                cnt1=1;\\n            }\\n            if(suits[i]==suits[i-1]){\\n                cnt2++;\\n            }else{\\n                max2=Math.max(max2,cnt2);\\n                cnt2=1;\\n            }\\n        }\\n        max1=Math.max(max1,cnt1);\\n        max2=Math.max(max2,cnt2);\\n        if(max2==5)return \"Flush\";\\n        else if(max1>2)return \"Three of a Kind\";\\n        else if(max1>1)return \"Pair\";\\n        else return \"High Card\";\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        Arrays.sort(ranks);\\n        Arrays.sort(suits);\\n        int max1=0,max2=0,cnt1=1,cnt2=1;\\n        for(int i=1;i<5;i++){\\n            if(ranks[i]==ranks[i-1]){\\n                cnt1++;\\n            }else{\\n                max1=Math.max(max1,cnt1);\\n                cnt1=1;\\n            }\\n            if(suits[i]==suits[i-1]){\\n                cnt2++;\\n            }else{\\n                max2=Math.max(max2,cnt2);\\n                cnt2=1;\\n            }\\n        }\\n        max1=Math.max(max1,cnt1);\\n        max2=Math.max(max2,cnt2);\\n        if(max2==5)return \"Flush\";\\n        else if(max1>2)return \"Three of a Kind\";\\n        else if(max1>1)return \"Pair\";\\n        else return \"High Card\";\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3656955,
                "title": "a-simple-and-readable-solution-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nmake use of map\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing 2 maps one for \"ranks\" and the other for \"suits\". Check according to the maps if we have \"Flush\", \"Three of a Kind\", \"Pair\", \"High Card\".\\nStart to cheack from the best case, if it is false continue to the next best case after him.\\n\\n\\n# Complexity\\n- Time complexity: O(n) **[Beats 100%]**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n) **[Beats 93.33%]**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    memorySuits={};\\n    memoryRanks={};\\n\\n    for(let i=0;i<ranks.length;i++)\\n    {\\n        let keyRank=ranks[i];\\n        let keySuit=suits[i];\\n        if(memorySuits[keySuit] === undefined)\\n        {\\n            memorySuits[keySuit]=1;\\n        }\\n        else\\n        {\\n            memorySuits[keySuit]++;\\n        }\\n\\n        if(memoryRanks[keyRank] === undefined)\\n        {\\n           memoryRanks[keyRank]=1;\\n        }\\n        else\\n        {\\n            memoryRanks[keyRank]++;\\n        }\\n    }\\n  \\n    if(isFlush(memorySuits)=== true)\\n    {\\n        return \"Flush\";\\n    }\\n    else if(is3Kind(memoryRanks)=== true)\\n    {\\n        return \"Three of a Kind\";\\n    }\\n    else if(isPair(memoryRanks)=== true)\\n    {\\n        return \"Pair\";\\n    }\\n    else{\\n        return \"High Card\";\\n    }\\n    \\n};\\n\\nfunction isFlush(memory)\\n{\\n    for(let suit in memory)\\n    {\\n       if(memory[suit]>=5) \\n       {\\n           return true;\\n       }\\n    }\\n    return false;\\n}\\nfunction is3Kind(memory)\\n{\\n    for(let rank in memory)\\n    {\\n       if(memory[rank]>=3) \\n       {\\n           return true;\\n       }\\n    }\\n    return false;\\n}\\nfunction isPair(memory)\\n{\\n    for(let rank in memory)\\n    {\\n       if(memory[rank]===2) \\n       {\\n           return true;\\n       }\\n    }\\n    return false;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    memorySuits={};\\n    memoryRanks={};\\n\\n    for(let i=0;i<ranks.length;i++)\\n    {\\n        let keyRank=ranks[i];\\n        let keySuit=suits[i];\\n        if(memorySuits[keySuit] === undefined)\\n        {\\n            memorySuits[keySuit]=1;\\n        }\\n        else\\n        {\\n            memorySuits[keySuit]++;\\n        }\\n\\n        if(memoryRanks[keyRank] === undefined)\\n        {\\n           memoryRanks[keyRank]=1;\\n        }\\n        else\\n        {\\n            memoryRanks[keyRank]++;\\n        }\\n    }\\n  \\n    if(isFlush(memorySuits)=== true)\\n    {\\n        return \"Flush\";\\n    }\\n    else if(is3Kind(memoryRanks)=== true)\\n    {\\n        return \"Three of a Kind\";\\n    }\\n    else if(isPair(memoryRanks)=== true)\\n    {\\n        return \"Pair\";\\n    }\\n    else{\\n        return \"High Card\";\\n    }\\n    \\n};\\n\\nfunction isFlush(memory)\\n{\\n    for(let suit in memory)\\n    {\\n       if(memory[suit]>=5) \\n       {\\n           return true;\\n       }\\n    }\\n    return false;\\n}\\nfunction is3Kind(memory)\\n{\\n    for(let rank in memory)\\n    {\\n       if(memory[rank]>=3) \\n       {\\n           return true;\\n       }\\n    }\\n    return false;\\n}\\nfunction isPair(memory)\\n{\\n    for(let rank in memory)\\n    {\\n       if(memory[rank]===2) \\n       {\\n           return true;\\n       }\\n    }\\n    return false;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3651061,
                "title": "using-map-c-stl",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<char,int>mp;\\n        for(int i=0;i<suits.size();i++){\\n            mp[suits[i]]++;\\n        }\\n        if(mp[suits[0]]==suits.size())return \"Flush\";\\n\\n          map<int,int>mp1;\\n        for(int i=0;i<ranks.size();i++){\\n            mp1[ranks[i]]++;\\n        }\\n        for(auto it:mp1){\\n            if(it.second>=3)return \"Three of a Kind\";\\n        }\\n         for(auto it:mp1){\\n            if(it.second==2)return \"Pair\";\\n        }\\n        return \"High Card\";\\n \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<char,int>mp;\\n        for(int i=0;i<suits.size();i++){\\n            mp[suits[i]]++;\\n        }\\n        if(mp[suits[0]]==suits.size())return \"Flush\";\\n\\n          map<int,int>mp1;\\n        for(int i=0;i<ranks.size();i++){\\n            mp1[ranks[i]]++;\\n        }\\n        for(auto it:mp1){\\n            if(it.second>=3)return \"Three of a Kind\";\\n        }\\n         for(auto it:mp1){\\n            if(it.second==2)return \"Pair\";\\n        }\\n        return \"High Card\";\\n \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3641960,
                "title": "java-clean-100",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean isFlush(char[] suits) {\\n        char control = suits[0];\\n        for (char c: suits) {\\n            if (c != control) return false;\\n        }\\n        return true;\\n    }\\n    public String bestHand(int[] ranks, char[] suits) {\\n        if (isFlush(suits)) return \"Flush\";\\n\\n        int[] freq = new int[14];\\n        for (int i = 0; i < ranks.length; i++) {\\n            freq[ranks[i]]++;\\n        }\\n        boolean isPair = false;\\n        for (int el: freq) {\\n            if (el >= 3) return \"Three of a Kind\";\\n            if (el == 2) isPair = true;\\n        }\\n        if (isPair) return \"Pair\";\\n\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isFlush(char[] suits) {\\n        char control = suits[0];\\n        for (char c: suits) {\\n            if (c != control) return false;\\n        }\\n        return true;\\n    }\\n    public String bestHand(int[] ranks, char[] suits) {\\n        if (isFlush(suits)) return \"Flush\";\\n\\n        int[] freq = new int[14];\\n        for (int i = 0; i < ranks.length; i++) {\\n            freq[ranks[i]]++;\\n        }\\n        boolean isPair = false;\\n        for (int el: freq) {\\n            if (el >= 3) return \"Three of a Kind\";\\n            if (el == 2) isPair = true;\\n        }\\n        if (isPair) return \"Pair\";\\n\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3626584,
                "title": "my-simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        sort(suits.begin(),suits.end());\\n        sort(ranks.begin(),ranks.end());\\n        int cnt=1;string ans=\"\";int maxi=INT_MIN;\\n        for(int i=0;i<suits.size();i++){\\nwhile(i<suits.size()-1&&suits[i]==suits[i+1]){\\n    cnt++;i++;\\n}\\nif(cnt==5){\\n    ans=\"Flush\";\\n}cnt=1;\\n        }int cnt1=1;\\n        for(int i=0;i<ranks.size();i++){\\n            while(i<ranks.size()-1&&ranks[i]==ranks[i+1]){\\n                cnt1++;i++;\\n            }\\n            maxi=max(maxi,cnt1);\\n            cnt1=1;\\n        }\\nif(maxi>=3 &&ans==\"\"){\\n                ans=\"Three of a Kind\";\\n            }\\n            else if(maxi==2&&ans==\"\"){\\n                ans=\"Pair\";\\n            }\\n            if(ans==\"\"){\\n                ans=\"High Card\";\\n            }\\n            return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        sort(suits.begin(),suits.end());\\n        sort(ranks.begin(),ranks.end());\\n        int cnt=1;string ans=\"\";int maxi=INT_MIN;\\n        for(int i=0;i<suits.size();i++){\\nwhile(i<suits.size()-1&&suits[i]==suits[i+1]){\\n    cnt++;i++;\\n}\\nif(cnt==5){\\n    ans=\"Flush\";\\n}cnt=1;\\n        }int cnt1=1;\\n        for(int i=0;i<ranks.size();i++){\\n            while(i<ranks.size()-1&&ranks[i]==ranks[i+1]){\\n                cnt1++;i++;\\n            }\\n            maxi=max(maxi,cnt1);\\n            cnt1=1;\\n        }\\nif(maxi>=3 &&ans==\"\"){\\n                ans=\"Three of a Kind\";\\n            }\\n            else if(maxi==2&&ans==\"\"){\\n                ans=\"Pair\";\\n            }\\n            if(ans==\"\"){\\n                ans=\"High Card\";\\n            }\\n            return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3618093,
                "title": "c-t-c-beats-100",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        if(suits[0]==suits[1] && suits[0]==suits[2] && suits[0]==suits[3] && suits[0]==suits[4])\\n        return \"Flush\";\\n        int maxi = 0;\\n        unordered_map<int,int> mp;\\n        for(int i : ranks)\\n        {\\n            mp[i]++;\\n            maxi = max(maxi,mp[i]);\\n        }\\n        if(maxi >= 3)\\n        return \"Three of a Kind\";\\n        if(maxi == 2)\\n        return \"Pair\";  \\n        return \"High Card\";  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        if(suits[0]==suits[1] && suits[0]==suits[2] && suits[0]==suits[3] && suits[0]==suits[4])\\n        return \"Flush\";\\n        int maxi = 0;\\n        unordered_map<int,int> mp;\\n        for(int i : ranks)\\n        {\\n            mp[i]++;\\n            maxi = max(maxi,mp[i]);\\n        }\\n        if(maxi >= 3)\\n        return \"Three of a Kind\";\\n        if(maxi == 2)\\n        return \"Pair\";  \\n        return \"High Card\";  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3617210,
                "title": "python-easy-understand-5-lines",
                "content": "# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        counts = Counter(ranks)\\n        if len(set(suits)) == 1: return \"Flush\"\\n        if max(counts.values()) >= 3: return \"Three of a Kind\"\\n        if max(counts.values()) == 2: return \"Pair\"\\n        return \"High Card\"\\n```",
                "solutionTags": [
                    "Python3",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        counts = Counter(ranks)\\n        if len(set(suits)) == 1: return \"Flush\"\\n        if max(counts.values()) >= 3: return \"Three of a Kind\"\\n        if max(counts.values()) == 2: return \"Pair\"\\n        return \"High Card\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3584802,
                "title": "best-c-solution-with-hash-map-tc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<int,int> mp,np,op;\\n        vector<vector<int>>v;\\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            mp[ranks[i]]++;\\n        }\\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            op[suits[i]]++;\\n        }\\n        \\n        if(op.size()==1)\\n        {\\n            return \"Flush\";\\n        }\\n        for(auto i:mp)\\n        {\\n            if(i.second>=3)\\n            {\\n               return  \"Three of a Kind\";\\n            }\\n        }\\n        for(auto i:mp)\\n        {\\n            if(i.second==2)\\n            {\\n               return  \"Pair\";\\n            }\\n        }\\n       return \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<int,int> mp,np,op;\\n        vector<vector<int>>v;\\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            mp[ranks[i]]++;\\n        }\\n        for(int i=0;i<ranks.size();i++)\\n        {\\n            op[suits[i]]++;\\n        }\\n        \\n        if(op.size()==1)\\n        {\\n            return \"Flush\";\\n        }\\n        for(auto i:mp)\\n        {\\n            if(i.second>=3)\\n            {\\n               return  \"Three of a Kind\";\\n            }\\n        }\\n        for(auto i:mp)\\n        {\\n            if(i.second==2)\\n            {\\n               return  \"Pair\";\\n            }\\n        }\\n       return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575266,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int p = 0, q = 0, max = 0;\\n        for(int i = 1; i < suits.size(); i++)\\n        {\\n            if(suits[i]==suits[i-1])\\n            {\\n                p++;\\n                if(p==4)\\n                {\\n                    string s1 = \"Flush\";\\n                    return s1;\\n                }\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        sort(ranks.begin(), ranks.end());\\n        for(int j = 0; j < ranks.size() - 1; j++)\\n        {\\n            if(ranks[j]==ranks[j+1])\\n            {\\n                q++;\\n                if(q > max)\\n                    max = q;\\n                    cout<<max<<endl;\\n            }\\n            \\n            else\\n            {\\n                q = 0;\\n            }\\n        }\\n        \\n        if(max == 2 || max == 3)\\n        {\\n            string s2 = \"Three of a Kind\";\\n            return s2;\\n        }\\n        else if(max == 1)\\n        {\\n            string s3 = \"Pair\";\\n            return s3;\\n        }\\n        else if(max == 0)\\n        {\\n            string s4 = \"High Card\";\\n            return s4;\\n        }\\n    return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int p = 0, q = 0, max = 0;\\n        for(int i = 1; i < suits.size(); i++)\\n        {\\n            if(suits[i]==suits[i-1])\\n            {\\n                p++;\\n                if(p==4)\\n                {\\n                    string s1 = \"Flush\";\\n                    return s1;\\n                }\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        sort(ranks.begin(), ranks.end());\\n        for(int j = 0; j < ranks.size() - 1; j++)\\n        {\\n            if(ranks[j]==ranks[j+1])\\n            {\\n                q++;\\n                if(q > max)\\n                    max = q;\\n                    cout<<max<<endl;\\n            }\\n            \\n            else\\n            {\\n                q = 0;\\n            }\\n        }\\n        \\n        if(max == 2 || max == 3)\\n        {\\n            string s2 = \"Three of a Kind\";\\n            return s2;\\n        }\\n        else if(max == 1)\\n        {\\n            string s3 = \"Pair\";\\n            return s3;\\n        }\\n        else if(max == 0)\\n        {\\n            string s4 = \"High Card\";\\n            return s4;\\n        }\\n    return 0;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3562800,
                "title": "scala-pattern-matching",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nobject Solution {\\n    def bestHand(ranks: Array[Int], suits: Array[Char]): String = \\n        (ranks, suits) match {\\n            case (_, s) if (s.forall(_ == s.head)) => \"Flush\"\\n            case (r, _) => r.groupBy(identity).values.map(_.length).max match {\\n                case n if  n >= 3 => \"Three of a Kind\" \\n                case n if  n == 2 => \"Pair\"\\n                case _ => \"High Card\"\\n            }\\n        }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n    def bestHand(ranks: Array[Int], suits: Array[Char]): String = \\n        (ranks, suits) match {\\n            case (_, s) if (s.forall(_ == s.head)) => \"Flush\"\\n            case (r, _) => r.groupBy(identity).values.map(_.length).max match {\\n                case n if  n >= 3 => \"Three of a Kind\" \\n                case n if  n == 2 => \"Pair\"\\n                case _ => \"High Card\"\\n            }\\n        }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3561928,
                "title": "0ms-c-solution",
                "content": "# Intuition\\nThis problem involves keeping track of the occurences of values so I thought using an unordered_map would work well because of its $$O(1)$$ (constant) time complexities.\\n\\n# Approach\\nI initialized an unordered_map mapping ranks to their occurences (int, int)and did the same for suits (char, int). Then I iterated through ranks and suits simultaneously and kept track of the occurence of each value in my unordered_maps. From there I iterated through the vectors again, this time checking at each value the number of suits and ranks, determining the hand type accordingly.\\n\\n# Complexity\\n- Time complexity:\\nTechnically this may be $O(n)$ because we iterate through the rank and suit vectors, but in this problem they\\'re guaranteed to be of size 5, making it $O(1)$\\n\\n- Space complexity:\\nTechnically this may be $O(n)$ because we have an unordered_map for both the rank and suit vectors, but in this problem they\\'re guaranteed to be of size 5, making it $O(1)$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> r;\\n        unordered_map<char, int> s;\\n\\n        for (size_t i = 0; i < 5; ++i) {\\n            (r.find(ranks[i]) == r.end()) ? r[ranks[i]] = 1 : ++r[ranks[i]];\\n            (s.find(suits[i]) == s.end()) ? s[suits[i]] = 1 : ++s[suits[i]];\\n        }\\n\\n        string hand = \"High Card\";\\n\\n        for (size_t i = 0; i < 5; ++i) {\\n            if (s.at(suits[i]) == 5) {\\n                hand = \"Flush\";\\n                break;\\n            }\\n            else if (r.at(ranks[i]) >= 3) {\\n                hand = \"Three of a Kind\";\\n            }\\n            else if (r.at(ranks[i]) == 2 && hand != \"Three of a Kind\") {\\n                hand = \"Pair\";\\n            } \\n        }\\n\\n        return hand;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        unordered_map<int, int> r;\\n        unordered_map<char, int> s;\\n\\n        for (size_t i = 0; i < 5; ++i) {\\n            (r.find(ranks[i]) == r.end()) ? r[ranks[i]] = 1 : ++r[ranks[i]];\\n            (s.find(suits[i]) == s.end()) ? s[suits[i]] = 1 : ++s[suits[i]];\\n        }\\n\\n        string hand = \"High Card\";\\n\\n        for (size_t i = 0; i < 5; ++i) {\\n            if (s.at(suits[i]) == 5) {\\n                hand = \"Flush\";\\n                break;\\n            }\\n            else if (r.at(ranks[i]) >= 3) {\\n                hand = \"Three of a Kind\";\\n            }\\n            else if (r.at(ranks[i]) == 2 && hand != \"Three of a Kind\") {\\n                hand = \"Pair\";\\n            } \\n        }\\n\\n        return hand;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3557134,
                "title": "trivial-c-beats-100",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int rCount[13] = {}, sCount[4] = {};\\n        auto flush = false, three = false, two = false;\\n        for (auto i = 0; i < 5; ++i) {\\n            ++rCount[ranks[i] - 1];\\n            ++sCount[suits[i] - \\'a\\'];\\n            if (rCount[ranks[i] - 1] > 1) two = true;\\n            if (rCount[ranks[i] - 1] > 2) three = true;\\n            if (sCount[suits[i] - \\'a\\'] == 5) flush = true;\\n        }\\n        return flush ? \"Flush\" : three ? \"Three of a Kind\" : two ? \"Pair\" : \"High Card\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        int rCount[13] = {}, sCount[4] = {};\\n        auto flush = false, three = false, two = false;\\n        for (auto i = 0; i < 5; ++i) {\\n            ++rCount[ranks[i] - 1];\\n            ++sCount[suits[i] - \\'a\\'];\\n            if (rCount[ranks[i] - 1] > 1) two = true;\\n            if (rCount[ranks[i] - 1] > 2) three = true;\\n            if (sCount[suits[i] - \\'a\\'] == 5) flush = true;\\n        }\\n        return flush ? \"Flush\" : three ? \"Three of a Kind\" : two ? \"Pair\" : \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3542391,
                "title": "c-solution-using-hash-table-easy-to-understand",
                "content": "# Complexity\\n- Time complexity:\\nO(N)\\n- Space complexity:\\nO(N)\\n# Code\\n```\\npublic class Solution {\\n    public string BestHand(int[] ranks, char[] suits) {\\n        int sameSuit = 0,maxSameRank = 0;\\n        string res = \"High Card\";\\n        Dictionary<int,int> freq= new Dictionary<int,int>();\\n        for(int i = 0; i < suits.Length;i++){\\n            if(suits[0] == suits[i]) sameSuit++;\\n            if(!freq.ContainsKey(ranks[i])) freq.Add(ranks[i],0);\\n            freq[ranks[i]]++;\\n            maxSameRank = Math.Max(maxSameRank,freq[ranks[i]]);\\n        }\\n        if(sameSuit == 5) res = \"Flush\";\\n        else if(maxSameRank >= 3) res = \"Three of a Kind\";\\n        else if(maxSameRank == 2) res = \"Pair\";\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Hash Table"
                ],
                "code": "```\\npublic class Solution {\\n    public string BestHand(int[] ranks, char[] suits) {\\n        int sameSuit = 0,maxSameRank = 0;\\n        string res = \"High Card\";\\n        Dictionary<int,int> freq= new Dictionary<int,int>();\\n        for(int i = 0; i < suits.Length;i++){\\n            if(suits[0] == suits[i]) sameSuit++;\\n            if(!freq.ContainsKey(ranks[i])) freq.Add(ranks[i],0);\\n            freq[ranks[i]]++;\\n            maxSameRank = Math.Max(maxSameRank,freq[ranks[i]]);\\n        }\\n        if(sameSuit == 5) res = \"Flush\";\\n        else if(maxSameRank >= 3) res = \"Three of a Kind\";\\n        else if(maxSameRank == 2) res = \"Pair\";\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3515511,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-99-98-memory",
                "content": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int[] s = new int[101];\\n        //int[] arr = new int[14];\\n        int max = Integer.MIN_VALUE;\\n        for (int i = 0; i < 5; i++) {\\n            s[ranks[i]]++;\\n            s[suits[i]]++;\\n            if (s[suits[i]] == 5) {\\n                return \"Flush\";\\n            }\\n            if (s[ranks[i]] > max) {\\n                max = s[ranks[i]];\\n            }\\n        }\\n        return max >= 3 ? \"Three of a Kind\" : max == 2 ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        int[] s = new int[101];\\n        //int[] arr = new int[14];\\n        int max = Integer.MIN_VALUE;\\n        for (int i = 0; i < 5; i++) {\\n            s[ranks[i]]++;\\n            s[suits[i]]++;\\n            if (s[suits[i]] == 5) {\\n                return \"Flush\";\\n            }\\n            if (s[ranks[i]] > max) {\\n                max = s[ranks[i]];\\n            }\\n        }\\n        return max >= 3 ? \"Three of a Kind\" : max == 2 ? \"Pair\" : \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3504344,
                "title": "o-n-simple-java-solution",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBasic idea is to seperate each sub-problem into their own component and then make each condition in order of importance.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n\\n    public boolean isFlush(char[] suits) {\\n        int start = suits[0];\\n        for (int i: suits) {\\n            if (i != start) return false;\\n        }\\n        return true;\\n    }\\n    public boolean hasThree(int[] ranks) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        for (int i = 0; i < ranks.length; i++) {\\n            if (map.containsKey(ranks[i])) {\\n                map.put(ranks[i], map.get(ranks[i]) + 1);\\n            } else {\\n            map.put(ranks[i], 1);\\n            }\\n        }\\n        for (Integer i: map.values()) {\\n            if (i >= 3) return true;\\n        }\\n        return false;\\n    }\\n    public boolean hasPair(int[] ranks) {\\n        Set<Integer> set = new HashSet<>();\\n        for (int i = 0; i < ranks.length; i++) {\\n            if (set.contains(ranks[i])) return true;\\n            set.add(ranks[i]);\\n        }\\n        return false;\\n    }\\n    public String bestHand(int[] ranks, char[] suits) {\\n        if (isFlush(suits)) {\\n            return \"Flush\";\\n        } else if (hasThree(ranks)) {\\n            return \"Three of a Kind\";\\n        } else if (hasPair(ranks)) {\\n            return \"Pair\";\\n        } else {\\n        return \"High Card\";\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    public boolean isFlush(char[] suits) {\\n        int start = suits[0];\\n        for (int i: suits) {\\n            if (i != start) return false;\\n        }\\n        return true;\\n    }\\n    public boolean hasThree(int[] ranks) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        for (int i = 0; i < ranks.length; i++) {\\n            if (map.containsKey(ranks[i])) {\\n                map.put(ranks[i], map.get(ranks[i]) + 1);\\n            } else {\\n            map.put(ranks[i], 1);\\n            }\\n        }\\n        for (Integer i: map.values()) {\\n            if (i >= 3) return true;\\n        }\\n        return false;\\n    }\\n    public boolean hasPair(int[] ranks) {\\n        Set<Integer> set = new HashSet<>();\\n        for (int i = 0; i < ranks.length; i++) {\\n            if (set.contains(ranks[i])) return true;\\n            set.add(ranks[i]);\\n        }\\n        return false;\\n    }\\n    public String bestHand(int[] ranks, char[] suits) {\\n        if (isFlush(suits)) {\\n            return \"Flush\";\\n        } else if (hasThree(ranks)) {\\n            return \"Three of a Kind\";\\n        } else if (hasPair(ranks)) {\\n            return \"Pair\";\\n        } else {\\n        return \"High Card\";\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3493559,
                "title": "easy-understandable-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        Set<Character> set = new HashSet<>();\\n        Map<Integer,Integer> map = new HashMap<>();\\n        int max = 0;\\n        for(char c:suits){\\n            set.add(c);\\n        }\\n        if(set.size() == 1){\\n            return \"Flush\";\\n        }\\n        for(int a:ranks){\\n            map.put(a, map.getOrDefault(a,0)+1);\\n        }\\n        for(int key:map.keySet()){\\n            if(max<map.get(key)){\\n                max = map.get(key);\\n            }\\n        }\\n        if(max >= 3){\\n            return \"Three of a Kind\";\\n        }\\n        if(max == 2){\\n            return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        Set<Character> set = new HashSet<>();\\n        Map<Integer,Integer> map = new HashMap<>();\\n        int max = 0;\\n        for(char c:suits){\\n            set.add(c);\\n        }\\n        if(set.size() == 1){\\n            return \"Flush\";\\n        }\\n        for(int a:ranks){\\n            map.put(a, map.getOrDefault(a,0)+1);\\n        }\\n        for(int key:map.keySet()){\\n            if(max<map.get(key)){\\n                max = map.get(key);\\n            }\\n        }\\n        if(max >= 3){\\n            return \"Three of a Kind\";\\n        }\\n        if(max == 2){\\n            return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3480716,
                "title": "easy-to-understand-solution-swift",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        guard Set(suits).count != 1 else { return \"Flush\" }\\n        guard Set(ranks).count != ranks.count else { return \"High Card\" }\\n    \\n        let dic = ranks.reduce(into: [:]) { $0[$1, default: 0] += 1 }\\n    \\n        return dic.values.max()! >= 3 ? \"Three of a Kind\" : \"Pair\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\\n        guard Set(suits).count != 1 else { return \"Flush\" }\\n        guard Set(ranks).count != ranks.count else { return \"High Card\" }\\n    \\n        let dic = ranks.reduce(into: [:]) { $0[$1, default: 0] += 1 }\\n    \\n        return dic.values.max()! >= 3 ? \"Three of a Kind\" : \"Pair\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3464309,
                "title": "java-two-hashmaps-easy-to-follow-ac",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        String answer=\"High Card\";\\n        HashMap<Integer, Integer> map1=new HashMap();\\n        HashMap<Character, Integer> map2=new HashMap();\\n        for(int i=0;i<ranks.length;i++){\\n            map1.put(ranks[i], map1.getOrDefault(ranks[i],0)+1);\\n            map2.put(suits[i], map2.getOrDefault(suits[i],0)+1);\\n        }\\n        for(int i=0;i<suits.length;i++){\\n            if(map2.get(suits[i])==5){\\n                return \"Flush\";\\n            }\\n            else if(map1.get(ranks[i])>=3 && !answer.equals(\"Flush\")){\\n                return \"Three of a Kind\";\\n            }\\n            else if(map1.get(ranks[i])==2){\\n                answer=\"Pair\";\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        String answer=\"High Card\";\\n        HashMap<Integer, Integer> map1=new HashMap();\\n        HashMap<Character, Integer> map2=new HashMap();\\n        for(int i=0;i<ranks.length;i++){\\n            map1.put(ranks[i], map1.getOrDefault(ranks[i],0)+1);\\n            map2.put(suits[i], map2.getOrDefault(suits[i],0)+1);\\n        }\\n        for(int i=0;i<suits.length;i++){\\n            if(map2.get(suits[i])==5){\\n                return \"Flush\";\\n            }\\n            else if(map1.get(ranks[i])>=3 && !answer.equals(\"Flush\")){\\n                return \"Three of a Kind\";\\n            }\\n            else if(map1.get(ranks[i])==2){\\n                answer=\"Pair\";\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3451459,
                "title": "best-poker-hand-easiest-with-c-in-0ms-runtime",
                "content": "\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<int, int>mp;\\n        if(count(suits.begin(), suits.end(), suits[0]) == 5)\\n            return \"Flush\";\\n        for(int i:ranks)\\n            mp[i]++;\\n        int ct=0;\\n        for(auto [k,v]:mp)\\n            ct = max(ct, v);\\n        if(ct >= 3)\\n            return \"Three of a Kind\";\\n        if(ct >= 2)\\n            return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```\\nPlease UPVOTE if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n        map<int, int>mp;\\n        if(count(suits.begin(), suits.end(), suits[0]) == 5)\\n            return \"Flush\";\\n        for(int i:ranks)\\n            mp[i]++;\\n        int ct=0;\\n        for(auto [k,v]:mp)\\n            ct = max(ct, v);\\n        if(ct >= 3)\\n            return \"Three of a Kind\";\\n        if(ct >= 2)\\n            return \"Pair\";\\n        return \"High Card\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446523,
                "title": "one-line",
                "content": "# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        return \\'Flush\\' if len(set(suits))==1 else \\'Three of a Kind\\' if True in [ranks.count(i)>=3 for i in set(ranks)] else \\'Pair\\' if len(set(ranks))<=4 else \\'High Card\\'\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        return \\'Flush\\' if len(set(suits))==1 else \\'Three of a Kind\\' if True in [ranks.count(i)>=3 for i in set(ranks)] else \\'Pair\\' if len(set(ranks))<=4 else \\'High Card\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445519,
                "title": "python-the-rest-of-the-hands-too",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI was almost excited for a neat, but very simple little problem. Then I realized it only presented 4 of the 9 viable poker hands, and was overly simple. A good very very beginners problem, but a little boring. Then again a good problem for \"intermediate\" programmers who are too eager to jump into coding and dont bother to read or fully think through a prompt: a lesson to \"code to the brief.\"\\n\\nI solved it and wanted to quickly write the rest of the checks just for fun\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse two frequency maps and have some minor flags for various \"hand components\" like \"is it a straight, flush, one of the special kinds of hands...\"\\n\\nNote that, according to Hoyle, a 5 high straight with an Ace as low card IS a valid hand. It is the only time an ace is counted as a low card. I check this special case manually, and reasign aces rank 14 as opposed to one. This allows a simle sum to check for 5 card sequences (Straights) and particularly the \"Roayal\" status, as they are just relative or fixed sums. Its also necessary if you actually wanted to return the hand: \"Four of a Kind: Aces\" but I got bored and decided that was too beyond what was being asked to bother. \\n\\n# Code\\n```\\n#Order: \\n# Royal Flush > Straight Flush > 4 of a Kind > Full House > Flush > Straight > 3 > 2 > High Card\\n\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        #lets change all 1s to 14s as ace is high in every other case, and manually check for 5 high straight\\n        ranks = [x if x != 1 else 14 for x in ranks]\\n        hranks = collections.Counter(ranks)\\n        hsuits = collections.Counter(suits)\\n\\n        \\n        flush = len(hsuits) == 1\\n        royal = sum(ranks) == 60\\n        straight = royal or sum(ranks) == min(ranks)*5 + 10 or set(ranks) == {14,2,3,4,5}\\n        counts = sorted(hranks.values())\\n\\n        # if royal and flush:\\n        #     return \"Royal Flush\"\\n        # if straight and flush:\\n        #     return \"Straight Flush\"\\n        # if counts[-1] == 4:\\n        #     return \"Four of a Kind\"\\n        # This SHOULD work even for other games like Texas Hold\\'em which have hands greater than 5\\n        # if counts[-2] == 2 and counts[-1] == 3:\\n        #     return \"Full House\"\\n        if flush:\\n            return \"Flush\"\\n        # if straight:\\n        #     return \"Straight\"\\n        # if counts[-1] == 3:\\n        if counts[-1] > 2:\\n            return \"Three of a Kind\"\\n        if counts[-1] == 2:\\n            return \"Pair\"\\n        else: \\n            return \"High Card\" \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n#Order: \\n# Royal Flush > Straight Flush > 4 of a Kind > Full House > Flush > Straight > 3 > 2 > High Card\\n\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        #lets change all 1s to 14s as ace is high in every other case, and manually check for 5 high straight\\n        ranks = [x if x != 1 else 14 for x in ranks]\\n        hranks = collections.Counter(ranks)\\n        hsuits = collections.Counter(suits)\\n\\n        \\n        flush = len(hsuits) == 1\\n        royal = sum(ranks) == 60\\n        straight = royal or sum(ranks) == min(ranks)*5 + 10 or set(ranks) == {14,2,3,4,5}\\n        counts = sorted(hranks.values())\\n\\n        # if royal and flush:\\n        #     return \"Royal Flush\"\\n        # if straight and flush:\\n        #     return \"Straight Flush\"\\n        # if counts[-1] == 4:\\n        #     return \"Four of a Kind\"\\n        # This SHOULD work even for other games like Texas Hold\\'em which have hands greater than 5\\n        # if counts[-2] == 2 and counts[-1] == 3:\\n        #     return \"Full House\"\\n        if flush:\\n            return \"Flush\"\\n        # if straight:\\n        #     return \"Straight\"\\n        # if counts[-1] == 3:\\n        if counts[-1] > 2:\\n            return \"Three of a Kind\"\\n        if counts[-1] == 2:\\n            return \"Pair\"\\n        else: \\n            return \"High Card\" \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3444175,
                "title": "hashmap-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        int flushNum = 1;\\n        for(int i=1; i<suits.length; i++){\\n            if(suits[i] == suits[i-1]){\\n                flushNum++;\\n            }\\n        }\\n        if(flushNum==5){\\n            return \"Flush\";\\n        }\\n\\n        HashMap<Integer,Integer> map = new HashMap<>();\\n        for(int i=0; i<ranks.length; i++){\\n            if(!map.containsKey(ranks[i])){\\n                map.put(ranks[i],1);\\n            }else{\\n                map.put(ranks[i],map.get(ranks[i])+1);\\n            }\\n        }\\n\\n        System.out.println(map);\\n        int temp3 = 0;\\n        int temp2 = 0;\\n        for(Map.Entry<Integer,Integer> entry : map.entrySet()){\\n            if(entry.getValue()>=3){\\n                temp3 = 3;\\n            }else if(entry.getValue()==2){\\n                temp2 = 2;\\n               \\n            }\\n        }\\n\\n        if(temp3 ==3){\\n            return \"Three of a Kind\";\\n        } \\n        else if(temp2 == 2 && temp3!=3){\\n             return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String bestHand(int[] ranks, char[] suits) {\\n        \\n        int flushNum = 1;\\n        for(int i=1; i<suits.length; i++){\\n            if(suits[i] == suits[i-1]){\\n                flushNum++;\\n            }\\n        }\\n        if(flushNum==5){\\n            return \"Flush\";\\n        }\\n\\n        HashMap<Integer,Integer> map = new HashMap<>();\\n        for(int i=0; i<ranks.length; i++){\\n            if(!map.containsKey(ranks[i])){\\n                map.put(ranks[i],1);\\n            }else{\\n                map.put(ranks[i],map.get(ranks[i])+1);\\n            }\\n        }\\n\\n        System.out.println(map);\\n        int temp3 = 0;\\n        int temp2 = 0;\\n        for(Map.Entry<Integer,Integer> entry : map.entrySet()){\\n            if(entry.getValue()>=3){\\n                temp3 = 3;\\n            }else if(entry.getValue()==2){\\n                temp2 = 2;\\n               \\n            }\\n        }\\n\\n        if(temp3 ==3){\\n            return \"Three of a Kind\";\\n        } \\n        else if(temp2 == 2 && temp3!=3){\\n             return \"Pair\";\\n        }\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3432286,
                "title": "clean-code-using-dict-and-set-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        # ceictco\\n        def flushDetected():\\n            return len(set(suits)) == 1\\n        def ThreeOfAKindDetected():\\n            return maxNumberDuplicates() >= 3\\n        def PairDetected():\\n            return maxNumberDuplicates() >= 2\\n        def maxNumberDuplicates():\\n            dd = defaultdict(int)\\n            for rank in ranks:\\n                dd[rank] += 1 \\n            return max(dd.values())\\n        if flushDetected():\\n            return \"Flush\"\\n        elif ThreeOfAKindDetected():\\n            return \"Three of a Kind\"\\n        elif PairDetected():\\n            return \"Pair\"\\n        else:\\n            return \"High Card\" \\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        # ceictco\\n        def flushDetected():\\n            return len(set(suits)) == 1\\n        def ThreeOfAKindDetected():\\n            return maxNumberDuplicates() >= 3\\n        def PairDetected():\\n            return maxNumberDuplicates() >= 2\\n        def maxNumberDuplicates():\\n            dd = defaultdict(int)\\n            for rank in ranks:\\n                dd[rank] += 1 \\n            return max(dd.values())\\n        if flushDetected():\\n            return \"Flush\"\\n        elif ThreeOfAKindDetected():\\n            return \"Three of a Kind\"\\n        elif PairDetected():\\n            return \"Pair\"\\n        else:\\n            return \"High Card\" \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423961,
                "title": "simple-python",
                "content": "# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n\\n        c1=Counter(ranks)\\n        c2=Counter(suits)\\n        for k,v in c2.items():\\n            if v==len(suits):return \"Flush\"\\n\\n        for k, v in reversed(sorted(c1.items(), key=lambda x: x[1])):\\n            if v>=3:\\n                return \"Three of a Kind\"\\n            elif v==2:\\n                return \"Pair\" \\n            \\n        return \"High Card\"\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n\\n        c1=Counter(ranks)\\n        c2=Counter(suits)\\n        for k,v in c2.items():\\n            if v==len(suits):return \"Flush\"\\n\\n        for k, v in reversed(sorted(c1.items(), key=lambda x: x[1])):\\n            if v>=3:\\n                return \"Three of a Kind\"\\n            elif v==2:\\n                return \"Pair\" \\n            \\n        return \"High Card\"\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3411568,
                "title": "easy-understanding-solution-with-set-and-hash-table-in-javascript",
                "content": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    let set = new Set(suits);\\n    if(set.size === 1 ) return \"Flush\"\\n    let hash = {}\\n    for(let i=0 ; i<ranks.length;i++){\\n        if(hash[ranks[i]])hash[ranks[i]]++\\n        else hash[ranks[i]]=1\\n    }\\n    \\n    let max = Math.max(...Object.values(hash))\\n    if(max>=3) return \"Three of a Kind\"\\n    if(max === 2 ) return \"Pair\"\\n    return \"High Card\"\\n};",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table",
                    "Ordered Set"
                ],
                "code": "```\\n/**\\n * @param {number[]} ranks\\n * @param {character[]} suits\\n * @return {string}\\n */\\nvar bestHand = function(ranks, suits) {\\n    let set = new Set(suits);\\n    if(set.size === 1 ) return \"Flush\"\\n    let hash = {}\\n    for(let i=0 ; i<ranks.length;i++){\\n        if(hash[ranks[i]])hash[ranks[i]]++\\n        else hash[ranks[i]]=1\\n    }\\n    \\n    let max = Math.max(...Object.values(hash))\\n    if(max>=3) return \"Three of a Kind\"\\n    if(max === 2 ) return \"Pair\"\\n    return \"High Card\"\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 3407705,
                "title": "c-dictionary-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public string BestHand(int[] ranks, char[] suits) {\\n        Dictionary<int, int> rankDic = new Dictionary<int, int>();\\n        Dictionary<char, int> suitDic = new Dictionary<char, int>();\\n\\n        for (int i = 0; i < ranks.Length; i++)\\n        {\\n            if (rankDic.ContainsKey(ranks[i]))\\n                rankDic[ranks[i]] += 1;\\n            else\\n                rankDic[ranks[i]] = 1;\\n\\n            if (suitDic.ContainsKey(suits[i]))\\n                suitDic[suits[i]] += 1;\\n            else\\n                suitDic[suits[i]] = 1;\\n        }\\n\\n        int mostCommonRank = rankDic.Values.Max();\\n        int mostCommonSuit = suitDic.Values.Max();\\n\\n        if (mostCommonSuit == 5)\\n            return \"Flush\";\\n        else if (mostCommonRank >= 3)\\n            return \"Three of a Kind\";\\n        else if (mostCommonRank == 2)\\n            return \"Pair\";\\n        else\\n            return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public string BestHand(int[] ranks, char[] suits) {\\n        Dictionary<int, int> rankDic = new Dictionary<int, int>();\\n        Dictionary<char, int> suitDic = new Dictionary<char, int>();\\n\\n        for (int i = 0; i < ranks.Length; i++)\\n        {\\n            if (rankDic.ContainsKey(ranks[i]))\\n                rankDic[ranks[i]] += 1;\\n            else\\n                rankDic[ranks[i]] = 1;\\n\\n            if (suitDic.ContainsKey(suits[i]))\\n                suitDic[suits[i]] += 1;\\n            else\\n                suitDic[suits[i]] = 1;\\n        }\\n\\n        int mostCommonRank = rankDic.Values.Max();\\n        int mostCommonSuit = suitDic.Values.Max();\\n\\n        if (mostCommonSuit == 5)\\n            return \"Flush\";\\n        else if (mostCommonRank >= 3)\\n            return \"Three of a Kind\";\\n        else if (mostCommonRank == 2)\\n            return \"Pair\";\\n        else\\n            return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3386371,
                "title": "very-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits)) == 1:\\n            return \\'Flush\\'\\n\\n        arr = Counter(ranks)\\n        max_val = max(arr.values())\\n\\n        if max_val >= 3:\\n            return \\'Three of a Kind\\'\\n        if max_val >= 2:\\n            return \\'Pair\\'\\n        else:\\n            return \\'High Card\\'\\n \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:\\n        if len(set(suits)) == 1:\\n            return \\'Flush\\'\\n\\n        arr = Counter(ranks)\\n        max_val = max(arr.values())\\n\\n        if max_val >= 3:\\n            return \\'Three of a Kind\\'\\n        if max_val >= 2:\\n            return \\'Pair\\'\\n        else:\\n            return \\'High Card\\'\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3385387,
                "title": "jitna-bola-utna-karo",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nchar * bestHand(int* ranks, int ranksSize, char* suits, int suitsSize){\\n    for(int i=0; i<suitsSize; i++){\\n        for(int j=i+1; j<suitsSize; j++){\\n            for(int k = j+1; k<suitsSize; k++){\\n                for(int l = k+1; l<suitsSize; l++){\\n                    for(int m = l+1; m<suitsSize; m++){\\n                        if(suits[i] == suits[j] && suits[i] == suits[k] && suits[i] == suits[l] && suits[i] == suits[m]){\\n                            return \"Flush\";\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    for(int i = 0; i<ranksSize; i++){\\n        for(int j = i+1; j<ranksSize; j++){\\n            for(int k = j+1; k<ranksSize; k++){\\n                if(ranks[i] == ranks[j] && ranks[i] == ranks[k]){\\n                    return \"Three of a Kind\";\\n                }\\n            }\\n        }\\n    }\\n\\n\\n    for(int i = 0; i<ranksSize; i++){\\n        for(int j = i+1; j<ranksSize; j++){\\n            if(ranks[i] == ranks[j]){\\n                return \"Pair\";\\n            }\\n        }\\n    }\\n\\n    return \"High Card\";\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C"
                ],
                "code": "```\\nchar * bestHand(int* ranks, int ranksSize, char* suits, int suitsSize){\\n    for(int i=0; i<suitsSize; i++){\\n        for(int j=i+1; j<suitsSize; j++){\\n            for(int k = j+1; k<suitsSize; k++){\\n                for(int l = k+1; l<suitsSize; l++){\\n                    for(int m = l+1; m<suitsSize; m++){\\n                        if(suits[i] == suits[j] && suits[i] == suits[k] && suits[i] == suits[l] && suits[i] == suits[m]){\\n                            return \"Flush\";\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    for(int i = 0; i<ranksSize; i++){\\n        for(int j = i+1; j<ranksSize; j++){\\n            for(int k = j+1; k<ranksSize; k++){\\n                if(ranks[i] == ranks[j] && ranks[i] == ranks[k]){\\n                    return \"Three of a Kind\";\\n                }\\n            }\\n        }\\n    }\\n\\n\\n    for(int i = 0; i<ranksSize; i++){\\n        for(int j = i+1; j<ranksSize; j++){\\n            if(ranks[i] == ranks[j]){\\n                return \"Pair\";\\n            }\\n        }\\n    }\\n\\n    return \"High Card\";\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3377923,
                "title": "java-simple-solution-counting-100-faster",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    \\n    public String bestHand(int[] ranks, char[] suits) {\\n        int suit = 0;\\n        char ch = suits[0];\\n        int maxRankCount = 0;\\n        int[] arr = new int[14];\\n        for (int i = 0; i < ranks.length; i++) {\\n            arr[ranks[i]]++;\\n            maxRankCount = Math.max(maxRankCount, arr[ranks[i]]);\\n\\n            if (suits[i] == ch) {\\n                suit++;\\n            }\\n        }\\n\\n        if (suit == 5) {\\n            return \"Flush\";\\n        } else if (maxRankCount >= 3) {\\n            return \"Three of a Kind\";\\n        } else if (maxRankCount == 2) {\\n            return \"Pair\";\\n        }\\n\\n        return \"High Card\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    \\n    public String bestHand(int[] ranks, char[] suits) {\\n        int suit = 0;\\n        char ch = suits[0];\\n        int maxRankCount = 0;\\n        int[] arr = new int[14];\\n        for (int i = 0; i < ranks.length; i++) {\\n            arr[ranks[i]]++;\\n            maxRankCount = Math.max(maxRankCount, arr[ranks[i]]);\\n\\n            if (suits[i] == ch) {\\n                suit++;\\n            }\\n        }\\n\\n        if (suit == 5) {\\n            return \"Flush\";\\n        } else if (maxRankCount >= 3) {\\n            return \"Three of a Kind\";\\n        } else if (maxRankCount == 2) {\\n            return \"Pair\";\\n        }\\n\\n        return \"High Card\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 2067697,
                "content": [
                    {
                        "username": "r7ma",
                        "content": "where are straight and full house??"
                    },
                    {
                        "username": "20credi",
                        "content": "ROYAL FLUSHHHHH"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "\\u540C\\u82B1\\u6253\\u5F97\\u904E full house \\u55CE"
                    },
                    {
                        "username": "Paridhi77",
                        "content": "one test case not passing\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n       sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=0;i<ranks.size();i++){\\n            for(int j=0;j<suits.size();j++){\\n               if(suits[j]==suits[j+1] && suits[j+1]==suits[j+2] && suits[j+2]==suits[j+3] && suits[j+3]==suits[j+4]){\\n                   return \"Flush\";\\n               }\\n  else if(ranks[i]==ranks[i+1] && ranks[i+1]==ranks[i+2] ){\\n      return \"Three of a Kind\";\\n  }\\n  else if(ranks[i]==ranks[i+1]){\\n   return \"Pair\";\\n  }\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n};"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Ah yes, the classic exactly 4 types of poker hands. "
                    },
                    {
                        "username": "kiam_uditya",
                        "content": "just used 2 hashmaps for each of the two.\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution \\nMy solution Link : https://leetcode.com/problems/best-poker-hand/solutions/3206924/c-easy-and-simple-solution/\\ndon\\'t forgot to upvote it . \\n"
                    }
                ]
            },
            {
                "id": 2047722,
                "content": [
                    {
                        "username": "r7ma",
                        "content": "where are straight and full house??"
                    },
                    {
                        "username": "20credi",
                        "content": "ROYAL FLUSHHHHH"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "\\u540C\\u82B1\\u6253\\u5F97\\u904E full house \\u55CE"
                    },
                    {
                        "username": "Paridhi77",
                        "content": "one test case not passing\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n       sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=0;i<ranks.size();i++){\\n            for(int j=0;j<suits.size();j++){\\n               if(suits[j]==suits[j+1] && suits[j+1]==suits[j+2] && suits[j+2]==suits[j+3] && suits[j+3]==suits[j+4]){\\n                   return \"Flush\";\\n               }\\n  else if(ranks[i]==ranks[i+1] && ranks[i+1]==ranks[i+2] ){\\n      return \"Three of a Kind\";\\n  }\\n  else if(ranks[i]==ranks[i+1]){\\n   return \"Pair\";\\n  }\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n};"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Ah yes, the classic exactly 4 types of poker hands. "
                    },
                    {
                        "username": "kiam_uditya",
                        "content": "just used 2 hashmaps for each of the two.\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution \\nMy solution Link : https://leetcode.com/problems/best-poker-hand/solutions/3206924/c-easy-and-simple-solution/\\ndon\\'t forgot to upvote it . \\n"
                    }
                ]
            },
            {
                "id": 1986484,
                "content": [
                    {
                        "username": "r7ma",
                        "content": "where are straight and full house??"
                    },
                    {
                        "username": "20credi",
                        "content": "ROYAL FLUSHHHHH"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "\\u540C\\u82B1\\u6253\\u5F97\\u904E full house \\u55CE"
                    },
                    {
                        "username": "Paridhi77",
                        "content": "one test case not passing\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n       sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=0;i<ranks.size();i++){\\n            for(int j=0;j<suits.size();j++){\\n               if(suits[j]==suits[j+1] && suits[j+1]==suits[j+2] && suits[j+2]==suits[j+3] && suits[j+3]==suits[j+4]){\\n                   return \"Flush\";\\n               }\\n  else if(ranks[i]==ranks[i+1] && ranks[i+1]==ranks[i+2] ){\\n      return \"Three of a Kind\";\\n  }\\n  else if(ranks[i]==ranks[i+1]){\\n   return \"Pair\";\\n  }\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n};"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Ah yes, the classic exactly 4 types of poker hands. "
                    },
                    {
                        "username": "kiam_uditya",
                        "content": "just used 2 hashmaps for each of the two.\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution \\nMy solution Link : https://leetcode.com/problems/best-poker-hand/solutions/3206924/c-easy-and-simple-solution/\\ndon\\'t forgot to upvote it . \\n"
                    }
                ]
            },
            {
                "id": 1946359,
                "content": [
                    {
                        "username": "r7ma",
                        "content": "where are straight and full house??"
                    },
                    {
                        "username": "20credi",
                        "content": "ROYAL FLUSHHHHH"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "\\u540C\\u82B1\\u6253\\u5F97\\u904E full house \\u55CE"
                    },
                    {
                        "username": "Paridhi77",
                        "content": "one test case not passing\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n       sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=0;i<ranks.size();i++){\\n            for(int j=0;j<suits.size();j++){\\n               if(suits[j]==suits[j+1] && suits[j+1]==suits[j+2] && suits[j+2]==suits[j+3] && suits[j+3]==suits[j+4]){\\n                   return \"Flush\";\\n               }\\n  else if(ranks[i]==ranks[i+1] && ranks[i+1]==ranks[i+2] ){\\n      return \"Three of a Kind\";\\n  }\\n  else if(ranks[i]==ranks[i+1]){\\n   return \"Pair\";\\n  }\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n};"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Ah yes, the classic exactly 4 types of poker hands. "
                    },
                    {
                        "username": "kiam_uditya",
                        "content": "just used 2 hashmaps for each of the two.\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution \\nMy solution Link : https://leetcode.com/problems/best-poker-hand/solutions/3206924/c-easy-and-simple-solution/\\ndon\\'t forgot to upvote it . \\n"
                    }
                ]
            },
            {
                "id": 1871248,
                "content": [
                    {
                        "username": "r7ma",
                        "content": "where are straight and full house??"
                    },
                    {
                        "username": "20credi",
                        "content": "ROYAL FLUSHHHHH"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "\\u540C\\u82B1\\u6253\\u5F97\\u904E full house \\u55CE"
                    },
                    {
                        "username": "Paridhi77",
                        "content": "one test case not passing\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n       sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=0;i<ranks.size();i++){\\n            for(int j=0;j<suits.size();j++){\\n               if(suits[j]==suits[j+1] && suits[j+1]==suits[j+2] && suits[j+2]==suits[j+3] && suits[j+3]==suits[j+4]){\\n                   return \"Flush\";\\n               }\\n  else if(ranks[i]==ranks[i+1] && ranks[i+1]==ranks[i+2] ){\\n      return \"Three of a Kind\";\\n  }\\n  else if(ranks[i]==ranks[i+1]){\\n   return \"Pair\";\\n  }\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n};"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Ah yes, the classic exactly 4 types of poker hands. "
                    },
                    {
                        "username": "kiam_uditya",
                        "content": "just used 2 hashmaps for each of the two.\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution \\nMy solution Link : https://leetcode.com/problems/best-poker-hand/solutions/3206924/c-easy-and-simple-solution/\\ndon\\'t forgot to upvote it . \\n"
                    }
                ]
            },
            {
                "id": 1833385,
                "content": [
                    {
                        "username": "r7ma",
                        "content": "where are straight and full house??"
                    },
                    {
                        "username": "20credi",
                        "content": "ROYAL FLUSHHHHH"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "\\u540C\\u82B1\\u6253\\u5F97\\u904E full house \\u55CE"
                    },
                    {
                        "username": "Paridhi77",
                        "content": "one test case not passing\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n       sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=0;i<ranks.size();i++){\\n            for(int j=0;j<suits.size();j++){\\n               if(suits[j]==suits[j+1] && suits[j+1]==suits[j+2] && suits[j+2]==suits[j+3] && suits[j+3]==suits[j+4]){\\n                   return \"Flush\";\\n               }\\n  else if(ranks[i]==ranks[i+1] && ranks[i+1]==ranks[i+2] ){\\n      return \"Three of a Kind\";\\n  }\\n  else if(ranks[i]==ranks[i+1]){\\n   return \"Pair\";\\n  }\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n};"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Ah yes, the classic exactly 4 types of poker hands. "
                    },
                    {
                        "username": "kiam_uditya",
                        "content": "just used 2 hashmaps for each of the two.\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution \\nMy solution Link : https://leetcode.com/problems/best-poker-hand/solutions/3206924/c-easy-and-simple-solution/\\ndon\\'t forgot to upvote it . \\n"
                    }
                ]
            },
            {
                "id": 1807363,
                "content": [
                    {
                        "username": "r7ma",
                        "content": "where are straight and full house??"
                    },
                    {
                        "username": "20credi",
                        "content": "ROYAL FLUSHHHHH"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "\\u540C\\u82B1\\u6253\\u5F97\\u904E full house \\u55CE"
                    },
                    {
                        "username": "Paridhi77",
                        "content": "one test case not passing\\nclass Solution {\\npublic:\\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\\n       sort(ranks.begin(),ranks.end());\\n        sort(suits.begin(),suits.end());\\n        for(int i=0;i<ranks.size();i++){\\n            for(int j=0;j<suits.size();j++){\\n               if(suits[j]==suits[j+1] && suits[j+1]==suits[j+2] && suits[j+2]==suits[j+3] && suits[j+3]==suits[j+4]){\\n                   return \"Flush\";\\n               }\\n  else if(ranks[i]==ranks[i+1] && ranks[i+1]==ranks[i+2] ){\\n      return \"Three of a Kind\";\\n  }\\n  else if(ranks[i]==ranks[i+1]){\\n   return \"Pair\";\\n  }\\n            }\\n        }\\n        return \"High Card\";\\n    }\\n};"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Ah yes, the classic exactly 4 types of poker hands. "
                    },
                    {
                        "username": "kiam_uditya",
                        "content": "just used 2 hashmaps for each of the two.\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution \\nMy solution Link : https://leetcode.com/problems/best-poker-hand/solutions/3206924/c-easy-and-simple-solution/\\ndon\\'t forgot to upvote it . \\n"
                    }
                ]
            }
        ]
    }
]