[
    {
        "title": "First Letter to Appear Twice",
        "question_content": "Given a string s consisting of lowercase English letters, return the first letter to appear twice.\nNote:\n\n\tA letter a appears twice before another letter b if the second occurrence of a is before the second occurrence of b.\n\ts will contain at least one letter that appears twice.\n\n&nbsp;\nExample 1:\n\nInput: s = \"abccbaacz\"\nOutput: \"c\"\nExplanation:\nThe letter 'a' appears on the indexes 0, 5 and 6.\nThe letter 'b' appears on the indexes 1 and 4.\nThe letter 'c' appears on the indexes 2, 3 and 7.\nThe letter 'z' appears on the index 8.\nThe letter 'c' is the first letter to appear twice, because out of all the letters the index of its second occurrence is the smallest.\n\nExample 2:\n\nInput: s = \"abcdd\"\nOutput: \"d\"\nExplanation:\nThe only letter that appears twice is 'd' so we return 'd'.\n\n&nbsp;\nConstraints:\n\n\t2 <= s.length <= 100\n\ts consists of lowercase English letters.\n\ts has at least one repeated letter.",
        "solutions": [
            {
                "id": 2342721,
                "title": "java-5-line-solution",
                "content": "Upvote please, if it helps.  \\nThank you!\\n```\\npublic char repeatedCharacter(String s) {\\n        Set<Character> set = new HashSet();\\n        for (char c : s.toCharArray())  \\n            if (!set.add(c)) \\n                return c;\\n\\t\\t\\t\\t\\n        return \\'a\\';// can\\'t reach to this line, because there must be a letter appearing TWICE\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic char repeatedCharacter(String s) {\\n        Set<Character> set = new HashSet();\\n        for (char c : s.toCharArray())  \\n            if (!set.add(c)) \\n                return c;\\n\\t\\t\\t\\t\\n        return \\'a\\';// can\\'t reach to this line, because there must be a letter appearing TWICE\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2324809,
                "title": "cpp-easy-o-1-time-o-26-space",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int> v(26);\\n        for(char c:s){\\n            v[c-\\'a\\']++;\\n            if(v[c-\\'a\\']>1)return c;\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```\\n\\n**Update** :\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<bool> v(26);\\n        for(char c:s){\\n            if(v[c-\\'a\\'])return c;\\n\\t\\t\\tv[c-\\'a\\']=true;\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int> v(26);\\n        for(char c:s){\\n            v[c-\\'a\\']++;\\n            if(v[c-\\'a\\']>1)return c;\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<bool> v(26);\\n        for(char c:s){\\n            if(v[c-\\'a\\'])return c;\\n\\t\\t\\tv[c-\\'a\\']=true;\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2324754,
                "title": "python-map-easy-approach",
                "content": "Algorithm:\\n(1) use setS to store the letter have ever seen;\\n(2) one pass the input string:\\n(3) if x is already in setS:\\n\\t\\tx is what we need (it is the first occurrence twice).\\n(4) else (x is not in setS):\\n\\t\\twe put the x into the setS to store it.\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        \\n        setS = set()\\n\\n        for x in s:\\n            if x in setS:\\n                return x\\n            else:\\n                setS.add(x)\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        \\n        setS = set()\\n\\n        for x in s:\\n            if x in setS:\\n                return x\\n            else:\\n                setS.add(x)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2324792,
                "title": "c-simple-solution-use-hashmap",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    char repeatedCharacter(string s) \\n    {\\n        unordered_map<char, int> mp; //for storing occurrences of char\\n        \\n        char ans;\\n        for(auto it:s)\\n        {\\n            if(mp.find(it) != mp.end()) //any char which comes twice first will be the ans; \\n            {\\n                ans = it;\\n                break;\\n            }\\n            mp[it]++; //increase the count of char\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    char repeatedCharacter(string s) \\n    {\\n        unordered_map<char, int> mp; //for storing occurrences of char\\n        \\n        char ans;\\n        for(auto it:s)\\n        {\\n            if(mp.find(it) != mp.end()) //any char which comes twice first will be the ans; \\n            {\\n                ans = it;\\n                break;\\n            }\\n            mp[it]++; //increase the count of char\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2324715,
                "title": "count-chars",
                "content": "**C++**\\n```cpp\\nchar repeatedCharacter(string s) {\\n    int seen[128] = {}, i = 0;\\n    for (i = 0; i < s.size() && ++seen[s[i]] < 2; ++i);\\n    return s[i];\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nchar repeatedCharacter(string s) {\\n    int seen[128] = {}, i = 0;\\n    for (i = 0; i < s.size() && ++seen[s[i]] < 2; ++i);\\n    return s[i];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2324701,
                "title": "return-when-first-seen",
                "content": "# C++\\n    char repeatedCharacter(string s) {\\n        int cnt[26]{};\\n        for(char ch:s) if(++cnt[ch-\\'a\\']==2) return ch;\\n        return 0;\\n    }\\n    \\n# Java\\n    public char repeatedCharacter(String s) {\\n        int cnt[]= new int[26];\\n        for(char ch:s.toCharArray()) if(++cnt[ch-\\'a\\']==2) return ch;\\n        return \\'a\\';\\n    }\\nTime - O(N)\\nSpace - O(26)= O(1)",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "# C++\\n    char repeatedCharacter(string s) {\\n        int cnt[26]{};\\n        for(char ch:s) if(++cnt[ch-\\'a\\']==2) return ch;\\n        return 0;\\n    }\\n    \\n# Java\\n    public char repeatedCharacter(String s) {\\n        int cnt[]= new int[26];\\n        for(char ch:s.toCharArray()) if(++cnt[ch-\\'a\\']==2) return ch;\\n        return \\'a\\';\\n    }\\nTime - O(N)\\nSpace - O(26)= O(1)",
                "codeTag": "Unknown"
            },
            {
                "id": 2805650,
                "title": "c-solutions",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<bool> v(26);\\n        for(char c:s){\\n            if(v[c-\\'a\\'])return c;\\n\\t\\t\\tv[c-\\'a\\']=true;\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<bool> v(26);\\n        for(char c:s){\\n            if(v[c-\\'a\\'])return c;\\n\\t\\t\\tv[c-\\'a\\']=true;\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2475410,
                "title": "javascript-set-less-and-faster-than-85",
                "content": "```\\nconst repeatedCharacter = s => {\\n    const set = new Set();\\n    \\n    for (let i = 0; i < s.length; i += 1) {\\n        const currentLetter = s[i]\\n        if(set.has(currentLetter)) {\\n             return currentLetter \\n        }\\n        set.add(currentLetter);\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst repeatedCharacter = s => {\\n    const set = new Set();\\n    \\n    for (let i = 0; i < s.length; i += 1) {\\n        const currentLetter = s[i]\\n        if(set.has(currentLetter)) {\\n             return currentLetter \\n        }\\n        set.add(currentLetter);\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2324653,
                "title": "c-simple-commented-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) \\n    {\\n        map<char,int> mp;              // for storing the frequency of char\\n        \\n        for(auto i: s)\\n        {\\n            // if we found that this char is already present menas it is our ans return  it\\n            if(mp[i]==1)\\n                return i;\\n            \\n            // if it ocuurs first time then increase the frequency by 1\\n            else if(mp[i]==0)\\n                mp[i]++;\\n        }\\n        \\n        // if we do not have any char with frequency 2 then return 0\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) \\n    {\\n        map<char,int> mp;              // for storing the frequency of char\\n        \\n        for(auto i: s)\\n        {\\n            // if we found that this char is already present menas it is our ans return  it\\n            if(mp[i]==1)\\n                return i;\\n            \\n            // if it ocuurs first time then increase the frequency by 1\\n            else if(mp[i]==0)\\n                mp[i]++;\\n        }\\n        \\n        // if we do not have any char with frequency 2 then return 0\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2324704,
                "title": "count-and-check-easy-and-simple",
                "content": "Code is self explanatory\\n\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        occurences = defaultdict(int)\\n        for char in s:\\n            occurences[char] += 1\\n            if occurences[char] == 2:\\n                return char\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        occurences = defaultdict(int)\\n        for char in s:\\n            occurences[char] += 1\\n            if occurences[char] == 2:\\n                return char\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3432395,
                "title": "100-beginners-friendly",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n          as the hashmap value of the key went to 2 return the char\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        HashMap<Character, Integer> hm= new HashMap<>();\\n\\n        for(int i=0;i<s.length();i++){\\n            //if present\\n            if(hm.containsKey(s.charAt(i))){\\n                return s.charAt(i);\\n            }else{\\n                hm.put(s.charAt(i), 1);\\n            }\\n        }\\n        return \\'1\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        HashMap<Character, Integer> hm= new HashMap<>();\\n\\n        for(int i=0;i<s.length();i++){\\n            //if present\\n            if(hm.containsKey(s.charAt(i))){\\n                return s.charAt(i);\\n            }else{\\n                hm.put(s.charAt(i), 1);\\n            }\\n        }\\n        return \\'1\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3241294,
                "title": "using-hashtable",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        map=defaultdict(int)\\n        for i in s:\\n            map[i]+=1\\n            if map[i]>=2:\\n                return i\\n\\n            \\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        map=defaultdict(int)\\n        for i in s:\\n            map[i]+=1\\n            if map[i]>=2:\\n                return i\\n\\n            \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2891845,
                "title": "java-easiest-solution",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int[] cnt = new int[26];\\n        for (char c : s.toCharArray()) {\\n            if (++cnt[c - \\'a\\'] == 2) {\\n                return c;\\n            }\\n        }\\n         return \\'.\\';\\n    }\\n   \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int[] cnt = new int[26];\\n        for (char c : s.toCharArray()) {\\n            if (++cnt[c - \\'a\\'] == 2) {\\n                return c;\\n            }\\n        }\\n         return \\'.\\';\\n    }\\n   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2683961,
                "title": "easy-java-solution-using-hashset",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        HashSet<Character> set = new HashSet<>();//Create a set of characters\\n        for(int i = 0 ; i < s.length() ; i++){\\n            if(set.contains(s.charAt(i))) return s.charAt(i);//If the set already contains the current character, then it is the required ans\\n            set.add(s.charAt(i));\\n        }\\n        return \\'a\\';//As it is given in the question that there is at least one letter that appears twice, therefore it is certain that the ans will be found before we reach this statement. So, just adding any random return statement so that there is no error in the code.\\n    }\\n}\\n```\\nIt\\'s time complexity is O(n).",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        HashSet<Character> set = new HashSet<>();//Create a set of characters\\n        for(int i = 0 ; i < s.length() ; i++){\\n            if(set.contains(s.charAt(i))) return s.charAt(i);//If the set already contains the current character, then it is the required ans\\n            set.add(s.charAt(i));\\n        }\\n        return \\'a\\';//As it is given in the question that there is at least one letter that appears twice, therefore it is certain that the ans will be found before we reach this statement. So, just adding any random return statement so that there is no error in the code.\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2435177,
                "title": "java-hashmap-v-easy-code-easy-2-understand",
                "content": "class Solution {\\n\\n    public char repeatedCharacter(String s) {\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        int idx = 0;\\n        for(int i=0;i<s.length();i++){\\n            char c = s.charAt(i);\\n            if(hm.containsKey(c) ){\\n                \\n                    idx = i;\\n                    break;\\n                \\n                \\n            }\\n            else{\\n                hm.put(c,1);\\n            }\\n        }\\n        System.out.println(hm);\\n        \\n        \\n        return s.charAt(idx);\\n    }\\n}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public char repeatedCharacter(String s) {\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        int idx = 0;\\n        for(int i=0;i<s.length();i++){\\n            char c = s.charAt(i);\\n            if(hm.containsKey(c) ){\\n                \\n                    idx = i;\\n                    break;\\n                \\n                \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2434543,
                "title": "python-simple-set",
                "content": "\\n    def repeatedCharacter(self, s):\\n        seen = set()\\n        \\n        for i in s:\\n            if i not in seen:\\n                seen.add(i)\\n            else:\\n                return i\\n",
                "solutionTags": [],
                "code": "\\n    def repeatedCharacter(self, s):\\n        seen = set()\\n        \\n        for i in s:\\n            if i not in seen:\\n                seen.add(i)\\n            else:\\n                return i\\n",
                "codeTag": "Python3"
            },
            {
                "id": 2434222,
                "title": "python-easy-solution",
                "content": "```\\ndef repeatedCharacter(self, s: str) -> str:\\n        st = set()\\n        for i in range(len(s)): # s = \"abccbaacz\"\\n            if s[i] in st:  # condition will be true when i = 3\\n                return s[i] # return c\\n            else:\\n                st.add(s[i]) # st = {a,b,c}\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef repeatedCharacter(self, s: str) -> str:\\n        st = set()\\n        for i in range(len(s)): # s = \"abccbaacz\"\\n            if s[i] in st:  # condition will be true when i = 3\\n                return s[i] # return c\\n            else:\\n                st.add(s[i]) # st = {a,b,c}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2433520,
                "title": "simple-java-solution-0ms-faster-than-100",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) \\n    {\\n        HashSet<Character> set = new HashSet<>();\\n        char ch;\\n        for(int i=0; i<s.length();i++)\\n        {\\n            ch= s.charAt(i);\\n            \\n            if(set.contains(ch))\\n                return ch;\\n            \\n            else\\n                set.add(ch);\\n        }\\n        \\n        return \\'a\\'; //any random character because the string s will contain at least one character which repeats itself.\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) \\n    {\\n        HashSet<Character> set = new HashSet<>();\\n        char ch;\\n        for(int i=0; i<s.length();i++)\\n        {\\n            ch= s.charAt(i);\\n            \\n            if(set.contains(ch))\\n                return ch;\\n            \\n            else\\n                set.add(ch);\\n        }\\n        \\n        return \\'a\\'; //any random character because the string s will contain at least one character which repeats itself.\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2329536,
                "title": "c-simple-solution-o-26-space-easy",
                "content": "# C++ Code:\\n```\\nclass Solution {\\npublic:\\n    //using O(26) space \\n    char repeatedCharacter(string s) {\\n        vector<int> cnt(26,0);\\n        \\n        char ans;\\n        for(char ch: s){\\n            if(cnt[ch-\\'a\\'] == 1){\\n                ans = ch;\\n                break;\\n            }\\n            cnt[ch-\\'a\\']++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    //using O(26) space \\n    char repeatedCharacter(string s) {\\n        vector<int> cnt(26,0);\\n        \\n        char ans;\\n        for(char ch: s){\\n            if(cnt[ch-\\'a\\'] == 1){\\n                ans = ch;\\n                break;\\n            }\\n            cnt[ch-\\'a\\']++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2325471,
                "title": "o-n-time-o-1-100-faster-memory-usage-less-than-100",
                "content": "```\\n var repeatedCharacter = function(s) {\\n    const m = {};\\n    \\n    for(let i of s) {\\n\\t\\tm[i] = m[i] + 1 || 1;  \\n        \\n        if(m[i] == 2) {\\n            return i;\\n        }\\n    }\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n var repeatedCharacter = function(s) {\\n    const m = {};\\n    \\n    for(let i of s) {\\n\\t\\tm[i] = m[i] + 1 || 1;  \\n        \\n        if(m[i] == 2) {\\n            return i;\\n        }\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 3432140,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) \\n    {\\n        unordered_map<char,int>m;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            m[s[i]]++;\\n            if(m[s[i]]==2) return s[i];\\n        }\\nreturn 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) \\n    {\\n        unordered_map<char,int>m;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            m[s[i]]++;\\n            if(m[s[i]]==2) return s[i];\\n        }\\nreturn 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240458,
                "title": "easiest-solution-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        list1=[]\\n        for i in range(len(s)):\\n            if s[i] in list1:\\n                return s[i]\\n            else:\\n                list1.append(s[i])\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        list1=[]\\n        for i in range(len(s)):\\n            if s[i] in list1:\\n                return s[i]\\n            else:\\n                list1.append(s[i])\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3198733,
                "title": "c-approach-o-n-beats-100-with-explanation-without-hash",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCreate a count array which store frequency of all character of string \\nCharcter whose frequency becomes 2 return that character \\n# Approach\\n1> We simply make a count array which store frequency of all character of string \\n2> As soon as we see the character we increase the value of count\\n3>  when 1st time count[of particular character]==2 we return that character \\n\\nDRY RUN \\n\\ninitially count array  is 0\\n\\ns=\"abcddb\"\\n\\ni=0 : \\ncount[\\'a\\']=1;\\ni=1:\\ncount[\\'b\\']=1;\\ni=2:\\ncount[\\'c\\']=1;\\ni=3:\\ncount[\\'d\\']=1;\\ni=4:\\ncount[\\'d\\']=2\\n\\nAs soon as count[s[i]]==2 return s[i]\\n\\ncount[s[i]]--> count[\\'d\\']==2 \\nreturn d;\\n\\n\\nif suppose no repeating character return -1 (which is not possible in this question)\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(256) or O(26)\\n\\n256 -> it will check for all ASCII character \\n26-> Only for lowercase \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int count[256]={0};\\n        //we can take 26 also as char are in lowercase \\n        for(int i=0;i<s.length();i++)\\n        {\\n            count[s[i]]++;\\n            if(count[s[i]]==2)\\n                return s[i];\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int count[256]={0};\\n        //we can take 26 also as char are in lowercase \\n        for(int i=0;i<s.length();i++)\\n        {\\n            count[s[i]]++;\\n            if(count[s[i]]==2)\\n                return s[i];\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2942133,
                "title": "fastest-c-solution-using-hashing",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n\\n       char ans = \\'a\\';\\n\\n       // Hashing \\n       unordered_map<char,int> mp;\\n       for(int i=0;i<s.length();++i){\\n           mp[s[i]]++;\\n           if(mp[s[i]]==2) {\\n               ans=s[i];\\n               break;\\n           }\\n       }\\n\\n       return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n\\n       char ans = \\'a\\';\\n\\n       // Hashing \\n       unordered_map<char,int> mp;\\n       for(int i=0;i<s.length();++i){\\n           mp[s[i]]++;\\n           if(mp[s[i]]==2) {\\n               ans=s[i];\\n               break;\\n           }\\n       }\\n\\n       return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2851254,
                "title": "easiest-approach-only-3-steps-beginner-friendly-easiest-c-solution",
                "content": "## Only 3 Steps\\n1. Declare an hashmap\\n2. In a loop insert string[i] and keep increasing map count \\n3. If its count is more than 1 that means its double hence break and return the char\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        char c;\\n\\t\\t//Declare an hashmap\\n        map<char,int> m;\\n\\t\\t//In a loop insert string[i] and keep increasing map count \\n        for(auto it:s){\\n            m[it]++;\\n\\t\\t\\t//If its count is more than 1 that means its double hence break and return the char\\n            if(m[it]>1){\\n                c = it;\\n                break;\\n                }\\n        }\\n        return c;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        char c;\\n\\t\\t//Declare an hashmap\\n        map<char,int> m;\\n\\t\\t//In a loop insert string[i] and keep increasing map count \\n        for(auto it:s){\\n            m[it]++;\\n\\t\\t\\t//If its count is more than 1 that means its double hence break and return the char\\n            if(m[it]>1){\\n                c = it;\\n                break;\\n                }\\n        }\\n        return c;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2574127,
                "title": "java-and-c-solution-without-using-map-set",
                "content": "Java solution:\\n```\\npublic char repeatedCharacter(String s) {\\n        int freq[]=new int[26];    //26 size array to store the occurrence of lowercase characters \\n        int temp;\\n        for(int i=0;i<s.length();i++){\\n            temp=s.charAt(i)-\\'a\\';      //will give 0 to 25 for a to z \\n            if(freq[temp]==1){         //already 1 means repeated \\n                return s.charAt(i);\\n            }\\n            freq[temp]=1;      //set value 1 if it has occured for the first time\\n        }\\n        return \\' \\';\\n    }\\n```\\nC++ solution:\\n```\\nchar repeatedCharacter(string s) {\\n        int freq[26]={0};    //26 size array to store the occurrence of lowercase characters \\n        int temp;\\n        for(int i=0;i<s.size();i++){\\n            temp=s[i]-\\'a\\';      //will give 0 to 25 for a to z \\n            if(freq[temp]==1){         //already 1 means repeated \\n                return s[i];\\n            }\\n            freq[temp]=1;      //set value 1 if it has occured for the first time\\n        }\\n        return \\' \\';\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "C",
                    "String"
                ],
                "code": "```\\npublic char repeatedCharacter(String s) {\\n        int freq[]=new int[26];    //26 size array to store the occurrence of lowercase characters \\n        int temp;\\n        for(int i=0;i<s.length();i++){\\n            temp=s.charAt(i)-\\'a\\';      //will give 0 to 25 for a to z \\n            if(freq[temp]==1){         //already 1 means repeated \\n                return s.charAt(i);\\n            }\\n            freq[temp]=1;      //set value 1 if it has occured for the first time\\n        }\\n        return \\' \\';\\n    }\\n```\n```\\nchar repeatedCharacter(string s) {\\n        int freq[26]={0};    //26 size array to store the occurrence of lowercase characters \\n        int temp;\\n        for(int i=0;i<s.size();i++){\\n            temp=s[i]-\\'a\\';      //will give 0 to 25 for a to z \\n            if(freq[temp]==1){         //already 1 means repeated \\n                return s[i];\\n            }\\n            freq[temp]=1;      //set value 1 if it has occured for the first time\\n        }\\n        return \\' \\';\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2445947,
                "title": "100-fastest-cpp-solution-using-hashing-and-ascii-values",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n\\t\\tint n = s.length();    //string length\\n        int arr[26]={0};    //created an array for 26 alphabets from \\'a\\' to \\'z\\' and initialize with 0\\n        for(int i=0;i<n;i++){    //Iterating over given string\\n            int num = s[i]-\\'a\\';    //subtracting \\'a\\' from character such that we will get respective \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t//index from 0 to 25 for every character present in string from \\'a\\' to \\'z\\'\\n\\t\\t\\tarr[num]++;    //increasing value by 1 of character -> s[i] \\n            if(arr[num] == 2){    //checking if the index value is 2 of character s[i] \\n                return s[i];    //returning character s[i]\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```\\nHope you find this solution helpful, if so then pls upvote it...\\u270C\\uD83C\\uDFFB\\uD83E\\uDD17",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n\\t\\tint n = s.length();    //string length\\n        int arr[26]={0};    //created an array for 26 alphabets from \\'a\\' to \\'z\\' and initialize with 0\\n        for(int i=0;i<n;i++){    //Iterating over given string\\n            int num = s[i]-\\'a\\';    //subtracting \\'a\\' from character such that we will get respective \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t//index from 0 to 25 for every character present in string from \\'a\\' to \\'z\\'\\n\\t\\t\\tarr[num]++;    //increasing value by 1 of character -> s[i] \\n            if(arr[num] == 2){    //checking if the index value is 2 of character s[i] \\n                return s[i];    //returning character s[i]\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2431577,
                "title": "python-set-easy-understanding",
                "content": "Idea: We don\\'t need to loop totally to get the answer. We just keep track of what letters went ahead by using a set. If any letter is repeated, return the letter.\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        hm = set()\\n        for s_ in s:\\n            if s_ not in hm:\\n                hm.add(s_)\\n            else: return s_\\n```\\nPlease upvote if you like my solution. Thanks.",
                "solutionTags": [
                    "Python",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        hm = set()\\n        for s_ in s:\\n            if s_ not in hm:\\n                hm.add(s_)\\n            else: return s_\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2421179,
                "title": "python-elegant-short-o-n-time-o-1-space-set",
                "content": "\\tdef repeatedCharacter(self, s: str) -> str:\\n\\t\\tseen = set()\\n\\n\\t\\tfor c in s:\\n\\t\\t\\tif c in seen:\\n\\t\\t\\t\\treturn c\\n\\t\\t\\tseen.add(c)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Ordered Set"
                ],
                "code": "\\tdef repeatedCharacter(self, s: str) -> str:\\n\\t\\tseen = set()\\n\\n\\t\\tfor c in s:\\n\\t\\t\\tif c in seen:\\n\\t\\t\\t\\treturn c\\n\\t\\t\\tseen.add(c)\\n",
                "codeTag": "Python3"
            },
            {
                "id": 2352434,
                "title": "c-easy-map",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        map<char, int> mp;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2)\\n                return s[i];\\n        }\\n        return 0;\\n    }\\n};\\n```\\n\\nplease upvote!!",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        map<char, int> mp;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2)\\n                return s[i];\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2334483,
                "title": "python3-o-n-o-1-runtime-30ms-90-00-memory-13-9mb-10-00",
                "content": "```\\nclass Solution:\\n#     O(n) || O(1)\\n# Runtime: 30ms 90.00% || Memory: 13.9mb 10.00%\\n    def repeatedCharacter(self, string: str) -> str:\\n        strAlphaFreq = [0] * 26\\n\\n        for char in string:\\n            index = ord(char) - ord(\\'a\\')\\n\\n            strAlphaFreq[index] += 1\\n\\n            if strAlphaFreq[index] > 1:\\n                return char\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n#     O(n) || O(1)\\n# Runtime: 30ms 90.00% || Memory: 13.9mb 10.00%\\n    def repeatedCharacter(self, string: str) -> str:\\n        strAlphaFreq = [0] * 26\\n\\n        for char in string:\\n            index = ord(char) - ord(\\'a\\')\\n\\n            strAlphaFreq[index] += 1\\n\\n            if strAlphaFreq[index] > 1:\\n                return char\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2328004,
                "title": "short-javascript-solution-using-a-set-object",
                "content": "Found this solution helpful? Consider showing support by upvoting this post.\\nHave a question? Kindly leave a comment below.\\nThank you and happy hacking!\\n```\\nvar repeatedCharacter = function(s) {\\n    let letterSet = new Set()\\n    \\n    for(let i = 0; i< s.length;i++){\\n        if(letterSet.has(s[i])) return s[i]\\n        letterSet.add(s[i]) \\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Set"
                ],
                "code": "```\\nvar repeatedCharacter = function(s) {\\n    let letterSet = new Set()\\n    \\n    for(let i = 0; i< s.length;i++){\\n        if(letterSet.has(s[i])) return s[i]\\n        letterSet.add(s[i]) \\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2325341,
                "title": "c-solution-o-1-space-using-bitmask",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int mask=0;\\n        int n=s.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(mask&(1<<(s[i]-\\'a\\')))\\n            {\\n                return s[i];\\n            }\\n            else\\n            {\\n                mask|=(1<<(s[i]-\\'a\\'));\\n            }\\n        }\\n        return \\'dilip\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int mask=0;\\n        int n=s.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(mask&(1<<(s[i]-\\'a\\')))\\n            {\\n                return s[i];\\n            }\\n            else\\n            {\\n                mask|=(1<<(s[i]-\\'a\\'));\\n            }\\n        }\\n        return \\'dilip\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2324915,
                "title": "easy-short-efficient-code",
                "content": "```\\nclass Solution {\\n    typedef long long ll;\\n#define vi(x) vector<x>\\npublic:\\n    char repeatedCharacter(string& s) {\\n        ll mask=0;\\n        char res = \\'.\\';\\n        for (char ch : s) {\\n            if (mask&(1<<(ch-\\'a\\'))) {\\n                res = ch;\\n                break;\\n            }\\n            mask|=(1<<(ch-\\'a\\'));\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Bitmask"
                ],
                "code": "```\\nclass Solution {\\n    typedef long long ll;\\n#define vi(x) vector<x>\\npublic:\\n    char repeatedCharacter(string& s) {\\n        ll mask=0;\\n        char res = \\'.\\';\\n        for (char ch : s) {\\n            if (mask&(1<<(ch-\\'a\\'))) {\\n                res = ch;\\n                break;\\n            }\\n            mask|=(1<<(ch-\\'a\\'));\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2324736,
                "title": "python3-mask",
                "content": "Please pull this [commit](https://github.com/gaosanyong/leetcode/commit/d61cd3ed09bbf59fd619802a6e861a516ec17094) for solutions of weekly 303. \\n\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        mask = 0 \\n        for ch in s: \\n            if mask & 1<<ord(ch)-97: return ch \\n            mask ^= 1<<ord(ch)-97\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        mask = 0 \\n        for ch in s: \\n            if mask & 1<<ord(ch)-97: return ch \\n            mask ^= 1<<ord(ch)-97\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3946166,
                "title": "java-100-beats-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Set<Character> set = new HashSet<>();\\n        char ans = s.charAt(0);\\n        for(int i=1; i<s.length(); i++){\\n            set.add(s.charAt(i-1));\\n            if(set.contains(s.charAt(i))){\\n                ans = s.charAt(i);\\n                break;\\n            }  \\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Set<Character> set = new HashSet<>();\\n        char ans = s.charAt(0);\\n        for(int i=1; i<s.length(); i++){\\n            set.add(s.charAt(i-1));\\n            if(set.contains(s.charAt(i))){\\n                ans = s.charAt(i);\\n                break;\\n            }  \\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3822936,
                "title": "go-solution-great-explanation-and-full-description",
                "content": "# Intuition\\nThis problem asks to find the first repeated character in a given string. We can solve this problem by scanning the string from left to right and keeping track of the characters we have seen before. As soon as we encounter a character that is already in our record, we return it as the first repeating character.\\n\\n# Approach\\nThe approach in this implementation involves creating a map (set) to store characters in the string as we encounter them. We iterate over each character in the string, checking if the character is already in the set. If it is, we return it as the first repeated character. If it\\'s not, we add it to the set. If we go through the entire string without finding a repeated character, we return a space character (\\' \\').\\n\\n# Complexity\\n- Time complexity: The time complexity is O(n), where n is the length of the string. This is because we are iterating through each character in the string once.\\n- Space complexity: The space complexity is also O(n), where n is the length of the string. This is because in the worst-case scenario, all characters in the string are unique, and we would need to store each of them in the set. However, since the set size won\\'t exceed the unique characters in the ASCII table, we can also argue that the space complexity is O(1), or constant.\\n\\n# Code\\n```\\nfunc repeatedCharacter(s string) byte {\\n    set:=make(map[byte]struct{})\\n    for i:=0;i<len(s);i++{\\n      if _,ok:=set[s[i]];ok{\\n        return s[i]\\n      }\\n\\t\\tset[s[i]]=struct{}{}\\n    }\\n    return \\' \\'\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nfunc repeatedCharacter(s string) byte {\\n    set:=make(map[byte]struct{})\\n    for i:=0;i<len(s);i++{\\n      if _,ok:=set[s[i]];ok{\\n        return s[i]\\n      }\\n\\t\\tset[s[i]]=struct{}{}\\n    }\\n    return \\' \\'\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566659,
                "title": "o-n-solution-for-first-letter-to-appear-twice-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char, int> mp;\\n        int i;\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]>1)\\n                return s[i];\\n        }\\n        return s[0];\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/a418a9d3-5896-482c-add0-7eb5858813e7_1685162190.2116137.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char, int> mp;\\n        int i;\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]>1)\\n                return s[i];\\n        }\\n        return s[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3529798,
                "title": "c-0-ms-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nStart iterating on the string and if element is not present on the set then insert it otherwise if already present then that the first repeating element just return the character.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing ordered set\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~**\\n*                       JAI SHREE RAM                                        *\\n**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\\n/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~**\\n*                    It\\'s Not Over, Until i Win                              *         \\n**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        set<char> s1;\\n        for(auto & i: s) {\\n            if(s1.find(i) != s1.end()) {\\n                return i;\\n            }\\n            else {\\n                s1.insert(i);\\n            }\\n        }\\n        return \\'0\\';\\n    }\\n};\\n```\\n\\n![e5e0d7af-158f-4662-a54c-7c43dc367b50_1680580847.588728.png](https://assets.leetcode.com/users/images/53ad6af0-2afd-43af-b5dd-27bd42162bcd_1684220222.4926765.png)\\n",
                "solutionTags": [
                    "C++",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\n/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~**\\n*                       JAI SHREE RAM                                        *\\n**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\\n/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~**\\n*                    It\\'s Not Over, Until i Win                              *         \\n**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        set<char> s1;\\n        for(auto & i: s) {\\n            if(s1.find(i) != s1.end()) {\\n                return i;\\n            }\\n            else {\\n                s1.insert(i);\\n            }\\n        }\\n        return \\'0\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3169552,
                "title": "100-beat",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int i=0;\\n\\n        map<char,int> m;\\n        while(i!=s.size()){\\n            m[s[i]]++;\\n            if(m[s[i]]==2){\\n                return s[i];\\n            }\\n            i++;\\n        }\\n        return \\'c\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int i=0;\\n\\n        map<char,int> m;\\n        while(i!=s.size()){\\n            m[s[i]]++;\\n            if(m[s[i]]==2){\\n                return s[i];\\n            }\\n            i++;\\n        }\\n        return \\'c\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3089332,
                "title": "hashmap-hashset-easiest-one-java-please-upvote-if-it-helps",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\no(n)\\n- Space complexity:\\no(n)\\n# Code\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n       char ch=\\' \\';\\n     HashMap<Character, Integer> map\\n            = new HashMap<Character, Integer>();\\n        for(int i=0;i<s.length();i++){\\n            if(map.containsKey(s.charAt(i)))\\n            {\\n                ch=s.charAt(i);\\n            break;\\n            }\\n            map.put(s.charAt(i),i);\\n        }\\n        return ch;/*\\n        //HashMap is faster than HashSet\\n      // both are unordered\\n        char ch=\\' \\';\\n     HashSet<Character> set\\n            = new HashSet<Character>();\\n        for(int i=0;i<s.length();i++){\\n            if(set.contains(s.charAt(i)))\\n            {\\n                ch=s.charAt(i);\\n            break;\\n            }\\n            set.add(s.charAt(i));\\n        }\\n        return ch;*/\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n       char ch=\\' \\';\\n     HashMap<Character, Integer> map\\n            = new HashMap<Character, Integer>();\\n        for(int i=0;i<s.length();i++){\\n            if(map.containsKey(s.charAt(i)))\\n            {\\n                ch=s.charAt(i);\\n            break;\\n            }\\n            map.put(s.charAt(i),i);\\n        }\\n        return ch;/*\\n        //HashMap is faster than HashSet\\n      // both are unordered\\n        char ch=\\' \\';\\n     HashSet<Character> set\\n            = new HashSet<Character>();\\n        for(int i=0;i<s.length();i++){\\n            if(set.contains(s.charAt(i)))\\n            {\\n                ch=s.charAt(i);\\n            break;\\n            }\\n            set.add(s.charAt(i));\\n        }\\n        return ch;*/\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2865376,
                "title": "c-0-ms-one-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        return [&,st=unordered_set<char>{}]()mutable{for(char &_s:s){if(st.count(_s)) return _s; st.insert(_s);} return \\'$\\';}();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        return [&,st=unordered_set<char>{}]()mutable{for(char &_s:s){if(st.count(_s)) return _s; st.insert(_s);} return \\'$\\';}();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2857874,
                "title": "javascript-using-a-set-o-1-time-and-space-complexity-92",
                "content": "We use a Set to keep track of what letters we have already seen. Once we find a letter that is already in our Set we know we found a duplicate letter.\\n\\nMax 26 unique lowercase letters:\\nTime: O(1)\\nSpace: O(1)\\n\\nI saw many solutions here claiming a O(n) space and time complexity but they aint correct, it is O(1). There are at max 26 letters so at max we have 26 uniqe letters and then the 27th will be a duplicate. So we will never do more than 27 iterations no matter how long the string is and never have more than 26 Chars in our Set which makes time and space complexity constant. \\n\\n````\\nvar repeatedCharacter = function(s) {\\n    let seen = new Set();\\n    for (let a of s) {\\n        if (seen.has(a)) return a;\\n        else seen.add(a);\\n    }\\n    return \\'\\';\\n};\\n````",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Set"
                ],
                "code": "````\\nvar repeatedCharacter = function(s) {\\n    let seen = new Set();\\n    for (let a of s) {\\n        if (seen.has(a)) return a;\\n        else seen.add(a);\\n    }\\n    return \\'\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2831259,
                "title": "javascript-object-set",
                "content": "# Intuition\\nThis can be solved by using either object or set structure.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n We can create a new object/set. Then loop through the string, inside the loop, we first check if the letter has already be added to the object/set. If it is already in the object, then this is its second appearance. So, we simply return it. Otherwise, we add the letter to our object/set.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ as we loop through the string only once and loopup time complexity for object/set is a constant, $$O(n)$$ \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {character}\\n */\\nvar repeatedCharacter = function(s) {\\n    const map = {};\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (map[s[i]]) {\\n            return s[i];\\n        }\\n        else {\\n            map[s[i]] = 1;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {character}\\n */\\nvar repeatedCharacter = function(s) {\\n    const map = {};\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (map[s[i]]) {\\n            return s[i];\\n        }\\n        else {\\n            map[s[i]] = 1;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2780784,
                "title": "python-6-lines-96-89-faster-using-dictionary-o-n-t-c",
                "content": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        d={}\\n        for i in s:\\n            if i in d: \\n                d[i]+=1\\n                if d[i]==2: return i\\n            else: d[i]=1\\n```\\n\\n**Please upvote if you like the solution**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        d={}\\n        for i in s:\\n            if i in d: \\n                d[i]+=1\\n                if d[i]==2: return i\\n            else: d[i]=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2672975,
                "title": "python",
                "content": "```\\nclass Solution(object):\\n    def repeatedCharacter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: str\\n        \"\"\"\\n        twice = {}\\n        for i in s:\\n            if i in twice:\\n                return i\\n            else:\\n                twice[i] = 1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def repeatedCharacter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: str\\n        \"\"\"\\n        twice = {}\\n        for i in s:\\n            if i in twice:\\n                return i\\n            else:\\n                twice[i] = 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2671372,
                "title": "beats-99-86-python-3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n-  O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(N=26) so O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        dicta={}\\n        for i in s:\\n            if i in dicta:\\n                return i\\n            else:\\n                dicta[i]=1\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        dicta={}\\n        for i in s:\\n            if i in dicta:\\n                return i\\n            else:\\n                dicta[i]=1\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2667975,
                "title": "easy-and-short-python-solution",
                "content": "```\\nd={}\\nfor i in range(len(s)):\\n\\tif s[i] not in d:\\n\\t\\t\\td[s[i]]=i\\n\\telse:\\n\\t\\t\\treturn s[i]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nd={}\\nfor i in range(len(s)):\\n\\tif s[i] not in d:\\n\\t\\t\\td[s[i]]=i\\n\\telse:\\n\\t\\t\\treturn s[i]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2558115,
                "title": "c-100-faster-0-ms-runtime",
                "content": "UPVOTE AND COMMENT YOUR DOUBTS\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int i;\\n        for(i=0;i<s.length();i++){\\n            for(int j=0;j<i;j++){\\n                if(s[i]==s[j]){\\n                    return s[i];\\n                    break;\\n                 }\\n            }\\n        }\\n        \\n        return s[i];\\n    }\\n};\\n```\\nUPVOTE AND COMMENT YOUR DOUBTS",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int i;\\n        for(i=0;i<s.length();i++){\\n            for(int j=0;j<i;j++){\\n                if(s[i]==s[j]){\\n                    return s[i];\\n                    break;\\n                 }\\n            }\\n        }\\n        \\n        return s[i];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2509731,
                "title": "100-faster-hashmap-simple-java-code",
                "content": "```\\n     HashMap<Character,Integer> map= new HashMap<>();\\n        for(int i=0;i<s.length();i++){\\n            char c= s.charAt(i);\\n            if(map.containsKey(c)){\\n                map.put(c,map.get(c)+1);\\n                if(map.get(c)==2) return c;\\n                break;\\n                \\n            }\\n            else\\n                map.put(c,1);\\n        }\\n        \\n        \\n        return 0;\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n     HashMap<Character,Integer> map= new HashMap<>();\\n        for(int i=0;i<s.length();i++){\\n            char c= s.charAt(i);\\n            if(map.containsKey(c)){\\n                map.put(c,map.get(c)+1);\\n                if(map.get(c)==2) return c;\\n                break;\\n                \\n            }\\n            else\\n                map.put(c,1);\\n        }\\n        \\n        \\n        return 0;\\n        \\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2449157,
                "title": "bit-manipulation-c-solution",
                "content": "```\\nchar repeatedCharacter(char * s){\\n    int len = strlen(s);\\n    int bitmask = 0;\\n    for(int i = 0; i < len; i++){\\n        if(bitmask & (1 << (s[i]-\\'a\\')))\\n            return s[i];\\n        bitmask |= (1 << (s[i]-\\'a\\'));\\n    }\\n    return -1;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar repeatedCharacter(char * s){\\n    int len = strlen(s);\\n    int bitmask = 0;\\n    for(int i = 0; i < len; i++){\\n        if(bitmask & (1 << (s[i]-\\'a\\')))\\n            return s[i];\\n        bitmask |= (1 << (s[i]-\\'a\\'));\\n    }\\n    return -1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2434509,
                "title": "c-vesy-easy-map-o-n",
                "content": "**O(n) Solution using map explanation in Comment**\\n\\n**Approch :-**\\n* Traverse the whole *String* from the start and store the charecter & it\\'s freqency in a map one by one\\n\\n* Travese the map and if there is a charecter with frequency return the current charecter as it is the first what occures 2 times\\n\\n# Code\\n\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            mp[s[i]]++; // store the charecters and its frequency\\n            for(auto i:mp) // traverse the map within\\n            {\\n                if(i.second==2) // if there\\'s any charecter with frequency 2\\n                    return i.first; //return the charecter\\n            }\\n        }\\n        return \\' \\';//if there\\'s no then return empty charecter\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            mp[s[i]]++; // store the charecters and its frequency\\n            for(auto i:mp) // traverse the map within\\n            {\\n                if(i.second==2) // if there\\'s any charecter with frequency 2\\n                    return i.first; //return the charecter\\n            }\\n        }\\n        return \\' \\';//if there\\'s no then return empty charecter\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2431565,
                "title": "bit-manipulation-o-n-time-o-1-space-no-map-hash-array",
                "content": "Instead of allocating 26 boolean array, use `26 bits` as flag. This reduces many spaces from `O(26)` to `O(1)`.\\n\\n### Python\\n```python\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        appear = 0\\n        \\n        ordA = ord(\"a\")\\n        for char in s:\\n            mask = 1 << (ord(char) - ordA)\\n            if ((appear & mask) != 0):\\n                return char\\n            appear |= mask\\n```\\n\\n### Java\\n```Java\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int appear = 0;\\n        \\n        int mask = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            mask = 1 << (s.charAt(i) - \\'a\\');\\n            if ((appear & mask) != 0) {\\n                return s.charAt(i);\\n            }\\n            appear |= mask;\\n        }\\n        return \\'-\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Bit Manipulation"
                ],
                "code": "```python\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        appear = 0\\n        \\n        ordA = ord(\"a\")\\n        for char in s:\\n            mask = 1 << (ord(char) - ordA)\\n            if ((appear & mask) != 0):\\n                return char\\n            appear |= mask\\n```\n```Java\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int appear = 0;\\n        \\n        int mask = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            mask = 1 << (s.charAt(i) - \\'a\\');\\n            if ((appear & mask) != 0) {\\n                return s.charAt(i);\\n            }\\n            appear |= mask;\\n        }\\n        return \\'-\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2431489,
                "title": "java-using-set",
                "content": "```class Solution {\\n    public char repeatedCharacter(String s) {\\n        Set <Character> set = new HashSet<>();\\n        \\n        for(int i = 0; i < s.length(); i++) {\\n            char curr = s.charAt(i);\\n            if(set.contains(curr)) {\\n                return curr;\\n            }\\n            \\n            set.add(curr);\\n        }\\n        \\n        return \\'v\\'; //will never reach here\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public char repeatedCharacter(String s) {\\n        Set <Character> set = new HashSet<>();\\n        \\n        for(int i = 0; i < s.length(); i++) {\\n            char curr = s.charAt(i);\\n            if(set.contains(curr)) {\\n                return curr;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2383261,
                "title": "solution-using-hashset",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s)\\n    {\\n\\n        HashSet<Character> m = new HashSet<Character>();\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n           if(!m.contains(s.charAt(i)))\\n           {\\n               m.add(s.charAt(i));\\n           }\\n           else\\n           {\\n               return s.charAt(i);\\n           }\\n\\n\\n        }\\n\\n return \\'a\\';\\n\\n    }\\n}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public char repeatedCharacter(String s)\\n    {\\n\\n        HashSet<Character> m = new HashSet<Character>();\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n           if(!m.contains(s.charAt(i)))\\n           {\\n               m.add(s.charAt(i));\\n           }",
                "codeTag": "Java"
            },
            {
                "id": 2382459,
                "title": "go-bitmask",
                "content": "Since there are only 26 lowercase letters in the alphabet, \\nwe can use a 32-bit integer to track whether a letter has been seen before.\\n\\nThe first round, the corresponding bit is set. The second round, we return the result.\\n\\n```go\\nfunc repeatedCharacter(s string) byte {\\n\\t// Use a bitmask to keep track of whether a character has\\n\\t// been seen before.\\n\\tvar seen int\\n\\tfor _, ch := range s {\\n\\t\\tbit := (1 << (ch - \\'a\\'))\\n\\t\\tif seen&bit > 0 {\\n\\t\\t\\treturn byte(ch)\\n\\t\\t}\\n\\t\\tseen |= bit\\n\\t}\\n\\treturn 0\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Bit Manipulation"
                ],
                "code": "```go\\nfunc repeatedCharacter(s string) byte {\\n\\t// Use a bitmask to keep track of whether a character has\\n\\t// been seen before.\\n\\tvar seen int\\n\\tfor _, ch := range s {\\n\\t\\tbit := (1 << (ch - \\'a\\'))\\n\\t\\tif seen&bit > 0 {\\n\\t\\t\\treturn byte(ch)\\n\\t\\t}\\n\\t\\tseen |= bit\\n\\t}\\n\\treturn 0\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2374781,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    array<int, 26> counter;\\n    char repeatedCharacter(string s) {\\n        for (const auto i : s)\\n            if (counter[i - \\'a\\']++) return i;\\n        throw \\'a\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    array<int, 26> counter;\\n    char repeatedCharacter(string s) {\\n        for (const auto i : s)\\n            if (counter[i - \\'a\\']++) return i;\\n        throw \\'a\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2361265,
                "title": "python3-code",
                "content": "```\\nvar repeatedCharacter = function(s) {\\n    let arr = []\\n    for (let i of s) {\\n        if (!arr.includes(i)) {\\n            arr.push(i)\\n        }\\n        else {\\n            return i\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar repeatedCharacter = function(s) {\\n    let arr = []\\n    for (let i of s) {\\n        if (!arr.includes(i)) {\\n            arr.push(i)\\n        }\\n        else {\\n            return i\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2352200,
                "title": "java-frequency-table-o-n-time",
                "content": "```\\n    public char repeatedCharacter(String s) {\\n        // Q: return the first twice freq element in String s\\n        // Approach: Count Table\\n        // edges case : if only have 2 char in String s(2 char must be the same), so return the first char in String s\\n        if(s.length() == 2){\\n            return s.charAt(0);\\n        }\\n        // count table to calculate each char freq(initialize 26 length since String s only consists lowercase letters)\\n        int count[] = new int[26];\\n        \\n        // iterate each char in String s, and calculate the frequency of each char\\n        for(int i = 0; i < s.length(); i++){\\n            count[s.charAt(i) - \\'a\\']++; // plus 1 to the char frequency at index i\\n            if(count[s.charAt(i) - \\'a\\'] > 1){ // if this char freq is greater than 1(means we get the first element that has one repeated letter, so return this char)\\n                return s.charAt(i);\\n            }\\n        }\\n        // String s has at least one repeated letter, means we never get this part, so pick a random char to return\\n        return \\'c\\';\\n        // time: O(N), N is the # of elements in String s, we use a for loop to iterate N times\\n        // space: O(1), count table contains lowercase letter, so the space is fixed at 26 length\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public char repeatedCharacter(String s) {\\n        // Q: return the first twice freq element in String s\\n        // Approach: Count Table\\n        // edges case : if only have 2 char in String s(2 char must be the same), so return the first char in String s\\n        if(s.length() == 2){\\n            return s.charAt(0);\\n        }\\n        // count table to calculate each char freq(initialize 26 length since String s only consists lowercase letters)\\n        int count[] = new int[26];\\n        \\n        // iterate each char in String s, and calculate the frequency of each char\\n        for(int i = 0; i < s.length(); i++){\\n            count[s.charAt(i) - \\'a\\']++; // plus 1 to the char frequency at index i\\n            if(count[s.charAt(i) - \\'a\\'] > 1){ // if this char freq is greater than 1(means we get the first element that has one repeated letter, so return this char)\\n                return s.charAt(i);\\n            }\\n        }\\n        // String s has at least one repeated letter, means we never get this part, so pick a random char to return\\n        return \\'c\\';\\n        // time: O(N), N is the # of elements in String s, we use a for loop to iterate N times\\n        // space: O(1), count table contains lowercase letter, so the space is fixed at 26 length\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2347492,
                "title": "easy-c-solution-using-set-chill-life",
                "content": "Idea is traverse the string, if you find the character is set return it if not then insert it. Simple\\n```\\nchar repeatedCharacter(string s) {\\n        set<char>st;\\n        int i=0;\\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(st.count(s[i])){\\n                return s[i];\\n            }\\n            st.insert(s[i]);\\n        }\\n        return \\'a\\';\\n    }\\n\\t```\\n\\tIf it helps you, please upvote me",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nchar repeatedCharacter(string s) {\\n        set<char>st;\\n        int i=0;\\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(st.count(s[i])){\\n                return s[i];\\n            }\\n            st.insert(s[i]);\\n        }\\n        return \\'a\\';\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 2347418,
                "title": "c-2-easiest-solutions",
                "content": "First, solving this problem using multiset.\\nMultiset is a data structure which stores value and can easily return the count of an element present in the multiset.\\n\\n\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        \\n        multiset<char> ms; // Creating a multiset.\\n        for(int i = 0; i < s.size(); i++){\\n            ms.insert(s[i]); // Inserting element in the multiset.\\n            if(ms.count(s[i]) == 2) return s[i]; // Checking count of the element.\\n        }\\n        return \\'a\\'; // Just returning any random that will definetely never execute.\\n    }\\n};\\n\\nSecond, solving it using an array of all alphabets, we\\'ll create an array of size 26 initializing it with 0. We\\'ll iterate over the given string and increment the index of a specific alphabet and then check if after the increment it is equal to 2, if yes return that character else continue iterating.\\n\\n\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        \\n        int arr[26] = {};  // Array created and initialized by 0.\\n        for(int i = 0; i < s.size(); i++){\\n            arr[s[i] - \\'a\\']++;  // Incrementing the index of a specidied alphabet.\\n            if(arr[s[i] - \\'a\\'] == 2) return s[i];  // Checking if the index has a value of 2\\n        }\\n        return \\'a\\'; // Just returning any random that will definetely never execute.\\n    }\\n};\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        \\n        multiset<char> ms; // Creating a multiset.\\n        for(int i = 0; i < s.size(); i++){\\n            ms.insert(s[i]); // Inserting element in the multiset.\\n            if(ms.count(s[i]) == 2) return s[i]; // Checking count of the element.\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2338586,
                "title": "cpp-o-n-solution-easy-to-understand",
                "content": "class Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n      map<char,int>mp1;\\n        for(char c=\\'a\\';c<=\\'z\\';c++){\\n         mp1[c]++;\\n            mp1[c]++;\\n      }\\n        for (int i=0;i<s.size();i++){\\n     mp1[s[i]]--;\\n            if(mp1[s[i]]==0){\\n  return s[i];\\n            }\\n        }\\n        return 0;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n      map<char,int>mp1;\\n        for(char c=\\'a\\';c<=\\'z\\';c++){\\n         mp1[c]++;\\n            mp1[c]++;\\n      }",
                "codeTag": "Java"
            },
            {
                "id": 2335968,
                "title": "easy-o-n-solution-in-python-using-set",
                "content": "We create a null/empty set. \\nNext, we traverse the string character by character and if the character is not present in set, we add that character in the seen set, otherwise the character is in the seen set. Means we can return that character as it is appearing twice.\\nNote that the search in a set in Python is O(1) operation.\\n\\n\\n```\\nclass Solution(object):\\n    def repeatedCharacter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: str\\n        \"\"\"\\n        \\n        seen = set()\\n        for i in s:\\n            if i in seen:\\n                return i\\n            else:\\n                seen.add(i)\\n\\t\\t\\t\\t\\n```",
                "solutionTags": [
                    "Python",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution(object):\\n    def repeatedCharacter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: str\\n        \"\"\"\\n        \\n        seen = set()\\n        for i in s:\\n            if i in seen:\\n                return i\\n            else:\\n                seen.add(i)\\n\\t\\t\\t\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2327170,
                "title": "easy-cpp-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int i = 0;\\n        unordered_map<char , int>check;\\n        for(i = 0 ; i < s.size() && ++check[s[i]]<=2; i++ , check[s[i]]++);\\n                return s[i];\\n    }\\n};\\n```\\n##### Please upvote if you find this helpful\\nhttps://github.com/Reehan9/Leetcode-Solutions\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int i = 0;\\n        unordered_map<char , int>check;\\n        for(i = 0 ; i < s.size() && ++check[s[i]]<=2; i++ , check[s[i]]++);\\n                return s[i];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2326213,
                "title": "c-hashing-easy",
                "content": "Time Complexity - **O(N)**\\nSpace Complexity - **O(26)**\\n```\\nchar repeatedCharacter(string s) \\n    {\\n        unordered_map<char,int> m;\\n        int n=s.length();\\n        char c;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(!m[s[i]]) m[s[i]]++;\\n            else\\n            {\\n                c=s[i];\\n                break;\\n            }\\n        }\\n        return c;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar repeatedCharacter(string s) \\n    {\\n        unordered_map<char,int> m;\\n        int n=s.length();\\n        char c;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(!m[s[i]]) m[s[i]]++;\\n            else\\n            {\\n                c=s[i];\\n                break;\\n            }\\n        }\\n        return c;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2325613,
                "title": "simple-like-two-sum-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n       unordered_map<char,int>m;\\n        char ans;\\n        for(int i=0;i<s.size();i++){\\n          \\n            if(m.find(s[i])!=m.end())\\n            {\\n                ans= s[i];\\n                break;\\n            }\\n              m[s[i]]++;\\n            \\n           \\n        }\\n         return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n       unordered_map<char,int>m;\\n        char ans;\\n        for(int i=0;i<s.size();i++){\\n          \\n            if(m.find(s[i])!=m.end())\\n            {\\n                ans= s[i];\\n                break;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2325204,
                "title": "c-array-or-linq-one-line",
                "content": "Straightforward.\\n\\n```\\n    public char RepeatedCharacter(string s) {\\n        var seen = new bool[\\'z\\' + 1];\\n        \\n        foreach(var letter in s){\\n            if(seen[letter]) return letter;\\n            seen[letter] = true;\\n        }\\n        \\n        return \\'\\\\0\\';\\n    }\\n```\\n\\nLINQ. Fun, but impractical. Group the characters and keep thier position information. Groups with more than one could be it. The winning letter (group) is the one with the second index the smallest (the first index is the first occurrence of the letter).\\n\\n```\\n    public char RepeatedCharacter(string s) {\\n        return s\\n            .Select( (x, i) => (letter: x, index: i))\\n            .GroupBy( x => x.letter)\\n            .Where(g => g.Count() > 1)\\n            .Select(g => g.Skip(1).First())\\n            .MinBy(x => x.index)\\n            .letter;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public char RepeatedCharacter(string s) {\\n        var seen = new bool[\\'z\\' + 1];\\n        \\n        foreach(var letter in s){\\n            if(seen[letter]) return letter;\\n            seen[letter] = true;\\n        }\\n        \\n        return \\'\\\\0\\';\\n    }\\n```\n```\\n    public char RepeatedCharacter(string s) {\\n        return s\\n            .Select( (x, i) => (letter: x, index: i))\\n            .GroupBy( x => x.letter)\\n            .Where(g => g.Count() > 1)\\n            .Select(g => g.Skip(1).First())\\n            .MinBy(x => x.index)\\n            .letter;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2324696,
                "title": "c-hashset",
                "content": "```\\n    public char RepeatedCharacter(string s) \\n    {\\n        HashSet<int> hs = new HashSet<int>();\\n        foreach (char c in s)\\n        {\\n            if (hs.Contains(c))\\n                return c;\\n            hs.Add(c);\\n        }\\n        return \\' \\';\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public char RepeatedCharacter(string s) \\n    {\\n        HashSet<int> hs = new HashSet<int>();\\n        foreach (char c in s)\\n        {\\n            if (hs.Contains(c))\\n                return c;\\n            hs.Add(c);\\n        }\\n        return \\' \\';\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2324675,
                "title": "very-easy-and-simple-to-understand-c-solution",
                "content": "<b>Up Vote if you like the solution\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<bool> f(26, 0);\\n        for(auto c:s){\\n            if(f[c-\\'a\\'] == true) return c;\\n            f[c-\\'a\\'] = 1;\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<bool> f(26, 0);\\n        for(auto c:s){\\n            if(f[c-\\'a\\'] == true) return c;\\n            f[c-\\'a\\'] = 1;\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2324635,
                "title": "java-basic-approach-n-time-o-n-space",
                "content": "class Solution {\\n    public char repeatedCharacter(String s) {\\n        \\n        Set<Character> st=new HashSet<>();      // he we take a dataStructre to keep track of visited Character  (we take set because TC = 1 of contains Function in set)\\n        \\n        st.add(s.charAt(0));        // adding fist char initially\\n        \\n        for(int i=1;i<s.length();i++){\\n            \\n            if(st.contains(s.charAt(i))) return s.charAt(i);         // if we find the repeating char\\n            else st.add(s.charAt(i));\\n        }\\n        return \\'0\\';\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public char repeatedCharacter(String s) {\\n        \\n        Set<Character> st=new HashSet<>();      // he we take a dataStructre to keep track of visited Character  (we take set because TC = 1 of contains Function in set)\\n        \\n        st.add(s.charAt(0));        // adding fist char initially\\n        \\n        for(int i=1;i<s.length();i++){\\n            \\n            if(st.contains(s.charAt(i))) return s.charAt(i);         // if we find the repeating char\\n            else st.add(s.charAt(i));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3978764,
                "title": "100-faster-solution",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int n = s.length();\\n        char ans;\\n\\n        unordered_map<char,int> mp;\\n\\n        for(int i=0;i<n;i++) {\\n            mp[s[i]]++;\\n\\n            if(mp[s[i]] == 2) {\\n                return s[i];\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int n = s.length();\\n        char ans;\\n\\n        unordered_map<char,int> mp;\\n\\n        for(int i=0;i<n;i++) {\\n            mp[s[i]]++;\\n\\n            if(mp[s[i]] == 2) {\\n                return s[i];\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3936507,
                "title": "optimised-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char, int> mp;\\n\\n        for(int i=0; i<size(s); i++)\\n        {\\n            mp[s[i]]++;\\n            \\n            if(mp[s[i]] == 2)\\n                return s[i];\\n        }\\n        return -1;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char, int> mp;\\n\\n        for(int i=0; i<size(s); i++)\\n        {\\n            mp[s[i]]++;\\n            \\n            if(mp[s[i]] == 2)\\n                return s[i];\\n        }\\n        return -1;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836358,
                "title": "using-unordered-map-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char, int> ump;\\n        for(int i = 0; i<s.size(); i++ ){\\n            ump[s[i]]++;\\n            if( ump[s[i]] == 2 ) {\\n                return s[i];\\n            }\\n        }\\n\\n        return \\'a\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char, int> ump;\\n        for(int i = 0; i<s.size(); i++ ){\\n            ump[s[i]]++;\\n            if( ump[s[i]] == 2 ) {\\n                return s[i];\\n            }\\n        }\\n\\n        return \\'a\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3674718,
                "title": "c-clean-and-easy-code",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int n=s.length();\\n        unordered_map<char,int> mp;\\n        char ch;\\n        for(int i=0;i<n;i++){\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2){\\n                ch=s[i];\\n                break;\\n            }\\n        }\\n        return ch;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int n=s.length();\\n        unordered_map<char,int> mp;\\n        char ch;\\n        for(int i=0;i<n;i++){\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2){\\n                ch=s[i];\\n                break;\\n            }\\n        }\\n        return ch;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3544438,
                "title": "java-beats-100-o-1-space-o-n-time-explanation",
                "content": "# Intuition\\nTo find the first letter that appears twice in the string, we can iterate over the characters in the string and keep track of which letters have been seen. Once we encounter a letter that has already been seen, we return it as the answer.\\n\\n# Approach\\n1. We can use an array of booleans, **\\'letters\\'**, of size 26 to represent each letter of the alphabet. The index of each letter is calculated by subtracting **\\'a\\'** from the character value, as \\'a\\' has an **ASCII value of 97**.\\n2. Initialize all elements of the **\\'letters\\'** array to **\\'false\\'**.\\n3. Iterate through each character in the input string **\\'s\\'**.\\n4. For each character, check if the corresponding element in the **\\'letters\\'** array is **\\'true\\'**. If it is, return the character as it is the first letter that appears twice.\\n5. If the corresponding element is **\\'false\\'**, set it to **\\'true\\'** to mark that the letter has been seen.\\n6. If no letter appears twice, return a space character **\\' \\'**.\\n\\n# Complexity\\n- Time complexity:\\n\\nThe solution iterates through each character in the input string s, which takes **O(n)** time, where n is the length of the string. Accessing and updating the boolean array elements also takes constant time. Therefore, the overall time complexity is **O(n)**.\\n\\n\\n- Space complexity:\\n\\nThe solution uses a boolean array of size 26 to represent each letter of the alphabet. Hence, the space complexity is O(26), which simplifies to **O(1)** as it is a **constant size**.\\n\\n# Code\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        boolean[] letters = new boolean[26]; // Represents each letter of the alphabet\\n    \\n        for (int i = 0; i < s.length(); i++) {\\n            int index = s.charAt(i) - \\'a\\'; // Calculate the index of the current character\\n            \\n            if (letters[index]) {\\n                return s.charAt(i); // Found the first repeated letter\\n            } else {\\n                letters[index] = true; // Mark the letter as seen\\n            }\\n        }\\n\\n        return \\' \\'; // No repeated letter found\\n    }\\n}\\n```\\n\\n- **\"Please upvote if you found the solution helpful. Thank you!\"**\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        boolean[] letters = new boolean[26]; // Represents each letter of the alphabet\\n    \\n        for (int i = 0; i < s.length(); i++) {\\n            int index = s.charAt(i) - \\'a\\'; // Calculate the index of the current character\\n            \\n            if (letters[index]) {\\n                return s.charAt(i); // Found the first repeated letter\\n            } else {\\n                letters[index] = true; // Mark the letter as seen\\n            }\\n        }\\n\\n        return \\' \\'; // No repeated letter found\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3539726,
                "title": "simple-hashmap-solution-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem states there is guaranteed to be a duplicate character so\\nwe don\\'t need to worry about many edge cases. Create an empty hashmap,\\ncheck if the current letter is in your hashmap which is a constant time lookup. If it is, return the letter as it is a duplicate, if not add the letter as a key to your hashmap.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        mymap = {}\\n        for letter in s:\\n            if letter in mymap:\\n                return letter\\n            else:\\n                mymap[letter] = 1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        mymap = {}\\n        for letter in s:\\n            if letter in mymap:\\n                return letter\\n            else:\\n                mymap[letter] = 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3428189,
                "title": "5-line-java-code-beats-100-very-easy-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n      Set<Character> ans=new HashSet();\\n      for(char c :s.toCharArray())\\n      {\\n        if(!ans.add(c))\\n          return c;\\n      }\\n      return \\'a\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n      Set<Character> ans=new HashSet();\\n      for(char c :s.toCharArray())\\n      {\\n        if(!ans.add(c))\\n          return c;\\n      }\\n      return \\'a\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3359494,
                "title": "java-beats-100-0ms",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        HashMap<Character, Integer> hmap = new HashMap<>();\\n        for(char c:s.toCharArray())\\n        {\\n            if(hmap.containsKey(c))\\n            return c;\\n            else\\n            hmap.put(c, 1);\\n        }\\n        return \\' \\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "Hash Function"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        HashMap<Character, Integer> hmap = new HashMap<>();\\n        for(char c:s.toCharArray())\\n        {\\n            if(hmap.containsKey(c))\\n            return c;\\n            else\\n            hmap.put(c, 1);\\n        }\\n        return \\' \\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3293075,
                "title": "c-easy-solution-using-unordered-set",
                "content": "\\n# Complexity\\n- Time complexity:O(n*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_set<char>st;\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n            {\\n                if(st.find(s[i])!=st.end())\\n                return s[i];\\n                else\\n                st.insert(s[i]);\\n           \\n            }\\n        return {};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_set<char>st;\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n            {\\n                if(st.find(s[i])!=st.end())\\n                return s[i];\\n                else\\n                st.insert(s[i]);\\n           \\n            }\\n        return {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3293017,
                "title": "c-optimised-solution",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int>h(27,0);\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n            {    \\n                if(h[s[i]-\\'`\\']==0)\\n                {\\n                    h[s[i]-\\'`\\']++;\\n                }\\n                else if(h[s[i]-\\'`\\']==1)\\n                {\\n                    return s[i];\\n                }\\n            }\\n        return {};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int>h(27,0);\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n            {    \\n                if(h[s[i]-\\'`\\']==0)\\n                {\\n                    h[s[i]-\\'`\\']++;\\n                }\\n                else if(h[s[i]-\\'`\\']==1)\\n                {\\n                    return s[i];\\n                }\\n            }\\n        return {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3266002,
                "title": "easy-approach-4-lines-code-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2) return s[i];\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2) return s[i];\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3234338,
                "title": "c-solution-beats-100-runtime-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n\\n    int mini=INT_MAX;\\n    for(int i=0;i<s.size();i++)\\n    {\\n        for(int j=i+1;j<s.size();j++)\\n        {\\n            if(s[i]==s[j])\\n            {\\n                mini=min(mini,j);\\n            }\\n        }\\n    }\\nreturn s[mini];\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n\\n    int mini=INT_MAX;\\n    for(int i=0;i<s.size();i++)\\n    {\\n        for(int j=i+1;j<s.size();j++)\\n        {\\n            if(s[i]==s[j])\\n            {\\n                mini=min(mini,j);\\n            }\\n        }\\n    }\\nreturn s[mini];\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3201666,
                "title": "beats-77-4",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        l=\\'\\'\\n        for i in range(len(s)):\\n            if s[i] in l:\\n                return s[i]\\n            else:\\n                l=l+s[i]\\n        return l        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        l=\\'\\'\\n        for i in range(len(s)):\\n            if s[i] in l:\\n                return s[i]\\n            else:\\n                l=l+s[i]\\n        return l        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3168426,
                "title": "beats-78-52-first-letter-to-appear-twice",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        l=[]\\n        for i in s:\\n            if i in l:\\n                return i\\n            else:\\n                l.append(i)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        l=[]\\n        for i in s:\\n            if i in l:\\n                return i\\n            else:\\n                l.append(i)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3119060,
                "title": "rust-2-line",
                "content": "```\\nimpl Solution {\\n    pub fn repeated_character(s: String) -> char {\\n        let mut st = std::collections::HashSet::new();\\n        s.chars().find(|&c| !st.insert(c)).unwrap()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn repeated_character(s: String) -> char {\\n        let mut st = std::collections::HashSet::new();\\n        s.chars().find(|&c| !st.insert(c)).unwrap()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3068709,
                "title": "basic-solution-using-set-beats-99-solutions",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing set in python beats 99% of solutions. if element is present in set then return the element as it is the first repeating element in the array add th eelement in the set.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def repeatedCharacter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: str\\n        \"\"\"\\n        ss=set()\\n        for i in range(len(s)):\\n            if s[i] in ss:\\n                return s[i]\\n            else:\\n                ss.add(s[i])\\n        return -1\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Python ML"
                ],
                "code": "```\\nclass Solution(object):\\n    def repeatedCharacter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: str\\n        \"\"\"\\n        ss=set()\\n        for i in range(len(s)):\\n            if s[i] in ss:\\n                return s[i]\\n            else:\\n                ss.add(s[i])\\n        return -1\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3033659,
                "title": "efficient-c-solution-using-hash-table-o-n-time-o-1-space",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int>hash(26,-1);\\n        for(int i=0;i<s.length();i++){\\n            if(hash[s[i]-97]!=-1){\\n                return s[hash[s[i]-97]];\\n            }\\n            hash[s[i]-97]=i;\\n        }\\n        return \\'-1\\';\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int>hash(26,-1);\\n        for(int i=0;i<s.length();i++){\\n            if(hash[s[i]-97]!=-1){\\n                return s[hash[s[i]-97]];\\n            }\\n            hash[s[i]-97]=i;\\n        }\\n        return \\'-1\\';\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3031001,
                "title": "100-beats-java-solution-for-java-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing set in java\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO{1}\\n\\n# Code\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Set <Character> set = new HashSet<>();\\n        for(int i = 0 ; i<s.length(); i++){\\n            if(!set.add(s.charAt(i))) return s.charAt(i);\\n        }\\n        return \\'a\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Set <Character> set = new HashSet<>();\\n        for(int i = 0 ; i<s.length(); i++){\\n            if(!set.add(s.charAt(i))) return s.charAt(i);\\n        }\\n        return \\'a\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2975453,
                "title": "easy-c-code-runtime-0ms-beats-100",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        map<char,int> mp;\\n        for(int i=0;s.size();i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2)\\n            {\\n                return s[i];\\n            }\\n        }\\n        return \\' \\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        map<char,int> mp;\\n        for(int i=0;s.size();i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2)\\n            {\\n                return s[i];\\n            }\\n        }\\n        return \\' \\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2937034,
                "title": "python3-using-hash-table",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        map=defaultdict(int)\\n        for i in s:\\n            map[i]+=1\\n            if map[i]>=2:\\n                return i\\n            \\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        map=defaultdict(int)\\n        for i in s:\\n            map[i]+=1\\n            if map[i]>=2:\\n                return i\\n            \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2880682,
                "title": "javascript-2-solutions-brute-force-using-set-explained",
                "content": "**Approach #1: Brute Force**\\n\\n**Intuition:**\\n* For each chacter, we check all the characters before it to know if we already seen it before.\\n\\n```\\n// Time complexity: O(n\\xB2)\\n// Space complexity: O(1)\\n\\nconst repeatedCharacter = function(s) {\\n\\n\\tfor (let i = 0; i < s.length; i++) {\\n\\t\\tfor (let j = 0; j < i; j++) {\\n\\t\\t\\tif (s[i] === s[j]) {\\n\\t\\t\\t\\treturn s[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn \\'\\\\0\\';\\n};\\n```\\n\\n**Approach #2: Using HashSet**\\n\\n**Intuition:**\\n* Create Hashset to store each seen character from String.\\n* For each character, if it is present in HashSet, return it.\\n* Else add it to HashSet.\\n\\n```\\n// Time complexity: O(n)\\n// Space complexity: O(n)\\n\\nconst repeatedCharacter = function(s) {\\n\\tconst seen = new Set();\\n\\t\\n\\tfor (const letter of s) {\\n\\t\\tif (seen.has(letter))\\n\\t\\t\\treturn letter;\\n\\t\\t\\n\\t\\tseen.add(letter);\\n\\t}\\n\\t\\n\\treturn \\'\\\\0\\';\\n};\\n```\\n\\n**Please upvote if you find this solution useful. Happy Coding!**",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Set"
                ],
                "code": "```\\n// Time complexity: O(n\\xB2)\\n// Space complexity: O(1)\\n\\nconst repeatedCharacter = function(s) {\\n\\n\\tfor (let i = 0; i < s.length; i++) {\\n\\t\\tfor (let j = 0; j < i; j++) {\\n\\t\\t\\tif (s[i] === s[j]) {\\n\\t\\t\\t\\treturn s[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn \\'\\\\0\\';\\n};\\n```\n```\\n// Time complexity: O(n)\\n// Space complexity: O(n)\\n\\nconst repeatedCharacter = function(s) {\\n\\tconst seen = new Set();\\n\\t\\n\\tfor (const letter of s) {\\n\\t\\tif (seen.has(letter))\\n\\t\\t\\treturn letter;\\n\\t\\t\\n\\t\\tseen.add(letter);\\n\\t}\\n\\t\\n\\treturn \\'\\\\0\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2874052,
                "title": "runtime-0-ms-faster-than-100-00-of-java-online-submissions-for-first-letter-to-appear-twice",
                "content": "# \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\n```\\n\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int []freq=new int[26];\\n        for(char c:s.toCharArray())\\n        {\\n            if(freq[c-\\'a\\']==1)\\n                return c;\\n            freq[c-\\'a\\']++;\\n        }\\n        return \\'#\\';\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int []freq=new int[26];\\n        for(char c:s.toCharArray())\\n        {\\n            if(freq[c-\\'a\\']==1)\\n                return c;\\n            freq[c-\\'a\\']++;\\n        }\\n        return \\'#\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2846251,
                "title": "c-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector <bool> v(26,false);\\n        for(char a:s){\\n           if(v[a-\\'a\\']) return a;\\n        v[a-\\'a\\']=1;\\n        }\\n        return \\'a\\'; \\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector <bool> v(26,false);\\n        for(char a:s){\\n           if(v[a-\\'a\\']) return a;\\n        v[a-\\'a\\']=1;\\n        }\\n        return \\'a\\'; \\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2757921,
                "title": "simple-kotlin-solution-using-hashset",
                "content": "```\\nfun repeatedCharacter(s: String): Char {\\n    val hash = HashSet<Char>()\\n    for (i in 0..s.length) {\\n        if (hash.contains(s[i])) {\\n            return s[i]\\n        }\\n        hash.add(s[i])\\n    }\\n    return \\' \\'\\n}\\n\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nfun repeatedCharacter(s: String): Char {\\n    val hash = HashSet<Char>()\\n    for (i in 0..s.length) {\\n        if (hash.contains(s[i])) {\\n            return s[i]\\n        }\\n        hash.add(s[i])\\n    }\\n    return \\' \\'\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2702989,
                "title": "c-faster-than-100",
                "content": "![image](https://assets.leetcode.com/users/images/192ce89b-3828-4a75-a280-3a1200c46cb0_1665759368.339316.png)\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/192ce89b-3828-4a75-a280-3a1200c46cb0_1665759368.339316.png)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2680296,
                "title": "java-faster-than-100-3-solutions",
                "content": "Solution 1: Faster than 100%\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        for(int i=1; i<s.length(); i++){\\n            if(s.indexOf(s.charAt(i))!=i){\\n                return s.charAt(i);\\n            }\\n        }\\n        return \\' \\';\\n    }\\n}\\n```\\n\\nSolution 2: Faster than 100%\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {       \\n        for(int i=1; i<s.length(); i++){\\n            for(int j=0; j<i; j++){\\n                if(s.charAt(i) == s.charAt(j))\\n                    return s.charAt(i);\\n            }\\n        }\\n        return \\' \\';\\n    }\\n}\\n```\\n\\nSolution 3: Faster than 14%\\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {       \\n        for(int i=1; i<s.length(); i++){\\n            if(s.substring(0,i).contains(String.valueOf(s.charAt(i))))\\n                return s.charAt(i);\\n        }\\n        return \\' \\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        for(int i=1; i<s.length(); i++){\\n            if(s.indexOf(s.charAt(i))!=i){\\n                return s.charAt(i);\\n            }\\n        }\\n        return \\' \\';\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {       \\n        for(int i=1; i<s.length(); i++){\\n            for(int j=0; j<i; j++){\\n                if(s.charAt(i) == s.charAt(j))\\n                    return s.charAt(i);\\n            }\\n        }\\n        return \\' \\';\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public char repeatedCharacter(String s) {       \\n        for(int i=1; i<s.length(); i++){\\n            if(s.substring(0,i).contains(String.valueOf(s.charAt(i))))\\n                return s.charAt(i);\\n        }\\n        return \\' \\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2637247,
                "title": "simple-python-solution-beating-95",
                "content": "Use a set. If the char is already in set, then it is the first char that happens twice. Otherwise, put it into the set.\\n\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        s_set = set()\\n        for c in s:\\n            if c in s_set:\\n                return c            \\n            s_set.add(c)\\n```",
                "solutionTags": [
                    "Python",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        s_set = set()\\n        for c in s:\\n            if c in s_set:\\n                return c            \\n            s_set.add(c)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2631845,
                "title": "python-with-time-and-space-complexity",
                "content": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        hashset = set()\\n        for char in s:\\n            if char in hashset:\\n                return char\\n            hashset.add(char)\\n```\\n\\n#O(n) time\\n#O(1) space; hashset can contain at most 26 element \\n           ``",
                "solutionTags": [
                    "Python",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        hashset = set()\\n        for char in s:\\n            if char in hashset:\\n                return char\\n            hashset.add(char)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2600521,
                "title": "c-easy-solution",
                "content": "class Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        \\n\\t\\tchar c;\\n       unordered_map<char,int> m;\\n        for(int i=0;i<s.size();i++){\\n            m[s[i]]++;\\n             if(m[s[i]]==2){\\n                c= s[i];\\n                break;\\n            }\\n        }\\n        return c;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        \\n\\t\\tchar c;\\n       unordered_map<char,int> m;\\n        for(int i=0;i<s.size();i++){\\n            m[s[i]]++;\\n             if(m[s[i]]==2){\\n                c= s[i];\\n                break;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2593626,
                "title": "python-solution-using-get",
                "content": "Python solution using dictionary and .get() : ) Please enjoy! I hope this helps someone!~ ^-^\\n\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n\\t\\n        count = dict()   # Initialising an empty dictionary\\n        s_list = list(s) # Transforming input str into a list\\n        for i in s_list: # Iterating through elements of our newly composed list (s_list)\\n            count[i] = count.get(i,0) + 1 # Using .get() to return value of \\'i\\', if value=\\'None\\', adds key=i with corresponding value=0\\n            if count[i] == 2: # Conditional on whether a key has value 2 (has the char come up twice)\\n                return i      # Returning first character to appear twice\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n\\t\\n        count = dict()   # Initialising an empty dictionary\\n        s_list = list(s) # Transforming input str into a list\\n        for i in s_list: # Iterating through elements of our newly composed list (s_list)\\n            count[i] = count.get(i,0) + 1 # Using .get() to return value of \\'i\\', if value=\\'None\\', adds key=i with corresponding value=0\\n            if count[i] == 2: # Conditional on whether a key has value 2 (has the char come up twice)\\n                return i      # Returning first character to appear twice\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2589096,
                "title": "98-33-senior-developer-javascript-js-2022",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {character}\\n */\\nvar repeatedCharacter = function(s) {\\n    \\n    let hm = {}\\n    \\n    for(let i=0; i < s.length; i++){\\n        \\n        if(s[i] in hm) return s[i];\\n        else hm[s[i]] = 1;\\n        \\n    }\\n    \\n    return -1;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {character}\\n */\\nvar repeatedCharacter = function(s) {\\n    \\n    let hm = {}\\n    \\n    for(let i=0; i < s.length; i++){\\n        \\n        if(s[i] in hm) return s[i];\\n        else hm[s[i]] = 1;\\n        \\n    }\\n    \\n    return -1;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2582529,
                "title": "java-solution-100-faster-96-memory-efficient",
                "content": "\\n```\\nclass Solution {\\n\\t//using array to count if a letter is repeated\\n    public char repeatedCharacter(String s) {\\n        boolean[] letters = new boolean[26];\\n        for (int i = 0; i < s.length(); i++) {\\n            int idx = s.charAt(i) - \\'a\\';\\n            if (letters[idx]) {\\n                return s.charAt(i);\\n            }\\n            letters[idx] = true;\\n        }\\n        return \\' \\';\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\t//using array to count if a letter is repeated\\n    public char repeatedCharacter(String s) {\\n        boolean[] letters = new boolean[26];\\n        for (int i = 0; i < s.length(); i++) {\\n            int idx = s.charAt(i) - \\'a\\';\\n            if (letters[idx]) {\\n                return s.charAt(i);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2576006,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {character}\\n */\\nvar repeatedCharacter = function(s) {\\n    let set = new Set();\\n    for(let i=0; i<s.length; i++){\\n        if(set.has(s[i])) {\\n            return s[i];\\n        } else {\\n            set.add(s[i]);\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {character}\\n */\\nvar repeatedCharacter = function(s) {\\n    let set = new Set();\\n    for(let i=0; i<s.length; i++){\\n        if(set.has(s[i])) {\\n            return s[i];\\n        } else {\\n            set.add(s[i]);\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2572619,
                "title": "java-using-array-with-comments",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        // init ans to 0\\n        char ans = 0;\\n        // init int array charCount of size 26\\n        int[] charCount = new int[26];\\n        \\n        // for each char in s\\n        for (char c : s.toCharArray()) {\\n            // increase charCount at char minus \\'a\\' by 1\\n            charCount[c - \\'a\\']++;\\n            // if charCount at char minus \\'a\\' equals 2\\n            if (charCount[c - \\'a\\'] == 2) {\\n                // set ans to char\\n                ans = c;\\n                // break\\n                break;\\n            }\\n        }\\n        \\n        // return ans\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        // init ans to 0\\n        char ans = 0;\\n        // init int array charCount of size 26\\n        int[] charCount = new int[26];\\n        \\n        // for each char in s\\n        for (char c : s.toCharArray()) {\\n            // increase charCount at char minus \\'a\\' by 1\\n            charCount[c - \\'a\\']++;\\n            // if charCount at char minus \\'a\\' equals 2\\n            if (charCount[c - \\'a\\'] == 2) {\\n                // set ans to char\\n                ans = c;\\n                // break\\n                break;\\n            }\\n        }\\n        \\n        // return ans\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2562364,
                "title": "rust-0-ms-functional-style-one-liner-with-hashset-with-detailed-comments",
                "content": "This [solution](https://leetcode.com/submissions/detail/797110866/) employs a functional-style approach using HashSet to find a first letter that appears twice. It demonstrated **0 ms runtime (100%)** and used **2.0 MB memory (61.11%)**. Detailed comments are provided.\\n\\n**IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n```\\nuse std::collections::HashSet;\\n\\nimpl Solution \\n{\\n    pub fn repeated_character(s: String) -> char \\n    {\\n        // [1] appearance of letters is tracked via HashSet\\n        let mut ch: HashSet<char> = HashSet::with_capacity(26);\\n        \\n        // [2] skip until the first repeated character is found\\n        s.chars().skip_while(|&c| ch.insert(c)).next().unwrap()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::collections::HashSet;\\n\\nimpl Solution \\n{\\n    pub fn repeated_character(s: String) -> char \\n    {\\n        // [1] appearance of letters is tracked via HashSet\\n        let mut ch: HashSet<char> = HashSet::with_capacity(26);\\n        \\n        // [2] skip until the first repeated character is found\\n        s.chars().skip_while(|&c| ch.insert(c)).next().unwrap()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2560804,
                "title": "easy-cpp-approach",
                "content": "unordered_map<char, int> m;\\n        \\n        for(int i = 0; i < s.length();i++){\\n            if(m[s[i]] == 1){\\n                // if the character already occured once then return  it.......\\n                return s[i];\\n            }else{\\n                // if its first time intialize it 1\\n                m[s[i]]++;\\n            }\\n        }\\n        // default return\\n        return \\'a\\';",
                "solutionTags": [
                    "C++"
                ],
                "code": "unordered_map<char, int> m;\\n        \\n        for(int i = 0; i < s.length();i++){\\n            if(m[s[i]] == 1){\\n                // if the character already occured once then return  it.......\\n                return s[i];\\n            }else{\\n                // if its first time intialize it 1\\n                m[s[i]]++;\\n            }\\n        }\\n        // default return\\n        return \\'a\\';",
                "codeTag": "Unknown"
            },
            {
                "id": 2553494,
                "title": "java-solution-1ms",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Set<Character> set = new HashSet<>();\\n        char ch = s.charAt(0);\\n        int x =1;\\n        while(set.add(ch)){\\n            ch = s.charAt(x++);\\n        }\\n        return ch;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Set<Character> set = new HashSet<>();\\n        char ch = s.charAt(0);\\n        int x =1;\\n        while(set.add(ch)){\\n            ch = s.charAt(x++);\\n        }\\n        return ch;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2531089,
                "title": "c-hashmap-most-efficient-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        map<char, int> mp;\\n        for(int i = 0 ; i < s.length(); i++)\\n        {\\n            if(mp.find(s[i]) != mp.end())\\n                return s[i];\\n            mp[s[i]]++;\\n        }\\n        return \\' \\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        map<char, int> mp;\\n        for(int i = 0 ; i < s.length(); i++)\\n        {\\n            if(mp.find(s[i]) != mp.end())\\n                return s[i];\\n            mp[s[i]]++;\\n        }\\n        return \\' \\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2517973,
                "title": "using-minimal-space-boolean-26",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        boolean[] letters = new boolean[26];\\n        \\n        for (int i = 0; i < s.length(); i++){\\n            if (letters[s.charAt(i) - \\'a\\'])\\n                return s.charAt(i);\\n            \\n            letters[s.charAt(i) - \\'a\\'] = true;\\n        }\\n        \\n        return s.charAt(s.length() - 1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        boolean[] letters = new boolean[26];\\n        \\n        for (int i = 0; i < s.length(); i++){\\n            if (letters[s.charAt(i) - \\'a\\'])\\n                return s.charAt(i);\\n            \\n            letters[s.charAt(i) - \\'a\\'] = true;\\n        }\\n        \\n        return s.charAt(s.length() - 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2504043,
                "title": "java-easy-hashset-solution-beats-100",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        HashSet<Character> seen=new HashSet<>();\\n        \\n        for(char x : s.toCharArray()){\\n            if(seen.contains(x)) return x;\\n            else seen.add(x);\\n        }\\n        return \\'a\\'; // Code never reaches here.\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        HashSet<Character> seen=new HashSet<>();\\n        \\n        for(char x : s.toCharArray()){\\n            if(seen.contains(x)) return x;\\n            else seen.add(x);\\n        }\\n        return \\'a\\'; // Code never reaches here.\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2490102,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n       unordered_map<char,int>mp;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2)\\n            {\\n                return s[i];\\n            }\\n        }\\n        return \\'.\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n       unordered_map<char,int>mp;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            mp[s[i]]++;\\n            if(mp[s[i]]==2)\\n            {\\n                return s[i];\\n            }\\n        }\\n        return \\'.\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2473678,
                "title": "python-dict-easy-approach-using-dictionary",
                "content": "class Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        d=dict()\\n        for i in s:\\n            if i not in d:\\n                d.update({i:1})\\n            elif i in d:\\n                d[i]+=1\\n            for i in d:\\n                if d.get(i)==2:\\n                    return i",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        d=dict()\\n        for i in s:\\n            if i not in d:\\n                d.update({i:1}",
                "codeTag": "Java"
            },
            {
                "id": 2472027,
                "title": "java-solution-easy-using-hashset",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for (char c : s.toCharArray()) {\\n            if (set.contains(c)) return c;\\n            set.add(c);\\n        }\\n\\n        return \\' \\';\\n    }\\n}\\n\\n// TC: O(n), SC: O(n)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for (char c : s.toCharArray()) {\\n            if (set.contains(c)) return c;\\n            set.add(c);\\n        }\\n\\n        return \\' \\';\\n    }\\n}\\n\\n// TC: O(n), SC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2459229,
                "title": "java-solution-without-using-hash-only-chars-and-array-solution",
                "content": "class Solution {\\n    public char repeatedCharacter(String s) {\\n        char[] ch=s.toCharArray();\\n        int[] a=new int[26];\\n        for(char i: ch)\\n        {\\n            a[i-\\'a\\']++; #Increasing a array when for each charecter\\n\\t\\t\\t\\n            if(a[i-\\'a\\']==2)# when you find first 2 count of a charecter in a array it will return the function\\n                return i;\\n        }\\n        return \\'o\\';\\n        \\n    }\\n}",
                "solutionTags": [
                    "Array"
                ],
                "code": "class Solution {\\n    public char repeatedCharacter(String s) {\\n        char[] ch=s.toCharArray();\\n        int[] a=new int[26];\\n        for(char i: ch)\\n        {\\n            a[i-\\'a\\']++; #Increasing a array when for each charecter\\n\\t\\t\\t\\n            if(a[i-\\'a\\']==2)# when you find first 2 count of a charecter in a array it will return the function\\n                return i;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2451242,
                "title": "c-simple-solution-using-set",
                "content": "First Character to Appear Twice : A Simple solution using set in C++.\\n\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        set<char> st;\\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(st.find(s[i]) != st.end())\\n            {\\n                return s[i];\\n            }\\n            st.insert(s[i]);\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        set<char> st;\\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(st.find(s[i]) != st.end())\\n            {\\n                return s[i];\\n            }\\n            st.insert(s[i]);\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2439379,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        for(int i=1;i<s.length();i++)\\n        {\\n            for(int j=i-1;j>=0;j--)\\n            {\\n                if(s[j]==s[i])\\n                    return s[j];\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        for(int i=1;i<s.length();i++)\\n        {\\n            for(int j=i-1;j>=0;j--)\\n            {\\n                if(s[j]==s[i])\\n                    return s[j];\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437914,
                "title": "java-0ms-solution-array-only",
                "content": "```\\npublic static char firstUniqChar(String s)\\n            {\\n                int[] aa = new int[26];\\n                for(Character i : s.toCharArray())\\n                {\\n                    ++aa[i-\\'a\\'];\\n                    if(aa[i-\\'a\\']==2) return i;\\n                }\\n                return 0;\\n            }\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\npublic static char firstUniqChar(String s)\\n            {\\n                int[] aa = new int[26];\\n                for(Character i : s.toCharArray())\\n                {\\n                    ++aa[i-\\'a\\'];\\n                    if(aa[i-\\'a\\']==2) return i;\\n                }\\n                return 0;\\n            }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2435826,
                "title": "c-beats-100-using-map",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char, int> m;\\n        for (char& c : s) {\\n            if(m[c]==1) return c;\\n            m[c]++;\\n        }\\n        return \\'\\\\0\\';\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/c57f04a0-649a-40a0-8d75-7a6a362c399a_1660676382.6725557.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char, int> m;\\n        for (char& c : s) {\\n            if(m[c]==1) return c;\\n            m[c]++;\\n        }\\n        return \\'\\\\0\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2434711,
                "title": "java-1ms-solution",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Map<Character, Integer> map = new HashMap<>(s.length());\\n        for (int i = 0; i < s.length(); i++) {\\n            if (map.containsKey(s.charAt(i))) {\\n                return s.charAt(i);\\n            } else {\\n                map.put(s.charAt(i), 1);\\n            }\\n        }\\n        return \\' \\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        Map<Character, Integer> map = new HashMap<>(s.length());\\n        for (int i = 0; i < s.length(); i++) {\\n            if (map.containsKey(s.charAt(i))) {\\n                return s.charAt(i);\\n            } else {\\n                map.put(s.charAt(i), 1);\\n            }\\n        }\\n        return \\' \\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2434426,
                "title": "intuitive-golang-nd-python-beats-100",
                "content": "It is given that ` s` consists of lowercase English letters.\\nSo quite intuitively, \\n1. We will **traverse throught `s` and maintain count for the characters at their corrosponding index in a 26-length integer array**.\\n2. While doing the above(**during each iteration**), we will **check if count for a character is 2**. **If the count is 2** then it is a no-brainer that the character appeared twice for the first time. So we **return that character**.\\n\\nThe **Time complexity** of the algorithm is **O(n)** where n is the length of string `s`\\nIt can be argued that the **Space complexity** is constant(**O(1)**) as we need a 26-length integer array.\\n\\n**Golang Code:**\\n```\\nfunc repeatedCharacter(s string) byte {\\n    \\n    ref, n := make([]int,26), len(s)\\n    \\n    var ans byte\\n    \\n    for i := 0; i < n; i++ {\\n        \\n        curi := int(s[i]) - int(\\'a\\')\\n        \\n        ref[curi]++\\n        \\n        if ref[curi] == 2 {\\n            ans = s[i]\\n            break\\n        }\\n        \\n    }\\n    \\n    return ans\\n    \\n    \\n}\\n```\\nRuntime: 0 ms, faster than 100.00% of Go online submissions for First Letter to Appear Twice.\\nMemory Usage: 2 MB, less than 34.75% of Go online submissions for First Letter to Appear Twice.\\n\\n**Python Code:**\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        \\n        ref, n = [0] * 26, len(s)\\n        \\n        for i in range(n):\\n            char = s[i]\\n            curi = ord(char) - ord(\\'a\\')\\n            ref[curi] += 1\\n            \\n            if ref[curi] == 2:\\n                return char\\n```\\nRuntime: 40 ms, faster than 72.21% of Python3 online submissions for First Letter to Appear Twice.\\nMemory Usage: 13.9 MB, less than 52.07% of Python3 online submissions for First Letter to Appear Twice.\\n\\n\\n",
                "solutionTags": [
                    "Python",
                    "Go"
                ],
                "code": "```\\nfunc repeatedCharacter(s string) byte {\\n    \\n    ref, n := make([]int,26), len(s)\\n    \\n    var ans byte\\n    \\n    for i := 0; i < n; i++ {\\n        \\n        curi := int(s[i]) - int(\\'a\\')\\n        \\n        ref[curi]++\\n        \\n        if ref[curi] == 2 {\\n            ans = s[i]\\n            break\\n        }\\n        \\n    }\\n    \\n    return ans\\n    \\n    \\n}\\n```\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        \\n        ref, n = [0] * 26, len(s)\\n        \\n        for i in range(n):\\n            char = s[i]\\n            curi = ord(char) - ord(\\'a\\')\\n            ref[curi] += 1\\n            \\n            if ref[curi] == 2:\\n                return char\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2434352,
                "title": "python-easy-solution-using-map-o-n",
                "content": "Simple python solution\\nused hashmap\\ncheck if it appears twice as u traverse the list\\nbest case- O(2)\\nworst case- O(n)\\n```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        re=dict()\\n        for x in s:\\n            if re.get(x)!=None:\\n                re[x]+=1\\n            else:\\n                re[x]=1\\n            if re[x]==2:\\n                return x\\n        return -1\\n            \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def repeatedCharacter(self, s: str) -> str:\\n        re=dict()\\n        for x in s:\\n            if re.get(x)!=None:\\n                re[x]+=1\\n            else:\\n                re[x]=1\\n            if re[x]==2:\\n                return x\\n        return -1\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2432499,
                "title": "simple-c-solution",
                "content": "\\t\\t\\tclass Solution {\\n\\t\\t\\tpublic:\\n\\t\\t\\t\\tchar repeatedCharacter(string s) \\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tmap<char,int> mp;\\n\\t\\t\\t\\t\\tfor(auto x:s)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t   mp[x]++;\\n\\t\\t\\t\\t\\t\\tif(mp[x]==2)\\n\\t\\t\\t\\t\\t\\t\\treturn x;\\n\\t\\t\\t\\t\\t}   \\n\\t\\t\\t\\t\\treturn \\' \\';\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\t\\t\\tpublic:\\n\\t\\t\\t\\tchar repeatedCharacter(string s) \\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tmap<char,int> mp;\\n\\t\\t\\t\\t\\tfor(auto x:s)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t   mp[x]++;\\n\\t\\t\\t\\t\\t\\tif(mp[x]==2)\\n\\t\\t\\t\\t\\t\\t\\treturn x;\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2410836,
                "title": "java-short-easy-solution-using-hashset",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n      HashSet <Character> set = new HashSet<>();\\n      \\n      for(char ch : s.toCharArray()) {\\n        if(!set.add(ch))\\n          return ch;\\n      }\\n      throw new RuntimeException(\"s should contain at least one repeated letter\");\\n      // can\\'t reach to this line, because there must be a letter appearing TWICE\\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n      HashSet <Character> set = new HashSet<>();\\n      \\n      for(char ch : s.toCharArray()) {\\n        if(!set.add(ch))\\n          return ch;\\n      }\\n      throw new RuntimeException(\"s should contain at least one repeated letter\");\\n      // can\\'t reach to this line, because there must be a letter appearing TWICE\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2405325,
                "title": "c-cpp-faster-than-100-simple-logic-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int us[26] = {0};\\n        for(char c : s)\\n        {\\n            if(us[c-\\'a\\'] != 0)\\n                return c;\\n            else\\n                ++us[c-\\'a\\'];\\n        }\\n        \\n        return \\'a\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int us[26] = {0};\\n        for(char c : s)\\n        {\\n            if(us[c-\\'a\\'] != 0)\\n                return c;\\n            else\\n                ++us[c-\\'a\\'];\\n        }\\n        \\n        return \\'a\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2397540,
                "title": "c-0-ms-0-n-time-complexity-using-visited-array",
                "content": "My approach here was to iterate through the string and increase the count of current character in visitedAlphabets array/vector. If we get the count of any character as 2, it will be the required output.\\n\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int> visitedAlphabets(26, 0);\\n        int len = s.size();\\n        \\n        for(int i = 0; i < len; i++){\\n            visitedAlphabets[s[i] - \\'a\\']++;\\n            \\n            if(visitedAlphabets[s[i] - \\'a\\'] == 2)\\n                return s[i];\\n        }\\n        \\n        return \\' \\';\\n    }\\n};\\n```\\n\\nPlease upvote if you llike the solution... ;)",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int> visitedAlphabets(26, 0);\\n        int len = s.size();\\n        \\n        for(int i = 0; i < len; i++){\\n            visitedAlphabets[s[i] - \\'a\\']++;\\n            \\n            if(visitedAlphabets[s[i] - \\'a\\'] == 2)\\n                return s[i];\\n        }\\n        \\n        return \\' \\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2396387,
                "title": "easy-c-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<char>letter;\\n        letter.push_back(s[0]);\\n        int i=1;\\n        while(i<s.size()){\\n            if(find(letter.begin(), letter.end(), s[i])==letter.end()) letter.push_back(s[i]);\\n            else break;\\n            i++;\\n        }\\n        return s[i];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<char>letter;\\n        letter.push_back(s[0]);\\n        int i=1;\\n        while(i<s.size()){\\n            if(find(letter.begin(), letter.end(), s[i])==letter.end()) letter.push_back(s[i]);\\n            else break;\\n            i++;\\n        }\\n        return s[i];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2389953,
                "title": "javascript",
                "content": "```\\nconst repeatedCharacter = s => {\\n    const map = {};\\n    for (let c of s) {\\n        if (map[c] != undefined)\\n            return c;\\n        map[c] = 1;\\n    }\\n    return \\'\\';\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nconst repeatedCharacter = s => {\\n    const map = {};\\n    for (let c of s) {\\n        if (map[c] != undefined)\\n            return c;\\n        map[c] = 1;\\n    }\\n    return \\'\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2388830,
                "title": "c-solution-using-unordered-set",
                "content": "class Solution {\\npublic:\\n    char repeatedCharacter(string str) {\\n        unordered_set<char> s;\\n        \\n        for(char c: str)\\n        {\\n            if(s.find(c)!=s.end())\\n            {\\n                return c;\\n            }\\n            else\\n            {\\n                s.insert(c);\\n            }\\n        }\\n     return -1;   \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    char repeatedCharacter(string str) {\\n        unordered_set<char> s;\\n        \\n        for(char c: str)\\n        {\\n            if(s.find(c)!=s.end())\\n            {\\n                return c;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2384888,
                "title": "java-easy-solutions",
                "content": "```\\nsoln 1;\\n\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int l=s.length();\\n        int i;\\n        int t=0;\\n        for(i=l-1;i>=0;i--)\\n        {\\n            for (int j=i-1;j>=0;j--)\\n            {\\n                if(s.charAt(i)==s.charAt(j))\\n                {\\n                   t=i; \\n                }\\n            }\\n        }\\n        return s.charAt(t);\\n    }\\n}\\n\\n\\n\\nsoln 2:\\n\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int c=1,f=0,t=0;\\n        int l=s.length();\\n        char ar[]=new char [l];\\n        for(int i=0;i<l;i++)\\n        {\\n            char ch=s.charAt(i);\\n            int j=0;\\n            while(j<c)\\n            {\\n                if(ch==ar[j])\\n                {f=1;\\n                 t=i;\\n                 break;\\n                 }    \\n                else\\n                    j++;\\n            }\\n            if(f==1)\\n                break;\\n            else\\n            {\\n                ar[c-1]=ch;\\n                c++;\\n            }\\n        }\\n        \\n        return s.charAt(t);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nsoln 1;\\n\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int l=s.length();\\n        int i;\\n        int t=0;\\n        for(i=l-1;i>=0;i--)\\n        {\\n            for (int j=i-1;j>=0;j--)\\n            {\\n                if(s.charAt(i)==s.charAt(j))\\n                {\\n                   t=i; \\n                }\\n            }\\n        }\\n        return s.charAt(t);\\n    }\\n}\\n\\n\\n\\nsoln 2:\\n\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        int c=1,f=0,t=0;\\n        int l=s.length();\\n        char ar[]=new char [l];\\n        for(int i=0;i<l;i++)\\n        {\\n            char ch=s.charAt(i);\\n            int j=0;\\n            while(j<c)\\n            {\\n                if(ch==ar[j])\\n                {f=1;\\n                 t=i;\\n                 break;\\n                 }    \\n                else\\n                    j++;\\n            }\\n            if(f==1)\\n                break;\\n            else\\n            {\\n                ar[c-1]=ch;\\n                c++;\\n            }\\n        }\\n        \\n        return s.charAt(t);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2375041,
                "title": "o-1-space-bit-manipulations",
                "content": "```\\nclass Solution {\\n   \\n public char repeatedCharacter(String s) {\\n    long appearedCharactersBitFlag = 0;\\n    for (char nextChar : s.toCharArray()) {\\n      if (bitSetForCharacter(appearedCharactersBitFlag, nextChar)) {\\n        return nextChar;\\n      }\\n      appearedCharactersBitFlag = setBitForCharacter(appearedCharactersBitFlag, nextChar);\\n    }\\n    throw new IllegalStateException(\"That should not happen.\");\\n  }\\n\\n  private long setBitForCharacter(long appearedCharactersBitFlag, char nextChar) {\\n    appearedCharactersBitFlag = appearedCharactersBitFlag | 1L << nextChar - \\'a\\';\\n    return appearedCharactersBitFlag;\\n  }\\n\\n  private boolean bitSetForCharacter(long appearedCharactersBitFlag, char c) {\\n    return (appearedCharactersBitFlag | 1L << c - \\'a\\') == appearedCharactersBitFlag;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n   \\n public char repeatedCharacter(String s) {\\n    long appearedCharactersBitFlag = 0;\\n    for (char nextChar : s.toCharArray()) {\\n      if (bitSetForCharacter(appearedCharactersBitFlag, nextChar)) {\\n        return nextChar;\\n      }\\n      appearedCharactersBitFlag = setBitForCharacter(appearedCharactersBitFlag, nextChar);\\n    }\\n    throw new IllegalStateException(\"That should not happen.\");\\n  }\\n\\n  private long setBitForCharacter(long appearedCharactersBitFlag, char nextChar) {\\n    appearedCharactersBitFlag = appearedCharactersBitFlag | 1L << nextChar - \\'a\\';\\n    return appearedCharactersBitFlag;\\n  }\\n\\n  private boolean bitSetForCharacter(long appearedCharactersBitFlag, char c) {\\n    return (appearedCharactersBitFlag | 1L << c - \\'a\\') == appearedCharactersBitFlag;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2371245,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        char ans=\\'a\\';\\n        HashMap<Character,Integer> map = new HashMap<>();\\n        for(int i=0;i<s.length();i++){\\n            char c = s.charAt(i);\\n            if(map.containsKey(c)){\\n                ans =c;\\n                break;\\n            }\\n            else{\\n                map.put(s.charAt(i),1);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        char ans=\\'a\\';\\n        HashMap<Character,Integer> map = new HashMap<>();\\n        for(int i=0;i<s.length();i++){\\n            char c = s.charAt(i);\\n            if(map.containsKey(c)){\\n                ans =c;\\n                break;\\n            }\\n            else{\\n                map.put(s.charAt(i),1);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2361552,
                "title": "c-easy-simple-solution-using-set",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        set<int> st;\\n        char ans;\\n        for(int i = 0; i < s.size(); ++i) {\\n            if(st.find(s[i]) != st.end()) {\\n                ans = s[i];\\n                break;\\n            }\\n            st.insert(s[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        set<int> st;\\n        char ans;\\n        for(int i = 0; i < s.size(); ++i) {\\n            if(st.find(s[i]) != st.end()) {\\n                ans = s[i];\\n                break;\\n            }\\n            st.insert(s[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2359683,
                "title": "c-hashset-o-n-time-explained",
                "content": "\\uD83D\\uDCA1 **Logic**: while iterating the input `string`, just check the `unordered_set<char> set`,\\nif it\\'s already contains that char?\\n\\u2705 **YES ->** just return that char, it\\'s the first repeated character\\n\\u274C **No ->** just add it in the set and move on..\\n\\nAlthough, it\\'s guaranteed that string will have atleast one repeating character, but just for sake of returning something at end of the function, we `return \\'#\\';`\\n\\nPlease upVote \\uD83D\\uDD3C, if it helped :)\\n\\n```\\nchar repeatedCharacter(string s) {\\n    unordered_set<char> set;\\n\\n    for(const char &c : s) {\\n        if(set.count(c) > 0)\\n            return c;\\n\\n        set.insert(c);\\n    }\\n    return \\'#\\'; // if no char is repeated\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nchar repeatedCharacter(string s) {\\n    unordered_set<char> set;\\n\\n    for(const char &c : s) {\\n        if(set.count(c) > 0)\\n            return c;\\n\\n        set.insert(c);\\n    }\\n    return \\'#\\'; // if no char is repeated\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2354240,
                "title": "c-solution-100-faster-no-sets-no-map",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        \\n        vector<int> freq(26, 0);\\n        \\n        for(int i=0; i<s.size(); i++){\\n            \\n            freq[s[i]-\\'a\\']++;\\n            \\n            if(freq[s[i]-\\'a\\'] == 2){\\n               \\n                return s[i];\\n            }\\n        }\\n        \\n        return \\' \\';\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        \\n        vector<int> freq(26, 0);\\n        \\n        for(int i=0; i<s.size(); i++){\\n            \\n            freq[s[i]-\\'a\\']++;\\n            \\n            if(freq[s[i]-\\'a\\'] == 2){\\n               \\n                return s[i];\\n            }\\n        }\\n        \\n        return \\' \\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2352143,
                "title": "c-0ms-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int ch[26]={0};\\n        for(int i=0;i<s.size();i++)\\n        {\\n            ch[s[i]-\\'a\\']++;\\n            if(ch[s[i]-\\'a\\']==2)\\n                return s[i];\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int ch[26]={0};\\n        for(int i=0;i<s.size();i++)\\n        {\\n            ch[s[i]-\\'a\\']++;\\n            if(ch[s[i]-\\'a\\']==2)\\n                return s[i];\\n        }\\n        return \\'a\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2351056,
                "title": "c-100",
                "content": "```\\npublic class Solution {\\n    public char RepeatedCharacter(string s) {\\n        HashSet<char> h = new HashSet<char>();\\n        \\n        \\n        foreach(char c in s)\\n        {\\n            if (!h.Contains(c))\\n            {\\n                h.Add(c);\\n            }\\n            else\\n            {\\n                return c;\\n            }\\n        }\\n        \\n    \\n        return \\' \\';\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public char RepeatedCharacter(string s) {\\n        HashSet<char> h = new HashSet<char>();\\n        \\n        \\n        foreach(char c in s)\\n        {\\n            if (!h.Contains(c))\\n            {\\n                h.Add(c);\\n            }\\n            else\\n            {\\n                return c;\\n            }\\n        }\\n        \\n    \\n        return \\' \\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2349259,
                "title": "c-easy-short-set",
                "content": "![image](https://assets.leetcode.com/users/images/6b359221-64b4-4824-ac0a-f86588e75333_1659077602.7110534.png)\\n\\n**n==s.size()\\nT->O(n) && S->O(n)**\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tchar repeatedCharacter(string s) {\\n\\t\\t\\tunordered_set<int>st;\\n\\t\\t\\tint t;\\n\\t\\t\\tfor(auto i:s){\\n\\t\\t\\t\\tst.insert(i);\\n\\t\\t\\t\\tif(st.size()==t)return i;\\n\\t\\t\\t\\tt=st.size();    \\n\\t\\t\\t}\\n\\t\\t\\treturn \\'-1\\';\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tchar repeatedCharacter(string s) {\\n\\t\\t\\tunordered_set<int>st;\\n\\t\\t\\tint t;\\n\\t\\t\\tfor(auto i:s){\\n\\t\\t\\t\\tst.insert(i);\\n\\t\\t\\t\\tif(st.size()==t)return i;\\n\\t\\t\\t\\tt=st.size();    \\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2347824,
                "title": "python-solution-hashset",
                "content": "```\\nclass Solution(object):\\n    def repeatedCharacter(self, s):\\n        new = set()\\n        for i in s:\\n            if i not in new:\\n                new.add(i)\\n            else:\\n                return i\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def repeatedCharacter(self, s):\\n        new = set()\\n        for i in s:\\n            if i not in new:\\n                new.add(i)\\n            else:\\n                return i\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2346116,
                "title": "easy-javascript-solution-faster-than-100-00",
                "content": "```\\nvar repeatedCharacter = function(s) {\\n    \\n    let single=[];\\n    let duplicate=[];\\n    \\n    for(let i=0; i<s.length; i++){\\n       (single.indexOf(s[i]) === -1) ? single.push(s[i]) :  duplicate.push(s[i]); \\n    }\\n    \\n    return duplicate[0];\\n};\\n```\\n\\nRuntime: 93 ms, faster than 100.00% of JavaScript online submissions for First Letter to Appear Twice.\\nMemory Usage: 42 MB, less than 100.00% of JavaScript online submissions for First Letter to Appear Twice.",
                "solutionTags": [],
                "code": "```\\nvar repeatedCharacter = function(s) {\\n    \\n    let single=[];\\n    let duplicate=[];\\n    \\n    for(let i=0; i<s.length; i++){\\n       (single.indexOf(s[i]) === -1) ? single.push(s[i]) :  duplicate.push(s[i]); \\n    }\\n    \\n    return duplicate[0];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2345705,
                "title": "c-o-n-time-o-1-space",
                "content": "```cpp\\nchar repeatedCharacter(string s) {\\n\\tint bit = 0;\\n\\tfor (char ch : s) {\\n\\t\\tif (bit & 1 << ch - 97) return ch;\\n\\t\\tbit |= 1 << ch - 97;\\n\\t}\\n\\treturn \\'?\\';\\n}\\n```\\n\\n`return` at last line is unnecessary, but compiler will give you an error if without `return`.",
                "solutionTags": [
                    "Bit Manipulation"
                ],
                "code": "```cpp\\nchar repeatedCharacter(string s) {\\n\\tint bit = 0;\\n\\tfor (char ch : s) {\\n\\t\\tif (bit & 1 << ch - 97) return ch;\\n\\t\\tbit |= 1 << ch - 97;\\n\\t}\\n\\treturn \\'?\\';\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2344151,
                "title": "c-easy-hashmap",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char,int>map;\\n        int i=0;\\n        for(i=0;i<s.size();i++)\\n        {\\n            map[s[i]]++;\\n            if(map[s[i]]==2) break;\\n        }\\n        return s[i];\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char,int>map;\\n        int i=0;\\n        for(i=0;i<s.size();i++)\\n        {\\n            map[s[i]]++;\\n            if(map[s[i]]==2) break;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2342803,
                "title": "python-3-one-line-several-ways",
                "content": "Short but slow (`O(n^2)` time, `O(1)` space):\\n\\n```python\\nclass Solution:\\n  def repeatedCharacter(self, s: str) -> str:\\n    return next(c for i,c in enumerate(s) if c in s[:i])\\n```\\n\\nWe can make this faster by using some space (`O(n)` time, `O(n)` space) by using `{}.setdefault`:\\n\\n```python\\nclass Solution:\\n  def repeatedCharacter(self, s: str) -> str:\\n    seen = {}\\n    return next(c for i,c in enumerate(s) if seen.setdefault(c,i) != i)\\n```\\n\\nWe can shorten this down to one line:\\n\\n```python\\nclass Solution:\\n  def repeatedCharacter(self, s: str) -> str:\\n    return next(s[i] for i,x in enumerate(map({}.setdefault, s, count())) if i != x)\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n  def repeatedCharacter(self, s: str) -> str:\\n    return next(c for i,c in enumerate(s) if c in s[:i])\\n```\n```python\\nclass Solution:\\n  def repeatedCharacter(self, s: str) -> str:\\n    seen = {}\\n    return next(c for i,c in enumerate(s) if seen.setdefault(c,i) != i)\\n```\n```python\\nclass Solution:\\n  def repeatedCharacter(self, s: str) -> str:\\n    return next(s[i] for i,x in enumerate(map({}.setdefault, s, count())) if i != x)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2341269,
                "title": "c-solution-100-faster-and-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int n=s.size();\\n        int val[26];\\n        for(int i=0;i<26;i++) val[i]=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            val[s[i]-\\'a\\']++;\\n            if(val[s[i]-\\'a\\']==2)\\n                return s[i];\\n        }\\n        \\n        \\n        return \\'a\\';\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        int n=s.size();\\n        int val[26];\\n        for(int i=0;i<26;i++) val[i]=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            val[s[i]-\\'a\\']++;\\n            if(val[s[i]-\\'a\\']==2)\\n                return s[i];\\n        }\\n        \\n        \\n        return \\'a\\';\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2341257,
                "title": "c-easy-o-n-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char,int> m;\\n        char k;\\n        for(auto x:s){\\n            m[x]++;\\n            if(m[x]==2){\\n                k= x;\\n                break;\\n            }\\n        }\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        unordered_map<char,int> m;\\n        char k;\\n        for(auto x:s){\\n            m[x]++;\\n            if(m[x]==2){\\n                k= x;\\n                break;\\n            }\\n        }\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2336723,
                "title": "easy-java-solution-using-hashset",
                "content": "```\\nclass Solution {\\n    public char repeatedCharacter(String s) {\\n        HashSet<Character> hset = new HashSet<>();\\n        for(char ch:s.toCharArray())\\n        {\\n            if(hset.contains(ch))\\n                return ch;\\n            else\\n                hset.add(ch);\\n        }\\n        return \\' \\';\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public char repeatedCharacter(String s) {\\n        HashSet<Character> hset = new HashSet<>();\\n        for(char ch:s.toCharArray())\\n        {\\n            if(hset.contains(ch))\\n                return ch;\\n            else\\n                hset.add(ch);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2334277,
                "title": "simple-solution-with-set",
                "content": "```\\nclass Solution {\\n    func repeatedCharacter(_ s: String) -> Character {\\n        let a = Array(s)\\n        var set = Set<Character>()\\n        for c in a {\\n            if set.contains(c) {\\n                return c\\n            }\\n            set.insert(c)\\n        }\\n        return \"a\"\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func repeatedCharacter(_ s: String) -> Character {\\n        let a = Array(s)\\n        var set = Set<Character>()\\n        for c in a {\\n            if set.contains(c) {\\n                return c\\n            }\\n            set.insert(c)\\n        }\\n        return \"a\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2333255,
                "title": "use-bit-manipulation-to-make-storage-to-a-single-number-rather-then-o-26",
                "content": "Use Bit Manipulation to make storage to a single number rather then o(26).\\n\\nUse bit manipualtion to manupualt the specific bit, 1st for a, 2nd for b and all 26 bits can be stored in a single number instead of a hashmap or set of size 26.",
                "solutionTags": [
                    "Bit Manipulation"
                ],
                "code": "Use Bit Manipulation to make storage to a single number rather then o(26).\\n\\nUse bit manipualtion to manupualt the specific bit, 1st for a, 2nd for b and all 26 bits can be stored in a single number instead of a hashmap or set of size 26.",
                "codeTag": "Unknown"
            },
            {
                "id": 2332395,
                "title": "easiest-solution-o-n-runtime-100-memory-100",
                "content": "![image](https://assets.leetcode.com/users/images/f8a4720e-324d-4288-b186-4d836fa485ab_1658762517.577138.png)\\n\\n<hr width=\"500px;\" color=\"black\"size=\"10\">\\n\\n```\\nchar repeatedCharacter(char * s){\\n    int val = 0,prev;\\n    for(int i = 0; s[i]; i++){\\n        prev = val;\\n        val = val ^ (1 << (s[i]-\\'a\\'));\\n        if(val < prev)\\n            return s[i];\\n    }\\n    return \\'a\\';\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nchar repeatedCharacter(char * s){\\n    int val = 0,prev;\\n    for(int i = 0; s[i]; i++){\\n        prev = val;\\n        val = val ^ (1 << (s[i]-\\'a\\'));\\n        if(val < prev)\\n            return s[i];\\n    }\\n    return \\'a\\';\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2330323,
                "title": "easy-simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int> temp(26, 0);\\n        for(int i = 0; i < s.size(); i++) {\\n            if(temp[s[i] - \\'a\\'] > 0) {\\n                return s[i];\\n            }\\n            temp[s[i] - \\'a\\']++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    char repeatedCharacter(string s) {\\n        vector<int> temp(26, 0);\\n        for(int i = 0; i < s.size(); i++) {\\n            if(temp[s[i] - \\'a\\'] > 0) {\\n                return s[i];\\n            }\\n            temp[s[i] - \\'a\\']++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2330227,
                "title": "c-0ms-simple-solution-for-beginners-explained",
                "content": "**Method:**\\n\\n* start traversing the array \\n* keep storing the elements into a map\\n* as soon as you find an element whose freq>1\\n* break the loop and return that element\\n\\n\\n**Code:**\\n\\n```\\nclass Solution\\n{\\npublic:\\n    char repeatedCharacter(string s)\\n    {\\n        unordered_map<char, int> mp;\\n        char ans;\\n        for (char c : s)\\n        {\\n            mp[c]++;\\n            if (mp[c] > 1)\\n            {\\n                ans = c;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    char repeatedCharacter(string s)\\n    {\\n        unordered_map<char, int> mp;\\n        char ans;\\n        for (char c : s)\\n        {\\n            mp[c]++;\\n            if (mp[c] > 1)\\n            {\\n                ans = c;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1698466,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1802461,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1751266,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1976347,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 2068507,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1869192,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1831485,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1790187,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1772781,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1760671,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1698466,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1802461,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1751266,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1976347,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 2068507,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1869192,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1831485,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1790187,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1772781,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            },
            {
                "id": 1760671,
                "content": [
                    {
                        "username": "topswe",
                        "content": "Use a set to track previous characters! When a character is already in the set, what does that mean?"
                    },
                    {
                        "username": "eduard92",
                        "content": "Getting an easier problem than this is called nepotism.."
                    },
                    {
                        "username": "Rohan_12",
                        "content": "For beginners, store the character in maps.\\nAs you iterate through the string, if the value is not present, add it in map.\\nIf present, break out of the loop as its the 1st instance of repetition  and return the character at the index."
                    },
                    {
                        "username": "jedi8380",
                        "content": "Thanks, this set me in the right direction!"
                    },
                    {
                        "username": "manchurian",
                        "content": "Opening a thread:\\nCurrently this solution won\\'t work, as the LC solution is based on simple hashMap check and I got to know that for string \"jkodgypoya\" the expected output in LC is \\'o\\', but actually the output should be \\'y\\' (as per my understanding, correct me if I am wrong) . The question has some meat rather then traversing once and using Set. Because using set for above string will give answer as \\'o\\' as second occurrence of y comes later, However the difference between two y\\'s is less than difference between two \\'o\\'.\\nI have posted an answer as well, but that solution isn\\'t working, my solution can be found here : https://leetcode.com/problems/first-letter-to-appear-twice/solutions/3785235/requires-discussion-possible-correction-in-lc-solution-and-tc-expected-output-opening-a-thread/ "
                    },
                    {
                        "username": "Django3",
                        "content": "I\\'m having exactly the same problem. Either there is an inconsistency here or I still don\\'t understand the question."
                    },
                    {
                        "username": "Django3",
                        "content": "\"jkodgypoya\"\nOutput=\"y\"\nExpected=\"o\"\n\nI can't understand whether it's asking for the first character that appears here or the two letters with the least distance between each other.Here the distance of the letter y is smaller than the letter o.\n\n\"regzueqr\" In this text, the output returns as the letter \"e\", which means that among the repeating letters, bring the one with the least distance.\n\nPlease help me D:"
                    },
                    {
                        "username": "user4274N",
                        "content": "Use bitwise operator for 100% fast solution.\\n\\n    public char repeatedCharacter(String s) {\\n        int vector = 0;\\n\\n        for (final char c : s.toCharArray()) {\\n            if ((vector & (1 << (c - \\'a\\'))) > 0) {\\n                return c;\\n            }\\n\\n            vector = vector | (1 << (c - \\'a\\'));\\n        }\\n\\n        return \\' \\';\\n    }"
                    },
                    {
                        "username": "Madhukar_R",
                        "content": "s =\\n\"aabbbbbccddeeffa\"\\nCan someone explain me this test case?\\nthe output is \\'a\\'\\nbut more repeating char is \\'b\\'\\nThe output for this should be \\'b\\' right?\\n"
                    },
                    {
                        "username": "Hrsh_123",
                        "content": "It has asked which FIRST character is appearing twice in the String"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Bro it\\'s not asked which is the has most frequency of letter it has asked that first letter to appear twice in the string \\uD83D\\uDC4C"
                    },
                    {
                        "username": "TigerHCP",
                        "content": "public char test(String s) {\n        int[] ch = new int[26];\n        for(int i=0; i< s.length(); i++){\n            int index = s.charAt(i)-'a';\n            if( ch[index] == 1){\n                char result = s.charAt(i);\n                return result;\n            }\n            ch[index]++;\n            \n        }\n        return s.charAt(0);\n    \n    }"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "it means that from that the current character -\\'a\\'\\nex: \\'c\\'-\\'a\\'"
                    },
                    {
                        "username": "hari0911",
                        "content": "what does the 4th line mean i am a beginner can you explain it\\n-\\'a\\' means?"
                    },
                    {
                        "username": "aadityaagrawal11",
                        "content": " char repeatedCharacter(string s) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])!= mp.end())return s[i];\\n            else mp[s[i]]++;\\n        }\\n        return \\'a\\';\\n    }"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    100%\\nchar repeatedCharacter(string s) {\\n        char ans;\\n        unordered_map<char,bool>visited;\\n        for(int i=0;i<s.length();i++){\\n            if(visited[s[i]]==true){\\n                return s[i];\\n            }\\n            visited[s[i]]=true;\\n        }\\n        // return ans;\\n        return \\'a\\';\\n    }"
                    }
                ]
            }
        ]
    }
]